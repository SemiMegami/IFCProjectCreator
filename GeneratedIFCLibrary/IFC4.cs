using System;
using System.Collections.Generic;
#pragma warning disable VSSpell001 // Spell Check
namespace IFC.IFC4
{
	public abstract class Ifc_Function : Ifc_Entity
	{
		public static IfcSurface? IfcAssociatedSurface(IfcPcurve Arg)
		{
			return null;
		}
		public static List<IfcDirection>? IfcBaseAxis(INTEGER Dim, IfcDirection Axis1, IfcDirection Axis2, IfcDirection Axis3)
		{
			List<IfcDirection> result = new List<IfcDirection>();
			return result;
		}
		public static T? IfcBooleanChoose<T>(BOOLEAN B, T Choice1, T Choice2)
		{
			return default(T);
		}
		public static List<IfcDirection>? IfcBuild2Axes(IfcDirection RefDirection)
		{
			List<IfcDirection> result = new List<IfcDirection>();
			return result;
		}
		public static List<IfcDirection>? IfcBuildAxes(IfcDirection Axis, IfcDirection RefDirection)
		{
			List<IfcDirection> result = new List<IfcDirection>();
			return result;
		}
		public static BOOLEAN? IfcConsecutiveSegments(List<IfcSegmentIndexSelect> Segments)
		{
			BOOLEAN result = new BOOLEAN();
			return result;
		}
		public static BOOLEAN? IfcConstraintsParamBSpline(INTEGER Degree, INTEGER UpKnots, INTEGER UpCp, List<INTEGER> KnotMult, List<IfcParameterValue> Knots)
		{
			BOOLEAN result = new BOOLEAN();
			return result;
		}
		public static IfcDirection? IfcConvertDirectionInto2D(IfcDirection Direction)
		{
			IfcDirection result = new IfcDirection();
			return result;
		}
		public static LOGICAL? IfcCorrectDimensions(IfcUnitEnum m, IfcDimensionalExponents Dim)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcCorrectFillAreaStyle(List<IfcFillStyleSelect> Styles)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcCorrectLocalPlacement(IfcAxis2Placement AxisPlacement, IfcObjectPlacement RelPlacement)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcCorrectObjectAssignment(IfcObjectTypeEnum Constraint, List<IfcObjectDefinition> Objects)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcCorrectUnitAssignment(List<IfcUnit> Units)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static IfcVector? IfcCrossProduct(IfcDirection Arg1, IfcDirection Arg2)
		{
			IfcVector result = new IfcVector();
			return result;
		}
		public static IfcDimensionCount? IfcCurveDim(IfcCurve Curve)
		{
			IfcDimensionCount result = new IfcDimensionCount();
			return result;
		}
		public static BOOLEAN? IfcCurveWeightsPositive(IfcRationalBSplineCurveWithKnots B)
		{
			BOOLEAN result = new BOOLEAN();
			return result;
		}
		public static IfcDimensionalExponents? IfcDeriveDimensionalExponents(List<IfcDerivedUnitElement> UnitElements)
		{
			IfcDimensionalExponents result = new IfcDimensionalExponents();
			return result;
		}
		public static IfcDimensionalExponents? IfcDimensionsForSiUnit(IfcSIUnitName n)
		{
			IfcDimensionalExponents result = new IfcDimensionalExponents();
			return result;
		}
		public static REAL? IfcDotProduct(IfcDirection Arg1, IfcDirection Arg2)
		{
			REAL result = new REAL();
			return result;
		}
		public static IfcDirection? IfcFirstProjAxis(IfcDirection ZAxis, IfcDirection Arg)
		{
			IfcDirection result = new IfcDirection();
			return result;
		}
		public static List<IfcSurface>? IfcGetBasisSurface(IfcCurveOnSurface C)
		{
			List<IfcSurface> result = new List<IfcSurface>();
			return result;
		}
		public static List<T>? IfcListToArray<T>(List<T> Lis, INTEGER Low, INTEGER U)
		{
			List<T> result = new List<T>();
			return result;
		}
		public static LOGICAL? IfcLoopHeadToTail(IfcEdgeLoop ALoop)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static List<List<T>>? IfcMakeArrayOfArray<T>(List<List<T>> Lis, INTEGER Low1, INTEGER U1, INTEGER Low2, INTEGER U2)
		{
			List<List<T>> result = new List<List<T>>();
			return result;
		}
		public static IfcLengthMeasure? IfcMlsTotalThickness(IfcMaterialLayerSet LayerSet)
		{
			IfcLengthMeasure result = new IfcLengthMeasure();
			return result;
		}
		public static IfcVectorOrDirection? IfcNormalise(IfcVectorOrDirection Arg)
		{
			return null;
		}
		public static IfcDirection? IfcOrthogonalComplement(IfcDirection Vec)
		{
			IfcDirection result = new IfcDirection();
			return result;
		}
		public static LOGICAL? IfcPathHeadToTail(IfcPath APath)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static IfcDimensionCount? IfcPointListDim(IfcCartesianPointList PointList)
		{
			IfcDimensionCount result = new IfcDimensionCount();
			return result;
		}
		public static LOGICAL? IfcSameAxis2Placement(IfcAxis2Placement ap1, IfcAxis2Placement ap2, REAL Epsilon)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcSameCartesianPoint(IfcCartesianPoint cp1, IfcCartesianPoint cp2, REAL Epsilon)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcSameDirection(IfcDirection dir1, IfcDirection dir2, REAL Epsilon)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcSameValidPrecision(REAL Epsilon1, REAL Epsilon2)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcSameValue(REAL Value1, REAL Value2, REAL Epsilon)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static IfcVector? IfcScalarTimesVector(REAL Scalar, IfcVectorOrDirection Vec)
		{
			IfcVector result = new IfcVector();
			return result;
		}
		public static IfcDirection? IfcSecondProjAxis(IfcDirection ZAxis, IfcDirection XAxis, IfcDirection Arg)
		{
			IfcDirection result = new IfcDirection();
			return result;
		}
		public static LOGICAL? IfcShapeRepresentationTypes(IfcLabel RepType, List<IfcRepresentationItem> Items)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static BOOLEAN? IfcSurfaceWeightsPositive(IfcRationalBSplineSurfaceWithKnots B)
		{
			BOOLEAN result = new BOOLEAN();
			return result;
		}
		public static LOGICAL? IfcTaperedSweptAreaProfiles(IfcProfileDef StartArea, IfcProfileDef EndArea)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcTopologyRepresentationTypes(IfcLabel RepType, List<IfcRepresentationItem> Items)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcUniqueDefinitionNames(List<IfcRelDefinesByProperties> Relations)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcUniquePropertyName(List<IfcProperty> Properties)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcUniquePropertySetNames(List<IfcPropertySetDefinition> Properties)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcUniquePropertyTemplateNames(List<IfcPropertyTemplate> Properties)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static LOGICAL? IfcUniqueQuantityNames(List<IfcPhysicalQuantity> Properties)
		{
			LOGICAL result = new LOGICAL();
			return result;
		}
		public static IfcVector? IfcVectorDifference(IfcVectorOrDirection Arg1, IfcVectorOrDirection Arg2)
		{
			IfcVector result = new IfcVector();
			return result;
		}
		public static IfcVector? IfcVectorSum(IfcVectorOrDirection Arg1, IfcVectorOrDirection Arg2)
		{
			IfcVector result = new IfcVector();
			return result;
		}
	}
	/// <summary>
	/// TYPE IfcAbsorbedDoseMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcAbsorbedDoseMeasure : REAL, IfcDerivedMeasureValue, Global.IfcAbsorbedDoseMeasure
	{
		public IfcAbsorbedDoseMeasure() : base () { }
		public IfcAbsorbedDoseMeasure(double value) : base (value) { }
		public static implicit operator IfcAbsorbedDoseMeasure(double value) { return new IfcAbsorbedDoseMeasure(value);}
		public static implicit operator double(IfcAbsorbedDoseMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAccelerationMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcAccelerationMeasure : REAL, IfcDerivedMeasureValue, Global.IfcAccelerationMeasure
	{
		public IfcAccelerationMeasure() : base () { }
		public IfcAccelerationMeasure(double value) : base (value) { }
		public static implicit operator IfcAccelerationMeasure(double value) { return new IfcAccelerationMeasure(value);}
		public static implicit operator double(IfcAccelerationMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAmountOfSubstanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcAmountOfSubstanceMeasure : REAL, IfcMeasureValue, Global.IfcAmountOfSubstanceMeasure
	{
		public IfcAmountOfSubstanceMeasure() : base () { }
		public IfcAmountOfSubstanceMeasure(double value) : base (value) { }
		public static implicit operator IfcAmountOfSubstanceMeasure(double value) { return new IfcAmountOfSubstanceMeasure(value);}
		public static implicit operator double(IfcAmountOfSubstanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAngularVelocityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcAngularVelocityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcAngularVelocityMeasure
	{
		public IfcAngularVelocityMeasure() : base () { }
		public IfcAngularVelocityMeasure(double value) : base (value) { }
		public static implicit operator IfcAngularVelocityMeasure(double value) { return new IfcAngularVelocityMeasure(value);}
		public static implicit operator double(IfcAngularVelocityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAreaDensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcAreaDensityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcAreaDensityMeasure
	{
		public IfcAreaDensityMeasure() : base () { }
		public IfcAreaDensityMeasure(double value) : base (value) { }
		public static implicit operator IfcAreaDensityMeasure(double value) { return new IfcAreaDensityMeasure(value);}
		public static implicit operator double(IfcAreaDensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAreaMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcAreaMeasure : REAL, IfcMeasureValue, Global.IfcAreaMeasure
	{
		public IfcAreaMeasure() : base () { }
		public IfcAreaMeasure(double value) : base (value) { }
		public static implicit operator IfcAreaMeasure(double value) { return new IfcAreaMeasure(value);}
		public static implicit operator double(IfcAreaMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBinary = BINARY;
	/// END_TYPE;
	/// <summary>
	public class IfcBinary : BINARY, IfcSimpleValue, Global.IfcBinary
	{
		public IfcBinary() : base () { }
		public IfcBinary(int value) : base (value) { }
		public static implicit operator IfcBinary(int value) { return new IfcBinary(value);}
		public static implicit operator int(IfcBinary value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBoolean = BOOLEAN;
	/// END_TYPE;
	/// <summary>
	public class IfcBoolean : BOOLEAN, IfcModulusOfRotationalSubgradeReactionSelect, IfcModulusOfSubgradeReactionSelect, IfcModulusOfTranslationalSubgradeReactionSelect, IfcRotationalStiffnessSelect, IfcSimpleValue, IfcTranslationalStiffnessSelect, IfcWarpingStiffnessSelect, Global.IfcBoolean
	{
		public IfcBoolean() : base () { }
		public IfcBoolean(bool value) : base (value) { }
		public static implicit operator IfcBoolean(bool value) { return new IfcBoolean(value);}
		public static implicit operator bool(IfcBoolean value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBoxAlignment = IfcLabel;
	/// WHERE
	/// WR1 : SELF IN ['top-left', 'top-middle', 'top-right', 'middle-left', 'center', 'middle-right', 'bottom-left', 'bottom-middle', 'bottom-right'];
	/// END_TYPE;
	/// <summary>
	public class IfcBoxAlignment : IfcLabel, Global.IfcBoxAlignment
	{
		public IfcBoxAlignment() : base () { }
		public IfcBoxAlignment(string value) : base (value) { }
		public static implicit operator IfcBoxAlignment(string value) { return new IfcBoxAlignment(value);}
		public static implicit operator string(IfcBoxAlignment value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCardinalPointReference = INTEGER;
	/// WHERE
	/// GreaterThanZero : SELF > 0;
	/// END_TYPE;
	/// <summary>
	public class IfcCardinalPointReference : INTEGER, Global.IfcCardinalPointReference
	{
		public IfcCardinalPointReference() : base () { }
		public IfcCardinalPointReference(int value) : base (value) { }
		public static implicit operator IfcCardinalPointReference(int value) { return new IfcCardinalPointReference(value);}
		public static implicit operator int(IfcCardinalPointReference value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcContextDependentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcContextDependentMeasure : REAL, IfcMeasureValue, Global.IfcContextDependentMeasure
	{
		public IfcContextDependentMeasure() : base () { }
		public IfcContextDependentMeasure(double value) : base (value) { }
		public static implicit operator IfcContextDependentMeasure(double value) { return new IfcContextDependentMeasure(value);}
		public static implicit operator double(IfcContextDependentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCountMeasure = NUMBER;
	/// END_TYPE;
	/// <summary>
	public class IfcCountMeasure : NUMBER, IfcMeasureValue, Global.IfcCountMeasure
	{
		public IfcCountMeasure() : base () { }
		public IfcCountMeasure(double value) : base (value) { }
		public static implicit operator IfcCountMeasure(double value) { return new IfcCountMeasure(value);}
		public static implicit operator double(IfcCountMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCurvatureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcCurvatureMeasure : REAL, IfcDerivedMeasureValue, Global.IfcCurvatureMeasure
	{
		public IfcCurvatureMeasure() : base () { }
		public IfcCurvatureMeasure(double value) : base (value) { }
		public static implicit operator IfcCurvatureMeasure(double value) { return new IfcCurvatureMeasure(value);}
		public static implicit operator double(IfcCurvatureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDate = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcDate : STRING, IfcSimpleValue, Global.IfcDate
	{
		public IfcDate() : base () { }
		public IfcDate(string value) : base (value) { }
		public static implicit operator IfcDate(string value) { return new IfcDate(value);}
		public static implicit operator string(IfcDate value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDateTime = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcDateTime : STRING, IfcSimpleValue, Global.IfcDateTime
	{
		public IfcDateTime() : base () { }
		public IfcDateTime(string value) : base (value) { }
		public static implicit operator IfcDateTime(string value) { return new IfcDateTime(value);}
		public static implicit operator string(IfcDateTime value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDayInMonthNumber = INTEGER;
	/// WHERE
	/// ValidRange : {1 <= SELF <= 31};
	/// END_TYPE;
	/// <summary>
	public class IfcDayInMonthNumber : INTEGER, Global.IfcDayInMonthNumber
	{
		public IfcDayInMonthNumber() : base () { }
		public IfcDayInMonthNumber(int value) : base (value) { }
		public static implicit operator IfcDayInMonthNumber(int value) { return new IfcDayInMonthNumber(value);}
		public static implicit operator int(IfcDayInMonthNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDayInWeekNumber = INTEGER;
	/// WHERE
	/// ValidRange : {1 <= SELF <= 7};
	/// END_TYPE;
	/// <summary>
	public class IfcDayInWeekNumber : INTEGER, Global.IfcDayInWeekNumber
	{
		public IfcDayInWeekNumber() : base () { }
		public IfcDayInWeekNumber(int value) : base (value) { }
		public static implicit operator IfcDayInWeekNumber(int value) { return new IfcDayInWeekNumber(value);}
		public static implicit operator int(IfcDayInWeekNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDescriptiveMeasure = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcDescriptiveMeasure : STRING, IfcMeasureValue, IfcSizeSelect, Global.IfcDescriptiveMeasure
	{
		public IfcDescriptiveMeasure() : base () { }
		public IfcDescriptiveMeasure(string value) : base (value) { }
		public static implicit operator IfcDescriptiveMeasure(string value) { return new IfcDescriptiveMeasure(value);}
		public static implicit operator string(IfcDescriptiveMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDimensionCount = INTEGER;
	/// WHERE
	/// WR1 : { 0 < SELF <= 3 };
	/// END_TYPE;
	/// <summary>
	public class IfcDimensionCount : INTEGER, Global.IfcDimensionCount
	{
		public IfcDimensionCount() : base () { }
		public IfcDimensionCount(int value) : base (value) { }
		public static implicit operator IfcDimensionCount(int value) { return new IfcDimensionCount(value);}
		public static implicit operator int(IfcDimensionCount value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoseEquivalentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcDoseEquivalentMeasure : REAL, IfcDerivedMeasureValue, Global.IfcDoseEquivalentMeasure
	{
		public IfcDoseEquivalentMeasure() : base () { }
		public IfcDoseEquivalentMeasure(double value) : base (value) { }
		public static implicit operator IfcDoseEquivalentMeasure(double value) { return new IfcDoseEquivalentMeasure(value);}
		public static implicit operator double(IfcDoseEquivalentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDuration = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcDuration : STRING, IfcSimpleValue, IfcTimeOrRatioSelect, Global.IfcDuration
	{
		public IfcDuration() : base () { }
		public IfcDuration(string value) : base (value) { }
		public static implicit operator IfcDuration(string value) { return new IfcDuration(value);}
		public static implicit operator string(IfcDuration value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDynamicViscosityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcDynamicViscosityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcDynamicViscosityMeasure
	{
		public IfcDynamicViscosityMeasure() : base () { }
		public IfcDynamicViscosityMeasure(double value) : base (value) { }
		public static implicit operator IfcDynamicViscosityMeasure(double value) { return new IfcDynamicViscosityMeasure(value);}
		public static implicit operator double(IfcDynamicViscosityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricCapacitanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricCapacitanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcElectricCapacitanceMeasure
	{
		public IfcElectricCapacitanceMeasure() : base () { }
		public IfcElectricCapacitanceMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricCapacitanceMeasure(double value) { return new IfcElectricCapacitanceMeasure(value);}
		public static implicit operator double(IfcElectricCapacitanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricChargeMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricChargeMeasure : REAL, IfcDerivedMeasureValue, Global.IfcElectricChargeMeasure
	{
		public IfcElectricChargeMeasure() : base () { }
		public IfcElectricChargeMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricChargeMeasure(double value) { return new IfcElectricChargeMeasure(value);}
		public static implicit operator double(IfcElectricChargeMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricConductanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricConductanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcElectricConductanceMeasure
	{
		public IfcElectricConductanceMeasure() : base () { }
		public IfcElectricConductanceMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricConductanceMeasure(double value) { return new IfcElectricConductanceMeasure(value);}
		public static implicit operator double(IfcElectricConductanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricCurrentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricCurrentMeasure : REAL, IfcMeasureValue, Global.IfcElectricCurrentMeasure
	{
		public IfcElectricCurrentMeasure() : base () { }
		public IfcElectricCurrentMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricCurrentMeasure(double value) { return new IfcElectricCurrentMeasure(value);}
		public static implicit operator double(IfcElectricCurrentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricResistanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricResistanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcElectricResistanceMeasure
	{
		public IfcElectricResistanceMeasure() : base () { }
		public IfcElectricResistanceMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricResistanceMeasure(double value) { return new IfcElectricResistanceMeasure(value);}
		public static implicit operator double(IfcElectricResistanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricVoltageMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricVoltageMeasure : REAL, IfcDerivedMeasureValue, Global.IfcElectricVoltageMeasure
	{
		public IfcElectricVoltageMeasure() : base () { }
		public IfcElectricVoltageMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricVoltageMeasure(double value) { return new IfcElectricVoltageMeasure(value);}
		public static implicit operator double(IfcElectricVoltageMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEnergyMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcEnergyMeasure : REAL, IfcDerivedMeasureValue, Global.IfcEnergyMeasure
	{
		public IfcEnergyMeasure() : base () { }
		public IfcEnergyMeasure(double value) : base (value) { }
		public static implicit operator IfcEnergyMeasure(double value) { return new IfcEnergyMeasure(value);}
		public static implicit operator double(IfcEnergyMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFontStyle = STRING;
	/// WHERE
	/// WR1 : SELF IN ['normal','italic','oblique'];
	/// END_TYPE;
	/// <summary>
	public class IfcFontStyle : STRING, Global.IfcFontStyle
	{
		public IfcFontStyle() : base () { }
		public IfcFontStyle(string value) : base (value) { }
		public static implicit operator IfcFontStyle(string value) { return new IfcFontStyle(value);}
		public static implicit operator string(IfcFontStyle value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFontVariant = STRING;
	/// WHERE
	/// WR1 : SELF IN ['normal','small-caps'];
	/// END_TYPE;
	/// <summary>
	public class IfcFontVariant : STRING, Global.IfcFontVariant
	{
		public IfcFontVariant() : base () { }
		public IfcFontVariant(string value) : base (value) { }
		public static implicit operator IfcFontVariant(string value) { return new IfcFontVariant(value);}
		public static implicit operator string(IfcFontVariant value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFontWeight = STRING;
	/// WHERE
	/// WR1 : SELF IN ['normal','small-caps','100','200','300','400','500','600','700','800','900'];
	/// END_TYPE;
	/// <summary>
	public class IfcFontWeight : STRING, Global.IfcFontWeight
	{
		public IfcFontWeight() : base () { }
		public IfcFontWeight(string value) : base (value) { }
		public static implicit operator IfcFontWeight(string value) { return new IfcFontWeight(value);}
		public static implicit operator string(IfcFontWeight value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcForceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcForceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcForceMeasure
	{
		public IfcForceMeasure() : base () { }
		public IfcForceMeasure(double value) : base (value) { }
		public static implicit operator IfcForceMeasure(double value) { return new IfcForceMeasure(value);}
		public static implicit operator double(IfcForceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFrequencyMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcFrequencyMeasure : REAL, IfcDerivedMeasureValue, Global.IfcFrequencyMeasure
	{
		public IfcFrequencyMeasure() : base () { }
		public IfcFrequencyMeasure(double value) : base (value) { }
		public static implicit operator IfcFrequencyMeasure(double value) { return new IfcFrequencyMeasure(value);}
		public static implicit operator double(IfcFrequencyMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGloballyUniqueId = STRING(22) FIXED;
	/// END_TYPE;
	/// <summary>
	public class IfcGloballyUniqueId : STRING, Global.IfcGloballyUniqueId
	{
		public IfcGloballyUniqueId() : base () { }
		public IfcGloballyUniqueId(string value) : base (value) { }
		public static implicit operator IfcGloballyUniqueId(string value) { return new IfcGloballyUniqueId(value);}
		public static implicit operator string(IfcGloballyUniqueId value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHeatFluxDensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcHeatFluxDensityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcHeatFluxDensityMeasure
	{
		public IfcHeatFluxDensityMeasure() : base () { }
		public IfcHeatFluxDensityMeasure(double value) : base (value) { }
		public static implicit operator IfcHeatFluxDensityMeasure(double value) { return new IfcHeatFluxDensityMeasure(value);}
		public static implicit operator double(IfcHeatFluxDensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHeatingValueMeasure = REAL;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IfcHeatingValueMeasure : REAL, IfcDerivedMeasureValue, Global.IfcHeatingValueMeasure
	{
		public IfcHeatingValueMeasure() : base () { }
		public IfcHeatingValueMeasure(double value) : base (value) { }
		public static implicit operator IfcHeatingValueMeasure(double value) { return new IfcHeatingValueMeasure(value);}
		public static implicit operator double(IfcHeatingValueMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIdentifier = STRING(255);
	/// END_TYPE;
	/// <summary>
	public class IfcIdentifier : STRING, IfcSimpleValue, Global.IfcIdentifier
	{
		public IfcIdentifier() : base () { }
		public IfcIdentifier(string value) : base (value) { }
		public static implicit operator IfcIdentifier(string value) { return new IfcIdentifier(value);}
		public static implicit operator string(IfcIdentifier value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIlluminanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcIlluminanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcIlluminanceMeasure
	{
		public IfcIlluminanceMeasure() : base () { }
		public IfcIlluminanceMeasure(double value) : base (value) { }
		public static implicit operator IfcIlluminanceMeasure(double value) { return new IfcIlluminanceMeasure(value);}
		public static implicit operator double(IfcIlluminanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInductanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcInductanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcInductanceMeasure
	{
		public IfcInductanceMeasure() : base () { }
		public IfcInductanceMeasure(double value) : base (value) { }
		public static implicit operator IfcInductanceMeasure(double value) { return new IfcInductanceMeasure(value);}
		public static implicit operator double(IfcInductanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInteger = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IfcInteger : INTEGER, IfcSimpleValue, Global.IfcInteger
	{
		public IfcInteger() : base () { }
		public IfcInteger(int value) : base (value) { }
		public static implicit operator IfcInteger(int value) { return new IfcInteger(value);}
		public static implicit operator int(IfcInteger value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIntegerCountRateMeasure = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IfcIntegerCountRateMeasure : INTEGER, IfcDerivedMeasureValue, Global.IfcIntegerCountRateMeasure
	{
		public IfcIntegerCountRateMeasure() : base () { }
		public IfcIntegerCountRateMeasure(int value) : base (value) { }
		public static implicit operator IfcIntegerCountRateMeasure(int value) { return new IfcIntegerCountRateMeasure(value);}
		public static implicit operator int(IfcIntegerCountRateMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIonConcentrationMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcIonConcentrationMeasure : REAL, IfcDerivedMeasureValue, Global.IfcIonConcentrationMeasure
	{
		public IfcIonConcentrationMeasure() : base () { }
		public IfcIonConcentrationMeasure(double value) : base (value) { }
		public static implicit operator IfcIonConcentrationMeasure(double value) { return new IfcIonConcentrationMeasure(value);}
		public static implicit operator double(IfcIonConcentrationMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIsothermalMoistureCapacityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcIsothermalMoistureCapacityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcIsothermalMoistureCapacityMeasure
	{
		public IfcIsothermalMoistureCapacityMeasure() : base () { }
		public IfcIsothermalMoistureCapacityMeasure(double value) : base (value) { }
		public static implicit operator IfcIsothermalMoistureCapacityMeasure(double value) { return new IfcIsothermalMoistureCapacityMeasure(value);}
		public static implicit operator double(IfcIsothermalMoistureCapacityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcKinematicViscosityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcKinematicViscosityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcKinematicViscosityMeasure
	{
		public IfcKinematicViscosityMeasure() : base () { }
		public IfcKinematicViscosityMeasure(double value) : base (value) { }
		public static implicit operator IfcKinematicViscosityMeasure(double value) { return new IfcKinematicViscosityMeasure(value);}
		public static implicit operator double(IfcKinematicViscosityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLabel = STRING(255);
	/// END_TYPE;
	/// <summary>
	public class IfcLabel : STRING, IfcSimpleValue, Global.IfcLabel
	{
		public IfcLabel() : base () { }
		public IfcLabel(string value) : base (value) { }
		public static implicit operator IfcLabel(string value) { return new IfcLabel(value);}
		public static implicit operator string(IfcLabel value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLanguageId = IfcIdentifier;
	/// END_TYPE;
	/// <summary>
	public class IfcLanguageId : IfcIdentifier, Global.IfcLanguageId
	{
		public IfcLanguageId() : base () { }
		public IfcLanguageId(string value) : base (value) { }
		public static implicit operator IfcLanguageId(string value) { return new IfcLanguageId(value);}
		public static implicit operator string(IfcLanguageId value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLengthMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLengthMeasure : REAL, IfcBendingParameterSelect, IfcMeasureValue, IfcSizeSelect, Global.IfcLengthMeasure
	{
		public IfcLengthMeasure() : base () { }
		public IfcLengthMeasure(double value) : base (value) { }
		public static implicit operator IfcLengthMeasure(double value) { return new IfcLengthMeasure(value);}
		public static implicit operator double(IfcLengthMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearForceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLinearForceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcLinearForceMeasure
	{
		public IfcLinearForceMeasure() : base () { }
		public IfcLinearForceMeasure(double value) : base (value) { }
		public static implicit operator IfcLinearForceMeasure(double value) { return new IfcLinearForceMeasure(value);}
		public static implicit operator double(IfcLinearForceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearMomentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLinearMomentMeasure : REAL, IfcDerivedMeasureValue, Global.IfcLinearMomentMeasure
	{
		public IfcLinearMomentMeasure() : base () { }
		public IfcLinearMomentMeasure(double value) : base (value) { }
		public static implicit operator IfcLinearMomentMeasure(double value) { return new IfcLinearMomentMeasure(value);}
		public static implicit operator double(IfcLinearMomentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearStiffnessMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLinearStiffnessMeasure : REAL, IfcDerivedMeasureValue, IfcTranslationalStiffnessSelect, Global.IfcLinearStiffnessMeasure
	{
		public IfcLinearStiffnessMeasure() : base () { }
		public IfcLinearStiffnessMeasure(double value) : base (value) { }
		public static implicit operator IfcLinearStiffnessMeasure(double value) { return new IfcLinearStiffnessMeasure(value);}
		public static implicit operator double(IfcLinearStiffnessMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearVelocityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLinearVelocityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcLinearVelocityMeasure
	{
		public IfcLinearVelocityMeasure() : base () { }
		public IfcLinearVelocityMeasure(double value) : base (value) { }
		public static implicit operator IfcLinearVelocityMeasure(double value) { return new IfcLinearVelocityMeasure(value);}
		public static implicit operator double(IfcLinearVelocityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLogical = LOGICAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLogical : LOGICAL, IfcSimpleValue, Global.IfcLogical
	{
		public IfcLogical() : base () { }
		public IfcLogical(bool value) : base (value) { }
		public static implicit operator IfcLogical(bool value) { return new IfcLogical(value);}
		public static implicit operator bool(IfcLogical value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLuminousFluxMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLuminousFluxMeasure : REAL, IfcDerivedMeasureValue, Global.IfcLuminousFluxMeasure
	{
		public IfcLuminousFluxMeasure() : base () { }
		public IfcLuminousFluxMeasure(double value) : base (value) { }
		public static implicit operator IfcLuminousFluxMeasure(double value) { return new IfcLuminousFluxMeasure(value);}
		public static implicit operator double(IfcLuminousFluxMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLuminousIntensityDistributionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLuminousIntensityDistributionMeasure : REAL, IfcDerivedMeasureValue, Global.IfcLuminousIntensityDistributionMeasure
	{
		public IfcLuminousIntensityDistributionMeasure() : base () { }
		public IfcLuminousIntensityDistributionMeasure(double value) : base (value) { }
		public static implicit operator IfcLuminousIntensityDistributionMeasure(double value) { return new IfcLuminousIntensityDistributionMeasure(value);}
		public static implicit operator double(IfcLuminousIntensityDistributionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLuminousIntensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLuminousIntensityMeasure : REAL, IfcMeasureValue, Global.IfcLuminousIntensityMeasure
	{
		public IfcLuminousIntensityMeasure() : base () { }
		public IfcLuminousIntensityMeasure(double value) : base (value) { }
		public static implicit operator IfcLuminousIntensityMeasure(double value) { return new IfcLuminousIntensityMeasure(value);}
		public static implicit operator double(IfcLuminousIntensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMagneticFluxDensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMagneticFluxDensityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMagneticFluxDensityMeasure
	{
		public IfcMagneticFluxDensityMeasure() : base () { }
		public IfcMagneticFluxDensityMeasure(double value) : base (value) { }
		public static implicit operator IfcMagneticFluxDensityMeasure(double value) { return new IfcMagneticFluxDensityMeasure(value);}
		public static implicit operator double(IfcMagneticFluxDensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMagneticFluxMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMagneticFluxMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMagneticFluxMeasure
	{
		public IfcMagneticFluxMeasure() : base () { }
		public IfcMagneticFluxMeasure(double value) : base (value) { }
		public static implicit operator IfcMagneticFluxMeasure(double value) { return new IfcMagneticFluxMeasure(value);}
		public static implicit operator double(IfcMagneticFluxMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassDensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMassDensityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMassDensityMeasure
	{
		public IfcMassDensityMeasure() : base () { }
		public IfcMassDensityMeasure(double value) : base (value) { }
		public static implicit operator IfcMassDensityMeasure(double value) { return new IfcMassDensityMeasure(value);}
		public static implicit operator double(IfcMassDensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassFlowRateMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMassFlowRateMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMassFlowRateMeasure
	{
		public IfcMassFlowRateMeasure() : base () { }
		public IfcMassFlowRateMeasure(double value) : base (value) { }
		public static implicit operator IfcMassFlowRateMeasure(double value) { return new IfcMassFlowRateMeasure(value);}
		public static implicit operator double(IfcMassFlowRateMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMassMeasure : REAL, IfcMeasureValue, Global.IfcMassMeasure
	{
		public IfcMassMeasure() : base () { }
		public IfcMassMeasure(double value) : base (value) { }
		public static implicit operator IfcMassMeasure(double value) { return new IfcMassMeasure(value);}
		public static implicit operator double(IfcMassMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassPerLengthMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMassPerLengthMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMassPerLengthMeasure
	{
		public IfcMassPerLengthMeasure() : base () { }
		public IfcMassPerLengthMeasure(double value) : base (value) { }
		public static implicit operator IfcMassPerLengthMeasure(double value) { return new IfcMassPerLengthMeasure(value);}
		public static implicit operator double(IfcMassPerLengthMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfElasticityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcModulusOfElasticityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcModulusOfElasticityMeasure
	{
		public IfcModulusOfElasticityMeasure() : base () { }
		public IfcModulusOfElasticityMeasure(double value) : base (value) { }
		public static implicit operator IfcModulusOfElasticityMeasure(double value) { return new IfcModulusOfElasticityMeasure(value);}
		public static implicit operator double(IfcModulusOfElasticityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfLinearSubgradeReactionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcModulusOfLinearSubgradeReactionMeasure : REAL, IfcDerivedMeasureValue, IfcModulusOfTranslationalSubgradeReactionSelect, Global.IfcModulusOfLinearSubgradeReactionMeasure
	{
		public IfcModulusOfLinearSubgradeReactionMeasure() : base () { }
		public IfcModulusOfLinearSubgradeReactionMeasure(double value) : base (value) { }
		public static implicit operator IfcModulusOfLinearSubgradeReactionMeasure(double value) { return new IfcModulusOfLinearSubgradeReactionMeasure(value);}
		public static implicit operator double(IfcModulusOfLinearSubgradeReactionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfRotationalSubgradeReactionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcModulusOfRotationalSubgradeReactionMeasure : REAL, IfcDerivedMeasureValue, IfcModulusOfRotationalSubgradeReactionSelect, Global.IfcModulusOfRotationalSubgradeReactionMeasure
	{
		public IfcModulusOfRotationalSubgradeReactionMeasure() : base () { }
		public IfcModulusOfRotationalSubgradeReactionMeasure(double value) : base (value) { }
		public static implicit operator IfcModulusOfRotationalSubgradeReactionMeasure(double value) { return new IfcModulusOfRotationalSubgradeReactionMeasure(value);}
		public static implicit operator double(IfcModulusOfRotationalSubgradeReactionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfSubgradeReactionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcModulusOfSubgradeReactionMeasure : REAL, IfcDerivedMeasureValue, IfcModulusOfSubgradeReactionSelect, Global.IfcModulusOfSubgradeReactionMeasure
	{
		public IfcModulusOfSubgradeReactionMeasure() : base () { }
		public IfcModulusOfSubgradeReactionMeasure(double value) : base (value) { }
		public static implicit operator IfcModulusOfSubgradeReactionMeasure(double value) { return new IfcModulusOfSubgradeReactionMeasure(value);}
		public static implicit operator double(IfcModulusOfSubgradeReactionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMoistureDiffusivityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMoistureDiffusivityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMoistureDiffusivityMeasure
	{
		public IfcMoistureDiffusivityMeasure() : base () { }
		public IfcMoistureDiffusivityMeasure(double value) : base (value) { }
		public static implicit operator IfcMoistureDiffusivityMeasure(double value) { return new IfcMoistureDiffusivityMeasure(value);}
		public static implicit operator double(IfcMoistureDiffusivityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMolecularWeightMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMolecularWeightMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMolecularWeightMeasure
	{
		public IfcMolecularWeightMeasure() : base () { }
		public IfcMolecularWeightMeasure(double value) : base (value) { }
		public static implicit operator IfcMolecularWeightMeasure(double value) { return new IfcMolecularWeightMeasure(value);}
		public static implicit operator double(IfcMolecularWeightMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMomentOfInertiaMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMomentOfInertiaMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMomentOfInertiaMeasure
	{
		public IfcMomentOfInertiaMeasure() : base () { }
		public IfcMomentOfInertiaMeasure(double value) : base (value) { }
		public static implicit operator IfcMomentOfInertiaMeasure(double value) { return new IfcMomentOfInertiaMeasure(value);}
		public static implicit operator double(IfcMomentOfInertiaMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMonetaryMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMonetaryMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMonetaryMeasure
	{
		public IfcMonetaryMeasure() : base () { }
		public IfcMonetaryMeasure(double value) : base (value) { }
		public static implicit operator IfcMonetaryMeasure(double value) { return new IfcMonetaryMeasure(value);}
		public static implicit operator double(IfcMonetaryMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMonthInYearNumber = INTEGER;
	/// WHERE
	/// ValidRange : {1 <= SELF <= 12};
	/// END_TYPE;
	/// <summary>
	public class IfcMonthInYearNumber : INTEGER, Global.IfcMonthInYearNumber
	{
		public IfcMonthInYearNumber() : base () { }
		public IfcMonthInYearNumber(int value) : base (value) { }
		public static implicit operator IfcMonthInYearNumber(int value) { return new IfcMonthInYearNumber(value);}
		public static implicit operator int(IfcMonthInYearNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcNonNegativeLengthMeasure = IfcLengthMeasure;
	/// WHERE
	/// NotNegative : SELF >= 0.;
	/// END_TYPE;
	/// <summary>
	public class IfcNonNegativeLengthMeasure : IfcLengthMeasure, IfcMeasureValue, Global.IfcNonNegativeLengthMeasure
	{
		public IfcNonNegativeLengthMeasure() : base () { }
		public IfcNonNegativeLengthMeasure(double value) : base (value) { }
		public static implicit operator IfcNonNegativeLengthMeasure(double value) { return new IfcNonNegativeLengthMeasure(value);}
		public static implicit operator double(IfcNonNegativeLengthMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcNormalisedRatioMeasure = IfcRatioMeasure;
	/// WHERE
	/// WR1 : {0.0 <= SELF <= 1.0};
	/// END_TYPE;
	/// <summary>
	public class IfcNormalisedRatioMeasure : IfcRatioMeasure, IfcColourOrFactor, IfcMeasureValue, IfcSizeSelect, Global.IfcNormalisedRatioMeasure
	{
		public IfcNormalisedRatioMeasure() : base () { }
		public IfcNormalisedRatioMeasure(double value) : base (value) { }
		public static implicit operator IfcNormalisedRatioMeasure(double value) { return new IfcNormalisedRatioMeasure(value);}
		public static implicit operator double(IfcNormalisedRatioMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcNumericMeasure = NUMBER;
	/// END_TYPE;
	/// <summary>
	public class IfcNumericMeasure : NUMBER, IfcMeasureValue, Global.IfcNumericMeasure
	{
		public IfcNumericMeasure() : base () { }
		public IfcNumericMeasure(double value) : base (value) { }
		public static implicit operator IfcNumericMeasure(double value) { return new IfcNumericMeasure(value);}
		public static implicit operator double(IfcNumericMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPHMeasure = REAL;
	/// WHERE
	/// WR21 : {0.0 <= SELF <= 14.0};
	/// END_TYPE;
	/// <summary>
	public class IfcPHMeasure : REAL, IfcDerivedMeasureValue, Global.IfcPHMeasure
	{
		public IfcPHMeasure() : base () { }
		public IfcPHMeasure(double value) : base (value) { }
		public static implicit operator IfcPHMeasure(double value) { return new IfcPHMeasure(value);}
		public static implicit operator double(IfcPHMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcParameterValue = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcParameterValue : REAL, IfcMeasureValue, IfcTrimmingSelect, Global.IfcParameterValue
	{
		public IfcParameterValue() : base () { }
		public IfcParameterValue(double value) : base (value) { }
		public static implicit operator IfcParameterValue(double value) { return new IfcParameterValue(value);}
		public static implicit operator double(IfcParameterValue value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPlanarForceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcPlanarForceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcPlanarForceMeasure
	{
		public IfcPlanarForceMeasure() : base () { }
		public IfcPlanarForceMeasure(double value) : base (value) { }
		public static implicit operator IfcPlanarForceMeasure(double value) { return new IfcPlanarForceMeasure(value);}
		public static implicit operator double(IfcPlanarForceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPlaneAngleMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcPlaneAngleMeasure : REAL, IfcBendingParameterSelect, IfcMeasureValue, Global.IfcPlaneAngleMeasure
	{
		public IfcPlaneAngleMeasure() : base () { }
		public IfcPlaneAngleMeasure(double value) : base (value) { }
		public static implicit operator IfcPlaneAngleMeasure(double value) { return new IfcPlaneAngleMeasure(value);}
		public static implicit operator double(IfcPlaneAngleMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPositiveInteger = IfcInteger;
	/// WHERE
	/// WR1 : SELF > 0;
	/// END_TYPE;
	/// <summary>
	public class IfcPositiveInteger : IfcInteger, IfcSimpleValue, Global.IfcPositiveInteger
	{
		public IfcPositiveInteger() : base () { }
		public IfcPositiveInteger(int value) : base (value) { }
		public static implicit operator IfcPositiveInteger(int value) { return new IfcPositiveInteger(value);}
		public static implicit operator int(IfcPositiveInteger value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPositiveLengthMeasure = IfcLengthMeasure;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IfcPositiveLengthMeasure : IfcLengthMeasure, IfcHatchLineDistanceSelect, IfcMeasureValue, IfcSizeSelect, Global.IfcPositiveLengthMeasure
	{
		public IfcPositiveLengthMeasure() : base () { }
		public IfcPositiveLengthMeasure(double value) : base (value) { }
		public static implicit operator IfcPositiveLengthMeasure(double value) { return new IfcPositiveLengthMeasure(value);}
		public static implicit operator double(IfcPositiveLengthMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPositivePlaneAngleMeasure = IfcPlaneAngleMeasure;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IfcPositivePlaneAngleMeasure : IfcPlaneAngleMeasure, IfcMeasureValue, Global.IfcPositivePlaneAngleMeasure
	{
		public IfcPositivePlaneAngleMeasure() : base () { }
		public IfcPositivePlaneAngleMeasure(double value) : base (value) { }
		public static implicit operator IfcPositivePlaneAngleMeasure(double value) { return new IfcPositivePlaneAngleMeasure(value);}
		public static implicit operator double(IfcPositivePlaneAngleMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPositiveRatioMeasure = IfcRatioMeasure;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IfcPositiveRatioMeasure : IfcRatioMeasure, IfcMeasureValue, IfcSizeSelect, Global.IfcPositiveRatioMeasure
	{
		public IfcPositiveRatioMeasure() : base () { }
		public IfcPositiveRatioMeasure(double value) : base (value) { }
		public static implicit operator IfcPositiveRatioMeasure(double value) { return new IfcPositiveRatioMeasure(value);}
		public static implicit operator double(IfcPositiveRatioMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPowerMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcPowerMeasure : REAL, IfcDerivedMeasureValue, Global.IfcPowerMeasure
	{
		public IfcPowerMeasure() : base () { }
		public IfcPowerMeasure(double value) : base (value) { }
		public static implicit operator IfcPowerMeasure(double value) { return new IfcPowerMeasure(value);}
		public static implicit operator double(IfcPowerMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPresentableText = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcPresentableText : STRING, Global.IfcPresentableText
	{
		public IfcPresentableText() : base () { }
		public IfcPresentableText(string value) : base (value) { }
		public static implicit operator IfcPresentableText(string value) { return new IfcPresentableText(value);}
		public static implicit operator string(IfcPresentableText value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPressureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcPressureMeasure : REAL, IfcDerivedMeasureValue, Global.IfcPressureMeasure
	{
		public IfcPressureMeasure() : base () { }
		public IfcPressureMeasure(double value) : base (value) { }
		public static implicit operator IfcPressureMeasure(double value) { return new IfcPressureMeasure(value);}
		public static implicit operator double(IfcPressureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRadioActivityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcRadioActivityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcRadioActivityMeasure
	{
		public IfcRadioActivityMeasure() : base () { }
		public IfcRadioActivityMeasure(double value) : base (value) { }
		public static implicit operator IfcRadioActivityMeasure(double value) { return new IfcRadioActivityMeasure(value);}
		public static implicit operator double(IfcRadioActivityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRatioMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcRatioMeasure : REAL, IfcMeasureValue, IfcSizeSelect, IfcTimeOrRatioSelect, Global.IfcRatioMeasure
	{
		public IfcRatioMeasure() : base () { }
		public IfcRatioMeasure(double value) : base (value) { }
		public static implicit operator IfcRatioMeasure(double value) { return new IfcRatioMeasure(value);}
		public static implicit operator double(IfcRatioMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReal = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcReal : REAL, IfcSimpleValue, Global.IfcReal
	{
		public IfcReal() : base () { }
		public IfcReal(double value) : base (value) { }
		public static implicit operator IfcReal(double value) { return new IfcReal(value);}
		public static implicit operator double(IfcReal value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRotationalFrequencyMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcRotationalFrequencyMeasure : REAL, IfcDerivedMeasureValue, Global.IfcRotationalFrequencyMeasure
	{
		public IfcRotationalFrequencyMeasure() : base () { }
		public IfcRotationalFrequencyMeasure(double value) : base (value) { }
		public static implicit operator IfcRotationalFrequencyMeasure(double value) { return new IfcRotationalFrequencyMeasure(value);}
		public static implicit operator double(IfcRotationalFrequencyMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRotationalMassMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcRotationalMassMeasure : REAL, IfcDerivedMeasureValue, Global.IfcRotationalMassMeasure
	{
		public IfcRotationalMassMeasure() : base () { }
		public IfcRotationalMassMeasure(double value) : base (value) { }
		public static implicit operator IfcRotationalMassMeasure(double value) { return new IfcRotationalMassMeasure(value);}
		public static implicit operator double(IfcRotationalMassMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRotationalStiffnessMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcRotationalStiffnessMeasure : REAL, IfcDerivedMeasureValue, IfcRotationalStiffnessSelect, Global.IfcRotationalStiffnessMeasure
	{
		public IfcRotationalStiffnessMeasure() : base () { }
		public IfcRotationalStiffnessMeasure(double value) : base (value) { }
		public static implicit operator IfcRotationalStiffnessMeasure(double value) { return new IfcRotationalStiffnessMeasure(value);}
		public static implicit operator double(IfcRotationalStiffnessMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSectionModulusMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSectionModulusMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSectionModulusMeasure
	{
		public IfcSectionModulusMeasure() : base () { }
		public IfcSectionModulusMeasure(double value) : base (value) { }
		public static implicit operator IfcSectionModulusMeasure(double value) { return new IfcSectionModulusMeasure(value);}
		public static implicit operator double(IfcSectionModulusMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSectionalAreaIntegralMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSectionalAreaIntegralMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSectionalAreaIntegralMeasure
	{
		public IfcSectionalAreaIntegralMeasure() : base () { }
		public IfcSectionalAreaIntegralMeasure(double value) : base (value) { }
		public static implicit operator IfcSectionalAreaIntegralMeasure(double value) { return new IfcSectionalAreaIntegralMeasure(value);}
		public static implicit operator double(IfcSectionalAreaIntegralMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcShearModulusMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcShearModulusMeasure : REAL, IfcDerivedMeasureValue, Global.IfcShearModulusMeasure
	{
		public IfcShearModulusMeasure() : base () { }
		public IfcShearModulusMeasure(double value) : base (value) { }
		public static implicit operator IfcShearModulusMeasure(double value) { return new IfcShearModulusMeasure(value);}
		public static implicit operator double(IfcShearModulusMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSolidAngleMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSolidAngleMeasure : REAL, IfcMeasureValue, Global.IfcSolidAngleMeasure
	{
		public IfcSolidAngleMeasure() : base () { }
		public IfcSolidAngleMeasure(double value) : base (value) { }
		public static implicit operator IfcSolidAngleMeasure(double value) { return new IfcSolidAngleMeasure(value);}
		public static implicit operator double(IfcSolidAngleMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSoundPowerLevelMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSoundPowerLevelMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSoundPowerLevelMeasure
	{
		public IfcSoundPowerLevelMeasure() : base () { }
		public IfcSoundPowerLevelMeasure(double value) : base (value) { }
		public static implicit operator IfcSoundPowerLevelMeasure(double value) { return new IfcSoundPowerLevelMeasure(value);}
		public static implicit operator double(IfcSoundPowerLevelMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSoundPowerMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSoundPowerMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSoundPowerMeasure
	{
		public IfcSoundPowerMeasure() : base () { }
		public IfcSoundPowerMeasure(double value) : base (value) { }
		public static implicit operator IfcSoundPowerMeasure(double value) { return new IfcSoundPowerMeasure(value);}
		public static implicit operator double(IfcSoundPowerMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSoundPressureLevelMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSoundPressureLevelMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSoundPressureLevelMeasure
	{
		public IfcSoundPressureLevelMeasure() : base () { }
		public IfcSoundPressureLevelMeasure(double value) : base (value) { }
		public static implicit operator IfcSoundPressureLevelMeasure(double value) { return new IfcSoundPressureLevelMeasure(value);}
		public static implicit operator double(IfcSoundPressureLevelMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSoundPressureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSoundPressureMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSoundPressureMeasure
	{
		public IfcSoundPressureMeasure() : base () { }
		public IfcSoundPressureMeasure(double value) : base (value) { }
		public static implicit operator IfcSoundPressureMeasure(double value) { return new IfcSoundPressureMeasure(value);}
		public static implicit operator double(IfcSoundPressureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpecificHeatCapacityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSpecificHeatCapacityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSpecificHeatCapacityMeasure
	{
		public IfcSpecificHeatCapacityMeasure() : base () { }
		public IfcSpecificHeatCapacityMeasure(double value) : base (value) { }
		public static implicit operator IfcSpecificHeatCapacityMeasure(double value) { return new IfcSpecificHeatCapacityMeasure(value);}
		public static implicit operator double(IfcSpecificHeatCapacityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpecularExponent = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSpecularExponent : REAL, IfcSpecularHighlightSelect, Global.IfcSpecularExponent
	{
		public IfcSpecularExponent() : base () { }
		public IfcSpecularExponent(double value) : base (value) { }
		public static implicit operator IfcSpecularExponent(double value) { return new IfcSpecularExponent(value);}
		public static implicit operator double(IfcSpecularExponent value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpecularRoughness = REAL;
	/// WHERE
	/// WR1 : {0.0 <= SELF <= 1.0};
	/// END_TYPE;
	/// <summary>
	public class IfcSpecularRoughness : REAL, IfcSpecularHighlightSelect, Global.IfcSpecularRoughness
	{
		public IfcSpecularRoughness() : base () { }
		public IfcSpecularRoughness(double value) : base (value) { }
		public static implicit operator IfcSpecularRoughness(double value) { return new IfcSpecularRoughness(value);}
		public static implicit operator double(IfcSpecularRoughness value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTemperatureGradientMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcTemperatureGradientMeasure : REAL, IfcDerivedMeasureValue, Global.IfcTemperatureGradientMeasure
	{
		public IfcTemperatureGradientMeasure() : base () { }
		public IfcTemperatureGradientMeasure(double value) : base (value) { }
		public static implicit operator IfcTemperatureGradientMeasure(double value) { return new IfcTemperatureGradientMeasure(value);}
		public static implicit operator double(IfcTemperatureGradientMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTemperatureRateOfChangeMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcTemperatureRateOfChangeMeasure : REAL, IfcDerivedMeasureValue, Global.IfcTemperatureRateOfChangeMeasure
	{
		public IfcTemperatureRateOfChangeMeasure() : base () { }
		public IfcTemperatureRateOfChangeMeasure(double value) : base (value) { }
		public static implicit operator IfcTemperatureRateOfChangeMeasure(double value) { return new IfcTemperatureRateOfChangeMeasure(value);}
		public static implicit operator double(IfcTemperatureRateOfChangeMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcText = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcText : STRING, IfcSimpleValue, Global.IfcText
	{
		public IfcText() : base () { }
		public IfcText(string value) : base (value) { }
		public static implicit operator IfcText(string value) { return new IfcText(value);}
		public static implicit operator string(IfcText value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextAlignment = STRING;
	/// WHERE
	/// WR1 : SELF IN ['left', 'right', 'center', 'justify'];
	/// END_TYPE;
	/// <summary>
	public class IfcTextAlignment : STRING, Global.IfcTextAlignment
	{
		public IfcTextAlignment() : base () { }
		public IfcTextAlignment(string value) : base (value) { }
		public static implicit operator IfcTextAlignment(string value) { return new IfcTextAlignment(value);}
		public static implicit operator string(IfcTextAlignment value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextDecoration = STRING;
	/// WHERE
	/// WR1 : SELF IN ['none', 'underline', 'overline', 'line-through', 'blink'];
	/// END_TYPE;
	/// <summary>
	public class IfcTextDecoration : STRING, Global.IfcTextDecoration
	{
		public IfcTextDecoration() : base () { }
		public IfcTextDecoration(string value) : base (value) { }
		public static implicit operator IfcTextDecoration(string value) { return new IfcTextDecoration(value);}
		public static implicit operator string(IfcTextDecoration value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextFontName = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcTextFontName : STRING, Global.IfcTextFontName
	{
		public IfcTextFontName() : base () { }
		public IfcTextFontName(string value) : base (value) { }
		public static implicit operator IfcTextFontName(string value) { return new IfcTextFontName(value);}
		public static implicit operator string(IfcTextFontName value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextTransformation = STRING;
	/// WHERE
	/// WR1 : SELF IN ['capitalize', 'uppercase', 'lowercase', 'none'];
	/// END_TYPE;
	/// <summary>
	public class IfcTextTransformation : STRING, Global.IfcTextTransformation
	{
		public IfcTextTransformation() : base () { }
		public IfcTextTransformation(string value) : base (value) { }
		public static implicit operator IfcTextTransformation(string value) { return new IfcTextTransformation(value);}
		public static implicit operator string(IfcTextTransformation value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalAdmittanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermalAdmittanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcThermalAdmittanceMeasure
	{
		public IfcThermalAdmittanceMeasure() : base () { }
		public IfcThermalAdmittanceMeasure(double value) : base (value) { }
		public static implicit operator IfcThermalAdmittanceMeasure(double value) { return new IfcThermalAdmittanceMeasure(value);}
		public static implicit operator double(IfcThermalAdmittanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalConductivityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermalConductivityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcThermalConductivityMeasure
	{
		public IfcThermalConductivityMeasure() : base () { }
		public IfcThermalConductivityMeasure(double value) : base (value) { }
		public static implicit operator IfcThermalConductivityMeasure(double value) { return new IfcThermalConductivityMeasure(value);}
		public static implicit operator double(IfcThermalConductivityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalExpansionCoefficientMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermalExpansionCoefficientMeasure : REAL, IfcDerivedMeasureValue, Global.IfcThermalExpansionCoefficientMeasure
	{
		public IfcThermalExpansionCoefficientMeasure() : base () { }
		public IfcThermalExpansionCoefficientMeasure(double value) : base (value) { }
		public static implicit operator IfcThermalExpansionCoefficientMeasure(double value) { return new IfcThermalExpansionCoefficientMeasure(value);}
		public static implicit operator double(IfcThermalExpansionCoefficientMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalResistanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermalResistanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcThermalResistanceMeasure
	{
		public IfcThermalResistanceMeasure() : base () { }
		public IfcThermalResistanceMeasure(double value) : base (value) { }
		public static implicit operator IfcThermalResistanceMeasure(double value) { return new IfcThermalResistanceMeasure(value);}
		public static implicit operator double(IfcThermalResistanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalTransmittanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermalTransmittanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcThermalTransmittanceMeasure
	{
		public IfcThermalTransmittanceMeasure() : base () { }
		public IfcThermalTransmittanceMeasure(double value) : base (value) { }
		public static implicit operator IfcThermalTransmittanceMeasure(double value) { return new IfcThermalTransmittanceMeasure(value);}
		public static implicit operator double(IfcThermalTransmittanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermodynamicTemperatureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermodynamicTemperatureMeasure : REAL, IfcMeasureValue, Global.IfcThermodynamicTemperatureMeasure
	{
		public IfcThermodynamicTemperatureMeasure() : base () { }
		public IfcThermodynamicTemperatureMeasure(double value) : base (value) { }
		public static implicit operator IfcThermodynamicTemperatureMeasure(double value) { return new IfcThermodynamicTemperatureMeasure(value);}
		public static implicit operator double(IfcThermodynamicTemperatureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTime = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcTime : STRING, IfcSimpleValue, Global.IfcTime
	{
		public IfcTime() : base () { }
		public IfcTime(string value) : base (value) { }
		public static implicit operator IfcTime(string value) { return new IfcTime(value);}
		public static implicit operator string(IfcTime value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTimeMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcTimeMeasure : REAL, IfcMeasureValue, Global.IfcTimeMeasure
	{
		public IfcTimeMeasure() : base () { }
		public IfcTimeMeasure(double value) : base (value) { }
		public static implicit operator IfcTimeMeasure(double value) { return new IfcTimeMeasure(value);}
		public static implicit operator double(IfcTimeMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTimeStamp = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IfcTimeStamp : INTEGER, IfcSimpleValue, Global.IfcTimeStamp
	{
		public IfcTimeStamp() : base () { }
		public IfcTimeStamp(int value) : base (value) { }
		public static implicit operator IfcTimeStamp(int value) { return new IfcTimeStamp(value);}
		public static implicit operator int(IfcTimeStamp value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTorqueMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcTorqueMeasure : REAL, IfcDerivedMeasureValue, Global.IfcTorqueMeasure
	{
		public IfcTorqueMeasure() : base () { }
		public IfcTorqueMeasure(double value) : base (value) { }
		public static implicit operator IfcTorqueMeasure(double value) { return new IfcTorqueMeasure(value);}
		public static implicit operator double(IfcTorqueMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcURIReference = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcURIReference : STRING, Global.IfcURIReference
	{
		public IfcURIReference() : base () { }
		public IfcURIReference(string value) : base (value) { }
		public static implicit operator IfcURIReference(string value) { return new IfcURIReference(value);}
		public static implicit operator string(IfcURIReference value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVaporPermeabilityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcVaporPermeabilityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcVaporPermeabilityMeasure
	{
		public IfcVaporPermeabilityMeasure() : base () { }
		public IfcVaporPermeabilityMeasure(double value) : base (value) { }
		public static implicit operator IfcVaporPermeabilityMeasure(double value) { return new IfcVaporPermeabilityMeasure(value);}
		public static implicit operator double(IfcVaporPermeabilityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVolumeMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcVolumeMeasure : REAL, IfcMeasureValue, Global.IfcVolumeMeasure
	{
		public IfcVolumeMeasure() : base () { }
		public IfcVolumeMeasure(double value) : base (value) { }
		public static implicit operator IfcVolumeMeasure(double value) { return new IfcVolumeMeasure(value);}
		public static implicit operator double(IfcVolumeMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVolumetricFlowRateMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcVolumetricFlowRateMeasure : REAL, IfcDerivedMeasureValue, Global.IfcVolumetricFlowRateMeasure
	{
		public IfcVolumetricFlowRateMeasure() : base () { }
		public IfcVolumetricFlowRateMeasure(double value) : base (value) { }
		public static implicit operator IfcVolumetricFlowRateMeasure(double value) { return new IfcVolumetricFlowRateMeasure(value);}
		public static implicit operator double(IfcVolumetricFlowRateMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWarpingConstantMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcWarpingConstantMeasure : REAL, IfcDerivedMeasureValue, Global.IfcWarpingConstantMeasure
	{
		public IfcWarpingConstantMeasure() : base () { }
		public IfcWarpingConstantMeasure(double value) : base (value) { }
		public static implicit operator IfcWarpingConstantMeasure(double value) { return new IfcWarpingConstantMeasure(value);}
		public static implicit operator double(IfcWarpingConstantMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWarpingMomentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcWarpingMomentMeasure : REAL, IfcDerivedMeasureValue, IfcWarpingStiffnessSelect, Global.IfcWarpingMomentMeasure
	{
		public IfcWarpingMomentMeasure() : base () { }
		public IfcWarpingMomentMeasure(double value) : base (value) { }
		public static implicit operator IfcWarpingMomentMeasure(double value) { return new IfcWarpingMomentMeasure(value);}
		public static implicit operator double(IfcWarpingMomentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcArcIndex = LIST [3:3] OF IfcPositiveInteger;
	/// END_TYPE;
	/// <summary>
	public class IfcArcIndex : List<IfcPositiveInteger>, Global.IfcArcIndex
	{
		public List<int> Value
		{
			get
			{
				List<int> values = new List<int> ();
				foreach(var value in this)
				{
					values.Add(value);
				}
				return values;
			}
			set
			{
				Value = value;
			}
		}
		public IfcArcIndex() : base () { }
		public IfcArcIndex(List<int> value)
		{
			foreach(var v in value)
			{
				Add(v);
			}
		}
		public static implicit operator IfcArcIndex(List<int> value) { return new IfcArcIndex(value);}
		public static implicit operator List<int>(IfcArcIndex value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcComplexNumber = ARRAY [1:2] OF REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcComplexNumber : List<REAL>, Global.IfcComplexNumber
	{
		public List<double> Value
		{
			get
			{
				List<double> values = new List<double> ();
				foreach(var value in this)
				{
					values.Add(value);
				}
				return values;
			}
			set
			{
				Value = value;
			}
		}
		public IfcComplexNumber() : base () { }
		public IfcComplexNumber(List<double> value)
		{
			foreach(var v in value)
			{
				Add(v);
			}
		}
		public static implicit operator IfcComplexNumber(List<double> value) { return new IfcComplexNumber(value);}
		public static implicit operator List<double>(IfcComplexNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCompoundPlaneAngleMeasure = LIST [3:4] OF INTEGER;
	/// WHERE
	/// MinutesInRange : ABS(SELF[2]) < 60;
	/// SecondsInRange : ABS(SELF[3]) < 60;
	/// MicrosecondsInRange : (SIZEOF(SELF) = 3) OR (ABS(SELF[4]) < 1000000);
	/// ConsistentSign : ((SELF[1] >= 0) AND (SELF[2] >= 0) AND (SELF[3] >= 0) AND ((SIZEOF(SELF) = 3) OR (SELF[4] >= 0)))
	/// OR
	/// ((SELF[1] <= 0) AND (SELF[2] <= 0) AND (SELF[3] <= 0) AND ((SIZEOF(SELF) = 3) OR (SELF[4] <= 0)));
	/// END_TYPE;
	/// <summary>
	public class IfcCompoundPlaneAngleMeasure : List<INTEGER>, Global.IfcCompoundPlaneAngleMeasure
	{
		public List<int> Value
		{
			get
			{
				List<int> values = new List<int> ();
				foreach(var value in this)
				{
					values.Add(value);
				}
				return values;
			}
			set
			{
				Value = value;
			}
		}
		public IfcCompoundPlaneAngleMeasure() : base () { }
		public IfcCompoundPlaneAngleMeasure(List<int> value)
		{
			foreach(var v in value)
			{
				Add(v);
			}
		}
		public static implicit operator IfcCompoundPlaneAngleMeasure(List<int> value) { return new IfcCompoundPlaneAngleMeasure(value);}
		public static implicit operator List<int>(IfcCompoundPlaneAngleMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLineIndex = LIST [2:?] OF IfcPositiveInteger;
	/// END_TYPE;
	/// <summary>
	public class IfcLineIndex : List<IfcPositiveInteger>, Global.IfcLineIndex
	{
		public List<int> Value
		{
			get
			{
				List<int> values = new List<int> ();
				foreach(var value in this)
				{
					values.Add(value);
				}
				return values;
			}
			set
			{
				Value = value;
			}
		}
		public IfcLineIndex() : base () { }
		public IfcLineIndex(List<int> value)
		{
			foreach(var v in value)
			{
				Add(v);
			}
		}
		public static implicit operator IfcLineIndex(List<int> value) { return new IfcLineIndex(value);}
		public static implicit operator List<int>(IfcLineIndex value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPropertySetDefinitionSet = SET [1:?] OF IfcPropertySetDefinition;
	/// END_TYPE;
	/// <summary>
	public class IfcPropertySetDefinitionSet : List<IfcPropertySetDefinition>, Global.IfcPropertySetDefinitionSet
	{
	}
	/// <summary>
	/// TYPE IfcActionRequestTypeEnum = ENUMERATION OF
	/// (EMAIL
	/// ,FAX
	/// ,PHONE
	/// ,POST
	/// ,VERBAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcActionRequestTypeEnum: Global.IfcActionRequestTypeEnum
	{
		public static string EMAIL { get { return ".EMAIL."; } private set { } }
		public static string FAX { get { return ".FAX."; } private set { } }
		public static string PHONE { get { return ".PHONE."; } private set { } }
		public static string POST { get { return ".POST."; } private set { } }
		public static string VERBAL { get { return ".VERBAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcActionRequestTypeEnum() { Value = ".EMAIL.";}
		public IfcActionRequestTypeEnum(string value) { Value = value; }
		public static implicit operator IfcActionRequestTypeEnum(string value) { return new IfcActionRequestTypeEnum(value);}
		public static implicit operator string(IfcActionRequestTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcActionSourceTypeEnum = ENUMERATION OF
	/// (DEAD_LOAD_G
	/// ,COMPLETION_G1
	/// ,LIVE_LOAD_Q
	/// ,SNOW_S
	/// ,WIND_W
	/// ,PRESTRESSING_P
	/// ,SETTLEMENT_U
	/// ,TEMPERATURE_T
	/// ,EARTHQUAKE_E
	/// ,FIRE
	/// ,IMPULSE
	/// ,IMPACT
	/// ,TRANSPORT
	/// ,ERECTION
	/// ,PROPPING
	/// ,SYSTEM_IMPERFECTION
	/// ,SHRINKAGE
	/// ,CREEP
	/// ,LACK_OF_FIT
	/// ,BUOYANCY
	/// ,ICE
	/// ,CURRENT
	/// ,WAVE
	/// ,RAIN
	/// ,BRAKES
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcActionSourceTypeEnum: Global.IfcActionSourceTypeEnum
	{
		public static string DEAD_LOAD_G { get { return ".DEAD_LOAD_G."; } private set { } }
		public static string COMPLETION_G1 { get { return ".COMPLETION_G1."; } private set { } }
		public static string LIVE_LOAD_Q { get { return ".LIVE_LOAD_Q."; } private set { } }
		public static string SNOW_S { get { return ".SNOW_S."; } private set { } }
		public static string WIND_W { get { return ".WIND_W."; } private set { } }
		public static string PRESTRESSING_P { get { return ".PRESTRESSING_P."; } private set { } }
		public static string SETTLEMENT_U { get { return ".SETTLEMENT_U."; } private set { } }
		public static string TEMPERATURE_T { get { return ".TEMPERATURE_T."; } private set { } }
		public static string EARTHQUAKE_E { get { return ".EARTHQUAKE_E."; } private set { } }
		public static string FIRE { get { return ".FIRE."; } private set { } }
		public static string IMPULSE { get { return ".IMPULSE."; } private set { } }
		public static string IMPACT { get { return ".IMPACT."; } private set { } }
		public static string TRANSPORT { get { return ".TRANSPORT."; } private set { } }
		public static string ERECTION { get { return ".ERECTION."; } private set { } }
		public static string PROPPING { get { return ".PROPPING."; } private set { } }
		public static string SYSTEM_IMPERFECTION { get { return ".SYSTEM_IMPERFECTION."; } private set { } }
		public static string SHRINKAGE { get { return ".SHRINKAGE."; } private set { } }
		public static string CREEP { get { return ".CREEP."; } private set { } }
		public static string LACK_OF_FIT { get { return ".LACK_OF_FIT."; } private set { } }
		public static string BUOYANCY { get { return ".BUOYANCY."; } private set { } }
		public static string ICE { get { return ".ICE."; } private set { } }
		public static string CURRENT { get { return ".CURRENT."; } private set { } }
		public static string WAVE { get { return ".WAVE."; } private set { } }
		public static string RAIN { get { return ".RAIN."; } private set { } }
		public static string BRAKES { get { return ".BRAKES."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcActionSourceTypeEnum() { Value = ".DEAD_LOAD_G.";}
		public IfcActionSourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcActionSourceTypeEnum(string value) { return new IfcActionSourceTypeEnum(value);}
		public static implicit operator string(IfcActionSourceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcActionTypeEnum = ENUMERATION OF
	/// (PERMANENT_G
	/// ,VARIABLE_Q
	/// ,EXTRAORDINARY_A
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcActionTypeEnum: Global.IfcActionTypeEnum
	{
		public static string PERMANENT_G { get { return ".PERMANENT_G."; } private set { } }
		public static string VARIABLE_Q { get { return ".VARIABLE_Q."; } private set { } }
		public static string EXTRAORDINARY_A { get { return ".EXTRAORDINARY_A."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcActionTypeEnum() { Value = ".PERMANENT_G.";}
		public IfcActionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcActionTypeEnum(string value) { return new IfcActionTypeEnum(value);}
		public static implicit operator string(IfcActionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcActuatorTypeEnum = ENUMERATION OF
	/// (ELECTRICACTUATOR
	/// ,HANDOPERATEDACTUATOR
	/// ,HYDRAULICACTUATOR
	/// ,PNEUMATICACTUATOR
	/// ,THERMOSTATICACTUATOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcActuatorTypeEnum: Global.IfcActuatorTypeEnum
	{
		public static string ELECTRICACTUATOR { get { return ".ELECTRICACTUATOR."; } private set { } }
		public static string HANDOPERATEDACTUATOR { get { return ".HANDOPERATEDACTUATOR."; } private set { } }
		public static string HYDRAULICACTUATOR { get { return ".HYDRAULICACTUATOR."; } private set { } }
		public static string PNEUMATICACTUATOR { get { return ".PNEUMATICACTUATOR."; } private set { } }
		public static string THERMOSTATICACTUATOR { get { return ".THERMOSTATICACTUATOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcActuatorTypeEnum() { Value = ".ELECTRICACTUATOR.";}
		public IfcActuatorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcActuatorTypeEnum(string value) { return new IfcActuatorTypeEnum(value);}
		public static implicit operator string(IfcActuatorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAddressTypeEnum = ENUMERATION OF
	/// (OFFICE
	/// ,SITE
	/// ,HOME
	/// ,DISTRIBUTIONPOINT
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAddressTypeEnum: Global.IfcAddressTypeEnum
	{
		public static string OFFICE { get { return ".OFFICE."; } private set { } }
		public static string SITE { get { return ".SITE."; } private set { } }
		public static string HOME { get { return ".HOME."; } private set { } }
		public static string DISTRIBUTIONPOINT { get { return ".DISTRIBUTIONPOINT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAddressTypeEnum() { Value = ".OFFICE.";}
		public IfcAddressTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAddressTypeEnum(string value) { return new IfcAddressTypeEnum(value);}
		public static implicit operator string(IfcAddressTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAirTerminalBoxTypeEnum = ENUMERATION OF
	/// (CONSTANTFLOW
	/// ,VARIABLEFLOWPRESSUREDEPENDANT
	/// ,VARIABLEFLOWPRESSUREINDEPENDANT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAirTerminalBoxTypeEnum: Global.IfcAirTerminalBoxTypeEnum
	{
		public static string CONSTANTFLOW { get { return ".CONSTANTFLOW."; } private set { } }
		public static string VARIABLEFLOWPRESSUREDEPENDANT { get { return ".VARIABLEFLOWPRESSUREDEPENDANT."; } private set { } }
		public static string VARIABLEFLOWPRESSUREINDEPENDANT { get { return ".VARIABLEFLOWPRESSUREINDEPENDANT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAirTerminalBoxTypeEnum() { Value = ".CONSTANTFLOW.";}
		public IfcAirTerminalBoxTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAirTerminalBoxTypeEnum(string value) { return new IfcAirTerminalBoxTypeEnum(value);}
		public static implicit operator string(IfcAirTerminalBoxTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAirTerminalTypeEnum = ENUMERATION OF
	/// (DIFFUSER
	/// ,GRILLE
	/// ,LOUVRE
	/// ,REGISTER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAirTerminalTypeEnum: Global.IfcAirTerminalTypeEnum
	{
		public static string DIFFUSER { get { return ".DIFFUSER."; } private set { } }
		public static string GRILLE { get { return ".GRILLE."; } private set { } }
		public static string LOUVRE { get { return ".LOUVRE."; } private set { } }
		public static string REGISTER { get { return ".REGISTER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAirTerminalTypeEnum() { Value = ".DIFFUSER.";}
		public IfcAirTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAirTerminalTypeEnum(string value) { return new IfcAirTerminalTypeEnum(value);}
		public static implicit operator string(IfcAirTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAirToAirHeatRecoveryTypeEnum = ENUMERATION OF
	/// (FIXEDPLATECOUNTERFLOWEXCHANGER
	/// ,FIXEDPLATECROSSFLOWEXCHANGER
	/// ,FIXEDPLATEPARALLELFLOWEXCHANGER
	/// ,ROTARYWHEEL
	/// ,RUNAROUNDCOILLOOP
	/// ,HEATPIPE
	/// ,TWINTOWERENTHALPYRECOVERYLOOPS
	/// ,THERMOSIPHONSEALEDTUBEHEATEXCHANGERS
	/// ,THERMOSIPHONCOILTYPEHEATEXCHANGERS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAirToAirHeatRecoveryTypeEnum: Global.IfcAirToAirHeatRecoveryTypeEnum
	{
		public static string FIXEDPLATECOUNTERFLOWEXCHANGER { get { return ".FIXEDPLATECOUNTERFLOWEXCHANGER."; } private set { } }
		public static string FIXEDPLATECROSSFLOWEXCHANGER { get { return ".FIXEDPLATECROSSFLOWEXCHANGER."; } private set { } }
		public static string FIXEDPLATEPARALLELFLOWEXCHANGER { get { return ".FIXEDPLATEPARALLELFLOWEXCHANGER."; } private set { } }
		public static string ROTARYWHEEL { get { return ".ROTARYWHEEL."; } private set { } }
		public static string RUNAROUNDCOILLOOP { get { return ".RUNAROUNDCOILLOOP."; } private set { } }
		public static string HEATPIPE { get { return ".HEATPIPE."; } private set { } }
		public static string TWINTOWERENTHALPYRECOVERYLOOPS { get { return ".TWINTOWERENTHALPYRECOVERYLOOPS."; } private set { } }
		public static string THERMOSIPHONSEALEDTUBEHEATEXCHANGERS { get { return ".THERMOSIPHONSEALEDTUBEHEATEXCHANGERS."; } private set { } }
		public static string THERMOSIPHONCOILTYPEHEATEXCHANGERS { get { return ".THERMOSIPHONCOILTYPEHEATEXCHANGERS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAirToAirHeatRecoveryTypeEnum() { Value = ".FIXEDPLATECOUNTERFLOWEXCHANGER.";}
		public IfcAirToAirHeatRecoveryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAirToAirHeatRecoveryTypeEnum(string value) { return new IfcAirToAirHeatRecoveryTypeEnum(value);}
		public static implicit operator string(IfcAirToAirHeatRecoveryTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAlarmTypeEnum = ENUMERATION OF
	/// (BELL
	/// ,BREAKGLASSBUTTON
	/// ,LIGHT
	/// ,MANUALPULLBOX
	/// ,SIREN
	/// ,WHISTLE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAlarmTypeEnum: Global.IfcAlarmTypeEnum
	{
		public static string BELL { get { return ".BELL."; } private set { } }
		public static string BREAKGLASSBUTTON { get { return ".BREAKGLASSBUTTON."; } private set { } }
		public static string LIGHT { get { return ".LIGHT."; } private set { } }
		public static string MANUALPULLBOX { get { return ".MANUALPULLBOX."; } private set { } }
		public static string SIREN { get { return ".SIREN."; } private set { } }
		public static string WHISTLE { get { return ".WHISTLE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAlarmTypeEnum() { Value = ".BELL.";}
		public IfcAlarmTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAlarmTypeEnum(string value) { return new IfcAlarmTypeEnum(value);}
		public static implicit operator string(IfcAlarmTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAnalysisModelTypeEnum = ENUMERATION OF
	/// (IN_PLANE_LOADING_2D
	/// ,OUT_PLANE_LOADING_2D
	/// ,LOADING_3D
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAnalysisModelTypeEnum: Global.IfcAnalysisModelTypeEnum
	{
		public static string IN_PLANE_LOADING_2D { get { return ".IN_PLANE_LOADING_2D."; } private set { } }
		public static string OUT_PLANE_LOADING_2D { get { return ".OUT_PLANE_LOADING_2D."; } private set { } }
		public static string LOADING_3D { get { return ".LOADING_3D."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAnalysisModelTypeEnum() { Value = ".IN_PLANE_LOADING_2D.";}
		public IfcAnalysisModelTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAnalysisModelTypeEnum(string value) { return new IfcAnalysisModelTypeEnum(value);}
		public static implicit operator string(IfcAnalysisModelTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAnalysisTheoryTypeEnum = ENUMERATION OF
	/// (FIRST_ORDER_THEORY
	/// ,SECOND_ORDER_THEORY
	/// ,THIRD_ORDER_THEORY
	/// ,FULL_NONLINEAR_THEORY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAnalysisTheoryTypeEnum: Global.IfcAnalysisTheoryTypeEnum
	{
		public static string FIRST_ORDER_THEORY { get { return ".FIRST_ORDER_THEORY."; } private set { } }
		public static string SECOND_ORDER_THEORY { get { return ".SECOND_ORDER_THEORY."; } private set { } }
		public static string THIRD_ORDER_THEORY { get { return ".THIRD_ORDER_THEORY."; } private set { } }
		public static string FULL_NONLINEAR_THEORY { get { return ".FULL_NONLINEAR_THEORY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAnalysisTheoryTypeEnum() { Value = ".FIRST_ORDER_THEORY.";}
		public IfcAnalysisTheoryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAnalysisTheoryTypeEnum(string value) { return new IfcAnalysisTheoryTypeEnum(value);}
		public static implicit operator string(IfcAnalysisTheoryTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcArithmeticOperatorEnum = ENUMERATION OF
	/// (ADD
	/// ,DIVIDE
	/// ,MULTIPLY
	/// ,SUBTRACT);
	/// END_TYPE;
	/// <summary>
	public class IfcArithmeticOperatorEnum: Global.IfcArithmeticOperatorEnum
	{
		public static string ADD { get { return ".ADD."; } private set { } }
		public static string DIVIDE { get { return ".DIVIDE."; } private set { } }
		public static string MULTIPLY { get { return ".MULTIPLY."; } private set { } }
		public static string SUBTRACT { get { return ".SUBTRACT."; } private set { } }
		public string Value {get; set;}
		public IfcArithmeticOperatorEnum() { Value = ".ADD.";}
		public IfcArithmeticOperatorEnum(string value) { Value = value; }
		public static implicit operator IfcArithmeticOperatorEnum(string value) { return new IfcArithmeticOperatorEnum(value);}
		public static implicit operator string(IfcArithmeticOperatorEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAssemblyPlaceEnum = ENUMERATION OF
	/// (SITE
	/// ,FACTORY
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAssemblyPlaceEnum: Global.IfcAssemblyPlaceEnum
	{
		public static string SITE { get { return ".SITE."; } private set { } }
		public static string FACTORY { get { return ".FACTORY."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAssemblyPlaceEnum() { Value = ".SITE.";}
		public IfcAssemblyPlaceEnum(string value) { Value = value; }
		public static implicit operator IfcAssemblyPlaceEnum(string value) { return new IfcAssemblyPlaceEnum(value);}
		public static implicit operator string(IfcAssemblyPlaceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAudioVisualApplianceTypeEnum = ENUMERATION OF
	/// (AMPLIFIER
	/// ,CAMERA
	/// ,DISPLAY
	/// ,MICROPHONE
	/// ,PLAYER
	/// ,PROJECTOR
	/// ,RECEIVER
	/// ,SPEAKER
	/// ,SWITCHER
	/// ,TELEPHONE
	/// ,TUNER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAudioVisualApplianceTypeEnum: Global.IfcAudioVisualApplianceTypeEnum
	{
		public static string AMPLIFIER { get { return ".AMPLIFIER."; } private set { } }
		public static string CAMERA { get { return ".CAMERA."; } private set { } }
		public static string DISPLAY { get { return ".DISPLAY."; } private set { } }
		public static string MICROPHONE { get { return ".MICROPHONE."; } private set { } }
		public static string PLAYER { get { return ".PLAYER."; } private set { } }
		public static string PROJECTOR { get { return ".PROJECTOR."; } private set { } }
		public static string RECEIVER { get { return ".RECEIVER."; } private set { } }
		public static string SPEAKER { get { return ".SPEAKER."; } private set { } }
		public static string SWITCHER { get { return ".SWITCHER."; } private set { } }
		public static string TELEPHONE { get { return ".TELEPHONE."; } private set { } }
		public static string TUNER { get { return ".TUNER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAudioVisualApplianceTypeEnum() { Value = ".AMPLIFIER.";}
		public IfcAudioVisualApplianceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAudioVisualApplianceTypeEnum(string value) { return new IfcAudioVisualApplianceTypeEnum(value);}
		public static implicit operator string(IfcAudioVisualApplianceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBSplineCurveForm = ENUMERATION OF
	/// (POLYLINE_FORM
	/// ,CIRCULAR_ARC
	/// ,ELLIPTIC_ARC
	/// ,PARABOLIC_ARC
	/// ,HYPERBOLIC_ARC
	/// ,UNSPECIFIED);
	/// END_TYPE;
	/// <summary>
	public class IfcBSplineCurveForm: Global.IfcBSplineCurveForm
	{
		public static string POLYLINE_FORM { get { return ".POLYLINE_FORM."; } private set { } }
		public static string CIRCULAR_ARC { get { return ".CIRCULAR_ARC."; } private set { } }
		public static string ELLIPTIC_ARC { get { return ".ELLIPTIC_ARC."; } private set { } }
		public static string PARABOLIC_ARC { get { return ".PARABOLIC_ARC."; } private set { } }
		public static string HYPERBOLIC_ARC { get { return ".HYPERBOLIC_ARC."; } private set { } }
		public static string UNSPECIFIED { get { return ".UNSPECIFIED."; } private set { } }
		public string Value {get; set;}
		public IfcBSplineCurveForm() { Value = ".POLYLINE_FORM.";}
		public IfcBSplineCurveForm(string value) { Value = value; }
		public static implicit operator IfcBSplineCurveForm(string value) { return new IfcBSplineCurveForm(value);}
		public static implicit operator string(IfcBSplineCurveForm value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBSplineSurfaceForm = ENUMERATION OF
	/// (PLANE_SURF
	/// ,CYLINDRICAL_SURF
	/// ,CONICAL_SURF
	/// ,SPHERICAL_SURF
	/// ,TOROIDAL_SURF
	/// ,SURF_OF_REVOLUTION
	/// ,RULED_SURF
	/// ,GENERALISED_CONE
	/// ,QUADRIC_SURF
	/// ,SURF_OF_LINEAR_EXTRUSION
	/// ,UNSPECIFIED);
	/// END_TYPE;
	/// <summary>
	public class IfcBSplineSurfaceForm: Global.IfcBSplineSurfaceForm
	{
		public static string PLANE_SURF { get { return ".PLANE_SURF."; } private set { } }
		public static string CYLINDRICAL_SURF { get { return ".CYLINDRICAL_SURF."; } private set { } }
		public static string CONICAL_SURF { get { return ".CONICAL_SURF."; } private set { } }
		public static string SPHERICAL_SURF { get { return ".SPHERICAL_SURF."; } private set { } }
		public static string TOROIDAL_SURF { get { return ".TOROIDAL_SURF."; } private set { } }
		public static string SURF_OF_REVOLUTION { get { return ".SURF_OF_REVOLUTION."; } private set { } }
		public static string RULED_SURF { get { return ".RULED_SURF."; } private set { } }
		public static string GENERALISED_CONE { get { return ".GENERALISED_CONE."; } private set { } }
		public static string QUADRIC_SURF { get { return ".QUADRIC_SURF."; } private set { } }
		public static string SURF_OF_LINEAR_EXTRUSION { get { return ".SURF_OF_LINEAR_EXTRUSION."; } private set { } }
		public static string UNSPECIFIED { get { return ".UNSPECIFIED."; } private set { } }
		public string Value {get; set;}
		public IfcBSplineSurfaceForm() { Value = ".PLANE_SURF.";}
		public IfcBSplineSurfaceForm(string value) { Value = value; }
		public static implicit operator IfcBSplineSurfaceForm(string value) { return new IfcBSplineSurfaceForm(value);}
		public static implicit operator string(IfcBSplineSurfaceForm value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBeamTypeEnum = ENUMERATION OF
	/// (BEAM
	/// ,JOIST
	/// ,HOLLOWCORE
	/// ,LINTEL
	/// ,SPANDREL
	/// ,T_BEAM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcBeamTypeEnum: Global.IfcBeamTypeEnum
	{
		public static string BEAM { get { return ".BEAM."; } private set { } }
		public static string JOIST { get { return ".JOIST."; } private set { } }
		public static string HOLLOWCORE { get { return ".HOLLOWCORE."; } private set { } }
		public static string LINTEL { get { return ".LINTEL."; } private set { } }
		public static string SPANDREL { get { return ".SPANDREL."; } private set { } }
		public static string T_BEAM { get { return ".T_BEAM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcBeamTypeEnum() { Value = ".BEAM.";}
		public IfcBeamTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBeamTypeEnum(string value) { return new IfcBeamTypeEnum(value);}
		public static implicit operator string(IfcBeamTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBenchmarkEnum = ENUMERATION OF
	/// (GREATERTHAN
	/// ,GREATERTHANOREQUALTO
	/// ,LESSTHAN
	/// ,LESSTHANOREQUALTO
	/// ,EQUALTO
	/// ,NOTEQUALTO
	/// ,INCLUDES
	/// ,NOTINCLUDES
	/// ,INCLUDEDIN
	/// ,NOTINCLUDEDIN);
	/// END_TYPE;
	/// <summary>
	public class IfcBenchmarkEnum: Global.IfcBenchmarkEnum
	{
		public static string GREATERTHAN { get { return ".GREATERTHAN."; } private set { } }
		public static string GREATERTHANOREQUALTO { get { return ".GREATERTHANOREQUALTO."; } private set { } }
		public static string LESSTHAN { get { return ".LESSTHAN."; } private set { } }
		public static string LESSTHANOREQUALTO { get { return ".LESSTHANOREQUALTO."; } private set { } }
		public static string EQUALTO { get { return ".EQUALTO."; } private set { } }
		public static string NOTEQUALTO { get { return ".NOTEQUALTO."; } private set { } }
		public static string INCLUDES { get { return ".INCLUDES."; } private set { } }
		public static string NOTINCLUDES { get { return ".NOTINCLUDES."; } private set { } }
		public static string INCLUDEDIN { get { return ".INCLUDEDIN."; } private set { } }
		public static string NOTINCLUDEDIN { get { return ".NOTINCLUDEDIN."; } private set { } }
		public string Value {get; set;}
		public IfcBenchmarkEnum() { Value = ".GREATERTHAN.";}
		public IfcBenchmarkEnum(string value) { Value = value; }
		public static implicit operator IfcBenchmarkEnum(string value) { return new IfcBenchmarkEnum(value);}
		public static implicit operator string(IfcBenchmarkEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBoilerTypeEnum = ENUMERATION OF
	/// (WATER
	/// ,STEAM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcBoilerTypeEnum: Global.IfcBoilerTypeEnum
	{
		public static string WATER { get { return ".WATER."; } private set { } }
		public static string STEAM { get { return ".STEAM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcBoilerTypeEnum() { Value = ".WATER.";}
		public IfcBoilerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBoilerTypeEnum(string value) { return new IfcBoilerTypeEnum(value);}
		public static implicit operator string(IfcBoilerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBooleanOperator = ENUMERATION OF
	/// (UNION
	/// ,INTERSECTION
	/// ,DIFFERENCE);
	/// END_TYPE;
	/// <summary>
	public class IfcBooleanOperator: Global.IfcBooleanOperator
	{
		public static string UNION { get { return ".UNION."; } private set { } }
		public static string INTERSECTION { get { return ".INTERSECTION."; } private set { } }
		public static string DIFFERENCE { get { return ".DIFFERENCE."; } private set { } }
		public string Value {get; set;}
		public IfcBooleanOperator() { Value = ".UNION.";}
		public IfcBooleanOperator(string value) { Value = value; }
		public static implicit operator IfcBooleanOperator(string value) { return new IfcBooleanOperator(value);}
		public static implicit operator string(IfcBooleanOperator value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBuildingElementPartTypeEnum = ENUMERATION OF
	/// (INSULATION
	/// ,PRECASTPANEL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcBuildingElementPartTypeEnum: Global.IfcBuildingElementPartTypeEnum
	{
		public static string INSULATION { get { return ".INSULATION."; } private set { } }
		public static string PRECASTPANEL { get { return ".PRECASTPANEL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcBuildingElementPartTypeEnum() { Value = ".INSULATION.";}
		public IfcBuildingElementPartTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBuildingElementPartTypeEnum(string value) { return new IfcBuildingElementPartTypeEnum(value);}
		public static implicit operator string(IfcBuildingElementPartTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBuildingElementProxyTypeEnum = ENUMERATION OF
	/// (COMPLEX
	/// ,ELEMENT
	/// ,PARTIAL
	/// ,PROVISIONFORVOID
	/// ,PROVISIONFORSPACE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcBuildingElementProxyTypeEnum: Global.IfcBuildingElementProxyTypeEnum
	{
		public static string COMPLEX { get { return ".COMPLEX."; } private set { } }
		public static string ELEMENT { get { return ".ELEMENT."; } private set { } }
		public static string PARTIAL { get { return ".PARTIAL."; } private set { } }
		public static string PROVISIONFORVOID { get { return ".PROVISIONFORVOID."; } private set { } }
		public static string PROVISIONFORSPACE { get { return ".PROVISIONFORSPACE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcBuildingElementProxyTypeEnum() { Value = ".COMPLEX.";}
		public IfcBuildingElementProxyTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBuildingElementProxyTypeEnum(string value) { return new IfcBuildingElementProxyTypeEnum(value);}
		public static implicit operator string(IfcBuildingElementProxyTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBuildingSystemTypeEnum = ENUMERATION OF
	/// (FENESTRATION
	/// ,FOUNDATION
	/// ,LOADBEARING
	/// ,OUTERSHELL
	/// ,SHADING
	/// ,TRANSPORT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcBuildingSystemTypeEnum: Global.IfcBuildingSystemTypeEnum
	{
		public static string FENESTRATION { get { return ".FENESTRATION."; } private set { } }
		public static string FOUNDATION { get { return ".FOUNDATION."; } private set { } }
		public static string LOADBEARING { get { return ".LOADBEARING."; } private set { } }
		public static string OUTERSHELL { get { return ".OUTERSHELL."; } private set { } }
		public static string SHADING { get { return ".SHADING."; } private set { } }
		public static string TRANSPORT { get { return ".TRANSPORT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcBuildingSystemTypeEnum() { Value = ".FENESTRATION.";}
		public IfcBuildingSystemTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBuildingSystemTypeEnum(string value) { return new IfcBuildingSystemTypeEnum(value);}
		public static implicit operator string(IfcBuildingSystemTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBurnerTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcBurnerTypeEnum: Global.IfcBurnerTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcBurnerTypeEnum() { Value = ".USERDEFINED.";}
		public IfcBurnerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBurnerTypeEnum(string value) { return new IfcBurnerTypeEnum(value);}
		public static implicit operator string(IfcBurnerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCableCarrierFittingTypeEnum = ENUMERATION OF
	/// (BEND
	/// ,CROSS
	/// ,REDUCER
	/// ,TEE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCableCarrierFittingTypeEnum: Global.IfcCableCarrierFittingTypeEnum
	{
		public static string BEND { get { return ".BEND."; } private set { } }
		public static string CROSS { get { return ".CROSS."; } private set { } }
		public static string REDUCER { get { return ".REDUCER."; } private set { } }
		public static string TEE { get { return ".TEE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCableCarrierFittingTypeEnum() { Value = ".BEND.";}
		public IfcCableCarrierFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCableCarrierFittingTypeEnum(string value) { return new IfcCableCarrierFittingTypeEnum(value);}
		public static implicit operator string(IfcCableCarrierFittingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCableCarrierSegmentTypeEnum = ENUMERATION OF
	/// (CABLELADDERSEGMENT
	/// ,CABLETRAYSEGMENT
	/// ,CABLETRUNKINGSEGMENT
	/// ,CONDUITSEGMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCableCarrierSegmentTypeEnum: Global.IfcCableCarrierSegmentTypeEnum
	{
		public static string CABLELADDERSEGMENT { get { return ".CABLELADDERSEGMENT."; } private set { } }
		public static string CABLETRAYSEGMENT { get { return ".CABLETRAYSEGMENT."; } private set { } }
		public static string CABLETRUNKINGSEGMENT { get { return ".CABLETRUNKINGSEGMENT."; } private set { } }
		public static string CONDUITSEGMENT { get { return ".CONDUITSEGMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCableCarrierSegmentTypeEnum() { Value = ".CABLELADDERSEGMENT.";}
		public IfcCableCarrierSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCableCarrierSegmentTypeEnum(string value) { return new IfcCableCarrierSegmentTypeEnum(value);}
		public static implicit operator string(IfcCableCarrierSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCableFittingTypeEnum = ENUMERATION OF
	/// (CONNECTOR
	/// ,ENTRY
	/// ,EXIT
	/// ,JUNCTION
	/// ,TRANSITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCableFittingTypeEnum: Global.IfcCableFittingTypeEnum
	{
		public static string CONNECTOR { get { return ".CONNECTOR."; } private set { } }
		public static string ENTRY { get { return ".ENTRY."; } private set { } }
		public static string EXIT { get { return ".EXIT."; } private set { } }
		public static string JUNCTION { get { return ".JUNCTION."; } private set { } }
		public static string TRANSITION { get { return ".TRANSITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCableFittingTypeEnum() { Value = ".CONNECTOR.";}
		public IfcCableFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCableFittingTypeEnum(string value) { return new IfcCableFittingTypeEnum(value);}
		public static implicit operator string(IfcCableFittingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCableSegmentTypeEnum = ENUMERATION OF
	/// (BUSBARSEGMENT
	/// ,CABLESEGMENT
	/// ,CONDUCTORSEGMENT
	/// ,CORESEGMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCableSegmentTypeEnum: Global.IfcCableSegmentTypeEnum
	{
		public static string BUSBARSEGMENT { get { return ".BUSBARSEGMENT."; } private set { } }
		public static string CABLESEGMENT { get { return ".CABLESEGMENT."; } private set { } }
		public static string CONDUCTORSEGMENT { get { return ".CONDUCTORSEGMENT."; } private set { } }
		public static string CORESEGMENT { get { return ".CORESEGMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCableSegmentTypeEnum() { Value = ".BUSBARSEGMENT.";}
		public IfcCableSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCableSegmentTypeEnum(string value) { return new IfcCableSegmentTypeEnum(value);}
		public static implicit operator string(IfcCableSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcChangeActionEnum = ENUMERATION OF
	/// (NOCHANGE
	/// ,MODIFIED
	/// ,ADDED
	/// ,DELETED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcChangeActionEnum: Global.IfcChangeActionEnum
	{
		public static string NOCHANGE { get { return ".NOCHANGE."; } private set { } }
		public static string MODIFIED { get { return ".MODIFIED."; } private set { } }
		public static string ADDED { get { return ".ADDED."; } private set { } }
		public static string DELETED { get { return ".DELETED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcChangeActionEnum() { Value = ".NOCHANGE.";}
		public IfcChangeActionEnum(string value) { Value = value; }
		public static implicit operator IfcChangeActionEnum(string value) { return new IfcChangeActionEnum(value);}
		public static implicit operator string(IfcChangeActionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcChillerTypeEnum = ENUMERATION OF
	/// (AIRCOOLED
	/// ,WATERCOOLED
	/// ,HEATRECOVERY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcChillerTypeEnum: Global.IfcChillerTypeEnum
	{
		public static string AIRCOOLED { get { return ".AIRCOOLED."; } private set { } }
		public static string WATERCOOLED { get { return ".WATERCOOLED."; } private set { } }
		public static string HEATRECOVERY { get { return ".HEATRECOVERY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcChillerTypeEnum() { Value = ".AIRCOOLED.";}
		public IfcChillerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcChillerTypeEnum(string value) { return new IfcChillerTypeEnum(value);}
		public static implicit operator string(IfcChillerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcChimneyTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcChimneyTypeEnum: Global.IfcChimneyTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcChimneyTypeEnum() { Value = ".USERDEFINED.";}
		public IfcChimneyTypeEnum(string value) { Value = value; }
		public static implicit operator IfcChimneyTypeEnum(string value) { return new IfcChimneyTypeEnum(value);}
		public static implicit operator string(IfcChimneyTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCoilTypeEnum = ENUMERATION OF
	/// (DXCOOLINGCOIL
	/// ,ELECTRICHEATINGCOIL
	/// ,GASHEATINGCOIL
	/// ,HYDRONICCOIL
	/// ,STEAMHEATINGCOIL
	/// ,WATERCOOLINGCOIL
	/// ,WATERHEATINGCOIL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCoilTypeEnum: Global.IfcCoilTypeEnum
	{
		public static string DXCOOLINGCOIL { get { return ".DXCOOLINGCOIL."; } private set { } }
		public static string ELECTRICHEATINGCOIL { get { return ".ELECTRICHEATINGCOIL."; } private set { } }
		public static string GASHEATINGCOIL { get { return ".GASHEATINGCOIL."; } private set { } }
		public static string HYDRONICCOIL { get { return ".HYDRONICCOIL."; } private set { } }
		public static string STEAMHEATINGCOIL { get { return ".STEAMHEATINGCOIL."; } private set { } }
		public static string WATERCOOLINGCOIL { get { return ".WATERCOOLINGCOIL."; } private set { } }
		public static string WATERHEATINGCOIL { get { return ".WATERHEATINGCOIL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCoilTypeEnum() { Value = ".DXCOOLINGCOIL.";}
		public IfcCoilTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCoilTypeEnum(string value) { return new IfcCoilTypeEnum(value);}
		public static implicit operator string(IfcCoilTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcColumnTypeEnum = ENUMERATION OF
	/// (COLUMN
	/// ,PILASTER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcColumnTypeEnum: Global.IfcColumnTypeEnum
	{
		public static string COLUMN { get { return ".COLUMN."; } private set { } }
		public static string PILASTER { get { return ".PILASTER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcColumnTypeEnum() { Value = ".COLUMN.";}
		public IfcColumnTypeEnum(string value) { Value = value; }
		public static implicit operator IfcColumnTypeEnum(string value) { return new IfcColumnTypeEnum(value);}
		public static implicit operator string(IfcColumnTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCommunicationsApplianceTypeEnum = ENUMERATION OF
	/// (ANTENNA
	/// ,COMPUTER
	/// ,FAX
	/// ,GATEWAY
	/// ,MODEM
	/// ,NETWORKAPPLIANCE
	/// ,NETWORKBRIDGE
	/// ,NETWORKHUB
	/// ,PRINTER
	/// ,REPEATER
	/// ,ROUTER
	/// ,SCANNER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCommunicationsApplianceTypeEnum: Global.IfcCommunicationsApplianceTypeEnum
	{
		public static string ANTENNA { get { return ".ANTENNA."; } private set { } }
		public static string COMPUTER { get { return ".COMPUTER."; } private set { } }
		public static string FAX { get { return ".FAX."; } private set { } }
		public static string GATEWAY { get { return ".GATEWAY."; } private set { } }
		public static string MODEM { get { return ".MODEM."; } private set { } }
		public static string NETWORKAPPLIANCE { get { return ".NETWORKAPPLIANCE."; } private set { } }
		public static string NETWORKBRIDGE { get { return ".NETWORKBRIDGE."; } private set { } }
		public static string NETWORKHUB { get { return ".NETWORKHUB."; } private set { } }
		public static string PRINTER { get { return ".PRINTER."; } private set { } }
		public static string REPEATER { get { return ".REPEATER."; } private set { } }
		public static string ROUTER { get { return ".ROUTER."; } private set { } }
		public static string SCANNER { get { return ".SCANNER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCommunicationsApplianceTypeEnum() { Value = ".ANTENNA.";}
		public IfcCommunicationsApplianceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCommunicationsApplianceTypeEnum(string value) { return new IfcCommunicationsApplianceTypeEnum(value);}
		public static implicit operator string(IfcCommunicationsApplianceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcComplexPropertyTemplateTypeEnum = ENUMERATION OF
	/// (P_COMPLEX
	/// ,Q_COMPLEX);
	/// END_TYPE;
	/// <summary>
	public class IfcComplexPropertyTemplateTypeEnum: Global.IfcComplexPropertyTemplateTypeEnum
	{
		public static string P_COMPLEX { get { return ".P_COMPLEX."; } private set { } }
		public static string Q_COMPLEX { get { return ".Q_COMPLEX."; } private set { } }
		public string Value {get; set;}
		public IfcComplexPropertyTemplateTypeEnum() { Value = ".P_COMPLEX.";}
		public IfcComplexPropertyTemplateTypeEnum(string value) { Value = value; }
		public static implicit operator IfcComplexPropertyTemplateTypeEnum(string value) { return new IfcComplexPropertyTemplateTypeEnum(value);}
		public static implicit operator string(IfcComplexPropertyTemplateTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCompressorTypeEnum = ENUMERATION OF
	/// (DYNAMIC
	/// ,RECIPROCATING
	/// ,ROTARY
	/// ,SCROLL
	/// ,TROCHOIDAL
	/// ,SINGLESTAGE
	/// ,BOOSTER
	/// ,OPENTYPE
	/// ,HERMETIC
	/// ,SEMIHERMETIC
	/// ,WELDEDSHELLHERMETIC
	/// ,ROLLINGPISTON
	/// ,ROTARYVANE
	/// ,SINGLESCREW
	/// ,TWINSCREW
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCompressorTypeEnum: Global.IfcCompressorTypeEnum
	{
		public static string DYNAMIC { get { return ".DYNAMIC."; } private set { } }
		public static string RECIPROCATING { get { return ".RECIPROCATING."; } private set { } }
		public static string ROTARY { get { return ".ROTARY."; } private set { } }
		public static string SCROLL { get { return ".SCROLL."; } private set { } }
		public static string TROCHOIDAL { get { return ".TROCHOIDAL."; } private set { } }
		public static string SINGLESTAGE { get { return ".SINGLESTAGE."; } private set { } }
		public static string BOOSTER { get { return ".BOOSTER."; } private set { } }
		public static string OPENTYPE { get { return ".OPENTYPE."; } private set { } }
		public static string HERMETIC { get { return ".HERMETIC."; } private set { } }
		public static string SEMIHERMETIC { get { return ".SEMIHERMETIC."; } private set { } }
		public static string WELDEDSHELLHERMETIC { get { return ".WELDEDSHELLHERMETIC."; } private set { } }
		public static string ROLLINGPISTON { get { return ".ROLLINGPISTON."; } private set { } }
		public static string ROTARYVANE { get { return ".ROTARYVANE."; } private set { } }
		public static string SINGLESCREW { get { return ".SINGLESCREW."; } private set { } }
		public static string TWINSCREW { get { return ".TWINSCREW."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCompressorTypeEnum() { Value = ".DYNAMIC.";}
		public IfcCompressorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCompressorTypeEnum(string value) { return new IfcCompressorTypeEnum(value);}
		public static implicit operator string(IfcCompressorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCondenserTypeEnum = ENUMERATION OF
	/// (AIRCOOLED
	/// ,EVAPORATIVECOOLED
	/// ,WATERCOOLED
	/// ,WATERCOOLEDBRAZEDPLATE
	/// ,WATERCOOLEDSHELLCOIL
	/// ,WATERCOOLEDSHELLTUBE
	/// ,WATERCOOLEDTUBEINTUBE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCondenserTypeEnum: Global.IfcCondenserTypeEnum
	{
		public static string AIRCOOLED { get { return ".AIRCOOLED."; } private set { } }
		public static string EVAPORATIVECOOLED { get { return ".EVAPORATIVECOOLED."; } private set { } }
		public static string WATERCOOLED { get { return ".WATERCOOLED."; } private set { } }
		public static string WATERCOOLEDBRAZEDPLATE { get { return ".WATERCOOLEDBRAZEDPLATE."; } private set { } }
		public static string WATERCOOLEDSHELLCOIL { get { return ".WATERCOOLEDSHELLCOIL."; } private set { } }
		public static string WATERCOOLEDSHELLTUBE { get { return ".WATERCOOLEDSHELLTUBE."; } private set { } }
		public static string WATERCOOLEDTUBEINTUBE { get { return ".WATERCOOLEDTUBEINTUBE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCondenserTypeEnum() { Value = ".AIRCOOLED.";}
		public IfcCondenserTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCondenserTypeEnum(string value) { return new IfcCondenserTypeEnum(value);}
		public static implicit operator string(IfcCondenserTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcConnectionTypeEnum = ENUMERATION OF
	/// (ATPATH
	/// ,ATSTART
	/// ,ATEND
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcConnectionTypeEnum: Global.IfcConnectionTypeEnum
	{
		public static string ATPATH { get { return ".ATPATH."; } private set { } }
		public static string ATSTART { get { return ".ATSTART."; } private set { } }
		public static string ATEND { get { return ".ATEND."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcConnectionTypeEnum() { Value = ".ATPATH.";}
		public IfcConnectionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcConnectionTypeEnum(string value) { return new IfcConnectionTypeEnum(value);}
		public static implicit operator string(IfcConnectionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcConstraintEnum = ENUMERATION OF
	/// (HARD
	/// ,SOFT
	/// ,ADVISORY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcConstraintEnum: Global.IfcConstraintEnum
	{
		public static string HARD { get { return ".HARD."; } private set { } }
		public static string SOFT { get { return ".SOFT."; } private set { } }
		public static string ADVISORY { get { return ".ADVISORY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcConstraintEnum() { Value = ".HARD.";}
		public IfcConstraintEnum(string value) { Value = value; }
		public static implicit operator IfcConstraintEnum(string value) { return new IfcConstraintEnum(value);}
		public static implicit operator string(IfcConstraintEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcConstructionEquipmentResourceTypeEnum = ENUMERATION OF
	/// (DEMOLISHING
	/// ,EARTHMOVING
	/// ,ERECTING
	/// ,HEATING
	/// ,LIGHTING
	/// ,PAVING
	/// ,PUMPING
	/// ,TRANSPORTING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcConstructionEquipmentResourceTypeEnum: Global.IfcConstructionEquipmentResourceTypeEnum
	{
		public static string DEMOLISHING { get { return ".DEMOLISHING."; } private set { } }
		public static string EARTHMOVING { get { return ".EARTHMOVING."; } private set { } }
		public static string ERECTING { get { return ".ERECTING."; } private set { } }
		public static string HEATING { get { return ".HEATING."; } private set { } }
		public static string LIGHTING { get { return ".LIGHTING."; } private set { } }
		public static string PAVING { get { return ".PAVING."; } private set { } }
		public static string PUMPING { get { return ".PUMPING."; } private set { } }
		public static string TRANSPORTING { get { return ".TRANSPORTING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcConstructionEquipmentResourceTypeEnum() { Value = ".DEMOLISHING.";}
		public IfcConstructionEquipmentResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcConstructionEquipmentResourceTypeEnum(string value) { return new IfcConstructionEquipmentResourceTypeEnum(value);}
		public static implicit operator string(IfcConstructionEquipmentResourceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcConstructionMaterialResourceTypeEnum = ENUMERATION OF
	/// (AGGREGATES
	/// ,CONCRETE
	/// ,DRYWALL
	/// ,FUEL
	/// ,GYPSUM
	/// ,MASONRY
	/// ,METAL
	/// ,PLASTIC
	/// ,WOOD
	/// ,NOTDEFINED
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcConstructionMaterialResourceTypeEnum: Global.IfcConstructionMaterialResourceTypeEnum
	{
		public static string AGGREGATES { get { return ".AGGREGATES."; } private set { } }
		public static string CONCRETE { get { return ".CONCRETE."; } private set { } }
		public static string DRYWALL { get { return ".DRYWALL."; } private set { } }
		public static string FUEL { get { return ".FUEL."; } private set { } }
		public static string GYPSUM { get { return ".GYPSUM."; } private set { } }
		public static string MASONRY { get { return ".MASONRY."; } private set { } }
		public static string METAL { get { return ".METAL."; } private set { } }
		public static string PLASTIC { get { return ".PLASTIC."; } private set { } }
		public static string WOOD { get { return ".WOOD."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcConstructionMaterialResourceTypeEnum() { Value = ".AGGREGATES.";}
		public IfcConstructionMaterialResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcConstructionMaterialResourceTypeEnum(string value) { return new IfcConstructionMaterialResourceTypeEnum(value);}
		public static implicit operator string(IfcConstructionMaterialResourceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcConstructionProductResourceTypeEnum = ENUMERATION OF
	/// (ASSEMBLY
	/// ,FORMWORK
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcConstructionProductResourceTypeEnum: Global.IfcConstructionProductResourceTypeEnum
	{
		public static string ASSEMBLY { get { return ".ASSEMBLY."; } private set { } }
		public static string FORMWORK { get { return ".FORMWORK."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcConstructionProductResourceTypeEnum() { Value = ".ASSEMBLY.";}
		public IfcConstructionProductResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcConstructionProductResourceTypeEnum(string value) { return new IfcConstructionProductResourceTypeEnum(value);}
		public static implicit operator string(IfcConstructionProductResourceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcControllerTypeEnum = ENUMERATION OF
	/// (FLOATING
	/// ,PROGRAMMABLE
	/// ,PROPORTIONAL
	/// ,MULTIPOSITION
	/// ,TWOPOSITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcControllerTypeEnum: Global.IfcControllerTypeEnum
	{
		public static string FLOATING { get { return ".FLOATING."; } private set { } }
		public static string PROGRAMMABLE { get { return ".PROGRAMMABLE."; } private set { } }
		public static string PROPORTIONAL { get { return ".PROPORTIONAL."; } private set { } }
		public static string MULTIPOSITION { get { return ".MULTIPOSITION."; } private set { } }
		public static string TWOPOSITION { get { return ".TWOPOSITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcControllerTypeEnum() { Value = ".FLOATING.";}
		public IfcControllerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcControllerTypeEnum(string value) { return new IfcControllerTypeEnum(value);}
		public static implicit operator string(IfcControllerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCooledBeamTypeEnum = ENUMERATION OF
	/// (ACTIVE
	/// ,PASSIVE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCooledBeamTypeEnum: Global.IfcCooledBeamTypeEnum
	{
		public static string ACTIVE { get { return ".ACTIVE."; } private set { } }
		public static string PASSIVE { get { return ".PASSIVE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCooledBeamTypeEnum() { Value = ".ACTIVE.";}
		public IfcCooledBeamTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCooledBeamTypeEnum(string value) { return new IfcCooledBeamTypeEnum(value);}
		public static implicit operator string(IfcCooledBeamTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCoolingTowerTypeEnum = ENUMERATION OF
	/// (NATURALDRAFT
	/// ,MECHANICALINDUCEDDRAFT
	/// ,MECHANICALFORCEDDRAFT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCoolingTowerTypeEnum: Global.IfcCoolingTowerTypeEnum
	{
		public static string NATURALDRAFT { get { return ".NATURALDRAFT."; } private set { } }
		public static string MECHANICALINDUCEDDRAFT { get { return ".MECHANICALINDUCEDDRAFT."; } private set { } }
		public static string MECHANICALFORCEDDRAFT { get { return ".MECHANICALFORCEDDRAFT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCoolingTowerTypeEnum() { Value = ".NATURALDRAFT.";}
		public IfcCoolingTowerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCoolingTowerTypeEnum(string value) { return new IfcCoolingTowerTypeEnum(value);}
		public static implicit operator string(IfcCoolingTowerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCostItemTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCostItemTypeEnum: Global.IfcCostItemTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCostItemTypeEnum() { Value = ".USERDEFINED.";}
		public IfcCostItemTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCostItemTypeEnum(string value) { return new IfcCostItemTypeEnum(value);}
		public static implicit operator string(IfcCostItemTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCostScheduleTypeEnum = ENUMERATION OF
	/// (BUDGET
	/// ,COSTPLAN
	/// ,ESTIMATE
	/// ,TENDER
	/// ,PRICEDBILLOFQUANTITIES
	/// ,UNPRICEDBILLOFQUANTITIES
	/// ,SCHEDULEOFRATES
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCostScheduleTypeEnum: Global.IfcCostScheduleTypeEnum
	{
		public static string BUDGET { get { return ".BUDGET."; } private set { } }
		public static string COSTPLAN { get { return ".COSTPLAN."; } private set { } }
		public static string ESTIMATE { get { return ".ESTIMATE."; } private set { } }
		public static string TENDER { get { return ".TENDER."; } private set { } }
		public static string PRICEDBILLOFQUANTITIES { get { return ".PRICEDBILLOFQUANTITIES."; } private set { } }
		public static string UNPRICEDBILLOFQUANTITIES { get { return ".UNPRICEDBILLOFQUANTITIES."; } private set { } }
		public static string SCHEDULEOFRATES { get { return ".SCHEDULEOFRATES."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCostScheduleTypeEnum() { Value = ".BUDGET.";}
		public IfcCostScheduleTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCostScheduleTypeEnum(string value) { return new IfcCostScheduleTypeEnum(value);}
		public static implicit operator string(IfcCostScheduleTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCoveringTypeEnum = ENUMERATION OF
	/// (CEILING
	/// ,FLOORING
	/// ,CLADDING
	/// ,ROOFING
	/// ,MOLDING
	/// ,SKIRTINGBOARD
	/// ,INSULATION
	/// ,MEMBRANE
	/// ,SLEEVING
	/// ,WRAPPING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCoveringTypeEnum: Global.IfcCoveringTypeEnum
	{
		public static string CEILING { get { return ".CEILING."; } private set { } }
		public static string FLOORING { get { return ".FLOORING."; } private set { } }
		public static string CLADDING { get { return ".CLADDING."; } private set { } }
		public static string ROOFING { get { return ".ROOFING."; } private set { } }
		public static string MOLDING { get { return ".MOLDING."; } private set { } }
		public static string SKIRTINGBOARD { get { return ".SKIRTINGBOARD."; } private set { } }
		public static string INSULATION { get { return ".INSULATION."; } private set { } }
		public static string MEMBRANE { get { return ".MEMBRANE."; } private set { } }
		public static string SLEEVING { get { return ".SLEEVING."; } private set { } }
		public static string WRAPPING { get { return ".WRAPPING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCoveringTypeEnum() { Value = ".CEILING.";}
		public IfcCoveringTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCoveringTypeEnum(string value) { return new IfcCoveringTypeEnum(value);}
		public static implicit operator string(IfcCoveringTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCrewResourceTypeEnum = ENUMERATION OF
	/// (OFFICE
	/// ,SITE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCrewResourceTypeEnum: Global.IfcCrewResourceTypeEnum
	{
		public static string OFFICE { get { return ".OFFICE."; } private set { } }
		public static string SITE { get { return ".SITE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCrewResourceTypeEnum() { Value = ".OFFICE.";}
		public IfcCrewResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCrewResourceTypeEnum(string value) { return new IfcCrewResourceTypeEnum(value);}
		public static implicit operator string(IfcCrewResourceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCurtainWallTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCurtainWallTypeEnum: Global.IfcCurtainWallTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCurtainWallTypeEnum() { Value = ".USERDEFINED.";}
		public IfcCurtainWallTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCurtainWallTypeEnum(string value) { return new IfcCurtainWallTypeEnum(value);}
		public static implicit operator string(IfcCurtainWallTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCurveInterpolationEnum = ENUMERATION OF
	/// (LINEAR
	/// ,LOG_LINEAR
	/// ,LOG_LOG
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCurveInterpolationEnum: Global.IfcCurveInterpolationEnum
	{
		public static string LINEAR { get { return ".LINEAR."; } private set { } }
		public static string LOG_LINEAR { get { return ".LOG_LINEAR."; } private set { } }
		public static string LOG_LOG { get { return ".LOG_LOG."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCurveInterpolationEnum() { Value = ".LINEAR.";}
		public IfcCurveInterpolationEnum(string value) { Value = value; }
		public static implicit operator IfcCurveInterpolationEnum(string value) { return new IfcCurveInterpolationEnum(value);}
		public static implicit operator string(IfcCurveInterpolationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDamperTypeEnum = ENUMERATION OF
	/// (BACKDRAFTDAMPER
	/// ,BALANCINGDAMPER
	/// ,BLASTDAMPER
	/// ,CONTROLDAMPER
	/// ,FIREDAMPER
	/// ,FIRESMOKEDAMPER
	/// ,FUMEHOODEXHAUST
	/// ,GRAVITYDAMPER
	/// ,GRAVITYRELIEFDAMPER
	/// ,RELIEFDAMPER
	/// ,SMOKEDAMPER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDamperTypeEnum: Global.IfcDamperTypeEnum
	{
		public static string BACKDRAFTDAMPER { get { return ".BACKDRAFTDAMPER."; } private set { } }
		public static string BALANCINGDAMPER { get { return ".BALANCINGDAMPER."; } private set { } }
		public static string BLASTDAMPER { get { return ".BLASTDAMPER."; } private set { } }
		public static string CONTROLDAMPER { get { return ".CONTROLDAMPER."; } private set { } }
		public static string FIREDAMPER { get { return ".FIREDAMPER."; } private set { } }
		public static string FIRESMOKEDAMPER { get { return ".FIRESMOKEDAMPER."; } private set { } }
		public static string FUMEHOODEXHAUST { get { return ".FUMEHOODEXHAUST."; } private set { } }
		public static string GRAVITYDAMPER { get { return ".GRAVITYDAMPER."; } private set { } }
		public static string GRAVITYRELIEFDAMPER { get { return ".GRAVITYRELIEFDAMPER."; } private set { } }
		public static string RELIEFDAMPER { get { return ".RELIEFDAMPER."; } private set { } }
		public static string SMOKEDAMPER { get { return ".SMOKEDAMPER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDamperTypeEnum() { Value = ".BACKDRAFTDAMPER.";}
		public IfcDamperTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDamperTypeEnum(string value) { return new IfcDamperTypeEnum(value);}
		public static implicit operator string(IfcDamperTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDataOriginEnum = ENUMERATION OF
	/// (MEASURED
	/// ,PREDICTED
	/// ,SIMULATED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDataOriginEnum: Global.IfcDataOriginEnum
	{
		public static string MEASURED { get { return ".MEASURED."; } private set { } }
		public static string PREDICTED { get { return ".PREDICTED."; } private set { } }
		public static string SIMULATED { get { return ".SIMULATED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDataOriginEnum() { Value = ".MEASURED.";}
		public IfcDataOriginEnum(string value) { Value = value; }
		public static implicit operator IfcDataOriginEnum(string value) { return new IfcDataOriginEnum(value);}
		public static implicit operator string(IfcDataOriginEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDerivedUnitEnum = ENUMERATION OF
	/// (ANGULARVELOCITYUNIT
	/// ,AREADENSITYUNIT
	/// ,COMPOUNDPLANEANGLEUNIT
	/// ,DYNAMICVISCOSITYUNIT
	/// ,HEATFLUXDENSITYUNIT
	/// ,INTEGERCOUNTRATEUNIT
	/// ,ISOTHERMALMOISTURECAPACITYUNIT
	/// ,KINEMATICVISCOSITYUNIT
	/// ,LINEARVELOCITYUNIT
	/// ,MASSDENSITYUNIT
	/// ,MASSFLOWRATEUNIT
	/// ,MOISTUREDIFFUSIVITYUNIT
	/// ,MOLECULARWEIGHTUNIT
	/// ,SPECIFICHEATCAPACITYUNIT
	/// ,THERMALADMITTANCEUNIT
	/// ,THERMALCONDUCTANCEUNIT
	/// ,THERMALRESISTANCEUNIT
	/// ,THERMALTRANSMITTANCEUNIT
	/// ,VAPORPERMEABILITYUNIT
	/// ,VOLUMETRICFLOWRATEUNIT
	/// ,ROTATIONALFREQUENCYUNIT
	/// ,TORQUEUNIT
	/// ,MOMENTOFINERTIAUNIT
	/// ,LINEARMOMENTUNIT
	/// ,LINEARFORCEUNIT
	/// ,PLANARFORCEUNIT
	/// ,MODULUSOFELASTICITYUNIT
	/// ,SHEARMODULUSUNIT
	/// ,LINEARSTIFFNESSUNIT
	/// ,ROTATIONALSTIFFNESSUNIT
	/// ,MODULUSOFSUBGRADEREACTIONUNIT
	/// ,ACCELERATIONUNIT
	/// ,CURVATUREUNIT
	/// ,HEATINGVALUEUNIT
	/// ,IONCONCENTRATIONUNIT
	/// ,LUMINOUSINTENSITYDISTRIBUTIONUNIT
	/// ,MASSPERLENGTHUNIT
	/// ,MODULUSOFLINEARSUBGRADEREACTIONUNIT
	/// ,MODULUSOFROTATIONALSUBGRADEREACTIONUNIT
	/// ,PHUNIT
	/// ,ROTATIONALMASSUNIT
	/// ,SECTIONAREAINTEGRALUNIT
	/// ,SECTIONMODULUSUNIT
	/// ,SOUNDPOWERLEVELUNIT
	/// ,SOUNDPOWERUNIT
	/// ,SOUNDPRESSURELEVELUNIT
	/// ,SOUNDPRESSUREUNIT
	/// ,TEMPERATUREGRADIENTUNIT
	/// ,TEMPERATURERATEOFCHANGEUNIT
	/// ,THERMALEXPANSIONCOEFFICIENTUNIT
	/// ,WARPINGCONSTANTUNIT
	/// ,WARPINGMOMENTUNIT
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDerivedUnitEnum: Global.IfcDerivedUnitEnum
	{
		public static string ANGULARVELOCITYUNIT { get { return ".ANGULARVELOCITYUNIT."; } private set { } }
		public static string AREADENSITYUNIT { get { return ".AREADENSITYUNIT."; } private set { } }
		public static string COMPOUNDPLANEANGLEUNIT { get { return ".COMPOUNDPLANEANGLEUNIT."; } private set { } }
		public static string DYNAMICVISCOSITYUNIT { get { return ".DYNAMICVISCOSITYUNIT."; } private set { } }
		public static string HEATFLUXDENSITYUNIT { get { return ".HEATFLUXDENSITYUNIT."; } private set { } }
		public static string INTEGERCOUNTRATEUNIT { get { return ".INTEGERCOUNTRATEUNIT."; } private set { } }
		public static string ISOTHERMALMOISTURECAPACITYUNIT { get { return ".ISOTHERMALMOISTURECAPACITYUNIT."; } private set { } }
		public static string KINEMATICVISCOSITYUNIT { get { return ".KINEMATICVISCOSITYUNIT."; } private set { } }
		public static string LINEARVELOCITYUNIT { get { return ".LINEARVELOCITYUNIT."; } private set { } }
		public static string MASSDENSITYUNIT { get { return ".MASSDENSITYUNIT."; } private set { } }
		public static string MASSFLOWRATEUNIT { get { return ".MASSFLOWRATEUNIT."; } private set { } }
		public static string MOISTUREDIFFUSIVITYUNIT { get { return ".MOISTUREDIFFUSIVITYUNIT."; } private set { } }
		public static string MOLECULARWEIGHTUNIT { get { return ".MOLECULARWEIGHTUNIT."; } private set { } }
		public static string SPECIFICHEATCAPACITYUNIT { get { return ".SPECIFICHEATCAPACITYUNIT."; } private set { } }
		public static string THERMALADMITTANCEUNIT { get { return ".THERMALADMITTANCEUNIT."; } private set { } }
		public static string THERMALCONDUCTANCEUNIT { get { return ".THERMALCONDUCTANCEUNIT."; } private set { } }
		public static string THERMALRESISTANCEUNIT { get { return ".THERMALRESISTANCEUNIT."; } private set { } }
		public static string THERMALTRANSMITTANCEUNIT { get { return ".THERMALTRANSMITTANCEUNIT."; } private set { } }
		public static string VAPORPERMEABILITYUNIT { get { return ".VAPORPERMEABILITYUNIT."; } private set { } }
		public static string VOLUMETRICFLOWRATEUNIT { get { return ".VOLUMETRICFLOWRATEUNIT."; } private set { } }
		public static string ROTATIONALFREQUENCYUNIT { get { return ".ROTATIONALFREQUENCYUNIT."; } private set { } }
		public static string TORQUEUNIT { get { return ".TORQUEUNIT."; } private set { } }
		public static string MOMENTOFINERTIAUNIT { get { return ".MOMENTOFINERTIAUNIT."; } private set { } }
		public static string LINEARMOMENTUNIT { get { return ".LINEARMOMENTUNIT."; } private set { } }
		public static string LINEARFORCEUNIT { get { return ".LINEARFORCEUNIT."; } private set { } }
		public static string PLANARFORCEUNIT { get { return ".PLANARFORCEUNIT."; } private set { } }
		public static string MODULUSOFELASTICITYUNIT { get { return ".MODULUSOFELASTICITYUNIT."; } private set { } }
		public static string SHEARMODULUSUNIT { get { return ".SHEARMODULUSUNIT."; } private set { } }
		public static string LINEARSTIFFNESSUNIT { get { return ".LINEARSTIFFNESSUNIT."; } private set { } }
		public static string ROTATIONALSTIFFNESSUNIT { get { return ".ROTATIONALSTIFFNESSUNIT."; } private set { } }
		public static string MODULUSOFSUBGRADEREACTIONUNIT { get { return ".MODULUSOFSUBGRADEREACTIONUNIT."; } private set { } }
		public static string ACCELERATIONUNIT { get { return ".ACCELERATIONUNIT."; } private set { } }
		public static string CURVATUREUNIT { get { return ".CURVATUREUNIT."; } private set { } }
		public static string HEATINGVALUEUNIT { get { return ".HEATINGVALUEUNIT."; } private set { } }
		public static string IONCONCENTRATIONUNIT { get { return ".IONCONCENTRATIONUNIT."; } private set { } }
		public static string LUMINOUSINTENSITYDISTRIBUTIONUNIT { get { return ".LUMINOUSINTENSITYDISTRIBUTIONUNIT."; } private set { } }
		public static string MASSPERLENGTHUNIT { get { return ".MASSPERLENGTHUNIT."; } private set { } }
		public static string MODULUSOFLINEARSUBGRADEREACTIONUNIT { get { return ".MODULUSOFLINEARSUBGRADEREACTIONUNIT."; } private set { } }
		public static string MODULUSOFROTATIONALSUBGRADEREACTIONUNIT { get { return ".MODULUSOFROTATIONALSUBGRADEREACTIONUNIT."; } private set { } }
		public static string PHUNIT { get { return ".PHUNIT."; } private set { } }
		public static string ROTATIONALMASSUNIT { get { return ".ROTATIONALMASSUNIT."; } private set { } }
		public static string SECTIONAREAINTEGRALUNIT { get { return ".SECTIONAREAINTEGRALUNIT."; } private set { } }
		public static string SECTIONMODULUSUNIT { get { return ".SECTIONMODULUSUNIT."; } private set { } }
		public static string SOUNDPOWERLEVELUNIT { get { return ".SOUNDPOWERLEVELUNIT."; } private set { } }
		public static string SOUNDPOWERUNIT { get { return ".SOUNDPOWERUNIT."; } private set { } }
		public static string SOUNDPRESSURELEVELUNIT { get { return ".SOUNDPRESSURELEVELUNIT."; } private set { } }
		public static string SOUNDPRESSUREUNIT { get { return ".SOUNDPRESSUREUNIT."; } private set { } }
		public static string TEMPERATUREGRADIENTUNIT { get { return ".TEMPERATUREGRADIENTUNIT."; } private set { } }
		public static string TEMPERATURERATEOFCHANGEUNIT { get { return ".TEMPERATURERATEOFCHANGEUNIT."; } private set { } }
		public static string THERMALEXPANSIONCOEFFICIENTUNIT { get { return ".THERMALEXPANSIONCOEFFICIENTUNIT."; } private set { } }
		public static string WARPINGCONSTANTUNIT { get { return ".WARPINGCONSTANTUNIT."; } private set { } }
		public static string WARPINGMOMENTUNIT { get { return ".WARPINGMOMENTUNIT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDerivedUnitEnum() { Value = ".ANGULARVELOCITYUNIT.";}
		public IfcDerivedUnitEnum(string value) { Value = value; }
		public static implicit operator IfcDerivedUnitEnum(string value) { return new IfcDerivedUnitEnum(value);}
		public static implicit operator string(IfcDerivedUnitEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDirectionSenseEnum = ENUMERATION OF
	/// (POSITIVE
	/// ,NEGATIVE);
	/// END_TYPE;
	/// <summary>
	public class IfcDirectionSenseEnum: Global.IfcDirectionSenseEnum
	{
		public static string POSITIVE { get { return ".POSITIVE."; } private set { } }
		public static string NEGATIVE { get { return ".NEGATIVE."; } private set { } }
		public string Value {get; set;}
		public IfcDirectionSenseEnum() { Value = ".POSITIVE.";}
		public IfcDirectionSenseEnum(string value) { Value = value; }
		public static implicit operator IfcDirectionSenseEnum(string value) { return new IfcDirectionSenseEnum(value);}
		public static implicit operator string(IfcDirectionSenseEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDiscreteAccessoryTypeEnum = ENUMERATION OF
	/// (ANCHORPLATE
	/// ,BRACKET
	/// ,SHOE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDiscreteAccessoryTypeEnum: Global.IfcDiscreteAccessoryTypeEnum
	{
		public static string ANCHORPLATE { get { return ".ANCHORPLATE."; } private set { } }
		public static string BRACKET { get { return ".BRACKET."; } private set { } }
		public static string SHOE { get { return ".SHOE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDiscreteAccessoryTypeEnum() { Value = ".ANCHORPLATE.";}
		public IfcDiscreteAccessoryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDiscreteAccessoryTypeEnum(string value) { return new IfcDiscreteAccessoryTypeEnum(value);}
		public static implicit operator string(IfcDiscreteAccessoryTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDistributionChamberElementTypeEnum = ENUMERATION OF
	/// (FORMEDDUCT
	/// ,INSPECTIONCHAMBER
	/// ,INSPECTIONPIT
	/// ,MANHOLE
	/// ,METERCHAMBER
	/// ,SUMP
	/// ,TRENCH
	/// ,VALVECHAMBER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDistributionChamberElementTypeEnum: Global.IfcDistributionChamberElementTypeEnum
	{
		public static string FORMEDDUCT { get { return ".FORMEDDUCT."; } private set { } }
		public static string INSPECTIONCHAMBER { get { return ".INSPECTIONCHAMBER."; } private set { } }
		public static string INSPECTIONPIT { get { return ".INSPECTIONPIT."; } private set { } }
		public static string MANHOLE { get { return ".MANHOLE."; } private set { } }
		public static string METERCHAMBER { get { return ".METERCHAMBER."; } private set { } }
		public static string SUMP { get { return ".SUMP."; } private set { } }
		public static string TRENCH { get { return ".TRENCH."; } private set { } }
		public static string VALVECHAMBER { get { return ".VALVECHAMBER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDistributionChamberElementTypeEnum() { Value = ".FORMEDDUCT.";}
		public IfcDistributionChamberElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDistributionChamberElementTypeEnum(string value) { return new IfcDistributionChamberElementTypeEnum(value);}
		public static implicit operator string(IfcDistributionChamberElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDistributionPortTypeEnum = ENUMERATION OF
	/// (CABLE
	/// ,CABLECARRIER
	/// ,DUCT
	/// ,PIPE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDistributionPortTypeEnum: Global.IfcDistributionPortTypeEnum
	{
		public static string CABLE { get { return ".CABLE."; } private set { } }
		public static string CABLECARRIER { get { return ".CABLECARRIER."; } private set { } }
		public static string DUCT { get { return ".DUCT."; } private set { } }
		public static string PIPE { get { return ".PIPE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDistributionPortTypeEnum() { Value = ".CABLE.";}
		public IfcDistributionPortTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDistributionPortTypeEnum(string value) { return new IfcDistributionPortTypeEnum(value);}
		public static implicit operator string(IfcDistributionPortTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDistributionSystemEnum = ENUMERATION OF
	/// (AIRCONDITIONING
	/// ,AUDIOVISUAL
	/// ,CHEMICAL
	/// ,CHILLEDWATER
	/// ,COMMUNICATION
	/// ,COMPRESSEDAIR
	/// ,CONDENSERWATER
	/// ,CONTROL
	/// ,CONVEYING
	/// ,DATA
	/// ,DISPOSAL
	/// ,DOMESTICCOLDWATER
	/// ,DOMESTICHOTWATER
	/// ,DRAINAGE
	/// ,EARTHING
	/// ,ELECTRICAL
	/// ,ELECTROACOUSTIC
	/// ,EXHAUST
	/// ,FIREPROTECTION
	/// ,FUEL
	/// ,GAS
	/// ,HAZARDOUS
	/// ,HEATING
	/// ,LIGHTING
	/// ,LIGHTNINGPROTECTION
	/// ,MUNICIPALSOLIDWASTE
	/// ,OIL
	/// ,OPERATIONAL
	/// ,POWERGENERATION
	/// ,RAINWATER
	/// ,REFRIGERATION
	/// ,SECURITY
	/// ,SEWAGE
	/// ,SIGNAL
	/// ,STORMWATER
	/// ,TELEPHONE
	/// ,TV
	/// ,VACUUM
	/// ,VENT
	/// ,VENTILATION
	/// ,WASTEWATER
	/// ,WATERSUPPLY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDistributionSystemEnum: Global.IfcDistributionSystemEnum
	{
		public static string AIRCONDITIONING { get { return ".AIRCONDITIONING."; } private set { } }
		public static string AUDIOVISUAL { get { return ".AUDIOVISUAL."; } private set { } }
		public static string CHEMICAL { get { return ".CHEMICAL."; } private set { } }
		public static string CHILLEDWATER { get { return ".CHILLEDWATER."; } private set { } }
		public static string COMMUNICATION { get { return ".COMMUNICATION."; } private set { } }
		public static string COMPRESSEDAIR { get { return ".COMPRESSEDAIR."; } private set { } }
		public static string CONDENSERWATER { get { return ".CONDENSERWATER."; } private set { } }
		public static string CONTROL { get { return ".CONTROL."; } private set { } }
		public static string CONVEYING { get { return ".CONVEYING."; } private set { } }
		public static string DATA { get { return ".DATA."; } private set { } }
		public static string DISPOSAL { get { return ".DISPOSAL."; } private set { } }
		public static string DOMESTICCOLDWATER { get { return ".DOMESTICCOLDWATER."; } private set { } }
		public static string DOMESTICHOTWATER { get { return ".DOMESTICHOTWATER."; } private set { } }
		public static string DRAINAGE { get { return ".DRAINAGE."; } private set { } }
		public static string EARTHING { get { return ".EARTHING."; } private set { } }
		public static string ELECTRICAL { get { return ".ELECTRICAL."; } private set { } }
		public static string ELECTROACOUSTIC { get { return ".ELECTROACOUSTIC."; } private set { } }
		public static string EXHAUST { get { return ".EXHAUST."; } private set { } }
		public static string FIREPROTECTION { get { return ".FIREPROTECTION."; } private set { } }
		public static string FUEL { get { return ".FUEL."; } private set { } }
		public static string GAS { get { return ".GAS."; } private set { } }
		public static string HAZARDOUS { get { return ".HAZARDOUS."; } private set { } }
		public static string HEATING { get { return ".HEATING."; } private set { } }
		public static string LIGHTING { get { return ".LIGHTING."; } private set { } }
		public static string LIGHTNINGPROTECTION { get { return ".LIGHTNINGPROTECTION."; } private set { } }
		public static string MUNICIPALSOLIDWASTE { get { return ".MUNICIPALSOLIDWASTE."; } private set { } }
		public static string OIL { get { return ".OIL."; } private set { } }
		public static string OPERATIONAL { get { return ".OPERATIONAL."; } private set { } }
		public static string POWERGENERATION { get { return ".POWERGENERATION."; } private set { } }
		public static string RAINWATER { get { return ".RAINWATER."; } private set { } }
		public static string REFRIGERATION { get { return ".REFRIGERATION."; } private set { } }
		public static string SECURITY { get { return ".SECURITY."; } private set { } }
		public static string SEWAGE { get { return ".SEWAGE."; } private set { } }
		public static string SIGNAL { get { return ".SIGNAL."; } private set { } }
		public static string STORMWATER { get { return ".STORMWATER."; } private set { } }
		public static string TELEPHONE { get { return ".TELEPHONE."; } private set { } }
		public static string TV { get { return ".TV."; } private set { } }
		public static string VACUUM { get { return ".VACUUM."; } private set { } }
		public static string VENT { get { return ".VENT."; } private set { } }
		public static string VENTILATION { get { return ".VENTILATION."; } private set { } }
		public static string WASTEWATER { get { return ".WASTEWATER."; } private set { } }
		public static string WATERSUPPLY { get { return ".WATERSUPPLY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDistributionSystemEnum() { Value = ".AIRCONDITIONING.";}
		public IfcDistributionSystemEnum(string value) { Value = value; }
		public static implicit operator IfcDistributionSystemEnum(string value) { return new IfcDistributionSystemEnum(value);}
		public static implicit operator string(IfcDistributionSystemEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDocumentConfidentialityEnum = ENUMERATION OF
	/// (PUBLIC
	/// ,RESTRICTED
	/// ,CONFIDENTIAL
	/// ,PERSONAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDocumentConfidentialityEnum: Global.IfcDocumentConfidentialityEnum
	{
		public static string PUBLIC { get { return ".PUBLIC."; } private set { } }
		public static string RESTRICTED { get { return ".RESTRICTED."; } private set { } }
		public static string CONFIDENTIAL { get { return ".CONFIDENTIAL."; } private set { } }
		public static string PERSONAL { get { return ".PERSONAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDocumentConfidentialityEnum() { Value = ".PUBLIC.";}
		public IfcDocumentConfidentialityEnum(string value) { Value = value; }
		public static implicit operator IfcDocumentConfidentialityEnum(string value) { return new IfcDocumentConfidentialityEnum(value);}
		public static implicit operator string(IfcDocumentConfidentialityEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDocumentStatusEnum = ENUMERATION OF
	/// (DRAFT
	/// ,FINALDRAFT
	/// ,FINAL
	/// ,REVISION
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDocumentStatusEnum: Global.IfcDocumentStatusEnum
	{
		public static string DRAFT { get { return ".DRAFT."; } private set { } }
		public static string FINALDRAFT { get { return ".FINALDRAFT."; } private set { } }
		public static string FINAL { get { return ".FINAL."; } private set { } }
		public static string REVISION { get { return ".REVISION."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDocumentStatusEnum() { Value = ".DRAFT.";}
		public IfcDocumentStatusEnum(string value) { Value = value; }
		public static implicit operator IfcDocumentStatusEnum(string value) { return new IfcDocumentStatusEnum(value);}
		public static implicit operator string(IfcDocumentStatusEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorPanelOperationEnum = ENUMERATION OF
	/// (SWINGING
	/// ,DOUBLE_ACTING
	/// ,SLIDING
	/// ,FOLDING
	/// ,REVOLVING
	/// ,ROLLINGUP
	/// ,FIXEDPANEL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDoorPanelOperationEnum: Global.IfcDoorPanelOperationEnum
	{
		public static string SWINGING { get { return ".SWINGING."; } private set { } }
		public static string DOUBLE_ACTING { get { return ".DOUBLE_ACTING."; } private set { } }
		public static string SLIDING { get { return ".SLIDING."; } private set { } }
		public static string FOLDING { get { return ".FOLDING."; } private set { } }
		public static string REVOLVING { get { return ".REVOLVING."; } private set { } }
		public static string ROLLINGUP { get { return ".ROLLINGUP."; } private set { } }
		public static string FIXEDPANEL { get { return ".FIXEDPANEL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDoorPanelOperationEnum() { Value = ".SWINGING.";}
		public IfcDoorPanelOperationEnum(string value) { Value = value; }
		public static implicit operator IfcDoorPanelOperationEnum(string value) { return new IfcDoorPanelOperationEnum(value);}
		public static implicit operator string(IfcDoorPanelOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorPanelPositionEnum = ENUMERATION OF
	/// (LEFT
	/// ,MIDDLE
	/// ,RIGHT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDoorPanelPositionEnum: Global.IfcDoorPanelPositionEnum
	{
		public static string LEFT { get { return ".LEFT."; } private set { } }
		public static string MIDDLE { get { return ".MIDDLE."; } private set { } }
		public static string RIGHT { get { return ".RIGHT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDoorPanelPositionEnum() { Value = ".LEFT.";}
		public IfcDoorPanelPositionEnum(string value) { Value = value; }
		public static implicit operator IfcDoorPanelPositionEnum(string value) { return new IfcDoorPanelPositionEnum(value);}
		public static implicit operator string(IfcDoorPanelPositionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorStyleConstructionEnum = ENUMERATION OF
	/// (ALUMINIUM
	/// ,HIGH_GRADE_STEEL
	/// ,STEEL
	/// ,WOOD
	/// ,ALUMINIUM_WOOD
	/// ,ALUMINIUM_PLASTIC
	/// ,PLASTIC
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDoorStyleConstructionEnum: Global.IfcDoorStyleConstructionEnum
	{
		public static string ALUMINIUM { get { return ".ALUMINIUM."; } private set { } }
		public static string HIGH_GRADE_STEEL { get { return ".HIGH_GRADE_STEEL."; } private set { } }
		public static string STEEL { get { return ".STEEL."; } private set { } }
		public static string WOOD { get { return ".WOOD."; } private set { } }
		public static string ALUMINIUM_WOOD { get { return ".ALUMINIUM_WOOD."; } private set { } }
		public static string ALUMINIUM_PLASTIC { get { return ".ALUMINIUM_PLASTIC."; } private set { } }
		public static string PLASTIC { get { return ".PLASTIC."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDoorStyleConstructionEnum() { Value = ".ALUMINIUM.";}
		public IfcDoorStyleConstructionEnum(string value) { Value = value; }
		public static implicit operator IfcDoorStyleConstructionEnum(string value) { return new IfcDoorStyleConstructionEnum(value);}
		public static implicit operator string(IfcDoorStyleConstructionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorStyleOperationEnum = ENUMERATION OF
	/// (SINGLE_SWING_LEFT
	/// ,SINGLE_SWING_RIGHT
	/// ,DOUBLE_DOOR_SINGLE_SWING
	/// ,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT
	/// ,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT
	/// ,DOUBLE_SWING_LEFT
	/// ,DOUBLE_SWING_RIGHT
	/// ,DOUBLE_DOOR_DOUBLE_SWING
	/// ,SLIDING_TO_LEFT
	/// ,SLIDING_TO_RIGHT
	/// ,DOUBLE_DOOR_SLIDING
	/// ,FOLDING_TO_LEFT
	/// ,FOLDING_TO_RIGHT
	/// ,DOUBLE_DOOR_FOLDING
	/// ,REVOLVING
	/// ,ROLLINGUP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDoorStyleOperationEnum: Global.IfcDoorStyleOperationEnum
	{
		public static string SINGLE_SWING_LEFT { get { return ".SINGLE_SWING_LEFT."; } private set { } }
		public static string SINGLE_SWING_RIGHT { get { return ".SINGLE_SWING_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING { get { return ".DOUBLE_DOOR_SINGLE_SWING."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT { get { return ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT { get { return ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT."; } private set { } }
		public static string DOUBLE_SWING_LEFT { get { return ".DOUBLE_SWING_LEFT."; } private set { } }
		public static string DOUBLE_SWING_RIGHT { get { return ".DOUBLE_SWING_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_DOUBLE_SWING { get { return ".DOUBLE_DOOR_DOUBLE_SWING."; } private set { } }
		public static string SLIDING_TO_LEFT { get { return ".SLIDING_TO_LEFT."; } private set { } }
		public static string SLIDING_TO_RIGHT { get { return ".SLIDING_TO_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_SLIDING { get { return ".DOUBLE_DOOR_SLIDING."; } private set { } }
		public static string FOLDING_TO_LEFT { get { return ".FOLDING_TO_LEFT."; } private set { } }
		public static string FOLDING_TO_RIGHT { get { return ".FOLDING_TO_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_FOLDING { get { return ".DOUBLE_DOOR_FOLDING."; } private set { } }
		public static string REVOLVING { get { return ".REVOLVING."; } private set { } }
		public static string ROLLINGUP { get { return ".ROLLINGUP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDoorStyleOperationEnum() { Value = ".SINGLE_SWING_LEFT.";}
		public IfcDoorStyleOperationEnum(string value) { Value = value; }
		public static implicit operator IfcDoorStyleOperationEnum(string value) { return new IfcDoorStyleOperationEnum(value);}
		public static implicit operator string(IfcDoorStyleOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorTypeEnum = ENUMERATION OF
	/// (DOOR
	/// ,GATE
	/// ,TRAPDOOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDoorTypeEnum: Global.IfcDoorTypeEnum
	{
		public static string DOOR { get { return ".DOOR."; } private set { } }
		public static string GATE { get { return ".GATE."; } private set { } }
		public static string TRAPDOOR { get { return ".TRAPDOOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDoorTypeEnum() { Value = ".DOOR.";}
		public IfcDoorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDoorTypeEnum(string value) { return new IfcDoorTypeEnum(value);}
		public static implicit operator string(IfcDoorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorTypeOperationEnum = ENUMERATION OF
	/// (SINGLE_SWING_LEFT
	/// ,SINGLE_SWING_RIGHT
	/// ,DOUBLE_DOOR_SINGLE_SWING
	/// ,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT
	/// ,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT
	/// ,DOUBLE_SWING_LEFT
	/// ,DOUBLE_SWING_RIGHT
	/// ,DOUBLE_DOOR_DOUBLE_SWING
	/// ,SLIDING_TO_LEFT
	/// ,SLIDING_TO_RIGHT
	/// ,DOUBLE_DOOR_SLIDING
	/// ,FOLDING_TO_LEFT
	/// ,FOLDING_TO_RIGHT
	/// ,DOUBLE_DOOR_FOLDING
	/// ,REVOLVING
	/// ,ROLLINGUP
	/// ,SWING_FIXED_LEFT
	/// ,SWING_FIXED_RIGHT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDoorTypeOperationEnum: Global.IfcDoorTypeOperationEnum
	{
		public static string SINGLE_SWING_LEFT { get { return ".SINGLE_SWING_LEFT."; } private set { } }
		public static string SINGLE_SWING_RIGHT { get { return ".SINGLE_SWING_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING { get { return ".DOUBLE_DOOR_SINGLE_SWING."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT { get { return ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT { get { return ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT."; } private set { } }
		public static string DOUBLE_SWING_LEFT { get { return ".DOUBLE_SWING_LEFT."; } private set { } }
		public static string DOUBLE_SWING_RIGHT { get { return ".DOUBLE_SWING_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_DOUBLE_SWING { get { return ".DOUBLE_DOOR_DOUBLE_SWING."; } private set { } }
		public static string SLIDING_TO_LEFT { get { return ".SLIDING_TO_LEFT."; } private set { } }
		public static string SLIDING_TO_RIGHT { get { return ".SLIDING_TO_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_SLIDING { get { return ".DOUBLE_DOOR_SLIDING."; } private set { } }
		public static string FOLDING_TO_LEFT { get { return ".FOLDING_TO_LEFT."; } private set { } }
		public static string FOLDING_TO_RIGHT { get { return ".FOLDING_TO_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_FOLDING { get { return ".DOUBLE_DOOR_FOLDING."; } private set { } }
		public static string REVOLVING { get { return ".REVOLVING."; } private set { } }
		public static string ROLLINGUP { get { return ".ROLLINGUP."; } private set { } }
		public static string SWING_FIXED_LEFT { get { return ".SWING_FIXED_LEFT."; } private set { } }
		public static string SWING_FIXED_RIGHT { get { return ".SWING_FIXED_RIGHT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDoorTypeOperationEnum() { Value = ".SINGLE_SWING_LEFT.";}
		public IfcDoorTypeOperationEnum(string value) { Value = value; }
		public static implicit operator IfcDoorTypeOperationEnum(string value) { return new IfcDoorTypeOperationEnum(value);}
		public static implicit operator string(IfcDoorTypeOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDuctFittingTypeEnum = ENUMERATION OF
	/// (BEND
	/// ,CONNECTOR
	/// ,ENTRY
	/// ,EXIT
	/// ,JUNCTION
	/// ,OBSTRUCTION
	/// ,TRANSITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDuctFittingTypeEnum: Global.IfcDuctFittingTypeEnum
	{
		public static string BEND { get { return ".BEND."; } private set { } }
		public static string CONNECTOR { get { return ".CONNECTOR."; } private set { } }
		public static string ENTRY { get { return ".ENTRY."; } private set { } }
		public static string EXIT { get { return ".EXIT."; } private set { } }
		public static string JUNCTION { get { return ".JUNCTION."; } private set { } }
		public static string OBSTRUCTION { get { return ".OBSTRUCTION."; } private set { } }
		public static string TRANSITION { get { return ".TRANSITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDuctFittingTypeEnum() { Value = ".BEND.";}
		public IfcDuctFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDuctFittingTypeEnum(string value) { return new IfcDuctFittingTypeEnum(value);}
		public static implicit operator string(IfcDuctFittingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDuctSegmentTypeEnum = ENUMERATION OF
	/// (RIGIDSEGMENT
	/// ,FLEXIBLESEGMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDuctSegmentTypeEnum: Global.IfcDuctSegmentTypeEnum
	{
		public static string RIGIDSEGMENT { get { return ".RIGIDSEGMENT."; } private set { } }
		public static string FLEXIBLESEGMENT { get { return ".FLEXIBLESEGMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDuctSegmentTypeEnum() { Value = ".RIGIDSEGMENT.";}
		public IfcDuctSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDuctSegmentTypeEnum(string value) { return new IfcDuctSegmentTypeEnum(value);}
		public static implicit operator string(IfcDuctSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDuctSilencerTypeEnum = ENUMERATION OF
	/// (FLATOVAL
	/// ,RECTANGULAR
	/// ,ROUND
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDuctSilencerTypeEnum: Global.IfcDuctSilencerTypeEnum
	{
		public static string FLATOVAL { get { return ".FLATOVAL."; } private set { } }
		public static string RECTANGULAR { get { return ".RECTANGULAR."; } private set { } }
		public static string ROUND { get { return ".ROUND."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDuctSilencerTypeEnum() { Value = ".FLATOVAL.";}
		public IfcDuctSilencerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDuctSilencerTypeEnum(string value) { return new IfcDuctSilencerTypeEnum(value);}
		public static implicit operator string(IfcDuctSilencerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricApplianceTypeEnum = ENUMERATION OF
	/// (DISHWASHER
	/// ,ELECTRICCOOKER
	/// ,FREESTANDINGELECTRICHEATER
	/// ,FREESTANDINGFAN
	/// ,FREESTANDINGWATERHEATER
	/// ,FREESTANDINGWATERCOOLER
	/// ,FREEZER
	/// ,FRIDGE_FREEZER
	/// ,HANDDRYER
	/// ,KITCHENMACHINE
	/// ,MICROWAVE
	/// ,PHOTOCOPIER
	/// ,REFRIGERATOR
	/// ,TUMBLEDRYER
	/// ,VENDINGMACHINE
	/// ,WASHINGMACHINE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricApplianceTypeEnum: Global.IfcElectricApplianceTypeEnum
	{
		public static string DISHWASHER { get { return ".DISHWASHER."; } private set { } }
		public static string ELECTRICCOOKER { get { return ".ELECTRICCOOKER."; } private set { } }
		public static string FREESTANDINGELECTRICHEATER { get { return ".FREESTANDINGELECTRICHEATER."; } private set { } }
		public static string FREESTANDINGFAN { get { return ".FREESTANDINGFAN."; } private set { } }
		public static string FREESTANDINGWATERHEATER { get { return ".FREESTANDINGWATERHEATER."; } private set { } }
		public static string FREESTANDINGWATERCOOLER { get { return ".FREESTANDINGWATERCOOLER."; } private set { } }
		public static string FREEZER { get { return ".FREEZER."; } private set { } }
		public static string FRIDGE_FREEZER { get { return ".FRIDGE_FREEZER."; } private set { } }
		public static string HANDDRYER { get { return ".HANDDRYER."; } private set { } }
		public static string KITCHENMACHINE { get { return ".KITCHENMACHINE."; } private set { } }
		public static string MICROWAVE { get { return ".MICROWAVE."; } private set { } }
		public static string PHOTOCOPIER { get { return ".PHOTOCOPIER."; } private set { } }
		public static string REFRIGERATOR { get { return ".REFRIGERATOR."; } private set { } }
		public static string TUMBLEDRYER { get { return ".TUMBLEDRYER."; } private set { } }
		public static string VENDINGMACHINE { get { return ".VENDINGMACHINE."; } private set { } }
		public static string WASHINGMACHINE { get { return ".WASHINGMACHINE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricApplianceTypeEnum() { Value = ".DISHWASHER.";}
		public IfcElectricApplianceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricApplianceTypeEnum(string value) { return new IfcElectricApplianceTypeEnum(value);}
		public static implicit operator string(IfcElectricApplianceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricDistributionBoardTypeEnum = ENUMERATION OF
	/// (CONSUMERUNIT
	/// ,DISTRIBUTIONBOARD
	/// ,MOTORCONTROLCENTRE
	/// ,SWITCHBOARD
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricDistributionBoardTypeEnum: Global.IfcElectricDistributionBoardTypeEnum
	{
		public static string CONSUMERUNIT { get { return ".CONSUMERUNIT."; } private set { } }
		public static string DISTRIBUTIONBOARD { get { return ".DISTRIBUTIONBOARD."; } private set { } }
		public static string MOTORCONTROLCENTRE { get { return ".MOTORCONTROLCENTRE."; } private set { } }
		public static string SWITCHBOARD { get { return ".SWITCHBOARD."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricDistributionBoardTypeEnum() { Value = ".CONSUMERUNIT.";}
		public IfcElectricDistributionBoardTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricDistributionBoardTypeEnum(string value) { return new IfcElectricDistributionBoardTypeEnum(value);}
		public static implicit operator string(IfcElectricDistributionBoardTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricFlowStorageDeviceTypeEnum = ENUMERATION OF
	/// (BATTERY
	/// ,CAPACITORBANK
	/// ,HARMONICFILTER
	/// ,INDUCTORBANK
	/// ,UPS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricFlowStorageDeviceTypeEnum: Global.IfcElectricFlowStorageDeviceTypeEnum
	{
		public static string BATTERY { get { return ".BATTERY."; } private set { } }
		public static string CAPACITORBANK { get { return ".CAPACITORBANK."; } private set { } }
		public static string HARMONICFILTER { get { return ".HARMONICFILTER."; } private set { } }
		public static string INDUCTORBANK { get { return ".INDUCTORBANK."; } private set { } }
		public static string UPS { get { return ".UPS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricFlowStorageDeviceTypeEnum() { Value = ".BATTERY.";}
		public IfcElectricFlowStorageDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricFlowStorageDeviceTypeEnum(string value) { return new IfcElectricFlowStorageDeviceTypeEnum(value);}
		public static implicit operator string(IfcElectricFlowStorageDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricGeneratorTypeEnum = ENUMERATION OF
	/// (CHP
	/// ,ENGINEGENERATOR
	/// ,STANDALONE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricGeneratorTypeEnum: Global.IfcElectricGeneratorTypeEnum
	{
		public static string CHP { get { return ".CHP."; } private set { } }
		public static string ENGINEGENERATOR { get { return ".ENGINEGENERATOR."; } private set { } }
		public static string STANDALONE { get { return ".STANDALONE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricGeneratorTypeEnum() { Value = ".CHP.";}
		public IfcElectricGeneratorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricGeneratorTypeEnum(string value) { return new IfcElectricGeneratorTypeEnum(value);}
		public static implicit operator string(IfcElectricGeneratorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricMotorTypeEnum = ENUMERATION OF
	/// (DC
	/// ,INDUCTION
	/// ,POLYPHASE
	/// ,RELUCTANCESYNCHRONOUS
	/// ,SYNCHRONOUS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricMotorTypeEnum: Global.IfcElectricMotorTypeEnum
	{
		public static string DC { get { return ".DC."; } private set { } }
		public static string INDUCTION { get { return ".INDUCTION."; } private set { } }
		public static string POLYPHASE { get { return ".POLYPHASE."; } private set { } }
		public static string RELUCTANCESYNCHRONOUS { get { return ".RELUCTANCESYNCHRONOUS."; } private set { } }
		public static string SYNCHRONOUS { get { return ".SYNCHRONOUS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricMotorTypeEnum() { Value = ".DC.";}
		public IfcElectricMotorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricMotorTypeEnum(string value) { return new IfcElectricMotorTypeEnum(value);}
		public static implicit operator string(IfcElectricMotorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricTimeControlTypeEnum = ENUMERATION OF
	/// (TIMECLOCK
	/// ,TIMEDELAY
	/// ,RELAY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricTimeControlTypeEnum: Global.IfcElectricTimeControlTypeEnum
	{
		public static string TIMECLOCK { get { return ".TIMECLOCK."; } private set { } }
		public static string TIMEDELAY { get { return ".TIMEDELAY."; } private set { } }
		public static string RELAY { get { return ".RELAY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricTimeControlTypeEnum() { Value = ".TIMECLOCK.";}
		public IfcElectricTimeControlTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricTimeControlTypeEnum(string value) { return new IfcElectricTimeControlTypeEnum(value);}
		public static implicit operator string(IfcElectricTimeControlTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElementAssemblyTypeEnum = ENUMERATION OF
	/// (ACCESSORY_ASSEMBLY
	/// ,ARCH
	/// ,BEAM_GRID
	/// ,BRACED_FRAME
	/// ,GIRDER
	/// ,REINFORCEMENT_UNIT
	/// ,RIGID_FRAME
	/// ,SLAB_FIELD
	/// ,TRUSS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElementAssemblyTypeEnum: Global.IfcElementAssemblyTypeEnum
	{
		public static string ACCESSORY_ASSEMBLY { get { return ".ACCESSORY_ASSEMBLY."; } private set { } }
		public static string ARCH { get { return ".ARCH."; } private set { } }
		public static string BEAM_GRID { get { return ".BEAM_GRID."; } private set { } }
		public static string BRACED_FRAME { get { return ".BRACED_FRAME."; } private set { } }
		public static string GIRDER { get { return ".GIRDER."; } private set { } }
		public static string REINFORCEMENT_UNIT { get { return ".REINFORCEMENT_UNIT."; } private set { } }
		public static string RIGID_FRAME { get { return ".RIGID_FRAME."; } private set { } }
		public static string SLAB_FIELD { get { return ".SLAB_FIELD."; } private set { } }
		public static string TRUSS { get { return ".TRUSS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElementAssemblyTypeEnum() { Value = ".ACCESSORY_ASSEMBLY.";}
		public IfcElementAssemblyTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElementAssemblyTypeEnum(string value) { return new IfcElementAssemblyTypeEnum(value);}
		public static implicit operator string(IfcElementAssemblyTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElementCompositionEnum = ENUMERATION OF
	/// (COMPLEX
	/// ,ELEMENT
	/// ,PARTIAL);
	/// END_TYPE;
	/// <summary>
	public class IfcElementCompositionEnum: Global.IfcElementCompositionEnum
	{
		public static string COMPLEX { get { return ".COMPLEX."; } private set { } }
		public static string ELEMENT { get { return ".ELEMENT."; } private set { } }
		public static string PARTIAL { get { return ".PARTIAL."; } private set { } }
		public string Value {get; set;}
		public IfcElementCompositionEnum() { Value = ".COMPLEX.";}
		public IfcElementCompositionEnum(string value) { Value = value; }
		public static implicit operator IfcElementCompositionEnum(string value) { return new IfcElementCompositionEnum(value);}
		public static implicit operator string(IfcElementCompositionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEngineTypeEnum = ENUMERATION OF
	/// (EXTERNALCOMBUSTION
	/// ,INTERNALCOMBUSTION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcEngineTypeEnum: Global.IfcEngineTypeEnum
	{
		public static string EXTERNALCOMBUSTION { get { return ".EXTERNALCOMBUSTION."; } private set { } }
		public static string INTERNALCOMBUSTION { get { return ".INTERNALCOMBUSTION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcEngineTypeEnum() { Value = ".EXTERNALCOMBUSTION.";}
		public IfcEngineTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEngineTypeEnum(string value) { return new IfcEngineTypeEnum(value);}
		public static implicit operator string(IfcEngineTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEvaporativeCoolerTypeEnum = ENUMERATION OF
	/// (DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER
	/// ,DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER
	/// ,DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER
	/// ,DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER
	/// ,DIRECTEVAPORATIVEAIRWASHER
	/// ,INDIRECTEVAPORATIVEPACKAGEAIRCOOLER
	/// ,INDIRECTEVAPORATIVEWETCOIL
	/// ,INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER
	/// ,INDIRECTDIRECTCOMBINATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcEvaporativeCoolerTypeEnum: Global.IfcEvaporativeCoolerTypeEnum
	{
		public static string DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER { get { return ".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER { get { return ".DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER { get { return ".DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER { get { return ".DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVEAIRWASHER { get { return ".DIRECTEVAPORATIVEAIRWASHER."; } private set { } }
		public static string INDIRECTEVAPORATIVEPACKAGEAIRCOOLER { get { return ".INDIRECTEVAPORATIVEPACKAGEAIRCOOLER."; } private set { } }
		public static string INDIRECTEVAPORATIVEWETCOIL { get { return ".INDIRECTEVAPORATIVEWETCOIL."; } private set { } }
		public static string INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER { get { return ".INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER."; } private set { } }
		public static string INDIRECTDIRECTCOMBINATION { get { return ".INDIRECTDIRECTCOMBINATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcEvaporativeCoolerTypeEnum() { Value = ".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER.";}
		public IfcEvaporativeCoolerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEvaporativeCoolerTypeEnum(string value) { return new IfcEvaporativeCoolerTypeEnum(value);}
		public static implicit operator string(IfcEvaporativeCoolerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEvaporatorTypeEnum = ENUMERATION OF
	/// (DIRECTEXPANSION
	/// ,DIRECTEXPANSIONSHELLANDTUBE
	/// ,DIRECTEXPANSIONTUBEINTUBE
	/// ,DIRECTEXPANSIONBRAZEDPLATE
	/// ,FLOODEDSHELLANDTUBE
	/// ,SHELLANDCOIL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcEvaporatorTypeEnum: Global.IfcEvaporatorTypeEnum
	{
		public static string DIRECTEXPANSION { get { return ".DIRECTEXPANSION."; } private set { } }
		public static string DIRECTEXPANSIONSHELLANDTUBE { get { return ".DIRECTEXPANSIONSHELLANDTUBE."; } private set { } }
		public static string DIRECTEXPANSIONTUBEINTUBE { get { return ".DIRECTEXPANSIONTUBEINTUBE."; } private set { } }
		public static string DIRECTEXPANSIONBRAZEDPLATE { get { return ".DIRECTEXPANSIONBRAZEDPLATE."; } private set { } }
		public static string FLOODEDSHELLANDTUBE { get { return ".FLOODEDSHELLANDTUBE."; } private set { } }
		public static string SHELLANDCOIL { get { return ".SHELLANDCOIL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcEvaporatorTypeEnum() { Value = ".DIRECTEXPANSION.";}
		public IfcEvaporatorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEvaporatorTypeEnum(string value) { return new IfcEvaporatorTypeEnum(value);}
		public static implicit operator string(IfcEvaporatorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEventTriggerTypeEnum = ENUMERATION OF
	/// (EVENTRULE
	/// ,EVENTMESSAGE
	/// ,EVENTTIME
	/// ,EVENTCOMPLEX
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcEventTriggerTypeEnum: Global.IfcEventTriggerTypeEnum
	{
		public static string EVENTRULE { get { return ".EVENTRULE."; } private set { } }
		public static string EVENTMESSAGE { get { return ".EVENTMESSAGE."; } private set { } }
		public static string EVENTTIME { get { return ".EVENTTIME."; } private set { } }
		public static string EVENTCOMPLEX { get { return ".EVENTCOMPLEX."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcEventTriggerTypeEnum() { Value = ".EVENTRULE.";}
		public IfcEventTriggerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEventTriggerTypeEnum(string value) { return new IfcEventTriggerTypeEnum(value);}
		public static implicit operator string(IfcEventTriggerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEventTypeEnum = ENUMERATION OF
	/// (STARTEVENT
	/// ,ENDEVENT
	/// ,INTERMEDIATEEVENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcEventTypeEnum: Global.IfcEventTypeEnum
	{
		public static string STARTEVENT { get { return ".STARTEVENT."; } private set { } }
		public static string ENDEVENT { get { return ".ENDEVENT."; } private set { } }
		public static string INTERMEDIATEEVENT { get { return ".INTERMEDIATEEVENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcEventTypeEnum() { Value = ".STARTEVENT.";}
		public IfcEventTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEventTypeEnum(string value) { return new IfcEventTypeEnum(value);}
		public static implicit operator string(IfcEventTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcExternalSpatialElementTypeEnum = ENUMERATION OF
	/// (EXTERNAL
	/// ,EXTERNAL_EARTH
	/// ,EXTERNAL_WATER
	/// ,EXTERNAL_FIRE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcExternalSpatialElementTypeEnum: Global.IfcExternalSpatialElementTypeEnum
	{
		public static string EXTERNAL { get { return ".EXTERNAL."; } private set { } }
		public static string EXTERNAL_EARTH { get { return ".EXTERNAL_EARTH."; } private set { } }
		public static string EXTERNAL_WATER { get { return ".EXTERNAL_WATER."; } private set { } }
		public static string EXTERNAL_FIRE { get { return ".EXTERNAL_FIRE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcExternalSpatialElementTypeEnum() { Value = ".EXTERNAL.";}
		public IfcExternalSpatialElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcExternalSpatialElementTypeEnum(string value) { return new IfcExternalSpatialElementTypeEnum(value);}
		public static implicit operator string(IfcExternalSpatialElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFanTypeEnum = ENUMERATION OF
	/// (CENTRIFUGALFORWARDCURVED
	/// ,CENTRIFUGALRADIAL
	/// ,CENTRIFUGALBACKWARDINCLINEDCURVED
	/// ,CENTRIFUGALAIRFOIL
	/// ,TUBEAXIAL
	/// ,VANEAXIAL
	/// ,PROPELLORAXIAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFanTypeEnum: Global.IfcFanTypeEnum
	{
		public static string CENTRIFUGALFORWARDCURVED { get { return ".CENTRIFUGALFORWARDCURVED."; } private set { } }
		public static string CENTRIFUGALRADIAL { get { return ".CENTRIFUGALRADIAL."; } private set { } }
		public static string CENTRIFUGALBACKWARDINCLINEDCURVED { get { return ".CENTRIFUGALBACKWARDINCLINEDCURVED."; } private set { } }
		public static string CENTRIFUGALAIRFOIL { get { return ".CENTRIFUGALAIRFOIL."; } private set { } }
		public static string TUBEAXIAL { get { return ".TUBEAXIAL."; } private set { } }
		public static string VANEAXIAL { get { return ".VANEAXIAL."; } private set { } }
		public static string PROPELLORAXIAL { get { return ".PROPELLORAXIAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFanTypeEnum() { Value = ".CENTRIFUGALFORWARDCURVED.";}
		public IfcFanTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFanTypeEnum(string value) { return new IfcFanTypeEnum(value);}
		public static implicit operator string(IfcFanTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFastenerTypeEnum = ENUMERATION OF
	/// (GLUE
	/// ,MORTAR
	/// ,WELD
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFastenerTypeEnum: Global.IfcFastenerTypeEnum
	{
		public static string GLUE { get { return ".GLUE."; } private set { } }
		public static string MORTAR { get { return ".MORTAR."; } private set { } }
		public static string WELD { get { return ".WELD."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFastenerTypeEnum() { Value = ".GLUE.";}
		public IfcFastenerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFastenerTypeEnum(string value) { return new IfcFastenerTypeEnum(value);}
		public static implicit operator string(IfcFastenerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFilterTypeEnum = ENUMERATION OF
	/// (AIRPARTICLEFILTER
	/// ,COMPRESSEDAIRFILTER
	/// ,ODORFILTER
	/// ,OILFILTER
	/// ,STRAINER
	/// ,WATERFILTER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFilterTypeEnum: Global.IfcFilterTypeEnum
	{
		public static string AIRPARTICLEFILTER { get { return ".AIRPARTICLEFILTER."; } private set { } }
		public static string COMPRESSEDAIRFILTER { get { return ".COMPRESSEDAIRFILTER."; } private set { } }
		public static string ODORFILTER { get { return ".ODORFILTER."; } private set { } }
		public static string OILFILTER { get { return ".OILFILTER."; } private set { } }
		public static string STRAINER { get { return ".STRAINER."; } private set { } }
		public static string WATERFILTER { get { return ".WATERFILTER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFilterTypeEnum() { Value = ".AIRPARTICLEFILTER.";}
		public IfcFilterTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFilterTypeEnum(string value) { return new IfcFilterTypeEnum(value);}
		public static implicit operator string(IfcFilterTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFireSuppressionTerminalTypeEnum = ENUMERATION OF
	/// (BREECHINGINLET
	/// ,FIREHYDRANT
	/// ,HOSEREEL
	/// ,SPRINKLER
	/// ,SPRINKLERDEFLECTOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFireSuppressionTerminalTypeEnum: Global.IfcFireSuppressionTerminalTypeEnum
	{
		public static string BREECHINGINLET { get { return ".BREECHINGINLET."; } private set { } }
		public static string FIREHYDRANT { get { return ".FIREHYDRANT."; } private set { } }
		public static string HOSEREEL { get { return ".HOSEREEL."; } private set { } }
		public static string SPRINKLER { get { return ".SPRINKLER."; } private set { } }
		public static string SPRINKLERDEFLECTOR { get { return ".SPRINKLERDEFLECTOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFireSuppressionTerminalTypeEnum() { Value = ".BREECHINGINLET.";}
		public IfcFireSuppressionTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFireSuppressionTerminalTypeEnum(string value) { return new IfcFireSuppressionTerminalTypeEnum(value);}
		public static implicit operator string(IfcFireSuppressionTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFlowDirectionEnum = ENUMERATION OF
	/// (SOURCE
	/// ,SINK
	/// ,SOURCEANDSINK
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFlowDirectionEnum: Global.IfcFlowDirectionEnum
	{
		public static string SOURCE { get { return ".SOURCE."; } private set { } }
		public static string SINK { get { return ".SINK."; } private set { } }
		public static string SOURCEANDSINK { get { return ".SOURCEANDSINK."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFlowDirectionEnum() { Value = ".SOURCE.";}
		public IfcFlowDirectionEnum(string value) { Value = value; }
		public static implicit operator IfcFlowDirectionEnum(string value) { return new IfcFlowDirectionEnum(value);}
		public static implicit operator string(IfcFlowDirectionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFlowInstrumentTypeEnum = ENUMERATION OF
	/// (PRESSUREGAUGE
	/// ,THERMOMETER
	/// ,AMMETER
	/// ,FREQUENCYMETER
	/// ,POWERFACTORMETER
	/// ,PHASEANGLEMETER
	/// ,VOLTMETER_PEAK
	/// ,VOLTMETER_RMS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFlowInstrumentTypeEnum: Global.IfcFlowInstrumentTypeEnum
	{
		public static string PRESSUREGAUGE { get { return ".PRESSUREGAUGE."; } private set { } }
		public static string THERMOMETER { get { return ".THERMOMETER."; } private set { } }
		public static string AMMETER { get { return ".AMMETER."; } private set { } }
		public static string FREQUENCYMETER { get { return ".FREQUENCYMETER."; } private set { } }
		public static string POWERFACTORMETER { get { return ".POWERFACTORMETER."; } private set { } }
		public static string PHASEANGLEMETER { get { return ".PHASEANGLEMETER."; } private set { } }
		public static string VOLTMETER_PEAK { get { return ".VOLTMETER_PEAK."; } private set { } }
		public static string VOLTMETER_RMS { get { return ".VOLTMETER_RMS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFlowInstrumentTypeEnum() { Value = ".PRESSUREGAUGE.";}
		public IfcFlowInstrumentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFlowInstrumentTypeEnum(string value) { return new IfcFlowInstrumentTypeEnum(value);}
		public static implicit operator string(IfcFlowInstrumentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFlowMeterTypeEnum = ENUMERATION OF
	/// (ENERGYMETER
	/// ,GASMETER
	/// ,OILMETER
	/// ,WATERMETER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFlowMeterTypeEnum: Global.IfcFlowMeterTypeEnum
	{
		public static string ENERGYMETER { get { return ".ENERGYMETER."; } private set { } }
		public static string GASMETER { get { return ".GASMETER."; } private set { } }
		public static string OILMETER { get { return ".OILMETER."; } private set { } }
		public static string WATERMETER { get { return ".WATERMETER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFlowMeterTypeEnum() { Value = ".ENERGYMETER.";}
		public IfcFlowMeterTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFlowMeterTypeEnum(string value) { return new IfcFlowMeterTypeEnum(value);}
		public static implicit operator string(IfcFlowMeterTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFootingTypeEnum = ENUMERATION OF
	/// (CAISSON_FOUNDATION
	/// ,FOOTING_BEAM
	/// ,PAD_FOOTING
	/// ,PILE_CAP
	/// ,STRIP_FOOTING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFootingTypeEnum: Global.IfcFootingTypeEnum
	{
		public static string CAISSON_FOUNDATION { get { return ".CAISSON_FOUNDATION."; } private set { } }
		public static string FOOTING_BEAM { get { return ".FOOTING_BEAM."; } private set { } }
		public static string PAD_FOOTING { get { return ".PAD_FOOTING."; } private set { } }
		public static string PILE_CAP { get { return ".PILE_CAP."; } private set { } }
		public static string STRIP_FOOTING { get { return ".STRIP_FOOTING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFootingTypeEnum() { Value = ".CAISSON_FOUNDATION.";}
		public IfcFootingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFootingTypeEnum(string value) { return new IfcFootingTypeEnum(value);}
		public static implicit operator string(IfcFootingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFurnitureTypeEnum = ENUMERATION OF
	/// (CHAIR
	/// ,TABLE
	/// ,DESK
	/// ,BED
	/// ,FILECABINET
	/// ,SHELF
	/// ,SOFA
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFurnitureTypeEnum: Global.IfcFurnitureTypeEnum
	{
		public static string CHAIR { get { return ".CHAIR."; } private set { } }
		public static string TABLE { get { return ".TABLE."; } private set { } }
		public static string DESK { get { return ".DESK."; } private set { } }
		public static string BED { get { return ".BED."; } private set { } }
		public static string FILECABINET { get { return ".FILECABINET."; } private set { } }
		public static string SHELF { get { return ".SHELF."; } private set { } }
		public static string SOFA { get { return ".SOFA."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFurnitureTypeEnum() { Value = ".CHAIR.";}
		public IfcFurnitureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFurnitureTypeEnum(string value) { return new IfcFurnitureTypeEnum(value);}
		public static implicit operator string(IfcFurnitureTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGeographicElementTypeEnum = ENUMERATION OF
	/// (TERRAIN
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcGeographicElementTypeEnum: Global.IfcGeographicElementTypeEnum
	{
		public static string TERRAIN { get { return ".TERRAIN."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcGeographicElementTypeEnum() { Value = ".TERRAIN.";}
		public IfcGeographicElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcGeographicElementTypeEnum(string value) { return new IfcGeographicElementTypeEnum(value);}
		public static implicit operator string(IfcGeographicElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGeometricProjectionEnum = ENUMERATION OF
	/// (GRAPH_VIEW
	/// ,SKETCH_VIEW
	/// ,MODEL_VIEW
	/// ,PLAN_VIEW
	/// ,REFLECTED_PLAN_VIEW
	/// ,SECTION_VIEW
	/// ,ELEVATION_VIEW
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcGeometricProjectionEnum: Global.IfcGeometricProjectionEnum
	{
		public static string GRAPH_VIEW { get { return ".GRAPH_VIEW."; } private set { } }
		public static string SKETCH_VIEW { get { return ".SKETCH_VIEW."; } private set { } }
		public static string MODEL_VIEW { get { return ".MODEL_VIEW."; } private set { } }
		public static string PLAN_VIEW { get { return ".PLAN_VIEW."; } private set { } }
		public static string REFLECTED_PLAN_VIEW { get { return ".REFLECTED_PLAN_VIEW."; } private set { } }
		public static string SECTION_VIEW { get { return ".SECTION_VIEW."; } private set { } }
		public static string ELEVATION_VIEW { get { return ".ELEVATION_VIEW."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcGeometricProjectionEnum() { Value = ".GRAPH_VIEW.";}
		public IfcGeometricProjectionEnum(string value) { Value = value; }
		public static implicit operator IfcGeometricProjectionEnum(string value) { return new IfcGeometricProjectionEnum(value);}
		public static implicit operator string(IfcGeometricProjectionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGlobalOrLocalEnum = ENUMERATION OF
	/// (GLOBAL_COORDS
	/// ,LOCAL_COORDS);
	/// END_TYPE;
	/// <summary>
	public class IfcGlobalOrLocalEnum: Global.IfcGlobalOrLocalEnum
	{
		public static string GLOBAL_COORDS { get { return ".GLOBAL_COORDS."; } private set { } }
		public static string LOCAL_COORDS { get { return ".LOCAL_COORDS."; } private set { } }
		public string Value {get; set;}
		public IfcGlobalOrLocalEnum() { Value = ".GLOBAL_COORDS.";}
		public IfcGlobalOrLocalEnum(string value) { Value = value; }
		public static implicit operator IfcGlobalOrLocalEnum(string value) { return new IfcGlobalOrLocalEnum(value);}
		public static implicit operator string(IfcGlobalOrLocalEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGridTypeEnum = ENUMERATION OF
	/// (RECTANGULAR
	/// ,RADIAL
	/// ,TRIANGULAR
	/// ,IRREGULAR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcGridTypeEnum: Global.IfcGridTypeEnum
	{
		public static string RECTANGULAR { get { return ".RECTANGULAR."; } private set { } }
		public static string RADIAL { get { return ".RADIAL."; } private set { } }
		public static string TRIANGULAR { get { return ".TRIANGULAR."; } private set { } }
		public static string IRREGULAR { get { return ".IRREGULAR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcGridTypeEnum() { Value = ".RECTANGULAR.";}
		public IfcGridTypeEnum(string value) { Value = value; }
		public static implicit operator IfcGridTypeEnum(string value) { return new IfcGridTypeEnum(value);}
		public static implicit operator string(IfcGridTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHeatExchangerTypeEnum = ENUMERATION OF
	/// (PLATE
	/// ,SHELLANDTUBE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcHeatExchangerTypeEnum: Global.IfcHeatExchangerTypeEnum
	{
		public static string PLATE { get { return ".PLATE."; } private set { } }
		public static string SHELLANDTUBE { get { return ".SHELLANDTUBE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcHeatExchangerTypeEnum() { Value = ".PLATE.";}
		public IfcHeatExchangerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcHeatExchangerTypeEnum(string value) { return new IfcHeatExchangerTypeEnum(value);}
		public static implicit operator string(IfcHeatExchangerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHumidifierTypeEnum = ENUMERATION OF
	/// (STEAMINJECTION
	/// ,ADIABATICAIRWASHER
	/// ,ADIABATICPAN
	/// ,ADIABATICWETTEDELEMENT
	/// ,ADIABATICATOMIZING
	/// ,ADIABATICULTRASONIC
	/// ,ADIABATICRIGIDMEDIA
	/// ,ADIABATICCOMPRESSEDAIRNOZZLE
	/// ,ASSISTEDELECTRIC
	/// ,ASSISTEDNATURALGAS
	/// ,ASSISTEDPROPANE
	/// ,ASSISTEDBUTANE
	/// ,ASSISTEDSTEAM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcHumidifierTypeEnum: Global.IfcHumidifierTypeEnum
	{
		public static string STEAMINJECTION { get { return ".STEAMINJECTION."; } private set { } }
		public static string ADIABATICAIRWASHER { get { return ".ADIABATICAIRWASHER."; } private set { } }
		public static string ADIABATICPAN { get { return ".ADIABATICPAN."; } private set { } }
		public static string ADIABATICWETTEDELEMENT { get { return ".ADIABATICWETTEDELEMENT."; } private set { } }
		public static string ADIABATICATOMIZING { get { return ".ADIABATICATOMIZING."; } private set { } }
		public static string ADIABATICULTRASONIC { get { return ".ADIABATICULTRASONIC."; } private set { } }
		public static string ADIABATICRIGIDMEDIA { get { return ".ADIABATICRIGIDMEDIA."; } private set { } }
		public static string ADIABATICCOMPRESSEDAIRNOZZLE { get { return ".ADIABATICCOMPRESSEDAIRNOZZLE."; } private set { } }
		public static string ASSISTEDELECTRIC { get { return ".ASSISTEDELECTRIC."; } private set { } }
		public static string ASSISTEDNATURALGAS { get { return ".ASSISTEDNATURALGAS."; } private set { } }
		public static string ASSISTEDPROPANE { get { return ".ASSISTEDPROPANE."; } private set { } }
		public static string ASSISTEDBUTANE { get { return ".ASSISTEDBUTANE."; } private set { } }
		public static string ASSISTEDSTEAM { get { return ".ASSISTEDSTEAM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcHumidifierTypeEnum() { Value = ".STEAMINJECTION.";}
		public IfcHumidifierTypeEnum(string value) { Value = value; }
		public static implicit operator IfcHumidifierTypeEnum(string value) { return new IfcHumidifierTypeEnum(value);}
		public static implicit operator string(IfcHumidifierTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInterceptorTypeEnum = ENUMERATION OF
	/// (CYCLONIC
	/// ,GREASE
	/// ,OIL
	/// ,PETROL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcInterceptorTypeEnum: Global.IfcInterceptorTypeEnum
	{
		public static string CYCLONIC { get { return ".CYCLONIC."; } private set { } }
		public static string GREASE { get { return ".GREASE."; } private set { } }
		public static string OIL { get { return ".OIL."; } private set { } }
		public static string PETROL { get { return ".PETROL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcInterceptorTypeEnum() { Value = ".CYCLONIC.";}
		public IfcInterceptorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcInterceptorTypeEnum(string value) { return new IfcInterceptorTypeEnum(value);}
		public static implicit operator string(IfcInterceptorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInternalOrExternalEnum = ENUMERATION OF
	/// (INTERNAL
	/// ,EXTERNAL
	/// ,EXTERNAL_EARTH
	/// ,EXTERNAL_WATER
	/// ,EXTERNAL_FIRE
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcInternalOrExternalEnum: Global.IfcInternalOrExternalEnum
	{
		public static string INTERNAL { get { return ".INTERNAL."; } private set { } }
		public static string EXTERNAL { get { return ".EXTERNAL."; } private set { } }
		public static string EXTERNAL_EARTH { get { return ".EXTERNAL_EARTH."; } private set { } }
		public static string EXTERNAL_WATER { get { return ".EXTERNAL_WATER."; } private set { } }
		public static string EXTERNAL_FIRE { get { return ".EXTERNAL_FIRE."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcInternalOrExternalEnum() { Value = ".INTERNAL.";}
		public IfcInternalOrExternalEnum(string value) { Value = value; }
		public static implicit operator IfcInternalOrExternalEnum(string value) { return new IfcInternalOrExternalEnum(value);}
		public static implicit operator string(IfcInternalOrExternalEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInventoryTypeEnum = ENUMERATION OF
	/// (ASSETINVENTORY
	/// ,SPACEINVENTORY
	/// ,FURNITUREINVENTORY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcInventoryTypeEnum: Global.IfcInventoryTypeEnum
	{
		public static string ASSETINVENTORY { get { return ".ASSETINVENTORY."; } private set { } }
		public static string SPACEINVENTORY { get { return ".SPACEINVENTORY."; } private set { } }
		public static string FURNITUREINVENTORY { get { return ".FURNITUREINVENTORY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcInventoryTypeEnum() { Value = ".ASSETINVENTORY.";}
		public IfcInventoryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcInventoryTypeEnum(string value) { return new IfcInventoryTypeEnum(value);}
		public static implicit operator string(IfcInventoryTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcJunctionBoxTypeEnum = ENUMERATION OF
	/// (DATA
	/// ,POWER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcJunctionBoxTypeEnum: Global.IfcJunctionBoxTypeEnum
	{
		public static string DATA { get { return ".DATA."; } private set { } }
		public static string POWER { get { return ".POWER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcJunctionBoxTypeEnum() { Value = ".DATA.";}
		public IfcJunctionBoxTypeEnum(string value) { Value = value; }
		public static implicit operator IfcJunctionBoxTypeEnum(string value) { return new IfcJunctionBoxTypeEnum(value);}
		public static implicit operator string(IfcJunctionBoxTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcKnotType = ENUMERATION OF
	/// (UNIFORM_KNOTS
	/// ,QUASI_UNIFORM_KNOTS
	/// ,PIECEWISE_BEZIER_KNOTS
	/// ,UNSPECIFIED);
	/// END_TYPE;
	/// <summary>
	public class IfcKnotType: Global.IfcKnotType
	{
		public static string UNIFORM_KNOTS { get { return ".UNIFORM_KNOTS."; } private set { } }
		public static string QUASI_UNIFORM_KNOTS { get { return ".QUASI_UNIFORM_KNOTS."; } private set { } }
		public static string PIECEWISE_BEZIER_KNOTS { get { return ".PIECEWISE_BEZIER_KNOTS."; } private set { } }
		public static string UNSPECIFIED { get { return ".UNSPECIFIED."; } private set { } }
		public string Value {get; set;}
		public IfcKnotType() { Value = ".UNIFORM_KNOTS.";}
		public IfcKnotType(string value) { Value = value; }
		public static implicit operator IfcKnotType(string value) { return new IfcKnotType(value);}
		public static implicit operator string(IfcKnotType value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLaborResourceTypeEnum = ENUMERATION OF
	/// (ADMINISTRATION
	/// ,CARPENTRY
	/// ,CLEANING
	/// ,CONCRETE
	/// ,DRYWALL
	/// ,ELECTRIC
	/// ,FINISHING
	/// ,FLOORING
	/// ,GENERAL
	/// ,HVAC
	/// ,LANDSCAPING
	/// ,MASONRY
	/// ,PAINTING
	/// ,PAVING
	/// ,PLUMBING
	/// ,ROOFING
	/// ,SITEGRADING
	/// ,STEELWORK
	/// ,SURVEYING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcLaborResourceTypeEnum: Global.IfcLaborResourceTypeEnum
	{
		public static string ADMINISTRATION { get { return ".ADMINISTRATION."; } private set { } }
		public static string CARPENTRY { get { return ".CARPENTRY."; } private set { } }
		public static string CLEANING { get { return ".CLEANING."; } private set { } }
		public static string CONCRETE { get { return ".CONCRETE."; } private set { } }
		public static string DRYWALL { get { return ".DRYWALL."; } private set { } }
		public static string ELECTRIC { get { return ".ELECTRIC."; } private set { } }
		public static string FINISHING { get { return ".FINISHING."; } private set { } }
		public static string FLOORING { get { return ".FLOORING."; } private set { } }
		public static string GENERAL { get { return ".GENERAL."; } private set { } }
		public static string HVAC { get { return ".HVAC."; } private set { } }
		public static string LANDSCAPING { get { return ".LANDSCAPING."; } private set { } }
		public static string MASONRY { get { return ".MASONRY."; } private set { } }
		public static string PAINTING { get { return ".PAINTING."; } private set { } }
		public static string PAVING { get { return ".PAVING."; } private set { } }
		public static string PLUMBING { get { return ".PLUMBING."; } private set { } }
		public static string ROOFING { get { return ".ROOFING."; } private set { } }
		public static string SITEGRADING { get { return ".SITEGRADING."; } private set { } }
		public static string STEELWORK { get { return ".STEELWORK."; } private set { } }
		public static string SURVEYING { get { return ".SURVEYING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcLaborResourceTypeEnum() { Value = ".ADMINISTRATION.";}
		public IfcLaborResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcLaborResourceTypeEnum(string value) { return new IfcLaborResourceTypeEnum(value);}
		public static implicit operator string(IfcLaborResourceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLampTypeEnum = ENUMERATION OF
	/// (COMPACTFLUORESCENT
	/// ,FLUORESCENT
	/// ,HALOGEN
	/// ,HIGHPRESSUREMERCURY
	/// ,HIGHPRESSURESODIUM
	/// ,LED
	/// ,METALHALIDE
	/// ,OLED
	/// ,TUNGSTENFILAMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcLampTypeEnum: Global.IfcLampTypeEnum
	{
		public static string COMPACTFLUORESCENT { get { return ".COMPACTFLUORESCENT."; } private set { } }
		public static string FLUORESCENT { get { return ".FLUORESCENT."; } private set { } }
		public static string HALOGEN { get { return ".HALOGEN."; } private set { } }
		public static string HIGHPRESSUREMERCURY { get { return ".HIGHPRESSUREMERCURY."; } private set { } }
		public static string HIGHPRESSURESODIUM { get { return ".HIGHPRESSURESODIUM."; } private set { } }
		public static string LED { get { return ".LED."; } private set { } }
		public static string METALHALIDE { get { return ".METALHALIDE."; } private set { } }
		public static string OLED { get { return ".OLED."; } private set { } }
		public static string TUNGSTENFILAMENT { get { return ".TUNGSTENFILAMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcLampTypeEnum() { Value = ".COMPACTFLUORESCENT.";}
		public IfcLampTypeEnum(string value) { Value = value; }
		public static implicit operator IfcLampTypeEnum(string value) { return new IfcLampTypeEnum(value);}
		public static implicit operator string(IfcLampTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLayerSetDirectionEnum = ENUMERATION OF
	/// (AXIS1
	/// ,AXIS2
	/// ,AXIS3);
	/// END_TYPE;
	/// <summary>
	public class IfcLayerSetDirectionEnum: Global.IfcLayerSetDirectionEnum
	{
		public static string AXIS1 { get { return ".AXIS1."; } private set { } }
		public static string AXIS2 { get { return ".AXIS2."; } private set { } }
		public static string AXIS3 { get { return ".AXIS3."; } private set { } }
		public string Value {get; set;}
		public IfcLayerSetDirectionEnum() { Value = ".AXIS1.";}
		public IfcLayerSetDirectionEnum(string value) { Value = value; }
		public static implicit operator IfcLayerSetDirectionEnum(string value) { return new IfcLayerSetDirectionEnum(value);}
		public static implicit operator string(IfcLayerSetDirectionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLightDistributionCurveEnum = ENUMERATION OF
	/// (TYPE_A
	/// ,TYPE_B
	/// ,TYPE_C
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcLightDistributionCurveEnum: Global.IfcLightDistributionCurveEnum
	{
		public static string TYPE_A { get { return ".TYPE_A."; } private set { } }
		public static string TYPE_B { get { return ".TYPE_B."; } private set { } }
		public static string TYPE_C { get { return ".TYPE_C."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcLightDistributionCurveEnum() { Value = ".TYPE_A.";}
		public IfcLightDistributionCurveEnum(string value) { Value = value; }
		public static implicit operator IfcLightDistributionCurveEnum(string value) { return new IfcLightDistributionCurveEnum(value);}
		public static implicit operator string(IfcLightDistributionCurveEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLightEmissionSourceEnum = ENUMERATION OF
	/// (COMPACTFLUORESCENT
	/// ,FLUORESCENT
	/// ,HIGHPRESSUREMERCURY
	/// ,HIGHPRESSURESODIUM
	/// ,LIGHTEMITTINGDIODE
	/// ,LOWPRESSURESODIUM
	/// ,LOWVOLTAGEHALOGEN
	/// ,MAINVOLTAGEHALOGEN
	/// ,METALHALIDE
	/// ,TUNGSTENFILAMENT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcLightEmissionSourceEnum: Global.IfcLightEmissionSourceEnum
	{
		public static string COMPACTFLUORESCENT { get { return ".COMPACTFLUORESCENT."; } private set { } }
		public static string FLUORESCENT { get { return ".FLUORESCENT."; } private set { } }
		public static string HIGHPRESSUREMERCURY { get { return ".HIGHPRESSUREMERCURY."; } private set { } }
		public static string HIGHPRESSURESODIUM { get { return ".HIGHPRESSURESODIUM."; } private set { } }
		public static string LIGHTEMITTINGDIODE { get { return ".LIGHTEMITTINGDIODE."; } private set { } }
		public static string LOWPRESSURESODIUM { get { return ".LOWPRESSURESODIUM."; } private set { } }
		public static string LOWVOLTAGEHALOGEN { get { return ".LOWVOLTAGEHALOGEN."; } private set { } }
		public static string MAINVOLTAGEHALOGEN { get { return ".MAINVOLTAGEHALOGEN."; } private set { } }
		public static string METALHALIDE { get { return ".METALHALIDE."; } private set { } }
		public static string TUNGSTENFILAMENT { get { return ".TUNGSTENFILAMENT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcLightEmissionSourceEnum() { Value = ".COMPACTFLUORESCENT.";}
		public IfcLightEmissionSourceEnum(string value) { Value = value; }
		public static implicit operator IfcLightEmissionSourceEnum(string value) { return new IfcLightEmissionSourceEnum(value);}
		public static implicit operator string(IfcLightEmissionSourceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLightFixtureTypeEnum = ENUMERATION OF
	/// (POINTSOURCE
	/// ,DIRECTIONSOURCE
	/// ,SECURITYLIGHTING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcLightFixtureTypeEnum: Global.IfcLightFixtureTypeEnum
	{
		public static string POINTSOURCE { get { return ".POINTSOURCE."; } private set { } }
		public static string DIRECTIONSOURCE { get { return ".DIRECTIONSOURCE."; } private set { } }
		public static string SECURITYLIGHTING { get { return ".SECURITYLIGHTING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcLightFixtureTypeEnum() { Value = ".POINTSOURCE.";}
		public IfcLightFixtureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcLightFixtureTypeEnum(string value) { return new IfcLightFixtureTypeEnum(value);}
		public static implicit operator string(IfcLightFixtureTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLoadGroupTypeEnum = ENUMERATION OF
	/// (LOAD_GROUP
	/// ,LOAD_CASE
	/// ,LOAD_COMBINATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcLoadGroupTypeEnum: Global.IfcLoadGroupTypeEnum
	{
		public static string LOAD_GROUP { get { return ".LOAD_GROUP."; } private set { } }
		public static string LOAD_CASE { get { return ".LOAD_CASE."; } private set { } }
		public static string LOAD_COMBINATION { get { return ".LOAD_COMBINATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcLoadGroupTypeEnum() { Value = ".LOAD_GROUP.";}
		public IfcLoadGroupTypeEnum(string value) { Value = value; }
		public static implicit operator IfcLoadGroupTypeEnum(string value) { return new IfcLoadGroupTypeEnum(value);}
		public static implicit operator string(IfcLoadGroupTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLogicalOperatorEnum = ENUMERATION OF
	/// (LOGICALAND
	/// ,LOGICALOR
	/// ,LOGICALXOR
	/// ,LOGICALNOTAND
	/// ,LOGICALNOTOR);
	/// END_TYPE;
	/// <summary>
	public class IfcLogicalOperatorEnum: Global.IfcLogicalOperatorEnum
	{
		public static string LOGICALAND { get { return ".LOGICALAND."; } private set { } }
		public static string LOGICALOR { get { return ".LOGICALOR."; } private set { } }
		public static string LOGICALXOR { get { return ".LOGICALXOR."; } private set { } }
		public static string LOGICALNOTAND { get { return ".LOGICALNOTAND."; } private set { } }
		public static string LOGICALNOTOR { get { return ".LOGICALNOTOR."; } private set { } }
		public string Value {get; set;}
		public IfcLogicalOperatorEnum() { Value = ".LOGICALAND.";}
		public IfcLogicalOperatorEnum(string value) { Value = value; }
		public static implicit operator IfcLogicalOperatorEnum(string value) { return new IfcLogicalOperatorEnum(value);}
		public static implicit operator string(IfcLogicalOperatorEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMechanicalFastenerTypeEnum = ENUMERATION OF
	/// (ANCHORBOLT
	/// ,BOLT
	/// ,DOWEL
	/// ,NAIL
	/// ,NAILPLATE
	/// ,RIVET
	/// ,SCREW
	/// ,SHEARCONNECTOR
	/// ,STAPLE
	/// ,STUDSHEARCONNECTOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcMechanicalFastenerTypeEnum: Global.IfcMechanicalFastenerTypeEnum
	{
		public static string ANCHORBOLT { get { return ".ANCHORBOLT."; } private set { } }
		public static string BOLT { get { return ".BOLT."; } private set { } }
		public static string DOWEL { get { return ".DOWEL."; } private set { } }
		public static string NAIL { get { return ".NAIL."; } private set { } }
		public static string NAILPLATE { get { return ".NAILPLATE."; } private set { } }
		public static string RIVET { get { return ".RIVET."; } private set { } }
		public static string SCREW { get { return ".SCREW."; } private set { } }
		public static string SHEARCONNECTOR { get { return ".SHEARCONNECTOR."; } private set { } }
		public static string STAPLE { get { return ".STAPLE."; } private set { } }
		public static string STUDSHEARCONNECTOR { get { return ".STUDSHEARCONNECTOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcMechanicalFastenerTypeEnum() { Value = ".ANCHORBOLT.";}
		public IfcMechanicalFastenerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcMechanicalFastenerTypeEnum(string value) { return new IfcMechanicalFastenerTypeEnum(value);}
		public static implicit operator string(IfcMechanicalFastenerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMedicalDeviceTypeEnum = ENUMERATION OF
	/// (AIRSTATION
	/// ,FEEDAIRUNIT
	/// ,OXYGENGENERATOR
	/// ,OXYGENPLANT
	/// ,VACUUMSTATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcMedicalDeviceTypeEnum: Global.IfcMedicalDeviceTypeEnum
	{
		public static string AIRSTATION { get { return ".AIRSTATION."; } private set { } }
		public static string FEEDAIRUNIT { get { return ".FEEDAIRUNIT."; } private set { } }
		public static string OXYGENGENERATOR { get { return ".OXYGENGENERATOR."; } private set { } }
		public static string OXYGENPLANT { get { return ".OXYGENPLANT."; } private set { } }
		public static string VACUUMSTATION { get { return ".VACUUMSTATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcMedicalDeviceTypeEnum() { Value = ".AIRSTATION.";}
		public IfcMedicalDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcMedicalDeviceTypeEnum(string value) { return new IfcMedicalDeviceTypeEnum(value);}
		public static implicit operator string(IfcMedicalDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMemberTypeEnum = ENUMERATION OF
	/// (BRACE
	/// ,CHORD
	/// ,COLLAR
	/// ,MEMBER
	/// ,MULLION
	/// ,PLATE
	/// ,POST
	/// ,PURLIN
	/// ,RAFTER
	/// ,STRINGER
	/// ,STRUT
	/// ,STUD
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcMemberTypeEnum: Global.IfcMemberTypeEnum
	{
		public static string BRACE { get { return ".BRACE."; } private set { } }
		public static string CHORD { get { return ".CHORD."; } private set { } }
		public static string COLLAR { get { return ".COLLAR."; } private set { } }
		public static string MEMBER { get { return ".MEMBER."; } private set { } }
		public static string MULLION { get { return ".MULLION."; } private set { } }
		public static string PLATE { get { return ".PLATE."; } private set { } }
		public static string POST { get { return ".POST."; } private set { } }
		public static string PURLIN { get { return ".PURLIN."; } private set { } }
		public static string RAFTER { get { return ".RAFTER."; } private set { } }
		public static string STRINGER { get { return ".STRINGER."; } private set { } }
		public static string STRUT { get { return ".STRUT."; } private set { } }
		public static string STUD { get { return ".STUD."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcMemberTypeEnum() { Value = ".BRACE.";}
		public IfcMemberTypeEnum(string value) { Value = value; }
		public static implicit operator IfcMemberTypeEnum(string value) { return new IfcMemberTypeEnum(value);}
		public static implicit operator string(IfcMemberTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMotorConnectionTypeEnum = ENUMERATION OF
	/// (BELTDRIVE
	/// ,COUPLING
	/// ,DIRECTDRIVE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcMotorConnectionTypeEnum: Global.IfcMotorConnectionTypeEnum
	{
		public static string BELTDRIVE { get { return ".BELTDRIVE."; } private set { } }
		public static string COUPLING { get { return ".COUPLING."; } private set { } }
		public static string DIRECTDRIVE { get { return ".DIRECTDRIVE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcMotorConnectionTypeEnum() { Value = ".BELTDRIVE.";}
		public IfcMotorConnectionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcMotorConnectionTypeEnum(string value) { return new IfcMotorConnectionTypeEnum(value);}
		public static implicit operator string(IfcMotorConnectionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcNullStyle = ENUMERATION OF
	/// (NULL);
	/// END_TYPE;
	/// <summary>
	public class IfcNullStyle: IfcPresentationStyleSelect, Global.IfcNullStyle
	{
		public static string NULL { get { return ".NULL."; } private set { } }
		public virtual IfcLabel? Name {get; set;}
		public string Value {get; set;}
		public IfcNullStyle() { Value = ".NULL.";}
		public IfcNullStyle(string value) { Value = value; }
		public static implicit operator IfcNullStyle(string value) { return new IfcNullStyle(value);}
		public static implicit operator string(IfcNullStyle value) { return value.Value;}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// TYPE IfcObjectTypeEnum = ENUMERATION OF
	/// (PRODUCT
	/// ,PROCESS
	/// ,CONTROL
	/// ,RESOURCE
	/// ,ACTOR
	/// ,GROUP
	/// ,PROJECT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcObjectTypeEnum: Global.IfcObjectTypeEnum
	{
		public static string PRODUCT { get { return ".PRODUCT."; } private set { } }
		public static string PROCESS { get { return ".PROCESS."; } private set { } }
		public static string CONTROL { get { return ".CONTROL."; } private set { } }
		public static string RESOURCE { get { return ".RESOURCE."; } private set { } }
		public static string ACTOR { get { return ".ACTOR."; } private set { } }
		public static string GROUP { get { return ".GROUP."; } private set { } }
		public static string PROJECT { get { return ".PROJECT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcObjectTypeEnum() { Value = ".PRODUCT.";}
		public IfcObjectTypeEnum(string value) { Value = value; }
		public static implicit operator IfcObjectTypeEnum(string value) { return new IfcObjectTypeEnum(value);}
		public static implicit operator string(IfcObjectTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcObjectiveEnum = ENUMERATION OF
	/// (CODECOMPLIANCE
	/// ,CODEWAIVER
	/// ,DESIGNINTENT
	/// ,EXTERNAL
	/// ,HEALTHANDSAFETY
	/// ,MERGECONFLICT
	/// ,MODELVIEW
	/// ,PARAMETER
	/// ,REQUIREMENT
	/// ,SPECIFICATION
	/// ,TRIGGERCONDITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcObjectiveEnum: Global.IfcObjectiveEnum
	{
		public static string CODECOMPLIANCE { get { return ".CODECOMPLIANCE."; } private set { } }
		public static string CODEWAIVER { get { return ".CODEWAIVER."; } private set { } }
		public static string DESIGNINTENT { get { return ".DESIGNINTENT."; } private set { } }
		public static string EXTERNAL { get { return ".EXTERNAL."; } private set { } }
		public static string HEALTHANDSAFETY { get { return ".HEALTHANDSAFETY."; } private set { } }
		public static string MERGECONFLICT { get { return ".MERGECONFLICT."; } private set { } }
		public static string MODELVIEW { get { return ".MODELVIEW."; } private set { } }
		public static string PARAMETER { get { return ".PARAMETER."; } private set { } }
		public static string REQUIREMENT { get { return ".REQUIREMENT."; } private set { } }
		public static string SPECIFICATION { get { return ".SPECIFICATION."; } private set { } }
		public static string TRIGGERCONDITION { get { return ".TRIGGERCONDITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcObjectiveEnum() { Value = ".CODECOMPLIANCE.";}
		public IfcObjectiveEnum(string value) { Value = value; }
		public static implicit operator IfcObjectiveEnum(string value) { return new IfcObjectiveEnum(value);}
		public static implicit operator string(IfcObjectiveEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcOccupantTypeEnum = ENUMERATION OF
	/// (ASSIGNEE
	/// ,ASSIGNOR
	/// ,LESSEE
	/// ,LESSOR
	/// ,LETTINGAGENT
	/// ,OWNER
	/// ,TENANT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcOccupantTypeEnum: Global.IfcOccupantTypeEnum
	{
		public static string ASSIGNEE { get { return ".ASSIGNEE."; } private set { } }
		public static string ASSIGNOR { get { return ".ASSIGNOR."; } private set { } }
		public static string LESSEE { get { return ".LESSEE."; } private set { } }
		public static string LESSOR { get { return ".LESSOR."; } private set { } }
		public static string LETTINGAGENT { get { return ".LETTINGAGENT."; } private set { } }
		public static string OWNER { get { return ".OWNER."; } private set { } }
		public static string TENANT { get { return ".TENANT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcOccupantTypeEnum() { Value = ".ASSIGNEE.";}
		public IfcOccupantTypeEnum(string value) { Value = value; }
		public static implicit operator IfcOccupantTypeEnum(string value) { return new IfcOccupantTypeEnum(value);}
		public static implicit operator string(IfcOccupantTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcOpeningElementTypeEnum = ENUMERATION OF
	/// (OPENING
	/// ,RECESS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcOpeningElementTypeEnum: Global.IfcOpeningElementTypeEnum
	{
		public static string OPENING { get { return ".OPENING."; } private set { } }
		public static string RECESS { get { return ".RECESS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcOpeningElementTypeEnum() { Value = ".OPENING.";}
		public IfcOpeningElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcOpeningElementTypeEnum(string value) { return new IfcOpeningElementTypeEnum(value);}
		public static implicit operator string(IfcOpeningElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcOutletTypeEnum = ENUMERATION OF
	/// (AUDIOVISUALOUTLET
	/// ,COMMUNICATIONSOUTLET
	/// ,POWEROUTLET
	/// ,DATAOUTLET
	/// ,TELEPHONEOUTLET
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcOutletTypeEnum: Global.IfcOutletTypeEnum
	{
		public static string AUDIOVISUALOUTLET { get { return ".AUDIOVISUALOUTLET."; } private set { } }
		public static string COMMUNICATIONSOUTLET { get { return ".COMMUNICATIONSOUTLET."; } private set { } }
		public static string POWEROUTLET { get { return ".POWEROUTLET."; } private set { } }
		public static string DATAOUTLET { get { return ".DATAOUTLET."; } private set { } }
		public static string TELEPHONEOUTLET { get { return ".TELEPHONEOUTLET."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcOutletTypeEnum() { Value = ".AUDIOVISUALOUTLET.";}
		public IfcOutletTypeEnum(string value) { Value = value; }
		public static implicit operator IfcOutletTypeEnum(string value) { return new IfcOutletTypeEnum(value);}
		public static implicit operator string(IfcOutletTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPerformanceHistoryTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPerformanceHistoryTypeEnum: Global.IfcPerformanceHistoryTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPerformanceHistoryTypeEnum() { Value = ".USERDEFINED.";}
		public IfcPerformanceHistoryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPerformanceHistoryTypeEnum(string value) { return new IfcPerformanceHistoryTypeEnum(value);}
		public static implicit operator string(IfcPerformanceHistoryTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPermeableCoveringOperationEnum = ENUMERATION OF
	/// (GRILL
	/// ,LOUVER
	/// ,SCREEN
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPermeableCoveringOperationEnum: Global.IfcPermeableCoveringOperationEnum
	{
		public static string GRILL { get { return ".GRILL."; } private set { } }
		public static string LOUVER { get { return ".LOUVER."; } private set { } }
		public static string SCREEN { get { return ".SCREEN."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPermeableCoveringOperationEnum() { Value = ".GRILL.";}
		public IfcPermeableCoveringOperationEnum(string value) { Value = value; }
		public static implicit operator IfcPermeableCoveringOperationEnum(string value) { return new IfcPermeableCoveringOperationEnum(value);}
		public static implicit operator string(IfcPermeableCoveringOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPermitTypeEnum = ENUMERATION OF
	/// (ACCESS
	/// ,BUILDING
	/// ,WORK
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPermitTypeEnum: Global.IfcPermitTypeEnum
	{
		public static string ACCESS { get { return ".ACCESS."; } private set { } }
		public static string BUILDING { get { return ".BUILDING."; } private set { } }
		public static string WORK { get { return ".WORK."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPermitTypeEnum() { Value = ".ACCESS.";}
		public IfcPermitTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPermitTypeEnum(string value) { return new IfcPermitTypeEnum(value);}
		public static implicit operator string(IfcPermitTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPhysicalOrVirtualEnum = ENUMERATION OF
	/// (PHYSICAL
	/// ,VIRTUAL
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPhysicalOrVirtualEnum: Global.IfcPhysicalOrVirtualEnum
	{
		public static string PHYSICAL { get { return ".PHYSICAL."; } private set { } }
		public static string VIRTUAL { get { return ".VIRTUAL."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPhysicalOrVirtualEnum() { Value = ".PHYSICAL.";}
		public IfcPhysicalOrVirtualEnum(string value) { Value = value; }
		public static implicit operator IfcPhysicalOrVirtualEnum(string value) { return new IfcPhysicalOrVirtualEnum(value);}
		public static implicit operator string(IfcPhysicalOrVirtualEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPileConstructionEnum = ENUMERATION OF
	/// (CAST_IN_PLACE
	/// ,COMPOSITE
	/// ,PRECAST_CONCRETE
	/// ,PREFAB_STEEL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPileConstructionEnum: Global.IfcPileConstructionEnum
	{
		public static string CAST_IN_PLACE { get { return ".CAST_IN_PLACE."; } private set { } }
		public static string COMPOSITE { get { return ".COMPOSITE."; } private set { } }
		public static string PRECAST_CONCRETE { get { return ".PRECAST_CONCRETE."; } private set { } }
		public static string PREFAB_STEEL { get { return ".PREFAB_STEEL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPileConstructionEnum() { Value = ".CAST_IN_PLACE.";}
		public IfcPileConstructionEnum(string value) { Value = value; }
		public static implicit operator IfcPileConstructionEnum(string value) { return new IfcPileConstructionEnum(value);}
		public static implicit operator string(IfcPileConstructionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPileTypeEnum = ENUMERATION OF
	/// (BORED
	/// ,DRIVEN
	/// ,JETGROUTING
	/// ,COHESION
	/// ,FRICTION
	/// ,SUPPORT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPileTypeEnum: Global.IfcPileTypeEnum
	{
		public static string BORED { get { return ".BORED."; } private set { } }
		public static string DRIVEN { get { return ".DRIVEN."; } private set { } }
		public static string JETGROUTING { get { return ".JETGROUTING."; } private set { } }
		public static string COHESION { get { return ".COHESION."; } private set { } }
		public static string FRICTION { get { return ".FRICTION."; } private set { } }
		public static string SUPPORT { get { return ".SUPPORT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPileTypeEnum() { Value = ".BORED.";}
		public IfcPileTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPileTypeEnum(string value) { return new IfcPileTypeEnum(value);}
		public static implicit operator string(IfcPileTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPipeFittingTypeEnum = ENUMERATION OF
	/// (BEND
	/// ,CONNECTOR
	/// ,ENTRY
	/// ,EXIT
	/// ,JUNCTION
	/// ,OBSTRUCTION
	/// ,TRANSITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPipeFittingTypeEnum: Global.IfcPipeFittingTypeEnum
	{
		public static string BEND { get { return ".BEND."; } private set { } }
		public static string CONNECTOR { get { return ".CONNECTOR."; } private set { } }
		public static string ENTRY { get { return ".ENTRY."; } private set { } }
		public static string EXIT { get { return ".EXIT."; } private set { } }
		public static string JUNCTION { get { return ".JUNCTION."; } private set { } }
		public static string OBSTRUCTION { get { return ".OBSTRUCTION."; } private set { } }
		public static string TRANSITION { get { return ".TRANSITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPipeFittingTypeEnum() { Value = ".BEND.";}
		public IfcPipeFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPipeFittingTypeEnum(string value) { return new IfcPipeFittingTypeEnum(value);}
		public static implicit operator string(IfcPipeFittingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPipeSegmentTypeEnum = ENUMERATION OF
	/// (CULVERT
	/// ,FLEXIBLESEGMENT
	/// ,RIGIDSEGMENT
	/// ,GUTTER
	/// ,SPOOL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPipeSegmentTypeEnum: Global.IfcPipeSegmentTypeEnum
	{
		public static string CULVERT { get { return ".CULVERT."; } private set { } }
		public static string FLEXIBLESEGMENT { get { return ".FLEXIBLESEGMENT."; } private set { } }
		public static string RIGIDSEGMENT { get { return ".RIGIDSEGMENT."; } private set { } }
		public static string GUTTER { get { return ".GUTTER."; } private set { } }
		public static string SPOOL { get { return ".SPOOL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPipeSegmentTypeEnum() { Value = ".CULVERT.";}
		public IfcPipeSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPipeSegmentTypeEnum(string value) { return new IfcPipeSegmentTypeEnum(value);}
		public static implicit operator string(IfcPipeSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPlateTypeEnum = ENUMERATION OF
	/// (CURTAIN_PANEL
	/// ,SHEET
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPlateTypeEnum: Global.IfcPlateTypeEnum
	{
		public static string CURTAIN_PANEL { get { return ".CURTAIN_PANEL."; } private set { } }
		public static string SHEET { get { return ".SHEET."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPlateTypeEnum() { Value = ".CURTAIN_PANEL.";}
		public IfcPlateTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPlateTypeEnum(string value) { return new IfcPlateTypeEnum(value);}
		public static implicit operator string(IfcPlateTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPreferredSurfaceCurveRepresentation = ENUMERATION OF
	/// (CURVE3D
	/// ,PCURVE_S1
	/// ,PCURVE_S2);
	/// END_TYPE;
	/// <summary>
	public class IfcPreferredSurfaceCurveRepresentation: Global.IfcPreferredSurfaceCurveRepresentation
	{
		public static string CURVE3D { get { return ".CURVE3D."; } private set { } }
		public static string PCURVE_S1 { get { return ".PCURVE_S1."; } private set { } }
		public static string PCURVE_S2 { get { return ".PCURVE_S2."; } private set { } }
		public string Value {get; set;}
		public IfcPreferredSurfaceCurveRepresentation() { Value = ".CURVE3D.";}
		public IfcPreferredSurfaceCurveRepresentation(string value) { Value = value; }
		public static implicit operator IfcPreferredSurfaceCurveRepresentation(string value) { return new IfcPreferredSurfaceCurveRepresentation(value);}
		public static implicit operator string(IfcPreferredSurfaceCurveRepresentation value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProcedureTypeEnum = ENUMERATION OF
	/// (ADVICE_CAUTION
	/// ,ADVICE_NOTE
	/// ,ADVICE_WARNING
	/// ,CALIBRATION
	/// ,DIAGNOSTIC
	/// ,SHUTDOWN
	/// ,STARTUP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcProcedureTypeEnum: Global.IfcProcedureTypeEnum
	{
		public static string ADVICE_CAUTION { get { return ".ADVICE_CAUTION."; } private set { } }
		public static string ADVICE_NOTE { get { return ".ADVICE_NOTE."; } private set { } }
		public static string ADVICE_WARNING { get { return ".ADVICE_WARNING."; } private set { } }
		public static string CALIBRATION { get { return ".CALIBRATION."; } private set { } }
		public static string DIAGNOSTIC { get { return ".DIAGNOSTIC."; } private set { } }
		public static string SHUTDOWN { get { return ".SHUTDOWN."; } private set { } }
		public static string STARTUP { get { return ".STARTUP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcProcedureTypeEnum() { Value = ".ADVICE_CAUTION.";}
		public IfcProcedureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProcedureTypeEnum(string value) { return new IfcProcedureTypeEnum(value);}
		public static implicit operator string(IfcProcedureTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProfileTypeEnum = ENUMERATION OF
	/// (CURVE
	/// ,AREA);
	/// END_TYPE;
	/// <summary>
	public class IfcProfileTypeEnum: Global.IfcProfileTypeEnum
	{
		public static string CURVE { get { return ".CURVE."; } private set { } }
		public static string AREA { get { return ".AREA."; } private set { } }
		public string Value {get; set;}
		public IfcProfileTypeEnum() { Value = ".CURVE.";}
		public IfcProfileTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProfileTypeEnum(string value) { return new IfcProfileTypeEnum(value);}
		public static implicit operator string(IfcProfileTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProjectOrderTypeEnum = ENUMERATION OF
	/// (CHANGEORDER
	/// ,MAINTENANCEWORKORDER
	/// ,MOVEORDER
	/// ,PURCHASEORDER
	/// ,WORKORDER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcProjectOrderTypeEnum: Global.IfcProjectOrderTypeEnum
	{
		public static string CHANGEORDER { get { return ".CHANGEORDER."; } private set { } }
		public static string MAINTENANCEWORKORDER { get { return ".MAINTENANCEWORKORDER."; } private set { } }
		public static string MOVEORDER { get { return ".MOVEORDER."; } private set { } }
		public static string PURCHASEORDER { get { return ".PURCHASEORDER."; } private set { } }
		public static string WORKORDER { get { return ".WORKORDER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcProjectOrderTypeEnum() { Value = ".CHANGEORDER.";}
		public IfcProjectOrderTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProjectOrderTypeEnum(string value) { return new IfcProjectOrderTypeEnum(value);}
		public static implicit operator string(IfcProjectOrderTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProjectedOrTrueLengthEnum = ENUMERATION OF
	/// (PROJECTED_LENGTH
	/// ,TRUE_LENGTH);
	/// END_TYPE;
	/// <summary>
	public class IfcProjectedOrTrueLengthEnum: Global.IfcProjectedOrTrueLengthEnum
	{
		public static string PROJECTED_LENGTH { get { return ".PROJECTED_LENGTH."; } private set { } }
		public static string TRUE_LENGTH { get { return ".TRUE_LENGTH."; } private set { } }
		public string Value {get; set;}
		public IfcProjectedOrTrueLengthEnum() { Value = ".PROJECTED_LENGTH.";}
		public IfcProjectedOrTrueLengthEnum(string value) { Value = value; }
		public static implicit operator IfcProjectedOrTrueLengthEnum(string value) { return new IfcProjectedOrTrueLengthEnum(value);}
		public static implicit operator string(IfcProjectedOrTrueLengthEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProjectionElementTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcProjectionElementTypeEnum: Global.IfcProjectionElementTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcProjectionElementTypeEnum() { Value = ".USERDEFINED.";}
		public IfcProjectionElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProjectionElementTypeEnum(string value) { return new IfcProjectionElementTypeEnum(value);}
		public static implicit operator string(IfcProjectionElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPropertySetTemplateTypeEnum = ENUMERATION OF
	/// (PSET_TYPEDRIVENONLY
	/// ,PSET_TYPEDRIVENOVERRIDE
	/// ,PSET_OCCURRENCEDRIVEN
	/// ,PSET_PERFORMANCEDRIVEN
	/// ,QTO_TYPEDRIVENONLY
	/// ,QTO_TYPEDRIVENOVERRIDE
	/// ,QTO_OCCURRENCEDRIVEN
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPropertySetTemplateTypeEnum: Global.IfcPropertySetTemplateTypeEnum
	{
		public static string PSET_TYPEDRIVENONLY { get { return ".PSET_TYPEDRIVENONLY."; } private set { } }
		public static string PSET_TYPEDRIVENOVERRIDE { get { return ".PSET_TYPEDRIVENOVERRIDE."; } private set { } }
		public static string PSET_OCCURRENCEDRIVEN { get { return ".PSET_OCCURRENCEDRIVEN."; } private set { } }
		public static string PSET_PERFORMANCEDRIVEN { get { return ".PSET_PERFORMANCEDRIVEN."; } private set { } }
		public static string QTO_TYPEDRIVENONLY { get { return ".QTO_TYPEDRIVENONLY."; } private set { } }
		public static string QTO_TYPEDRIVENOVERRIDE { get { return ".QTO_TYPEDRIVENOVERRIDE."; } private set { } }
		public static string QTO_OCCURRENCEDRIVEN { get { return ".QTO_OCCURRENCEDRIVEN."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPropertySetTemplateTypeEnum() { Value = ".PSET_TYPEDRIVENONLY.";}
		public IfcPropertySetTemplateTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPropertySetTemplateTypeEnum(string value) { return new IfcPropertySetTemplateTypeEnum(value);}
		public static implicit operator string(IfcPropertySetTemplateTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProtectiveDeviceTrippingUnitTypeEnum = ENUMERATION OF
	/// (ELECTRONIC
	/// ,ELECTROMAGNETIC
	/// ,RESIDUALCURRENT
	/// ,THERMAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcProtectiveDeviceTrippingUnitTypeEnum: Global.IfcProtectiveDeviceTrippingUnitTypeEnum
	{
		public static string ELECTRONIC { get { return ".ELECTRONIC."; } private set { } }
		public static string ELECTROMAGNETIC { get { return ".ELECTROMAGNETIC."; } private set { } }
		public static string RESIDUALCURRENT { get { return ".RESIDUALCURRENT."; } private set { } }
		public static string THERMAL { get { return ".THERMAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcProtectiveDeviceTrippingUnitTypeEnum() { Value = ".ELECTRONIC.";}
		public IfcProtectiveDeviceTrippingUnitTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProtectiveDeviceTrippingUnitTypeEnum(string value) { return new IfcProtectiveDeviceTrippingUnitTypeEnum(value);}
		public static implicit operator string(IfcProtectiveDeviceTrippingUnitTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProtectiveDeviceTypeEnum = ENUMERATION OF
	/// (CIRCUITBREAKER
	/// ,EARTHLEAKAGECIRCUITBREAKER
	/// ,EARTHINGSWITCH
	/// ,FUSEDISCONNECTOR
	/// ,RESIDUALCURRENTCIRCUITBREAKER
	/// ,RESIDUALCURRENTSWITCH
	/// ,VARISTOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcProtectiveDeviceTypeEnum: Global.IfcProtectiveDeviceTypeEnum
	{
		public static string CIRCUITBREAKER { get { return ".CIRCUITBREAKER."; } private set { } }
		public static string EARTHLEAKAGECIRCUITBREAKER { get { return ".EARTHLEAKAGECIRCUITBREAKER."; } private set { } }
		public static string EARTHINGSWITCH { get { return ".EARTHINGSWITCH."; } private set { } }
		public static string FUSEDISCONNECTOR { get { return ".FUSEDISCONNECTOR."; } private set { } }
		public static string RESIDUALCURRENTCIRCUITBREAKER { get { return ".RESIDUALCURRENTCIRCUITBREAKER."; } private set { } }
		public static string RESIDUALCURRENTSWITCH { get { return ".RESIDUALCURRENTSWITCH."; } private set { } }
		public static string VARISTOR { get { return ".VARISTOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcProtectiveDeviceTypeEnum() { Value = ".CIRCUITBREAKER.";}
		public IfcProtectiveDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProtectiveDeviceTypeEnum(string value) { return new IfcProtectiveDeviceTypeEnum(value);}
		public static implicit operator string(IfcProtectiveDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPumpTypeEnum = ENUMERATION OF
	/// (CIRCULATOR
	/// ,ENDSUCTION
	/// ,SPLITCASE
	/// ,SUBMERSIBLEPUMP
	/// ,SUMPPUMP
	/// ,VERTICALINLINE
	/// ,VERTICALTURBINE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPumpTypeEnum: Global.IfcPumpTypeEnum
	{
		public static string CIRCULATOR { get { return ".CIRCULATOR."; } private set { } }
		public static string ENDSUCTION { get { return ".ENDSUCTION."; } private set { } }
		public static string SPLITCASE { get { return ".SPLITCASE."; } private set { } }
		public static string SUBMERSIBLEPUMP { get { return ".SUBMERSIBLEPUMP."; } private set { } }
		public static string SUMPPUMP { get { return ".SUMPPUMP."; } private set { } }
		public static string VERTICALINLINE { get { return ".VERTICALINLINE."; } private set { } }
		public static string VERTICALTURBINE { get { return ".VERTICALTURBINE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPumpTypeEnum() { Value = ".CIRCULATOR.";}
		public IfcPumpTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPumpTypeEnum(string value) { return new IfcPumpTypeEnum(value);}
		public static implicit operator string(IfcPumpTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRailingTypeEnum = ENUMERATION OF
	/// (HANDRAIL
	/// ,GUARDRAIL
	/// ,BALUSTRADE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcRailingTypeEnum: Global.IfcRailingTypeEnum
	{
		public static string HANDRAIL { get { return ".HANDRAIL."; } private set { } }
		public static string GUARDRAIL { get { return ".GUARDRAIL."; } private set { } }
		public static string BALUSTRADE { get { return ".BALUSTRADE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcRailingTypeEnum() { Value = ".HANDRAIL.";}
		public IfcRailingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRailingTypeEnum(string value) { return new IfcRailingTypeEnum(value);}
		public static implicit operator string(IfcRailingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRampFlightTypeEnum = ENUMERATION OF
	/// (STRAIGHT
	/// ,SPIRAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcRampFlightTypeEnum: Global.IfcRampFlightTypeEnum
	{
		public static string STRAIGHT { get { return ".STRAIGHT."; } private set { } }
		public static string SPIRAL { get { return ".SPIRAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcRampFlightTypeEnum() { Value = ".STRAIGHT.";}
		public IfcRampFlightTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRampFlightTypeEnum(string value) { return new IfcRampFlightTypeEnum(value);}
		public static implicit operator string(IfcRampFlightTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRampTypeEnum = ENUMERATION OF
	/// (STRAIGHT_RUN_RAMP
	/// ,TWO_STRAIGHT_RUN_RAMP
	/// ,QUARTER_TURN_RAMP
	/// ,TWO_QUARTER_TURN_RAMP
	/// ,HALF_TURN_RAMP
	/// ,SPIRAL_RAMP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcRampTypeEnum: Global.IfcRampTypeEnum
	{
		public static string STRAIGHT_RUN_RAMP { get { return ".STRAIGHT_RUN_RAMP."; } private set { } }
		public static string TWO_STRAIGHT_RUN_RAMP { get { return ".TWO_STRAIGHT_RUN_RAMP."; } private set { } }
		public static string QUARTER_TURN_RAMP { get { return ".QUARTER_TURN_RAMP."; } private set { } }
		public static string TWO_QUARTER_TURN_RAMP { get { return ".TWO_QUARTER_TURN_RAMP."; } private set { } }
		public static string HALF_TURN_RAMP { get { return ".HALF_TURN_RAMP."; } private set { } }
		public static string SPIRAL_RAMP { get { return ".SPIRAL_RAMP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcRampTypeEnum() { Value = ".STRAIGHT_RUN_RAMP.";}
		public IfcRampTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRampTypeEnum(string value) { return new IfcRampTypeEnum(value);}
		public static implicit operator string(IfcRampTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRecurrenceTypeEnum = ENUMERATION OF
	/// (DAILY
	/// ,WEEKLY
	/// ,MONTHLY_BY_DAY_OF_MONTH
	/// ,MONTHLY_BY_POSITION
	/// ,BY_DAY_COUNT
	/// ,BY_WEEKDAY_COUNT
	/// ,YEARLY_BY_DAY_OF_MONTH
	/// ,YEARLY_BY_POSITION);
	/// END_TYPE;
	/// <summary>
	public class IfcRecurrenceTypeEnum: Global.IfcRecurrenceTypeEnum
	{
		public static string DAILY { get { return ".DAILY."; } private set { } }
		public static string WEEKLY { get { return ".WEEKLY."; } private set { } }
		public static string MONTHLY_BY_DAY_OF_MONTH { get { return ".MONTHLY_BY_DAY_OF_MONTH."; } private set { } }
		public static string MONTHLY_BY_POSITION { get { return ".MONTHLY_BY_POSITION."; } private set { } }
		public static string BY_DAY_COUNT { get { return ".BY_DAY_COUNT."; } private set { } }
		public static string BY_WEEKDAY_COUNT { get { return ".BY_WEEKDAY_COUNT."; } private set { } }
		public static string YEARLY_BY_DAY_OF_MONTH { get { return ".YEARLY_BY_DAY_OF_MONTH."; } private set { } }
		public static string YEARLY_BY_POSITION { get { return ".YEARLY_BY_POSITION."; } private set { } }
		public string Value {get; set;}
		public IfcRecurrenceTypeEnum() { Value = ".DAILY.";}
		public IfcRecurrenceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRecurrenceTypeEnum(string value) { return new IfcRecurrenceTypeEnum(value);}
		public static implicit operator string(IfcRecurrenceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReflectanceMethodEnum = ENUMERATION OF
	/// (BLINN
	/// ,FLAT
	/// ,GLASS
	/// ,MATT
	/// ,METAL
	/// ,MIRROR
	/// ,PHONG
	/// ,PLASTIC
	/// ,STRAUSS
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcReflectanceMethodEnum: Global.IfcReflectanceMethodEnum
	{
		public static string BLINN { get { return ".BLINN."; } private set { } }
		public static string FLAT { get { return ".FLAT."; } private set { } }
		public static string GLASS { get { return ".GLASS."; } private set { } }
		public static string MATT { get { return ".MATT."; } private set { } }
		public static string METAL { get { return ".METAL."; } private set { } }
		public static string MIRROR { get { return ".MIRROR."; } private set { } }
		public static string PHONG { get { return ".PHONG."; } private set { } }
		public static string PLASTIC { get { return ".PLASTIC."; } private set { } }
		public static string STRAUSS { get { return ".STRAUSS."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcReflectanceMethodEnum() { Value = ".BLINN.";}
		public IfcReflectanceMethodEnum(string value) { Value = value; }
		public static implicit operator IfcReflectanceMethodEnum(string value) { return new IfcReflectanceMethodEnum(value);}
		public static implicit operator string(IfcReflectanceMethodEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReinforcingBarRoleEnum = ENUMERATION OF
	/// (MAIN
	/// ,SHEAR
	/// ,LIGATURE
	/// ,STUD
	/// ,PUNCHING
	/// ,EDGE
	/// ,RING
	/// ,ANCHORING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcReinforcingBarRoleEnum: Global.IfcReinforcingBarRoleEnum
	{
		public static string MAIN { get { return ".MAIN."; } private set { } }
		public static string SHEAR { get { return ".SHEAR."; } private set { } }
		public static string LIGATURE { get { return ".LIGATURE."; } private set { } }
		public static string STUD { get { return ".STUD."; } private set { } }
		public static string PUNCHING { get { return ".PUNCHING."; } private set { } }
		public static string EDGE { get { return ".EDGE."; } private set { } }
		public static string RING { get { return ".RING."; } private set { } }
		public static string ANCHORING { get { return ".ANCHORING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcReinforcingBarRoleEnum() { Value = ".MAIN.";}
		public IfcReinforcingBarRoleEnum(string value) { Value = value; }
		public static implicit operator IfcReinforcingBarRoleEnum(string value) { return new IfcReinforcingBarRoleEnum(value);}
		public static implicit operator string(IfcReinforcingBarRoleEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReinforcingBarSurfaceEnum = ENUMERATION OF
	/// (PLAIN
	/// ,TEXTURED);
	/// END_TYPE;
	/// <summary>
	public class IfcReinforcingBarSurfaceEnum: Global.IfcReinforcingBarSurfaceEnum
	{
		public static string PLAIN { get { return ".PLAIN."; } private set { } }
		public static string TEXTURED { get { return ".TEXTURED."; } private set { } }
		public string Value {get; set;}
		public IfcReinforcingBarSurfaceEnum() { Value = ".PLAIN.";}
		public IfcReinforcingBarSurfaceEnum(string value) { Value = value; }
		public static implicit operator IfcReinforcingBarSurfaceEnum(string value) { return new IfcReinforcingBarSurfaceEnum(value);}
		public static implicit operator string(IfcReinforcingBarSurfaceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReinforcingBarTypeEnum = ENUMERATION OF
	/// (ANCHORING
	/// ,EDGE
	/// ,LIGATURE
	/// ,MAIN
	/// ,PUNCHING
	/// ,RING
	/// ,SHEAR
	/// ,STUD
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcReinforcingBarTypeEnum: Global.IfcReinforcingBarTypeEnum
	{
		public static string ANCHORING { get { return ".ANCHORING."; } private set { } }
		public static string EDGE { get { return ".EDGE."; } private set { } }
		public static string LIGATURE { get { return ".LIGATURE."; } private set { } }
		public static string MAIN { get { return ".MAIN."; } private set { } }
		public static string PUNCHING { get { return ".PUNCHING."; } private set { } }
		public static string RING { get { return ".RING."; } private set { } }
		public static string SHEAR { get { return ".SHEAR."; } private set { } }
		public static string STUD { get { return ".STUD."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcReinforcingBarTypeEnum() { Value = ".ANCHORING.";}
		public IfcReinforcingBarTypeEnum(string value) { Value = value; }
		public static implicit operator IfcReinforcingBarTypeEnum(string value) { return new IfcReinforcingBarTypeEnum(value);}
		public static implicit operator string(IfcReinforcingBarTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReinforcingMeshTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcReinforcingMeshTypeEnum: Global.IfcReinforcingMeshTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcReinforcingMeshTypeEnum() { Value = ".USERDEFINED.";}
		public IfcReinforcingMeshTypeEnum(string value) { Value = value; }
		public static implicit operator IfcReinforcingMeshTypeEnum(string value) { return new IfcReinforcingMeshTypeEnum(value);}
		public static implicit operator string(IfcReinforcingMeshTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRoleEnum = ENUMERATION OF
	/// (SUPPLIER
	/// ,MANUFACTURER
	/// ,CONTRACTOR
	/// ,SUBCONTRACTOR
	/// ,ARCHITECT
	/// ,STRUCTURALENGINEER
	/// ,COSTENGINEER
	/// ,CLIENT
	/// ,BUILDINGOWNER
	/// ,BUILDINGOPERATOR
	/// ,MECHANICALENGINEER
	/// ,ELECTRICALENGINEER
	/// ,PROJECTMANAGER
	/// ,FACILITIESMANAGER
	/// ,CIVILENGINEER
	/// ,COMMISSIONINGENGINEER
	/// ,ENGINEER
	/// ,OWNER
	/// ,CONSULTANT
	/// ,CONSTRUCTIONMANAGER
	/// ,FIELDCONSTRUCTIONMANAGER
	/// ,RESELLER
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcRoleEnum: Global.IfcRoleEnum
	{
		public static string SUPPLIER { get { return ".SUPPLIER."; } private set { } }
		public static string MANUFACTURER { get { return ".MANUFACTURER."; } private set { } }
		public static string CONTRACTOR { get { return ".CONTRACTOR."; } private set { } }
		public static string SUBCONTRACTOR { get { return ".SUBCONTRACTOR."; } private set { } }
		public static string ARCHITECT { get { return ".ARCHITECT."; } private set { } }
		public static string STRUCTURALENGINEER { get { return ".STRUCTURALENGINEER."; } private set { } }
		public static string COSTENGINEER { get { return ".COSTENGINEER."; } private set { } }
		public static string CLIENT { get { return ".CLIENT."; } private set { } }
		public static string BUILDINGOWNER { get { return ".BUILDINGOWNER."; } private set { } }
		public static string BUILDINGOPERATOR { get { return ".BUILDINGOPERATOR."; } private set { } }
		public static string MECHANICALENGINEER { get { return ".MECHANICALENGINEER."; } private set { } }
		public static string ELECTRICALENGINEER { get { return ".ELECTRICALENGINEER."; } private set { } }
		public static string PROJECTMANAGER { get { return ".PROJECTMANAGER."; } private set { } }
		public static string FACILITIESMANAGER { get { return ".FACILITIESMANAGER."; } private set { } }
		public static string CIVILENGINEER { get { return ".CIVILENGINEER."; } private set { } }
		public static string COMMISSIONINGENGINEER { get { return ".COMMISSIONINGENGINEER."; } private set { } }
		public static string ENGINEER { get { return ".ENGINEER."; } private set { } }
		public static string OWNER { get { return ".OWNER."; } private set { } }
		public static string CONSULTANT { get { return ".CONSULTANT."; } private set { } }
		public static string CONSTRUCTIONMANAGER { get { return ".CONSTRUCTIONMANAGER."; } private set { } }
		public static string FIELDCONSTRUCTIONMANAGER { get { return ".FIELDCONSTRUCTIONMANAGER."; } private set { } }
		public static string RESELLER { get { return ".RESELLER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcRoleEnum() { Value = ".SUPPLIER.";}
		public IfcRoleEnum(string value) { Value = value; }
		public static implicit operator IfcRoleEnum(string value) { return new IfcRoleEnum(value);}
		public static implicit operator string(IfcRoleEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRoofTypeEnum = ENUMERATION OF
	/// (FLAT_ROOF
	/// ,SHED_ROOF
	/// ,GABLE_ROOF
	/// ,HIP_ROOF
	/// ,HIPPED_GABLE_ROOF
	/// ,GAMBREL_ROOF
	/// ,MANSARD_ROOF
	/// ,BARREL_ROOF
	/// ,RAINBOW_ROOF
	/// ,BUTTERFLY_ROOF
	/// ,PAVILION_ROOF
	/// ,DOME_ROOF
	/// ,FREEFORM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcRoofTypeEnum: Global.IfcRoofTypeEnum
	{
		public static string FLAT_ROOF { get { return ".FLAT_ROOF."; } private set { } }
		public static string SHED_ROOF { get { return ".SHED_ROOF."; } private set { } }
		public static string GABLE_ROOF { get { return ".GABLE_ROOF."; } private set { } }
		public static string HIP_ROOF { get { return ".HIP_ROOF."; } private set { } }
		public static string HIPPED_GABLE_ROOF { get { return ".HIPPED_GABLE_ROOF."; } private set { } }
		public static string GAMBREL_ROOF { get { return ".GAMBREL_ROOF."; } private set { } }
		public static string MANSARD_ROOF { get { return ".MANSARD_ROOF."; } private set { } }
		public static string BARREL_ROOF { get { return ".BARREL_ROOF."; } private set { } }
		public static string RAINBOW_ROOF { get { return ".RAINBOW_ROOF."; } private set { } }
		public static string BUTTERFLY_ROOF { get { return ".BUTTERFLY_ROOF."; } private set { } }
		public static string PAVILION_ROOF { get { return ".PAVILION_ROOF."; } private set { } }
		public static string DOME_ROOF { get { return ".DOME_ROOF."; } private set { } }
		public static string FREEFORM { get { return ".FREEFORM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcRoofTypeEnum() { Value = ".FLAT_ROOF.";}
		public IfcRoofTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRoofTypeEnum(string value) { return new IfcRoofTypeEnum(value);}
		public static implicit operator string(IfcRoofTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSIPrefix = ENUMERATION OF
	/// (EXA
	/// ,PETA
	/// ,TERA
	/// ,GIGA
	/// ,MEGA
	/// ,KILO
	/// ,HECTO
	/// ,DECA
	/// ,DECI
	/// ,CENTI
	/// ,MILLI
	/// ,MICRO
	/// ,NANO
	/// ,PICO
	/// ,FEMTO
	/// ,ATTO);
	/// END_TYPE;
	/// <summary>
	public class IfcSIPrefix: Global.IfcSIPrefix
	{
		public static string EXA { get { return ".EXA."; } private set { } }
		public static string PETA { get { return ".PETA."; } private set { } }
		public static string TERA { get { return ".TERA."; } private set { } }
		public static string GIGA { get { return ".GIGA."; } private set { } }
		public static string MEGA { get { return ".MEGA."; } private set { } }
		public static string KILO { get { return ".KILO."; } private set { } }
		public static string HECTO { get { return ".HECTO."; } private set { } }
		public static string DECA { get { return ".DECA."; } private set { } }
		public static string DECI { get { return ".DECI."; } private set { } }
		public static string CENTI { get { return ".CENTI."; } private set { } }
		public static string MILLI { get { return ".MILLI."; } private set { } }
		public static string MICRO { get { return ".MICRO."; } private set { } }
		public static string NANO { get { return ".NANO."; } private set { } }
		public static string PICO { get { return ".PICO."; } private set { } }
		public static string FEMTO { get { return ".FEMTO."; } private set { } }
		public static string ATTO { get { return ".ATTO."; } private set { } }
		public string Value {get; set;}
		public IfcSIPrefix() { Value = ".EXA.";}
		public IfcSIPrefix(string value) { Value = value; }
		public static implicit operator IfcSIPrefix(string value) { return new IfcSIPrefix(value);}
		public static implicit operator string(IfcSIPrefix value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSIUnitName = ENUMERATION OF
	/// (AMPERE
	/// ,BECQUEREL
	/// ,CANDELA
	/// ,COULOMB
	/// ,CUBIC_METRE
	/// ,DEGREE_CELSIUS
	/// ,FARAD
	/// ,GRAM
	/// ,GRAY
	/// ,HENRY
	/// ,HERTZ
	/// ,JOULE
	/// ,KELVIN
	/// ,LUMEN
	/// ,LUX
	/// ,METRE
	/// ,MOLE
	/// ,NEWTON
	/// ,OHM
	/// ,PASCAL
	/// ,RADIAN
	/// ,SECOND
	/// ,SIEMENS
	/// ,SIEVERT
	/// ,SQUARE_METRE
	/// ,STERADIAN
	/// ,TESLA
	/// ,VOLT
	/// ,WATT
	/// ,WEBER);
	/// END_TYPE;
	/// <summary>
	public class IfcSIUnitName: Global.IfcSIUnitName
	{
		public static string AMPERE { get { return ".AMPERE."; } private set { } }
		public static string BECQUEREL { get { return ".BECQUEREL."; } private set { } }
		public static string CANDELA { get { return ".CANDELA."; } private set { } }
		public static string COULOMB { get { return ".COULOMB."; } private set { } }
		public static string CUBIC_METRE { get { return ".CUBIC_METRE."; } private set { } }
		public static string DEGREE_CELSIUS { get { return ".DEGREE_CELSIUS."; } private set { } }
		public static string FARAD { get { return ".FARAD."; } private set { } }
		public static string GRAM { get { return ".GRAM."; } private set { } }
		public static string GRAY { get { return ".GRAY."; } private set { } }
		public static string HENRY { get { return ".HENRY."; } private set { } }
		public static string HERTZ { get { return ".HERTZ."; } private set { } }
		public static string JOULE { get { return ".JOULE."; } private set { } }
		public static string KELVIN { get { return ".KELVIN."; } private set { } }
		public static string LUMEN { get { return ".LUMEN."; } private set { } }
		public static string LUX { get { return ".LUX."; } private set { } }
		public static string METRE { get { return ".METRE."; } private set { } }
		public static string MOLE { get { return ".MOLE."; } private set { } }
		public static string NEWTON { get { return ".NEWTON."; } private set { } }
		public static string OHM { get { return ".OHM."; } private set { } }
		public static string PASCAL { get { return ".PASCAL."; } private set { } }
		public static string RADIAN { get { return ".RADIAN."; } private set { } }
		public static string SECOND { get { return ".SECOND."; } private set { } }
		public static string SIEMENS { get { return ".SIEMENS."; } private set { } }
		public static string SIEVERT { get { return ".SIEVERT."; } private set { } }
		public static string SQUARE_METRE { get { return ".SQUARE_METRE."; } private set { } }
		public static string STERADIAN { get { return ".STERADIAN."; } private set { } }
		public static string TESLA { get { return ".TESLA."; } private set { } }
		public static string VOLT { get { return ".VOLT."; } private set { } }
		public static string WATT { get { return ".WATT."; } private set { } }
		public static string WEBER { get { return ".WEBER."; } private set { } }
		public string Value {get; set;}
		public IfcSIUnitName() { Value = ".AMPERE.";}
		public IfcSIUnitName(string value) { Value = value; }
		public static implicit operator IfcSIUnitName(string value) { return new IfcSIUnitName(value);}
		public static implicit operator string(IfcSIUnitName value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSanitaryTerminalTypeEnum = ENUMERATION OF
	/// (BATH
	/// ,BIDET
	/// ,CISTERN
	/// ,SHOWER
	/// ,SINK
	/// ,SANITARYFOUNTAIN
	/// ,TOILETPAN
	/// ,URINAL
	/// ,WASHHANDBASIN
	/// ,WCSEAT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSanitaryTerminalTypeEnum: Global.IfcSanitaryTerminalTypeEnum
	{
		public static string BATH { get { return ".BATH."; } private set { } }
		public static string BIDET { get { return ".BIDET."; } private set { } }
		public static string CISTERN { get { return ".CISTERN."; } private set { } }
		public static string SHOWER { get { return ".SHOWER."; } private set { } }
		public static string SINK { get { return ".SINK."; } private set { } }
		public static string SANITARYFOUNTAIN { get { return ".SANITARYFOUNTAIN."; } private set { } }
		public static string TOILETPAN { get { return ".TOILETPAN."; } private set { } }
		public static string URINAL { get { return ".URINAL."; } private set { } }
		public static string WASHHANDBASIN { get { return ".WASHHANDBASIN."; } private set { } }
		public static string WCSEAT { get { return ".WCSEAT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSanitaryTerminalTypeEnum() { Value = ".BATH.";}
		public IfcSanitaryTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSanitaryTerminalTypeEnum(string value) { return new IfcSanitaryTerminalTypeEnum(value);}
		public static implicit operator string(IfcSanitaryTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSectionTypeEnum = ENUMERATION OF
	/// (UNIFORM
	/// ,TAPERED);
	/// END_TYPE;
	/// <summary>
	public class IfcSectionTypeEnum: Global.IfcSectionTypeEnum
	{
		public static string UNIFORM { get { return ".UNIFORM."; } private set { } }
		public static string TAPERED { get { return ".TAPERED."; } private set { } }
		public string Value {get; set;}
		public IfcSectionTypeEnum() { Value = ".UNIFORM.";}
		public IfcSectionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSectionTypeEnum(string value) { return new IfcSectionTypeEnum(value);}
		public static implicit operator string(IfcSectionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSensorTypeEnum = ENUMERATION OF
	/// (COSENSOR
	/// ,CO2SENSOR
	/// ,CONDUCTANCESENSOR
	/// ,CONTACTSENSOR
	/// ,FIRESENSOR
	/// ,FLOWSENSOR
	/// ,FROSTSENSOR
	/// ,GASSENSOR
	/// ,HEATSENSOR
	/// ,HUMIDITYSENSOR
	/// ,IDENTIFIERSENSOR
	/// ,IONCONCENTRATIONSENSOR
	/// ,LEVELSENSOR
	/// ,LIGHTSENSOR
	/// ,MOISTURESENSOR
	/// ,MOVEMENTSENSOR
	/// ,PHSENSOR
	/// ,PRESSURESENSOR
	/// ,RADIATIONSENSOR
	/// ,RADIOACTIVITYSENSOR
	/// ,SMOKESENSOR
	/// ,SOUNDSENSOR
	/// ,TEMPERATURESENSOR
	/// ,WINDSENSOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSensorTypeEnum: Global.IfcSensorTypeEnum
	{
		public static string COSENSOR { get { return ".COSENSOR."; } private set { } }
		public static string CO2SENSOR { get { return ".CO2SENSOR."; } private set { } }
		public static string CONDUCTANCESENSOR { get { return ".CONDUCTANCESENSOR."; } private set { } }
		public static string CONTACTSENSOR { get { return ".CONTACTSENSOR."; } private set { } }
		public static string FIRESENSOR { get { return ".FIRESENSOR."; } private set { } }
		public static string FLOWSENSOR { get { return ".FLOWSENSOR."; } private set { } }
		public static string FROSTSENSOR { get { return ".FROSTSENSOR."; } private set { } }
		public static string GASSENSOR { get { return ".GASSENSOR."; } private set { } }
		public static string HEATSENSOR { get { return ".HEATSENSOR."; } private set { } }
		public static string HUMIDITYSENSOR { get { return ".HUMIDITYSENSOR."; } private set { } }
		public static string IDENTIFIERSENSOR { get { return ".IDENTIFIERSENSOR."; } private set { } }
		public static string IONCONCENTRATIONSENSOR { get { return ".IONCONCENTRATIONSENSOR."; } private set { } }
		public static string LEVELSENSOR { get { return ".LEVELSENSOR."; } private set { } }
		public static string LIGHTSENSOR { get { return ".LIGHTSENSOR."; } private set { } }
		public static string MOISTURESENSOR { get { return ".MOISTURESENSOR."; } private set { } }
		public static string MOVEMENTSENSOR { get { return ".MOVEMENTSENSOR."; } private set { } }
		public static string PHSENSOR { get { return ".PHSENSOR."; } private set { } }
		public static string PRESSURESENSOR { get { return ".PRESSURESENSOR."; } private set { } }
		public static string RADIATIONSENSOR { get { return ".RADIATIONSENSOR."; } private set { } }
		public static string RADIOACTIVITYSENSOR { get { return ".RADIOACTIVITYSENSOR."; } private set { } }
		public static string SMOKESENSOR { get { return ".SMOKESENSOR."; } private set { } }
		public static string SOUNDSENSOR { get { return ".SOUNDSENSOR."; } private set { } }
		public static string TEMPERATURESENSOR { get { return ".TEMPERATURESENSOR."; } private set { } }
		public static string WINDSENSOR { get { return ".WINDSENSOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSensorTypeEnum() { Value = ".COSENSOR.";}
		public IfcSensorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSensorTypeEnum(string value) { return new IfcSensorTypeEnum(value);}
		public static implicit operator string(IfcSensorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSequenceEnum = ENUMERATION OF
	/// (START_START
	/// ,START_FINISH
	/// ,FINISH_START
	/// ,FINISH_FINISH
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSequenceEnum: Global.IfcSequenceEnum
	{
		public static string START_START { get { return ".START_START."; } private set { } }
		public static string START_FINISH { get { return ".START_FINISH."; } private set { } }
		public static string FINISH_START { get { return ".FINISH_START."; } private set { } }
		public static string FINISH_FINISH { get { return ".FINISH_FINISH."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSequenceEnum() { Value = ".START_START.";}
		public IfcSequenceEnum(string value) { Value = value; }
		public static implicit operator IfcSequenceEnum(string value) { return new IfcSequenceEnum(value);}
		public static implicit operator string(IfcSequenceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcShadingDeviceTypeEnum = ENUMERATION OF
	/// (JALOUSIE
	/// ,SHUTTER
	/// ,AWNING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcShadingDeviceTypeEnum: Global.IfcShadingDeviceTypeEnum
	{
		public static string JALOUSIE { get { return ".JALOUSIE."; } private set { } }
		public static string SHUTTER { get { return ".SHUTTER."; } private set { } }
		public static string AWNING { get { return ".AWNING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcShadingDeviceTypeEnum() { Value = ".JALOUSIE.";}
		public IfcShadingDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcShadingDeviceTypeEnum(string value) { return new IfcShadingDeviceTypeEnum(value);}
		public static implicit operator string(IfcShadingDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSimplePropertyTemplateTypeEnum = ENUMERATION OF
	/// (P_SINGLEVALUE
	/// ,P_ENUMERATEDVALUE
	/// ,P_BOUNDEDVALUE
	/// ,P_LISTVALUE
	/// ,P_TABLEVALUE
	/// ,P_REFERENCEVALUE
	/// ,Q_LENGTH
	/// ,Q_AREA
	/// ,Q_VOLUME
	/// ,Q_COUNT
	/// ,Q_WEIGHT
	/// ,Q_TIME);
	/// END_TYPE;
	/// <summary>
	public class IfcSimplePropertyTemplateTypeEnum: Global.IfcSimplePropertyTemplateTypeEnum
	{
		public static string P_SINGLEVALUE { get { return ".P_SINGLEVALUE."; } private set { } }
		public static string P_ENUMERATEDVALUE { get { return ".P_ENUMERATEDVALUE."; } private set { } }
		public static string P_BOUNDEDVALUE { get { return ".P_BOUNDEDVALUE."; } private set { } }
		public static string P_LISTVALUE { get { return ".P_LISTVALUE."; } private set { } }
		public static string P_TABLEVALUE { get { return ".P_TABLEVALUE."; } private set { } }
		public static string P_REFERENCEVALUE { get { return ".P_REFERENCEVALUE."; } private set { } }
		public static string Q_LENGTH { get { return ".Q_LENGTH."; } private set { } }
		public static string Q_AREA { get { return ".Q_AREA."; } private set { } }
		public static string Q_VOLUME { get { return ".Q_VOLUME."; } private set { } }
		public static string Q_COUNT { get { return ".Q_COUNT."; } private set { } }
		public static string Q_WEIGHT { get { return ".Q_WEIGHT."; } private set { } }
		public static string Q_TIME { get { return ".Q_TIME."; } private set { } }
		public string Value {get; set;}
		public IfcSimplePropertyTemplateTypeEnum() { Value = ".P_SINGLEVALUE.";}
		public IfcSimplePropertyTemplateTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSimplePropertyTemplateTypeEnum(string value) { return new IfcSimplePropertyTemplateTypeEnum(value);}
		public static implicit operator string(IfcSimplePropertyTemplateTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSlabTypeEnum = ENUMERATION OF
	/// (FLOOR
	/// ,ROOF
	/// ,LANDING
	/// ,BASESLAB
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSlabTypeEnum: Global.IfcSlabTypeEnum
	{
		public static string FLOOR { get { return ".FLOOR."; } private set { } }
		public static string ROOF { get { return ".ROOF."; } private set { } }
		public static string LANDING { get { return ".LANDING."; } private set { } }
		public static string BASESLAB { get { return ".BASESLAB."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSlabTypeEnum() { Value = ".FLOOR.";}
		public IfcSlabTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSlabTypeEnum(string value) { return new IfcSlabTypeEnum(value);}
		public static implicit operator string(IfcSlabTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSolarDeviceTypeEnum = ENUMERATION OF
	/// (SOLARCOLLECTOR
	/// ,SOLARPANEL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSolarDeviceTypeEnum: Global.IfcSolarDeviceTypeEnum
	{
		public static string SOLARCOLLECTOR { get { return ".SOLARCOLLECTOR."; } private set { } }
		public static string SOLARPANEL { get { return ".SOLARPANEL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSolarDeviceTypeEnum() { Value = ".SOLARCOLLECTOR.";}
		public IfcSolarDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSolarDeviceTypeEnum(string value) { return new IfcSolarDeviceTypeEnum(value);}
		public static implicit operator string(IfcSolarDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpaceHeaterTypeEnum = ENUMERATION OF
	/// (CONVECTOR
	/// ,RADIATOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSpaceHeaterTypeEnum: Global.IfcSpaceHeaterTypeEnum
	{
		public static string CONVECTOR { get { return ".CONVECTOR."; } private set { } }
		public static string RADIATOR { get { return ".RADIATOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSpaceHeaterTypeEnum() { Value = ".CONVECTOR.";}
		public IfcSpaceHeaterTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSpaceHeaterTypeEnum(string value) { return new IfcSpaceHeaterTypeEnum(value);}
		public static implicit operator string(IfcSpaceHeaterTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpaceTypeEnum = ENUMERATION OF
	/// (SPACE
	/// ,PARKING
	/// ,GFA
	/// ,INTERNAL
	/// ,EXTERNAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSpaceTypeEnum: Global.IfcSpaceTypeEnum
	{
		public static string SPACE { get { return ".SPACE."; } private set { } }
		public static string PARKING { get { return ".PARKING."; } private set { } }
		public static string GFA { get { return ".GFA."; } private set { } }
		public static string INTERNAL { get { return ".INTERNAL."; } private set { } }
		public static string EXTERNAL { get { return ".EXTERNAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSpaceTypeEnum() { Value = ".SPACE.";}
		public IfcSpaceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSpaceTypeEnum(string value) { return new IfcSpaceTypeEnum(value);}
		public static implicit operator string(IfcSpaceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpatialZoneTypeEnum = ENUMERATION OF
	/// (CONSTRUCTION
	/// ,FIRESAFETY
	/// ,LIGHTING
	/// ,OCCUPANCY
	/// ,SECURITY
	/// ,THERMAL
	/// ,TRANSPORT
	/// ,VENTILATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSpatialZoneTypeEnum: Global.IfcSpatialZoneTypeEnum
	{
		public static string CONSTRUCTION { get { return ".CONSTRUCTION."; } private set { } }
		public static string FIRESAFETY { get { return ".FIRESAFETY."; } private set { } }
		public static string LIGHTING { get { return ".LIGHTING."; } private set { } }
		public static string OCCUPANCY { get { return ".OCCUPANCY."; } private set { } }
		public static string SECURITY { get { return ".SECURITY."; } private set { } }
		public static string THERMAL { get { return ".THERMAL."; } private set { } }
		public static string TRANSPORT { get { return ".TRANSPORT."; } private set { } }
		public static string VENTILATION { get { return ".VENTILATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSpatialZoneTypeEnum() { Value = ".CONSTRUCTION.";}
		public IfcSpatialZoneTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSpatialZoneTypeEnum(string value) { return new IfcSpatialZoneTypeEnum(value);}
		public static implicit operator string(IfcSpatialZoneTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStackTerminalTypeEnum = ENUMERATION OF
	/// (BIRDCAGE
	/// ,COWL
	/// ,RAINWATERHOPPER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStackTerminalTypeEnum: Global.IfcStackTerminalTypeEnum
	{
		public static string BIRDCAGE { get { return ".BIRDCAGE."; } private set { } }
		public static string COWL { get { return ".COWL."; } private set { } }
		public static string RAINWATERHOPPER { get { return ".RAINWATERHOPPER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStackTerminalTypeEnum() { Value = ".BIRDCAGE.";}
		public IfcStackTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStackTerminalTypeEnum(string value) { return new IfcStackTerminalTypeEnum(value);}
		public static implicit operator string(IfcStackTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStairFlightTypeEnum = ENUMERATION OF
	/// (STRAIGHT
	/// ,WINDER
	/// ,SPIRAL
	/// ,CURVED
	/// ,FREEFORM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStairFlightTypeEnum: Global.IfcStairFlightTypeEnum
	{
		public static string STRAIGHT { get { return ".STRAIGHT."; } private set { } }
		public static string WINDER { get { return ".WINDER."; } private set { } }
		public static string SPIRAL { get { return ".SPIRAL."; } private set { } }
		public static string CURVED { get { return ".CURVED."; } private set { } }
		public static string FREEFORM { get { return ".FREEFORM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStairFlightTypeEnum() { Value = ".STRAIGHT.";}
		public IfcStairFlightTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStairFlightTypeEnum(string value) { return new IfcStairFlightTypeEnum(value);}
		public static implicit operator string(IfcStairFlightTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStairTypeEnum = ENUMERATION OF
	/// (STRAIGHT_RUN_STAIR
	/// ,TWO_STRAIGHT_RUN_STAIR
	/// ,QUARTER_WINDING_STAIR
	/// ,QUARTER_TURN_STAIR
	/// ,HALF_WINDING_STAIR
	/// ,HALF_TURN_STAIR
	/// ,TWO_QUARTER_WINDING_STAIR
	/// ,TWO_QUARTER_TURN_STAIR
	/// ,THREE_QUARTER_WINDING_STAIR
	/// ,THREE_QUARTER_TURN_STAIR
	/// ,SPIRAL_STAIR
	/// ,DOUBLE_RETURN_STAIR
	/// ,CURVED_RUN_STAIR
	/// ,TWO_CURVED_RUN_STAIR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStairTypeEnum: Global.IfcStairTypeEnum
	{
		public static string STRAIGHT_RUN_STAIR { get { return ".STRAIGHT_RUN_STAIR."; } private set { } }
		public static string TWO_STRAIGHT_RUN_STAIR { get { return ".TWO_STRAIGHT_RUN_STAIR."; } private set { } }
		public static string QUARTER_WINDING_STAIR { get { return ".QUARTER_WINDING_STAIR."; } private set { } }
		public static string QUARTER_TURN_STAIR { get { return ".QUARTER_TURN_STAIR."; } private set { } }
		public static string HALF_WINDING_STAIR { get { return ".HALF_WINDING_STAIR."; } private set { } }
		public static string HALF_TURN_STAIR { get { return ".HALF_TURN_STAIR."; } private set { } }
		public static string TWO_QUARTER_WINDING_STAIR { get { return ".TWO_QUARTER_WINDING_STAIR."; } private set { } }
		public static string TWO_QUARTER_TURN_STAIR { get { return ".TWO_QUARTER_TURN_STAIR."; } private set { } }
		public static string THREE_QUARTER_WINDING_STAIR { get { return ".THREE_QUARTER_WINDING_STAIR."; } private set { } }
		public static string THREE_QUARTER_TURN_STAIR { get { return ".THREE_QUARTER_TURN_STAIR."; } private set { } }
		public static string SPIRAL_STAIR { get { return ".SPIRAL_STAIR."; } private set { } }
		public static string DOUBLE_RETURN_STAIR { get { return ".DOUBLE_RETURN_STAIR."; } private set { } }
		public static string CURVED_RUN_STAIR { get { return ".CURVED_RUN_STAIR."; } private set { } }
		public static string TWO_CURVED_RUN_STAIR { get { return ".TWO_CURVED_RUN_STAIR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStairTypeEnum() { Value = ".STRAIGHT_RUN_STAIR.";}
		public IfcStairTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStairTypeEnum(string value) { return new IfcStairTypeEnum(value);}
		public static implicit operator string(IfcStairTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStateEnum = ENUMERATION OF
	/// (READWRITE
	/// ,READONLY
	/// ,LOCKED
	/// ,READWRITELOCKED
	/// ,READONLYLOCKED);
	/// END_TYPE;
	/// <summary>
	public class IfcStateEnum: Global.IfcStateEnum
	{
		public static string READWRITE { get { return ".READWRITE."; } private set { } }
		public static string READONLY { get { return ".READONLY."; } private set { } }
		public static string LOCKED { get { return ".LOCKED."; } private set { } }
		public static string READWRITELOCKED { get { return ".READWRITELOCKED."; } private set { } }
		public static string READONLYLOCKED { get { return ".READONLYLOCKED."; } private set { } }
		public string Value {get; set;}
		public IfcStateEnum() { Value = ".READWRITE.";}
		public IfcStateEnum(string value) { Value = value; }
		public static implicit operator IfcStateEnum(string value) { return new IfcStateEnum(value);}
		public static implicit operator string(IfcStateEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStructuralCurveActivityTypeEnum = ENUMERATION OF
	/// (CONST
	/// ,LINEAR
	/// ,POLYGONAL
	/// ,EQUIDISTANT
	/// ,SINUS
	/// ,PARABOLA
	/// ,DISCRETE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStructuralCurveActivityTypeEnum: Global.IfcStructuralCurveActivityTypeEnum
	{
		public static string CONST { get { return ".CONST."; } private set { } }
		public static string LINEAR { get { return ".LINEAR."; } private set { } }
		public static string POLYGONAL { get { return ".POLYGONAL."; } private set { } }
		public static string EQUIDISTANT { get { return ".EQUIDISTANT."; } private set { } }
		public static string SINUS { get { return ".SINUS."; } private set { } }
		public static string PARABOLA { get { return ".PARABOLA."; } private set { } }
		public static string DISCRETE { get { return ".DISCRETE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStructuralCurveActivityTypeEnum() { Value = ".CONST.";}
		public IfcStructuralCurveActivityTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStructuralCurveActivityTypeEnum(string value) { return new IfcStructuralCurveActivityTypeEnum(value);}
		public static implicit operator string(IfcStructuralCurveActivityTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStructuralCurveMemberTypeEnum = ENUMERATION OF
	/// (RIGID_JOINED_MEMBER
	/// ,PIN_JOINED_MEMBER
	/// ,CABLE
	/// ,TENSION_MEMBER
	/// ,COMPRESSION_MEMBER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStructuralCurveMemberTypeEnum: Global.IfcStructuralCurveMemberTypeEnum
	{
		public static string RIGID_JOINED_MEMBER { get { return ".RIGID_JOINED_MEMBER."; } private set { } }
		public static string PIN_JOINED_MEMBER { get { return ".PIN_JOINED_MEMBER."; } private set { } }
		public static string CABLE { get { return ".CABLE."; } private set { } }
		public static string TENSION_MEMBER { get { return ".TENSION_MEMBER."; } private set { } }
		public static string COMPRESSION_MEMBER { get { return ".COMPRESSION_MEMBER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStructuralCurveMemberTypeEnum() { Value = ".RIGID_JOINED_MEMBER.";}
		public IfcStructuralCurveMemberTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStructuralCurveMemberTypeEnum(string value) { return new IfcStructuralCurveMemberTypeEnum(value);}
		public static implicit operator string(IfcStructuralCurveMemberTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStructuralSurfaceActivityTypeEnum = ENUMERATION OF
	/// (CONST
	/// ,BILINEAR
	/// ,DISCRETE
	/// ,ISOCONTOUR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStructuralSurfaceActivityTypeEnum: Global.IfcStructuralSurfaceActivityTypeEnum
	{
		public static string CONST { get { return ".CONST."; } private set { } }
		public static string BILINEAR { get { return ".BILINEAR."; } private set { } }
		public static string DISCRETE { get { return ".DISCRETE."; } private set { } }
		public static string ISOCONTOUR { get { return ".ISOCONTOUR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStructuralSurfaceActivityTypeEnum() { Value = ".CONST.";}
		public IfcStructuralSurfaceActivityTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStructuralSurfaceActivityTypeEnum(string value) { return new IfcStructuralSurfaceActivityTypeEnum(value);}
		public static implicit operator string(IfcStructuralSurfaceActivityTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStructuralSurfaceMemberTypeEnum = ENUMERATION OF
	/// (BENDING_ELEMENT
	/// ,MEMBRANE_ELEMENT
	/// ,SHELL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStructuralSurfaceMemberTypeEnum: Global.IfcStructuralSurfaceMemberTypeEnum
	{
		public static string BENDING_ELEMENT { get { return ".BENDING_ELEMENT."; } private set { } }
		public static string MEMBRANE_ELEMENT { get { return ".MEMBRANE_ELEMENT."; } private set { } }
		public static string SHELL { get { return ".SHELL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStructuralSurfaceMemberTypeEnum() { Value = ".BENDING_ELEMENT.";}
		public IfcStructuralSurfaceMemberTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStructuralSurfaceMemberTypeEnum(string value) { return new IfcStructuralSurfaceMemberTypeEnum(value);}
		public static implicit operator string(IfcStructuralSurfaceMemberTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSubContractResourceTypeEnum = ENUMERATION OF
	/// (PURCHASE
	/// ,WORK
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSubContractResourceTypeEnum: Global.IfcSubContractResourceTypeEnum
	{
		public static string PURCHASE { get { return ".PURCHASE."; } private set { } }
		public static string WORK { get { return ".WORK."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSubContractResourceTypeEnum() { Value = ".PURCHASE.";}
		public IfcSubContractResourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSubContractResourceTypeEnum(string value) { return new IfcSubContractResourceTypeEnum(value);}
		public static implicit operator string(IfcSubContractResourceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSurfaceFeatureTypeEnum = ENUMERATION OF
	/// (MARK
	/// ,TAG
	/// ,TREATMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSurfaceFeatureTypeEnum: Global.IfcSurfaceFeatureTypeEnum
	{
		public static string MARK { get { return ".MARK."; } private set { } }
		public static string TAG { get { return ".TAG."; } private set { } }
		public static string TREATMENT { get { return ".TREATMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSurfaceFeatureTypeEnum() { Value = ".MARK.";}
		public IfcSurfaceFeatureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSurfaceFeatureTypeEnum(string value) { return new IfcSurfaceFeatureTypeEnum(value);}
		public static implicit operator string(IfcSurfaceFeatureTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSurfaceSide = ENUMERATION OF
	/// (POSITIVE
	/// ,NEGATIVE
	/// ,BOTH);
	/// END_TYPE;
	/// <summary>
	public class IfcSurfaceSide: Global.IfcSurfaceSide
	{
		public static string POSITIVE { get { return ".POSITIVE."; } private set { } }
		public static string NEGATIVE { get { return ".NEGATIVE."; } private set { } }
		public static string BOTH { get { return ".BOTH."; } private set { } }
		public string Value {get; set;}
		public IfcSurfaceSide() { Value = ".POSITIVE.";}
		public IfcSurfaceSide(string value) { Value = value; }
		public static implicit operator IfcSurfaceSide(string value) { return new IfcSurfaceSide(value);}
		public static implicit operator string(IfcSurfaceSide value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSwitchingDeviceTypeEnum = ENUMERATION OF
	/// (CONTACTOR
	/// ,DIMMERSWITCH
	/// ,EMERGENCYSTOP
	/// ,KEYPAD
	/// ,MOMENTARYSWITCH
	/// ,SELECTORSWITCH
	/// ,STARTER
	/// ,SWITCHDISCONNECTOR
	/// ,TOGGLESWITCH
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSwitchingDeviceTypeEnum: Global.IfcSwitchingDeviceTypeEnum
	{
		public static string CONTACTOR { get { return ".CONTACTOR."; } private set { } }
		public static string DIMMERSWITCH { get { return ".DIMMERSWITCH."; } private set { } }
		public static string EMERGENCYSTOP { get { return ".EMERGENCYSTOP."; } private set { } }
		public static string KEYPAD { get { return ".KEYPAD."; } private set { } }
		public static string MOMENTARYSWITCH { get { return ".MOMENTARYSWITCH."; } private set { } }
		public static string SELECTORSWITCH { get { return ".SELECTORSWITCH."; } private set { } }
		public static string STARTER { get { return ".STARTER."; } private set { } }
		public static string SWITCHDISCONNECTOR { get { return ".SWITCHDISCONNECTOR."; } private set { } }
		public static string TOGGLESWITCH { get { return ".TOGGLESWITCH."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSwitchingDeviceTypeEnum() { Value = ".CONTACTOR.";}
		public IfcSwitchingDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSwitchingDeviceTypeEnum(string value) { return new IfcSwitchingDeviceTypeEnum(value);}
		public static implicit operator string(IfcSwitchingDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSystemFurnitureElementTypeEnum = ENUMERATION OF
	/// (PANEL
	/// ,WORKSURFACE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSystemFurnitureElementTypeEnum: Global.IfcSystemFurnitureElementTypeEnum
	{
		public static string PANEL { get { return ".PANEL."; } private set { } }
		public static string WORKSURFACE { get { return ".WORKSURFACE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSystemFurnitureElementTypeEnum() { Value = ".PANEL.";}
		public IfcSystemFurnitureElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSystemFurnitureElementTypeEnum(string value) { return new IfcSystemFurnitureElementTypeEnum(value);}
		public static implicit operator string(IfcSystemFurnitureElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTankTypeEnum = ENUMERATION OF
	/// (BASIN
	/// ,BREAKPRESSURE
	/// ,EXPANSION
	/// ,FEEDANDEXPANSION
	/// ,PRESSUREVESSEL
	/// ,STORAGE
	/// ,VESSEL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTankTypeEnum: Global.IfcTankTypeEnum
	{
		public static string BASIN { get { return ".BASIN."; } private set { } }
		public static string BREAKPRESSURE { get { return ".BREAKPRESSURE."; } private set { } }
		public static string EXPANSION { get { return ".EXPANSION."; } private set { } }
		public static string FEEDANDEXPANSION { get { return ".FEEDANDEXPANSION."; } private set { } }
		public static string PRESSUREVESSEL { get { return ".PRESSUREVESSEL."; } private set { } }
		public static string STORAGE { get { return ".STORAGE."; } private set { } }
		public static string VESSEL { get { return ".VESSEL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTankTypeEnum() { Value = ".BASIN.";}
		public IfcTankTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTankTypeEnum(string value) { return new IfcTankTypeEnum(value);}
		public static implicit operator string(IfcTankTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTaskDurationEnum = ENUMERATION OF
	/// (ELAPSEDTIME
	/// ,WORKTIME
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTaskDurationEnum: Global.IfcTaskDurationEnum
	{
		public static string ELAPSEDTIME { get { return ".ELAPSEDTIME."; } private set { } }
		public static string WORKTIME { get { return ".WORKTIME."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTaskDurationEnum() { Value = ".ELAPSEDTIME.";}
		public IfcTaskDurationEnum(string value) { Value = value; }
		public static implicit operator IfcTaskDurationEnum(string value) { return new IfcTaskDurationEnum(value);}
		public static implicit operator string(IfcTaskDurationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTaskTypeEnum = ENUMERATION OF
	/// (ATTENDANCE
	/// ,CONSTRUCTION
	/// ,DEMOLITION
	/// ,DISMANTLE
	/// ,DISPOSAL
	/// ,INSTALLATION
	/// ,LOGISTIC
	/// ,MAINTENANCE
	/// ,MOVE
	/// ,OPERATION
	/// ,REMOVAL
	/// ,RENOVATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTaskTypeEnum: Global.IfcTaskTypeEnum
	{
		public static string ATTENDANCE { get { return ".ATTENDANCE."; } private set { } }
		public static string CONSTRUCTION { get { return ".CONSTRUCTION."; } private set { } }
		public static string DEMOLITION { get { return ".DEMOLITION."; } private set { } }
		public static string DISMANTLE { get { return ".DISMANTLE."; } private set { } }
		public static string DISPOSAL { get { return ".DISPOSAL."; } private set { } }
		public static string INSTALLATION { get { return ".INSTALLATION."; } private set { } }
		public static string LOGISTIC { get { return ".LOGISTIC."; } private set { } }
		public static string MAINTENANCE { get { return ".MAINTENANCE."; } private set { } }
		public static string MOVE { get { return ".MOVE."; } private set { } }
		public static string OPERATION { get { return ".OPERATION."; } private set { } }
		public static string REMOVAL { get { return ".REMOVAL."; } private set { } }
		public static string RENOVATION { get { return ".RENOVATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTaskTypeEnum() { Value = ".ATTENDANCE.";}
		public IfcTaskTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTaskTypeEnum(string value) { return new IfcTaskTypeEnum(value);}
		public static implicit operator string(IfcTaskTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTendonAnchorTypeEnum = ENUMERATION OF
	/// (COUPLER
	/// ,FIXED_END
	/// ,TENSIONING_END
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTendonAnchorTypeEnum: Global.IfcTendonAnchorTypeEnum
	{
		public static string COUPLER { get { return ".COUPLER."; } private set { } }
		public static string FIXED_END { get { return ".FIXED_END."; } private set { } }
		public static string TENSIONING_END { get { return ".TENSIONING_END."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTendonAnchorTypeEnum() { Value = ".COUPLER.";}
		public IfcTendonAnchorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTendonAnchorTypeEnum(string value) { return new IfcTendonAnchorTypeEnum(value);}
		public static implicit operator string(IfcTendonAnchorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTendonTypeEnum = ENUMERATION OF
	/// (BAR
	/// ,COATED
	/// ,STRAND
	/// ,WIRE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTendonTypeEnum: Global.IfcTendonTypeEnum
	{
		public static string BAR { get { return ".BAR."; } private set { } }
		public static string COATED { get { return ".COATED."; } private set { } }
		public static string STRAND { get { return ".STRAND."; } private set { } }
		public static string WIRE { get { return ".WIRE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTendonTypeEnum() { Value = ".BAR.";}
		public IfcTendonTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTendonTypeEnum(string value) { return new IfcTendonTypeEnum(value);}
		public static implicit operator string(IfcTendonTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextPath = ENUMERATION OF
	/// (LEFT
	/// ,RIGHT
	/// ,UP
	/// ,DOWN);
	/// END_TYPE;
	/// <summary>
	public class IfcTextPath: Global.IfcTextPath
	{
		public static string LEFT { get { return ".LEFT."; } private set { } }
		public static string RIGHT { get { return ".RIGHT."; } private set { } }
		public static string UP { get { return ".UP."; } private set { } }
		public static string DOWN { get { return ".DOWN."; } private set { } }
		public string Value {get; set;}
		public IfcTextPath() { Value = ".LEFT.";}
		public IfcTextPath(string value) { Value = value; }
		public static implicit operator IfcTextPath(string value) { return new IfcTextPath(value);}
		public static implicit operator string(IfcTextPath value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTimeSeriesDataTypeEnum = ENUMERATION OF
	/// (CONTINUOUS
	/// ,DISCRETE
	/// ,DISCRETEBINARY
	/// ,PIECEWISEBINARY
	/// ,PIECEWISECONSTANT
	/// ,PIECEWISECONTINUOUS
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTimeSeriesDataTypeEnum: Global.IfcTimeSeriesDataTypeEnum
	{
		public static string CONTINUOUS { get { return ".CONTINUOUS."; } private set { } }
		public static string DISCRETE { get { return ".DISCRETE."; } private set { } }
		public static string DISCRETEBINARY { get { return ".DISCRETEBINARY."; } private set { } }
		public static string PIECEWISEBINARY { get { return ".PIECEWISEBINARY."; } private set { } }
		public static string PIECEWISECONSTANT { get { return ".PIECEWISECONSTANT."; } private set { } }
		public static string PIECEWISECONTINUOUS { get { return ".PIECEWISECONTINUOUS."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTimeSeriesDataTypeEnum() { Value = ".CONTINUOUS.";}
		public IfcTimeSeriesDataTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTimeSeriesDataTypeEnum(string value) { return new IfcTimeSeriesDataTypeEnum(value);}
		public static implicit operator string(IfcTimeSeriesDataTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTransformerTypeEnum = ENUMERATION OF
	/// (CURRENT
	/// ,FREQUENCY
	/// ,INVERTER
	/// ,RECTIFIER
	/// ,VOLTAGE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTransformerTypeEnum: Global.IfcTransformerTypeEnum
	{
		public static string CURRENT { get { return ".CURRENT."; } private set { } }
		public static string FREQUENCY { get { return ".FREQUENCY."; } private set { } }
		public static string INVERTER { get { return ".INVERTER."; } private set { } }
		public static string RECTIFIER { get { return ".RECTIFIER."; } private set { } }
		public static string VOLTAGE { get { return ".VOLTAGE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTransformerTypeEnum() { Value = ".CURRENT.";}
		public IfcTransformerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTransformerTypeEnum(string value) { return new IfcTransformerTypeEnum(value);}
		public static implicit operator string(IfcTransformerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTransitionCode = ENUMERATION OF
	/// (DISCONTINUOUS
	/// ,CONTINUOUS
	/// ,CONTSAMEGRADIENT
	/// ,CONTSAMEGRADIENTSAMECURVATURE);
	/// END_TYPE;
	/// <summary>
	public class IfcTransitionCode: Global.IfcTransitionCode
	{
		public static string DISCONTINUOUS { get { return ".DISCONTINUOUS."; } private set { } }
		public static string CONTINUOUS { get { return ".CONTINUOUS."; } private set { } }
		public static string CONTSAMEGRADIENT { get { return ".CONTSAMEGRADIENT."; } private set { } }
		public static string CONTSAMEGRADIENTSAMECURVATURE { get { return ".CONTSAMEGRADIENTSAMECURVATURE."; } private set { } }
		public string Value {get; set;}
		public IfcTransitionCode() { Value = ".DISCONTINUOUS.";}
		public IfcTransitionCode(string value) { Value = value; }
		public static implicit operator IfcTransitionCode(string value) { return new IfcTransitionCode(value);}
		public static implicit operator string(IfcTransitionCode value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTransportElementTypeEnum = ENUMERATION OF
	/// (ELEVATOR
	/// ,ESCALATOR
	/// ,MOVINGWALKWAY
	/// ,CRANEWAY
	/// ,LIFTINGGEAR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTransportElementTypeEnum: Global.IfcTransportElementTypeEnum
	{
		public static string ELEVATOR { get { return ".ELEVATOR."; } private set { } }
		public static string ESCALATOR { get { return ".ESCALATOR."; } private set { } }
		public static string MOVINGWALKWAY { get { return ".MOVINGWALKWAY."; } private set { } }
		public static string CRANEWAY { get { return ".CRANEWAY."; } private set { } }
		public static string LIFTINGGEAR { get { return ".LIFTINGGEAR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTransportElementTypeEnum() { Value = ".ELEVATOR.";}
		public IfcTransportElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTransportElementTypeEnum(string value) { return new IfcTransportElementTypeEnum(value);}
		public static implicit operator string(IfcTransportElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTrimmingPreference = ENUMERATION OF
	/// (CARTESIAN
	/// ,PARAMETER
	/// ,UNSPECIFIED);
	/// END_TYPE;
	/// <summary>
	public class IfcTrimmingPreference: Global.IfcTrimmingPreference
	{
		public static string CARTESIAN { get { return ".CARTESIAN."; } private set { } }
		public static string PARAMETER { get { return ".PARAMETER."; } private set { } }
		public static string UNSPECIFIED { get { return ".UNSPECIFIED."; } private set { } }
		public string Value {get; set;}
		public IfcTrimmingPreference() { Value = ".CARTESIAN.";}
		public IfcTrimmingPreference(string value) { Value = value; }
		public static implicit operator IfcTrimmingPreference(string value) { return new IfcTrimmingPreference(value);}
		public static implicit operator string(IfcTrimmingPreference value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTubeBundleTypeEnum = ENUMERATION OF
	/// (FINNED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTubeBundleTypeEnum: Global.IfcTubeBundleTypeEnum
	{
		public static string FINNED { get { return ".FINNED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTubeBundleTypeEnum() { Value = ".FINNED.";}
		public IfcTubeBundleTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTubeBundleTypeEnum(string value) { return new IfcTubeBundleTypeEnum(value);}
		public static implicit operator string(IfcTubeBundleTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcUnitEnum = ENUMERATION OF
	/// (ABSORBEDDOSEUNIT
	/// ,AMOUNTOFSUBSTANCEUNIT
	/// ,AREAUNIT
	/// ,DOSEEQUIVALENTUNIT
	/// ,ELECTRICCAPACITANCEUNIT
	/// ,ELECTRICCHARGEUNIT
	/// ,ELECTRICCONDUCTANCEUNIT
	/// ,ELECTRICCURRENTUNIT
	/// ,ELECTRICRESISTANCEUNIT
	/// ,ELECTRICVOLTAGEUNIT
	/// ,ENERGYUNIT
	/// ,FORCEUNIT
	/// ,FREQUENCYUNIT
	/// ,ILLUMINANCEUNIT
	/// ,INDUCTANCEUNIT
	/// ,LENGTHUNIT
	/// ,LUMINOUSFLUXUNIT
	/// ,LUMINOUSINTENSITYUNIT
	/// ,MAGNETICFLUXDENSITYUNIT
	/// ,MAGNETICFLUXUNIT
	/// ,MASSUNIT
	/// ,PLANEANGLEUNIT
	/// ,POWERUNIT
	/// ,PRESSUREUNIT
	/// ,RADIOACTIVITYUNIT
	/// ,SOLIDANGLEUNIT
	/// ,THERMODYNAMICTEMPERATUREUNIT
	/// ,TIMEUNIT
	/// ,VOLUMEUNIT
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcUnitEnum: Global.IfcUnitEnum
	{
		public static string ABSORBEDDOSEUNIT { get { return ".ABSORBEDDOSEUNIT."; } private set { } }
		public static string AMOUNTOFSUBSTANCEUNIT { get { return ".AMOUNTOFSUBSTANCEUNIT."; } private set { } }
		public static string AREAUNIT { get { return ".AREAUNIT."; } private set { } }
		public static string DOSEEQUIVALENTUNIT { get { return ".DOSEEQUIVALENTUNIT."; } private set { } }
		public static string ELECTRICCAPACITANCEUNIT { get { return ".ELECTRICCAPACITANCEUNIT."; } private set { } }
		public static string ELECTRICCHARGEUNIT { get { return ".ELECTRICCHARGEUNIT."; } private set { } }
		public static string ELECTRICCONDUCTANCEUNIT { get { return ".ELECTRICCONDUCTANCEUNIT."; } private set { } }
		public static string ELECTRICCURRENTUNIT { get { return ".ELECTRICCURRENTUNIT."; } private set { } }
		public static string ELECTRICRESISTANCEUNIT { get { return ".ELECTRICRESISTANCEUNIT."; } private set { } }
		public static string ELECTRICVOLTAGEUNIT { get { return ".ELECTRICVOLTAGEUNIT."; } private set { } }
		public static string ENERGYUNIT { get { return ".ENERGYUNIT."; } private set { } }
		public static string FORCEUNIT { get { return ".FORCEUNIT."; } private set { } }
		public static string FREQUENCYUNIT { get { return ".FREQUENCYUNIT."; } private set { } }
		public static string ILLUMINANCEUNIT { get { return ".ILLUMINANCEUNIT."; } private set { } }
		public static string INDUCTANCEUNIT { get { return ".INDUCTANCEUNIT."; } private set { } }
		public static string LENGTHUNIT { get { return ".LENGTHUNIT."; } private set { } }
		public static string LUMINOUSFLUXUNIT { get { return ".LUMINOUSFLUXUNIT."; } private set { } }
		public static string LUMINOUSINTENSITYUNIT { get { return ".LUMINOUSINTENSITYUNIT."; } private set { } }
		public static string MAGNETICFLUXDENSITYUNIT { get { return ".MAGNETICFLUXDENSITYUNIT."; } private set { } }
		public static string MAGNETICFLUXUNIT { get { return ".MAGNETICFLUXUNIT."; } private set { } }
		public static string MASSUNIT { get { return ".MASSUNIT."; } private set { } }
		public static string PLANEANGLEUNIT { get { return ".PLANEANGLEUNIT."; } private set { } }
		public static string POWERUNIT { get { return ".POWERUNIT."; } private set { } }
		public static string PRESSUREUNIT { get { return ".PRESSUREUNIT."; } private set { } }
		public static string RADIOACTIVITYUNIT { get { return ".RADIOACTIVITYUNIT."; } private set { } }
		public static string SOLIDANGLEUNIT { get { return ".SOLIDANGLEUNIT."; } private set { } }
		public static string THERMODYNAMICTEMPERATUREUNIT { get { return ".THERMODYNAMICTEMPERATUREUNIT."; } private set { } }
		public static string TIMEUNIT { get { return ".TIMEUNIT."; } private set { } }
		public static string VOLUMEUNIT { get { return ".VOLUMEUNIT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcUnitEnum() { Value = ".ABSORBEDDOSEUNIT.";}
		public IfcUnitEnum(string value) { Value = value; }
		public static implicit operator IfcUnitEnum(string value) { return new IfcUnitEnum(value);}
		public static implicit operator string(IfcUnitEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcUnitaryControlElementTypeEnum = ENUMERATION OF
	/// (ALARMPANEL
	/// ,CONTROLPANEL
	/// ,GASDETECTIONPANEL
	/// ,INDICATORPANEL
	/// ,MIMICPANEL
	/// ,HUMIDISTAT
	/// ,THERMOSTAT
	/// ,WEATHERSTATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcUnitaryControlElementTypeEnum: Global.IfcUnitaryControlElementTypeEnum
	{
		public static string ALARMPANEL { get { return ".ALARMPANEL."; } private set { } }
		public static string CONTROLPANEL { get { return ".CONTROLPANEL."; } private set { } }
		public static string GASDETECTIONPANEL { get { return ".GASDETECTIONPANEL."; } private set { } }
		public static string INDICATORPANEL { get { return ".INDICATORPANEL."; } private set { } }
		public static string MIMICPANEL { get { return ".MIMICPANEL."; } private set { } }
		public static string HUMIDISTAT { get { return ".HUMIDISTAT."; } private set { } }
		public static string THERMOSTAT { get { return ".THERMOSTAT."; } private set { } }
		public static string WEATHERSTATION { get { return ".WEATHERSTATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcUnitaryControlElementTypeEnum() { Value = ".ALARMPANEL.";}
		public IfcUnitaryControlElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcUnitaryControlElementTypeEnum(string value) { return new IfcUnitaryControlElementTypeEnum(value);}
		public static implicit operator string(IfcUnitaryControlElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcUnitaryEquipmentTypeEnum = ENUMERATION OF
	/// (AIRHANDLER
	/// ,AIRCONDITIONINGUNIT
	/// ,DEHUMIDIFIER
	/// ,SPLITSYSTEM
	/// ,ROOFTOPUNIT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcUnitaryEquipmentTypeEnum: Global.IfcUnitaryEquipmentTypeEnum
	{
		public static string AIRHANDLER { get { return ".AIRHANDLER."; } private set { } }
		public static string AIRCONDITIONINGUNIT { get { return ".AIRCONDITIONINGUNIT."; } private set { } }
		public static string DEHUMIDIFIER { get { return ".DEHUMIDIFIER."; } private set { } }
		public static string SPLITSYSTEM { get { return ".SPLITSYSTEM."; } private set { } }
		public static string ROOFTOPUNIT { get { return ".ROOFTOPUNIT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcUnitaryEquipmentTypeEnum() { Value = ".AIRHANDLER.";}
		public IfcUnitaryEquipmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcUnitaryEquipmentTypeEnum(string value) { return new IfcUnitaryEquipmentTypeEnum(value);}
		public static implicit operator string(IfcUnitaryEquipmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcValveTypeEnum = ENUMERATION OF
	/// (AIRRELEASE
	/// ,ANTIVACUUM
	/// ,CHANGEOVER
	/// ,CHECK
	/// ,COMMISSIONING
	/// ,DIVERTING
	/// ,DRAWOFFCOCK
	/// ,DOUBLECHECK
	/// ,DOUBLEREGULATING
	/// ,FAUCET
	/// ,FLUSHING
	/// ,GASCOCK
	/// ,GASTAP
	/// ,ISOLATING
	/// ,MIXING
	/// ,PRESSUREREDUCING
	/// ,PRESSURERELIEF
	/// ,REGULATING
	/// ,SAFETYCUTOFF
	/// ,STEAMTRAP
	/// ,STOPCOCK
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcValveTypeEnum: Global.IfcValveTypeEnum
	{
		public static string AIRRELEASE { get { return ".AIRRELEASE."; } private set { } }
		public static string ANTIVACUUM { get { return ".ANTIVACUUM."; } private set { } }
		public static string CHANGEOVER { get { return ".CHANGEOVER."; } private set { } }
		public static string CHECK { get { return ".CHECK."; } private set { } }
		public static string COMMISSIONING { get { return ".COMMISSIONING."; } private set { } }
		public static string DIVERTING { get { return ".DIVERTING."; } private set { } }
		public static string DRAWOFFCOCK { get { return ".DRAWOFFCOCK."; } private set { } }
		public static string DOUBLECHECK { get { return ".DOUBLECHECK."; } private set { } }
		public static string DOUBLEREGULATING { get { return ".DOUBLEREGULATING."; } private set { } }
		public static string FAUCET { get { return ".FAUCET."; } private set { } }
		public static string FLUSHING { get { return ".FLUSHING."; } private set { } }
		public static string GASCOCK { get { return ".GASCOCK."; } private set { } }
		public static string GASTAP { get { return ".GASTAP."; } private set { } }
		public static string ISOLATING { get { return ".ISOLATING."; } private set { } }
		public static string MIXING { get { return ".MIXING."; } private set { } }
		public static string PRESSUREREDUCING { get { return ".PRESSUREREDUCING."; } private set { } }
		public static string PRESSURERELIEF { get { return ".PRESSURERELIEF."; } private set { } }
		public static string REGULATING { get { return ".REGULATING."; } private set { } }
		public static string SAFETYCUTOFF { get { return ".SAFETYCUTOFF."; } private set { } }
		public static string STEAMTRAP { get { return ".STEAMTRAP."; } private set { } }
		public static string STOPCOCK { get { return ".STOPCOCK."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcValveTypeEnum() { Value = ".AIRRELEASE.";}
		public IfcValveTypeEnum(string value) { Value = value; }
		public static implicit operator IfcValveTypeEnum(string value) { return new IfcValveTypeEnum(value);}
		public static implicit operator string(IfcValveTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVibrationIsolatorTypeEnum = ENUMERATION OF
	/// (COMPRESSION
	/// ,SPRING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcVibrationIsolatorTypeEnum: Global.IfcVibrationIsolatorTypeEnum
	{
		public static string COMPRESSION { get { return ".COMPRESSION."; } private set { } }
		public static string SPRING { get { return ".SPRING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcVibrationIsolatorTypeEnum() { Value = ".COMPRESSION.";}
		public IfcVibrationIsolatorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcVibrationIsolatorTypeEnum(string value) { return new IfcVibrationIsolatorTypeEnum(value);}
		public static implicit operator string(IfcVibrationIsolatorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVoidingFeatureTypeEnum = ENUMERATION OF
	/// (CUTOUT
	/// ,NOTCH
	/// ,HOLE
	/// ,MITER
	/// ,CHAMFER
	/// ,EDGE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcVoidingFeatureTypeEnum: Global.IfcVoidingFeatureTypeEnum
	{
		public static string CUTOUT { get { return ".CUTOUT."; } private set { } }
		public static string NOTCH { get { return ".NOTCH."; } private set { } }
		public static string HOLE { get { return ".HOLE."; } private set { } }
		public static string MITER { get { return ".MITER."; } private set { } }
		public static string CHAMFER { get { return ".CHAMFER."; } private set { } }
		public static string EDGE { get { return ".EDGE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcVoidingFeatureTypeEnum() { Value = ".CUTOUT.";}
		public IfcVoidingFeatureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcVoidingFeatureTypeEnum(string value) { return new IfcVoidingFeatureTypeEnum(value);}
		public static implicit operator string(IfcVoidingFeatureTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWallTypeEnum = ENUMERATION OF
	/// (MOVABLE
	/// ,PARAPET
	/// ,PARTITIONING
	/// ,PLUMBINGWALL
	/// ,SHEAR
	/// ,SOLIDWALL
	/// ,STANDARD
	/// ,POLYGONAL
	/// ,ELEMENTEDWALL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWallTypeEnum: Global.IfcWallTypeEnum
	{
		public static string MOVABLE { get { return ".MOVABLE."; } private set { } }
		public static string PARAPET { get { return ".PARAPET."; } private set { } }
		public static string PARTITIONING { get { return ".PARTITIONING."; } private set { } }
		public static string PLUMBINGWALL { get { return ".PLUMBINGWALL."; } private set { } }
		public static string SHEAR { get { return ".SHEAR."; } private set { } }
		public static string SOLIDWALL { get { return ".SOLIDWALL."; } private set { } }
		public static string STANDARD { get { return ".STANDARD."; } private set { } }
		public static string POLYGONAL { get { return ".POLYGONAL."; } private set { } }
		public static string ELEMENTEDWALL { get { return ".ELEMENTEDWALL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWallTypeEnum() { Value = ".MOVABLE.";}
		public IfcWallTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWallTypeEnum(string value) { return new IfcWallTypeEnum(value);}
		public static implicit operator string(IfcWallTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWasteTerminalTypeEnum = ENUMERATION OF
	/// (FLOORTRAP
	/// ,FLOORWASTE
	/// ,GULLYSUMP
	/// ,GULLYTRAP
	/// ,ROOFDRAIN
	/// ,WASTEDISPOSALUNIT
	/// ,WASTETRAP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWasteTerminalTypeEnum: Global.IfcWasteTerminalTypeEnum
	{
		public static string FLOORTRAP { get { return ".FLOORTRAP."; } private set { } }
		public static string FLOORWASTE { get { return ".FLOORWASTE."; } private set { } }
		public static string GULLYSUMP { get { return ".GULLYSUMP."; } private set { } }
		public static string GULLYTRAP { get { return ".GULLYTRAP."; } private set { } }
		public static string ROOFDRAIN { get { return ".ROOFDRAIN."; } private set { } }
		public static string WASTEDISPOSALUNIT { get { return ".WASTEDISPOSALUNIT."; } private set { } }
		public static string WASTETRAP { get { return ".WASTETRAP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWasteTerminalTypeEnum() { Value = ".FLOORTRAP.";}
		public IfcWasteTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWasteTerminalTypeEnum(string value) { return new IfcWasteTerminalTypeEnum(value);}
		public static implicit operator string(IfcWasteTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowPanelOperationEnum = ENUMERATION OF
	/// (SIDEHUNGRIGHTHAND
	/// ,SIDEHUNGLEFTHAND
	/// ,TILTANDTURNRIGHTHAND
	/// ,TILTANDTURNLEFTHAND
	/// ,TOPHUNG
	/// ,BOTTOMHUNG
	/// ,PIVOTHORIZONTAL
	/// ,PIVOTVERTICAL
	/// ,SLIDINGHORIZONTAL
	/// ,SLIDINGVERTICAL
	/// ,REMOVABLECASEMENT
	/// ,FIXEDCASEMENT
	/// ,OTHEROPERATION
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWindowPanelOperationEnum: Global.IfcWindowPanelOperationEnum
	{
		public static string SIDEHUNGRIGHTHAND { get { return ".SIDEHUNGRIGHTHAND."; } private set { } }
		public static string SIDEHUNGLEFTHAND { get { return ".SIDEHUNGLEFTHAND."; } private set { } }
		public static string TILTANDTURNRIGHTHAND { get { return ".TILTANDTURNRIGHTHAND."; } private set { } }
		public static string TILTANDTURNLEFTHAND { get { return ".TILTANDTURNLEFTHAND."; } private set { } }
		public static string TOPHUNG { get { return ".TOPHUNG."; } private set { } }
		public static string BOTTOMHUNG { get { return ".BOTTOMHUNG."; } private set { } }
		public static string PIVOTHORIZONTAL { get { return ".PIVOTHORIZONTAL."; } private set { } }
		public static string PIVOTVERTICAL { get { return ".PIVOTVERTICAL."; } private set { } }
		public static string SLIDINGHORIZONTAL { get { return ".SLIDINGHORIZONTAL."; } private set { } }
		public static string SLIDINGVERTICAL { get { return ".SLIDINGVERTICAL."; } private set { } }
		public static string REMOVABLECASEMENT { get { return ".REMOVABLECASEMENT."; } private set { } }
		public static string FIXEDCASEMENT { get { return ".FIXEDCASEMENT."; } private set { } }
		public static string OTHEROPERATION { get { return ".OTHEROPERATION."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWindowPanelOperationEnum() { Value = ".SIDEHUNGRIGHTHAND.";}
		public IfcWindowPanelOperationEnum(string value) { Value = value; }
		public static implicit operator IfcWindowPanelOperationEnum(string value) { return new IfcWindowPanelOperationEnum(value);}
		public static implicit operator string(IfcWindowPanelOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowPanelPositionEnum = ENUMERATION OF
	/// (LEFT
	/// ,MIDDLE
	/// ,RIGHT
	/// ,BOTTOM
	/// ,TOP
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWindowPanelPositionEnum: Global.IfcWindowPanelPositionEnum
	{
		public static string LEFT { get { return ".LEFT."; } private set { } }
		public static string MIDDLE { get { return ".MIDDLE."; } private set { } }
		public static string RIGHT { get { return ".RIGHT."; } private set { } }
		public static string BOTTOM { get { return ".BOTTOM."; } private set { } }
		public static string TOP { get { return ".TOP."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWindowPanelPositionEnum() { Value = ".LEFT.";}
		public IfcWindowPanelPositionEnum(string value) { Value = value; }
		public static implicit operator IfcWindowPanelPositionEnum(string value) { return new IfcWindowPanelPositionEnum(value);}
		public static implicit operator string(IfcWindowPanelPositionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowStyleConstructionEnum = ENUMERATION OF
	/// (ALUMINIUM
	/// ,HIGH_GRADE_STEEL
	/// ,STEEL
	/// ,WOOD
	/// ,ALUMINIUM_WOOD
	/// ,PLASTIC
	/// ,OTHER_CONSTRUCTION
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWindowStyleConstructionEnum: Global.IfcWindowStyleConstructionEnum
	{
		public static string ALUMINIUM { get { return ".ALUMINIUM."; } private set { } }
		public static string HIGH_GRADE_STEEL { get { return ".HIGH_GRADE_STEEL."; } private set { } }
		public static string STEEL { get { return ".STEEL."; } private set { } }
		public static string WOOD { get { return ".WOOD."; } private set { } }
		public static string ALUMINIUM_WOOD { get { return ".ALUMINIUM_WOOD."; } private set { } }
		public static string PLASTIC { get { return ".PLASTIC."; } private set { } }
		public static string OTHER_CONSTRUCTION { get { return ".OTHER_CONSTRUCTION."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWindowStyleConstructionEnum() { Value = ".ALUMINIUM.";}
		public IfcWindowStyleConstructionEnum(string value) { Value = value; }
		public static implicit operator IfcWindowStyleConstructionEnum(string value) { return new IfcWindowStyleConstructionEnum(value);}
		public static implicit operator string(IfcWindowStyleConstructionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowStyleOperationEnum = ENUMERATION OF
	/// (SINGLE_PANEL
	/// ,DOUBLE_PANEL_VERTICAL
	/// ,DOUBLE_PANEL_HORIZONTAL
	/// ,TRIPLE_PANEL_VERTICAL
	/// ,TRIPLE_PANEL_BOTTOM
	/// ,TRIPLE_PANEL_TOP
	/// ,TRIPLE_PANEL_LEFT
	/// ,TRIPLE_PANEL_RIGHT
	/// ,TRIPLE_PANEL_HORIZONTAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWindowStyleOperationEnum: Global.IfcWindowStyleOperationEnum
	{
		public static string SINGLE_PANEL { get { return ".SINGLE_PANEL."; } private set { } }
		public static string DOUBLE_PANEL_VERTICAL { get { return ".DOUBLE_PANEL_VERTICAL."; } private set { } }
		public static string DOUBLE_PANEL_HORIZONTAL { get { return ".DOUBLE_PANEL_HORIZONTAL."; } private set { } }
		public static string TRIPLE_PANEL_VERTICAL { get { return ".TRIPLE_PANEL_VERTICAL."; } private set { } }
		public static string TRIPLE_PANEL_BOTTOM { get { return ".TRIPLE_PANEL_BOTTOM."; } private set { } }
		public static string TRIPLE_PANEL_TOP { get { return ".TRIPLE_PANEL_TOP."; } private set { } }
		public static string TRIPLE_PANEL_LEFT { get { return ".TRIPLE_PANEL_LEFT."; } private set { } }
		public static string TRIPLE_PANEL_RIGHT { get { return ".TRIPLE_PANEL_RIGHT."; } private set { } }
		public static string TRIPLE_PANEL_HORIZONTAL { get { return ".TRIPLE_PANEL_HORIZONTAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWindowStyleOperationEnum() { Value = ".SINGLE_PANEL.";}
		public IfcWindowStyleOperationEnum(string value) { Value = value; }
		public static implicit operator IfcWindowStyleOperationEnum(string value) { return new IfcWindowStyleOperationEnum(value);}
		public static implicit operator string(IfcWindowStyleOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowTypeEnum = ENUMERATION OF
	/// (WINDOW
	/// ,SKYLIGHT
	/// ,LIGHTDOME
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWindowTypeEnum: Global.IfcWindowTypeEnum
	{
		public static string WINDOW { get { return ".WINDOW."; } private set { } }
		public static string SKYLIGHT { get { return ".SKYLIGHT."; } private set { } }
		public static string LIGHTDOME { get { return ".LIGHTDOME."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWindowTypeEnum() { Value = ".WINDOW.";}
		public IfcWindowTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWindowTypeEnum(string value) { return new IfcWindowTypeEnum(value);}
		public static implicit operator string(IfcWindowTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowTypePartitioningEnum = ENUMERATION OF
	/// (SINGLE_PANEL
	/// ,DOUBLE_PANEL_VERTICAL
	/// ,DOUBLE_PANEL_HORIZONTAL
	/// ,TRIPLE_PANEL_VERTICAL
	/// ,TRIPLE_PANEL_BOTTOM
	/// ,TRIPLE_PANEL_TOP
	/// ,TRIPLE_PANEL_LEFT
	/// ,TRIPLE_PANEL_RIGHT
	/// ,TRIPLE_PANEL_HORIZONTAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWindowTypePartitioningEnum: Global.IfcWindowTypePartitioningEnum
	{
		public static string SINGLE_PANEL { get { return ".SINGLE_PANEL."; } private set { } }
		public static string DOUBLE_PANEL_VERTICAL { get { return ".DOUBLE_PANEL_VERTICAL."; } private set { } }
		public static string DOUBLE_PANEL_HORIZONTAL { get { return ".DOUBLE_PANEL_HORIZONTAL."; } private set { } }
		public static string TRIPLE_PANEL_VERTICAL { get { return ".TRIPLE_PANEL_VERTICAL."; } private set { } }
		public static string TRIPLE_PANEL_BOTTOM { get { return ".TRIPLE_PANEL_BOTTOM."; } private set { } }
		public static string TRIPLE_PANEL_TOP { get { return ".TRIPLE_PANEL_TOP."; } private set { } }
		public static string TRIPLE_PANEL_LEFT { get { return ".TRIPLE_PANEL_LEFT."; } private set { } }
		public static string TRIPLE_PANEL_RIGHT { get { return ".TRIPLE_PANEL_RIGHT."; } private set { } }
		public static string TRIPLE_PANEL_HORIZONTAL { get { return ".TRIPLE_PANEL_HORIZONTAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWindowTypePartitioningEnum() { Value = ".SINGLE_PANEL.";}
		public IfcWindowTypePartitioningEnum(string value) { Value = value; }
		public static implicit operator IfcWindowTypePartitioningEnum(string value) { return new IfcWindowTypePartitioningEnum(value);}
		public static implicit operator string(IfcWindowTypePartitioningEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWorkCalendarTypeEnum = ENUMERATION OF
	/// (FIRSTSHIFT
	/// ,SECONDSHIFT
	/// ,THIRDSHIFT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWorkCalendarTypeEnum: Global.IfcWorkCalendarTypeEnum
	{
		public static string FIRSTSHIFT { get { return ".FIRSTSHIFT."; } private set { } }
		public static string SECONDSHIFT { get { return ".SECONDSHIFT."; } private set { } }
		public static string THIRDSHIFT { get { return ".THIRDSHIFT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWorkCalendarTypeEnum() { Value = ".FIRSTSHIFT.";}
		public IfcWorkCalendarTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWorkCalendarTypeEnum(string value) { return new IfcWorkCalendarTypeEnum(value);}
		public static implicit operator string(IfcWorkCalendarTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWorkPlanTypeEnum = ENUMERATION OF
	/// (ACTUAL
	/// ,BASELINE
	/// ,PLANNED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWorkPlanTypeEnum: Global.IfcWorkPlanTypeEnum
	{
		public static string ACTUAL { get { return ".ACTUAL."; } private set { } }
		public static string BASELINE { get { return ".BASELINE."; } private set { } }
		public static string PLANNED { get { return ".PLANNED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWorkPlanTypeEnum() { Value = ".ACTUAL.";}
		public IfcWorkPlanTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWorkPlanTypeEnum(string value) { return new IfcWorkPlanTypeEnum(value);}
		public static implicit operator string(IfcWorkPlanTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWorkScheduleTypeEnum = ENUMERATION OF
	/// (ACTUAL
	/// ,BASELINE
	/// ,PLANNED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWorkScheduleTypeEnum: Global.IfcWorkScheduleTypeEnum
	{
		public static string ACTUAL { get { return ".ACTUAL."; } private set { } }
		public static string BASELINE { get { return ".BASELINE."; } private set { } }
		public static string PLANNED { get { return ".PLANNED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWorkScheduleTypeEnum() { Value = ".ACTUAL.";}
		public IfcWorkScheduleTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWorkScheduleTypeEnum(string value) { return new IfcWorkScheduleTypeEnum(value);}
		public static implicit operator string(IfcWorkScheduleTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcActorSelect = SELECT
	/// (IfcOrganization
	/// ,IfcPerson
	/// ,IfcPersonAndOrganization);
	/// END_TYPE;
	/// <summary>
	public interface IfcActorSelect: Global.IfcActorSelect
	{
		public List<IfcActorRole>? Roles {get; set;}
	}
	/// <summary>
	/// TYPE IfcAppliedValueSelect = SELECT
	/// (IfcMeasureWithUnit
	/// ,IfcReference
	/// ,IfcValue);
	/// END_TYPE;
	/// <summary>
	public interface IfcAppliedValueSelect: Global.IfcAppliedValueSelect
	{
	}
	/// <summary>
	/// TYPE IfcAxis2Placement = SELECT
	/// (IfcAxis2Placement2D
	/// ,IfcAxis2Placement3D);
	/// END_TYPE;
	/// <summary>
	public interface IfcAxis2Placement: Global.IfcAxis2Placement
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get; }
		public List<IfcStyledItem>? StyledByItem {get; }
		public IfcCartesianPoint? Location {get; set;}
		public IfcDimensionCount? Dim {get; }
		public IfcDirection? RefDirection {get; set;}
		public List<IfcDirection>? P {get; }
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignment
		{
			get
			{
				if(LayerAssignment != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignment)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcCartesianPoint? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IfcCartesianPoint val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
	}
	/// <summary>
	/// TYPE IfcBendingParameterSelect = SELECT
	/// (IfcLengthMeasure
	/// ,IfcPlaneAngleMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcBendingParameterSelect: Global.IfcBendingParameterSelect
	{
	}
	/// <summary>
	/// TYPE IfcBooleanOperand = SELECT
	/// (IfcBooleanResult
	/// ,IfcCsgPrimitive3D
	/// ,IfcHalfSpaceSolid
	/// ,IfcSolidModel
	/// ,IfcTessellatedFaceSet);
	/// END_TYPE;
	/// <summary>
	public interface IfcBooleanOperand: Global.IfcBooleanOperand
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get; }
		public List<IfcStyledItem>? StyledByItem {get; }
		public IfcDimensionCount? Dim {get; }
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignment
		{
			get
			{
				if(LayerAssignment != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignment)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcClassificationReferenceSelect = SELECT
	/// (IfcClassification
	/// ,IfcClassificationReference);
	/// END_TYPE;
	/// <summary>
	public interface IfcClassificationReferenceSelect: Global.IfcClassificationReferenceSelect
	{
		public IfcLabel? Name {get; set;}
		public IfcText? Description {get; set;}
		public IfcURIReference? Location {get; set;}
		public List<IfcClassificationReference>? HasReferences {get; }
		public virtual Global.IfcURIReference? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IfcURIReference val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
	}
	/// <summary>
	/// TYPE IfcClassificationSelect = SELECT
	/// (IfcClassification
	/// ,IfcClassificationReference);
	/// END_TYPE;
	/// <summary>
	public interface IfcClassificationSelect: Global.IfcClassificationSelect
	{
		public IfcLabel? Name {get; set;}
		public IfcText? Description {get; set;}
		public IfcURIReference? Location {get; set;}
		public List<IfcClassificationReference>? HasReferences {get; }
		public virtual Global.IfcURIReference? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IfcURIReference val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
	}
	/// <summary>
	/// TYPE IfcColour = SELECT
	/// (IfcColourSpecification
	/// ,IfcPreDefinedColour);
	/// END_TYPE;
	/// <summary>
	public interface IfcColour: IfcFillStyleSelect, Global.IfcColour
	{
		public IfcLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcColourOrFactor = SELECT
	/// (IfcColourRgb
	/// ,IfcNormalisedRatioMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcColourOrFactor: Global.IfcColourOrFactor
	{
	}
	/// <summary>
	/// TYPE IfcCoordinateReferenceSystemSelect = SELECT
	/// (IfcCoordinateReferenceSystem
	/// ,IfcGeometricRepresentationContext);
	/// END_TYPE;
	/// <summary>
	public interface IfcCoordinateReferenceSystemSelect: Global.IfcCoordinateReferenceSystemSelect
	{
		public List<IfcCoordinateOperation>? HasCoordinateOperation {get; }
	}
	/// <summary>
	/// TYPE IfcCsgSelect = SELECT
	/// (IfcBooleanResult
	/// ,IfcCsgPrimitive3D);
	/// END_TYPE;
	/// <summary>
	public interface IfcCsgSelect: Global.IfcCsgSelect
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get; }
		public List<IfcStyledItem>? StyledByItem {get; }
		public IfcDimensionCount? Dim {get; }
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignment
		{
			get
			{
				if(LayerAssignment != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignment)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcCurveFontOrScaledCurveFontSelect = SELECT
	/// (IfcCurveStyleFontAndScaling
	/// ,IfcCurveStyleFontSelect);
	/// END_TYPE;
	/// <summary>
	public interface IfcCurveFontOrScaledCurveFontSelect: Global.IfcCurveFontOrScaledCurveFontSelect
	{
		public IfcLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcCurveOnSurface = SELECT
	/// (IfcCompositeCurveOnSurface
	/// ,IfcPcurve
	/// ,IfcSurfaceCurve);
	/// END_TYPE;
	/// <summary>
	public interface IfcCurveOnSurface: Global.IfcCurveOnSurface
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get; }
		public List<IfcStyledItem>? StyledByItem {get; }
		public IfcDimensionCount? Dim {get; }
	}
	/// <summary>
	/// TYPE IfcCurveOrEdgeCurve = SELECT
	/// (IfcBoundedCurve
	/// ,IfcEdgeCurve);
	/// END_TYPE;
	/// <summary>
	public interface IfcCurveOrEdgeCurve: Global.IfcCurveOrEdgeCurve
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get; }
		public List<IfcStyledItem>? StyledByItem {get; }
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignment
		{
			get
			{
				if(LayerAssignment != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignment)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcCurveStyleFontSelect = SELECT
	/// (IfcCurveStyleFont
	/// ,IfcPreDefinedCurveFont);
	/// END_TYPE;
	/// <summary>
	public interface IfcCurveStyleFontSelect: IfcCurveFontOrScaledCurveFontSelect, Global.IfcCurveStyleFontSelect
	{
	}
	/// <summary>
	/// TYPE IfcDefinitionSelect = SELECT
	/// (IfcObjectDefinition
	/// ,IfcPropertyDefinition);
	/// END_TYPE;
	/// <summary>
	public interface IfcDefinitionSelect: Global.IfcDefinitionSelect
	{
		public IfcGloballyUniqueId? GlobalId {get; set;}
		public IfcOwnerHistory? OwnerHistory {get; set;}
		public IfcLabel? Name {get; set;}
		public IfcText? Description {get; set;}
		public List<IfcRelDeclares>? HasContext {get; }
		public List<IfcRelAssociates>? HasAssociations {get; }
	}
	/// <summary>
	/// TYPE IfcDerivedMeasureValue = SELECT
	/// (IfcAbsorbedDoseMeasure
	/// ,IfcAccelerationMeasure
	/// ,IfcAngularVelocityMeasure
	/// ,IfcAreaDensityMeasure
	/// ,IfcCompoundPlaneAngleMeasure
	/// ,IfcCurvatureMeasure
	/// ,IfcDoseEquivalentMeasure
	/// ,IfcDynamicViscosityMeasure
	/// ,IfcElectricCapacitanceMeasure
	/// ,IfcElectricChargeMeasure
	/// ,IfcElectricConductanceMeasure
	/// ,IfcElectricResistanceMeasure
	/// ,IfcElectricVoltageMeasure
	/// ,IfcEnergyMeasure
	/// ,IfcForceMeasure
	/// ,IfcFrequencyMeasure
	/// ,IfcHeatFluxDensityMeasure
	/// ,IfcHeatingValueMeasure
	/// ,IfcIlluminanceMeasure
	/// ,IfcInductanceMeasure
	/// ,IfcIntegerCountRateMeasure
	/// ,IfcIonConcentrationMeasure
	/// ,IfcIsothermalMoistureCapacityMeasure
	/// ,IfcKinematicViscosityMeasure
	/// ,IfcLinearForceMeasure
	/// ,IfcLinearMomentMeasure
	/// ,IfcLinearStiffnessMeasure
	/// ,IfcLinearVelocityMeasure
	/// ,IfcLuminousFluxMeasure
	/// ,IfcLuminousIntensityDistributionMeasure
	/// ,IfcMagneticFluxDensityMeasure
	/// ,IfcMagneticFluxMeasure
	/// ,IfcMassDensityMeasure
	/// ,IfcMassFlowRateMeasure
	/// ,IfcMassPerLengthMeasure
	/// ,IfcModulusOfElasticityMeasure
	/// ,IfcModulusOfLinearSubgradeReactionMeasure
	/// ,IfcModulusOfRotationalSubgradeReactionMeasure
	/// ,IfcModulusOfSubgradeReactionMeasure
	/// ,IfcMoistureDiffusivityMeasure
	/// ,IfcMolecularWeightMeasure
	/// ,IfcMomentOfInertiaMeasure
	/// ,IfcMonetaryMeasure
	/// ,IfcPHMeasure
	/// ,IfcPlanarForceMeasure
	/// ,IfcPowerMeasure
	/// ,IfcPressureMeasure
	/// ,IfcRadioActivityMeasure
	/// ,IfcRotationalFrequencyMeasure
	/// ,IfcRotationalMassMeasure
	/// ,IfcRotationalStiffnessMeasure
	/// ,IfcSectionModulusMeasure
	/// ,IfcSectionalAreaIntegralMeasure
	/// ,IfcShearModulusMeasure
	/// ,IfcSoundPowerLevelMeasure
	/// ,IfcSoundPowerMeasure
	/// ,IfcSoundPressureLevelMeasure
	/// ,IfcSoundPressureMeasure
	/// ,IfcSpecificHeatCapacityMeasure
	/// ,IfcTemperatureGradientMeasure
	/// ,IfcTemperatureRateOfChangeMeasure
	/// ,IfcThermalAdmittanceMeasure
	/// ,IfcThermalConductivityMeasure
	/// ,IfcThermalExpansionCoefficientMeasure
	/// ,IfcThermalResistanceMeasure
	/// ,IfcThermalTransmittanceMeasure
	/// ,IfcTorqueMeasure
	/// ,IfcVaporPermeabilityMeasure
	/// ,IfcVolumetricFlowRateMeasure
	/// ,IfcWarpingConstantMeasure
	/// ,IfcWarpingMomentMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcDerivedMeasureValue: IfcValue, Global.IfcDerivedMeasureValue
	{
	}
	/// <summary>
	/// TYPE IfcDocumentSelect = SELECT
	/// (IfcDocumentInformation
	/// ,IfcDocumentReference);
	/// END_TYPE;
	/// <summary>
	public interface IfcDocumentSelect: Global.IfcDocumentSelect
	{
		public IfcIdentifier? Identification {get; set;}
		public IfcLabel? Name {get; set;}
		public IfcText? Description {get; set;}
		public IfcURIReference? Location {get; set;}
		public virtual Global.IfcIdentifier? _Identification
		{
			get
			{
				return Identification;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identification = val;
				}
				else if(value == null)
				{
					Identification = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcURIReference? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IfcURIReference val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
	}
	/// <summary>
	/// TYPE IfcFillStyleSelect = SELECT
	/// (IfcColour
	/// ,IfcExternallyDefinedHatchStyle
	/// ,IfcFillAreaStyleHatching
	/// ,IfcFillAreaStyleTiles);
	/// END_TYPE;
	/// <summary>
	public interface IfcFillStyleSelect: Global.IfcFillStyleSelect
	{
	}
	/// <summary>
	/// TYPE IfcGeometricSetSelect = SELECT
	/// (IfcCurve
	/// ,IfcPoint
	/// ,IfcSurface);
	/// END_TYPE;
	/// <summary>
	public interface IfcGeometricSetSelect: Global.IfcGeometricSetSelect
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get; }
		public List<IfcStyledItem>? StyledByItem {get; }
		public IfcDimensionCount? Dim {get; }
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignment
		{
			get
			{
				if(LayerAssignment != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignment)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcGridPlacementDirectionSelect = SELECT
	/// (IfcDirection
	/// ,IfcVirtualGridIntersection);
	/// END_TYPE;
	/// <summary>
	public interface IfcGridPlacementDirectionSelect: Global.IfcGridPlacementDirectionSelect
	{
	}
	/// <summary>
	/// TYPE IfcHatchLineDistanceSelect = SELECT
	/// (IfcPositiveLengthMeasure
	/// ,IfcVector);
	/// END_TYPE;
	/// <summary>
	public interface IfcHatchLineDistanceSelect: Global.IfcHatchLineDistanceSelect
	{
	}
	/// <summary>
	/// TYPE IfcLayeredItem = SELECT
	/// (IfcRepresentation
	/// ,IfcRepresentationItem);
	/// END_TYPE;
	/// <summary>
	public interface IfcLayeredItem: Global.IfcLayeredItem
	{
	}
	/// <summary>
	/// TYPE IfcLibrarySelect = SELECT
	/// (IfcLibraryInformation
	/// ,IfcLibraryReference);
	/// END_TYPE;
	/// <summary>
	public interface IfcLibrarySelect: Global.IfcLibrarySelect
	{
		public IfcLabel? Name {get; set;}
		public IfcURIReference? Location {get; set;}
		public IfcText? Description {get; set;}
		public virtual Global.IfcURIReference? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IfcURIReference val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
	}
	/// <summary>
	/// TYPE IfcLightDistributionDataSourceSelect = SELECT
	/// (IfcExternalReference
	/// ,IfcLightIntensityDistribution);
	/// END_TYPE;
	/// <summary>
	public interface IfcLightDistributionDataSourceSelect: Global.IfcLightDistributionDataSourceSelect
	{
	}
	/// <summary>
	/// TYPE IfcMaterialSelect = SELECT
	/// (IfcMaterialDefinition
	/// ,IfcMaterialList
	/// ,IfcMaterialUsageDefinition);
	/// END_TYPE;
	/// <summary>
	public interface IfcMaterialSelect: Global.IfcMaterialSelect
	{
	}
	/// <summary>
	/// TYPE IfcMeasureValue = SELECT
	/// (IfcAmountOfSubstanceMeasure
	/// ,IfcAreaMeasure
	/// ,IfcComplexNumber
	/// ,IfcContextDependentMeasure
	/// ,IfcCountMeasure
	/// ,IfcDescriptiveMeasure
	/// ,IfcElectricCurrentMeasure
	/// ,IfcLengthMeasure
	/// ,IfcLuminousIntensityMeasure
	/// ,IfcMassMeasure
	/// ,IfcNonNegativeLengthMeasure
	/// ,IfcNormalisedRatioMeasure
	/// ,IfcNumericMeasure
	/// ,IfcParameterValue
	/// ,IfcPlaneAngleMeasure
	/// ,IfcPositiveLengthMeasure
	/// ,IfcPositivePlaneAngleMeasure
	/// ,IfcPositiveRatioMeasure
	/// ,IfcRatioMeasure
	/// ,IfcSolidAngleMeasure
	/// ,IfcThermodynamicTemperatureMeasure
	/// ,IfcTimeMeasure
	/// ,IfcVolumeMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcMeasureValue: IfcValue, Global.IfcMeasureValue
	{
	}
	/// <summary>
	/// TYPE IfcMetricValueSelect = SELECT
	/// (IfcAppliedValue
	/// ,IfcMeasureWithUnit
	/// ,IfcReference
	/// ,IfcTable
	/// ,IfcTimeSeries
	/// ,IfcValue);
	/// END_TYPE;
	/// <summary>
	public interface IfcMetricValueSelect: Global.IfcMetricValueSelect
	{
	}
	/// <summary>
	/// TYPE IfcModulusOfRotationalSubgradeReactionSelect = SELECT
	/// (IfcBoolean
	/// ,IfcModulusOfRotationalSubgradeReactionMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcModulusOfRotationalSubgradeReactionSelect: Global.IfcModulusOfRotationalSubgradeReactionSelect
	{
	}
	/// <summary>
	/// TYPE IfcModulusOfSubgradeReactionSelect = SELECT
	/// (IfcBoolean
	/// ,IfcModulusOfSubgradeReactionMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcModulusOfSubgradeReactionSelect: Global.IfcModulusOfSubgradeReactionSelect
	{
	}
	/// <summary>
	/// TYPE IfcModulusOfTranslationalSubgradeReactionSelect = SELECT
	/// (IfcBoolean
	/// ,IfcModulusOfLinearSubgradeReactionMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcModulusOfTranslationalSubgradeReactionSelect: Global.IfcModulusOfTranslationalSubgradeReactionSelect
	{
	}
	/// <summary>
	/// TYPE IfcObjectReferenceSelect = SELECT
	/// (IfcAddress
	/// ,IfcAppliedValue
	/// ,IfcExternalReference
	/// ,IfcMaterialDefinition
	/// ,IfcOrganization
	/// ,IfcPerson
	/// ,IfcPersonAndOrganization
	/// ,IfcTable
	/// ,IfcTimeSeries);
	/// END_TYPE;
	/// <summary>
	public interface IfcObjectReferenceSelect: Global.IfcObjectReferenceSelect
	{
	}
	/// <summary>
	/// TYPE IfcPointOrVertexPoint = SELECT
	/// (IfcPoint
	/// ,IfcVertexPoint);
	/// END_TYPE;
	/// <summary>
	public interface IfcPointOrVertexPoint: Global.IfcPointOrVertexPoint
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get; }
		public List<IfcStyledItem>? StyledByItem {get; }
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignment
		{
			get
			{
				if(LayerAssignment != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignment)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcPresentationStyleSelect = SELECT
	/// (IfcCurveStyle
	/// ,IfcFillAreaStyle
	/// ,IfcNullStyle
	/// ,IfcSurfaceStyle
	/// ,IfcTextStyle);
	/// END_TYPE;
	/// <summary>
	public interface IfcPresentationStyleSelect: Global.IfcPresentationStyleSelect
	{
		public IfcLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcProcessSelect = SELECT
	/// (IfcProcess
	/// ,IfcTypeProcess);
	/// END_TYPE;
	/// <summary>
	public interface IfcProcessSelect: Global.IfcProcessSelect
	{
		public IfcGloballyUniqueId? GlobalId {get; set;}
		public IfcOwnerHistory? OwnerHistory {get; set;}
		public IfcLabel? Name {get; set;}
		public IfcText? Description {get; set;}
		public List<IfcRelAssigns>? HasAssignments {get; }
		public List<IfcRelNests>? Nests {get; }
		public List<IfcRelNests>? IsNestedBy {get; }
		public List<IfcRelDeclares>? HasContext {get; }
		public List<IfcRelAggregates>? IsDecomposedBy {get; }
		public List<IfcRelAggregates>? Decomposes {get; }
		public List<IfcRelAssociates>? HasAssociations {get; }
		public IfcIdentifier? Identification {get; set;}
		public IfcText? LongDescription {get; set;}
		public List<IfcRelAssignsToProcess>? OperatesOn {get; }
	}
	/// <summary>
	/// TYPE IfcProductRepresentationSelect = SELECT
	/// (IfcProductDefinitionShape
	/// ,IfcRepresentationMap);
	/// END_TYPE;
	/// <summary>
	public interface IfcProductRepresentationSelect: Global.IfcProductRepresentationSelect
	{
		public List<IfcShapeAspect>? HasShapeAspects {get; }
	}
	/// <summary>
	/// TYPE IfcProductSelect = SELECT
	/// (IfcProduct
	/// ,IfcTypeProduct);
	/// END_TYPE;
	/// <summary>
	public interface IfcProductSelect: Global.IfcProductSelect
	{
		public IfcGloballyUniqueId? GlobalId {get; set;}
		public IfcOwnerHistory? OwnerHistory {get; set;}
		public IfcLabel? Name {get; set;}
		public IfcText? Description {get; set;}
		public List<IfcRelAssigns>? HasAssignments {get; }
		public List<IfcRelNests>? Nests {get; }
		public List<IfcRelNests>? IsNestedBy {get; }
		public List<IfcRelDeclares>? HasContext {get; }
		public List<IfcRelAggregates>? IsDecomposedBy {get; }
		public List<IfcRelAggregates>? Decomposes {get; }
		public List<IfcRelAssociates>? HasAssociations {get; }
		public List<IfcRelAssignsToProduct>? ReferencedBy {get; }
	}
	/// <summary>
	/// TYPE IfcPropertySetDefinitionSelect = SELECT
	/// (IfcPropertySetDefinition
	/// ,IfcPropertySetDefinitionSet);
	/// END_TYPE;
	/// <summary>
	public interface IfcPropertySetDefinitionSelect: Global.IfcPropertySetDefinitionSelect
	{
	}
	/// <summary>
	/// TYPE IfcResourceObjectSelect = SELECT
	/// (IfcActorRole
	/// ,IfcAppliedValue
	/// ,IfcApproval
	/// ,IfcConstraint
	/// ,IfcContextDependentUnit
	/// ,IfcConversionBasedUnit
	/// ,IfcExternalInformation
	/// ,IfcExternalReference
	/// ,IfcMaterialDefinition
	/// ,IfcOrganization
	/// ,IfcPerson
	/// ,IfcPersonAndOrganization
	/// ,IfcPhysicalQuantity
	/// ,IfcProfileDef
	/// ,IfcPropertyAbstraction
	/// ,IfcTimeSeries);
	/// END_TYPE;
	/// <summary>
	public interface IfcResourceObjectSelect: Global.IfcResourceObjectSelect
	{
	}
	/// <summary>
	/// TYPE IfcResourceSelect = SELECT
	/// (IfcResource
	/// ,IfcTypeResource);
	/// END_TYPE;
	/// <summary>
	public interface IfcResourceSelect: Global.IfcResourceSelect
	{
		public IfcGloballyUniqueId? GlobalId {get; set;}
		public IfcOwnerHistory? OwnerHistory {get; set;}
		public IfcLabel? Name {get; set;}
		public IfcText? Description {get; set;}
		public List<IfcRelAssigns>? HasAssignments {get; }
		public List<IfcRelNests>? Nests {get; }
		public List<IfcRelNests>? IsNestedBy {get; }
		public List<IfcRelDeclares>? HasContext {get; }
		public List<IfcRelAggregates>? IsDecomposedBy {get; }
		public List<IfcRelAggregates>? Decomposes {get; }
		public List<IfcRelAssociates>? HasAssociations {get; }
		public IfcIdentifier? Identification {get; set;}
		public IfcText? LongDescription {get; set;}
		public List<IfcRelAssignsToResource>? ResourceOf {get; }
		public List<IfcAppliedValue>? BaseCosts {get; set;}
		public IfcPhysicalQuantity? BaseQuantity {get; set;}
	}
	/// <summary>
	/// TYPE IfcRotationalStiffnessSelect = SELECT
	/// (IfcBoolean
	/// ,IfcRotationalStiffnessMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcRotationalStiffnessSelect: Global.IfcRotationalStiffnessSelect
	{
	}
	/// <summary>
	/// TYPE IfcSegmentIndexSelect = SELECT
	/// (IfcArcIndex
	/// ,IfcLineIndex);
	/// END_TYPE;
	/// <summary>
	public interface IfcSegmentIndexSelect: Global.IfcSegmentIndexSelect
	{
	}
	/// <summary>
	/// TYPE IfcShell = SELECT
	/// (IfcClosedShell
	/// ,IfcOpenShell);
	/// END_TYPE;
	/// <summary>
	public interface IfcShell: Global.IfcShell
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get; }
		public List<IfcStyledItem>? StyledByItem {get; }
		public List<IfcFace>? CfsFaces {get; set;}
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignment
		{
			get
			{
				if(LayerAssignment != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignment)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcSimpleValue = SELECT
	/// (IfcBinary
	/// ,IfcBoolean
	/// ,IfcDate
	/// ,IfcDateTime
	/// ,IfcDuration
	/// ,IfcIdentifier
	/// ,IfcInteger
	/// ,IfcLabel
	/// ,IfcLogical
	/// ,IfcPositiveInteger
	/// ,IfcReal
	/// ,IfcText
	/// ,IfcTime
	/// ,IfcTimeStamp);
	/// END_TYPE;
	/// <summary>
	public interface IfcSimpleValue: IfcValue, Global.IfcSimpleValue
	{
	}
	/// <summary>
	/// TYPE IfcSizeSelect = SELECT
	/// (IfcDescriptiveMeasure
	/// ,IfcLengthMeasure
	/// ,IfcNormalisedRatioMeasure
	/// ,IfcPositiveLengthMeasure
	/// ,IfcPositiveRatioMeasure
	/// ,IfcRatioMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcSizeSelect: Global.IfcSizeSelect
	{
	}
	/// <summary>
	/// TYPE IfcSolidOrShell = SELECT
	/// (IfcClosedShell
	/// ,IfcSolidModel);
	/// END_TYPE;
	/// <summary>
	public interface IfcSolidOrShell: Global.IfcSolidOrShell
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get; }
		public List<IfcStyledItem>? StyledByItem {get; }
	}
	/// <summary>
	/// TYPE IfcSpaceBoundarySelect = SELECT
	/// (IfcExternalSpatialElement
	/// ,IfcSpace);
	/// END_TYPE;
	/// <summary>
	public interface IfcSpaceBoundarySelect: Global.IfcSpaceBoundarySelect
	{
		public IfcGloballyUniqueId? GlobalId {get; set;}
		public IfcOwnerHistory? OwnerHistory {get; set;}
		public IfcLabel? Name {get; set;}
		public IfcText? Description {get; set;}
		public List<IfcRelAssigns>? HasAssignments {get; }
		public List<IfcRelNests>? Nests {get; }
		public List<IfcRelNests>? IsNestedBy {get; }
		public List<IfcRelDeclares>? HasContext {get; }
		public List<IfcRelAggregates>? IsDecomposedBy {get; }
		public List<IfcRelAggregates>? Decomposes {get; }
		public List<IfcRelAssociates>? HasAssociations {get; }
		public IfcLabel? ObjectType {get; set;}
		public List<IfcRelDefinesByObject>? IsDeclaredBy {get; }
		public List<IfcRelDefinesByObject>? Declares {get; }
		public List<IfcRelDefinesByType>? IsTypedBy {get; }
		public List<IfcRelDefinesByProperties>? IsDefinedBy {get; }
		public IfcObjectPlacement? ObjectPlacement {get; set;}
		public IfcProductRepresentation? Representation {get; set;}
		public List<IfcRelAssignsToProduct>? ReferencedBy {get; }
		public IfcLabel? LongName {get; set;}
		public List<IfcRelContainedInSpatialStructure>? ContainsElements {get; }
		public List<IfcRelServicesBuildings>? ServicedBySystems {get; }
		public List<IfcRelReferencedInSpatialStructure>? ReferencesElements {get; }
		public List<IfcRelSpaceBoundary>? BoundedBy {get; }
	}
	/// <summary>
	/// TYPE IfcSpecularHighlightSelect = SELECT
	/// (IfcSpecularExponent
	/// ,IfcSpecularRoughness);
	/// END_TYPE;
	/// <summary>
	public interface IfcSpecularHighlightSelect: Global.IfcSpecularHighlightSelect
	{
	}
	/// <summary>
	/// TYPE IfcStructuralActivityAssignmentSelect = SELECT
	/// (IfcElement
	/// ,IfcStructuralItem);
	/// END_TYPE;
	/// <summary>
	public interface IfcStructuralActivityAssignmentSelect: Global.IfcStructuralActivityAssignmentSelect
	{
		public IfcGloballyUniqueId? GlobalId {get; set;}
		public IfcOwnerHistory? OwnerHistory {get; set;}
		public IfcLabel? Name {get; set;}
		public IfcText? Description {get; set;}
		public List<IfcRelAssigns>? HasAssignments {get; }
		public List<IfcRelNests>? Nests {get; }
		public List<IfcRelNests>? IsNestedBy {get; }
		public List<IfcRelDeclares>? HasContext {get; }
		public List<IfcRelAggregates>? IsDecomposedBy {get; }
		public List<IfcRelAggregates>? Decomposes {get; }
		public List<IfcRelAssociates>? HasAssociations {get; }
		public IfcLabel? ObjectType {get; set;}
		public List<IfcRelDefinesByObject>? IsDeclaredBy {get; }
		public List<IfcRelDefinesByObject>? Declares {get; }
		public List<IfcRelDefinesByType>? IsTypedBy {get; }
		public List<IfcRelDefinesByProperties>? IsDefinedBy {get; }
		public IfcObjectPlacement? ObjectPlacement {get; set;}
		public IfcProductRepresentation? Representation {get; set;}
		public List<IfcRelAssignsToProduct>? ReferencedBy {get; }
		public virtual List<Global.IfcRelNests>? _Nests
		{
			get
			{
				if(Nests != null)
				{
					List<Global.IfcRelNests>? items = new List<Global.IfcRelNests>();
					foreach (IfcRelNests item in Nests)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelNests>? _IsNestedBy
		{
			get
			{
				if(IsNestedBy != null)
				{
					List<Global.IfcRelNests>? items = new List<Global.IfcRelNests>();
					foreach (IfcRelNests item in IsNestedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDeclares>? _HasContext
		{
			get
			{
				if(HasContext != null)
				{
					List<Global.IfcRelDeclares>? items = new List<Global.IfcRelDeclares>();
					foreach (IfcRelDeclares item in HasContext)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelAggregates>? _IsDecomposedBy
		{
			get
			{
				if(IsDecomposedBy != null)
				{
					List<Global.IfcRelAggregates>? items = new List<Global.IfcRelAggregates>();
					foreach (IfcRelAggregates item in IsDecomposedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelAggregates>? _Decomposes
		{
			get
			{
				if(Decomposes != null)
				{
					List<Global.IfcRelAggregates>? items = new List<Global.IfcRelAggregates>();
					foreach (IfcRelAggregates item in Decomposes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDefinesByObject>? _IsDeclaredBy
		{
			get
			{
				if(IsDeclaredBy != null)
				{
					List<Global.IfcRelDefinesByObject>? items = new List<Global.IfcRelDefinesByObject>();
					foreach (IfcRelDefinesByObject item in IsDeclaredBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDefinesByObject>? _Declares
		{
			get
			{
				if(Declares != null)
				{
					List<Global.IfcRelDefinesByObject>? items = new List<Global.IfcRelDefinesByObject>();
					foreach (IfcRelDefinesByObject item in Declares)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDefinesByType>? _IsTypedBy
		{
			get
			{
				if(IsTypedBy != null)
				{
					List<Global.IfcRelDefinesByType>? items = new List<Global.IfcRelDefinesByType>();
					foreach (IfcRelDefinesByType item in IsTypedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDefinesByProperties>? _IsDefinedBy
		{
			get
			{
				if(IsDefinedBy != null)
				{
					List<Global.IfcRelDefinesByProperties>? items = new List<Global.IfcRelDefinesByProperties>();
					foreach (IfcRelDefinesByProperties item in IsDefinedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcStyleAssignmentSelect = SELECT
	/// (IfcPresentationStyle
	/// ,IfcPresentationStyleAssignment);
	/// END_TYPE;
	/// <summary>
	public interface IfcStyleAssignmentSelect: Global.IfcStyleAssignmentSelect
	{
	}
	/// <summary>
	/// TYPE IfcSurfaceOrFaceSurface = SELECT
	/// (IfcFaceBasedSurfaceModel
	/// ,IfcFaceSurface
	/// ,IfcSurface);
	/// END_TYPE;
	/// <summary>
	public interface IfcSurfaceOrFaceSurface: Global.IfcSurfaceOrFaceSurface
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get; }
		public List<IfcStyledItem>? StyledByItem {get; }
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignment
		{
			get
			{
				if(LayerAssignment != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignment)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcSurfaceStyleElementSelect = SELECT
	/// (IfcExternallyDefinedSurfaceStyle
	/// ,IfcSurfaceStyleLighting
	/// ,IfcSurfaceStyleRefraction
	/// ,IfcSurfaceStyleShading
	/// ,IfcSurfaceStyleWithTextures);
	/// END_TYPE;
	/// <summary>
	public interface IfcSurfaceStyleElementSelect: Global.IfcSurfaceStyleElementSelect
	{
	}
	/// <summary>
	/// TYPE IfcTextFontSelect = SELECT
	/// (IfcExternallyDefinedTextFont
	/// ,IfcPreDefinedTextFont);
	/// END_TYPE;
	/// <summary>
	public interface IfcTextFontSelect: Global.IfcTextFontSelect
	{
		public IfcLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcTimeOrRatioSelect = SELECT
	/// (IfcDuration
	/// ,IfcRatioMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcTimeOrRatioSelect: Global.IfcTimeOrRatioSelect
	{
	}
	/// <summary>
	/// TYPE IfcTranslationalStiffnessSelect = SELECT
	/// (IfcBoolean
	/// ,IfcLinearStiffnessMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcTranslationalStiffnessSelect: Global.IfcTranslationalStiffnessSelect
	{
	}
	/// <summary>
	/// TYPE IfcTrimmingSelect = SELECT
	/// (IfcCartesianPoint
	/// ,IfcParameterValue);
	/// END_TYPE;
	/// <summary>
	public interface IfcTrimmingSelect: Global.IfcTrimmingSelect
	{
	}
	/// <summary>
	/// TYPE IfcUnit = SELECT
	/// (IfcDerivedUnit
	/// ,IfcMonetaryUnit
	/// ,IfcNamedUnit);
	/// END_TYPE;
	/// <summary>
	public interface IfcUnit: Global.IfcUnit
	{
	}
	/// <summary>
	/// TYPE IfcValue = SELECT
	/// (IfcDerivedMeasureValue
	/// ,IfcMeasureValue
	/// ,IfcSimpleValue);
	/// END_TYPE;
	/// <summary>
	public interface IfcValue: IfcAppliedValueSelect, IfcMetricValueSelect, Global.IfcValue
	{
	}
	/// <summary>
	/// TYPE IfcVectorOrDirection = SELECT
	/// (IfcDirection
	/// ,IfcVector);
	/// END_TYPE;
	/// <summary>
	public interface IfcVectorOrDirection: Global.IfcVectorOrDirection
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get; }
		public List<IfcStyledItem>? StyledByItem {get; }
		public IfcDimensionCount? Dim {get; }
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignment
		{
			get
			{
				if(LayerAssignment != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignment)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcWarpingStiffnessSelect = SELECT
	/// (IfcBoolean
	/// ,IfcWarpingMomentMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcWarpingStiffnessSelect: Global.IfcWarpingStiffnessSelect
	{
	}
	/// <summary>
	/// ENTITY IfcActionRequest
	/// SUBTYPE OF (IfcControl);
	/// PredefinedType : OPTIONAL IfcActionRequestTypeEnum;
	/// Status : OPTIONAL IfcLabel;
	/// LongDescription : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IfcActionRequest : IfcControl, Global.IfcActionRequest
	{
		public virtual IfcActionRequestTypeEnum? PredefinedType { get; set; }
		public virtual IfcLabel? Status { get; set; }
		public virtual IfcText? LongDescription { get; set; }
		public IfcActionRequest() : base()
		{
		}
		public IfcActionRequest(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcActionRequestTypeEnum? PredefinedType, IfcLabel? Status, IfcText? LongDescription) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification)
		{
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.LongDescription = LongDescription;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				PredefinedType,
				Status,
				LongDescription
			};
		}
		public virtual Global.IfcActionRequestTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcActionRequestTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Status
		{
			get
			{
				return Status;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Status = val;
				}
				else if(value == null)
				{
					Status = null;
				}
			}
		}
		public virtual Global.IfcText? _LongDescription
		{
			get
			{
				return LongDescription;
			}
			set
			{
				if(value is IfcText val)
				{
					LongDescription = val;
				}
				else if(value == null)
				{
					LongDescription = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcActor
	/// SUPERTYPE OF (ONEOF
	/// (IfcOccupant))
	/// SUBTYPE OF (IfcObject);
	/// TheActor : IfcActorSelect;
	/// INVERSE
	/// IsActingUpon : SET [0:?] OF IfcRelAssignsToActor FOR RelatingActor;
	/// END_ENTITY;
	/// <summary>
	public class IfcActor : IfcObject, Global.IfcActor
	{
		public virtual IfcActorSelect? TheActor { get; set; }
		public List<IfcRelAssignsToActor>? IsActingUpon {get{return Model?.GetItems<IfcRelAssignsToActor>().Where(x => x.RelatingActor != null && x.RelatingActor == this).ToList();}}
		public IfcActor() : base()
		{
		}
		public IfcActor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcActorSelect? TheActor) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.TheActor = TheActor;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				TheActor
			};
		}
		public virtual Global.IfcActorSelect? _TheActor
		{
			get
			{
				return TheActor;
			}
			set
			{
				if(value is IfcActorSelect val)
				{
					TheActor = val;
				}
				else if(value == null)
				{
					TheActor = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssignsToActor>? _IsActingUpon
		{
			get
			{
				if(IsActingUpon != null)
				{
					List<Global.IfcRelAssignsToActor>? items = new List<Global.IfcRelAssignsToActor>();
					foreach (IfcRelAssignsToActor item in IsActingUpon)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcActorRole;
	/// Role : IfcRoleEnum;
	/// UserDefinedRole : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// INVERSE
	/// HasExternalReference : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
	/// WHERE
	/// WR1 : (Role <> IfcRoleEnum.USERDEFINED) OR
	/// ((Role = IfcRoleEnum.USERDEFINED) AND
	/// EXISTS(SELF.UserDefinedRole));
	/// END_ENTITY;
	/// <summary>
	public class IfcActorRole : Ifc_Entity, IfcResourceObjectSelect, Global.IfcActorRole
	{
		public virtual IfcRoleEnum? Role { get; set; }
		public virtual IfcLabel? UserDefinedRole { get; set; }
		public virtual IfcText? Description { get; set; }
		public List<IfcExternalReferenceRelationship>? HasExternalReference {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public IfcActorRole() : base()
		{
		}
		public IfcActorRole(IfcRoleEnum? Role, IfcLabel? UserDefinedRole, IfcText? Description) : base ()
		{
			this.Role = Role;
			this.UserDefinedRole = UserDefinedRole;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Role,
				UserDefinedRole,
				Description
			};
		}
		public virtual Global.IfcRoleEnum? _Role
		{
			get
			{
				return Role;
			}
			set
			{
				if(value is IfcRoleEnum val)
				{
					Role = val;
				}
				else if(value == null)
				{
					Role = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedRole
		{
			get
			{
				return UserDefinedRole;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedRole = val;
				}
				else if(value == null)
				{
					UserDefinedRole = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _HasExternalReference
		{
			get
			{
				if(HasExternalReference != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in HasExternalReference)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcActuator
	/// SUBTYPE OF (IfcDistributionControlElement);
	/// PredefinedType : OPTIONAL IfcActuatorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcActuatorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcActuatorTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCACTUATORTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcActuator : IfcDistributionControlElement, Global.IfcActuator
	{
		public virtual IfcActuatorTypeEnum? PredefinedType { get; set; }
		public IfcActuator() : base()
		{
		}
		public IfcActuator(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcActuatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcActuatorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcActuatorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcActuatorType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcActuatorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcActuatorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcActuatorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcActuatorType : IfcDistributionControlElementType, Global.IfcActuatorType
	{
		public virtual IfcActuatorTypeEnum? PredefinedType { get; set; }
		public IfcActuatorType() : base()
		{
		}
		public IfcActuatorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcActuatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcActuatorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcActuatorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAddress
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPostalAddress
	/// ,IfcTelecomAddress));
	/// Purpose : OPTIONAL IfcAddressTypeEnum;
	/// Description : OPTIONAL IfcText;
	/// UserDefinedPurpose : OPTIONAL IfcLabel;
	/// INVERSE
	/// OfPerson : SET [0:?] OF IfcPerson FOR Addresses;
	/// OfOrganization : SET [0:?] OF IfcOrganization FOR Addresses;
	/// WHERE
	/// WR1 : (NOT(EXISTS(Purpose))) OR
	/// ((Purpose <> IfcAddressTypeEnum.USERDEFINED) OR
	/// ((Purpose = IfcAddressTypeEnum.USERDEFINED) AND
	/// EXISTS(SELF.UserDefinedPurpose)));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcAddress : Ifc_Entity, IfcObjectReferenceSelect, Global.IfcAddress
	{
		public virtual IfcAddressTypeEnum? Purpose { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcLabel? UserDefinedPurpose { get; set; }
		public List<IfcPerson>? OfPerson {get{return Model?.GetItems<IfcPerson>().Where(x => x.Addresses != null && x.Addresses.Contains(this)).ToList();}}
		public List<IfcOrganization>? OfOrganization {get{return Model?.GetItems<IfcOrganization>().Where(x => x.Addresses != null && x.Addresses.Contains(this)).ToList();}}
		public IfcAddress() : base()
		{
		}
		public IfcAddress(IfcAddressTypeEnum? Purpose, IfcText? Description, IfcLabel? UserDefinedPurpose) : base ()
		{
			this.Purpose = Purpose;
			this.Description = Description;
			this.UserDefinedPurpose = UserDefinedPurpose;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Purpose,
				Description,
				UserDefinedPurpose
			};
		}
		public virtual Global.IfcAddressTypeEnum? _Purpose
		{
			get
			{
				return Purpose;
			}
			set
			{
				if(value is IfcAddressTypeEnum val)
				{
					Purpose = val;
				}
				else if(value == null)
				{
					Purpose = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedPurpose
		{
			get
			{
				return UserDefinedPurpose;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedPurpose = val;
				}
				else if(value == null)
				{
					UserDefinedPurpose = null;
				}
			}
		}
		public virtual List<Global.IfcPerson>? _OfPerson
		{
			get
			{
				if(OfPerson != null)
				{
					List<Global.IfcPerson>? items = new List<Global.IfcPerson>();
					foreach (IfcPerson item in OfPerson)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcOrganization>? _OfOrganization
		{
			get
			{
				if(OfOrganization != null)
				{
					List<Global.IfcOrganization>? items = new List<Global.IfcOrganization>();
					foreach (IfcOrganization item in OfOrganization)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAdvancedBrep
	/// SUPERTYPE OF (ONEOF
	/// (IfcAdvancedBrepWithVoids))
	/// SUBTYPE OF (IfcManifoldSolidBrep);
	/// WHERE
	/// HasAdvancedFaces : SIZEOF(QUERY(Afs <* SELF\IfcManifoldSolidBrep.Outer.CfsFaces |
	/// (NOT ('IFC4.IFCADVANCEDFACE' IN TYPEOF(Afs)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcAdvancedBrep : IfcManifoldSolidBrep, Global.IfcAdvancedBrep
	{
		public IfcAdvancedBrep() : base()
		{
		}
		public IfcAdvancedBrep(IfcClosedShell? Outer) : base (Outer)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Outer
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAdvancedBrepWithVoids
	/// SUBTYPE OF (IfcAdvancedBrep);
	/// Voids : SET [1:?] OF IfcClosedShell;
	/// WHERE
	/// VoidsHaveAdvancedFaces : SIZEOF (QUERY (Vsh <* Voids |
	/// SIZEOF (QUERY (Afs <* Vsh.CfsFaces |
	/// (NOT ('IFC4.IFCADVANCEDFACE' IN TYPEOF(Afs)))
	/// )) = 0
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcAdvancedBrepWithVoids : IfcAdvancedBrep, Global.IfcAdvancedBrepWithVoids
	{
		public virtual List<IfcClosedShell>? Voids { get; set; }
		public IfcAdvancedBrepWithVoids() : base()
		{
		}
		public IfcAdvancedBrepWithVoids(IfcClosedShell? Outer, List<IfcClosedShell>? Voids) : base (Outer)
		{
			this.Voids = Voids;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Outer,
				Voids
			};
		}
		public virtual List<Global.IfcClosedShell>? _Voids
		{
			get
			{
				if(Voids != null)
				{
					List<Global.IfcClosedShell>? items = new List<Global.IfcClosedShell>();
					foreach (IfcClosedShell item in Voids)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Voids = null;
				}
				else
				{
					Voids = new List<IfcClosedShell>();
					foreach(var val in value)
					{
						if(val is IfcClosedShell v)
						{
							Voids.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAdvancedFace
	/// SUBTYPE OF (IfcFaceSurface);
	/// WHERE
	/// ApplicableSurface : SIZEOF (
	/// ['IFC4.IFCELEMENTARYSURFACE',
	/// 'IFC4.IFCSWEPTSURFACE',
	/// 'IFC4.IFCBSPLINESURFACE'] *
	/// TYPEOF(SELF\IfcFaceSurface.FaceSurface)) = 1;
	/// RequiresEdgeCurve : SIZEOF(QUERY (ElpFbnds <*
	/// QUERY (Bnds <* SELF\IfcFace.Bounds |
	/// 'IFC4.IFCEDGELOOP' IN TYPEOF(Bnds.Bound)) |
	/// NOT (SIZEOF (QUERY (Oe <* ElpFbnds.Bound\IfcEdgeLoop.EdgeList |
	/// NOT('IFC4.IFCEDGECURVE' IN
	/// TYPEOF(Oe\IfcOrientedEdge.EdgeElement)
	/// ))) = 0
	/// ))) = 0;
	/// ApplicableEdgeCurves : SIZEOF(QUERY (ElpFbnds <*
	/// QUERY (Bnds <* SELF\IfcFace.Bounds |
	/// 'IFC4.IFCEDGELOOP' IN TYPEOF(Bnds.Bound)) |
	/// NOT (SIZEOF (QUERY (Oe <* ElpFbnds.Bound\IfcEdgeLoop.EdgeList |
	/// NOT (SIZEOF (['IFC4.IFCLINE',
	/// 'IFC4.IFCCONIC',
	/// 'IFC4.IFCPOLYLINE',
	/// 'IFC4.IFCBSPLINECURVE'] *
	/// TYPEOF(Oe\IfcOrientedEdge.EdgeElement\IfcEdgeCurve.EdgeGeometry)) = 1 )
	/// )) = 0
	/// ))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcAdvancedFace : IfcFaceSurface, Global.IfcAdvancedFace
	{
		public IfcAdvancedFace() : base()
		{
		}
		public IfcAdvancedFace(List<IfcFaceBound>? Bounds, IfcSurface? FaceSurface, IfcBoolean? SameSense) : base (Bounds, FaceSurface, SameSense)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Bounds,
				FaceSurface,
				SameSense
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAirTerminal
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcAirTerminalTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcAirTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirTerminalTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCAIRTERMINALTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAirTerminal : IfcFlowTerminal, Global.IfcAirTerminal
	{
		public virtual IfcAirTerminalTypeEnum? PredefinedType { get; set; }
		public IfcAirTerminal() : base()
		{
		}
		public IfcAirTerminal(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcAirTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcAirTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcAirTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAirTerminalBox
	/// SUBTYPE OF (IfcFlowController);
	/// PredefinedType : OPTIONAL IfcAirTerminalBoxTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcAirTerminalBoxTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirTerminalBoxTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCAIRTERMINALBOXTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAirTerminalBox : IfcFlowController, Global.IfcAirTerminalBox
	{
		public virtual IfcAirTerminalBoxTypeEnum? PredefinedType { get; set; }
		public IfcAirTerminalBox() : base()
		{
		}
		public IfcAirTerminalBox(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcAirTerminalBoxTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcAirTerminalBoxTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcAirTerminalBoxTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAirTerminalBoxType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcAirTerminalBoxTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcAirTerminalBoxTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirTerminalBoxTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAirTerminalBoxType : IfcFlowControllerType, Global.IfcAirTerminalBoxType
	{
		public virtual IfcAirTerminalBoxTypeEnum? PredefinedType { get; set; }
		public IfcAirTerminalBoxType() : base()
		{
		}
		public IfcAirTerminalBoxType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcAirTerminalBoxTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcAirTerminalBoxTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcAirTerminalBoxTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAirTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcAirTerminalTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcAirTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirTerminalTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAirTerminalType : IfcFlowTerminalType, Global.IfcAirTerminalType
	{
		public virtual IfcAirTerminalTypeEnum? PredefinedType { get; set; }
		public IfcAirTerminalType() : base()
		{
		}
		public IfcAirTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcAirTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcAirTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcAirTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAirToAirHeatRecovery
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcAirToAirHeatRecoveryTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcAirToAirHeatRecoveryTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirToAirHeatRecoveryTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCAIRTOAIRHEATRECOVERYTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAirToAirHeatRecovery : IfcEnergyConversionDevice, Global.IfcAirToAirHeatRecovery
	{
		public virtual IfcAirToAirHeatRecoveryTypeEnum? PredefinedType { get; set; }
		public IfcAirToAirHeatRecovery() : base()
		{
		}
		public IfcAirToAirHeatRecovery(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcAirToAirHeatRecoveryTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcAirToAirHeatRecoveryTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcAirToAirHeatRecoveryTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAirToAirHeatRecoveryType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcAirToAirHeatRecoveryTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcAirToAirHeatRecoveryTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirToAirHeatRecoveryTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAirToAirHeatRecoveryType : IfcEnergyConversionDeviceType, Global.IfcAirToAirHeatRecoveryType
	{
		public virtual IfcAirToAirHeatRecoveryTypeEnum? PredefinedType { get; set; }
		public IfcAirToAirHeatRecoveryType() : base()
		{
		}
		public IfcAirToAirHeatRecoveryType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcAirToAirHeatRecoveryTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcAirToAirHeatRecoveryTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcAirToAirHeatRecoveryTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAlarm
	/// SUBTYPE OF (IfcDistributionControlElement);
	/// PredefinedType : OPTIONAL IfcAlarmTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcAlarmTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAlarmTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCALARMTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAlarm : IfcDistributionControlElement, Global.IfcAlarm
	{
		public virtual IfcAlarmTypeEnum? PredefinedType { get; set; }
		public IfcAlarm() : base()
		{
		}
		public IfcAlarm(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcAlarmTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcAlarmTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcAlarmTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAlarmType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcAlarmTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcAlarmTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAlarmTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAlarmType : IfcDistributionControlElementType, Global.IfcAlarmType
	{
		public virtual IfcAlarmTypeEnum? PredefinedType { get; set; }
		public IfcAlarmType() : base()
		{
		}
		public IfcAlarmType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcAlarmTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcAlarmTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcAlarmTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotation
	/// SUBTYPE OF (IfcProduct);
	/// INVERSE
	/// ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
	/// END_ENTITY;
	/// <summary>
	public class IfcAnnotation : IfcProduct, Global.IfcAnnotation
	{
		public List<IfcRelContainedInSpatialStructure>? ContainedInStructure {get{return Model?.GetItems<IfcRelContainedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList();}}
		public IfcAnnotation() : base()
		{
		}
		public IfcAnnotation(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation
			};
		}
		public virtual List<Global.IfcRelContainedInSpatialStructure>? _ContainedInStructure
		{
			get
			{
				if(ContainedInStructure != null)
				{
					List<Global.IfcRelContainedInSpatialStructure>? items = new List<Global.IfcRelContainedInSpatialStructure>();
					foreach (IfcRelContainedInSpatialStructure item in ContainedInStructure)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationFillArea
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// OuterBoundary : IfcCurve;
	/// InnerBoundaries : OPTIONAL SET [1:?] OF IfcCurve;
	/// END_ENTITY;
	/// <summary>
	public class IfcAnnotationFillArea : IfcGeometricRepresentationItem, Global.IfcAnnotationFillArea
	{
		public virtual IfcCurve? OuterBoundary { get; set; }
		public virtual List<IfcCurve>? InnerBoundaries { get; set; }
		public IfcAnnotationFillArea() : base()
		{
		}
		public IfcAnnotationFillArea(IfcCurve? OuterBoundary, List<IfcCurve>? InnerBoundaries) : base ()
		{
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				OuterBoundary,
				InnerBoundaries
			};
		}
		public virtual Global.IfcCurve? _OuterBoundary
		{
			get
			{
				return OuterBoundary;
			}
			set
			{
				if(value is IfcCurve val)
				{
					OuterBoundary = val;
				}
				else if(value == null)
				{
					OuterBoundary = null;
				}
			}
		}
		public virtual List<Global.IfcCurve>? _InnerBoundaries
		{
			get
			{
				if(InnerBoundaries != null)
				{
					List<Global.IfcCurve>? items = new List<Global.IfcCurve>();
					foreach (IfcCurve item in InnerBoundaries)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					InnerBoundaries = null;
				}
				else
				{
					InnerBoundaries = new List<IfcCurve>();
					foreach(var val in value)
					{
						if(val is IfcCurve v)
						{
							InnerBoundaries.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcApplication;
	/// ApplicationDeveloper : IfcOrganization;
	/// Version : IfcLabel;
	/// ApplicationFullName : IfcLabel;
	/// ApplicationIdentifier : IfcIdentifier;
	/// UNIQUE
	/// UR1 : ApplicationIdentifier;
	/// UR2 : ApplicationFullName, Version;
	/// END_ENTITY;
	/// <summary>
	public class IfcApplication : Ifc_Entity, Global.IfcApplication
	{
		public virtual IfcOrganization? ApplicationDeveloper { get; set; }
		public virtual IfcLabel? Version { get; set; }
		public virtual IfcLabel? ApplicationFullName { get; set; }
		public virtual IfcIdentifier? ApplicationIdentifier { get; set; }
		public IfcApplication() : base()
		{
		}
		public IfcApplication(IfcOrganization? ApplicationDeveloper, IfcLabel? Version, IfcLabel? ApplicationFullName, IfcIdentifier? ApplicationIdentifier) : base ()
		{
			this.ApplicationDeveloper = ApplicationDeveloper;
			this.Version = Version;
			this.ApplicationFullName = ApplicationFullName;
			this.ApplicationIdentifier = ApplicationIdentifier;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ApplicationDeveloper,
				Version,
				ApplicationFullName,
				ApplicationIdentifier
			};
		}
		public virtual Global.IfcOrganization? _ApplicationDeveloper
		{
			get
			{
				return ApplicationDeveloper;
			}
			set
			{
				if(value is IfcOrganization val)
				{
					ApplicationDeveloper = val;
				}
				else if(value == null)
				{
					ApplicationDeveloper = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Version
		{
			get
			{
				return Version;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Version = val;
				}
				else if(value == null)
				{
					Version = null;
				}
			}
		}
		public virtual Global.IfcLabel? _ApplicationFullName
		{
			get
			{
				return ApplicationFullName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ApplicationFullName = val;
				}
				else if(value == null)
				{
					ApplicationFullName = null;
				}
			}
		}
		public virtual Global.IfcIdentifier? _ApplicationIdentifier
		{
			get
			{
				return ApplicationIdentifier;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					ApplicationIdentifier = val;
				}
				else if(value == null)
				{
					ApplicationIdentifier = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAppliedValue
	/// SUPERTYPE OF (ONEOF
	/// (IfcCostValue));
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// AppliedValue : OPTIONAL IfcAppliedValueSelect;
	/// UnitBasis : OPTIONAL IfcMeasureWithUnit;
	/// ApplicableDate : OPTIONAL IfcDate;
	/// FixedUntilDate : OPTIONAL IfcDate;
	/// Category : OPTIONAL IfcLabel;
	/// Condition : OPTIONAL IfcLabel;
	/// ArithmeticOperator : OPTIONAL IfcArithmeticOperatorEnum;
	/// Components : OPTIONAL LIST [1:?] OF IfcAppliedValue;
	/// INVERSE
	/// HasExternalReference : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
	/// END_ENTITY;
	/// <summary>
	public class IfcAppliedValue : Ifc_Entity, IfcMetricValueSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect, Global.IfcAppliedValue
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcAppliedValueSelect? AppliedValue { get; set; }
		public virtual IfcMeasureWithUnit? UnitBasis { get; set; }
		public virtual IfcDate? ApplicableDate { get; set; }
		public virtual IfcDate? FixedUntilDate { get; set; }
		public virtual IfcLabel? Category { get; set; }
		public virtual IfcLabel? Condition { get; set; }
		public virtual IfcArithmeticOperatorEnum? ArithmeticOperator { get; set; }
		public virtual List<IfcAppliedValue>? Components { get; set; }
		public List<IfcExternalReferenceRelationship>? HasExternalReference {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public IfcAppliedValue() : base()
		{
		}
		public IfcAppliedValue(IfcLabel? Name, IfcText? Description, IfcAppliedValueSelect? AppliedValue, IfcMeasureWithUnit? UnitBasis, IfcDate? ApplicableDate, IfcDate? FixedUntilDate, IfcLabel? Category, IfcLabel? Condition, IfcArithmeticOperatorEnum? ArithmeticOperator, List<IfcAppliedValue>? Components) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.AppliedValue = AppliedValue;
			this.UnitBasis = UnitBasis;
			this.ApplicableDate = ApplicableDate;
			this.FixedUntilDate = FixedUntilDate;
			this.Category = Category;
			this.Condition = Condition;
			this.ArithmeticOperator = ArithmeticOperator;
			this.Components = Components;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				AppliedValue,
				UnitBasis,
				ApplicableDate,
				FixedUntilDate,
				Category,
				Condition,
				ArithmeticOperator,
				Components
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcAppliedValueSelect? _AppliedValue
		{
			get
			{
				return AppliedValue;
			}
			set
			{
				if(value is IfcAppliedValueSelect val)
				{
					AppliedValue = val;
				}
				else if(value == null)
				{
					AppliedValue = null;
				}
			}
		}
		public virtual Global.IfcMeasureWithUnit? _UnitBasis
		{
			get
			{
				return UnitBasis;
			}
			set
			{
				if(value is IfcMeasureWithUnit val)
				{
					UnitBasis = val;
				}
				else if(value == null)
				{
					UnitBasis = null;
				}
			}
		}
		public virtual Global.IfcDate? _ApplicableDate
		{
			get
			{
				return ApplicableDate;
			}
			set
			{
				if(value is IfcDate val)
				{
					ApplicableDate = val;
				}
				else if(value == null)
				{
					ApplicableDate = null;
				}
			}
		}
		public virtual Global.IfcDate? _FixedUntilDate
		{
			get
			{
				return FixedUntilDate;
			}
			set
			{
				if(value is IfcDate val)
				{
					FixedUntilDate = val;
				}
				else if(value == null)
				{
					FixedUntilDate = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Category
		{
			get
			{
				return Category;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Category = val;
				}
				else if(value == null)
				{
					Category = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Condition
		{
			get
			{
				return Condition;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Condition = val;
				}
				else if(value == null)
				{
					Condition = null;
				}
			}
		}
		public virtual Global.IfcArithmeticOperatorEnum? _ArithmeticOperator
		{
			get
			{
				return ArithmeticOperator;
			}
			set
			{
				if(value is IfcArithmeticOperatorEnum val)
				{
					ArithmeticOperator = val;
				}
				else if(value == null)
				{
					ArithmeticOperator = null;
				}
			}
		}
		public virtual List<Global.IfcAppliedValue>? _Components
		{
			get
			{
				if(Components != null)
				{
					List<Global.IfcAppliedValue>? items = new List<Global.IfcAppliedValue>();
					foreach (IfcAppliedValue item in Components)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Components = null;
				}
				else
				{
					Components = new List<IfcAppliedValue>();
					foreach(var val in value)
					{
						if(val is IfcAppliedValue v)
						{
							Components.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _HasExternalReference
		{
			get
			{
				if(HasExternalReference != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in HasExternalReference)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcApproval;
	/// Identifier : OPTIONAL IfcIdentifier;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// TimeOfApproval : OPTIONAL IfcDateTime;
	/// Status : OPTIONAL IfcLabel;
	/// Level : OPTIONAL IfcLabel;
	/// Qualifier : OPTIONAL IfcText;
	/// RequestingApproval : OPTIONAL IfcActorSelect;
	/// GivingApproval : OPTIONAL IfcActorSelect;
	/// INVERSE
	/// HasExternalReferences : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
	/// ApprovedObjects : SET [0:?] OF IfcRelAssociatesApproval FOR RelatingApproval;
	/// ApprovedResources : SET [0:?] OF IfcResourceApprovalRelationship FOR RelatingApproval;
	/// IsRelatedWith : SET [0:?] OF IfcApprovalRelationship FOR RelatedApprovals;
	/// Relates : SET [0:?] OF IfcApprovalRelationship FOR RelatingApproval;
	/// WHERE
	/// HasIdentifierOrName : EXISTS (Identifier) OR EXISTS (Name);
	/// END_ENTITY;
	/// <summary>
	public class IfcApproval : Ifc_Entity, IfcResourceObjectSelect, Global.IfcApproval
	{
		public virtual IfcIdentifier? Identifier { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcDateTime? TimeOfApproval { get; set; }
		public virtual IfcLabel? Status { get; set; }
		public virtual IfcLabel? Level { get; set; }
		public virtual IfcText? Qualifier { get; set; }
		public virtual IfcActorSelect? RequestingApproval { get; set; }
		public virtual IfcActorSelect? GivingApproval { get; set; }
		public List<IfcExternalReferenceRelationship>? HasExternalReferences {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public List<IfcRelAssociatesApproval>? ApprovedObjects {get{return Model?.GetItems<IfcRelAssociatesApproval>().Where(x => x.RelatingApproval != null && x.RelatingApproval == this).ToList();}}
		public List<IfcResourceApprovalRelationship>? ApprovedResources {get{return Model?.GetItems<IfcResourceApprovalRelationship>().Where(x => x.RelatingApproval != null && x.RelatingApproval == this).ToList();}}
		public List<IfcApprovalRelationship>? IsRelatedWith {get{return Model?.GetItems<IfcApprovalRelationship>().Where(x => x.RelatedApprovals != null && x.RelatedApprovals.Contains(this)).ToList();}}
		public List<IfcApprovalRelationship>? Relates {get{return Model?.GetItems<IfcApprovalRelationship>().Where(x => x.RelatingApproval != null && x.RelatingApproval == this).ToList();}}
		public IfcApproval() : base()
		{
		}
		public IfcApproval(IfcIdentifier? Identifier, IfcLabel? Name, IfcText? Description, IfcDateTime? TimeOfApproval, IfcLabel? Status, IfcLabel? Level, IfcText? Qualifier, IfcActorSelect? RequestingApproval, IfcActorSelect? GivingApproval) : base ()
		{
			this.Identifier = Identifier;
			this.Name = Name;
			this.Description = Description;
			this.TimeOfApproval = TimeOfApproval;
			this.Status = Status;
			this.Level = Level;
			this.Qualifier = Qualifier;
			this.RequestingApproval = RequestingApproval;
			this.GivingApproval = GivingApproval;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Identifier,
				Name,
				Description,
				TimeOfApproval,
				Status,
				Level,
				Qualifier,
				RequestingApproval,
				GivingApproval
			};
		}
		public virtual Global.IfcIdentifier? _Identifier
		{
			get
			{
				return Identifier;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identifier = val;
				}
				else if(value == null)
				{
					Identifier = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _TimeOfApproval
		{
			get
			{
				return TimeOfApproval;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					TimeOfApproval = val;
				}
				else if(value == null)
				{
					TimeOfApproval = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Status
		{
			get
			{
				return Status;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Status = val;
				}
				else if(value == null)
				{
					Status = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Level
		{
			get
			{
				return Level;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Level = val;
				}
				else if(value == null)
				{
					Level = null;
				}
			}
		}
		public virtual Global.IfcText? _Qualifier
		{
			get
			{
				return Qualifier;
			}
			set
			{
				if(value is IfcText val)
				{
					Qualifier = val;
				}
				else if(value == null)
				{
					Qualifier = null;
				}
			}
		}
		public virtual Global.IfcActorSelect? _RequestingApproval
		{
			get
			{
				return RequestingApproval;
			}
			set
			{
				if(value is IfcActorSelect val)
				{
					RequestingApproval = val;
				}
				else if(value == null)
				{
					RequestingApproval = null;
				}
			}
		}
		public virtual Global.IfcActorSelect? _GivingApproval
		{
			get
			{
				return GivingApproval;
			}
			set
			{
				if(value is IfcActorSelect val)
				{
					GivingApproval = val;
				}
				else if(value == null)
				{
					GivingApproval = null;
				}
			}
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _HasExternalReferences
		{
			get
			{
				if(HasExternalReferences != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in HasExternalReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelAssociatesApproval>? _ApprovedObjects
		{
			get
			{
				if(ApprovedObjects != null)
				{
					List<Global.IfcRelAssociatesApproval>? items = new List<Global.IfcRelAssociatesApproval>();
					foreach (IfcRelAssociatesApproval item in ApprovedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcResourceApprovalRelationship>? _ApprovedResources
		{
			get
			{
				if(ApprovedResources != null)
				{
					List<Global.IfcResourceApprovalRelationship>? items = new List<Global.IfcResourceApprovalRelationship>();
					foreach (IfcResourceApprovalRelationship item in ApprovedResources)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcApprovalRelationship>? _IsRelatedWith
		{
			get
			{
				if(IsRelatedWith != null)
				{
					List<Global.IfcApprovalRelationship>? items = new List<Global.IfcApprovalRelationship>();
					foreach (IfcApprovalRelationship item in IsRelatedWith)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcApprovalRelationship>? _Relates
		{
			get
			{
				if(Relates != null)
				{
					List<Global.IfcApprovalRelationship>? items = new List<Global.IfcApprovalRelationship>();
					foreach (IfcApprovalRelationship item in Relates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcApprovalRelationship
	/// SUBTYPE OF (IfcResourceLevelRelationship);
	/// RelatingApproval : IfcApproval;
	/// RelatedApprovals : SET [1:?] OF IfcApproval;
	/// END_ENTITY;
	/// <summary>
	public class IfcApprovalRelationship : IfcResourceLevelRelationship, Global.IfcApprovalRelationship
	{
		public virtual IfcApproval? RelatingApproval { get; set; }
		public virtual List<IfcApproval>? RelatedApprovals { get; set; }
		public IfcApprovalRelationship() : base()
		{
		}
		public IfcApprovalRelationship(IfcLabel? Name, IfcText? Description, IfcApproval? RelatingApproval, List<IfcApproval>? RelatedApprovals) : base (Name, Description)
		{
			this.RelatingApproval = RelatingApproval;
			this.RelatedApprovals = RelatedApprovals;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingApproval,
				RelatedApprovals
			};
		}
		public virtual Global.IfcApproval? _RelatingApproval
		{
			get
			{
				return RelatingApproval;
			}
			set
			{
				if(value is IfcApproval val)
				{
					RelatingApproval = val;
				}
				else if(value == null)
				{
					RelatingApproval = null;
				}
			}
		}
		public virtual List<Global.IfcApproval>? _RelatedApprovals
		{
			get
			{
				if(RelatedApprovals != null)
				{
					List<Global.IfcApproval>? items = new List<Global.IfcApproval>();
					foreach (IfcApproval item in RelatedApprovals)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedApprovals = null;
				}
				else
				{
					RelatedApprovals = new List<IfcApproval>();
					foreach(var val in value)
					{
						if(val is IfcApproval v)
						{
							RelatedApprovals.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcArbitraryClosedProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcArbitraryProfileDefWithVoids))
	/// SUBTYPE OF (IfcProfileDef);
	/// OuterCurve : IfcCurve;
	/// WHERE
	/// WR1 : OuterCurve.Dim = 2;
	/// WR2 : NOT('IFC4.IFCLINE' IN TYPEOF(OuterCurve));
	/// WR3 : NOT('IFC4.IFCOFFSETCURVE2D' IN TYPEOF(OuterCurve));
	/// END_ENTITY;
	/// <summary>
	public class IfcArbitraryClosedProfileDef : IfcProfileDef, Global.IfcArbitraryClosedProfileDef
	{
		public virtual IfcCurve? OuterCurve { get; set; }
		public IfcArbitraryClosedProfileDef() : base()
		{
		}
		public IfcArbitraryClosedProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcCurve? OuterCurve) : base (ProfileType, ProfileName)
		{
			this.OuterCurve = OuterCurve;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				OuterCurve
			};
		}
		public virtual Global.IfcCurve? _OuterCurve
		{
			get
			{
				return OuterCurve;
			}
			set
			{
				if(value is IfcCurve val)
				{
					OuterCurve = val;
				}
				else if(value == null)
				{
					OuterCurve = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcArbitraryOpenProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcCenterLineProfileDef))
	/// SUBTYPE OF (IfcProfileDef);
	/// Curve : IfcBoundedCurve;
	/// WHERE
	/// WR11 : ('IFC4.IFCCENTERLINEPROFILEDEF' IN TYPEOF(SELF)) OR
	/// (SELF\IfcProfileDef.ProfileType = IfcProfileTypeEnum.CURVE);
	/// WR12 : Curve.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class IfcArbitraryOpenProfileDef : IfcProfileDef, Global.IfcArbitraryOpenProfileDef
	{
		public virtual IfcBoundedCurve? Curve { get; set; }
		public IfcArbitraryOpenProfileDef() : base()
		{
		}
		public IfcArbitraryOpenProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcBoundedCurve? Curve) : base (ProfileType, ProfileName)
		{
			this.Curve = Curve;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Curve
			};
		}
		public virtual Global.IfcBoundedCurve? _Curve
		{
			get
			{
				return Curve;
			}
			set
			{
				if(value is IfcBoundedCurve val)
				{
					Curve = val;
				}
				else if(value == null)
				{
					Curve = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcArbitraryProfileDefWithVoids
	/// SUBTYPE OF (IfcArbitraryClosedProfileDef);
	/// InnerCurves : SET [1:?] OF IfcCurve;
	/// WHERE
	/// WR1 : SELF\IfcProfileDef.ProfileType = AREA;
	/// WR2 : SIZEOF(QUERY(temp <* InnerCurves | temp.Dim <> 2)) = 0;
	/// WR3 : SIZEOF(QUERY(temp <* InnerCurves | 'IFC4.IFCLINE' IN TYPEOF(temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcArbitraryProfileDefWithVoids : IfcArbitraryClosedProfileDef, Global.IfcArbitraryProfileDefWithVoids
	{
		public virtual List<IfcCurve>? InnerCurves { get; set; }
		public IfcArbitraryProfileDefWithVoids() : base()
		{
		}
		public IfcArbitraryProfileDefWithVoids(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcCurve? OuterCurve, List<IfcCurve>? InnerCurves) : base (ProfileType, ProfileName, OuterCurve)
		{
			this.InnerCurves = InnerCurves;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				OuterCurve,
				InnerCurves
			};
		}
		public virtual List<Global.IfcCurve>? _InnerCurves
		{
			get
			{
				if(InnerCurves != null)
				{
					List<Global.IfcCurve>? items = new List<Global.IfcCurve>();
					foreach (IfcCurve item in InnerCurves)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					InnerCurves = null;
				}
				else
				{
					InnerCurves = new List<IfcCurve>();
					foreach(var val in value)
					{
						if(val is IfcCurve v)
						{
							InnerCurves.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAsset
	/// SUBTYPE OF (IfcGroup);
	/// Identification : OPTIONAL IfcIdentifier;
	/// OriginalValue : OPTIONAL IfcCostValue;
	/// CurrentValue : OPTIONAL IfcCostValue;
	/// TotalReplacementCost : OPTIONAL IfcCostValue;
	/// Owner : OPTIONAL IfcActorSelect;
	/// User : OPTIONAL IfcActorSelect;
	/// ResponsiblePerson : OPTIONAL IfcPerson;
	/// IncorporationDate : OPTIONAL IfcDate;
	/// DepreciatedValue : OPTIONAL IfcCostValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcAsset : IfcGroup, Global.IfcAsset
	{
		public virtual IfcIdentifier? Identification { get; set; }
		public virtual IfcCostValue? OriginalValue { get; set; }
		public virtual IfcCostValue? CurrentValue { get; set; }
		public virtual IfcCostValue? TotalReplacementCost { get; set; }
		public virtual IfcActorSelect? Owner { get; set; }
		public virtual IfcActorSelect? User { get; set; }
		public virtual IfcPerson? ResponsiblePerson { get; set; }
		public virtual IfcDate? IncorporationDate { get; set; }
		public virtual IfcCostValue? DepreciatedValue { get; set; }
		public IfcAsset() : base()
		{
		}
		public IfcAsset(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcCostValue? OriginalValue, IfcCostValue? CurrentValue, IfcCostValue? TotalReplacementCost, IfcActorSelect? Owner, IfcActorSelect? User, IfcPerson? ResponsiblePerson, IfcDate? IncorporationDate, IfcCostValue? DepreciatedValue) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.Identification = Identification;
			this.OriginalValue = OriginalValue;
			this.CurrentValue = CurrentValue;
			this.TotalReplacementCost = TotalReplacementCost;
			this.Owner = Owner;
			this.User = User;
			this.ResponsiblePerson = ResponsiblePerson;
			this.IncorporationDate = IncorporationDate;
			this.DepreciatedValue = DepreciatedValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				OriginalValue,
				CurrentValue,
				TotalReplacementCost,
				Owner,
				User,
				ResponsiblePerson,
				IncorporationDate,
				DepreciatedValue
			};
		}
		public virtual Global.IfcIdentifier? _Identification
		{
			get
			{
				return Identification;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identification = val;
				}
				else if(value == null)
				{
					Identification = null;
				}
			}
		}
		public virtual Global.IfcCostValue? _OriginalValue
		{
			get
			{
				return OriginalValue;
			}
			set
			{
				if(value is IfcCostValue val)
				{
					OriginalValue = val;
				}
				else if(value == null)
				{
					OriginalValue = null;
				}
			}
		}
		public virtual Global.IfcCostValue? _CurrentValue
		{
			get
			{
				return CurrentValue;
			}
			set
			{
				if(value is IfcCostValue val)
				{
					CurrentValue = val;
				}
				else if(value == null)
				{
					CurrentValue = null;
				}
			}
		}
		public virtual Global.IfcCostValue? _TotalReplacementCost
		{
			get
			{
				return TotalReplacementCost;
			}
			set
			{
				if(value is IfcCostValue val)
				{
					TotalReplacementCost = val;
				}
				else if(value == null)
				{
					TotalReplacementCost = null;
				}
			}
		}
		public virtual Global.IfcActorSelect? _Owner
		{
			get
			{
				return Owner;
			}
			set
			{
				if(value is IfcActorSelect val)
				{
					Owner = val;
				}
				else if(value == null)
				{
					Owner = null;
				}
			}
		}
		public virtual Global.IfcActorSelect? _User
		{
			get
			{
				return User;
			}
			set
			{
				if(value is IfcActorSelect val)
				{
					User = val;
				}
				else if(value == null)
				{
					User = null;
				}
			}
		}
		public virtual Global.IfcPerson? _ResponsiblePerson
		{
			get
			{
				return ResponsiblePerson;
			}
			set
			{
				if(value is IfcPerson val)
				{
					ResponsiblePerson = val;
				}
				else if(value == null)
				{
					ResponsiblePerson = null;
				}
			}
		}
		public virtual Global.IfcDate? _IncorporationDate
		{
			get
			{
				return IncorporationDate;
			}
			set
			{
				if(value is IfcDate val)
				{
					IncorporationDate = val;
				}
				else if(value == null)
				{
					IncorporationDate = null;
				}
			}
		}
		public virtual Global.IfcCostValue? _DepreciatedValue
		{
			get
			{
				return DepreciatedValue;
			}
			set
			{
				if(value is IfcCostValue val)
				{
					DepreciatedValue = val;
				}
				else if(value == null)
				{
					DepreciatedValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAsymmetricIShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// BottomFlangeWidth : IfcPositiveLengthMeasure;
	/// OverallDepth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// BottomFlangeThickness : IfcPositiveLengthMeasure;
	/// BottomFlangeFilletRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// TopFlangeWidth : IfcPositiveLengthMeasure;
	/// TopFlangeThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// TopFlangeFilletRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// BottomFlangeEdgeRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// BottomFlangeSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// TopFlangeEdgeRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// TopFlangeSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// WHERE
	/// ValidFlangeThickness : NOT(EXISTS(TopFlangeThickness)) OR ((BottomFlangeThickness + TopFlangeThickness) < OverallDepth);
	/// ValidWebThickness : (WebThickness < BottomFlangeWidth) AND (WebThickness < TopFlangeWidth);
	/// ValidBottomFilletRadius : (NOT(EXISTS(BottomFlangeFilletRadius))) OR
	/// (BottomFlangeFilletRadius <= (BottomFlangeWidth - WebThickness)/2.);
	/// ValidTopFilletRadius : (NOT(EXISTS(TopFlangeFilletRadius))) OR
	/// (TopFlangeFilletRadius <= (TopFlangeWidth - WebThickness)/2.);
	/// END_ENTITY;
	/// <summary>
	public class IfcAsymmetricIShapeProfileDef : IfcParameterizedProfileDef, Global.IfcAsymmetricIShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? BottomFlangeWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? OverallDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? BottomFlangeThickness { get; set; }
		public virtual IfcNonNegativeLengthMeasure? BottomFlangeFilletRadius { get; set; }
		public virtual IfcPositiveLengthMeasure? TopFlangeWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? TopFlangeThickness { get; set; }
		public virtual IfcNonNegativeLengthMeasure? TopFlangeFilletRadius { get; set; }
		public virtual IfcNonNegativeLengthMeasure? BottomFlangeEdgeRadius { get; set; }
		public virtual IfcPlaneAngleMeasure? BottomFlangeSlope { get; set; }
		public virtual IfcNonNegativeLengthMeasure? TopFlangeEdgeRadius { get; set; }
		public virtual IfcPlaneAngleMeasure? TopFlangeSlope { get; set; }
		public IfcAsymmetricIShapeProfileDef() : base()
		{
		}
		public IfcAsymmetricIShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? BottomFlangeWidth, IfcPositiveLengthMeasure? OverallDepth, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? BottomFlangeThickness, IfcNonNegativeLengthMeasure? BottomFlangeFilletRadius, IfcPositiveLengthMeasure? TopFlangeWidth, IfcPositiveLengthMeasure? TopFlangeThickness, IfcNonNegativeLengthMeasure? TopFlangeFilletRadius, IfcNonNegativeLengthMeasure? BottomFlangeEdgeRadius, IfcPlaneAngleMeasure? BottomFlangeSlope, IfcNonNegativeLengthMeasure? TopFlangeEdgeRadius, IfcPlaneAngleMeasure? TopFlangeSlope) : base (ProfileType, ProfileName, Position)
		{
			this.BottomFlangeWidth = BottomFlangeWidth;
			this.OverallDepth = OverallDepth;
			this.WebThickness = WebThickness;
			this.BottomFlangeThickness = BottomFlangeThickness;
			this.BottomFlangeFilletRadius = BottomFlangeFilletRadius;
			this.TopFlangeWidth = TopFlangeWidth;
			this.TopFlangeThickness = TopFlangeThickness;
			this.TopFlangeFilletRadius = TopFlangeFilletRadius;
			this.BottomFlangeEdgeRadius = BottomFlangeEdgeRadius;
			this.BottomFlangeSlope = BottomFlangeSlope;
			this.TopFlangeEdgeRadius = TopFlangeEdgeRadius;
			this.TopFlangeSlope = TopFlangeSlope;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				BottomFlangeWidth,
				OverallDepth,
				WebThickness,
				BottomFlangeThickness,
				BottomFlangeFilletRadius,
				TopFlangeWidth,
				TopFlangeThickness,
				TopFlangeFilletRadius,
				BottomFlangeEdgeRadius,
				BottomFlangeSlope,
				TopFlangeEdgeRadius,
				TopFlangeSlope
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _BottomFlangeWidth
		{
			get
			{
				return BottomFlangeWidth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					BottomFlangeWidth = val;
				}
				else if(value == null)
				{
					BottomFlangeWidth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallDepth
		{
			get
			{
				return OverallDepth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					OverallDepth = val;
				}
				else if(value == null)
				{
					OverallDepth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _WebThickness
		{
			get
			{
				return WebThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					WebThickness = val;
				}
				else if(value == null)
				{
					WebThickness = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _BottomFlangeThickness
		{
			get
			{
				return BottomFlangeThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					BottomFlangeThickness = val;
				}
				else if(value == null)
				{
					BottomFlangeThickness = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _BottomFlangeFilletRadius
		{
			get
			{
				return BottomFlangeFilletRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					BottomFlangeFilletRadius = val;
				}
				else if(value == null)
				{
					BottomFlangeFilletRadius = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _TopFlangeWidth
		{
			get
			{
				return TopFlangeWidth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					TopFlangeWidth = val;
				}
				else if(value == null)
				{
					TopFlangeWidth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _TopFlangeThickness
		{
			get
			{
				return TopFlangeThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					TopFlangeThickness = val;
				}
				else if(value == null)
				{
					TopFlangeThickness = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _TopFlangeFilletRadius
		{
			get
			{
				return TopFlangeFilletRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					TopFlangeFilletRadius = val;
				}
				else if(value == null)
				{
					TopFlangeFilletRadius = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _BottomFlangeEdgeRadius
		{
			get
			{
				return BottomFlangeEdgeRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					BottomFlangeEdgeRadius = val;
				}
				else if(value == null)
				{
					BottomFlangeEdgeRadius = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _BottomFlangeSlope
		{
			get
			{
				return BottomFlangeSlope;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					BottomFlangeSlope = val;
				}
				else if(value == null)
				{
					BottomFlangeSlope = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _TopFlangeEdgeRadius
		{
			get
			{
				return TopFlangeEdgeRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					TopFlangeEdgeRadius = val;
				}
				else if(value == null)
				{
					TopFlangeEdgeRadius = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _TopFlangeSlope
		{
			get
			{
				return TopFlangeSlope;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					TopFlangeSlope = val;
				}
				else if(value == null)
				{
					TopFlangeSlope = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAudioVisualAppliance
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcAudioVisualApplianceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcAudioVisualApplianceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAudioVisualApplianceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCAUDIOVISUALAPPLIANCETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAudioVisualAppliance : IfcFlowTerminal, Global.IfcAudioVisualAppliance
	{
		public virtual IfcAudioVisualApplianceTypeEnum? PredefinedType { get; set; }
		public IfcAudioVisualAppliance() : base()
		{
		}
		public IfcAudioVisualAppliance(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcAudioVisualApplianceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcAudioVisualApplianceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcAudioVisualApplianceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAudioVisualApplianceType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcAudioVisualApplianceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcAudioVisualApplianceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAudioVisualApplianceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAudioVisualApplianceType : IfcFlowTerminalType, Global.IfcAudioVisualApplianceType
	{
		public virtual IfcAudioVisualApplianceTypeEnum? PredefinedType { get; set; }
		public IfcAudioVisualApplianceType() : base()
		{
		}
		public IfcAudioVisualApplianceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcAudioVisualApplianceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcAudioVisualApplianceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcAudioVisualApplianceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAxis1Placement
	/// SUBTYPE OF (IfcPlacement);
	/// Axis : OPTIONAL IfcDirection;
	/// DERIVE
	/// Z : IfcDirection := NVL (IfcNormalise(Axis), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
	/// WHERE
	/// AxisIs3D : (NOT (EXISTS (Axis))) OR (Axis.Dim = 3);
	/// LocationIs3D : SELF\IfcPlacement.Location.Dim = 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcAxis1Placement : IfcPlacement, Global.IfcAxis1Placement
	{
		public virtual IfcDirection? Axis { get; set; }
		//DERIVE
		public virtual IfcDirection? Z {get {return null;}}
		public IfcAxis1Placement() : base()
		{
		}
		public IfcAxis1Placement(IfcCartesianPoint? Location, IfcDirection? Axis) : base (Location)
		{
			this.Axis = Axis;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				Axis
			};
		}
		public virtual Global.IfcDirection? _Axis
		{
			get
			{
				return Axis;
			}
			set
			{
				if(value is IfcDirection val)
				{
					Axis = val;
				}
				else if(value == null)
				{
					Axis = null;
				}
			}
		}
		public virtual Global.IfcDirection? _Z
		{
			get
			{
				return Z;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAxis2Placement2D
	/// SUBTYPE OF (IfcPlacement);
	/// RefDirection : OPTIONAL IfcDirection;
	/// DERIVE
	/// P : LIST [2:2] OF IfcDirection := IfcBuild2Axes(RefDirection);
	/// WHERE
	/// RefDirIs2D : (NOT (EXISTS (RefDirection))) OR (RefDirection.Dim = 2);
	/// LocationIs2D : SELF\IfcPlacement.Location.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class IfcAxis2Placement2D : IfcPlacement, IfcAxis2Placement, Global.IfcAxis2Placement2D
	{
		public virtual IfcDirection? RefDirection { get; set; }
		//DERIVE
		public virtual List<IfcDirection>? P {get {return null;}}
		public IfcAxis2Placement2D() : base()
		{
		}
		public IfcAxis2Placement2D(IfcCartesianPoint? Location, IfcDirection? RefDirection) : base (Location)
		{
			this.RefDirection = RefDirection;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				RefDirection
			};
		}
		public virtual Global.IfcDirection? _RefDirection
		{
			get
			{
				return RefDirection;
			}
			set
			{
				if(value is IfcDirection val)
				{
					RefDirection = val;
				}
				else if(value == null)
				{
					RefDirection = null;
				}
			}
		}
		public virtual List<Global.IfcDirection>? _P
		{
			get
			{
				if(P != null)
				{
					List<Global.IfcDirection>? items = new List<Global.IfcDirection>();
					foreach (IfcDirection item in P)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAxis2Placement3D
	/// SUBTYPE OF (IfcPlacement);
	/// Axis : OPTIONAL IfcDirection;
	/// RefDirection : OPTIONAL IfcDirection;
	/// DERIVE
	/// P : LIST [3:3] OF IfcDirection := IfcBuildAxes(Axis, RefDirection);
	/// WHERE
	/// LocationIs3D : SELF\IfcPlacement.Location.Dim = 3;
	/// AxisIs3D : (NOT (EXISTS (Axis))) OR (Axis.Dim = 3);
	/// RefDirIs3D : (NOT (EXISTS (RefDirection))) OR (RefDirection.Dim = 3);
	/// AxisToRefDirPosition : (NOT (EXISTS (Axis))) OR (NOT (EXISTS (RefDirection))) OR (IfcCrossProduct(Axis,RefDirection).Magnitude > 0.0);
	/// AxisAndRefDirProvision : NOT ((EXISTS (Axis)) XOR (EXISTS (RefDirection)));
	/// END_ENTITY;
	/// <summary>
	public class IfcAxis2Placement3D : IfcPlacement, IfcAxis2Placement, Global.IfcAxis2Placement3D
	{
		public virtual IfcDirection? Axis { get; set; }
		public virtual IfcDirection? RefDirection { get; set; }
		//DERIVE
		public virtual List<IfcDirection>? P {get {return null;}}
		public IfcAxis2Placement3D() : base()
		{
		}
		public IfcAxis2Placement3D(IfcCartesianPoint? Location, IfcDirection? Axis, IfcDirection? RefDirection) : base (Location)
		{
			this.Axis = Axis;
			this.RefDirection = RefDirection;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				Axis,
				RefDirection
			};
		}
		public virtual Global.IfcDirection? _Axis
		{
			get
			{
				return Axis;
			}
			set
			{
				if(value is IfcDirection val)
				{
					Axis = val;
				}
				else if(value == null)
				{
					Axis = null;
				}
			}
		}
		public virtual Global.IfcDirection? _RefDirection
		{
			get
			{
				return RefDirection;
			}
			set
			{
				if(value is IfcDirection val)
				{
					RefDirection = val;
				}
				else if(value == null)
				{
					RefDirection = null;
				}
			}
		}
		public virtual List<Global.IfcDirection>? _P
		{
			get
			{
				if(P != null)
				{
					List<Global.IfcDirection>? items = new List<Global.IfcDirection>();
					foreach (IfcDirection item in P)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBSplineCurve
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBSplineCurveWithKnots))
	/// SUBTYPE OF (IfcBoundedCurve);
	/// Degree : IfcInteger;
	/// ControlPointsList : LIST [2:?] OF IfcCartesianPoint;
	/// CurveForm : IfcBSplineCurveForm;
	/// ClosedCurve : IfcLogical;
	/// SelfIntersect : IfcLogical;
	/// DERIVE
	/// UpperIndexOnControlPoints : IfcInteger := (SIZEOF(ControlPointsList) - 1);
	/// ControlPoints : ARRAY [0:UpperIndexOnControlPoints] OF IfcCartesianPoint := IfcListToArray(ControlPointsList,0,UpperIndexOnControlPoints);
	/// WHERE
	/// SameDim : SIZEOF(QUERY(Temp <* ControlPointsList |
	/// Temp.Dim <> ControlPointsList[1].Dim))
	/// = 0;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBSplineCurve : IfcBoundedCurve, Global.IfcBSplineCurve
	{
		public virtual IfcInteger? Degree { get; set; }
		public virtual List<IfcCartesianPoint>? ControlPointsList { get; set; }
		public virtual IfcBSplineCurveForm? CurveForm { get; set; }
		public virtual IfcLogical? ClosedCurve { get; set; }
		public virtual IfcLogical? SelfIntersect { get; set; }
		//DERIVE
		public virtual IfcInteger? UpperIndexOnControlPoints {get {return null;}}
		//DERIVE
		public virtual List<IfcCartesianPoint>? ControlPoints {get {return null;}}
		public IfcBSplineCurve() : base()
		{
		}
		public IfcBSplineCurve(IfcInteger? Degree, List<IfcCartesianPoint>? ControlPointsList, IfcBSplineCurveForm? CurveForm, IfcLogical? ClosedCurve, IfcLogical? SelfIntersect) : base ()
		{
			this.Degree = Degree;
			this.ControlPointsList = ControlPointsList;
			this.CurveForm = CurveForm;
			this.ClosedCurve = ClosedCurve;
			this.SelfIntersect = SelfIntersect;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Degree,
				ControlPointsList,
				CurveForm,
				ClosedCurve,
				SelfIntersect
			};
		}
		public virtual Global.IfcInteger? _Degree
		{
			get
			{
				return Degree;
			}
			set
			{
				if(value is IfcInteger val)
				{
					Degree = val;
				}
				else if(value == null)
				{
					Degree = null;
				}
			}
		}
		public virtual List<Global.IfcCartesianPoint>? _ControlPointsList
		{
			get
			{
				if(ControlPointsList != null)
				{
					List<Global.IfcCartesianPoint>? items = new List<Global.IfcCartesianPoint>();
					foreach (IfcCartesianPoint item in ControlPointsList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ControlPointsList = null;
				}
				else
				{
					ControlPointsList = new List<IfcCartesianPoint>();
					foreach(var val in value)
					{
						if(val is IfcCartesianPoint v)
						{
							ControlPointsList.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcBSplineCurveForm? _CurveForm
		{
			get
			{
				return CurveForm;
			}
			set
			{
				if(value is IfcBSplineCurveForm val)
				{
					CurveForm = val;
				}
				else if(value == null)
				{
					CurveForm = null;
				}
			}
		}
		public virtual Global.IfcLogical? _ClosedCurve
		{
			get
			{
				return ClosedCurve;
			}
			set
			{
				if(value is IfcLogical val)
				{
					ClosedCurve = val;
				}
				else if(value == null)
				{
					ClosedCurve = null;
				}
			}
		}
		public virtual Global.IfcLogical? _SelfIntersect
		{
			get
			{
				return SelfIntersect;
			}
			set
			{
				if(value is IfcLogical val)
				{
					SelfIntersect = val;
				}
				else if(value == null)
				{
					SelfIntersect = null;
				}
			}
		}
		public virtual Global.IfcInteger? _UpperIndexOnControlPoints
		{
			get
			{
				return UpperIndexOnControlPoints;
			}
		}
		public virtual List<Global.IfcCartesianPoint>? _ControlPoints
		{
			get
			{
				if(ControlPoints != null)
				{
					List<Global.IfcCartesianPoint>? items = new List<Global.IfcCartesianPoint>();
					foreach (IfcCartesianPoint item in ControlPoints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBSplineCurveWithKnots
	/// SUPERTYPE OF (ONEOF
	/// (IfcRationalBSplineCurveWithKnots))
	/// SUBTYPE OF (IfcBSplineCurve);
	/// KnotMultiplicities : LIST [2:?] OF IfcInteger;
	/// Knots : LIST [2:?] OF IfcParameterValue;
	/// KnotSpec : IfcKnotType;
	/// DERIVE
	/// UpperIndexOnKnots : IfcInteger := SIZEOF(Knots);
	/// WHERE
	/// ConsistentBSpline : IfcConstraintsParamBSpline(Degree, UpperIndexOnKnots,
	/// UpperIndexOnControlPoints, KnotMultiplicities, Knots);
	/// CorrespondingKnotLists : SIZEOF(KnotMultiplicities) = UpperIndexOnKnots;
	/// END_ENTITY;
	/// <summary>
	public class IfcBSplineCurveWithKnots : IfcBSplineCurve, Global.IfcBSplineCurveWithKnots
	{
		public virtual List<IfcInteger>? KnotMultiplicities { get; set; }
		public virtual List<IfcParameterValue>? Knots { get; set; }
		public virtual IfcKnotType? KnotSpec { get; set; }
		//DERIVE
		public virtual IfcInteger? UpperIndexOnKnots {get {return null;}}
		public IfcBSplineCurveWithKnots() : base()
		{
		}
		public IfcBSplineCurveWithKnots(IfcInteger? Degree, List<IfcCartesianPoint>? ControlPointsList, IfcBSplineCurveForm? CurveForm, IfcLogical? ClosedCurve, IfcLogical? SelfIntersect, List<IfcInteger>? KnotMultiplicities, List<IfcParameterValue>? Knots, IfcKnotType? KnotSpec) : base (Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect)
		{
			this.KnotMultiplicities = KnotMultiplicities;
			this.Knots = Knots;
			this.KnotSpec = KnotSpec;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Degree,
				ControlPointsList,
				CurveForm,
				ClosedCurve,
				SelfIntersect,
				KnotMultiplicities,
				Knots,
				KnotSpec
			};
		}
		public virtual List<Global.IfcInteger>? _KnotMultiplicities
		{
			get
			{
				if(KnotMultiplicities != null)
				{
					List<Global.IfcInteger>? items = new List<Global.IfcInteger>();
					foreach (IfcInteger item in KnotMultiplicities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					KnotMultiplicities = null;
				}
				else
				{
					KnotMultiplicities = new List<IfcInteger>();
					foreach(var val in value)
					{
						if(val is IfcInteger v)
						{
							KnotMultiplicities.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcParameterValue>? _Knots
		{
			get
			{
				if(Knots != null)
				{
					List<Global.IfcParameterValue>? items = new List<Global.IfcParameterValue>();
					foreach (IfcParameterValue item in Knots)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Knots = null;
				}
				else
				{
					Knots = new List<IfcParameterValue>();
					foreach(var val in value)
					{
						if(val is IfcParameterValue v)
						{
							Knots.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcKnotType? _KnotSpec
		{
			get
			{
				return KnotSpec;
			}
			set
			{
				if(value is IfcKnotType val)
				{
					KnotSpec = val;
				}
				else if(value == null)
				{
					KnotSpec = null;
				}
			}
		}
		public virtual Global.IfcInteger? _UpperIndexOnKnots
		{
			get
			{
				return UpperIndexOnKnots;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBSplineSurface
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBSplineSurfaceWithKnots))
	/// SUBTYPE OF (IfcBoundedSurface);
	/// UDegree : IfcInteger;
	/// VDegree : IfcInteger;
	/// ControlPointsList : LIST [2:?] OF LIST [2:?] OF IfcCartesianPoint;
	/// SurfaceForm : IfcBSplineSurfaceForm;
	/// UClosed : IfcLogical;
	/// VClosed : IfcLogical;
	/// SelfIntersect : IfcLogical;
	/// DERIVE
	/// UUpper : IfcInteger := SIZEOF(ControlPointsList) - 1;
	/// VUpper : IfcInteger := SIZEOF(ControlPointsList[1]) - 1;
	/// ControlPoints : ARRAY [0:UUpper] OF ARRAY [0:VUpper] OF IfcCartesianPoint := IfcMakeArrayOfArray(ControlPointsList,
	/// 0,UUpper,0,VUpper);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBSplineSurface : IfcBoundedSurface, Global.IfcBSplineSurface
	{
		public virtual IfcInteger? UDegree { get; set; }
		public virtual IfcInteger? VDegree { get; set; }
		public virtual List<List<IfcCartesianPoint>>? ControlPointsList { get; set; }
		public virtual IfcBSplineSurfaceForm? SurfaceForm { get; set; }
		public virtual IfcLogical? UClosed { get; set; }
		public virtual IfcLogical? VClosed { get; set; }
		public virtual IfcLogical? SelfIntersect { get; set; }
		//DERIVE
		public virtual IfcInteger? UUpper {get {return null;}}
		//DERIVE
		public virtual IfcInteger? VUpper {get {return null;}}
		//DERIVE
		public virtual List<List<IfcCartesianPoint>>? ControlPoints {get {return null;}}
		public IfcBSplineSurface() : base()
		{
		}
		public IfcBSplineSurface(IfcInteger? UDegree, IfcInteger? VDegree, List<List<IfcCartesianPoint>>? ControlPointsList, IfcBSplineSurfaceForm? SurfaceForm, IfcLogical? UClosed, IfcLogical? VClosed, IfcLogical? SelfIntersect) : base ()
		{
			this.UDegree = UDegree;
			this.VDegree = VDegree;
			this.ControlPointsList = ControlPointsList;
			this.SurfaceForm = SurfaceForm;
			this.UClosed = UClosed;
			this.VClosed = VClosed;
			this.SelfIntersect = SelfIntersect;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				UDegree,
				VDegree,
				ControlPointsList,
				SurfaceForm,
				UClosed,
				VClosed,
				SelfIntersect
			};
		}
		public virtual Global.IfcInteger? _UDegree
		{
			get
			{
				return UDegree;
			}
			set
			{
				if(value is IfcInteger val)
				{
					UDegree = val;
				}
				else if(value == null)
				{
					UDegree = null;
				}
			}
		}
		public virtual Global.IfcInteger? _VDegree
		{
			get
			{
				return VDegree;
			}
			set
			{
				if(value is IfcInteger val)
				{
					VDegree = val;
				}
				else if(value == null)
				{
					VDegree = null;
				}
			}
		}
		public virtual List<List<Global.IfcCartesianPoint>>? _ControlPointsList
		{
			get
			{
				if(ControlPointsList != null)
				{
					List<List<Global.IfcCartesianPoint>>? items = new List<List<Global.IfcCartesianPoint>>();
					foreach (List<IfcCartesianPoint> item1s in ControlPointsList)
					{
						List<Global.IfcCartesianPoint>? resultItems = new List<Global.IfcCartesianPoint>();
						foreach (IfcCartesianPoint item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ControlPointsList = null;
				}
				else
				{
					ControlPointsList = new List<List<IfcCartesianPoint>>();
					foreach(var vals in value)
					{
						if(vals != null)
						{
							List<IfcCartesianPoint> items = new List<IfcCartesianPoint>();
							foreach(var val in vals)
							{
								if(val is IfcCartesianPoint v)
								{
									items.Add(v);
								}
							}
							ControlPointsList.Add(items);
						}
					}
				}
			}
		}
		public virtual Global.IfcBSplineSurfaceForm? _SurfaceForm
		{
			get
			{
				return SurfaceForm;
			}
			set
			{
				if(value is IfcBSplineSurfaceForm val)
				{
					SurfaceForm = val;
				}
				else if(value == null)
				{
					SurfaceForm = null;
				}
			}
		}
		public virtual Global.IfcLogical? _UClosed
		{
			get
			{
				return UClosed;
			}
			set
			{
				if(value is IfcLogical val)
				{
					UClosed = val;
				}
				else if(value == null)
				{
					UClosed = null;
				}
			}
		}
		public virtual Global.IfcLogical? _VClosed
		{
			get
			{
				return VClosed;
			}
			set
			{
				if(value is IfcLogical val)
				{
					VClosed = val;
				}
				else if(value == null)
				{
					VClosed = null;
				}
			}
		}
		public virtual Global.IfcLogical? _SelfIntersect
		{
			get
			{
				return SelfIntersect;
			}
			set
			{
				if(value is IfcLogical val)
				{
					SelfIntersect = val;
				}
				else if(value == null)
				{
					SelfIntersect = null;
				}
			}
		}
		public virtual Global.IfcInteger? _UUpper
		{
			get
			{
				return UUpper;
			}
		}
		public virtual Global.IfcInteger? _VUpper
		{
			get
			{
				return VUpper;
			}
		}
		public virtual List<List<Global.IfcCartesianPoint>>? _ControlPoints
		{
			get
			{
				if(ControlPoints != null)
				{
					List<List<Global.IfcCartesianPoint>>? items = new List<List<Global.IfcCartesianPoint>>();
					foreach (List<IfcCartesianPoint> item1s in ControlPoints)
					{
						List<Global.IfcCartesianPoint>? resultItems = new List<Global.IfcCartesianPoint>();
						foreach (IfcCartesianPoint item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBSplineSurfaceWithKnots
	/// SUPERTYPE OF (ONEOF
	/// (IfcRationalBSplineSurfaceWithKnots))
	/// SUBTYPE OF (IfcBSplineSurface);
	/// UMultiplicities : LIST [2:?] OF IfcInteger;
	/// VMultiplicities : LIST [2:?] OF IfcInteger;
	/// UKnots : LIST [2:?] OF IfcParameterValue;
	/// VKnots : LIST [2:?] OF IfcParameterValue;
	/// KnotSpec : IfcKnotType;
	/// DERIVE
	/// KnotVUpper : IfcInteger := SIZEOF(VKnots);
	/// KnotUUpper : IfcInteger := SIZEOF(UKnots);
	/// WHERE
	/// UDirectionConstraints : IfcConstraintsParamBSpline (
	/// SELF\IfcBSplineSurface.UDegree, KnotUUpper,
	/// SELF\IfcBSplineSurface.UUpper, UMultiplicities, UKnots);
	/// VDirectionConstraints : IfcConstraintsParamBSpline (
	/// SELF\IfcBSplineSurface.VDegree, KnotVUpper,
	/// SELF\IfcBSplineSurface.VUpper, VMultiplicities, VKnots);
	/// CorrespondingULists : SIZEOF(UMultiplicities) = KnotUUpper;
	/// CorrespondingVLists : SIZEOF(VMultiplicities) = KnotVUpper;
	/// END_ENTITY;
	/// <summary>
	public class IfcBSplineSurfaceWithKnots : IfcBSplineSurface, Global.IfcBSplineSurfaceWithKnots
	{
		public virtual List<IfcInteger>? UMultiplicities { get; set; }
		public virtual List<IfcInteger>? VMultiplicities { get; set; }
		public virtual List<IfcParameterValue>? UKnots { get; set; }
		public virtual List<IfcParameterValue>? VKnots { get; set; }
		public virtual IfcKnotType? KnotSpec { get; set; }
		//DERIVE
		public virtual IfcInteger? KnotVUpper {get {return null;}}
		//DERIVE
		public virtual IfcInteger? KnotUUpper {get {return null;}}
		public IfcBSplineSurfaceWithKnots() : base()
		{
		}
		public IfcBSplineSurfaceWithKnots(IfcInteger? UDegree, IfcInteger? VDegree, List<List<IfcCartesianPoint>>? ControlPointsList, IfcBSplineSurfaceForm? SurfaceForm, IfcLogical? UClosed, IfcLogical? VClosed, IfcLogical? SelfIntersect, List<IfcInteger>? UMultiplicities, List<IfcInteger>? VMultiplicities, List<IfcParameterValue>? UKnots, List<IfcParameterValue>? VKnots, IfcKnotType? KnotSpec) : base (UDegree, VDegree, ControlPointsList, SurfaceForm, UClosed, VClosed, SelfIntersect)
		{
			this.UMultiplicities = UMultiplicities;
			this.VMultiplicities = VMultiplicities;
			this.UKnots = UKnots;
			this.VKnots = VKnots;
			this.KnotSpec = KnotSpec;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				UDegree,
				VDegree,
				ControlPointsList,
				SurfaceForm,
				UClosed,
				VClosed,
				SelfIntersect,
				UMultiplicities,
				VMultiplicities,
				UKnots,
				VKnots,
				KnotSpec
			};
		}
		public virtual List<Global.IfcInteger>? _UMultiplicities
		{
			get
			{
				if(UMultiplicities != null)
				{
					List<Global.IfcInteger>? items = new List<Global.IfcInteger>();
					foreach (IfcInteger item in UMultiplicities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					UMultiplicities = null;
				}
				else
				{
					UMultiplicities = new List<IfcInteger>();
					foreach(var val in value)
					{
						if(val is IfcInteger v)
						{
							UMultiplicities.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcInteger>? _VMultiplicities
		{
			get
			{
				if(VMultiplicities != null)
				{
					List<Global.IfcInteger>? items = new List<Global.IfcInteger>();
					foreach (IfcInteger item in VMultiplicities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					VMultiplicities = null;
				}
				else
				{
					VMultiplicities = new List<IfcInteger>();
					foreach(var val in value)
					{
						if(val is IfcInteger v)
						{
							VMultiplicities.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcParameterValue>? _UKnots
		{
			get
			{
				if(UKnots != null)
				{
					List<Global.IfcParameterValue>? items = new List<Global.IfcParameterValue>();
					foreach (IfcParameterValue item in UKnots)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					UKnots = null;
				}
				else
				{
					UKnots = new List<IfcParameterValue>();
					foreach(var val in value)
					{
						if(val is IfcParameterValue v)
						{
							UKnots.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcParameterValue>? _VKnots
		{
			get
			{
				if(VKnots != null)
				{
					List<Global.IfcParameterValue>? items = new List<Global.IfcParameterValue>();
					foreach (IfcParameterValue item in VKnots)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					VKnots = null;
				}
				else
				{
					VKnots = new List<IfcParameterValue>();
					foreach(var val in value)
					{
						if(val is IfcParameterValue v)
						{
							VKnots.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcKnotType? _KnotSpec
		{
			get
			{
				return KnotSpec;
			}
			set
			{
				if(value is IfcKnotType val)
				{
					KnotSpec = val;
				}
				else if(value == null)
				{
					KnotSpec = null;
				}
			}
		}
		public virtual Global.IfcInteger? _KnotVUpper
		{
			get
			{
				return KnotVUpper;
			}
		}
		public virtual Global.IfcInteger? _KnotUUpper
		{
			get
			{
				return KnotUUpper;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBeam
	/// SUPERTYPE OF (ONEOF
	/// (IfcBeamStandardCase))
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcBeamTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcBeamTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBeamTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCBEAMTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcBeam : IfcBuildingElement, Global.IfcBeam
	{
		public virtual IfcBeamTypeEnum? PredefinedType { get; set; }
		public IfcBeam() : base()
		{
		}
		public IfcBeam(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcBeamTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcBeamTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcBeamTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBeamStandardCase
	/// SUBTYPE OF (IfcBeam);
	/// WHERE
	/// HasMaterialProfileSetUsage : SIZEOF (QUERY(temp <* USEDIN(SELF, 'IFC4.IFCRELASSOCIATES.RELATEDOBJECTS') |
	/// ('IFC4.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)) AND
	/// ('IFC4.IFCMATERIALPROFILESETUSAGE' IN TYPEOF(temp.RelatingMaterial))
	/// )) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcBeamStandardCase : IfcBeam, Global.IfcBeamStandardCase
	{
		public IfcBeamStandardCase() : base()
		{
		}
		public IfcBeamStandardCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcBeamTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBeamType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcBeamTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcBeamTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBeamTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcBeamType : IfcBuildingElementType, Global.IfcBeamType
	{
		public virtual IfcBeamTypeEnum? PredefinedType { get; set; }
		public IfcBeamType() : base()
		{
		}
		public IfcBeamType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcBeamTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcBeamTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcBeamTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBlobTexture
	/// SUBTYPE OF (IfcSurfaceTexture);
	/// RasterFormat : IfcIdentifier;
	/// RasterCode : IfcBinary;
	/// WHERE
	/// SupportedRasterFormat : SELF.RasterFormat IN ['BMP', 'JPG', 'GIF', 'PNG'];
	/// RasterCodeByteStream : BLENGTH(RasterCode) MOD 8 = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcBlobTexture : IfcSurfaceTexture, Global.IfcBlobTexture
	{
		public virtual IfcIdentifier? RasterFormat { get; set; }
		public virtual IfcBinary? RasterCode { get; set; }
		public IfcBlobTexture() : base()
		{
		}
		public IfcBlobTexture(IfcBoolean? RepeatS, IfcBoolean? RepeatT, IfcIdentifier? Mode, IfcCartesianTransformationOperator2D? TextureTransform, List<IfcIdentifier>? Parameter, IfcIdentifier? RasterFormat, IfcBinary? RasterCode) : base (RepeatS, RepeatT, Mode, TextureTransform, Parameter)
		{
			this.RasterFormat = RasterFormat;
			this.RasterCode = RasterCode;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RepeatS,
				RepeatT,
				Mode,
				TextureTransform,
				Parameter,
				RasterFormat,
				RasterCode
			};
		}
		public virtual Global.IfcIdentifier? _RasterFormat
		{
			get
			{
				return RasterFormat;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					RasterFormat = val;
				}
				else if(value == null)
				{
					RasterFormat = null;
				}
			}
		}
		public virtual Global.IfcBinary? _RasterCode
		{
			get
			{
				return RasterCode;
			}
			set
			{
				if(value is IfcBinary val)
				{
					RasterCode = val;
				}
				else if(value == null)
				{
					RasterCode = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBlock
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// XLength : IfcPositiveLengthMeasure;
	/// YLength : IfcPositiveLengthMeasure;
	/// ZLength : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcBlock : IfcCsgPrimitive3D, Global.IfcBlock
	{
		public virtual IfcPositiveLengthMeasure? XLength { get; set; }
		public virtual IfcPositiveLengthMeasure? YLength { get; set; }
		public virtual IfcPositiveLengthMeasure? ZLength { get; set; }
		public IfcBlock() : base()
		{
		}
		public IfcBlock(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? XLength, IfcPositiveLengthMeasure? YLength, IfcPositiveLengthMeasure? ZLength) : base (Position)
		{
			this.XLength = XLength;
			this.YLength = YLength;
			this.ZLength = ZLength;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				XLength,
				YLength,
				ZLength
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _XLength
		{
			get
			{
				return XLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					XLength = val;
				}
				else if(value == null)
				{
					XLength = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _YLength
		{
			get
			{
				return YLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					YLength = val;
				}
				else if(value == null)
				{
					YLength = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _ZLength
		{
			get
			{
				return ZLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					ZLength = val;
				}
				else if(value == null)
				{
					ZLength = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoiler
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcBoilerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcBoilerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBoilerTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCBOILERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcBoiler : IfcEnergyConversionDevice, Global.IfcBoiler
	{
		public virtual IfcBoilerTypeEnum? PredefinedType { get; set; }
		public IfcBoiler() : base()
		{
		}
		public IfcBoiler(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcBoilerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcBoilerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcBoilerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoilerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcBoilerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcBoilerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBoilerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcBoilerType : IfcEnergyConversionDeviceType, Global.IfcBoilerType
	{
		public virtual IfcBoilerTypeEnum? PredefinedType { get; set; }
		public IfcBoilerType() : base()
		{
		}
		public IfcBoilerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcBoilerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcBoilerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcBoilerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBooleanClippingResult
	/// SUBTYPE OF (IfcBooleanResult);
	/// WHERE
	/// FirstOperandType : ('IFC4.IFCSWEPTAREASOLID' IN TYPEOF(FirstOperand)) OR
	/// ('IFC4.IFCSWEPTDISCSOLID' IN TYPEOF(FirstOperand)) OR
	/// ('IFC4.IFCBOOLEANCLIPPINGRESULT' IN TYPEOF(FirstOperand));
	/// SecondOperandType : ('IFC4.IFCHALFSPACESOLID' IN TYPEOF(SecondOperand));
	/// OperatorType : Operator = DIFFERENCE;
	/// END_ENTITY;
	/// <summary>
	public class IfcBooleanClippingResult : IfcBooleanResult, Global.IfcBooleanClippingResult
	{
		public IfcBooleanClippingResult() : base()
		{
		}
		public IfcBooleanClippingResult(IfcBooleanOperator? Operator, IfcBooleanOperand? FirstOperand, IfcBooleanOperand? SecondOperand) : base (Operator, FirstOperand, SecondOperand)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Operator,
				FirstOperand,
				SecondOperand
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBooleanResult
	/// SUPERTYPE OF (ONEOF
	/// (IfcBooleanClippingResult))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Operator : IfcBooleanOperator;
	/// FirstOperand : IfcBooleanOperand;
	/// SecondOperand : IfcBooleanOperand;
	/// DERIVE
	/// Dim : IfcDimensionCount := FirstOperand.Dim;
	/// WHERE
	/// SameDim : FirstOperand.Dim = SecondOperand.Dim;
	/// FirstOperandClosed : NOT('IFC4.IFCTESSELLATEDFACESET' IN TYPEOF(FirstOperand)) OR (EXISTS(FirstOperand.Closed) AND FirstOperand.Closed);
	/// SecondOperandClosed : NOT('IFC4.IFCTESSELLATEDFACESET' IN TYPEOF(SecondOperand)) OR (EXISTS(SecondOperand.Closed) AND SecondOperand.Closed);
	/// END_ENTITY;
	/// <summary>
	public class IfcBooleanResult : IfcGeometricRepresentationItem, IfcBooleanOperand, IfcCsgSelect, Global.IfcBooleanResult
	{
		public virtual IfcBooleanOperator? Operator { get; set; }
		public virtual IfcBooleanOperand? FirstOperand { get; set; }
		public virtual IfcBooleanOperand? SecondOperand { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcBooleanResult() : base()
		{
		}
		public IfcBooleanResult(IfcBooleanOperator? Operator, IfcBooleanOperand? FirstOperand, IfcBooleanOperand? SecondOperand) : base ()
		{
			this.Operator = Operator;
			this.FirstOperand = FirstOperand;
			this.SecondOperand = SecondOperand;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Operator,
				FirstOperand,
				SecondOperand
			};
		}
		public virtual Global.IfcBooleanOperator? _Operator
		{
			get
			{
				return Operator;
			}
			set
			{
				if(value is IfcBooleanOperator val)
				{
					Operator = val;
				}
				else if(value == null)
				{
					Operator = null;
				}
			}
		}
		public virtual Global.IfcBooleanOperand? _FirstOperand
		{
			get
			{
				return FirstOperand;
			}
			set
			{
				if(value is IfcBooleanOperand val)
				{
					FirstOperand = val;
				}
				else if(value == null)
				{
					FirstOperand = null;
				}
			}
		}
		public virtual Global.IfcBooleanOperand? _SecondOperand
		{
			get
			{
				return SecondOperand;
			}
			set
			{
				if(value is IfcBooleanOperand val)
				{
					SecondOperand = val;
				}
				else if(value == null)
				{
					SecondOperand = null;
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundaryCondition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBoundaryEdgeCondition
	/// ,IfcBoundaryFaceCondition
	/// ,IfcBoundaryNodeCondition));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBoundaryCondition : Ifc_Entity, Global.IfcBoundaryCondition
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcBoundaryCondition() : base()
		{
		}
		public IfcBoundaryCondition(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundaryCurve
	/// SUPERTYPE OF (ONEOF
	/// (IfcOuterBoundaryCurve))
	/// SUBTYPE OF (IfcCompositeCurveOnSurface);
	/// WHERE
	/// IsClosed : SELF\IfcCompositeCurve.ClosedCurve;
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundaryCurve : IfcCompositeCurveOnSurface, Global.IfcBoundaryCurve
	{
		public IfcBoundaryCurve() : base()
		{
		}
		public IfcBoundaryCurve(List<IfcCompositeCurveSegment>? Segments, IfcLogical? SelfIntersect) : base (Segments, SelfIntersect)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Segments,
				SelfIntersect
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBoundaryEdgeCondition
	/// SUBTYPE OF (IfcBoundaryCondition);
	/// TranslationalStiffnessByLengthX : OPTIONAL IfcModulusOfTranslationalSubgradeReactionSelect;
	/// TranslationalStiffnessByLengthY : OPTIONAL IfcModulusOfTranslationalSubgradeReactionSelect;
	/// TranslationalStiffnessByLengthZ : OPTIONAL IfcModulusOfTranslationalSubgradeReactionSelect;
	/// RotationalStiffnessByLengthX : OPTIONAL IfcModulusOfRotationalSubgradeReactionSelect;
	/// RotationalStiffnessByLengthY : OPTIONAL IfcModulusOfRotationalSubgradeReactionSelect;
	/// RotationalStiffnessByLengthZ : OPTIONAL IfcModulusOfRotationalSubgradeReactionSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundaryEdgeCondition : IfcBoundaryCondition, Global.IfcBoundaryEdgeCondition
	{
		public virtual IfcModulusOfTranslationalSubgradeReactionSelect? TranslationalStiffnessByLengthX { get; set; }
		public virtual IfcModulusOfTranslationalSubgradeReactionSelect? TranslationalStiffnessByLengthY { get; set; }
		public virtual IfcModulusOfTranslationalSubgradeReactionSelect? TranslationalStiffnessByLengthZ { get; set; }
		public virtual IfcModulusOfRotationalSubgradeReactionSelect? RotationalStiffnessByLengthX { get; set; }
		public virtual IfcModulusOfRotationalSubgradeReactionSelect? RotationalStiffnessByLengthY { get; set; }
		public virtual IfcModulusOfRotationalSubgradeReactionSelect? RotationalStiffnessByLengthZ { get; set; }
		public IfcBoundaryEdgeCondition() : base()
		{
		}
		public IfcBoundaryEdgeCondition(IfcLabel? Name, IfcModulusOfTranslationalSubgradeReactionSelect? TranslationalStiffnessByLengthX, IfcModulusOfTranslationalSubgradeReactionSelect? TranslationalStiffnessByLengthY, IfcModulusOfTranslationalSubgradeReactionSelect? TranslationalStiffnessByLengthZ, IfcModulusOfRotationalSubgradeReactionSelect? RotationalStiffnessByLengthX, IfcModulusOfRotationalSubgradeReactionSelect? RotationalStiffnessByLengthY, IfcModulusOfRotationalSubgradeReactionSelect? RotationalStiffnessByLengthZ) : base (Name)
		{
			this.TranslationalStiffnessByLengthX = TranslationalStiffnessByLengthX;
			this.TranslationalStiffnessByLengthY = TranslationalStiffnessByLengthY;
			this.TranslationalStiffnessByLengthZ = TranslationalStiffnessByLengthZ;
			this.RotationalStiffnessByLengthX = RotationalStiffnessByLengthX;
			this.RotationalStiffnessByLengthY = RotationalStiffnessByLengthY;
			this.RotationalStiffnessByLengthZ = RotationalStiffnessByLengthZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				TranslationalStiffnessByLengthX,
				TranslationalStiffnessByLengthY,
				TranslationalStiffnessByLengthZ,
				RotationalStiffnessByLengthX,
				RotationalStiffnessByLengthY,
				RotationalStiffnessByLengthZ
			};
		}
		public virtual Global.IfcModulusOfTranslationalSubgradeReactionSelect? _TranslationalStiffnessByLengthX
		{
			get
			{
				return TranslationalStiffnessByLengthX;
			}
			set
			{
				if(value is IfcModulusOfTranslationalSubgradeReactionSelect val)
				{
					TranslationalStiffnessByLengthX = val;
				}
				else if(value == null)
				{
					TranslationalStiffnessByLengthX = null;
				}
			}
		}
		public virtual Global.IfcModulusOfTranslationalSubgradeReactionSelect? _TranslationalStiffnessByLengthY
		{
			get
			{
				return TranslationalStiffnessByLengthY;
			}
			set
			{
				if(value is IfcModulusOfTranslationalSubgradeReactionSelect val)
				{
					TranslationalStiffnessByLengthY = val;
				}
				else if(value == null)
				{
					TranslationalStiffnessByLengthY = null;
				}
			}
		}
		public virtual Global.IfcModulusOfTranslationalSubgradeReactionSelect? _TranslationalStiffnessByLengthZ
		{
			get
			{
				return TranslationalStiffnessByLengthZ;
			}
			set
			{
				if(value is IfcModulusOfTranslationalSubgradeReactionSelect val)
				{
					TranslationalStiffnessByLengthZ = val;
				}
				else if(value == null)
				{
					TranslationalStiffnessByLengthZ = null;
				}
			}
		}
		public virtual Global.IfcModulusOfRotationalSubgradeReactionSelect? _RotationalStiffnessByLengthX
		{
			get
			{
				return RotationalStiffnessByLengthX;
			}
			set
			{
				if(value is IfcModulusOfRotationalSubgradeReactionSelect val)
				{
					RotationalStiffnessByLengthX = val;
				}
				else if(value == null)
				{
					RotationalStiffnessByLengthX = null;
				}
			}
		}
		public virtual Global.IfcModulusOfRotationalSubgradeReactionSelect? _RotationalStiffnessByLengthY
		{
			get
			{
				return RotationalStiffnessByLengthY;
			}
			set
			{
				if(value is IfcModulusOfRotationalSubgradeReactionSelect val)
				{
					RotationalStiffnessByLengthY = val;
				}
				else if(value == null)
				{
					RotationalStiffnessByLengthY = null;
				}
			}
		}
		public virtual Global.IfcModulusOfRotationalSubgradeReactionSelect? _RotationalStiffnessByLengthZ
		{
			get
			{
				return RotationalStiffnessByLengthZ;
			}
			set
			{
				if(value is IfcModulusOfRotationalSubgradeReactionSelect val)
				{
					RotationalStiffnessByLengthZ = val;
				}
				else if(value == null)
				{
					RotationalStiffnessByLengthZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundaryFaceCondition
	/// SUBTYPE OF (IfcBoundaryCondition);
	/// TranslationalStiffnessByAreaX : OPTIONAL IfcModulusOfSubgradeReactionSelect;
	/// TranslationalStiffnessByAreaY : OPTIONAL IfcModulusOfSubgradeReactionSelect;
	/// TranslationalStiffnessByAreaZ : OPTIONAL IfcModulusOfSubgradeReactionSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundaryFaceCondition : IfcBoundaryCondition, Global.IfcBoundaryFaceCondition
	{
		public virtual IfcModulusOfSubgradeReactionSelect? TranslationalStiffnessByAreaX { get; set; }
		public virtual IfcModulusOfSubgradeReactionSelect? TranslationalStiffnessByAreaY { get; set; }
		public virtual IfcModulusOfSubgradeReactionSelect? TranslationalStiffnessByAreaZ { get; set; }
		public IfcBoundaryFaceCondition() : base()
		{
		}
		public IfcBoundaryFaceCondition(IfcLabel? Name, IfcModulusOfSubgradeReactionSelect? TranslationalStiffnessByAreaX, IfcModulusOfSubgradeReactionSelect? TranslationalStiffnessByAreaY, IfcModulusOfSubgradeReactionSelect? TranslationalStiffnessByAreaZ) : base (Name)
		{
			this.TranslationalStiffnessByAreaX = TranslationalStiffnessByAreaX;
			this.TranslationalStiffnessByAreaY = TranslationalStiffnessByAreaY;
			this.TranslationalStiffnessByAreaZ = TranslationalStiffnessByAreaZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				TranslationalStiffnessByAreaX,
				TranslationalStiffnessByAreaY,
				TranslationalStiffnessByAreaZ
			};
		}
		public virtual Global.IfcModulusOfSubgradeReactionSelect? _TranslationalStiffnessByAreaX
		{
			get
			{
				return TranslationalStiffnessByAreaX;
			}
			set
			{
				if(value is IfcModulusOfSubgradeReactionSelect val)
				{
					TranslationalStiffnessByAreaX = val;
				}
				else if(value == null)
				{
					TranslationalStiffnessByAreaX = null;
				}
			}
		}
		public virtual Global.IfcModulusOfSubgradeReactionSelect? _TranslationalStiffnessByAreaY
		{
			get
			{
				return TranslationalStiffnessByAreaY;
			}
			set
			{
				if(value is IfcModulusOfSubgradeReactionSelect val)
				{
					TranslationalStiffnessByAreaY = val;
				}
				else if(value == null)
				{
					TranslationalStiffnessByAreaY = null;
				}
			}
		}
		public virtual Global.IfcModulusOfSubgradeReactionSelect? _TranslationalStiffnessByAreaZ
		{
			get
			{
				return TranslationalStiffnessByAreaZ;
			}
			set
			{
				if(value is IfcModulusOfSubgradeReactionSelect val)
				{
					TranslationalStiffnessByAreaZ = val;
				}
				else if(value == null)
				{
					TranslationalStiffnessByAreaZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundaryNodeCondition
	/// SUPERTYPE OF (ONEOF
	/// (IfcBoundaryNodeConditionWarping))
	/// SUBTYPE OF (IfcBoundaryCondition);
	/// TranslationalStiffnessX : OPTIONAL IfcTranslationalStiffnessSelect;
	/// TranslationalStiffnessY : OPTIONAL IfcTranslationalStiffnessSelect;
	/// TranslationalStiffnessZ : OPTIONAL IfcTranslationalStiffnessSelect;
	/// RotationalStiffnessX : OPTIONAL IfcRotationalStiffnessSelect;
	/// RotationalStiffnessY : OPTIONAL IfcRotationalStiffnessSelect;
	/// RotationalStiffnessZ : OPTIONAL IfcRotationalStiffnessSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundaryNodeCondition : IfcBoundaryCondition, Global.IfcBoundaryNodeCondition
	{
		public virtual IfcTranslationalStiffnessSelect? TranslationalStiffnessX { get; set; }
		public virtual IfcTranslationalStiffnessSelect? TranslationalStiffnessY { get; set; }
		public virtual IfcTranslationalStiffnessSelect? TranslationalStiffnessZ { get; set; }
		public virtual IfcRotationalStiffnessSelect? RotationalStiffnessX { get; set; }
		public virtual IfcRotationalStiffnessSelect? RotationalStiffnessY { get; set; }
		public virtual IfcRotationalStiffnessSelect? RotationalStiffnessZ { get; set; }
		public IfcBoundaryNodeCondition() : base()
		{
		}
		public IfcBoundaryNodeCondition(IfcLabel? Name, IfcTranslationalStiffnessSelect? TranslationalStiffnessX, IfcTranslationalStiffnessSelect? TranslationalStiffnessY, IfcTranslationalStiffnessSelect? TranslationalStiffnessZ, IfcRotationalStiffnessSelect? RotationalStiffnessX, IfcRotationalStiffnessSelect? RotationalStiffnessY, IfcRotationalStiffnessSelect? RotationalStiffnessZ) : base (Name)
		{
			this.TranslationalStiffnessX = TranslationalStiffnessX;
			this.TranslationalStiffnessY = TranslationalStiffnessY;
			this.TranslationalStiffnessZ = TranslationalStiffnessZ;
			this.RotationalStiffnessX = RotationalStiffnessX;
			this.RotationalStiffnessY = RotationalStiffnessY;
			this.RotationalStiffnessZ = RotationalStiffnessZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				TranslationalStiffnessX,
				TranslationalStiffnessY,
				TranslationalStiffnessZ,
				RotationalStiffnessX,
				RotationalStiffnessY,
				RotationalStiffnessZ
			};
		}
		public virtual Global.IfcTranslationalStiffnessSelect? _TranslationalStiffnessX
		{
			get
			{
				return TranslationalStiffnessX;
			}
			set
			{
				if(value is IfcTranslationalStiffnessSelect val)
				{
					TranslationalStiffnessX = val;
				}
				else if(value == null)
				{
					TranslationalStiffnessX = null;
				}
			}
		}
		public virtual Global.IfcTranslationalStiffnessSelect? _TranslationalStiffnessY
		{
			get
			{
				return TranslationalStiffnessY;
			}
			set
			{
				if(value is IfcTranslationalStiffnessSelect val)
				{
					TranslationalStiffnessY = val;
				}
				else if(value == null)
				{
					TranslationalStiffnessY = null;
				}
			}
		}
		public virtual Global.IfcTranslationalStiffnessSelect? _TranslationalStiffnessZ
		{
			get
			{
				return TranslationalStiffnessZ;
			}
			set
			{
				if(value is IfcTranslationalStiffnessSelect val)
				{
					TranslationalStiffnessZ = val;
				}
				else if(value == null)
				{
					TranslationalStiffnessZ = null;
				}
			}
		}
		public virtual Global.IfcRotationalStiffnessSelect? _RotationalStiffnessX
		{
			get
			{
				return RotationalStiffnessX;
			}
			set
			{
				if(value is IfcRotationalStiffnessSelect val)
				{
					RotationalStiffnessX = val;
				}
				else if(value == null)
				{
					RotationalStiffnessX = null;
				}
			}
		}
		public virtual Global.IfcRotationalStiffnessSelect? _RotationalStiffnessY
		{
			get
			{
				return RotationalStiffnessY;
			}
			set
			{
				if(value is IfcRotationalStiffnessSelect val)
				{
					RotationalStiffnessY = val;
				}
				else if(value == null)
				{
					RotationalStiffnessY = null;
				}
			}
		}
		public virtual Global.IfcRotationalStiffnessSelect? _RotationalStiffnessZ
		{
			get
			{
				return RotationalStiffnessZ;
			}
			set
			{
				if(value is IfcRotationalStiffnessSelect val)
				{
					RotationalStiffnessZ = val;
				}
				else if(value == null)
				{
					RotationalStiffnessZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundaryNodeConditionWarping
	/// SUBTYPE OF (IfcBoundaryNodeCondition);
	/// WarpingStiffness : OPTIONAL IfcWarpingStiffnessSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundaryNodeConditionWarping : IfcBoundaryNodeCondition, Global.IfcBoundaryNodeConditionWarping
	{
		public virtual IfcWarpingStiffnessSelect? WarpingStiffness { get; set; }
		public IfcBoundaryNodeConditionWarping() : base()
		{
		}
		public IfcBoundaryNodeConditionWarping(IfcLabel? Name, IfcTranslationalStiffnessSelect? TranslationalStiffnessX, IfcTranslationalStiffnessSelect? TranslationalStiffnessY, IfcTranslationalStiffnessSelect? TranslationalStiffnessZ, IfcRotationalStiffnessSelect? RotationalStiffnessX, IfcRotationalStiffnessSelect? RotationalStiffnessY, IfcRotationalStiffnessSelect? RotationalStiffnessZ, IfcWarpingStiffnessSelect? WarpingStiffness) : base (Name, TranslationalStiffnessX, TranslationalStiffnessY, TranslationalStiffnessZ, RotationalStiffnessX, RotationalStiffnessY, RotationalStiffnessZ)
		{
			this.WarpingStiffness = WarpingStiffness;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				TranslationalStiffnessX,
				TranslationalStiffnessY,
				TranslationalStiffnessZ,
				RotationalStiffnessX,
				RotationalStiffnessY,
				RotationalStiffnessZ,
				WarpingStiffness
			};
		}
		public virtual Global.IfcWarpingStiffnessSelect? _WarpingStiffness
		{
			get
			{
				return WarpingStiffness;
			}
			set
			{
				if(value is IfcWarpingStiffnessSelect val)
				{
					WarpingStiffness = val;
				}
				else if(value == null)
				{
					WarpingStiffness = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundedCurve
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBSplineCurve
	/// ,IfcCompositeCurve
	/// ,IfcIndexedPolyCurve
	/// ,IfcPolyline
	/// ,IfcTrimmedCurve))
	/// SUBTYPE OF (IfcCurve);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBoundedCurve : IfcCurve, IfcCurveOrEdgeCurve, Global.IfcBoundedCurve
	{
		public IfcBoundedCurve() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBoundedSurface
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBSplineSurface
	/// ,IfcCurveBoundedPlane
	/// ,IfcCurveBoundedSurface
	/// ,IfcRectangularTrimmedSurface))
	/// SUBTYPE OF (IfcSurface);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBoundedSurface : IfcSurface, Global.IfcBoundedSurface
	{
		public IfcBoundedSurface() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBoundingBox
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Corner : IfcCartesianPoint;
	/// XDim : IfcPositiveLengthMeasure;
	/// YDim : IfcPositiveLengthMeasure;
	/// ZDim : IfcPositiveLengthMeasure;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundingBox : IfcGeometricRepresentationItem, Global.IfcBoundingBox
	{
		public virtual IfcCartesianPoint? Corner { get; set; }
		public virtual IfcPositiveLengthMeasure? XDim { get; set; }
		public virtual IfcPositiveLengthMeasure? YDim { get; set; }
		public virtual IfcPositiveLengthMeasure? ZDim { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcBoundingBox() : base()
		{
		}
		public IfcBoundingBox(IfcCartesianPoint? Corner, IfcPositiveLengthMeasure? XDim, IfcPositiveLengthMeasure? YDim, IfcPositiveLengthMeasure? ZDim) : base ()
		{
			this.Corner = Corner;
			this.XDim = XDim;
			this.YDim = YDim;
			this.ZDim = ZDim;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Corner,
				XDim,
				YDim,
				ZDim
			};
		}
		public virtual Global.IfcCartesianPoint? _Corner
		{
			get
			{
				return Corner;
			}
			set
			{
				if(value is IfcCartesianPoint val)
				{
					Corner = val;
				}
				else if(value == null)
				{
					Corner = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _XDim
		{
			get
			{
				return XDim;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					XDim = val;
				}
				else if(value == null)
				{
					XDim = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _YDim
		{
			get
			{
				return YDim;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					YDim = val;
				}
				else if(value == null)
				{
					YDim = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _ZDim
		{
			get
			{
				return ZDim;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					ZDim = val;
				}
				else if(value == null)
				{
					ZDim = null;
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoxedHalfSpace
	/// SUBTYPE OF (IfcHalfSpaceSolid);
	/// Enclosure : IfcBoundingBox;
	/// WHERE
	/// UnboundedSurface : NOT ('IFC4.IFCCURVEBOUNDEDPLANE' IN TYPEOF(SELF\IfcHalfSpaceSolid.BaseSurface));
	/// END_ENTITY;
	/// <summary>
	public class IfcBoxedHalfSpace : IfcHalfSpaceSolid, Global.IfcBoxedHalfSpace
	{
		public virtual IfcBoundingBox? Enclosure { get; set; }
		public IfcBoxedHalfSpace() : base()
		{
		}
		public IfcBoxedHalfSpace(IfcSurface? BaseSurface, IfcBoolean? AgreementFlag, IfcBoundingBox? Enclosure) : base (BaseSurface, AgreementFlag)
		{
			this.Enclosure = Enclosure;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BaseSurface,
				AgreementFlag,
				Enclosure
			};
		}
		public virtual Global.IfcBoundingBox? _Enclosure
		{
			get
			{
				return Enclosure;
			}
			set
			{
				if(value is IfcBoundingBox val)
				{
					Enclosure = val;
				}
				else if(value == null)
				{
					Enclosure = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBuilding
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// ElevationOfRefHeight : OPTIONAL IfcLengthMeasure;
	/// ElevationOfTerrain : OPTIONAL IfcLengthMeasure;
	/// BuildingAddress : OPTIONAL IfcPostalAddress;
	/// END_ENTITY;
	/// <summary>
	public class IfcBuilding : IfcSpatialStructureElement, Global.IfcBuilding
	{
		public virtual IfcLengthMeasure? ElevationOfRefHeight { get; set; }
		public virtual IfcLengthMeasure? ElevationOfTerrain { get; set; }
		public virtual IfcPostalAddress? BuildingAddress { get; set; }
		public IfcBuilding() : base()
		{
		}
		public IfcBuilding(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcElementCompositionEnum? CompositionType, IfcLengthMeasure? ElevationOfRefHeight, IfcLengthMeasure? ElevationOfTerrain, IfcPostalAddress? BuildingAddress) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.ElevationOfRefHeight = ElevationOfRefHeight;
			this.ElevationOfTerrain = ElevationOfTerrain;
			this.BuildingAddress = BuildingAddress;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				CompositionType,
				ElevationOfRefHeight,
				ElevationOfTerrain,
				BuildingAddress
			};
		}
		public virtual Global.IfcLengthMeasure? _ElevationOfRefHeight
		{
			get
			{
				return ElevationOfRefHeight;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					ElevationOfRefHeight = val;
				}
				else if(value == null)
				{
					ElevationOfRefHeight = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _ElevationOfTerrain
		{
			get
			{
				return ElevationOfTerrain;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					ElevationOfTerrain = val;
				}
				else if(value == null)
				{
					ElevationOfTerrain = null;
				}
			}
		}
		public virtual Global.IfcPostalAddress? _BuildingAddress
		{
			get
			{
				return BuildingAddress;
			}
			set
			{
				if(value is IfcPostalAddress val)
				{
					BuildingAddress = val;
				}
				else if(value == null)
				{
					BuildingAddress = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBeam
	/// ,IfcBuildingElementProxy
	/// ,IfcChimney
	/// ,IfcColumn
	/// ,IfcCovering
	/// ,IfcCurtainWall
	/// ,IfcDoor
	/// ,IfcFooting
	/// ,IfcMember
	/// ,IfcPile
	/// ,IfcPlate
	/// ,IfcRailing
	/// ,IfcRamp
	/// ,IfcRampFlight
	/// ,IfcRoof
	/// ,IfcShadingDevice
	/// ,IfcSlab
	/// ,IfcStair
	/// ,IfcStairFlight
	/// ,IfcWall
	/// ,IfcWindow))
	/// SUBTYPE OF (IfcElement);
	/// WHERE
	/// MaxOneMaterialAssociation : SIZEOF (QUERY(temp <* SELF\IfcObjectDefinition.HasAssociations |
	/// 'IFC4.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)
	/// )) <= 1;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBuildingElement : IfcElement, Global.IfcBuildingElement
	{
		public IfcBuildingElement() : base()
		{
		}
		public IfcBuildingElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementPart
	/// SUBTYPE OF (IfcElementComponent);
	/// PredefinedType : OPTIONAL IfcBuildingElementPartTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcBuildingElementPartTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBuildingElementPartTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCBUILDINGELEMENTPARTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcBuildingElementPart : IfcElementComponent, Global.IfcBuildingElementPart
	{
		public virtual IfcBuildingElementPartTypeEnum? PredefinedType { get; set; }
		public IfcBuildingElementPart() : base()
		{
		}
		public IfcBuildingElementPart(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcBuildingElementPartTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcBuildingElementPartTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcBuildingElementPartTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementPartType
	/// SUBTYPE OF (IfcElementComponentType);
	/// PredefinedType : IfcBuildingElementPartTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcBuildingElementPartTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBuildingElementPartTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcBuildingElementPartType : IfcElementComponentType, Global.IfcBuildingElementPartType
	{
		public virtual IfcBuildingElementPartTypeEnum? PredefinedType { get; set; }
		public IfcBuildingElementPartType() : base()
		{
		}
		public IfcBuildingElementPartType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcBuildingElementPartTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcBuildingElementPartTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcBuildingElementPartTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementProxy
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcBuildingElementProxyTypeEnum;
	/// WHERE
	/// HasObjectName : EXISTS(SELF\IfcRoot.Name);
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcBuildingElementProxyTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBuildingElementProxyTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCBUILDINGELEMENTPROXYTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcBuildingElementProxy : IfcBuildingElement, Global.IfcBuildingElementProxy
	{
		public virtual IfcBuildingElementProxyTypeEnum? PredefinedType { get; set; }
		public IfcBuildingElementProxy() : base()
		{
		}
		public IfcBuildingElementProxy(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcBuildingElementProxyTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcBuildingElementProxyTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcBuildingElementProxyTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementProxyType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcBuildingElementProxyTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcBuildingElementProxyTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBuildingElementProxyTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcBuildingElementProxyType : IfcBuildingElementType, Global.IfcBuildingElementProxyType
	{
		public virtual IfcBuildingElementProxyTypeEnum? PredefinedType { get; set; }
		public IfcBuildingElementProxyType() : base()
		{
		}
		public IfcBuildingElementProxyType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcBuildingElementProxyTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcBuildingElementProxyTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcBuildingElementProxyTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBeamType
	/// ,IfcBuildingElementProxyType
	/// ,IfcChimneyType
	/// ,IfcColumnType
	/// ,IfcCoveringType
	/// ,IfcCurtainWallType
	/// ,IfcDoorType
	/// ,IfcFootingType
	/// ,IfcMemberType
	/// ,IfcPileType
	/// ,IfcPlateType
	/// ,IfcRailingType
	/// ,IfcRampFlightType
	/// ,IfcRampType
	/// ,IfcRoofType
	/// ,IfcShadingDeviceType
	/// ,IfcSlabType
	/// ,IfcStairFlightType
	/// ,IfcStairType
	/// ,IfcWallType
	/// ,IfcWindowType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBuildingElementType : IfcElementType, Global.IfcBuildingElementType
	{
		public IfcBuildingElementType() : base()
		{
		}
		public IfcBuildingElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingStorey
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// Elevation : OPTIONAL IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcBuildingStorey : IfcSpatialStructureElement, Global.IfcBuildingStorey
	{
		public virtual IfcLengthMeasure? Elevation { get; set; }
		public IfcBuildingStorey() : base()
		{
		}
		public IfcBuildingStorey(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcElementCompositionEnum? CompositionType, IfcLengthMeasure? Elevation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.Elevation = Elevation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				CompositionType,
				Elevation
			};
		}
		public virtual Global.IfcLengthMeasure? _Elevation
		{
			get
			{
				return Elevation;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					Elevation = val;
				}
				else if(value == null)
				{
					Elevation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingSystem
	/// SUBTYPE OF (IfcSystem);
	/// PredefinedType : OPTIONAL IfcBuildingSystemTypeEnum;
	/// LongName : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcBuildingSystem : IfcSystem, Global.IfcBuildingSystem
	{
		public virtual IfcBuildingSystemTypeEnum? PredefinedType { get; set; }
		public virtual IfcLabel? LongName { get; set; }
		public IfcBuildingSystem() : base()
		{
		}
		public IfcBuildingSystem(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcBuildingSystemTypeEnum? PredefinedType, IfcLabel? LongName) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.PredefinedType = PredefinedType;
			this.LongName = LongName;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				PredefinedType,
				LongName
			};
		}
		public virtual Global.IfcBuildingSystemTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcBuildingSystemTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _LongName
		{
			get
			{
				return LongName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					LongName = val;
				}
				else if(value == null)
				{
					LongName = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBurner
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcBurnerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcBurnerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBurnerTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCBURNERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcBurner : IfcEnergyConversionDevice, Global.IfcBurner
	{
		public virtual IfcBurnerTypeEnum? PredefinedType { get; set; }
		public IfcBurner() : base()
		{
		}
		public IfcBurner(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcBurnerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcBurnerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcBurnerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBurnerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcBurnerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcBurnerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBurnerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcBurnerType : IfcEnergyConversionDeviceType, Global.IfcBurnerType
	{
		public virtual IfcBurnerTypeEnum? PredefinedType { get; set; }
		public IfcBurnerType() : base()
		{
		}
		public IfcBurnerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcBurnerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcBurnerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcBurnerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// Width : IfcPositiveLengthMeasure;
	/// WallThickness : IfcPositiveLengthMeasure;
	/// Girth : IfcPositiveLengthMeasure;
	/// InternalFilletRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// WHERE
	/// ValidGirth : Girth < (Depth / 2.);
	/// ValidInternalFilletRadius : NOT(EXISTS(InternalFilletRadius)) OR
	/// ((InternalFilletRadius <= Width/2. - WallThickness) AND (InternalFilletRadius <= Depth/2. - WallThickness));
	/// ValidWallThickness : (WallThickness < Width/2.) AND (WallThickness < Depth/2.);
	/// END_ENTITY;
	/// <summary>
	public class IfcCShapeProfileDef : IfcParameterizedProfileDef, Global.IfcCShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public virtual IfcPositiveLengthMeasure? Width { get; set; }
		public virtual IfcPositiveLengthMeasure? WallThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? Girth { get; set; }
		public virtual IfcNonNegativeLengthMeasure? InternalFilletRadius { get; set; }
		public IfcCShapeProfileDef() : base()
		{
		}
		public IfcCShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Depth, IfcPositiveLengthMeasure? Width, IfcPositiveLengthMeasure? WallThickness, IfcPositiveLengthMeasure? Girth, IfcNonNegativeLengthMeasure? InternalFilletRadius) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.Width = Width;
			this.WallThickness = WallThickness;
			this.Girth = Girth;
			this.InternalFilletRadius = InternalFilletRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Depth,
				Width,
				WallThickness,
				Girth,
				InternalFilletRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _Width
		{
			get
			{
				return Width;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Width = val;
				}
				else if(value == null)
				{
					Width = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _WallThickness
		{
			get
			{
				return WallThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					WallThickness = val;
				}
				else if(value == null)
				{
					WallThickness = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _Girth
		{
			get
			{
				return Girth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Girth = val;
				}
				else if(value == null)
				{
					Girth = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _InternalFilletRadius
		{
			get
			{
				return InternalFilletRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					InternalFilletRadius = val;
				}
				else if(value == null)
				{
					InternalFilletRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCableCarrierFitting
	/// SUBTYPE OF (IfcFlowFitting);
	/// PredefinedType : OPTIONAL IfcCableCarrierFittingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCableCarrierFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCableCarrierFittingTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCABLECARRIERFITTINGTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCableCarrierFitting : IfcFlowFitting, Global.IfcCableCarrierFitting
	{
		public virtual IfcCableCarrierFittingTypeEnum? PredefinedType { get; set; }
		public IfcCableCarrierFitting() : base()
		{
		}
		public IfcCableCarrierFitting(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCableCarrierFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCableCarrierFittingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCableCarrierFittingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCableCarrierFittingType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcCableCarrierFittingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCableCarrierFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCableCarrierFittingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCableCarrierFittingType : IfcFlowFittingType, Global.IfcCableCarrierFittingType
	{
		public virtual IfcCableCarrierFittingTypeEnum? PredefinedType { get; set; }
		public IfcCableCarrierFittingType() : base()
		{
		}
		public IfcCableCarrierFittingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCableCarrierFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCableCarrierFittingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCableCarrierFittingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCableCarrierSegment
	/// SUBTYPE OF (IfcFlowSegment);
	/// PredefinedType : OPTIONAL IfcCableCarrierSegmentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCableCarrierSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCableCarrierSegmentTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCABLECARRIERSEGMENTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCableCarrierSegment : IfcFlowSegment, Global.IfcCableCarrierSegment
	{
		public virtual IfcCableCarrierSegmentTypeEnum? PredefinedType { get; set; }
		public IfcCableCarrierSegment() : base()
		{
		}
		public IfcCableCarrierSegment(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCableCarrierSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCableCarrierSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCableCarrierSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCableCarrierSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcCableCarrierSegmentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCableCarrierSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCableCarrierSegmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCableCarrierSegmentType : IfcFlowSegmentType, Global.IfcCableCarrierSegmentType
	{
		public virtual IfcCableCarrierSegmentTypeEnum? PredefinedType { get; set; }
		public IfcCableCarrierSegmentType() : base()
		{
		}
		public IfcCableCarrierSegmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCableCarrierSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCableCarrierSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCableCarrierSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCableFitting
	/// SUBTYPE OF (IfcFlowFitting);
	/// PredefinedType : OPTIONAL IfcCableFittingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCableFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCableFittingTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCABLEFITTINGTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCableFitting : IfcFlowFitting, Global.IfcCableFitting
	{
		public virtual IfcCableFittingTypeEnum? PredefinedType { get; set; }
		public IfcCableFitting() : base()
		{
		}
		public IfcCableFitting(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCableFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCableFittingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCableFittingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCableFittingType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcCableFittingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCableFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCableFittingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCableFittingType : IfcFlowFittingType, Global.IfcCableFittingType
	{
		public virtual IfcCableFittingTypeEnum? PredefinedType { get; set; }
		public IfcCableFittingType() : base()
		{
		}
		public IfcCableFittingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCableFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCableFittingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCableFittingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCableSegment
	/// SUBTYPE OF (IfcFlowSegment);
	/// PredefinedType : OPTIONAL IfcCableSegmentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCableSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCableSegmentTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCABLESEGMENTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCableSegment : IfcFlowSegment, Global.IfcCableSegment
	{
		public virtual IfcCableSegmentTypeEnum? PredefinedType { get; set; }
		public IfcCableSegment() : base()
		{
		}
		public IfcCableSegment(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCableSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCableSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCableSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCableSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcCableSegmentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCableSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCableSegmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCableSegmentType : IfcFlowSegmentType, Global.IfcCableSegmentType
	{
		public virtual IfcCableSegmentTypeEnum? PredefinedType { get; set; }
		public IfcCableSegmentType() : base()
		{
		}
		public IfcCableSegmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCableSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCableSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCableSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianPoint
	/// SUBTYPE OF (IfcPoint);
	/// Coordinates : LIST [1:3] OF IfcLengthMeasure;
	/// DERIVE
	/// Dim : IfcDimensionCount := HIINDEX(Coordinates);
	/// WHERE
	/// CP2Dor3D : HIINDEX(Coordinates) >= 2;
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianPoint : IfcPoint, IfcTrimmingSelect, Global.IfcCartesianPoint
	{
		public virtual List<IfcLengthMeasure>? Coordinates { get; set; }
		//DERIVE
		public override IfcDimensionCount? Dim {get {return null;}}
		public IfcCartesianPoint() : base()
		{
		}
		public IfcCartesianPoint(List<IfcLengthMeasure>? Coordinates) : base ()
		{
			this.Coordinates = Coordinates;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Coordinates
			};
		}
		public virtual List<Global.IfcLengthMeasure>? _Coordinates
		{
			get
			{
				if(Coordinates != null)
				{
					List<Global.IfcLengthMeasure>? items = new List<Global.IfcLengthMeasure>();
					foreach (IfcLengthMeasure item in Coordinates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Coordinates = null;
				}
				else
				{
					Coordinates = new List<IfcLengthMeasure>();
					foreach(var val in value)
					{
						if(val is IfcLengthMeasure v)
						{
							Coordinates.Add(v);
						}
					}
				}
			}
		}
		public override Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianPointList
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCartesianPointList2D
	/// ,IfcCartesianPointList3D))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// DERIVE
	/// Dim : IfcDimensionCount := IfcPointListDim(SELF);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcCartesianPointList : IfcGeometricRepresentationItem, Global.IfcCartesianPointList
	{
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcCartesianPointList() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianPointList2D
	/// SUBTYPE OF (IfcCartesianPointList);
	/// CoordList : LIST [1:?] OF LIST [2:2] OF IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianPointList2D : IfcCartesianPointList, Global.IfcCartesianPointList2D
	{
		public virtual List<List<IfcLengthMeasure>>? CoordList { get; set; }
		public IfcCartesianPointList2D() : base()
		{
		}
		public IfcCartesianPointList2D(List<List<IfcLengthMeasure>>? CoordList) : base ()
		{
			this.CoordList = CoordList;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CoordList
			};
		}
		public virtual List<List<Global.IfcLengthMeasure>>? _CoordList
		{
			get
			{
				if(CoordList != null)
				{
					List<List<Global.IfcLengthMeasure>>? items = new List<List<Global.IfcLengthMeasure>>();
					foreach (List<IfcLengthMeasure> item1s in CoordList)
					{
						List<Global.IfcLengthMeasure>? resultItems = new List<Global.IfcLengthMeasure>();
						foreach (IfcLengthMeasure item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CoordList = null;
				}
				else
				{
					CoordList = new List<List<IfcLengthMeasure>>();
					foreach(var vals in value)
					{
						if(vals != null)
						{
							List<IfcLengthMeasure> items = new List<IfcLengthMeasure>();
							foreach(var val in vals)
							{
								if(val is IfcLengthMeasure v)
								{
									items.Add(v);
								}
							}
							CoordList.Add(items);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianPointList3D
	/// SUBTYPE OF (IfcCartesianPointList);
	/// CoordList : LIST [1:?] OF LIST [3:3] OF IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianPointList3D : IfcCartesianPointList, Global.IfcCartesianPointList3D
	{
		public virtual List<List<IfcLengthMeasure>>? CoordList { get; set; }
		public IfcCartesianPointList3D() : base()
		{
		}
		public IfcCartesianPointList3D(List<List<IfcLengthMeasure>>? CoordList) : base ()
		{
			this.CoordList = CoordList;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CoordList
			};
		}
		public virtual List<List<Global.IfcLengthMeasure>>? _CoordList
		{
			get
			{
				if(CoordList != null)
				{
					List<List<Global.IfcLengthMeasure>>? items = new List<List<Global.IfcLengthMeasure>>();
					foreach (List<IfcLengthMeasure> item1s in CoordList)
					{
						List<Global.IfcLengthMeasure>? resultItems = new List<Global.IfcLengthMeasure>();
						foreach (IfcLengthMeasure item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CoordList = null;
				}
				else
				{
					CoordList = new List<List<IfcLengthMeasure>>();
					foreach(var vals in value)
					{
						if(vals != null)
						{
							List<IfcLengthMeasure> items = new List<IfcLengthMeasure>();
							foreach(var val in vals)
							{
								if(val is IfcLengthMeasure v)
								{
									items.Add(v);
								}
							}
							CoordList.Add(items);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCartesianTransformationOperator2D
	/// ,IfcCartesianTransformationOperator3D))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Axis1 : OPTIONAL IfcDirection;
	/// Axis2 : OPTIONAL IfcDirection;
	/// LocalOrigin : IfcCartesianPoint;
	/// Scale : OPTIONAL IfcReal;
	/// DERIVE
	/// Scl : IfcReal := NVL(Scale, 1.0);
	/// Dim : IfcDimensionCount := LocalOrigin.Dim;
	/// WHERE
	/// ScaleGreaterZero : Scl > 0.0;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcCartesianTransformationOperator : IfcGeometricRepresentationItem, Global.IfcCartesianTransformationOperator
	{
		public virtual IfcDirection? Axis1 { get; set; }
		public virtual IfcDirection? Axis2 { get; set; }
		public virtual IfcCartesianPoint? LocalOrigin { get; set; }
		public virtual IfcReal? Scale { get; set; }
		//DERIVE
		public virtual IfcReal? Scl {get {return null;}}
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcCartesianTransformationOperator() : base()
		{
		}
		public IfcCartesianTransformationOperator(IfcDirection? Axis1, IfcDirection? Axis2, IfcCartesianPoint? LocalOrigin, IfcReal? Scale) : base ()
		{
			this.Axis1 = Axis1;
			this.Axis2 = Axis2;
			this.LocalOrigin = LocalOrigin;
			this.Scale = Scale;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Axis1,
				Axis2,
				LocalOrigin,
				Scale
			};
		}
		public virtual Global.IfcDirection? _Axis1
		{
			get
			{
				return Axis1;
			}
			set
			{
				if(value is IfcDirection val)
				{
					Axis1 = val;
				}
				else if(value == null)
				{
					Axis1 = null;
				}
			}
		}
		public virtual Global.IfcDirection? _Axis2
		{
			get
			{
				return Axis2;
			}
			set
			{
				if(value is IfcDirection val)
				{
					Axis2 = val;
				}
				else if(value == null)
				{
					Axis2 = null;
				}
			}
		}
		public virtual Global.IfcCartesianPoint? _LocalOrigin
		{
			get
			{
				return LocalOrigin;
			}
			set
			{
				if(value is IfcCartesianPoint val)
				{
					LocalOrigin = val;
				}
				else if(value == null)
				{
					LocalOrigin = null;
				}
			}
		}
		public virtual Global.IfcReal? _Scale
		{
			get
			{
				return Scale;
			}
			set
			{
				if(value is IfcReal val)
				{
					Scale = val;
				}
				else if(value == null)
				{
					Scale = null;
				}
			}
		}
		public virtual Global.IfcReal? _Scl
		{
			get
			{
				return Scl;
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator2D
	/// SUPERTYPE OF (ONEOF
	/// (IfcCartesianTransformationOperator2DnonUniform))
	/// SUBTYPE OF (IfcCartesianTransformationOperator);
	/// DERIVE
	/// U : LIST [2:2] OF IfcDirection := IfcBaseAxis(2,SELF\IfcCartesianTransformationOperator.Axis1,
	/// SELF\IfcCartesianTransformationOperator.Axis2,?);
	/// WHERE
	/// DimEqual2 : SELF\IfcCartesianTransformationOperator.Dim = 2;
	/// Axis1Is2D : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis1)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 2);
	/// Axis2Is2D : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis2)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 2);
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianTransformationOperator2D : IfcCartesianTransformationOperator, Global.IfcCartesianTransformationOperator2D
	{
		//DERIVE
		public virtual List<IfcDirection>? U {get {return null;}}
		public IfcCartesianTransformationOperator2D() : base()
		{
		}
		public IfcCartesianTransformationOperator2D(IfcDirection? Axis1, IfcDirection? Axis2, IfcCartesianPoint? LocalOrigin, IfcReal? Scale) : base (Axis1, Axis2, LocalOrigin, Scale)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Axis1,
				Axis2,
				LocalOrigin,
				Scale
			};
		}
		public virtual List<Global.IfcDirection>? _U
		{
			get
			{
				if(U != null)
				{
					List<Global.IfcDirection>? items = new List<Global.IfcDirection>();
					foreach (IfcDirection item in U)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator2DnonUniform
	/// SUBTYPE OF (IfcCartesianTransformationOperator2D);
	/// Scale2 : OPTIONAL IfcReal;
	/// DERIVE
	/// Scl2 : IfcReal := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
	/// WHERE
	/// Scale2GreaterZero : Scl2 > 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianTransformationOperator2DnonUniform : IfcCartesianTransformationOperator2D, Global.IfcCartesianTransformationOperator2DnonUniform
	{
		public virtual IfcReal? Scale2 { get; set; }
		//DERIVE
		public virtual IfcReal? Scl2 {get {return null;}}
		public IfcCartesianTransformationOperator2DnonUniform() : base()
		{
		}
		public IfcCartesianTransformationOperator2DnonUniform(IfcDirection? Axis1, IfcDirection? Axis2, IfcCartesianPoint? LocalOrigin, IfcReal? Scale, IfcReal? Scale2) : base (Axis1, Axis2, LocalOrigin, Scale)
		{
			this.Scale2 = Scale2;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Axis1,
				Axis2,
				LocalOrigin,
				Scale,
				Scale2
			};
		}
		public virtual Global.IfcReal? _Scale2
		{
			get
			{
				return Scale2;
			}
			set
			{
				if(value is IfcReal val)
				{
					Scale2 = val;
				}
				else if(value == null)
				{
					Scale2 = null;
				}
			}
		}
		public virtual Global.IfcReal? _Scl2
		{
			get
			{
				return Scl2;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator3D
	/// SUPERTYPE OF (ONEOF
	/// (IfcCartesianTransformationOperator3DnonUniform))
	/// SUBTYPE OF (IfcCartesianTransformationOperator);
	/// Axis3 : OPTIONAL IfcDirection;
	/// DERIVE
	/// U : LIST [3:3] OF IfcDirection := IfcBaseAxis(3,SELF\IfcCartesianTransformationOperator.Axis1,
	/// SELF\IfcCartesianTransformationOperator.Axis2,Axis3);
	/// WHERE
	/// DimIs3D : SELF\IfcCartesianTransformationOperator.Dim = 3;
	/// Axis1Is3D : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis1)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 3);
	/// Axis2Is3D : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis2)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 3);
	/// Axis3Is3D : NOT(EXISTS(Axis3)) OR (Axis3.Dim = 3);
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianTransformationOperator3D : IfcCartesianTransformationOperator, Global.IfcCartesianTransformationOperator3D
	{
		public virtual IfcDirection? Axis3 { get; set; }
		//DERIVE
		public virtual List<IfcDirection>? U {get {return null;}}
		public IfcCartesianTransformationOperator3D() : base()
		{
		}
		public IfcCartesianTransformationOperator3D(IfcDirection? Axis1, IfcDirection? Axis2, IfcCartesianPoint? LocalOrigin, IfcReal? Scale, IfcDirection? Axis3) : base (Axis1, Axis2, LocalOrigin, Scale)
		{
			this.Axis3 = Axis3;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Axis1,
				Axis2,
				LocalOrigin,
				Scale,
				Axis3
			};
		}
		public virtual Global.IfcDirection? _Axis3
		{
			get
			{
				return Axis3;
			}
			set
			{
				if(value is IfcDirection val)
				{
					Axis3 = val;
				}
				else if(value == null)
				{
					Axis3 = null;
				}
			}
		}
		public virtual List<Global.IfcDirection>? _U
		{
			get
			{
				if(U != null)
				{
					List<Global.IfcDirection>? items = new List<Global.IfcDirection>();
					foreach (IfcDirection item in U)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator3DnonUniform
	/// SUBTYPE OF (IfcCartesianTransformationOperator3D);
	/// Scale2 : OPTIONAL IfcReal;
	/// Scale3 : OPTIONAL IfcReal;
	/// DERIVE
	/// Scl2 : IfcReal := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
	/// Scl3 : IfcReal := NVL(Scale3, SELF\IfcCartesianTransformationOperator.Scl);
	/// WHERE
	/// Scale2GreaterZero : Scl2 > 0.0;
	/// Scale3GreaterZero : Scl3 > 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianTransformationOperator3DnonUniform : IfcCartesianTransformationOperator3D, Global.IfcCartesianTransformationOperator3DnonUniform
	{
		public virtual IfcReal? Scale2 { get; set; }
		public virtual IfcReal? Scale3 { get; set; }
		//DERIVE
		public virtual IfcReal? Scl2 {get {return null;}}
		//DERIVE
		public virtual IfcReal? Scl3 {get {return null;}}
		public IfcCartesianTransformationOperator3DnonUniform() : base()
		{
		}
		public IfcCartesianTransformationOperator3DnonUniform(IfcDirection? Axis1, IfcDirection? Axis2, IfcCartesianPoint? LocalOrigin, IfcReal? Scale, IfcDirection? Axis3, IfcReal? Scale2, IfcReal? Scale3) : base (Axis1, Axis2, LocalOrigin, Scale, Axis3)
		{
			this.Scale2 = Scale2;
			this.Scale3 = Scale3;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Axis1,
				Axis2,
				LocalOrigin,
				Scale,
				Axis3,
				Scale2,
				Scale3
			};
		}
		public virtual Global.IfcReal? _Scale2
		{
			get
			{
				return Scale2;
			}
			set
			{
				if(value is IfcReal val)
				{
					Scale2 = val;
				}
				else if(value == null)
				{
					Scale2 = null;
				}
			}
		}
		public virtual Global.IfcReal? _Scale3
		{
			get
			{
				return Scale3;
			}
			set
			{
				if(value is IfcReal val)
				{
					Scale3 = val;
				}
				else if(value == null)
				{
					Scale3 = null;
				}
			}
		}
		public virtual Global.IfcReal? _Scl2
		{
			get
			{
				return Scl2;
			}
		}
		public virtual Global.IfcReal? _Scl3
		{
			get
			{
				return Scl3;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCenterLineProfileDef
	/// SUBTYPE OF (IfcArbitraryOpenProfileDef);
	/// Thickness : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCenterLineProfileDef : IfcArbitraryOpenProfileDef, Global.IfcCenterLineProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Thickness { get; set; }
		public IfcCenterLineProfileDef() : base()
		{
		}
		public IfcCenterLineProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcBoundedCurve? Curve, IfcPositiveLengthMeasure? Thickness) : base (ProfileType, ProfileName, Curve)
		{
			this.Thickness = Thickness;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Curve,
				Thickness
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Thickness
		{
			get
			{
				return Thickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Thickness = val;
				}
				else if(value == null)
				{
					Thickness = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcChiller
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcChillerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcChillerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcChillerTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCHILLERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcChiller : IfcEnergyConversionDevice, Global.IfcChiller
	{
		public virtual IfcChillerTypeEnum? PredefinedType { get; set; }
		public IfcChiller() : base()
		{
		}
		public IfcChiller(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcChillerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcChillerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcChillerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcChillerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcChillerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcChillerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcChillerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcChillerType : IfcEnergyConversionDeviceType, Global.IfcChillerType
	{
		public virtual IfcChillerTypeEnum? PredefinedType { get; set; }
		public IfcChillerType() : base()
		{
		}
		public IfcChillerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcChillerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcChillerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcChillerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcChimney
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcChimneyTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcChimneyTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcChimneyTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCHIMNEYTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcChimney : IfcBuildingElement, Global.IfcChimney
	{
		public virtual IfcChimneyTypeEnum? PredefinedType { get; set; }
		public IfcChimney() : base()
		{
		}
		public IfcChimney(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcChimneyTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcChimneyTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcChimneyTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcChimneyType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcChimneyTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcChimneyTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcChimneyTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcChimneyType : IfcBuildingElementType, Global.IfcChimneyType
	{
		public virtual IfcChimneyTypeEnum? PredefinedType { get; set; }
		public IfcChimneyType() : base()
		{
		}
		public IfcChimneyType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcChimneyTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcChimneyTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcChimneyTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCircle
	/// SUBTYPE OF (IfcConic);
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCircle : IfcConic, Global.IfcCircle
	{
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public IfcCircle() : base()
		{
		}
		public IfcCircle(IfcAxis2Placement? Position, IfcPositiveLengthMeasure? Radius) : base (Position)
		{
			this.Radius = Radius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				Radius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCircleHollowProfileDef
	/// SUBTYPE OF (IfcCircleProfileDef);
	/// WallThickness : IfcPositiveLengthMeasure;
	/// WHERE
	/// WR1 : WallThickness < SELF\IfcCircleProfileDef.Radius;
	/// END_ENTITY;
	/// <summary>
	public class IfcCircleHollowProfileDef : IfcCircleProfileDef, Global.IfcCircleHollowProfileDef
	{
		public virtual IfcPositiveLengthMeasure? WallThickness { get; set; }
		public IfcCircleHollowProfileDef() : base()
		{
		}
		public IfcCircleHollowProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Radius, IfcPositiveLengthMeasure? WallThickness) : base (ProfileType, ProfileName, Position, Radius)
		{
			this.WallThickness = WallThickness;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Radius,
				WallThickness
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _WallThickness
		{
			get
			{
				return WallThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					WallThickness = val;
				}
				else if(value == null)
				{
					WallThickness = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCircleProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcCircleHollowProfileDef))
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCircleProfileDef : IfcParameterizedProfileDef, Global.IfcCircleProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public IfcCircleProfileDef() : base()
		{
		}
		public IfcCircleProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Radius) : base (ProfileType, ProfileName, Position)
		{
			this.Radius = Radius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Radius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCivilElement
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcCivilElement : IfcElement, Global.IfcCivilElement
	{
		public IfcCivilElement() : base()
		{
		}
		public IfcCivilElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcCivilElementType
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public class IfcCivilElementType : IfcElementType, Global.IfcCivilElementType
	{
		public IfcCivilElementType() : base()
		{
		}
		public IfcCivilElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcClassification
	/// SUBTYPE OF (IfcExternalInformation);
	/// Source : OPTIONAL IfcLabel;
	/// Edition : OPTIONAL IfcLabel;
	/// EditionDate : OPTIONAL IfcDate;
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Location : OPTIONAL IfcURIReference;
	/// ReferenceTokens : OPTIONAL LIST [1:?] OF IfcIdentifier;
	/// INVERSE
	/// ClassificationForObjects : SET [0:?] OF IfcRelAssociatesClassification FOR RelatingClassification;
	/// HasReferences : SET [0:?] OF IfcClassificationReference FOR ReferencedSource;
	/// END_ENTITY;
	/// <summary>
	public class IfcClassification : IfcExternalInformation, IfcClassificationReferenceSelect, IfcClassificationSelect, Global.IfcClassification
	{
		public virtual IfcLabel? Source { get; set; }
		public virtual IfcLabel? Edition { get; set; }
		public virtual IfcDate? EditionDate { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcURIReference? Location { get; set; }
		public virtual List<IfcIdentifier>? ReferenceTokens { get; set; }
		public List<IfcRelAssociatesClassification>? ClassificationForObjects {get{return Model?.GetItems<IfcRelAssociatesClassification>().Where(x => x.RelatingClassification != null && x.RelatingClassification == this).ToList();}}
		public List<IfcClassificationReference>? HasReferences {get{return Model?.GetItems<IfcClassificationReference>().Where(x => x.ReferencedSource != null && x.ReferencedSource == this).ToList();}}
		public IfcClassification() : base()
		{
		}
		public IfcClassification(IfcLabel? Source, IfcLabel? Edition, IfcDate? EditionDate, IfcLabel? Name, IfcText? Description, IfcURIReference? Location, List<IfcIdentifier>? ReferenceTokens) : base ()
		{
			this.Source = Source;
			this.Edition = Edition;
			this.EditionDate = EditionDate;
			this.Name = Name;
			this.Description = Description;
			this.Location = Location;
			this.ReferenceTokens = ReferenceTokens;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Source,
				Edition,
				EditionDate,
				Name,
				Description,
				Location,
				ReferenceTokens
			};
		}
		public virtual Global.IfcLabel? _Source
		{
			get
			{
				return Source;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Source = val;
				}
				else if(value == null)
				{
					Source = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Edition
		{
			get
			{
				return Edition;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Edition = val;
				}
				else if(value == null)
				{
					Edition = null;
				}
			}
		}
		public virtual Global.IfcDate? _EditionDate
		{
			get
			{
				return EditionDate;
			}
			set
			{
				if(value is IfcDate val)
				{
					EditionDate = val;
				}
				else if(value == null)
				{
					EditionDate = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcURIReference? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IfcURIReference val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
		public virtual List<Global.IfcIdentifier>? _ReferenceTokens
		{
			get
			{
				if(ReferenceTokens != null)
				{
					List<Global.IfcIdentifier>? items = new List<Global.IfcIdentifier>();
					foreach (IfcIdentifier item in ReferenceTokens)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ReferenceTokens = null;
				}
				else
				{
					ReferenceTokens = new List<IfcIdentifier>();
					foreach(var val in value)
					{
						if(val is IfcIdentifier v)
						{
							ReferenceTokens.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcRelAssociatesClassification>? _ClassificationForObjects
		{
			get
			{
				if(ClassificationForObjects != null)
				{
					List<Global.IfcRelAssociatesClassification>? items = new List<Global.IfcRelAssociatesClassification>();
					foreach (IfcRelAssociatesClassification item in ClassificationForObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcClassificationReference>? _HasReferences
		{
			get
			{
				if(HasReferences != null)
				{
					List<Global.IfcClassificationReference>? items = new List<Global.IfcClassificationReference>();
					foreach (IfcClassificationReference item in HasReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClassificationReference
	/// SUBTYPE OF (IfcExternalReference);
	/// ReferencedSource : OPTIONAL IfcClassificationReferenceSelect;
	/// Description : OPTIONAL IfcText;
	/// Sort : OPTIONAL IfcIdentifier;
	/// INVERSE
	/// ClassificationRefForObjects : SET [0:?] OF IfcRelAssociatesClassification FOR RelatingClassification;
	/// HasReferences : SET [0:?] OF IfcClassificationReference FOR ReferencedSource;
	/// END_ENTITY;
	/// <summary>
	public class IfcClassificationReference : IfcExternalReference, IfcClassificationReferenceSelect, IfcClassificationSelect, Global.IfcClassificationReference
	{
		public virtual IfcClassificationReferenceSelect? ReferencedSource { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcIdentifier? Sort { get; set; }
		public List<IfcRelAssociatesClassification>? ClassificationRefForObjects {get{return Model?.GetItems<IfcRelAssociatesClassification>().Where(x => x.RelatingClassification != null && x.RelatingClassification == this).ToList();}}
		public List<IfcClassificationReference>? HasReferences {get{return Model?.GetItems<IfcClassificationReference>().Where(x => x.ReferencedSource != null && x.ReferencedSource == this).ToList();}}
		public IfcClassificationReference() : base()
		{
		}
		public IfcClassificationReference(IfcURIReference? Location, IfcIdentifier? Identification, IfcLabel? Name, IfcClassificationReferenceSelect? ReferencedSource, IfcText? Description, IfcIdentifier? Sort) : base (Location, Identification, Name)
		{
			this.ReferencedSource = ReferencedSource;
			this.Description = Description;
			this.Sort = Sort;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				Identification,
				Name,
				ReferencedSource,
				Description,
				Sort
			};
		}
		public virtual Global.IfcClassificationReferenceSelect? _ReferencedSource
		{
			get
			{
				return ReferencedSource;
			}
			set
			{
				if(value is IfcClassificationReferenceSelect val)
				{
					ReferencedSource = val;
				}
				else if(value == null)
				{
					ReferencedSource = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcIdentifier? _Sort
		{
			get
			{
				return Sort;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Sort = val;
				}
				else if(value == null)
				{
					Sort = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssociatesClassification>? _ClassificationRefForObjects
		{
			get
			{
				if(ClassificationRefForObjects != null)
				{
					List<Global.IfcRelAssociatesClassification>? items = new List<Global.IfcRelAssociatesClassification>();
					foreach (IfcRelAssociatesClassification item in ClassificationRefForObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcClassificationReference>? _HasReferences
		{
			get
			{
				if(HasReferences != null)
				{
					List<Global.IfcClassificationReference>? items = new List<Global.IfcClassificationReference>();
					foreach (IfcClassificationReference item in HasReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClosedShell
	/// SUBTYPE OF (IfcConnectedFaceSet);
	/// END_ENTITY;
	/// <summary>
	public class IfcClosedShell : IfcConnectedFaceSet, IfcShell, IfcSolidOrShell, Global.IfcClosedShell
	{
		public IfcClosedShell() : base()
		{
		}
		public IfcClosedShell(List<IfcFace>? CfsFaces) : base (CfsFaces)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CfsFaces
			};
		}
	}
	/// <summary>
	/// ENTITY IfcCoil
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcCoilTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCoilTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoilTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCOILTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCoil : IfcEnergyConversionDevice, Global.IfcCoil
	{
		public virtual IfcCoilTypeEnum? PredefinedType { get; set; }
		public IfcCoil() : base()
		{
		}
		public IfcCoil(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCoilTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCoilTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCoilTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCoilType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCoilTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCoilTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoilTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCoilType : IfcEnergyConversionDeviceType, Global.IfcCoilType
	{
		public virtual IfcCoilTypeEnum? PredefinedType { get; set; }
		public IfcCoilType() : base()
		{
		}
		public IfcCoilType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCoilTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCoilTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCoilTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcColourRgb
	/// SUBTYPE OF (IfcColourSpecification);
	/// Red : IfcNormalisedRatioMeasure;
	/// Green : IfcNormalisedRatioMeasure;
	/// Blue : IfcNormalisedRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcColourRgb : IfcColourSpecification, IfcColourOrFactor, Global.IfcColourRgb
	{
		public virtual IfcNormalisedRatioMeasure? Red { get; set; }
		public virtual IfcNormalisedRatioMeasure? Green { get; set; }
		public virtual IfcNormalisedRatioMeasure? Blue { get; set; }
		public IfcColourRgb() : base()
		{
		}
		public IfcColourRgb(IfcLabel? Name, IfcNormalisedRatioMeasure? Red, IfcNormalisedRatioMeasure? Green, IfcNormalisedRatioMeasure? Blue) : base (Name)
		{
			this.Red = Red;
			this.Green = Green;
			this.Blue = Blue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Red,
				Green,
				Blue
			};
		}
		public virtual Global.IfcNormalisedRatioMeasure? _Red
		{
			get
			{
				return Red;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					Red = val;
				}
				else if(value == null)
				{
					Red = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _Green
		{
			get
			{
				return Green;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					Green = val;
				}
				else if(value == null)
				{
					Green = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _Blue
		{
			get
			{
				return Blue;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					Blue = val;
				}
				else if(value == null)
				{
					Blue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcColourRgbList
	/// SUBTYPE OF (IfcPresentationItem);
	/// ColourList : LIST [1:?] OF LIST [3:3] OF IfcNormalisedRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcColourRgbList : IfcPresentationItem, Global.IfcColourRgbList
	{
		public virtual List<List<IfcNormalisedRatioMeasure>>? ColourList { get; set; }
		public IfcColourRgbList() : base()
		{
		}
		public IfcColourRgbList(List<List<IfcNormalisedRatioMeasure>>? ColourList) : base ()
		{
			this.ColourList = ColourList;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ColourList
			};
		}
		public virtual List<List<Global.IfcNormalisedRatioMeasure>>? _ColourList
		{
			get
			{
				if(ColourList != null)
				{
					List<List<Global.IfcNormalisedRatioMeasure>>? items = new List<List<Global.IfcNormalisedRatioMeasure>>();
					foreach (List<IfcNormalisedRatioMeasure> item1s in ColourList)
					{
						List<Global.IfcNormalisedRatioMeasure>? resultItems = new List<Global.IfcNormalisedRatioMeasure>();
						foreach (IfcNormalisedRatioMeasure item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ColourList = null;
				}
				else
				{
					ColourList = new List<List<IfcNormalisedRatioMeasure>>();
					foreach(var vals in value)
					{
						if(vals != null)
						{
							List<IfcNormalisedRatioMeasure> items = new List<IfcNormalisedRatioMeasure>();
							foreach(var val in vals)
							{
								if(val is IfcNormalisedRatioMeasure v)
								{
									items.Add(v);
								}
							}
							ColourList.Add(items);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcColourSpecification
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcColourRgb))
	/// SUBTYPE OF (IfcPresentationItem);
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcColourSpecification : IfcPresentationItem, IfcColour, Global.IfcColourSpecification
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcColourSpecification() : base()
		{
		}
		public IfcColourSpecification(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcColumn
	/// SUPERTYPE OF (ONEOF
	/// (IfcColumnStandardCase))
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcColumnTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcColumnTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcColumnTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCOLUMNTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcColumn : IfcBuildingElement, Global.IfcColumn
	{
		public virtual IfcColumnTypeEnum? PredefinedType { get; set; }
		public IfcColumn() : base()
		{
		}
		public IfcColumn(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcColumnTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcColumnTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcColumnTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcColumnStandardCase
	/// SUBTYPE OF (IfcColumn);
	/// WHERE
	/// HasMaterialProfileSetUsage : SIZEOF (QUERY(temp <* USEDIN(SELF, 'IFC4.IFCRELASSOCIATES.RELATEDOBJECTS') |
	/// ('IFC4.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)) AND
	/// ('IFC4.IFCMATERIALPROFILESETUSAGE' IN TYPEOF(temp.RelatingMaterial))
	/// )) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcColumnStandardCase : IfcColumn, Global.IfcColumnStandardCase
	{
		public IfcColumnStandardCase() : base()
		{
		}
		public IfcColumnStandardCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcColumnTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcColumnType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcColumnTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcColumnTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcColumnTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcColumnType : IfcBuildingElementType, Global.IfcColumnType
	{
		public virtual IfcColumnTypeEnum? PredefinedType { get; set; }
		public IfcColumnType() : base()
		{
		}
		public IfcColumnType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcColumnTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcColumnTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcColumnTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCommunicationsAppliance
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcCommunicationsApplianceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCommunicationsApplianceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCommunicationsApplianceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCOMMUNICATIONSAPPLIANCETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCommunicationsAppliance : IfcFlowTerminal, Global.IfcCommunicationsAppliance
	{
		public virtual IfcCommunicationsApplianceTypeEnum? PredefinedType { get; set; }
		public IfcCommunicationsAppliance() : base()
		{
		}
		public IfcCommunicationsAppliance(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCommunicationsApplianceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCommunicationsApplianceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCommunicationsApplianceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCommunicationsApplianceType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcCommunicationsApplianceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCommunicationsApplianceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCommunicationsApplianceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCommunicationsApplianceType : IfcFlowTerminalType, Global.IfcCommunicationsApplianceType
	{
		public virtual IfcCommunicationsApplianceTypeEnum? PredefinedType { get; set; }
		public IfcCommunicationsApplianceType() : base()
		{
		}
		public IfcCommunicationsApplianceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCommunicationsApplianceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCommunicationsApplianceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCommunicationsApplianceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcComplexProperty
	/// SUBTYPE OF (IfcProperty);
	/// UsageName : IfcIdentifier;
	/// HasProperties : SET [1:?] OF IfcProperty;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* HasProperties | SELF :=: temp)) = 0;
	/// WR22 : IfcUniquePropertyName(HasProperties);
	/// END_ENTITY;
	/// <summary>
	public class IfcComplexProperty : IfcProperty, Global.IfcComplexProperty
	{
		public virtual IfcIdentifier? UsageName { get; set; }
		public virtual List<IfcProperty>? HasProperties { get; set; }
		public IfcComplexProperty() : base()
		{
		}
		public IfcComplexProperty(IfcIdentifier? Name, IfcText? Description, IfcIdentifier? UsageName, List<IfcProperty>? HasProperties) : base (Name, Description)
		{
			this.UsageName = UsageName;
			this.HasProperties = HasProperties;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				UsageName,
				HasProperties
			};
		}
		public virtual Global.IfcIdentifier? _UsageName
		{
			get
			{
				return UsageName;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					UsageName = val;
				}
				else if(value == null)
				{
					UsageName = null;
				}
			}
		}
		public virtual List<Global.IfcProperty>? _HasProperties
		{
			get
			{
				if(HasProperties != null)
				{
					List<Global.IfcProperty>? items = new List<Global.IfcProperty>();
					foreach (IfcProperty item in HasProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasProperties = null;
				}
				else
				{
					HasProperties = new List<IfcProperty>();
					foreach(var val in value)
					{
						if(val is IfcProperty v)
						{
							HasProperties.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcComplexPropertyTemplate
	/// SUBTYPE OF (IfcPropertyTemplate);
	/// UsageName : OPTIONAL IfcLabel;
	/// TemplateType : OPTIONAL IfcComplexPropertyTemplateTypeEnum;
	/// HasPropertyTemplates : OPTIONAL SET [1:?] OF IfcPropertyTemplate;
	/// WHERE
	/// UniquePropertyNames : IfcUniquePropertyTemplateNames(HasPropertyTemplates);
	/// NoSelfReference : SIZEOF(QUERY(temp <* HasPropertyTemplates | SELF :=: temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcComplexPropertyTemplate : IfcPropertyTemplate, Global.IfcComplexPropertyTemplate
	{
		public virtual IfcLabel? UsageName { get; set; }
		public virtual IfcComplexPropertyTemplateTypeEnum? TemplateType { get; set; }
		public virtual List<IfcPropertyTemplate>? HasPropertyTemplates { get; set; }
		public IfcComplexPropertyTemplate() : base()
		{
		}
		public IfcComplexPropertyTemplate(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? UsageName, IfcComplexPropertyTemplateTypeEnum? TemplateType, List<IfcPropertyTemplate>? HasPropertyTemplates) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.UsageName = UsageName;
			this.TemplateType = TemplateType;
			this.HasPropertyTemplates = HasPropertyTemplates;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				UsageName,
				TemplateType,
				HasPropertyTemplates
			};
		}
		public virtual Global.IfcLabel? _UsageName
		{
			get
			{
				return UsageName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UsageName = val;
				}
				else if(value == null)
				{
					UsageName = null;
				}
			}
		}
		public virtual Global.IfcComplexPropertyTemplateTypeEnum? _TemplateType
		{
			get
			{
				return TemplateType;
			}
			set
			{
				if(value is IfcComplexPropertyTemplateTypeEnum val)
				{
					TemplateType = val;
				}
				else if(value == null)
				{
					TemplateType = null;
				}
			}
		}
		public virtual List<Global.IfcPropertyTemplate>? _HasPropertyTemplates
		{
			get
			{
				if(HasPropertyTemplates != null)
				{
					List<Global.IfcPropertyTemplate>? items = new List<Global.IfcPropertyTemplate>();
					foreach (IfcPropertyTemplate item in HasPropertyTemplates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasPropertyTemplates = null;
				}
				else
				{
					HasPropertyTemplates = new List<IfcPropertyTemplate>();
					foreach(var val in value)
					{
						if(val is IfcPropertyTemplate v)
						{
							HasPropertyTemplates.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompositeCurve
	/// SUPERTYPE OF (ONEOF
	/// (IfcCompositeCurveOnSurface))
	/// SUBTYPE OF (IfcBoundedCurve);
	/// Segments : LIST [1:?] OF IfcCompositeCurveSegment;
	/// SelfIntersect : IfcLogical;
	/// DERIVE
	/// NSegments : IfcInteger := SIZEOF(Segments);
	/// ClosedCurve : IfcLogical := Segments[NSegments].Transition <> Discontinuous;
	/// WHERE
	/// CurveContinuous : ((NOT ClosedCurve) AND (SIZEOF(QUERY(Temp <* Segments | Temp.Transition = Discontinuous)) = 1)) OR ((ClosedCurve) AND (SIZEOF(QUERY(Temp <* Segments | Temp.Transition = Discontinuous)) = 0));
	/// SameDim : SIZEOF( QUERY( Temp <* Segments | Temp.Dim <> Segments[1].Dim)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcCompositeCurve : IfcBoundedCurve, Global.IfcCompositeCurve
	{
		public virtual List<IfcCompositeCurveSegment>? Segments { get; set; }
		public virtual IfcLogical? SelfIntersect { get; set; }
		//DERIVE
		public virtual IfcInteger? NSegments {get {return null;}}
		//DERIVE
		public virtual IfcLogical? ClosedCurve {get {return null;}}
		public IfcCompositeCurve() : base()
		{
		}
		public IfcCompositeCurve(List<IfcCompositeCurveSegment>? Segments, IfcLogical? SelfIntersect) : base ()
		{
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Segments,
				SelfIntersect
			};
		}
		public virtual List<Global.IfcCompositeCurveSegment>? _Segments
		{
			get
			{
				if(Segments != null)
				{
					List<Global.IfcCompositeCurveSegment>? items = new List<Global.IfcCompositeCurveSegment>();
					foreach (IfcCompositeCurveSegment item in Segments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Segments = null;
				}
				else
				{
					Segments = new List<IfcCompositeCurveSegment>();
					foreach(var val in value)
					{
						if(val is IfcCompositeCurveSegment v)
						{
							Segments.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLogical? _SelfIntersect
		{
			get
			{
				return SelfIntersect;
			}
			set
			{
				if(value is IfcLogical val)
				{
					SelfIntersect = val;
				}
				else if(value == null)
				{
					SelfIntersect = null;
				}
			}
		}
		public virtual Global.IfcInteger? _NSegments
		{
			get
			{
				return NSegments;
			}
		}
		public virtual Global.IfcLogical? _ClosedCurve
		{
			get
			{
				return ClosedCurve;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompositeCurveOnSurface
	/// SUPERTYPE OF (ONEOF
	/// (IfcBoundaryCurve))
	/// SUBTYPE OF (IfcCompositeCurve);
	/// DERIVE
	/// BasisSurface : SET [0:1] OF IfcSurface := IfcGetBasisSurface(SELF);
	/// WHERE
	/// SameSurface : SIZEOF(BasisSurface) > 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcCompositeCurveOnSurface : IfcCompositeCurve, IfcCurveOnSurface, Global.IfcCompositeCurveOnSurface
	{
		//DERIVE
		public virtual List<IfcSurface>? BasisSurface {get {return null;}}
		public IfcCompositeCurveOnSurface() : base()
		{
		}
		public IfcCompositeCurveOnSurface(List<IfcCompositeCurveSegment>? Segments, IfcLogical? SelfIntersect) : base (Segments, SelfIntersect)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Segments,
				SelfIntersect
			};
		}
		public virtual List<Global.IfcSurface>? _BasisSurface
		{
			get
			{
				if(BasisSurface != null)
				{
					List<Global.IfcSurface>? items = new List<Global.IfcSurface>();
					foreach (IfcSurface item in BasisSurface)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompositeCurveSegment
	/// SUPERTYPE OF (ONEOF
	/// (IfcReparametrisedCompositeCurveSegment))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Transition : IfcTransitionCode;
	/// SameSense : IfcBoolean;
	/// ParentCurve : IfcCurve;
	/// DERIVE
	/// Dim : IfcDimensionCount := ParentCurve.Dim;
	/// INVERSE
	/// UsingCurves : SET [1:?] OF IfcCompositeCurve FOR Segments;
	/// WHERE
	/// ParentIsBoundedCurve : ('IFC4.IFCBOUNDEDCURVE' IN TYPEOF(ParentCurve));
	/// END_ENTITY;
	/// <summary>
	public class IfcCompositeCurveSegment : IfcGeometricRepresentationItem, Global.IfcCompositeCurveSegment
	{
		public virtual IfcTransitionCode? Transition { get; set; }
		public virtual IfcBoolean? SameSense { get; set; }
		public virtual IfcCurve? ParentCurve { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public List<IfcCompositeCurve>? UsingCurves {get{return Model?.GetItems<IfcCompositeCurve>().Where(x => x.Segments != null && x.Segments.Contains(this)).ToList();}}
		public IfcCompositeCurveSegment() : base()
		{
		}
		public IfcCompositeCurveSegment(IfcTransitionCode? Transition, IfcBoolean? SameSense, IfcCurve? ParentCurve) : base ()
		{
			this.Transition = Transition;
			this.SameSense = SameSense;
			this.ParentCurve = ParentCurve;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Transition,
				SameSense,
				ParentCurve
			};
		}
		public virtual Global.IfcTransitionCode? _Transition
		{
			get
			{
				return Transition;
			}
			set
			{
				if(value is IfcTransitionCode val)
				{
					Transition = val;
				}
				else if(value == null)
				{
					Transition = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _SameSense
		{
			get
			{
				return SameSense;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					SameSense = val;
				}
				else if(value == null)
				{
					SameSense = null;
				}
			}
		}
		public virtual Global.IfcCurve? _ParentCurve
		{
			get
			{
				return ParentCurve;
			}
			set
			{
				if(value is IfcCurve val)
				{
					ParentCurve = val;
				}
				else if(value == null)
				{
					ParentCurve = null;
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
		public virtual List<Global.IfcCompositeCurve>? _UsingCurves
		{
			get
			{
				if(UsingCurves != null)
				{
					List<Global.IfcCompositeCurve>? items = new List<Global.IfcCompositeCurve>();
					foreach (IfcCompositeCurve item in UsingCurves)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompositeProfileDef
	/// SUBTYPE OF (IfcProfileDef);
	/// Profiles : SET [2:?] OF IfcProfileDef;
	/// Label : OPTIONAL IfcLabel;
	/// WHERE
	/// InvariantProfileType : SIZEOF(QUERY(temp <* Profiles | temp.ProfileType <> Profiles[1].ProfileType)) = 0;
	/// NoRecursion : SIZEOF(QUERY(temp <* Profiles | 'IFC4.IFCCOMPOSITEPROFILEDEF' IN TYPEOF(temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcCompositeProfileDef : IfcProfileDef, Global.IfcCompositeProfileDef
	{
		public virtual List<IfcProfileDef>? Profiles { get; set; }
		public virtual IfcLabel? Label { get; set; }
		public IfcCompositeProfileDef() : base()
		{
		}
		public IfcCompositeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, List<IfcProfileDef>? Profiles, IfcLabel? Label) : base (ProfileType, ProfileName)
		{
			this.Profiles = Profiles;
			this.Label = Label;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Profiles,
				Label
			};
		}
		public virtual List<Global.IfcProfileDef>? _Profiles
		{
			get
			{
				if(Profiles != null)
				{
					List<Global.IfcProfileDef>? items = new List<Global.IfcProfileDef>();
					foreach (IfcProfileDef item in Profiles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Profiles = null;
				}
				else
				{
					Profiles = new List<IfcProfileDef>();
					foreach(var val in value)
					{
						if(val is IfcProfileDef v)
						{
							Profiles.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _Label
		{
			get
			{
				return Label;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Label = val;
				}
				else if(value == null)
				{
					Label = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompressor
	/// SUBTYPE OF (IfcFlowMovingDevice);
	/// PredefinedType : OPTIONAL IfcCompressorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCompressorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCompressorTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCOMPRESSORTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCompressor : IfcFlowMovingDevice, Global.IfcCompressor
	{
		public virtual IfcCompressorTypeEnum? PredefinedType { get; set; }
		public IfcCompressor() : base()
		{
		}
		public IfcCompressor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCompressorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCompressorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCompressorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompressorType
	/// SUBTYPE OF (IfcFlowMovingDeviceType);
	/// PredefinedType : IfcCompressorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCompressorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCompressorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCompressorType : IfcFlowMovingDeviceType, Global.IfcCompressorType
	{
		public virtual IfcCompressorTypeEnum? PredefinedType { get; set; }
		public IfcCompressorType() : base()
		{
		}
		public IfcCompressorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCompressorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCompressorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCompressorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCondenser
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcCondenserTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCondenserTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCondenserTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCONDENSERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCondenser : IfcEnergyConversionDevice, Global.IfcCondenser
	{
		public virtual IfcCondenserTypeEnum? PredefinedType { get; set; }
		public IfcCondenser() : base()
		{
		}
		public IfcCondenser(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCondenserTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCondenserTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCondenserTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCondenserType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCondenserTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCondenserTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCondenserTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCondenserType : IfcEnergyConversionDeviceType, Global.IfcCondenserType
	{
		public virtual IfcCondenserTypeEnum? PredefinedType { get; set; }
		public IfcCondenserType() : base()
		{
		}
		public IfcCondenserType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCondenserTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCondenserTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCondenserTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConic
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCircle
	/// ,IfcEllipse))
	/// SUBTYPE OF (IfcCurve);
	/// Position : IfcAxis2Placement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcConic : IfcCurve, Global.IfcConic
	{
		public virtual IfcAxis2Placement? Position { get; set; }
		public IfcConic() : base()
		{
		}
		public IfcConic(IfcAxis2Placement? Position) : base ()
		{
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position
			};
		}
		public virtual Global.IfcAxis2Placement? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IfcAxis2Placement val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectedFaceSet
	/// SUPERTYPE OF (ONEOF
	/// (IfcClosedShell
	/// ,IfcOpenShell))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// CfsFaces : SET [1:?] OF IfcFace;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectedFaceSet : IfcTopologicalRepresentationItem, Global.IfcConnectedFaceSet
	{
		public virtual List<IfcFace>? CfsFaces { get; set; }
		public IfcConnectedFaceSet() : base()
		{
		}
		public IfcConnectedFaceSet(List<IfcFace>? CfsFaces) : base ()
		{
			this.CfsFaces = CfsFaces;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CfsFaces
			};
		}
		public virtual List<Global.IfcFace>? _CfsFaces
		{
			get
			{
				if(CfsFaces != null)
				{
					List<Global.IfcFace>? items = new List<Global.IfcFace>();
					foreach (IfcFace item in CfsFaces)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CfsFaces = null;
				}
				else
				{
					CfsFaces = new List<IfcFace>();
					foreach(var val in value)
					{
						if(val is IfcFace v)
						{
							CfsFaces.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionCurveGeometry
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// CurveOnRelatingElement : IfcCurveOrEdgeCurve;
	/// CurveOnRelatedElement : OPTIONAL IfcCurveOrEdgeCurve;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectionCurveGeometry : IfcConnectionGeometry, Global.IfcConnectionCurveGeometry
	{
		public virtual IfcCurveOrEdgeCurve? CurveOnRelatingElement { get; set; }
		public virtual IfcCurveOrEdgeCurve? CurveOnRelatedElement { get; set; }
		public IfcConnectionCurveGeometry() : base()
		{
		}
		public IfcConnectionCurveGeometry(IfcCurveOrEdgeCurve? CurveOnRelatingElement, IfcCurveOrEdgeCurve? CurveOnRelatedElement) : base ()
		{
			this.CurveOnRelatingElement = CurveOnRelatingElement;
			this.CurveOnRelatedElement = CurveOnRelatedElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CurveOnRelatingElement,
				CurveOnRelatedElement
			};
		}
		public virtual Global.IfcCurveOrEdgeCurve? _CurveOnRelatingElement
		{
			get
			{
				return CurveOnRelatingElement;
			}
			set
			{
				if(value is IfcCurveOrEdgeCurve val)
				{
					CurveOnRelatingElement = val;
				}
				else if(value == null)
				{
					CurveOnRelatingElement = null;
				}
			}
		}
		public virtual Global.IfcCurveOrEdgeCurve? _CurveOnRelatedElement
		{
			get
			{
				return CurveOnRelatedElement;
			}
			set
			{
				if(value is IfcCurveOrEdgeCurve val)
				{
					CurveOnRelatedElement = val;
				}
				else if(value == null)
				{
					CurveOnRelatedElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionGeometry
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConnectionCurveGeometry
	/// ,IfcConnectionPointGeometry
	/// ,IfcConnectionSurfaceGeometry
	/// ,IfcConnectionVolumeGeometry));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcConnectionGeometry : Ifc_Entity, Global.IfcConnectionGeometry
	{
		public IfcConnectionGeometry() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionPointEccentricity
	/// SUBTYPE OF (IfcConnectionPointGeometry);
	/// EccentricityInX : OPTIONAL IfcLengthMeasure;
	/// EccentricityInY : OPTIONAL IfcLengthMeasure;
	/// EccentricityInZ : OPTIONAL IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectionPointEccentricity : IfcConnectionPointGeometry, Global.IfcConnectionPointEccentricity
	{
		public virtual IfcLengthMeasure? EccentricityInX { get; set; }
		public virtual IfcLengthMeasure? EccentricityInY { get; set; }
		public virtual IfcLengthMeasure? EccentricityInZ { get; set; }
		public IfcConnectionPointEccentricity() : base()
		{
		}
		public IfcConnectionPointEccentricity(IfcPointOrVertexPoint? PointOnRelatingElement, IfcPointOrVertexPoint? PointOnRelatedElement, IfcLengthMeasure? EccentricityInX, IfcLengthMeasure? EccentricityInY, IfcLengthMeasure? EccentricityInZ) : base (PointOnRelatingElement, PointOnRelatedElement)
		{
			this.EccentricityInX = EccentricityInX;
			this.EccentricityInY = EccentricityInY;
			this.EccentricityInZ = EccentricityInZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				PointOnRelatingElement,
				PointOnRelatedElement,
				EccentricityInX,
				EccentricityInY,
				EccentricityInZ
			};
		}
		public virtual Global.IfcLengthMeasure? _EccentricityInX
		{
			get
			{
				return EccentricityInX;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					EccentricityInX = val;
				}
				else if(value == null)
				{
					EccentricityInX = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _EccentricityInY
		{
			get
			{
				return EccentricityInY;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					EccentricityInY = val;
				}
				else if(value == null)
				{
					EccentricityInY = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _EccentricityInZ
		{
			get
			{
				return EccentricityInZ;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					EccentricityInZ = val;
				}
				else if(value == null)
				{
					EccentricityInZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionPointGeometry
	/// SUPERTYPE OF (ONEOF
	/// (IfcConnectionPointEccentricity))
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// PointOnRelatingElement : IfcPointOrVertexPoint;
	/// PointOnRelatedElement : OPTIONAL IfcPointOrVertexPoint;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectionPointGeometry : IfcConnectionGeometry, Global.IfcConnectionPointGeometry
	{
		public virtual IfcPointOrVertexPoint? PointOnRelatingElement { get; set; }
		public virtual IfcPointOrVertexPoint? PointOnRelatedElement { get; set; }
		public IfcConnectionPointGeometry() : base()
		{
		}
		public IfcConnectionPointGeometry(IfcPointOrVertexPoint? PointOnRelatingElement, IfcPointOrVertexPoint? PointOnRelatedElement) : base ()
		{
			this.PointOnRelatingElement = PointOnRelatingElement;
			this.PointOnRelatedElement = PointOnRelatedElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				PointOnRelatingElement,
				PointOnRelatedElement
			};
		}
		public virtual Global.IfcPointOrVertexPoint? _PointOnRelatingElement
		{
			get
			{
				return PointOnRelatingElement;
			}
			set
			{
				if(value is IfcPointOrVertexPoint val)
				{
					PointOnRelatingElement = val;
				}
				else if(value == null)
				{
					PointOnRelatingElement = null;
				}
			}
		}
		public virtual Global.IfcPointOrVertexPoint? _PointOnRelatedElement
		{
			get
			{
				return PointOnRelatedElement;
			}
			set
			{
				if(value is IfcPointOrVertexPoint val)
				{
					PointOnRelatedElement = val;
				}
				else if(value == null)
				{
					PointOnRelatedElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionSurfaceGeometry
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// SurfaceOnRelatingElement : IfcSurfaceOrFaceSurface;
	/// SurfaceOnRelatedElement : OPTIONAL IfcSurfaceOrFaceSurface;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectionSurfaceGeometry : IfcConnectionGeometry, Global.IfcConnectionSurfaceGeometry
	{
		public virtual IfcSurfaceOrFaceSurface? SurfaceOnRelatingElement { get; set; }
		public virtual IfcSurfaceOrFaceSurface? SurfaceOnRelatedElement { get; set; }
		public IfcConnectionSurfaceGeometry() : base()
		{
		}
		public IfcConnectionSurfaceGeometry(IfcSurfaceOrFaceSurface? SurfaceOnRelatingElement, IfcSurfaceOrFaceSurface? SurfaceOnRelatedElement) : base ()
		{
			this.SurfaceOnRelatingElement = SurfaceOnRelatingElement;
			this.SurfaceOnRelatedElement = SurfaceOnRelatedElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SurfaceOnRelatingElement,
				SurfaceOnRelatedElement
			};
		}
		public virtual Global.IfcSurfaceOrFaceSurface? _SurfaceOnRelatingElement
		{
			get
			{
				return SurfaceOnRelatingElement;
			}
			set
			{
				if(value is IfcSurfaceOrFaceSurface val)
				{
					SurfaceOnRelatingElement = val;
				}
				else if(value == null)
				{
					SurfaceOnRelatingElement = null;
				}
			}
		}
		public virtual Global.IfcSurfaceOrFaceSurface? _SurfaceOnRelatedElement
		{
			get
			{
				return SurfaceOnRelatedElement;
			}
			set
			{
				if(value is IfcSurfaceOrFaceSurface val)
				{
					SurfaceOnRelatedElement = val;
				}
				else if(value == null)
				{
					SurfaceOnRelatedElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionVolumeGeometry
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// VolumeOnRelatingElement : IfcSolidOrShell;
	/// VolumeOnRelatedElement : OPTIONAL IfcSolidOrShell;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectionVolumeGeometry : IfcConnectionGeometry, Global.IfcConnectionVolumeGeometry
	{
		public virtual IfcSolidOrShell? VolumeOnRelatingElement { get; set; }
		public virtual IfcSolidOrShell? VolumeOnRelatedElement { get; set; }
		public IfcConnectionVolumeGeometry() : base()
		{
		}
		public IfcConnectionVolumeGeometry(IfcSolidOrShell? VolumeOnRelatingElement, IfcSolidOrShell? VolumeOnRelatedElement) : base ()
		{
			this.VolumeOnRelatingElement = VolumeOnRelatingElement;
			this.VolumeOnRelatedElement = VolumeOnRelatedElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				VolumeOnRelatingElement,
				VolumeOnRelatedElement
			};
		}
		public virtual Global.IfcSolidOrShell? _VolumeOnRelatingElement
		{
			get
			{
				return VolumeOnRelatingElement;
			}
			set
			{
				if(value is IfcSolidOrShell val)
				{
					VolumeOnRelatingElement = val;
				}
				else if(value == null)
				{
					VolumeOnRelatingElement = null;
				}
			}
		}
		public virtual Global.IfcSolidOrShell? _VolumeOnRelatedElement
		{
			get
			{
				return VolumeOnRelatedElement;
			}
			set
			{
				if(value is IfcSolidOrShell val)
				{
					VolumeOnRelatedElement = val;
				}
				else if(value == null)
				{
					VolumeOnRelatedElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstraint
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcMetric
	/// ,IfcObjective));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// ConstraintGrade : IfcConstraintEnum;
	/// ConstraintSource : OPTIONAL IfcLabel;
	/// CreatingActor : OPTIONAL IfcActorSelect;
	/// CreationTime : OPTIONAL IfcDateTime;
	/// UserDefinedGrade : OPTIONAL IfcLabel;
	/// INVERSE
	/// HasExternalReferences : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
	/// PropertiesForConstraint : SET [0:?] OF IfcResourceConstraintRelationship FOR RelatingConstraint;
	/// WHERE
	/// WR11 : (ConstraintGrade <> IfcConstraintEnum.USERDEFINED) OR
	/// ((ConstraintGrade = IfcConstraintEnum.USERDEFINED) AND EXISTS(SELF\IfcConstraint.UserDefinedGrade));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcConstraint : Ifc_Entity, IfcResourceObjectSelect, Global.IfcConstraint
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcConstraintEnum? ConstraintGrade { get; set; }
		public virtual IfcLabel? ConstraintSource { get; set; }
		public virtual IfcActorSelect? CreatingActor { get; set; }
		public virtual IfcDateTime? CreationTime { get; set; }
		public virtual IfcLabel? UserDefinedGrade { get; set; }
		public List<IfcExternalReferenceRelationship>? HasExternalReferences {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public List<IfcResourceConstraintRelationship>? PropertiesForConstraint {get{return Model?.GetItems<IfcResourceConstraintRelationship>().Where(x => x.RelatingConstraint != null && x.RelatingConstraint == this).ToList();}}
		public IfcConstraint() : base()
		{
		}
		public IfcConstraint(IfcLabel? Name, IfcText? Description, IfcConstraintEnum? ConstraintGrade, IfcLabel? ConstraintSource, IfcActorSelect? CreatingActor, IfcDateTime? CreationTime, IfcLabel? UserDefinedGrade) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.ConstraintGrade = ConstraintGrade;
			this.ConstraintSource = ConstraintSource;
			this.CreatingActor = CreatingActor;
			this.CreationTime = CreationTime;
			this.UserDefinedGrade = UserDefinedGrade;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				ConstraintGrade,
				ConstraintSource,
				CreatingActor,
				CreationTime,
				UserDefinedGrade
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcConstraintEnum? _ConstraintGrade
		{
			get
			{
				return ConstraintGrade;
			}
			set
			{
				if(value is IfcConstraintEnum val)
				{
					ConstraintGrade = val;
				}
				else if(value == null)
				{
					ConstraintGrade = null;
				}
			}
		}
		public virtual Global.IfcLabel? _ConstraintSource
		{
			get
			{
				return ConstraintSource;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ConstraintSource = val;
				}
				else if(value == null)
				{
					ConstraintSource = null;
				}
			}
		}
		public virtual Global.IfcActorSelect? _CreatingActor
		{
			get
			{
				return CreatingActor;
			}
			set
			{
				if(value is IfcActorSelect val)
				{
					CreatingActor = val;
				}
				else if(value == null)
				{
					CreatingActor = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _CreationTime
		{
			get
			{
				return CreationTime;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					CreationTime = val;
				}
				else if(value == null)
				{
					CreationTime = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedGrade
		{
			get
			{
				return UserDefinedGrade;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedGrade = val;
				}
				else if(value == null)
				{
					UserDefinedGrade = null;
				}
			}
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _HasExternalReferences
		{
			get
			{
				if(HasExternalReferences != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in HasExternalReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcResourceConstraintRelationship>? _PropertiesForConstraint
		{
			get
			{
				if(PropertiesForConstraint != null)
				{
					List<Global.IfcResourceConstraintRelationship>? items = new List<Global.IfcResourceConstraintRelationship>();
					foreach (IfcResourceConstraintRelationship item in PropertiesForConstraint)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionEquipmentResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// PredefinedType : OPTIONAL IfcConstructionEquipmentResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcConstructionEquipmentResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcConstructionEquipmentResourceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcConstructionEquipmentResource : IfcConstructionResource, Global.IfcConstructionEquipmentResource
	{
		public virtual IfcConstructionEquipmentResourceTypeEnum? PredefinedType { get; set; }
		public IfcConstructionEquipmentResource() : base()
		{
		}
		public IfcConstructionEquipmentResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription, IfcResourceTime? Usage, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcConstructionEquipmentResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription,
				Usage,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcConstructionEquipmentResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcConstructionEquipmentResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionEquipmentResourceType
	/// SUBTYPE OF (IfcConstructionResourceType);
	/// PredefinedType : IfcConstructionEquipmentResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcConstructionEquipmentResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcConstructionEquipmentResourceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcTypeResource.ResourceType));
	/// END_ENTITY;
	/// <summary>
	public class IfcConstructionEquipmentResourceType : IfcConstructionResourceType, Global.IfcConstructionEquipmentResourceType
	{
		public virtual IfcConstructionEquipmentResourceTypeEnum? PredefinedType { get; set; }
		public IfcConstructionEquipmentResourceType() : base()
		{
		}
		public IfcConstructionEquipmentResourceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ResourceType, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcConstructionEquipmentResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ResourceType,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcConstructionEquipmentResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcConstructionEquipmentResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionMaterialResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// PredefinedType : OPTIONAL IfcConstructionMaterialResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcConstructionMaterialResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcConstructionMaterialResourceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcConstructionMaterialResource : IfcConstructionResource, Global.IfcConstructionMaterialResource
	{
		public virtual IfcConstructionMaterialResourceTypeEnum? PredefinedType { get; set; }
		public IfcConstructionMaterialResource() : base()
		{
		}
		public IfcConstructionMaterialResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription, IfcResourceTime? Usage, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcConstructionMaterialResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription,
				Usage,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcConstructionMaterialResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcConstructionMaterialResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionMaterialResourceType
	/// SUBTYPE OF (IfcConstructionResourceType);
	/// PredefinedType : IfcConstructionMaterialResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcConstructionMaterialResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcConstructionMaterialResourceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcTypeResource.ResourceType));
	/// END_ENTITY;
	/// <summary>
	public class IfcConstructionMaterialResourceType : IfcConstructionResourceType, Global.IfcConstructionMaterialResourceType
	{
		public virtual IfcConstructionMaterialResourceTypeEnum? PredefinedType { get; set; }
		public IfcConstructionMaterialResourceType() : base()
		{
		}
		public IfcConstructionMaterialResourceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ResourceType, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcConstructionMaterialResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ResourceType,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcConstructionMaterialResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcConstructionMaterialResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionProductResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// PredefinedType : OPTIONAL IfcConstructionProductResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcConstructionProductResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcConstructionProductResourceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcConstructionProductResource : IfcConstructionResource, Global.IfcConstructionProductResource
	{
		public virtual IfcConstructionProductResourceTypeEnum? PredefinedType { get; set; }
		public IfcConstructionProductResource() : base()
		{
		}
		public IfcConstructionProductResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription, IfcResourceTime? Usage, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcConstructionProductResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription,
				Usage,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcConstructionProductResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcConstructionProductResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionProductResourceType
	/// SUBTYPE OF (IfcConstructionResourceType);
	/// PredefinedType : IfcConstructionProductResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcConstructionProductResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcConstructionProductResourceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcTypeResource.ResourceType));
	/// END_ENTITY;
	/// <summary>
	public class IfcConstructionProductResourceType : IfcConstructionResourceType, Global.IfcConstructionProductResourceType
	{
		public virtual IfcConstructionProductResourceTypeEnum? PredefinedType { get; set; }
		public IfcConstructionProductResourceType() : base()
		{
		}
		public IfcConstructionProductResourceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ResourceType, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcConstructionProductResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ResourceType,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcConstructionProductResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcConstructionProductResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionResource
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConstructionEquipmentResource
	/// ,IfcConstructionMaterialResource
	/// ,IfcConstructionProductResource
	/// ,IfcCrewResource
	/// ,IfcLaborResource
	/// ,IfcSubContractResource))
	/// SUBTYPE OF (IfcResource);
	/// Usage : OPTIONAL IfcResourceTime;
	/// BaseCosts : OPTIONAL LIST [1:?] OF IfcAppliedValue;
	/// BaseQuantity : OPTIONAL IfcPhysicalQuantity;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcConstructionResource : IfcResource, Global.IfcConstructionResource
	{
		public virtual IfcResourceTime? Usage { get; set; }
		public IfcConstructionResource() : base()
		{
		}
		public IfcConstructionResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription, IfcResourceTime? Usage, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription)
		{
			this.Usage = Usage;
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription,
				Usage,
				BaseCosts,
				BaseQuantity
			};
		}
		public virtual Global.IfcResourceTime? _Usage
		{
			get
			{
				return Usage;
			}
			set
			{
				if(value is IfcResourceTime val)
				{
					Usage = val;
				}
				else if(value == null)
				{
					Usage = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionResourceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConstructionEquipmentResourceType
	/// ,IfcConstructionMaterialResourceType
	/// ,IfcConstructionProductResourceType
	/// ,IfcCrewResourceType
	/// ,IfcLaborResourceType
	/// ,IfcSubContractResourceType))
	/// SUBTYPE OF (IfcTypeResource);
	/// BaseCosts : OPTIONAL LIST [1:?] OF IfcAppliedValue;
	/// BaseQuantity : OPTIONAL IfcPhysicalQuantity;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcConstructionResourceType : IfcTypeResource, Global.IfcConstructionResourceType
	{
		public IfcConstructionResourceType() : base()
		{
		}
		public IfcConstructionResourceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ResourceType, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType)
		{
			this.BaseCosts = BaseCosts;
			this.BaseQuantity = BaseQuantity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ResourceType,
				BaseCosts,
				BaseQuantity
			};
		}
	}
	/// <summary>
	/// ENTITY IfcContext
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcProject
	/// ,IfcProjectLibrary))
	/// SUBTYPE OF (IfcObjectDefinition);
	/// ObjectType : OPTIONAL IfcLabel;
	/// LongName : OPTIONAL IfcLabel;
	/// Phase : OPTIONAL IfcLabel;
	/// RepresentationContexts : OPTIONAL SET [1:?] OF IfcRepresentationContext;
	/// UnitsInContext : OPTIONAL IfcUnitAssignment;
	/// INVERSE
	/// IsDefinedBy : SET [0:?] OF IfcRelDefinesByProperties FOR RelatedObjects;
	/// Declares : SET [0:?] OF IfcRelDeclares FOR RelatingContext;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcContext : IfcObjectDefinition, Global.IfcContext
	{
		public virtual IfcLabel? ObjectType { get; set; }
		public virtual IfcLabel? LongName { get; set; }
		public virtual IfcLabel? Phase { get; set; }
		public virtual List<IfcRepresentationContext>? RepresentationContexts { get; set; }
		public virtual IfcUnitAssignment? UnitsInContext { get; set; }
		public List<IfcRelDefinesByProperties>? IsDefinedBy {get{return Model?.GetItems<IfcRelDefinesByProperties>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();}}
		public List<IfcRelDeclares>? Declares {get{return Model?.GetItems<IfcRelDeclares>().Where(x => x.RelatingContext != null && x.RelatingContext == this).ToList();}}
		public IfcContext() : base()
		{
		}
		public IfcContext(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcLabel? LongName, IfcLabel? Phase, List<IfcRepresentationContext>? RepresentationContexts, IfcUnitAssignment? UnitsInContext) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ObjectType = ObjectType;
			this.LongName = LongName;
			this.Phase = Phase;
			this.RepresentationContexts = RepresentationContexts;
			this.UnitsInContext = UnitsInContext;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				LongName,
				Phase,
				RepresentationContexts,
				UnitsInContext
			};
		}
		public virtual Global.IfcLabel? _ObjectType
		{
			get
			{
				return ObjectType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ObjectType = val;
				}
				else if(value == null)
				{
					ObjectType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _LongName
		{
			get
			{
				return LongName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					LongName = val;
				}
				else if(value == null)
				{
					LongName = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Phase
		{
			get
			{
				return Phase;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Phase = val;
				}
				else if(value == null)
				{
					Phase = null;
				}
			}
		}
		public virtual List<Global.IfcRepresentationContext>? _RepresentationContexts
		{
			get
			{
				if(RepresentationContexts != null)
				{
					List<Global.IfcRepresentationContext>? items = new List<Global.IfcRepresentationContext>();
					foreach (IfcRepresentationContext item in RepresentationContexts)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RepresentationContexts = null;
				}
				else
				{
					RepresentationContexts = new List<IfcRepresentationContext>();
					foreach(var val in value)
					{
						if(val is IfcRepresentationContext v)
						{
							RepresentationContexts.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcUnitAssignment? _UnitsInContext
		{
			get
			{
				return UnitsInContext;
			}
			set
			{
				if(value is IfcUnitAssignment val)
				{
					UnitsInContext = val;
				}
				else if(value == null)
				{
					UnitsInContext = null;
				}
			}
		}
		public virtual List<Global.IfcRelDefinesByProperties>? _IsDefinedBy
		{
			get
			{
				if(IsDefinedBy != null)
				{
					List<Global.IfcRelDefinesByProperties>? items = new List<Global.IfcRelDefinesByProperties>();
					foreach (IfcRelDefinesByProperties item in IsDefinedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDeclares>? _Declares
		{
			get
			{
				if(Declares != null)
				{
					List<Global.IfcRelDeclares>? items = new List<Global.IfcRelDeclares>();
					foreach (IfcRelDeclares item in Declares)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcContextDependentUnit
	/// SUBTYPE OF (IfcNamedUnit);
	/// Name : IfcLabel;
	/// INVERSE
	/// HasExternalReference : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
	/// END_ENTITY;
	/// <summary>
	public class IfcContextDependentUnit : IfcNamedUnit, IfcResourceObjectSelect, Global.IfcContextDependentUnit
	{
		public virtual IfcLabel? Name { get; set; }
		public List<IfcExternalReferenceRelationship>? HasExternalReference {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public IfcContextDependentUnit() : base()
		{
		}
		public IfcContextDependentUnit(IfcDimensionalExponents? Dimensions, IfcUnitEnum? UnitType, IfcLabel? Name) : base (Dimensions, UnitType)
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Dimensions,
				UnitType,
				Name
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _HasExternalReference
		{
			get
			{
				if(HasExternalReference != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in HasExternalReference)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcControl
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcActionRequest
	/// ,IfcCostItem
	/// ,IfcCostSchedule
	/// ,IfcPerformanceHistory
	/// ,IfcPermit
	/// ,IfcProjectOrder
	/// ,IfcWorkCalendar
	/// ,IfcWorkControl))
	/// SUBTYPE OF (IfcObject);
	/// Identification : OPTIONAL IfcIdentifier;
	/// INVERSE
	/// Controls : SET [0:?] OF IfcRelAssignsToControl FOR RelatingControl;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcControl : IfcObject, Global.IfcControl
	{
		public virtual IfcIdentifier? Identification { get; set; }
		public List<IfcRelAssignsToControl>? Controls {get{return Model?.GetItems<IfcRelAssignsToControl>().Where(x => x.RelatingControl != null && x.RelatingControl == this).ToList();}}
		public IfcControl() : base()
		{
		}
		public IfcControl(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.Identification = Identification;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification
			};
		}
		public virtual Global.IfcIdentifier? _Identification
		{
			get
			{
				return Identification;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identification = val;
				}
				else if(value == null)
				{
					Identification = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssignsToControl>? _Controls
		{
			get
			{
				if(Controls != null)
				{
					List<Global.IfcRelAssignsToControl>? items = new List<Global.IfcRelAssignsToControl>();
					foreach (IfcRelAssignsToControl item in Controls)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcController
	/// SUBTYPE OF (IfcDistributionControlElement);
	/// PredefinedType : OPTIONAL IfcControllerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcControllerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcControllerTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCONTROLLERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcController : IfcDistributionControlElement, Global.IfcController
	{
		public virtual IfcControllerTypeEnum? PredefinedType { get; set; }
		public IfcController() : base()
		{
		}
		public IfcController(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcControllerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcControllerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcControllerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcControllerType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcControllerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcControllerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcControllerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcControllerType : IfcDistributionControlElementType, Global.IfcControllerType
	{
		public virtual IfcControllerTypeEnum? PredefinedType { get; set; }
		public IfcControllerType() : base()
		{
		}
		public IfcControllerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcControllerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcControllerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcControllerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConversionBasedUnit
	/// SUPERTYPE OF (ONEOF
	/// (IfcConversionBasedUnitWithOffset))
	/// SUBTYPE OF (IfcNamedUnit);
	/// Name : IfcLabel;
	/// ConversionFactor : IfcMeasureWithUnit;
	/// INVERSE
	/// HasExternalReference : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
	/// END_ENTITY;
	/// <summary>
	public class IfcConversionBasedUnit : IfcNamedUnit, IfcResourceObjectSelect, Global.IfcConversionBasedUnit
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcMeasureWithUnit? ConversionFactor { get; set; }
		public List<IfcExternalReferenceRelationship>? HasExternalReference {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public IfcConversionBasedUnit() : base()
		{
		}
		public IfcConversionBasedUnit(IfcDimensionalExponents? Dimensions, IfcUnitEnum? UnitType, IfcLabel? Name, IfcMeasureWithUnit? ConversionFactor) : base (Dimensions, UnitType)
		{
			this.Name = Name;
			this.ConversionFactor = ConversionFactor;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Dimensions,
				UnitType,
				Name,
				ConversionFactor
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcMeasureWithUnit? _ConversionFactor
		{
			get
			{
				return ConversionFactor;
			}
			set
			{
				if(value is IfcMeasureWithUnit val)
				{
					ConversionFactor = val;
				}
				else if(value == null)
				{
					ConversionFactor = null;
				}
			}
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _HasExternalReference
		{
			get
			{
				if(HasExternalReference != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in HasExternalReference)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConversionBasedUnitWithOffset
	/// SUBTYPE OF (IfcConversionBasedUnit);
	/// ConversionOffset : IfcReal;
	/// END_ENTITY;
	/// <summary>
	public class IfcConversionBasedUnitWithOffset : IfcConversionBasedUnit, Global.IfcConversionBasedUnitWithOffset
	{
		public virtual IfcReal? ConversionOffset { get; set; }
		public IfcConversionBasedUnitWithOffset() : base()
		{
		}
		public IfcConversionBasedUnitWithOffset(IfcDimensionalExponents? Dimensions, IfcUnitEnum? UnitType, IfcLabel? Name, IfcMeasureWithUnit? ConversionFactor, IfcReal? ConversionOffset) : base (Dimensions, UnitType, Name, ConversionFactor)
		{
			this.ConversionOffset = ConversionOffset;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Dimensions,
				UnitType,
				Name,
				ConversionFactor,
				ConversionOffset
			};
		}
		public virtual Global.IfcReal? _ConversionOffset
		{
			get
			{
				return ConversionOffset;
			}
			set
			{
				if(value is IfcReal val)
				{
					ConversionOffset = val;
				}
				else if(value == null)
				{
					ConversionOffset = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCooledBeam
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcCooledBeamTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCooledBeamTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCooledBeamTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCOOLEDBEAMTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCooledBeam : IfcEnergyConversionDevice, Global.IfcCooledBeam
	{
		public virtual IfcCooledBeamTypeEnum? PredefinedType { get; set; }
		public IfcCooledBeam() : base()
		{
		}
		public IfcCooledBeam(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCooledBeamTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCooledBeamTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCooledBeamTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCooledBeamType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCooledBeamTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCooledBeamTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCooledBeamTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCooledBeamType : IfcEnergyConversionDeviceType, Global.IfcCooledBeamType
	{
		public virtual IfcCooledBeamTypeEnum? PredefinedType { get; set; }
		public IfcCooledBeamType() : base()
		{
		}
		public IfcCooledBeamType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCooledBeamTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCooledBeamTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCooledBeamTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCoolingTower
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcCoolingTowerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCoolingTowerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoolingTowerTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCOOLINGTOWERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCoolingTower : IfcEnergyConversionDevice, Global.IfcCoolingTower
	{
		public virtual IfcCoolingTowerTypeEnum? PredefinedType { get; set; }
		public IfcCoolingTower() : base()
		{
		}
		public IfcCoolingTower(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCoolingTowerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCoolingTowerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCoolingTowerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCoolingTowerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCoolingTowerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCoolingTowerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoolingTowerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCoolingTowerType : IfcEnergyConversionDeviceType, Global.IfcCoolingTowerType
	{
		public virtual IfcCoolingTowerTypeEnum? PredefinedType { get; set; }
		public IfcCoolingTowerType() : base()
		{
		}
		public IfcCoolingTowerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCoolingTowerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCoolingTowerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCoolingTowerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCoordinateOperation
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcMapConversion));
	/// SourceCRS : IfcCoordinateReferenceSystemSelect;
	/// TargetCRS : IfcCoordinateReferenceSystem;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcCoordinateOperation : Ifc_Entity, Global.IfcCoordinateOperation
	{
		public virtual IfcCoordinateReferenceSystemSelect? SourceCRS { get; set; }
		public virtual IfcCoordinateReferenceSystem? TargetCRS { get; set; }
		public IfcCoordinateOperation() : base()
		{
		}
		public IfcCoordinateOperation(IfcCoordinateReferenceSystemSelect? SourceCRS, IfcCoordinateReferenceSystem? TargetCRS) : base ()
		{
			this.SourceCRS = SourceCRS;
			this.TargetCRS = TargetCRS;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SourceCRS,
				TargetCRS
			};
		}
		public virtual Global.IfcCoordinateReferenceSystemSelect? _SourceCRS
		{
			get
			{
				return SourceCRS;
			}
			set
			{
				if(value is IfcCoordinateReferenceSystemSelect val)
				{
					SourceCRS = val;
				}
				else if(value == null)
				{
					SourceCRS = null;
				}
			}
		}
		public virtual Global.IfcCoordinateReferenceSystem? _TargetCRS
		{
			get
			{
				return TargetCRS;
			}
			set
			{
				if(value is IfcCoordinateReferenceSystem val)
				{
					TargetCRS = val;
				}
				else if(value == null)
				{
					TargetCRS = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCoordinateReferenceSystem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcProjectedCRS));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// GeodeticDatum : OPTIONAL IfcIdentifier;
	/// VerticalDatum : OPTIONAL IfcIdentifier;
	/// INVERSE
	/// HasCoordinateOperation : SET [0:1] OF IfcCoordinateOperation FOR SourceCRS;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcCoordinateReferenceSystem : Ifc_Entity, IfcCoordinateReferenceSystemSelect, Global.IfcCoordinateReferenceSystem
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcIdentifier? GeodeticDatum { get; set; }
		public virtual IfcIdentifier? VerticalDatum { get; set; }
		public List<IfcCoordinateOperation>? HasCoordinateOperation {get{return Model?.GetItems<IfcCoordinateOperation>().Where(x => x.SourceCRS != null && x.SourceCRS == this).ToList();}}
		public IfcCoordinateReferenceSystem() : base()
		{
		}
		public IfcCoordinateReferenceSystem(IfcLabel? Name, IfcText? Description, IfcIdentifier? GeodeticDatum, IfcIdentifier? VerticalDatum) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.GeodeticDatum = GeodeticDatum;
			this.VerticalDatum = VerticalDatum;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				GeodeticDatum,
				VerticalDatum
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcIdentifier? _GeodeticDatum
		{
			get
			{
				return GeodeticDatum;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					GeodeticDatum = val;
				}
				else if(value == null)
				{
					GeodeticDatum = null;
				}
			}
		}
		public virtual Global.IfcIdentifier? _VerticalDatum
		{
			get
			{
				return VerticalDatum;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					VerticalDatum = val;
				}
				else if(value == null)
				{
					VerticalDatum = null;
				}
			}
		}
		public virtual List<Global.IfcCoordinateOperation>? _HasCoordinateOperation
		{
			get
			{
				if(HasCoordinateOperation != null)
				{
					List<Global.IfcCoordinateOperation>? items = new List<Global.IfcCoordinateOperation>();
					foreach (IfcCoordinateOperation item in HasCoordinateOperation)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCostItem
	/// SUBTYPE OF (IfcControl);
	/// PredefinedType : OPTIONAL IfcCostItemTypeEnum;
	/// CostValues : OPTIONAL LIST [1:?] OF IfcCostValue;
	/// CostQuantities : OPTIONAL LIST [1:?] OF IfcPhysicalQuantity;
	/// END_ENTITY;
	/// <summary>
	public class IfcCostItem : IfcControl, Global.IfcCostItem
	{
		public virtual IfcCostItemTypeEnum? PredefinedType { get; set; }
		public virtual List<IfcCostValue>? CostValues { get; set; }
		public virtual List<IfcPhysicalQuantity>? CostQuantities { get; set; }
		public IfcCostItem() : base()
		{
		}
		public IfcCostItem(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcCostItemTypeEnum? PredefinedType, List<IfcCostValue>? CostValues, List<IfcPhysicalQuantity>? CostQuantities) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification)
		{
			this.PredefinedType = PredefinedType;
			this.CostValues = CostValues;
			this.CostQuantities = CostQuantities;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				PredefinedType,
				CostValues,
				CostQuantities
			};
		}
		public virtual Global.IfcCostItemTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCostItemTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual List<Global.IfcCostValue>? _CostValues
		{
			get
			{
				if(CostValues != null)
				{
					List<Global.IfcCostValue>? items = new List<Global.IfcCostValue>();
					foreach (IfcCostValue item in CostValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CostValues = null;
				}
				else
				{
					CostValues = new List<IfcCostValue>();
					foreach(var val in value)
					{
						if(val is IfcCostValue v)
						{
							CostValues.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcPhysicalQuantity>? _CostQuantities
		{
			get
			{
				if(CostQuantities != null)
				{
					List<Global.IfcPhysicalQuantity>? items = new List<Global.IfcPhysicalQuantity>();
					foreach (IfcPhysicalQuantity item in CostQuantities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CostQuantities = null;
				}
				else
				{
					CostQuantities = new List<IfcPhysicalQuantity>();
					foreach(var val in value)
					{
						if(val is IfcPhysicalQuantity v)
						{
							CostQuantities.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCostSchedule
	/// SUBTYPE OF (IfcControl);
	/// PredefinedType : OPTIONAL IfcCostScheduleTypeEnum;
	/// Status : OPTIONAL IfcLabel;
	/// SubmittedOn : OPTIONAL IfcDateTime;
	/// UpdateDate : OPTIONAL IfcDateTime;
	/// END_ENTITY;
	/// <summary>
	public class IfcCostSchedule : IfcControl, Global.IfcCostSchedule
	{
		public virtual IfcCostScheduleTypeEnum? PredefinedType { get; set; }
		public virtual IfcLabel? Status { get; set; }
		public virtual IfcDateTime? SubmittedOn { get; set; }
		public virtual IfcDateTime? UpdateDate { get; set; }
		public IfcCostSchedule() : base()
		{
		}
		public IfcCostSchedule(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcCostScheduleTypeEnum? PredefinedType, IfcLabel? Status, IfcDateTime? SubmittedOn, IfcDateTime? UpdateDate) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification)
		{
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.SubmittedOn = SubmittedOn;
			this.UpdateDate = UpdateDate;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				PredefinedType,
				Status,
				SubmittedOn,
				UpdateDate
			};
		}
		public virtual Global.IfcCostScheduleTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCostScheduleTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Status
		{
			get
			{
				return Status;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Status = val;
				}
				else if(value == null)
				{
					Status = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _SubmittedOn
		{
			get
			{
				return SubmittedOn;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					SubmittedOn = val;
				}
				else if(value == null)
				{
					SubmittedOn = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _UpdateDate
		{
			get
			{
				return UpdateDate;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					UpdateDate = val;
				}
				else if(value == null)
				{
					UpdateDate = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCostValue
	/// SUBTYPE OF (IfcAppliedValue);
	/// END_ENTITY;
	/// <summary>
	public class IfcCostValue : IfcAppliedValue, Global.IfcCostValue
	{
		public IfcCostValue() : base()
		{
		}
		public IfcCostValue(IfcLabel? Name, IfcText? Description, IfcAppliedValueSelect? AppliedValue, IfcMeasureWithUnit? UnitBasis, IfcDate? ApplicableDate, IfcDate? FixedUntilDate, IfcLabel? Category, IfcLabel? Condition, IfcArithmeticOperatorEnum? ArithmeticOperator, List<IfcAppliedValue>? Components) : base (Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate, Category, Condition, ArithmeticOperator, Components)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				AppliedValue,
				UnitBasis,
				ApplicableDate,
				FixedUntilDate,
				Category,
				Condition,
				ArithmeticOperator,
				Components
			};
		}
	}
	/// <summary>
	/// ENTITY IfcCovering
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcCoveringTypeEnum;
	/// INVERSE
	/// CoversSpaces : SET [0:1] OF IfcRelCoversSpaces FOR RelatedCoverings;
	/// CoversElements : SET [0:1] OF IfcRelCoversBldgElements FOR RelatedCoverings;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCoveringTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoveringTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCOVERINGTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCovering : IfcBuildingElement, Global.IfcCovering
	{
		public virtual IfcCoveringTypeEnum? PredefinedType { get; set; }
		public List<IfcRelCoversSpaces>? CoversSpaces {get{return Model?.GetItems<IfcRelCoversSpaces>().Where(x => x.RelatedCoverings != null && x.RelatedCoverings.Contains(this)).ToList();}}
		public List<IfcRelCoversBldgElements>? CoversElements {get{return Model?.GetItems<IfcRelCoversBldgElements>().Where(x => x.RelatedCoverings != null && x.RelatedCoverings.Contains(this)).ToList();}}
		public IfcCovering() : base()
		{
		}
		public IfcCovering(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCoveringTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCoveringTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCoveringTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual List<Global.IfcRelCoversSpaces>? _CoversSpaces
		{
			get
			{
				if(CoversSpaces != null)
				{
					List<Global.IfcRelCoversSpaces>? items = new List<Global.IfcRelCoversSpaces>();
					foreach (IfcRelCoversSpaces item in CoversSpaces)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelCoversBldgElements>? _CoversElements
		{
			get
			{
				if(CoversElements != null)
				{
					List<Global.IfcRelCoversBldgElements>? items = new List<Global.IfcRelCoversBldgElements>();
					foreach (IfcRelCoversBldgElements item in CoversElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCoveringType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcCoveringTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCoveringTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoveringTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCoveringType : IfcBuildingElementType, Global.IfcCoveringType
	{
		public virtual IfcCoveringTypeEnum? PredefinedType { get; set; }
		public IfcCoveringType() : base()
		{
		}
		public IfcCoveringType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCoveringTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCoveringTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCoveringTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCrewResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// PredefinedType : OPTIONAL IfcCrewResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCrewResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCrewResourceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCrewResource : IfcConstructionResource, Global.IfcCrewResource
	{
		public virtual IfcCrewResourceTypeEnum? PredefinedType { get; set; }
		public IfcCrewResource() : base()
		{
		}
		public IfcCrewResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription, IfcResourceTime? Usage, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcCrewResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription,
				Usage,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcCrewResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCrewResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCrewResourceType
	/// SUBTYPE OF (IfcConstructionResourceType);
	/// PredefinedType : IfcCrewResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCrewResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCrewResourceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcTypeResource.ResourceType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCrewResourceType : IfcConstructionResourceType, Global.IfcCrewResourceType
	{
		public virtual IfcCrewResourceTypeEnum? PredefinedType { get; set; }
		public IfcCrewResourceType() : base()
		{
		}
		public IfcCrewResourceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ResourceType, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcCrewResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ResourceType,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcCrewResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCrewResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCsgPrimitive3D
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBlock
	/// ,IfcRectangularPyramid
	/// ,IfcRightCircularCone
	/// ,IfcRightCircularCylinder
	/// ,IfcSphere))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Position : IfcAxis2Placement3D;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcCsgPrimitive3D : IfcGeometricRepresentationItem, IfcBooleanOperand, IfcCsgSelect, Global.IfcCsgPrimitive3D
	{
		public virtual IfcAxis2Placement3D? Position { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcCsgPrimitive3D() : base()
		{
		}
		public IfcCsgPrimitive3D(IfcAxis2Placement3D? Position) : base ()
		{
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position
			};
		}
		public virtual Global.IfcAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IfcAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCsgSolid
	/// SUBTYPE OF (IfcSolidModel);
	/// TreeRootExpression : IfcCsgSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcCsgSolid : IfcSolidModel, Global.IfcCsgSolid
	{
		public virtual IfcCsgSelect? TreeRootExpression { get; set; }
		public IfcCsgSolid() : base()
		{
		}
		public IfcCsgSolid(IfcCsgSelect? TreeRootExpression) : base ()
		{
			this.TreeRootExpression = TreeRootExpression;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TreeRootExpression
			};
		}
		public virtual Global.IfcCsgSelect? _TreeRootExpression
		{
			get
			{
				return TreeRootExpression;
			}
			set
			{
				if(value is IfcCsgSelect val)
				{
					TreeRootExpression = val;
				}
				else if(value == null)
				{
					TreeRootExpression = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurrencyRelationship
	/// SUBTYPE OF (IfcResourceLevelRelationship);
	/// RelatingMonetaryUnit : IfcMonetaryUnit;
	/// RelatedMonetaryUnit : IfcMonetaryUnit;
	/// ExchangeRate : IfcPositiveRatioMeasure;
	/// RateDateTime : OPTIONAL IfcDateTime;
	/// RateSource : OPTIONAL IfcLibraryInformation;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurrencyRelationship : IfcResourceLevelRelationship, Global.IfcCurrencyRelationship
	{
		public virtual IfcMonetaryUnit? RelatingMonetaryUnit { get; set; }
		public virtual IfcMonetaryUnit? RelatedMonetaryUnit { get; set; }
		public virtual IfcPositiveRatioMeasure? ExchangeRate { get; set; }
		public virtual IfcDateTime? RateDateTime { get; set; }
		public virtual IfcLibraryInformation? RateSource { get; set; }
		public IfcCurrencyRelationship() : base()
		{
		}
		public IfcCurrencyRelationship(IfcLabel? Name, IfcText? Description, IfcMonetaryUnit? RelatingMonetaryUnit, IfcMonetaryUnit? RelatedMonetaryUnit, IfcPositiveRatioMeasure? ExchangeRate, IfcDateTime? RateDateTime, IfcLibraryInformation? RateSource) : base (Name, Description)
		{
			this.RelatingMonetaryUnit = RelatingMonetaryUnit;
			this.RelatedMonetaryUnit = RelatedMonetaryUnit;
			this.ExchangeRate = ExchangeRate;
			this.RateDateTime = RateDateTime;
			this.RateSource = RateSource;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingMonetaryUnit,
				RelatedMonetaryUnit,
				ExchangeRate,
				RateDateTime,
				RateSource
			};
		}
		public virtual Global.IfcMonetaryUnit? _RelatingMonetaryUnit
		{
			get
			{
				return RelatingMonetaryUnit;
			}
			set
			{
				if(value is IfcMonetaryUnit val)
				{
					RelatingMonetaryUnit = val;
				}
				else if(value == null)
				{
					RelatingMonetaryUnit = null;
				}
			}
		}
		public virtual Global.IfcMonetaryUnit? _RelatedMonetaryUnit
		{
			get
			{
				return RelatedMonetaryUnit;
			}
			set
			{
				if(value is IfcMonetaryUnit val)
				{
					RelatedMonetaryUnit = val;
				}
				else if(value == null)
				{
					RelatedMonetaryUnit = null;
				}
			}
		}
		public virtual Global.IfcPositiveRatioMeasure? _ExchangeRate
		{
			get
			{
				return ExchangeRate;
			}
			set
			{
				if(value is IfcPositiveRatioMeasure val)
				{
					ExchangeRate = val;
				}
				else if(value == null)
				{
					ExchangeRate = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _RateDateTime
		{
			get
			{
				return RateDateTime;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					RateDateTime = val;
				}
				else if(value == null)
				{
					RateDateTime = null;
				}
			}
		}
		public virtual Global.IfcLibraryInformation? _RateSource
		{
			get
			{
				return RateSource;
			}
			set
			{
				if(value is IfcLibraryInformation val)
				{
					RateSource = val;
				}
				else if(value == null)
				{
					RateSource = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurtainWall
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcCurtainWallTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCurtainWallTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCurtainWallTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCCURTAINWALLTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCurtainWall : IfcBuildingElement, Global.IfcCurtainWall
	{
		public virtual IfcCurtainWallTypeEnum? PredefinedType { get; set; }
		public IfcCurtainWall() : base()
		{
		}
		public IfcCurtainWall(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCurtainWallTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCurtainWallTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCurtainWallTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurtainWallType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcCurtainWallTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcCurtainWallTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCurtainWallTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCurtainWallType : IfcBuildingElementType, Global.IfcCurtainWallType
	{
		public virtual IfcCurtainWallTypeEnum? PredefinedType { get; set; }
		public IfcCurtainWallType() : base()
		{
		}
		public IfcCurtainWallType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCurtainWallTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCurtainWallTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcCurtainWallTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurve
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBoundedCurve
	/// ,IfcConic
	/// ,IfcLine
	/// ,IfcOffsetCurve2D
	/// ,IfcOffsetCurve3D
	/// ,IfcPcurve
	/// ,IfcSurfaceCurve))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// DERIVE
	/// Dim : IfcDimensionCount := IfcCurveDim(SELF);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcCurve : IfcGeometricRepresentationItem, IfcGeometricSetSelect, Global.IfcCurve
	{
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcCurve() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveBoundedPlane
	/// SUBTYPE OF (IfcBoundedSurface);
	/// BasisSurface : IfcPlane;
	/// OuterBoundary : IfcCurve;
	/// InnerBoundaries : SET [0:?] OF IfcCurve;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurveBoundedPlane : IfcBoundedSurface, Global.IfcCurveBoundedPlane
	{
		public virtual IfcPlane? BasisSurface { get; set; }
		public virtual IfcCurve? OuterBoundary { get; set; }
		public virtual List<IfcCurve>? InnerBoundaries { get; set; }
		public IfcCurveBoundedPlane() : base()
		{
		}
		public IfcCurveBoundedPlane(IfcPlane? BasisSurface, IfcCurve? OuterBoundary, List<IfcCurve>? InnerBoundaries) : base ()
		{
			this.BasisSurface = BasisSurface;
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisSurface,
				OuterBoundary,
				InnerBoundaries
			};
		}
		public virtual Global.IfcPlane? _BasisSurface
		{
			get
			{
				return BasisSurface;
			}
			set
			{
				if(value is IfcPlane val)
				{
					BasisSurface = val;
				}
				else if(value == null)
				{
					BasisSurface = null;
				}
			}
		}
		public virtual Global.IfcCurve? _OuterBoundary
		{
			get
			{
				return OuterBoundary;
			}
			set
			{
				if(value is IfcCurve val)
				{
					OuterBoundary = val;
				}
				else if(value == null)
				{
					OuterBoundary = null;
				}
			}
		}
		public virtual List<Global.IfcCurve>? _InnerBoundaries
		{
			get
			{
				if(InnerBoundaries != null)
				{
					List<Global.IfcCurve>? items = new List<Global.IfcCurve>();
					foreach (IfcCurve item in InnerBoundaries)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					InnerBoundaries = null;
				}
				else
				{
					InnerBoundaries = new List<IfcCurve>();
					foreach(var val in value)
					{
						if(val is IfcCurve v)
						{
							InnerBoundaries.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveBoundedSurface
	/// SUBTYPE OF (IfcBoundedSurface);
	/// BasisSurface : IfcSurface;
	/// Boundaries : SET [1:?] OF IfcBoundaryCurve;
	/// ImplicitOuter : IfcBoolean;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurveBoundedSurface : IfcBoundedSurface, Global.IfcCurveBoundedSurface
	{
		public virtual IfcSurface? BasisSurface { get; set; }
		public virtual List<IfcBoundaryCurve>? Boundaries { get; set; }
		public virtual IfcBoolean? ImplicitOuter { get; set; }
		public IfcCurveBoundedSurface() : base()
		{
		}
		public IfcCurveBoundedSurface(IfcSurface? BasisSurface, List<IfcBoundaryCurve>? Boundaries, IfcBoolean? ImplicitOuter) : base ()
		{
			this.BasisSurface = BasisSurface;
			this.Boundaries = Boundaries;
			this.ImplicitOuter = ImplicitOuter;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisSurface,
				Boundaries,
				ImplicitOuter
			};
		}
		public virtual Global.IfcSurface? _BasisSurface
		{
			get
			{
				return BasisSurface;
			}
			set
			{
				if(value is IfcSurface val)
				{
					BasisSurface = val;
				}
				else if(value == null)
				{
					BasisSurface = null;
				}
			}
		}
		public virtual List<Global.IfcBoundaryCurve>? _Boundaries
		{
			get
			{
				if(Boundaries != null)
				{
					List<Global.IfcBoundaryCurve>? items = new List<Global.IfcBoundaryCurve>();
					foreach (IfcBoundaryCurve item in Boundaries)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Boundaries = null;
				}
				else
				{
					Boundaries = new List<IfcBoundaryCurve>();
					foreach(var val in value)
					{
						if(val is IfcBoundaryCurve v)
						{
							Boundaries.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcBoolean? _ImplicitOuter
		{
			get
			{
				return ImplicitOuter;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					ImplicitOuter = val;
				}
				else if(value == null)
				{
					ImplicitOuter = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// CurveFont : OPTIONAL IfcCurveFontOrScaledCurveFontSelect;
	/// CurveWidth : OPTIONAL IfcSizeSelect;
	/// CurveColour : OPTIONAL IfcColour;
	/// ModelOrDraughting : OPTIONAL IfcBoolean;
	/// WHERE
	/// MeasureOfWidth : (NOT(EXISTS(CurveWidth))) OR
	/// ('IFC4.IFCPOSITIVELENGTHMEASURE' IN TYPEOF(CurveWidth)) OR
	/// (('IFC4.IFCDESCRIPTIVEMEASURE' IN TYPEOF(CurveWidth)) AND
	/// (CurveWidth = 'by layer'));
	/// IdentifiableCurveStyle : EXISTS(CurveFont) OR EXISTS(CurveWidth) OR EXISTS(CurveColour);
	/// END_ENTITY;
	/// <summary>
	public class IfcCurveStyle : IfcPresentationStyle, IfcPresentationStyleSelect, Global.IfcCurveStyle
	{
		public virtual IfcCurveFontOrScaledCurveFontSelect? CurveFont { get; set; }
		public virtual IfcSizeSelect? CurveWidth { get; set; }
		public virtual IfcColour? CurveColour { get; set; }
		public virtual IfcBoolean? ModelOrDraughting { get; set; }
		public IfcCurveStyle() : base()
		{
		}
		public IfcCurveStyle(IfcLabel? Name, IfcCurveFontOrScaledCurveFontSelect? CurveFont, IfcSizeSelect? CurveWidth, IfcColour? CurveColour, IfcBoolean? ModelOrDraughting) : base (Name)
		{
			this.CurveFont = CurveFont;
			this.CurveWidth = CurveWidth;
			this.CurveColour = CurveColour;
			this.ModelOrDraughting = ModelOrDraughting;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				CurveFont,
				CurveWidth,
				CurveColour,
				ModelOrDraughting
			};
		}
		public virtual Global.IfcCurveFontOrScaledCurveFontSelect? _CurveFont
		{
			get
			{
				return CurveFont;
			}
			set
			{
				if(value is IfcCurveFontOrScaledCurveFontSelect val)
				{
					CurveFont = val;
				}
				else if(value == null)
				{
					CurveFont = null;
				}
			}
		}
		public virtual Global.IfcSizeSelect? _CurveWidth
		{
			get
			{
				return CurveWidth;
			}
			set
			{
				if(value is IfcSizeSelect val)
				{
					CurveWidth = val;
				}
				else if(value == null)
				{
					CurveWidth = null;
				}
			}
		}
		public virtual Global.IfcColour? _CurveColour
		{
			get
			{
				return CurveColour;
			}
			set
			{
				if(value is IfcColour val)
				{
					CurveColour = val;
				}
				else if(value == null)
				{
					CurveColour = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _ModelOrDraughting
		{
			get
			{
				return ModelOrDraughting;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					ModelOrDraughting = val;
				}
				else if(value == null)
				{
					ModelOrDraughting = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveStyleFont
	/// SUBTYPE OF (IfcPresentationItem);
	/// Name : OPTIONAL IfcLabel;
	/// PatternList : LIST [1:?] OF IfcCurveStyleFontPattern;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurveStyleFont : IfcPresentationItem, IfcCurveStyleFontSelect, Global.IfcCurveStyleFont
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual List<IfcCurveStyleFontPattern>? PatternList { get; set; }
		public IfcCurveStyleFont() : base()
		{
		}
		public IfcCurveStyleFont(IfcLabel? Name, List<IfcCurveStyleFontPattern>? PatternList) : base ()
		{
			this.Name = Name;
			this.PatternList = PatternList;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				PatternList
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual List<Global.IfcCurveStyleFontPattern>? _PatternList
		{
			get
			{
				if(PatternList != null)
				{
					List<Global.IfcCurveStyleFontPattern>? items = new List<Global.IfcCurveStyleFontPattern>();
					foreach (IfcCurveStyleFontPattern item in PatternList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					PatternList = null;
				}
				else
				{
					PatternList = new List<IfcCurveStyleFontPattern>();
					foreach(var val in value)
					{
						if(val is IfcCurveStyleFontPattern v)
						{
							PatternList.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveStyleFontAndScaling
	/// SUBTYPE OF (IfcPresentationItem);
	/// Name : OPTIONAL IfcLabel;
	/// CurveFont : IfcCurveStyleFontSelect;
	/// CurveFontScaling : IfcPositiveRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurveStyleFontAndScaling : IfcPresentationItem, IfcCurveFontOrScaledCurveFontSelect, Global.IfcCurveStyleFontAndScaling
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcCurveStyleFontSelect? CurveFont { get; set; }
		public virtual IfcPositiveRatioMeasure? CurveFontScaling { get; set; }
		public IfcCurveStyleFontAndScaling() : base()
		{
		}
		public IfcCurveStyleFontAndScaling(IfcLabel? Name, IfcCurveStyleFontSelect? CurveFont, IfcPositiveRatioMeasure? CurveFontScaling) : base ()
		{
			this.Name = Name;
			this.CurveFont = CurveFont;
			this.CurveFontScaling = CurveFontScaling;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				CurveFont,
				CurveFontScaling
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcCurveStyleFontSelect? _CurveFont
		{
			get
			{
				return CurveFont;
			}
			set
			{
				if(value is IfcCurveStyleFontSelect val)
				{
					CurveFont = val;
				}
				else if(value == null)
				{
					CurveFont = null;
				}
			}
		}
		public virtual Global.IfcPositiveRatioMeasure? _CurveFontScaling
		{
			get
			{
				return CurveFontScaling;
			}
			set
			{
				if(value is IfcPositiveRatioMeasure val)
				{
					CurveFontScaling = val;
				}
				else if(value == null)
				{
					CurveFontScaling = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveStyleFontPattern
	/// SUBTYPE OF (IfcPresentationItem);
	/// VisibleSegmentLength : IfcLengthMeasure;
	/// InvisibleSegmentLength : IfcPositiveLengthMeasure;
	/// WHERE
	/// VisibleLengthGreaterEqualZero : VisibleSegmentLength >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurveStyleFontPattern : IfcPresentationItem, Global.IfcCurveStyleFontPattern
	{
		public virtual IfcLengthMeasure? VisibleSegmentLength { get; set; }
		public virtual IfcPositiveLengthMeasure? InvisibleSegmentLength { get; set; }
		public IfcCurveStyleFontPattern() : base()
		{
		}
		public IfcCurveStyleFontPattern(IfcLengthMeasure? VisibleSegmentLength, IfcPositiveLengthMeasure? InvisibleSegmentLength) : base ()
		{
			this.VisibleSegmentLength = VisibleSegmentLength;
			this.InvisibleSegmentLength = InvisibleSegmentLength;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				VisibleSegmentLength,
				InvisibleSegmentLength
			};
		}
		public virtual Global.IfcLengthMeasure? _VisibleSegmentLength
		{
			get
			{
				return VisibleSegmentLength;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					VisibleSegmentLength = val;
				}
				else if(value == null)
				{
					VisibleSegmentLength = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _InvisibleSegmentLength
		{
			get
			{
				return InvisibleSegmentLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					InvisibleSegmentLength = val;
				}
				else if(value == null)
				{
					InvisibleSegmentLength = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCylindricalSurface
	/// SUBTYPE OF (IfcElementarySurface);
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCylindricalSurface : IfcElementarySurface, Global.IfcCylindricalSurface
	{
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public IfcCylindricalSurface() : base()
		{
		}
		public IfcCylindricalSurface(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? Radius) : base (Position)
		{
			this.Radius = Radius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				Radius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDamper
	/// SUBTYPE OF (IfcFlowController);
	/// PredefinedType : OPTIONAL IfcDamperTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcDamperTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDamperTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCDAMPERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDamper : IfcFlowController, Global.IfcDamper
	{
		public virtual IfcDamperTypeEnum? PredefinedType { get; set; }
		public IfcDamper() : base()
		{
		}
		public IfcDamper(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcDamperTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcDamperTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDamperTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDamperType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcDamperTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcDamperTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDamperTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDamperType : IfcFlowControllerType, Global.IfcDamperType
	{
		public virtual IfcDamperTypeEnum? PredefinedType { get; set; }
		public IfcDamperType() : base()
		{
		}
		public IfcDamperType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDamperTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcDamperTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDamperTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDerivedProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcMirroredProfileDef))
	/// SUBTYPE OF (IfcProfileDef);
	/// ParentProfile : IfcProfileDef;
	/// Operator : IfcCartesianTransformationOperator2D;
	/// Label : OPTIONAL IfcLabel;
	/// WHERE
	/// InvariantProfileType : SELF\IfcProfileDef.ProfileType = ParentProfile.ProfileType;
	/// END_ENTITY;
	/// <summary>
	public class IfcDerivedProfileDef : IfcProfileDef, Global.IfcDerivedProfileDef
	{
		public virtual IfcProfileDef? ParentProfile { get; set; }
		public virtual IfcCartesianTransformationOperator2D? Operator { get; set; }
		public virtual IfcLabel? Label { get; set; }
		public IfcDerivedProfileDef() : base()
		{
		}
		public IfcDerivedProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcProfileDef? ParentProfile, IfcCartesianTransformationOperator2D? Operator, IfcLabel? Label) : base (ProfileType, ProfileName)
		{
			this.ParentProfile = ParentProfile;
			this.Operator = Operator;
			this.Label = Label;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				ParentProfile,
				Operator,
				Label
			};
		}
		public virtual Global.IfcProfileDef? _ParentProfile
		{
			get
			{
				return ParentProfile;
			}
			set
			{
				if(value is IfcProfileDef val)
				{
					ParentProfile = val;
				}
				else if(value == null)
				{
					ParentProfile = null;
				}
			}
		}
		public virtual Global.IfcCartesianTransformationOperator2D? _Operator
		{
			get
			{
				return Operator;
			}
			set
			{
				if(value is IfcCartesianTransformationOperator2D val)
				{
					Operator = val;
				}
				else if(value == null)
				{
					Operator = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Label
		{
			get
			{
				return Label;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Label = val;
				}
				else if(value == null)
				{
					Label = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDerivedUnit;
	/// Elements : SET [1:?] OF IfcDerivedUnitElement;
	/// UnitType : IfcDerivedUnitEnum;
	/// UserDefinedType : OPTIONAL IfcLabel;
	/// DERIVE
	/// Dimensions : IfcDimensionalExponents := IfcDeriveDimensionalExponents(Elements);
	/// WHERE
	/// WR1 : (SIZEOF (Elements) > 1) OR ((SIZEOF (Elements) = 1) AND (Elements[1].Exponent <> 1 ));
	/// WR2 : (UnitType <> IfcDerivedUnitEnum.USERDEFINED) OR
	/// ((UnitType = IfcDerivedUnitEnum.USERDEFINED) AND
	/// (EXISTS(SELF.UserDefinedType)));
	/// END_ENTITY;
	/// <summary>
	public class IfcDerivedUnit : Ifc_Entity, IfcUnit, Global.IfcDerivedUnit
	{
		public virtual List<IfcDerivedUnitElement>? Elements { get; set; }
		public virtual IfcDerivedUnitEnum? UnitType { get; set; }
		public virtual IfcLabel? UserDefinedType { get; set; }
		//DERIVE
		public virtual IfcDimensionalExponents? Dimensions {get {return null;}}
		public IfcDerivedUnit() : base()
		{
		}
		public IfcDerivedUnit(List<IfcDerivedUnitElement>? Elements, IfcDerivedUnitEnum? UnitType, IfcLabel? UserDefinedType) : base ()
		{
			this.Elements = Elements;
			this.UnitType = UnitType;
			this.UserDefinedType = UserDefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Elements,
				UnitType,
				UserDefinedType
			};
		}
		public virtual List<Global.IfcDerivedUnitElement>? _Elements
		{
			get
			{
				if(Elements != null)
				{
					List<Global.IfcDerivedUnitElement>? items = new List<Global.IfcDerivedUnitElement>();
					foreach (IfcDerivedUnitElement item in Elements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Elements = null;
				}
				else
				{
					Elements = new List<IfcDerivedUnitElement>();
					foreach(var val in value)
					{
						if(val is IfcDerivedUnitElement v)
						{
							Elements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcDerivedUnitEnum? _UnitType
		{
			get
			{
				return UnitType;
			}
			set
			{
				if(value is IfcDerivedUnitEnum val)
				{
					UnitType = val;
				}
				else if(value == null)
				{
					UnitType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedType
		{
			get
			{
				return UserDefinedType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedType = val;
				}
				else if(value == null)
				{
					UserDefinedType = null;
				}
			}
		}
		public virtual Global.IfcDimensionalExponents? _Dimensions
		{
			get
			{
				return Dimensions;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDerivedUnitElement;
	/// Unit : IfcNamedUnit;
	/// Exponent : INTEGER;
	/// END_ENTITY;
	/// <summary>
	public class IfcDerivedUnitElement : Ifc_Entity, Global.IfcDerivedUnitElement
	{
		public virtual IfcNamedUnit? Unit { get; set; }
		public virtual INTEGER? Exponent { get; set; }
		public IfcDerivedUnitElement() : base()
		{
		}
		public IfcDerivedUnitElement(IfcNamedUnit? Unit, INTEGER? Exponent) : base ()
		{
			this.Unit = Unit;
			this.Exponent = Exponent;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Unit,
				Exponent
			};
		}
		public virtual Global.IfcNamedUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IfcNamedUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
		public virtual INTEGER? _Exponent
		{
			get
			{
				return Exponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					Exponent = val;
				}
				else if(value == null)
				{
					Exponent = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionalExponents;
	/// LengthExponent : INTEGER;
	/// MassExponent : INTEGER;
	/// TimeExponent : INTEGER;
	/// ElectricCurrentExponent : INTEGER;
	/// ThermodynamicTemperatureExponent : INTEGER;
	/// AmountOfSubstanceExponent : INTEGER;
	/// LuminousIntensityExponent : INTEGER;
	/// END_ENTITY;
	/// <summary>
	public class IfcDimensionalExponents : Ifc_Entity, Global.IfcDimensionalExponents
	{
		public virtual INTEGER? LengthExponent { get; set; }
		public virtual INTEGER? MassExponent { get; set; }
		public virtual INTEGER? TimeExponent { get; set; }
		public virtual INTEGER? ElectricCurrentExponent { get; set; }
		public virtual INTEGER? ThermodynamicTemperatureExponent { get; set; }
		public virtual INTEGER? AmountOfSubstanceExponent { get; set; }
		public virtual INTEGER? LuminousIntensityExponent { get; set; }
		public IfcDimensionalExponents() : base()
		{
		}
		public IfcDimensionalExponents(INTEGER? LengthExponent, INTEGER? MassExponent, INTEGER? TimeExponent, INTEGER? ElectricCurrentExponent, INTEGER? ThermodynamicTemperatureExponent, INTEGER? AmountOfSubstanceExponent, INTEGER? LuminousIntensityExponent) : base ()
		{
			this.LengthExponent = LengthExponent;
			this.MassExponent = MassExponent;
			this.TimeExponent = TimeExponent;
			this.ElectricCurrentExponent = ElectricCurrentExponent;
			this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
			this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
			this.LuminousIntensityExponent = LuminousIntensityExponent;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				LengthExponent,
				MassExponent,
				TimeExponent,
				ElectricCurrentExponent,
				ThermodynamicTemperatureExponent,
				AmountOfSubstanceExponent,
				LuminousIntensityExponent
			};
		}
		public virtual INTEGER? _LengthExponent
		{
			get
			{
				return LengthExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					LengthExponent = val;
				}
				else if(value == null)
				{
					LengthExponent = null;
				}
			}
		}
		public virtual INTEGER? _MassExponent
		{
			get
			{
				return MassExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					MassExponent = val;
				}
				else if(value == null)
				{
					MassExponent = null;
				}
			}
		}
		public virtual INTEGER? _TimeExponent
		{
			get
			{
				return TimeExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					TimeExponent = val;
				}
				else if(value == null)
				{
					TimeExponent = null;
				}
			}
		}
		public virtual INTEGER? _ElectricCurrentExponent
		{
			get
			{
				return ElectricCurrentExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					ElectricCurrentExponent = val;
				}
				else if(value == null)
				{
					ElectricCurrentExponent = null;
				}
			}
		}
		public virtual INTEGER? _ThermodynamicTemperatureExponent
		{
			get
			{
				return ThermodynamicTemperatureExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					ThermodynamicTemperatureExponent = val;
				}
				else if(value == null)
				{
					ThermodynamicTemperatureExponent = null;
				}
			}
		}
		public virtual INTEGER? _AmountOfSubstanceExponent
		{
			get
			{
				return AmountOfSubstanceExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					AmountOfSubstanceExponent = val;
				}
				else if(value == null)
				{
					AmountOfSubstanceExponent = null;
				}
			}
		}
		public virtual INTEGER? _LuminousIntensityExponent
		{
			get
			{
				return LuminousIntensityExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					LuminousIntensityExponent = val;
				}
				else if(value == null)
				{
					LuminousIntensityExponent = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDirection
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// DirectionRatios : LIST [2:3] OF IfcReal;
	/// DERIVE
	/// Dim : IfcDimensionCount := HIINDEX(DirectionRatios);
	/// WHERE
	/// MagnitudeGreaterZero : SIZEOF(QUERY(Tmp <* DirectionRatios | Tmp <> 0.0)) > 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcDirection : IfcGeometricRepresentationItem, IfcGridPlacementDirectionSelect, IfcVectorOrDirection, Global.IfcDirection
	{
		public virtual List<IfcReal>? DirectionRatios { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcDirection() : base()
		{
		}
		public IfcDirection(List<IfcReal>? DirectionRatios) : base ()
		{
			this.DirectionRatios = DirectionRatios;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				DirectionRatios
			};
		}
		public virtual List<Global.IfcReal>? _DirectionRatios
		{
			get
			{
				if(DirectionRatios != null)
				{
					List<Global.IfcReal>? items = new List<Global.IfcReal>();
					foreach (IfcReal item in DirectionRatios)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					DirectionRatios = null;
				}
				else
				{
					DirectionRatios = new List<IfcReal>();
					foreach(var val in value)
					{
						if(val is IfcReal v)
						{
							DirectionRatios.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDiscreteAccessory
	/// SUBTYPE OF (IfcElementComponent);
	/// PredefinedType : OPTIONAL IfcDiscreteAccessoryTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcDiscreteAccessoryTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDiscreteAccessoryTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCDISCRETEACCESSORYTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDiscreteAccessory : IfcElementComponent, Global.IfcDiscreteAccessory
	{
		public virtual IfcDiscreteAccessoryTypeEnum? PredefinedType { get; set; }
		public IfcDiscreteAccessory() : base()
		{
		}
		public IfcDiscreteAccessory(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcDiscreteAccessoryTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcDiscreteAccessoryTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDiscreteAccessoryTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDiscreteAccessoryType
	/// SUBTYPE OF (IfcElementComponentType);
	/// PredefinedType : IfcDiscreteAccessoryTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcDiscreteAccessoryTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDiscreteAccessoryTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDiscreteAccessoryType : IfcElementComponentType, Global.IfcDiscreteAccessoryType
	{
		public virtual IfcDiscreteAccessoryTypeEnum? PredefinedType { get; set; }
		public IfcDiscreteAccessoryType() : base()
		{
		}
		public IfcDiscreteAccessoryType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDiscreteAccessoryTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcDiscreteAccessoryTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDiscreteAccessoryTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionChamberElement
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// PredefinedType : OPTIONAL IfcDistributionChamberElementTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcDistributionChamberElementTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDistributionChamberElementTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCDISTRIBUTIONCHAMBERELEMENTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionChamberElement : IfcDistributionFlowElement, Global.IfcDistributionChamberElement
	{
		public virtual IfcDistributionChamberElementTypeEnum? PredefinedType { get; set; }
		public IfcDistributionChamberElement() : base()
		{
		}
		public IfcDistributionChamberElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcDistributionChamberElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcDistributionChamberElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDistributionChamberElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionChamberElementType
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// PredefinedType : IfcDistributionChamberElementTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcDistributionChamberElementTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDistributionChamberElementTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionChamberElementType : IfcDistributionFlowElementType, Global.IfcDistributionChamberElementType
	{
		public virtual IfcDistributionChamberElementTypeEnum? PredefinedType { get; set; }
		public IfcDistributionChamberElementType() : base()
		{
		}
		public IfcDistributionChamberElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDistributionChamberElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcDistributionChamberElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDistributionChamberElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionCircuit
	/// SUBTYPE OF (IfcDistributionSystem);
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionCircuit : IfcDistributionSystem, Global.IfcDistributionCircuit
	{
		public IfcDistributionCircuit() : base()
		{
		}
		public IfcDistributionCircuit(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcLabel? LongName, IfcDistributionSystemEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				LongName,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionControlElement
	/// SUPERTYPE OF (ONEOF
	/// (IfcActuator
	/// ,IfcAlarm
	/// ,IfcController
	/// ,IfcFlowInstrument
	/// ,IfcProtectiveDeviceTrippingUnit
	/// ,IfcSensor
	/// ,IfcUnitaryControlElement))
	/// SUBTYPE OF (IfcDistributionElement);
	/// INVERSE
	/// AssignedToFlowElement : SET [0:1] OF IfcRelFlowControlElements FOR RelatedControlElements;
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionControlElement : IfcDistributionElement, Global.IfcDistributionControlElement
	{
		public List<IfcRelFlowControlElements>? AssignedToFlowElement {get{return Model?.GetItems<IfcRelFlowControlElements>().Where(x => x.RelatedControlElements != null && x.RelatedControlElements.Contains(this)).ToList();}}
		public IfcDistributionControlElement() : base()
		{
		}
		public IfcDistributionControlElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
		public virtual List<Global.IfcRelFlowControlElements>? _AssignedToFlowElement
		{
			get
			{
				if(AssignedToFlowElement != null)
				{
					List<Global.IfcRelFlowControlElements>? items = new List<Global.IfcRelFlowControlElements>();
					foreach (IfcRelFlowControlElements item in AssignedToFlowElement)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionControlElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcActuatorType
	/// ,IfcAlarmType
	/// ,IfcControllerType
	/// ,IfcFlowInstrumentType
	/// ,IfcProtectiveDeviceTrippingUnitType
	/// ,IfcSensorType
	/// ,IfcUnitaryControlElementType))
	/// SUBTYPE OF (IfcDistributionElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcDistributionControlElementType : IfcDistributionElementType, Global.IfcDistributionControlElementType
	{
		public IfcDistributionControlElementType() : base()
		{
		}
		public IfcDistributionControlElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionElement
	/// SUPERTYPE OF (ONEOF
	/// (IfcDistributionControlElement
	/// ,IfcDistributionFlowElement))
	/// SUBTYPE OF (IfcElement);
	/// INVERSE
	/// HasPorts : SET [0:?] OF IfcRelConnectsPortToElement FOR RelatedElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionElement : IfcElement, Global.IfcDistributionElement
	{
		public List<IfcRelConnectsPortToElement>? HasPorts {get{return Model?.GetItems<IfcRelConnectsPortToElement>().Where(x => x.RelatedElement != null && x.RelatedElement == this).ToList();}}
		public IfcDistributionElement() : base()
		{
		}
		public IfcDistributionElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
		public virtual List<Global.IfcRelConnectsPortToElement>? _HasPorts
		{
			get
			{
				if(HasPorts != null)
				{
					List<Global.IfcRelConnectsPortToElement>? items = new List<Global.IfcRelConnectsPortToElement>();
					foreach (IfcRelConnectsPortToElement item in HasPorts)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionElementType
	/// SUPERTYPE OF (ONEOF
	/// (IfcDistributionControlElementType
	/// ,IfcDistributionFlowElementType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionElementType : IfcElementType, Global.IfcDistributionElementType
	{
		public IfcDistributionElementType() : base()
		{
		}
		public IfcDistributionElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionFlowElement
	/// SUPERTYPE OF (ONEOF
	/// (IfcDistributionChamberElement
	/// ,IfcEnergyConversionDevice
	/// ,IfcFlowController
	/// ,IfcFlowFitting
	/// ,IfcFlowMovingDevice
	/// ,IfcFlowSegment
	/// ,IfcFlowStorageDevice
	/// ,IfcFlowTerminal
	/// ,IfcFlowTreatmentDevice))
	/// SUBTYPE OF (IfcDistributionElement);
	/// INVERSE
	/// HasControlElements : SET [0:1] OF IfcRelFlowControlElements FOR RelatingFlowElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionFlowElement : IfcDistributionElement, Global.IfcDistributionFlowElement
	{
		public List<IfcRelFlowControlElements>? HasControlElements {get{return Model?.GetItems<IfcRelFlowControlElements>().Where(x => x.RelatingFlowElement != null && x.RelatingFlowElement == this).ToList();}}
		public IfcDistributionFlowElement() : base()
		{
		}
		public IfcDistributionFlowElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
		public virtual List<Global.IfcRelFlowControlElements>? _HasControlElements
		{
			get
			{
				if(HasControlElements != null)
				{
					List<Global.IfcRelFlowControlElements>? items = new List<Global.IfcRelFlowControlElements>();
					foreach (IfcRelFlowControlElements item in HasControlElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionFlowElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDistributionChamberElementType
	/// ,IfcEnergyConversionDeviceType
	/// ,IfcFlowControllerType
	/// ,IfcFlowFittingType
	/// ,IfcFlowMovingDeviceType
	/// ,IfcFlowSegmentType
	/// ,IfcFlowStorageDeviceType
	/// ,IfcFlowTerminalType
	/// ,IfcFlowTreatmentDeviceType))
	/// SUBTYPE OF (IfcDistributionElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcDistributionFlowElementType : IfcDistributionElementType, Global.IfcDistributionFlowElementType
	{
		public IfcDistributionFlowElementType() : base()
		{
		}
		public IfcDistributionFlowElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionPort
	/// SUBTYPE OF (IfcPort);
	/// FlowDirection : OPTIONAL IfcFlowDirectionEnum;
	/// PredefinedType : OPTIONAL IfcDistributionPortTypeEnum;
	/// SystemType : OPTIONAL IfcDistributionSystemEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionPort : IfcPort, Global.IfcDistributionPort
	{
		public virtual IfcFlowDirectionEnum? FlowDirection { get; set; }
		public virtual IfcDistributionPortTypeEnum? PredefinedType { get; set; }
		public virtual IfcDistributionSystemEnum? SystemType { get; set; }
		public IfcDistributionPort() : base()
		{
		}
		public IfcDistributionPort(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcFlowDirectionEnum? FlowDirection, IfcDistributionPortTypeEnum? PredefinedType, IfcDistributionSystemEnum? SystemType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.FlowDirection = FlowDirection;
			this.PredefinedType = PredefinedType;
			this.SystemType = SystemType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				FlowDirection,
				PredefinedType,
				SystemType
			};
		}
		public virtual Global.IfcFlowDirectionEnum? _FlowDirection
		{
			get
			{
				return FlowDirection;
			}
			set
			{
				if(value is IfcFlowDirectionEnum val)
				{
					FlowDirection = val;
				}
				else if(value == null)
				{
					FlowDirection = null;
				}
			}
		}
		public virtual Global.IfcDistributionPortTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDistributionPortTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcDistributionSystemEnum? _SystemType
		{
			get
			{
				return SystemType;
			}
			set
			{
				if(value is IfcDistributionSystemEnum val)
				{
					SystemType = val;
				}
				else if(value == null)
				{
					SystemType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionSystem
	/// SUPERTYPE OF (ONEOF
	/// (IfcDistributionCircuit))
	/// SUBTYPE OF (IfcSystem);
	/// LongName : OPTIONAL IfcLabel;
	/// PredefinedType : OPTIONAL IfcDistributionSystemEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionSystem : IfcSystem, Global.IfcDistributionSystem
	{
		public virtual IfcLabel? LongName { get; set; }
		public virtual IfcDistributionSystemEnum? PredefinedType { get; set; }
		public IfcDistributionSystem() : base()
		{
		}
		public IfcDistributionSystem(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcLabel? LongName, IfcDistributionSystemEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.LongName = LongName;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				LongName,
				PredefinedType
			};
		}
		public virtual Global.IfcLabel? _LongName
		{
			get
			{
				return LongName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					LongName = val;
				}
				else if(value == null)
				{
					LongName = null;
				}
			}
		}
		public virtual Global.IfcDistributionSystemEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDistributionSystemEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDocumentInformation
	/// SUBTYPE OF (IfcExternalInformation);
	/// Identification : IfcIdentifier;
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Location : OPTIONAL IfcURIReference;
	/// Purpose : OPTIONAL IfcText;
	/// IntendedUse : OPTIONAL IfcText;
	/// Scope : OPTIONAL IfcText;
	/// Revision : OPTIONAL IfcLabel;
	/// DocumentOwner : OPTIONAL IfcActorSelect;
	/// Editors : OPTIONAL SET [1:?] OF IfcActorSelect;
	/// CreationTime : OPTIONAL IfcDateTime;
	/// LastRevisionTime : OPTIONAL IfcDateTime;
	/// ElectronicFormat : OPTIONAL IfcIdentifier;
	/// ValidFrom : OPTIONAL IfcDate;
	/// ValidUntil : OPTIONAL IfcDate;
	/// Confidentiality : OPTIONAL IfcDocumentConfidentialityEnum;
	/// Status : OPTIONAL IfcDocumentStatusEnum;
	/// INVERSE
	/// DocumentInfoForObjects : SET [0:?] OF IfcRelAssociatesDocument FOR RelatingDocument;
	/// HasDocumentReferences : SET [0:?] OF IfcDocumentReference FOR ReferencedDocument;
	/// IsPointedTo : SET [0:?] OF IfcDocumentInformationRelationship FOR RelatedDocuments;
	/// IsPointer : SET [0:1] OF IfcDocumentInformationRelationship FOR RelatingDocument;
	/// END_ENTITY;
	/// <summary>
	public class IfcDocumentInformation : IfcExternalInformation, IfcDocumentSelect, Global.IfcDocumentInformation
	{
		public virtual IfcIdentifier? Identification { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcURIReference? Location { get; set; }
		public virtual IfcText? Purpose { get; set; }
		public virtual IfcText? IntendedUse { get; set; }
		public virtual IfcText? Scope { get; set; }
		public virtual IfcLabel? Revision { get; set; }
		public virtual IfcActorSelect? DocumentOwner { get; set; }
		public virtual List<IfcActorSelect>? Editors { get; set; }
		public virtual IfcDateTime? CreationTime { get; set; }
		public virtual IfcDateTime? LastRevisionTime { get; set; }
		public virtual IfcIdentifier? ElectronicFormat { get; set; }
		public virtual IfcDate? ValidFrom { get; set; }
		public virtual IfcDate? ValidUntil { get; set; }
		public virtual IfcDocumentConfidentialityEnum? Confidentiality { get; set; }
		public virtual IfcDocumentStatusEnum? Status { get; set; }
		public List<IfcRelAssociatesDocument>? DocumentInfoForObjects {get{return Model?.GetItems<IfcRelAssociatesDocument>().Where(x => x.RelatingDocument != null && x.RelatingDocument == this).ToList();}}
		public List<IfcDocumentReference>? HasDocumentReferences {get{return Model?.GetItems<IfcDocumentReference>().Where(x => x.ReferencedDocument != null && x.ReferencedDocument == this).ToList();}}
		public List<IfcDocumentInformationRelationship>? IsPointedTo {get{return Model?.GetItems<IfcDocumentInformationRelationship>().Where(x => x.RelatedDocuments != null && x.RelatedDocuments.Contains(this)).ToList();}}
		public List<IfcDocumentInformationRelationship>? IsPointer {get{return Model?.GetItems<IfcDocumentInformationRelationship>().Where(x => x.RelatingDocument != null && x.RelatingDocument == this).ToList();}}
		public IfcDocumentInformation() : base()
		{
		}
		public IfcDocumentInformation(IfcIdentifier? Identification, IfcLabel? Name, IfcText? Description, IfcURIReference? Location, IfcText? Purpose, IfcText? IntendedUse, IfcText? Scope, IfcLabel? Revision, IfcActorSelect? DocumentOwner, List<IfcActorSelect>? Editors, IfcDateTime? CreationTime, IfcDateTime? LastRevisionTime, IfcIdentifier? ElectronicFormat, IfcDate? ValidFrom, IfcDate? ValidUntil, IfcDocumentConfidentialityEnum? Confidentiality, IfcDocumentStatusEnum? Status) : base ()
		{
			this.Identification = Identification;
			this.Name = Name;
			this.Description = Description;
			this.Location = Location;
			this.Purpose = Purpose;
			this.IntendedUse = IntendedUse;
			this.Scope = Scope;
			this.Revision = Revision;
			this.DocumentOwner = DocumentOwner;
			this.Editors = Editors;
			this.CreationTime = CreationTime;
			this.LastRevisionTime = LastRevisionTime;
			this.ElectronicFormat = ElectronicFormat;
			this.ValidFrom = ValidFrom;
			this.ValidUntil = ValidUntil;
			this.Confidentiality = Confidentiality;
			this.Status = Status;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Identification,
				Name,
				Description,
				Location,
				Purpose,
				IntendedUse,
				Scope,
				Revision,
				DocumentOwner,
				Editors,
				CreationTime,
				LastRevisionTime,
				ElectronicFormat,
				ValidFrom,
				ValidUntil,
				Confidentiality,
				Status
			};
		}
		public virtual Global.IfcIdentifier? _Identification
		{
			get
			{
				return Identification;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identification = val;
				}
				else if(value == null)
				{
					Identification = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcURIReference? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IfcURIReference val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
		public virtual Global.IfcText? _Purpose
		{
			get
			{
				return Purpose;
			}
			set
			{
				if(value is IfcText val)
				{
					Purpose = val;
				}
				else if(value == null)
				{
					Purpose = null;
				}
			}
		}
		public virtual Global.IfcText? _IntendedUse
		{
			get
			{
				return IntendedUse;
			}
			set
			{
				if(value is IfcText val)
				{
					IntendedUse = val;
				}
				else if(value == null)
				{
					IntendedUse = null;
				}
			}
		}
		public virtual Global.IfcText? _Scope
		{
			get
			{
				return Scope;
			}
			set
			{
				if(value is IfcText val)
				{
					Scope = val;
				}
				else if(value == null)
				{
					Scope = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Revision
		{
			get
			{
				return Revision;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Revision = val;
				}
				else if(value == null)
				{
					Revision = null;
				}
			}
		}
		public virtual Global.IfcActorSelect? _DocumentOwner
		{
			get
			{
				return DocumentOwner;
			}
			set
			{
				if(value is IfcActorSelect val)
				{
					DocumentOwner = val;
				}
				else if(value == null)
				{
					DocumentOwner = null;
				}
			}
		}
		public virtual List<Global.IfcActorSelect>? _Editors
		{
			get
			{
				if(Editors != null)
				{
					List<Global.IfcActorSelect>? items = new List<Global.IfcActorSelect>();
					foreach (IfcActorSelect item in Editors)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Editors = null;
				}
				else
				{
					Editors = new List<IfcActorSelect>();
					foreach(var val in value)
					{
						if(val is IfcActorSelect v)
						{
							Editors.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcDateTime? _CreationTime
		{
			get
			{
				return CreationTime;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					CreationTime = val;
				}
				else if(value == null)
				{
					CreationTime = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _LastRevisionTime
		{
			get
			{
				return LastRevisionTime;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					LastRevisionTime = val;
				}
				else if(value == null)
				{
					LastRevisionTime = null;
				}
			}
		}
		public virtual Global.IfcIdentifier? _ElectronicFormat
		{
			get
			{
				return ElectronicFormat;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					ElectronicFormat = val;
				}
				else if(value == null)
				{
					ElectronicFormat = null;
				}
			}
		}
		public virtual Global.IfcDate? _ValidFrom
		{
			get
			{
				return ValidFrom;
			}
			set
			{
				if(value is IfcDate val)
				{
					ValidFrom = val;
				}
				else if(value == null)
				{
					ValidFrom = null;
				}
			}
		}
		public virtual Global.IfcDate? _ValidUntil
		{
			get
			{
				return ValidUntil;
			}
			set
			{
				if(value is IfcDate val)
				{
					ValidUntil = val;
				}
				else if(value == null)
				{
					ValidUntil = null;
				}
			}
		}
		public virtual Global.IfcDocumentConfidentialityEnum? _Confidentiality
		{
			get
			{
				return Confidentiality;
			}
			set
			{
				if(value is IfcDocumentConfidentialityEnum val)
				{
					Confidentiality = val;
				}
				else if(value == null)
				{
					Confidentiality = null;
				}
			}
		}
		public virtual Global.IfcDocumentStatusEnum? _Status
		{
			get
			{
				return Status;
			}
			set
			{
				if(value is IfcDocumentStatusEnum val)
				{
					Status = val;
				}
				else if(value == null)
				{
					Status = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssociatesDocument>? _DocumentInfoForObjects
		{
			get
			{
				if(DocumentInfoForObjects != null)
				{
					List<Global.IfcRelAssociatesDocument>? items = new List<Global.IfcRelAssociatesDocument>();
					foreach (IfcRelAssociatesDocument item in DocumentInfoForObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcDocumentReference>? _HasDocumentReferences
		{
			get
			{
				if(HasDocumentReferences != null)
				{
					List<Global.IfcDocumentReference>? items = new List<Global.IfcDocumentReference>();
					foreach (IfcDocumentReference item in HasDocumentReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcDocumentInformationRelationship>? _IsPointedTo
		{
			get
			{
				if(IsPointedTo != null)
				{
					List<Global.IfcDocumentInformationRelationship>? items = new List<Global.IfcDocumentInformationRelationship>();
					foreach (IfcDocumentInformationRelationship item in IsPointedTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcDocumentInformationRelationship>? _IsPointer
		{
			get
			{
				if(IsPointer != null)
				{
					List<Global.IfcDocumentInformationRelationship>? items = new List<Global.IfcDocumentInformationRelationship>();
					foreach (IfcDocumentInformationRelationship item in IsPointer)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDocumentInformationRelationship
	/// SUBTYPE OF (IfcResourceLevelRelationship);
	/// RelatingDocument : IfcDocumentInformation;
	/// RelatedDocuments : SET [1:?] OF IfcDocumentInformation;
	/// RelationshipType : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcDocumentInformationRelationship : IfcResourceLevelRelationship, Global.IfcDocumentInformationRelationship
	{
		public virtual IfcDocumentInformation? RelatingDocument { get; set; }
		public virtual List<IfcDocumentInformation>? RelatedDocuments { get; set; }
		public virtual IfcLabel? RelationshipType { get; set; }
		public IfcDocumentInformationRelationship() : base()
		{
		}
		public IfcDocumentInformationRelationship(IfcLabel? Name, IfcText? Description, IfcDocumentInformation? RelatingDocument, List<IfcDocumentInformation>? RelatedDocuments, IfcLabel? RelationshipType) : base (Name, Description)
		{
			this.RelatingDocument = RelatingDocument;
			this.RelatedDocuments = RelatedDocuments;
			this.RelationshipType = RelationshipType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingDocument,
				RelatedDocuments,
				RelationshipType
			};
		}
		public virtual Global.IfcDocumentInformation? _RelatingDocument
		{
			get
			{
				return RelatingDocument;
			}
			set
			{
				if(value is IfcDocumentInformation val)
				{
					RelatingDocument = val;
				}
				else if(value == null)
				{
					RelatingDocument = null;
				}
			}
		}
		public virtual List<Global.IfcDocumentInformation>? _RelatedDocuments
		{
			get
			{
				if(RelatedDocuments != null)
				{
					List<Global.IfcDocumentInformation>? items = new List<Global.IfcDocumentInformation>();
					foreach (IfcDocumentInformation item in RelatedDocuments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedDocuments = null;
				}
				else
				{
					RelatedDocuments = new List<IfcDocumentInformation>();
					foreach(var val in value)
					{
						if(val is IfcDocumentInformation v)
						{
							RelatedDocuments.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _RelationshipType
		{
			get
			{
				return RelationshipType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					RelationshipType = val;
				}
				else if(value == null)
				{
					RelationshipType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDocumentReference
	/// SUBTYPE OF (IfcExternalReference);
	/// Description : OPTIONAL IfcText;
	/// ReferencedDocument : OPTIONAL IfcDocumentInformation;
	/// INVERSE
	/// DocumentRefForObjects : SET [0:?] OF IfcRelAssociatesDocument FOR RelatingDocument;
	/// WHERE
	/// WR1 : EXISTS(Name) XOR EXISTS(ReferencedDocument);
	/// END_ENTITY;
	/// <summary>
	public class IfcDocumentReference : IfcExternalReference, IfcDocumentSelect, Global.IfcDocumentReference
	{
		public virtual IfcText? Description { get; set; }
		public virtual IfcDocumentInformation? ReferencedDocument { get; set; }
		public List<IfcRelAssociatesDocument>? DocumentRefForObjects {get{return Model?.GetItems<IfcRelAssociatesDocument>().Where(x => x.RelatingDocument != null && x.RelatingDocument == this).ToList();}}
		public IfcDocumentReference() : base()
		{
		}
		public IfcDocumentReference(IfcURIReference? Location, IfcIdentifier? Identification, IfcLabel? Name, IfcText? Description, IfcDocumentInformation? ReferencedDocument) : base (Location, Identification, Name)
		{
			this.Description = Description;
			this.ReferencedDocument = ReferencedDocument;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				Identification,
				Name,
				Description,
				ReferencedDocument
			};
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcDocumentInformation? _ReferencedDocument
		{
			get
			{
				return ReferencedDocument;
			}
			set
			{
				if(value is IfcDocumentInformation val)
				{
					ReferencedDocument = val;
				}
				else if(value == null)
				{
					ReferencedDocument = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssociatesDocument>? _DocumentRefForObjects
		{
			get
			{
				if(DocumentRefForObjects != null)
				{
					List<Global.IfcRelAssociatesDocument>? items = new List<Global.IfcRelAssociatesDocument>();
					foreach (IfcRelAssociatesDocument item in DocumentRefForObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDoor
	/// SUPERTYPE OF (ONEOF
	/// (IfcDoorStandardCase))
	/// SUBTYPE OF (IfcBuildingElement);
	/// OverallHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// OverallWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// PredefinedType : OPTIONAL IfcDoorTypeEnum;
	/// OperationType : OPTIONAL IfcDoorTypeOperationEnum;
	/// UserDefinedOperationType : OPTIONAL IfcLabel;
	/// WHERE
	/// CorrectStyleAssigned : (SIZEOF(IsTypedBy) = 0)
	/// OR ('IFC4.IFCDOORTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDoor : IfcBuildingElement, Global.IfcDoor
	{
		public virtual IfcPositiveLengthMeasure? OverallHeight { get; set; }
		public virtual IfcPositiveLengthMeasure? OverallWidth { get; set; }
		public virtual IfcDoorTypeEnum? PredefinedType { get; set; }
		public virtual IfcDoorTypeOperationEnum? OperationType { get; set; }
		public virtual IfcLabel? UserDefinedOperationType { get; set; }
		public IfcDoor() : base()
		{
		}
		public IfcDoor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPositiveLengthMeasure? OverallHeight, IfcPositiveLengthMeasure? OverallWidth, IfcDoorTypeEnum? PredefinedType, IfcDoorTypeOperationEnum? OperationType, IfcLabel? UserDefinedOperationType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
			this.PredefinedType = PredefinedType;
			this.OperationType = OperationType;
			this.UserDefinedOperationType = UserDefinedOperationType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				OverallHeight,
				OverallWidth,
				PredefinedType,
				OperationType,
				UserDefinedOperationType
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallHeight
		{
			get
			{
				return OverallHeight;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					OverallHeight = val;
				}
				else if(value == null)
				{
					OverallHeight = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallWidth
		{
			get
			{
				return OverallWidth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					OverallWidth = val;
				}
				else if(value == null)
				{
					OverallWidth = null;
				}
			}
		}
		public virtual Global.IfcDoorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDoorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcDoorTypeOperationEnum? _OperationType
		{
			get
			{
				return OperationType;
			}
			set
			{
				if(value is IfcDoorTypeOperationEnum val)
				{
					OperationType = val;
				}
				else if(value == null)
				{
					OperationType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedOperationType
		{
			get
			{
				return UserDefinedOperationType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedOperationType = val;
				}
				else if(value == null)
				{
					UserDefinedOperationType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDoorLiningProperties
	/// SUBTYPE OF (IfcPreDefinedPropertySet);
	/// LiningDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// LiningThickness : OPTIONAL IfcNonNegativeLengthMeasure;
	/// ThresholdDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// ThresholdThickness : OPTIONAL IfcNonNegativeLengthMeasure;
	/// TransomThickness : OPTIONAL IfcNonNegativeLengthMeasure;
	/// TransomOffset : OPTIONAL IfcLengthMeasure;
	/// LiningOffset : OPTIONAL IfcLengthMeasure;
	/// ThresholdOffset : OPTIONAL IfcLengthMeasure;
	/// CasingThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// CasingDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// LiningToPanelOffsetX : OPTIONAL IfcLengthMeasure;
	/// LiningToPanelOffsetY : OPTIONAL IfcLengthMeasure;
	/// WHERE
	/// WR31 : NOT(EXISTS(LiningDepth) AND NOT(EXISTS(LiningThickness)));
	/// WR32 : NOT(EXISTS(ThresholdDepth) AND NOT(EXISTS(ThresholdThickness)));
	/// WR33 : (EXISTS(TransomOffset) AND EXISTS(TransomThickness)) XOR
	/// (NOT(EXISTS(TransomOffset)) AND NOT(EXISTS(TransomThickness)));
	/// WR34 : (EXISTS(CasingDepth) AND EXISTS(CasingThickness)) XOR
	/// (NOT(EXISTS(CasingDepth)) AND NOT(EXISTS(CasingThickness)));
	/// WR35 : (EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// AND
	/// (
	/// ('IFC4.IFCDOORTYPE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// OR
	/// ('IFC4.IFCDOORSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// );
	/// END_ENTITY;
	/// <summary>
	public class IfcDoorLiningProperties : IfcPreDefinedPropertySet, Global.IfcDoorLiningProperties
	{
		public virtual IfcPositiveLengthMeasure? LiningDepth { get; set; }
		public virtual IfcNonNegativeLengthMeasure? LiningThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? ThresholdDepth { get; set; }
		public virtual IfcNonNegativeLengthMeasure? ThresholdThickness { get; set; }
		public virtual IfcNonNegativeLengthMeasure? TransomThickness { get; set; }
		public virtual IfcLengthMeasure? TransomOffset { get; set; }
		public virtual IfcLengthMeasure? LiningOffset { get; set; }
		public virtual IfcLengthMeasure? ThresholdOffset { get; set; }
		public virtual IfcPositiveLengthMeasure? CasingThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? CasingDepth { get; set; }
		public virtual IfcShapeAspect? ShapeAspectStyle { get; set; }
		public virtual IfcLengthMeasure? LiningToPanelOffsetX { get; set; }
		public virtual IfcLengthMeasure? LiningToPanelOffsetY { get; set; }
		public IfcDoorLiningProperties() : base()
		{
		}
		public IfcDoorLiningProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPositiveLengthMeasure? LiningDepth, IfcNonNegativeLengthMeasure? LiningThickness, IfcPositiveLengthMeasure? ThresholdDepth, IfcNonNegativeLengthMeasure? ThresholdThickness, IfcNonNegativeLengthMeasure? TransomThickness, IfcLengthMeasure? TransomOffset, IfcLengthMeasure? LiningOffset, IfcLengthMeasure? ThresholdOffset, IfcPositiveLengthMeasure? CasingThickness, IfcPositiveLengthMeasure? CasingDepth, IfcShapeAspect? ShapeAspectStyle, IfcLengthMeasure? LiningToPanelOffsetX, IfcLengthMeasure? LiningToPanelOffsetY) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.ThresholdDepth = ThresholdDepth;
			this.ThresholdThickness = ThresholdThickness;
			this.TransomThickness = TransomThickness;
			this.TransomOffset = TransomOffset;
			this.LiningOffset = LiningOffset;
			this.ThresholdOffset = ThresholdOffset;
			this.CasingThickness = CasingThickness;
			this.CasingDepth = CasingDepth;
			this.ShapeAspectStyle = ShapeAspectStyle;
			this.LiningToPanelOffsetX = LiningToPanelOffsetX;
			this.LiningToPanelOffsetY = LiningToPanelOffsetY;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				LiningDepth,
				LiningThickness,
				ThresholdDepth,
				ThresholdThickness,
				TransomThickness,
				TransomOffset,
				LiningOffset,
				ThresholdOffset,
				CasingThickness,
				CasingDepth,
				ShapeAspectStyle,
				LiningToPanelOffsetX,
				LiningToPanelOffsetY
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _LiningDepth
		{
			get
			{
				return LiningDepth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					LiningDepth = val;
				}
				else if(value == null)
				{
					LiningDepth = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _LiningThickness
		{
			get
			{
				return LiningThickness;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					LiningThickness = val;
				}
				else if(value == null)
				{
					LiningThickness = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _ThresholdDepth
		{
			get
			{
				return ThresholdDepth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					ThresholdDepth = val;
				}
				else if(value == null)
				{
					ThresholdDepth = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _ThresholdThickness
		{
			get
			{
				return ThresholdThickness;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					ThresholdThickness = val;
				}
				else if(value == null)
				{
					ThresholdThickness = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _TransomThickness
		{
			get
			{
				return TransomThickness;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					TransomThickness = val;
				}
				else if(value == null)
				{
					TransomThickness = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _TransomOffset
		{
			get
			{
				return TransomOffset;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					TransomOffset = val;
				}
				else if(value == null)
				{
					TransomOffset = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _LiningOffset
		{
			get
			{
				return LiningOffset;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					LiningOffset = val;
				}
				else if(value == null)
				{
					LiningOffset = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _ThresholdOffset
		{
			get
			{
				return ThresholdOffset;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					ThresholdOffset = val;
				}
				else if(value == null)
				{
					ThresholdOffset = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _CasingThickness
		{
			get
			{
				return CasingThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					CasingThickness = val;
				}
				else if(value == null)
				{
					CasingThickness = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _CasingDepth
		{
			get
			{
				return CasingDepth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					CasingDepth = val;
				}
				else if(value == null)
				{
					CasingDepth = null;
				}
			}
		}
		public virtual Global.IfcShapeAspect? _ShapeAspectStyle
		{
			get
			{
				return ShapeAspectStyle;
			}
			set
			{
				if(value is IfcShapeAspect val)
				{
					ShapeAspectStyle = val;
				}
				else if(value == null)
				{
					ShapeAspectStyle = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _LiningToPanelOffsetX
		{
			get
			{
				return LiningToPanelOffsetX;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					LiningToPanelOffsetX = val;
				}
				else if(value == null)
				{
					LiningToPanelOffsetX = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _LiningToPanelOffsetY
		{
			get
			{
				return LiningToPanelOffsetY;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					LiningToPanelOffsetY = val;
				}
				else if(value == null)
				{
					LiningToPanelOffsetY = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDoorPanelProperties
	/// SUBTYPE OF (IfcPreDefinedPropertySet);
	/// PanelDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// PanelOperation : IfcDoorPanelOperationEnum;
	/// PanelWidth : OPTIONAL IfcNormalisedRatioMeasure;
	/// PanelPosition : IfcDoorPanelPositionEnum;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// WHERE
	/// ApplicableToType : (EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// AND
	/// (
	/// ('IFC4.IFCDOORTYPE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// OR
	/// ('IFC4.IFCDOORSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// );
	/// END_ENTITY;
	/// <summary>
	public class IfcDoorPanelProperties : IfcPreDefinedPropertySet, Global.IfcDoorPanelProperties
	{
		public virtual IfcPositiveLengthMeasure? PanelDepth { get; set; }
		public virtual IfcDoorPanelOperationEnum? PanelOperation { get; set; }
		public virtual IfcNormalisedRatioMeasure? PanelWidth { get; set; }
		public virtual IfcDoorPanelPositionEnum? PanelPosition { get; set; }
		public virtual IfcShapeAspect? ShapeAspectStyle { get; set; }
		public IfcDoorPanelProperties() : base()
		{
		}
		public IfcDoorPanelProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPositiveLengthMeasure? PanelDepth, IfcDoorPanelOperationEnum? PanelOperation, IfcNormalisedRatioMeasure? PanelWidth, IfcDoorPanelPositionEnum? PanelPosition, IfcShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.PanelDepth = PanelDepth;
			this.PanelOperation = PanelOperation;
			this.PanelWidth = PanelWidth;
			this.PanelPosition = PanelPosition;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				PanelDepth,
				PanelOperation,
				PanelWidth,
				PanelPosition,
				ShapeAspectStyle
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _PanelDepth
		{
			get
			{
				return PanelDepth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					PanelDepth = val;
				}
				else if(value == null)
				{
					PanelDepth = null;
				}
			}
		}
		public virtual Global.IfcDoorPanelOperationEnum? _PanelOperation
		{
			get
			{
				return PanelOperation;
			}
			set
			{
				if(value is IfcDoorPanelOperationEnum val)
				{
					PanelOperation = val;
				}
				else if(value == null)
				{
					PanelOperation = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _PanelWidth
		{
			get
			{
				return PanelWidth;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					PanelWidth = val;
				}
				else if(value == null)
				{
					PanelWidth = null;
				}
			}
		}
		public virtual Global.IfcDoorPanelPositionEnum? _PanelPosition
		{
			get
			{
				return PanelPosition;
			}
			set
			{
				if(value is IfcDoorPanelPositionEnum val)
				{
					PanelPosition = val;
				}
				else if(value == null)
				{
					PanelPosition = null;
				}
			}
		}
		public virtual Global.IfcShapeAspect? _ShapeAspectStyle
		{
			get
			{
				return ShapeAspectStyle;
			}
			set
			{
				if(value is IfcShapeAspect val)
				{
					ShapeAspectStyle = val;
				}
				else if(value == null)
				{
					ShapeAspectStyle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDoorStandardCase
	/// SUBTYPE OF (IfcDoor);
	/// END_ENTITY;
	/// <summary>
	public class IfcDoorStandardCase : IfcDoor, Global.IfcDoorStandardCase
	{
		public IfcDoorStandardCase() : base()
		{
		}
		public IfcDoorStandardCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPositiveLengthMeasure? OverallHeight, IfcPositiveLengthMeasure? OverallWidth, IfcDoorTypeEnum? PredefinedType, IfcDoorTypeOperationEnum? OperationType, IfcLabel? UserDefinedOperationType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, OperationType, UserDefinedOperationType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				OverallHeight,
				OverallWidth,
				PredefinedType,
				OperationType,
				UserDefinedOperationType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDoorStyle
	/// SUBTYPE OF (IfcTypeProduct);
	/// OperationType : IfcDoorStyleOperationEnum;
	/// ConstructionType : IfcDoorStyleConstructionEnum;
	/// ParameterTakesPrecedence : IfcBoolean;
	/// Sizeable : IfcBoolean;
	/// END_ENTITY;
	/// <summary>
	public class IfcDoorStyle : IfcTypeProduct, Global.IfcDoorStyle
	{
		public virtual IfcDoorStyleOperationEnum? OperationType { get; set; }
		public virtual IfcDoorStyleConstructionEnum? ConstructionType { get; set; }
		public virtual IfcBoolean? ParameterTakesPrecedence { get; set; }
		public virtual IfcBoolean? Sizeable { get; set; }
		public IfcDoorStyle() : base()
		{
		}
		public IfcDoorStyle(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcDoorStyleOperationEnum? OperationType, IfcDoorStyleConstructionEnum? ConstructionType, IfcBoolean? ParameterTakesPrecedence, IfcBoolean? Sizeable) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag)
		{
			this.OperationType = OperationType;
			this.ConstructionType = ConstructionType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				OperationType,
				ConstructionType,
				ParameterTakesPrecedence,
				Sizeable
			};
		}
		public virtual Global.IfcDoorStyleOperationEnum? _OperationType
		{
			get
			{
				return OperationType;
			}
			set
			{
				if(value is IfcDoorStyleOperationEnum val)
				{
					OperationType = val;
				}
				else if(value == null)
				{
					OperationType = null;
				}
			}
		}
		public virtual Global.IfcDoorStyleConstructionEnum? _ConstructionType
		{
			get
			{
				return ConstructionType;
			}
			set
			{
				if(value is IfcDoorStyleConstructionEnum val)
				{
					ConstructionType = val;
				}
				else if(value == null)
				{
					ConstructionType = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _ParameterTakesPrecedence
		{
			get
			{
				return ParameterTakesPrecedence;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					ParameterTakesPrecedence = val;
				}
				else if(value == null)
				{
					ParameterTakesPrecedence = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _Sizeable
		{
			get
			{
				return Sizeable;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					Sizeable = val;
				}
				else if(value == null)
				{
					Sizeable = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDoorType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcDoorTypeEnum;
	/// OperationType : IfcDoorTypeOperationEnum;
	/// ParameterTakesPrecedence : OPTIONAL IfcBoolean;
	/// UserDefinedOperationType : OPTIONAL IfcLabel;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcDoorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDoorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDoorType : IfcBuildingElementType, Global.IfcDoorType
	{
		public virtual IfcDoorTypeEnum? PredefinedType { get; set; }
		public virtual IfcDoorTypeOperationEnum? OperationType { get; set; }
		public virtual IfcBoolean? ParameterTakesPrecedence { get; set; }
		public virtual IfcLabel? UserDefinedOperationType { get; set; }
		public IfcDoorType() : base()
		{
		}
		public IfcDoorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDoorTypeEnum? PredefinedType, IfcDoorTypeOperationEnum? OperationType, IfcBoolean? ParameterTakesPrecedence, IfcLabel? UserDefinedOperationType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
			this.OperationType = OperationType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.UserDefinedOperationType = UserDefinedOperationType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType,
				OperationType,
				ParameterTakesPrecedence,
				UserDefinedOperationType
			};
		}
		public virtual Global.IfcDoorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDoorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcDoorTypeOperationEnum? _OperationType
		{
			get
			{
				return OperationType;
			}
			set
			{
				if(value is IfcDoorTypeOperationEnum val)
				{
					OperationType = val;
				}
				else if(value == null)
				{
					OperationType = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _ParameterTakesPrecedence
		{
			get
			{
				return ParameterTakesPrecedence;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					ParameterTakesPrecedence = val;
				}
				else if(value == null)
				{
					ParameterTakesPrecedence = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedOperationType
		{
			get
			{
				return UserDefinedOperationType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedOperationType = val;
				}
				else if(value == null)
				{
					UserDefinedOperationType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDraughtingPreDefinedColour
	/// SUBTYPE OF (IfcPreDefinedColour);
	/// WHERE
	/// PreDefinedColourNames : SELF\IfcPreDefinedItem.Name IN ['black','red','green','blue','yellow',
	/// 'magenta','cyan','white','by layer'];
	/// END_ENTITY;
	/// <summary>
	public class IfcDraughtingPreDefinedColour : IfcPreDefinedColour, Global.IfcDraughtingPreDefinedColour
	{
		public IfcDraughtingPreDefinedColour() : base()
		{
		}
		public IfcDraughtingPreDefinedColour(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDraughtingPreDefinedCurveFont
	/// SUBTYPE OF (IfcPreDefinedCurveFont);
	/// WHERE
	/// PreDefinedCurveFontNames : SELF\IfcPredefinedItem.Name IN
	/// ['continuous',
	/// 'chain',
	/// 'chain double dash',
	/// 'dashed',
	/// 'dotted',
	/// 'by layer'];
	/// END_ENTITY;
	/// <summary>
	public class IfcDraughtingPreDefinedCurveFont : IfcPreDefinedCurveFont, Global.IfcDraughtingPreDefinedCurveFont
	{
		public IfcDraughtingPreDefinedCurveFont() : base()
		{
		}
		public IfcDraughtingPreDefinedCurveFont(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDuctFitting
	/// SUBTYPE OF (IfcFlowFitting);
	/// PredefinedType : OPTIONAL IfcDuctFittingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcDuctFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctFittingTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCDUCTFITTINGTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDuctFitting : IfcFlowFitting, Global.IfcDuctFitting
	{
		public virtual IfcDuctFittingTypeEnum? PredefinedType { get; set; }
		public IfcDuctFitting() : base()
		{
		}
		public IfcDuctFitting(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcDuctFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcDuctFittingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDuctFittingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDuctFittingType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcDuctFittingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcDuctFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctFittingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDuctFittingType : IfcFlowFittingType, Global.IfcDuctFittingType
	{
		public virtual IfcDuctFittingTypeEnum? PredefinedType { get; set; }
		public IfcDuctFittingType() : base()
		{
		}
		public IfcDuctFittingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDuctFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcDuctFittingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDuctFittingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDuctSegment
	/// SUBTYPE OF (IfcFlowSegment);
	/// PredefinedType : OPTIONAL IfcDuctSegmentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcDuctSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctSegmentTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCDUCTSEGMENTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDuctSegment : IfcFlowSegment, Global.IfcDuctSegment
	{
		public virtual IfcDuctSegmentTypeEnum? PredefinedType { get; set; }
		public IfcDuctSegment() : base()
		{
		}
		public IfcDuctSegment(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcDuctSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcDuctSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDuctSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDuctSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcDuctSegmentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcDuctSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctSegmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDuctSegmentType : IfcFlowSegmentType, Global.IfcDuctSegmentType
	{
		public virtual IfcDuctSegmentTypeEnum? PredefinedType { get; set; }
		public IfcDuctSegmentType() : base()
		{
		}
		public IfcDuctSegmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDuctSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcDuctSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDuctSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDuctSilencer
	/// SUBTYPE OF (IfcFlowTreatmentDevice);
	/// PredefinedType : OPTIONAL IfcDuctSilencerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcDuctSilencerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctSilencerTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCDUCTSILENCERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDuctSilencer : IfcFlowTreatmentDevice, Global.IfcDuctSilencer
	{
		public virtual IfcDuctSilencerTypeEnum? PredefinedType { get; set; }
		public IfcDuctSilencer() : base()
		{
		}
		public IfcDuctSilencer(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcDuctSilencerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcDuctSilencerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDuctSilencerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDuctSilencerType
	/// SUBTYPE OF (IfcFlowTreatmentDeviceType);
	/// PredefinedType : IfcDuctSilencerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcDuctSilencerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctSilencerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDuctSilencerType : IfcFlowTreatmentDeviceType, Global.IfcDuctSilencerType
	{
		public virtual IfcDuctSilencerTypeEnum? PredefinedType { get; set; }
		public IfcDuctSilencerType() : base()
		{
		}
		public IfcDuctSilencerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDuctSilencerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcDuctSilencerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcDuctSilencerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEdge
	/// SUPERTYPE OF (ONEOF
	/// (IfcEdgeCurve
	/// ,IfcOrientedEdge
	/// ,IfcSubedge))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// EdgeStart : IfcVertex;
	/// EdgeEnd : IfcVertex;
	/// END_ENTITY;
	/// <summary>
	public class IfcEdge : IfcTopologicalRepresentationItem, Global.IfcEdge
	{
		public virtual IfcVertex? EdgeStart { get; set; }
		public virtual IfcVertex? EdgeEnd { get; set; }
		public IfcEdge() : base()
		{
		}
		public IfcEdge(IfcVertex? EdgeStart, IfcVertex? EdgeEnd) : base ()
		{
			this.EdgeStart = EdgeStart;
			this.EdgeEnd = EdgeEnd;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeStart,
				EdgeEnd
			};
		}
		public virtual Global.IfcVertex? _EdgeStart
		{
			get
			{
				return EdgeStart;
			}
			set
			{
				if(value is IfcVertex val)
				{
					EdgeStart = val;
				}
				else if(value == null)
				{
					EdgeStart = null;
				}
			}
		}
		public virtual Global.IfcVertex? _EdgeEnd
		{
			get
			{
				return EdgeEnd;
			}
			set
			{
				if(value is IfcVertex val)
				{
					EdgeEnd = val;
				}
				else if(value == null)
				{
					EdgeEnd = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEdgeCurve
	/// SUBTYPE OF (IfcEdge);
	/// EdgeGeometry : IfcCurve;
	/// SameSense : IfcBoolean;
	/// END_ENTITY;
	/// <summary>
	public class IfcEdgeCurve : IfcEdge, IfcCurveOrEdgeCurve, Global.IfcEdgeCurve
	{
		public virtual IfcCurve? EdgeGeometry { get; set; }
		public virtual IfcBoolean? SameSense { get; set; }
		public IfcEdgeCurve() : base()
		{
		}
		public IfcEdgeCurve(IfcVertex? EdgeStart, IfcVertex? EdgeEnd, IfcCurve? EdgeGeometry, IfcBoolean? SameSense) : base (EdgeStart, EdgeEnd)
		{
			this.EdgeGeometry = EdgeGeometry;
			this.SameSense = SameSense;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeStart,
				EdgeEnd,
				EdgeGeometry,
				SameSense
			};
		}
		public virtual Global.IfcCurve? _EdgeGeometry
		{
			get
			{
				return EdgeGeometry;
			}
			set
			{
				if(value is IfcCurve val)
				{
					EdgeGeometry = val;
				}
				else if(value == null)
				{
					EdgeGeometry = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _SameSense
		{
			get
			{
				return SameSense;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					SameSense = val;
				}
				else if(value == null)
				{
					SameSense = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEdgeLoop
	/// SUBTYPE OF (IfcLoop);
	/// EdgeList : LIST [1:?] OF IfcOrientedEdge;
	/// DERIVE
	/// Ne : IfcInteger := SIZEOF(EdgeList);
	/// WHERE
	/// IsClosed : (EdgeList[1].EdgeStart) :=: (EdgeList[Ne].EdgeEnd);
	/// IsContinuous : IfcLoopHeadToTail(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IfcEdgeLoop : IfcLoop, Global.IfcEdgeLoop
	{
		public virtual List<IfcOrientedEdge>? EdgeList { get; set; }
		//DERIVE
		public virtual IfcInteger? Ne {get {return null;}}
		public IfcEdgeLoop() : base()
		{
		}
		public IfcEdgeLoop(List<IfcOrientedEdge>? EdgeList) : base ()
		{
			this.EdgeList = EdgeList;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeList
			};
		}
		public virtual List<Global.IfcOrientedEdge>? _EdgeList
		{
			get
			{
				if(EdgeList != null)
				{
					List<Global.IfcOrientedEdge>? items = new List<Global.IfcOrientedEdge>();
					foreach (IfcOrientedEdge item in EdgeList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					EdgeList = null;
				}
				else
				{
					EdgeList = new List<IfcOrientedEdge>();
					foreach(var val in value)
					{
						if(val is IfcOrientedEdge v)
						{
							EdgeList.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcInteger? _Ne
		{
			get
			{
				return Ne;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricAppliance
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcElectricApplianceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcElectricApplianceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricApplianceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCELECTRICAPPLIANCETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricAppliance : IfcFlowTerminal, Global.IfcElectricAppliance
	{
		public virtual IfcElectricApplianceTypeEnum? PredefinedType { get; set; }
		public IfcElectricAppliance() : base()
		{
		}
		public IfcElectricAppliance(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcElectricApplianceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricApplianceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricApplianceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricApplianceType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcElectricApplianceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcElectricApplianceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricApplianceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricApplianceType : IfcFlowTerminalType, Global.IfcElectricApplianceType
	{
		public virtual IfcElectricApplianceTypeEnum? PredefinedType { get; set; }
		public IfcElectricApplianceType() : base()
		{
		}
		public IfcElectricApplianceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricApplianceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricApplianceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricApplianceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricDistributionBoard
	/// SUBTYPE OF (IfcFlowController);
	/// PredefinedType : OPTIONAL IfcElectricDistributionBoardTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcElectricDistributionBoardTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricDistributionBoardTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCELECTRICDISTRIBUTIONBOARDTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricDistributionBoard : IfcFlowController, Global.IfcElectricDistributionBoard
	{
		public virtual IfcElectricDistributionBoardTypeEnum? PredefinedType { get; set; }
		public IfcElectricDistributionBoard() : base()
		{
		}
		public IfcElectricDistributionBoard(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcElectricDistributionBoardTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricDistributionBoardTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricDistributionBoardTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricDistributionBoardType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcElectricDistributionBoardTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcElectricDistributionBoardTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricDistributionBoardTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricDistributionBoardType : IfcFlowControllerType, Global.IfcElectricDistributionBoardType
	{
		public virtual IfcElectricDistributionBoardTypeEnum? PredefinedType { get; set; }
		public IfcElectricDistributionBoardType() : base()
		{
		}
		public IfcElectricDistributionBoardType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricDistributionBoardTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricDistributionBoardTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricDistributionBoardTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricFlowStorageDevice
	/// SUBTYPE OF (IfcFlowStorageDevice);
	/// PredefinedType : OPTIONAL IfcElectricFlowStorageDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcElectricFlowStorageDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricFlowStorageDeviceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCELECTRICFLOWSTORAGEDEVICETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricFlowStorageDevice : IfcFlowStorageDevice, Global.IfcElectricFlowStorageDevice
	{
		public virtual IfcElectricFlowStorageDeviceTypeEnum? PredefinedType { get; set; }
		public IfcElectricFlowStorageDevice() : base()
		{
		}
		public IfcElectricFlowStorageDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcElectricFlowStorageDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricFlowStorageDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricFlowStorageDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricFlowStorageDeviceType
	/// SUBTYPE OF (IfcFlowStorageDeviceType);
	/// PredefinedType : IfcElectricFlowStorageDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcElectricFlowStorageDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricFlowStorageDeviceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricFlowStorageDeviceType : IfcFlowStorageDeviceType, Global.IfcElectricFlowStorageDeviceType
	{
		public virtual IfcElectricFlowStorageDeviceTypeEnum? PredefinedType { get; set; }
		public IfcElectricFlowStorageDeviceType() : base()
		{
		}
		public IfcElectricFlowStorageDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricFlowStorageDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricFlowStorageDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricFlowStorageDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricGenerator
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcElectricGeneratorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcElectricGeneratorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricGeneratorTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCELECTRICGENERATORTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricGenerator : IfcEnergyConversionDevice, Global.IfcElectricGenerator
	{
		public virtual IfcElectricGeneratorTypeEnum? PredefinedType { get; set; }
		public IfcElectricGenerator() : base()
		{
		}
		public IfcElectricGenerator(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcElectricGeneratorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricGeneratorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricGeneratorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricGeneratorType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcElectricGeneratorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcElectricGeneratorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricGeneratorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricGeneratorType : IfcEnergyConversionDeviceType, Global.IfcElectricGeneratorType
	{
		public virtual IfcElectricGeneratorTypeEnum? PredefinedType { get; set; }
		public IfcElectricGeneratorType() : base()
		{
		}
		public IfcElectricGeneratorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricGeneratorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricGeneratorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricGeneratorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricMotor
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcElectricMotorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcElectricMotorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricMotorTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCELECTRICMOTORTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricMotor : IfcEnergyConversionDevice, Global.IfcElectricMotor
	{
		public virtual IfcElectricMotorTypeEnum? PredefinedType { get; set; }
		public IfcElectricMotor() : base()
		{
		}
		public IfcElectricMotor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcElectricMotorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricMotorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricMotorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricMotorType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcElectricMotorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcElectricMotorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricMotorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricMotorType : IfcEnergyConversionDeviceType, Global.IfcElectricMotorType
	{
		public virtual IfcElectricMotorTypeEnum? PredefinedType { get; set; }
		public IfcElectricMotorType() : base()
		{
		}
		public IfcElectricMotorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricMotorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricMotorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricMotorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricTimeControl
	/// SUBTYPE OF (IfcFlowController);
	/// PredefinedType : OPTIONAL IfcElectricTimeControlTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcElectricTimeControlTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricTimeControlTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCELECTRICTIMECONTROLTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricTimeControl : IfcFlowController, Global.IfcElectricTimeControl
	{
		public virtual IfcElectricTimeControlTypeEnum? PredefinedType { get; set; }
		public IfcElectricTimeControl() : base()
		{
		}
		public IfcElectricTimeControl(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcElectricTimeControlTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricTimeControlTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricTimeControlTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricTimeControlType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcElectricTimeControlTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcElectricTimeControlTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElectricTimeControlTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricTimeControlType : IfcFlowControllerType, Global.IfcElectricTimeControlType
	{
		public virtual IfcElectricTimeControlTypeEnum? PredefinedType { get; set; }
		public IfcElectricTimeControlType() : base()
		{
		}
		public IfcElectricTimeControlType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricTimeControlTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricTimeControlTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElectricTimeControlTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuildingElement
	/// ,IfcCivilElement
	/// ,IfcDistributionElement
	/// ,IfcElementAssembly
	/// ,IfcElementComponent
	/// ,IfcFeatureElement
	/// ,IfcFurnishingElement
	/// ,IfcGeographicElement
	/// ,IfcTransportElement
	/// ,IfcVirtualElement))
	/// SUBTYPE OF (IfcProduct);
	/// Tag : OPTIONAL IfcIdentifier;
	/// INVERSE
	/// FillsVoids : SET [0:1] OF IfcRelFillsElement FOR RelatedBuildingElement;
	/// ConnectedTo : SET [0:?] OF IfcRelConnectsElements FOR RelatingElement;
	/// IsInterferedByElements : SET [0:?] OF IfcRelInterferesElements FOR RelatedElement;
	/// InterferesElements : SET [0:?] OF IfcRelInterferesElements FOR RelatingElement;
	/// HasProjections : SET [0:?] OF IfcRelProjectsElement FOR RelatingElement;
	/// ReferencedInStructures : SET [0:?] OF IfcRelReferencedInSpatialStructure FOR RelatedElements;
	/// HasOpenings : SET [0:?] OF IfcRelVoidsElement FOR RelatingBuildingElement;
	/// IsConnectionRealization : SET [0:?] OF IfcRelConnectsWithRealizingElements FOR RealizingElements;
	/// ProvidesBoundaries : SET [0:?] OF IfcRelSpaceBoundary FOR RelatedBuildingElement;
	/// ConnectedFrom : SET [0:?] OF IfcRelConnectsElements FOR RelatedElement;
	/// ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
	/// HasCoverings : SET [0:?] OF IfcRelCoversBldgElements FOR RelatingBuildingElement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcElement : IfcProduct, IfcStructuralActivityAssignmentSelect, Global.IfcElement
	{
		public virtual IfcIdentifier? Tag { get; set; }
		public List<IfcRelFillsElement>? FillsVoids {get{return Model?.GetItems<IfcRelFillsElement>().Where(x => x.RelatedBuildingElement != null && x.RelatedBuildingElement == this).ToList();}}
		public List<IfcRelConnectsElements>? ConnectedTo {get{return Model?.GetItems<IfcRelConnectsElements>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList();}}
		public List<IfcRelInterferesElements>? IsInterferedByElements {get{return Model?.GetItems<IfcRelInterferesElements>().Where(x => x.RelatedElement != null && x.RelatedElement == this).ToList();}}
		public List<IfcRelInterferesElements>? InterferesElements {get{return Model?.GetItems<IfcRelInterferesElements>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList();}}
		public List<IfcRelProjectsElement>? HasProjections {get{return Model?.GetItems<IfcRelProjectsElement>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList();}}
		public List<IfcRelReferencedInSpatialStructure>? ReferencedInStructures {get{return Model?.GetItems<IfcRelReferencedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList();}}
		public List<IfcRelVoidsElement>? HasOpenings {get{return Model?.GetItems<IfcRelVoidsElement>().Where(x => x.RelatingBuildingElement != null && x.RelatingBuildingElement == this).ToList();}}
		public List<IfcRelConnectsWithRealizingElements>? IsConnectionRealization {get{return Model?.GetItems<IfcRelConnectsWithRealizingElements>().Where(x => x.RealizingElements != null && x.RealizingElements.Contains(this)).ToList();}}
		public List<IfcRelSpaceBoundary>? ProvidesBoundaries {get{return Model?.GetItems<IfcRelSpaceBoundary>().Where(x => x.RelatedBuildingElement != null && x.RelatedBuildingElement == this).ToList();}}
		public List<IfcRelConnectsElements>? ConnectedFrom {get{return Model?.GetItems<IfcRelConnectsElements>().Where(x => x.RelatedElement != null && x.RelatedElement == this).ToList();}}
		public List<IfcRelContainedInSpatialStructure>? ContainedInStructure {get{return Model?.GetItems<IfcRelContainedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList();}}
		public List<IfcRelCoversBldgElements>? HasCoverings {get{return Model?.GetItems<IfcRelCoversBldgElements>().Where(x => x.RelatingBuildingElement != null && x.RelatingBuildingElement == this).ToList();}}
		public IfcElement() : base()
		{
		}
		public IfcElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.Tag = Tag;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
		public virtual Global.IfcIdentifier? _Tag
		{
			get
			{
				return Tag;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Tag = val;
				}
				else if(value == null)
				{
					Tag = null;
				}
			}
		}
		public virtual List<Global.IfcRelFillsElement>? _FillsVoids
		{
			get
			{
				if(FillsVoids != null)
				{
					List<Global.IfcRelFillsElement>? items = new List<Global.IfcRelFillsElement>();
					foreach (IfcRelFillsElement item in FillsVoids)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelConnectsElements>? _ConnectedTo
		{
			get
			{
				if(ConnectedTo != null)
				{
					List<Global.IfcRelConnectsElements>? items = new List<Global.IfcRelConnectsElements>();
					foreach (IfcRelConnectsElements item in ConnectedTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelInterferesElements>? _IsInterferedByElements
		{
			get
			{
				if(IsInterferedByElements != null)
				{
					List<Global.IfcRelInterferesElements>? items = new List<Global.IfcRelInterferesElements>();
					foreach (IfcRelInterferesElements item in IsInterferedByElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelInterferesElements>? _InterferesElements
		{
			get
			{
				if(InterferesElements != null)
				{
					List<Global.IfcRelInterferesElements>? items = new List<Global.IfcRelInterferesElements>();
					foreach (IfcRelInterferesElements item in InterferesElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelProjectsElement>? _HasProjections
		{
			get
			{
				if(HasProjections != null)
				{
					List<Global.IfcRelProjectsElement>? items = new List<Global.IfcRelProjectsElement>();
					foreach (IfcRelProjectsElement item in HasProjections)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelReferencedInSpatialStructure>? _ReferencedInStructures
		{
			get
			{
				if(ReferencedInStructures != null)
				{
					List<Global.IfcRelReferencedInSpatialStructure>? items = new List<Global.IfcRelReferencedInSpatialStructure>();
					foreach (IfcRelReferencedInSpatialStructure item in ReferencedInStructures)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelVoidsElement>? _HasOpenings
		{
			get
			{
				if(HasOpenings != null)
				{
					List<Global.IfcRelVoidsElement>? items = new List<Global.IfcRelVoidsElement>();
					foreach (IfcRelVoidsElement item in HasOpenings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelConnectsWithRealizingElements>? _IsConnectionRealization
		{
			get
			{
				if(IsConnectionRealization != null)
				{
					List<Global.IfcRelConnectsWithRealizingElements>? items = new List<Global.IfcRelConnectsWithRealizingElements>();
					foreach (IfcRelConnectsWithRealizingElements item in IsConnectionRealization)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelSpaceBoundary>? _ProvidesBoundaries
		{
			get
			{
				if(ProvidesBoundaries != null)
				{
					List<Global.IfcRelSpaceBoundary>? items = new List<Global.IfcRelSpaceBoundary>();
					foreach (IfcRelSpaceBoundary item in ProvidesBoundaries)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelConnectsElements>? _ConnectedFrom
		{
			get
			{
				if(ConnectedFrom != null)
				{
					List<Global.IfcRelConnectsElements>? items = new List<Global.IfcRelConnectsElements>();
					foreach (IfcRelConnectsElements item in ConnectedFrom)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelContainedInSpatialStructure>? _ContainedInStructure
		{
			get
			{
				if(ContainedInStructure != null)
				{
					List<Global.IfcRelContainedInSpatialStructure>? items = new List<Global.IfcRelContainedInSpatialStructure>();
					foreach (IfcRelContainedInSpatialStructure item in ContainedInStructure)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelCoversBldgElements>? _HasCoverings
		{
			get
			{
				if(HasCoverings != null)
				{
					List<Global.IfcRelCoversBldgElements>? items = new List<Global.IfcRelCoversBldgElements>();
					foreach (IfcRelCoversBldgElements item in HasCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElementAssembly
	/// SUBTYPE OF (IfcElement);
	/// AssemblyPlace : OPTIONAL IfcAssemblyPlaceEnum;
	/// PredefinedType : OPTIONAL IfcElementAssemblyTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcElementAssemblyTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElementAssemblyTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCELEMENTASSEMBLYTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElementAssembly : IfcElement, Global.IfcElementAssembly
	{
		public virtual IfcAssemblyPlaceEnum? AssemblyPlace { get; set; }
		public virtual IfcElementAssemblyTypeEnum? PredefinedType { get; set; }
		public IfcElementAssembly() : base()
		{
		}
		public IfcElementAssembly(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcAssemblyPlaceEnum? AssemblyPlace, IfcElementAssemblyTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.AssemblyPlace = AssemblyPlace;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				AssemblyPlace,
				PredefinedType
			};
		}
		public virtual Global.IfcAssemblyPlaceEnum? _AssemblyPlace
		{
			get
			{
				return AssemblyPlace;
			}
			set
			{
				if(value is IfcAssemblyPlaceEnum val)
				{
					AssemblyPlace = val;
				}
				else if(value == null)
				{
					AssemblyPlace = null;
				}
			}
		}
		public virtual Global.IfcElementAssemblyTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElementAssemblyTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElementAssemblyType
	/// SUBTYPE OF (IfcElementType);
	/// PredefinedType : IfcElementAssemblyTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcElementAssemblyTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcElementAssemblyTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElementAssemblyType : IfcElementType, Global.IfcElementAssemblyType
	{
		public virtual IfcElementAssemblyTypeEnum? PredefinedType { get; set; }
		public IfcElementAssemblyType() : base()
		{
		}
		public IfcElementAssemblyType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElementAssemblyTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElementAssemblyTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcElementAssemblyTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElementComponent
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuildingElementPart
	/// ,IfcDiscreteAccessory
	/// ,IfcFastener
	/// ,IfcMechanicalFastener
	/// ,IfcReinforcingElement
	/// ,IfcVibrationIsolator))
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcElementComponent : IfcElement, Global.IfcElementComponent
	{
		public IfcElementComponent() : base()
		{
		}
		public IfcElementComponent(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcElementComponentType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuildingElementPartType
	/// ,IfcDiscreteAccessoryType
	/// ,IfcFastenerType
	/// ,IfcMechanicalFastenerType
	/// ,IfcReinforcingElementType
	/// ,IfcVibrationIsolatorType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcElementComponentType : IfcElementType, Global.IfcElementComponentType
	{
		public IfcElementComponentType() : base()
		{
		}
		public IfcElementComponentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcElementQuantity
	/// SUBTYPE OF (IfcQuantitySet);
	/// MethodOfMeasurement : OPTIONAL IfcLabel;
	/// Quantities : SET [1:?] OF IfcPhysicalQuantity;
	/// WHERE
	/// UniqueQuantityNames : IfcUniqueQuantityNames(Quantities);
	/// END_ENTITY;
	/// <summary>
	public class IfcElementQuantity : IfcQuantitySet, Global.IfcElementQuantity
	{
		public virtual IfcLabel? MethodOfMeasurement { get; set; }
		public virtual List<IfcPhysicalQuantity>? Quantities { get; set; }
		public IfcElementQuantity() : base()
		{
		}
		public IfcElementQuantity(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? MethodOfMeasurement, List<IfcPhysicalQuantity>? Quantities) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.MethodOfMeasurement = MethodOfMeasurement;
			this.Quantities = Quantities;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				MethodOfMeasurement,
				Quantities
			};
		}
		public virtual Global.IfcLabel? _MethodOfMeasurement
		{
			get
			{
				return MethodOfMeasurement;
			}
			set
			{
				if(value is IfcLabel val)
				{
					MethodOfMeasurement = val;
				}
				else if(value == null)
				{
					MethodOfMeasurement = null;
				}
			}
		}
		public virtual List<Global.IfcPhysicalQuantity>? _Quantities
		{
			get
			{
				if(Quantities != null)
				{
					List<Global.IfcPhysicalQuantity>? items = new List<Global.IfcPhysicalQuantity>();
					foreach (IfcPhysicalQuantity item in Quantities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Quantities = null;
				}
				else
				{
					Quantities = new List<IfcPhysicalQuantity>();
					foreach(var val in value)
					{
						if(val is IfcPhysicalQuantity v)
						{
							Quantities.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuildingElementType
	/// ,IfcCivilElementType
	/// ,IfcDistributionElementType
	/// ,IfcElementAssemblyType
	/// ,IfcElementComponentType
	/// ,IfcFurnishingElementType
	/// ,IfcGeographicElementType
	/// ,IfcTransportElementType))
	/// SUBTYPE OF (IfcTypeProduct);
	/// ElementType : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcElementType : IfcTypeProduct, Global.IfcElementType
	{
		public virtual IfcLabel? ElementType { get; set; }
		public IfcElementType() : base()
		{
		}
		public IfcElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag)
		{
			this.ElementType = ElementType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
		public virtual Global.IfcLabel? _ElementType
		{
			get
			{
				return ElementType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ElementType = val;
				}
				else if(value == null)
				{
					ElementType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElementarySurface
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCylindricalSurface
	/// ,IfcPlane
	/// ,IfcSphericalSurface
	/// ,IfcToroidalSurface))
	/// SUBTYPE OF (IfcSurface);
	/// Position : IfcAxis2Placement3D;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcElementarySurface : IfcSurface, Global.IfcElementarySurface
	{
		public virtual IfcAxis2Placement3D? Position { get; set; }
		public IfcElementarySurface() : base()
		{
		}
		public IfcElementarySurface(IfcAxis2Placement3D? Position) : base ()
		{
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position
			};
		}
		public virtual Global.IfcAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IfcAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEllipse
	/// SUBTYPE OF (IfcConic);
	/// SemiAxis1 : IfcPositiveLengthMeasure;
	/// SemiAxis2 : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcEllipse : IfcConic, Global.IfcEllipse
	{
		public virtual IfcPositiveLengthMeasure? SemiAxis1 { get; set; }
		public virtual IfcPositiveLengthMeasure? SemiAxis2 { get; set; }
		public IfcEllipse() : base()
		{
		}
		public IfcEllipse(IfcAxis2Placement? Position, IfcPositiveLengthMeasure? SemiAxis1, IfcPositiveLengthMeasure? SemiAxis2) : base (Position)
		{
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				SemiAxis1,
				SemiAxis2
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _SemiAxis1
		{
			get
			{
				return SemiAxis1;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					SemiAxis1 = val;
				}
				else if(value == null)
				{
					SemiAxis1 = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _SemiAxis2
		{
			get
			{
				return SemiAxis2;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					SemiAxis2 = val;
				}
				else if(value == null)
				{
					SemiAxis2 = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEllipseProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// SemiAxis1 : IfcPositiveLengthMeasure;
	/// SemiAxis2 : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcEllipseProfileDef : IfcParameterizedProfileDef, Global.IfcEllipseProfileDef
	{
		public virtual IfcPositiveLengthMeasure? SemiAxis1 { get; set; }
		public virtual IfcPositiveLengthMeasure? SemiAxis2 { get; set; }
		public IfcEllipseProfileDef() : base()
		{
		}
		public IfcEllipseProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? SemiAxis1, IfcPositiveLengthMeasure? SemiAxis2) : base (ProfileType, ProfileName, Position)
		{
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				SemiAxis1,
				SemiAxis2
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _SemiAxis1
		{
			get
			{
				return SemiAxis1;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					SemiAxis1 = val;
				}
				else if(value == null)
				{
					SemiAxis1 = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _SemiAxis2
		{
			get
			{
				return SemiAxis2;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					SemiAxis2 = val;
				}
				else if(value == null)
				{
					SemiAxis2 = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEnergyConversionDevice
	/// SUPERTYPE OF (ONEOF
	/// (IfcAirToAirHeatRecovery
	/// ,IfcBoiler
	/// ,IfcBurner
	/// ,IfcChiller
	/// ,IfcCoil
	/// ,IfcCondenser
	/// ,IfcCooledBeam
	/// ,IfcCoolingTower
	/// ,IfcElectricGenerator
	/// ,IfcElectricMotor
	/// ,IfcEngine
	/// ,IfcEvaporativeCooler
	/// ,IfcEvaporator
	/// ,IfcHeatExchanger
	/// ,IfcHumidifier
	/// ,IfcMotorConnection
	/// ,IfcSolarDevice
	/// ,IfcTransformer
	/// ,IfcTubeBundle
	/// ,IfcUnitaryEquipment))
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcEnergyConversionDevice : IfcDistributionFlowElement, Global.IfcEnergyConversionDevice
	{
		public IfcEnergyConversionDevice() : base()
		{
		}
		public IfcEnergyConversionDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcEnergyConversionDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAirToAirHeatRecoveryType
	/// ,IfcBoilerType
	/// ,IfcBurnerType
	/// ,IfcChillerType
	/// ,IfcCoilType
	/// ,IfcCondenserType
	/// ,IfcCooledBeamType
	/// ,IfcCoolingTowerType
	/// ,IfcElectricGeneratorType
	/// ,IfcElectricMotorType
	/// ,IfcEngineType
	/// ,IfcEvaporativeCoolerType
	/// ,IfcEvaporatorType
	/// ,IfcHeatExchangerType
	/// ,IfcHumidifierType
	/// ,IfcMotorConnectionType
	/// ,IfcSolarDeviceType
	/// ,IfcTransformerType
	/// ,IfcTubeBundleType
	/// ,IfcUnitaryEquipmentType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcEnergyConversionDeviceType : IfcDistributionFlowElementType, Global.IfcEnergyConversionDeviceType
	{
		public IfcEnergyConversionDeviceType() : base()
		{
		}
		public IfcEnergyConversionDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcEngine
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcEngineTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcEngineTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcEngineTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCENGINETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcEngine : IfcEnergyConversionDevice, Global.IfcEngine
	{
		public virtual IfcEngineTypeEnum? PredefinedType { get; set; }
		public IfcEngine() : base()
		{
		}
		public IfcEngine(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcEngineTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcEngineTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcEngineTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEngineType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcEngineTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcEngineTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcEngineTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcEngineType : IfcEnergyConversionDeviceType, Global.IfcEngineType
	{
		public virtual IfcEngineTypeEnum? PredefinedType { get; set; }
		public IfcEngineType() : base()
		{
		}
		public IfcEngineType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcEngineTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcEngineTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcEngineTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEvaporativeCooler
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcEvaporativeCoolerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcEvaporativeCoolerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcEvaporativeCoolerTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCEVAPORATIVECOOLERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcEvaporativeCooler : IfcEnergyConversionDevice, Global.IfcEvaporativeCooler
	{
		public virtual IfcEvaporativeCoolerTypeEnum? PredefinedType { get; set; }
		public IfcEvaporativeCooler() : base()
		{
		}
		public IfcEvaporativeCooler(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcEvaporativeCoolerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcEvaporativeCoolerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcEvaporativeCoolerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEvaporativeCoolerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcEvaporativeCoolerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcEvaporativeCoolerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcEvaporativeCoolerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcEvaporativeCoolerType : IfcEnergyConversionDeviceType, Global.IfcEvaporativeCoolerType
	{
		public virtual IfcEvaporativeCoolerTypeEnum? PredefinedType { get; set; }
		public IfcEvaporativeCoolerType() : base()
		{
		}
		public IfcEvaporativeCoolerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcEvaporativeCoolerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcEvaporativeCoolerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcEvaporativeCoolerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEvaporator
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcEvaporatorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcEvaporatorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcEvaporatorTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCEVAPORATORTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcEvaporator : IfcEnergyConversionDevice, Global.IfcEvaporator
	{
		public virtual IfcEvaporatorTypeEnum? PredefinedType { get; set; }
		public IfcEvaporator() : base()
		{
		}
		public IfcEvaporator(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcEvaporatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcEvaporatorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcEvaporatorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEvaporatorType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcEvaporatorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcEvaporatorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcEvaporatorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcEvaporatorType : IfcEnergyConversionDeviceType, Global.IfcEvaporatorType
	{
		public virtual IfcEvaporatorTypeEnum? PredefinedType { get; set; }
		public IfcEvaporatorType() : base()
		{
		}
		public IfcEvaporatorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcEvaporatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcEvaporatorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcEvaporatorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEvent
	/// SUBTYPE OF (IfcProcess);
	/// PredefinedType : OPTIONAL IfcEventTypeEnum;
	/// EventTriggerType : OPTIONAL IfcEventTriggerTypeEnum;
	/// UserDefinedEventTriggerType : OPTIONAL IfcLabel;
	/// EventOccurenceTime : OPTIONAL IfcEventTime;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR (PredefinedType <> IfcEventTypeEnum.USERDEFINED) OR ((PredefinedType = IfcEventTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : NOT(EXISTS(EventTriggerType)) OR (EventTriggerType <> IfcEventTriggerTypeEnum.USERDEFINED) OR ((EventTriggerType = IfcEventTriggerTypeEnum.USERDEFINED) AND EXISTS(UserDefinedEventTriggerType));
	/// END_ENTITY;
	/// <summary>
	public class IfcEvent : IfcProcess, Global.IfcEvent
	{
		public virtual IfcEventTypeEnum? PredefinedType { get; set; }
		public virtual IfcEventTriggerTypeEnum? EventTriggerType { get; set; }
		public virtual IfcLabel? UserDefinedEventTriggerType { get; set; }
		public virtual IfcEventTime? EventOccurenceTime { get; set; }
		public IfcEvent() : base()
		{
		}
		public IfcEvent(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription, IfcEventTypeEnum? PredefinedType, IfcEventTriggerTypeEnum? EventTriggerType, IfcLabel? UserDefinedEventTriggerType, IfcEventTime? EventOccurenceTime) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription)
		{
			this.PredefinedType = PredefinedType;
			this.EventTriggerType = EventTriggerType;
			this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
			this.EventOccurenceTime = EventOccurenceTime;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription,
				PredefinedType,
				EventTriggerType,
				UserDefinedEventTriggerType,
				EventOccurenceTime
			};
		}
		public virtual Global.IfcEventTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcEventTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcEventTriggerTypeEnum? _EventTriggerType
		{
			get
			{
				return EventTriggerType;
			}
			set
			{
				if(value is IfcEventTriggerTypeEnum val)
				{
					EventTriggerType = val;
				}
				else if(value == null)
				{
					EventTriggerType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedEventTriggerType
		{
			get
			{
				return UserDefinedEventTriggerType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedEventTriggerType = val;
				}
				else if(value == null)
				{
					UserDefinedEventTriggerType = null;
				}
			}
		}
		public virtual Global.IfcEventTime? _EventOccurenceTime
		{
			get
			{
				return EventOccurenceTime;
			}
			set
			{
				if(value is IfcEventTime val)
				{
					EventOccurenceTime = val;
				}
				else if(value == null)
				{
					EventOccurenceTime = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEventTime
	/// SUBTYPE OF (IfcSchedulingTime);
	/// ActualDate : OPTIONAL IfcDateTime;
	/// EarlyDate : OPTIONAL IfcDateTime;
	/// LateDate : OPTIONAL IfcDateTime;
	/// ScheduleDate : OPTIONAL IfcDateTime;
	/// END_ENTITY;
	/// <summary>
	public class IfcEventTime : IfcSchedulingTime, Global.IfcEventTime
	{
		public virtual IfcDateTime? ActualDate { get; set; }
		public virtual IfcDateTime? EarlyDate { get; set; }
		public virtual IfcDateTime? LateDate { get; set; }
		public virtual IfcDateTime? ScheduleDate { get; set; }
		public IfcEventTime() : base()
		{
		}
		public IfcEventTime(IfcLabel? Name, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcDateTime? ActualDate, IfcDateTime? EarlyDate, IfcDateTime? LateDate, IfcDateTime? ScheduleDate) : base (Name, DataOrigin, UserDefinedDataOrigin)
		{
			this.ActualDate = ActualDate;
			this.EarlyDate = EarlyDate;
			this.LateDate = LateDate;
			this.ScheduleDate = ScheduleDate;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DataOrigin,
				UserDefinedDataOrigin,
				ActualDate,
				EarlyDate,
				LateDate,
				ScheduleDate
			};
		}
		public virtual Global.IfcDateTime? _ActualDate
		{
			get
			{
				return ActualDate;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					ActualDate = val;
				}
				else if(value == null)
				{
					ActualDate = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _EarlyDate
		{
			get
			{
				return EarlyDate;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					EarlyDate = val;
				}
				else if(value == null)
				{
					EarlyDate = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _LateDate
		{
			get
			{
				return LateDate;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					LateDate = val;
				}
				else if(value == null)
				{
					LateDate = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _ScheduleDate
		{
			get
			{
				return ScheduleDate;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					ScheduleDate = val;
				}
				else if(value == null)
				{
					ScheduleDate = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEventType
	/// SUBTYPE OF (IfcTypeProcess);
	/// PredefinedType : IfcEventTypeEnum;
	/// EventTriggerType : IfcEventTriggerTypeEnum;
	/// UserDefinedEventTriggerType : OPTIONAL IfcLabel;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcEventTypeEnum.USERDEFINED) OR ((PredefinedType = IfcEventTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcTypeProcess.ProcessType));
	/// CorrectEventTriggerType : (EventTriggerType <> IfcEventTriggerTypeEnum.USERDEFINED) OR ((EventTriggerType = IfcEventTriggerTypeEnum.USERDEFINED) AND EXISTS(UserDefinedEventTriggerType));
	/// END_ENTITY;
	/// <summary>
	public class IfcEventType : IfcTypeProcess, Global.IfcEventType
	{
		public virtual IfcEventTypeEnum? PredefinedType { get; set; }
		public virtual IfcEventTriggerTypeEnum? EventTriggerType { get; set; }
		public virtual IfcLabel? UserDefinedEventTriggerType { get; set; }
		public IfcEventType() : base()
		{
		}
		public IfcEventType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ProcessType, IfcEventTypeEnum? PredefinedType, IfcEventTriggerTypeEnum? EventTriggerType, IfcLabel? UserDefinedEventTriggerType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType)
		{
			this.PredefinedType = PredefinedType;
			this.EventTriggerType = EventTriggerType;
			this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ProcessType,
				PredefinedType,
				EventTriggerType,
				UserDefinedEventTriggerType
			};
		}
		public virtual Global.IfcEventTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcEventTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcEventTriggerTypeEnum? _EventTriggerType
		{
			get
			{
				return EventTriggerType;
			}
			set
			{
				if(value is IfcEventTriggerTypeEnum val)
				{
					EventTriggerType = val;
				}
				else if(value == null)
				{
					EventTriggerType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedEventTriggerType
		{
			get
			{
				return UserDefinedEventTriggerType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedEventTriggerType = val;
				}
				else if(value == null)
				{
					UserDefinedEventTriggerType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcExtendedProperties
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcMaterialProperties
	/// ,IfcProfileProperties))
	/// SUBTYPE OF (IfcPropertyAbstraction);
	/// Name : OPTIONAL IfcIdentifier;
	/// Description : OPTIONAL IfcText;
	/// Properties : SET [1:?] OF IfcProperty;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcExtendedProperties : IfcPropertyAbstraction, Global.IfcExtendedProperties
	{
		public virtual IfcIdentifier? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual List<IfcProperty>? Properties { get; set; }
		public IfcExtendedProperties() : base()
		{
		}
		public IfcExtendedProperties(IfcIdentifier? Name, IfcText? Description, List<IfcProperty>? Properties) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.Properties = Properties;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Properties
			};
		}
		public virtual Global.IfcIdentifier? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual List<Global.IfcProperty>? _Properties
		{
			get
			{
				if(Properties != null)
				{
					List<Global.IfcProperty>? items = new List<Global.IfcProperty>();
					foreach (IfcProperty item in Properties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Properties = null;
				}
				else
				{
					Properties = new List<IfcProperty>();
					foreach(var val in value)
					{
						if(val is IfcProperty v)
						{
							Properties.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcExternalInformation
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcClassification
	/// ,IfcDocumentInformation
	/// ,IfcLibraryInformation));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcExternalInformation : Ifc_Entity, IfcResourceObjectSelect, Global.IfcExternalInformation
	{
		public IfcExternalInformation() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExternalReference
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcClassificationReference
	/// ,IfcDocumentReference
	/// ,IfcExternallyDefinedHatchStyle
	/// ,IfcExternallyDefinedSurfaceStyle
	/// ,IfcExternallyDefinedTextFont
	/// ,IfcLibraryReference));
	/// Location : OPTIONAL IfcURIReference;
	/// Identification : OPTIONAL IfcIdentifier;
	/// Name : OPTIONAL IfcLabel;
	/// INVERSE
	/// ExternalReferenceForResources : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatingReference;
	/// WHERE
	/// WR1 : EXISTS(Identification) OR EXISTS(Location) OR EXISTS(Name);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcExternalReference : Ifc_Entity, IfcLightDistributionDataSourceSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect, Global.IfcExternalReference
	{
		public virtual IfcURIReference? Location { get; set; }
		public virtual IfcIdentifier? Identification { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public List<IfcExternalReferenceRelationship>? ExternalReferenceForResources {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatingReference != null && x.RelatingReference == this).ToList();}}
		public IfcExternalReference() : base()
		{
		}
		public IfcExternalReference(IfcURIReference? Location, IfcIdentifier? Identification, IfcLabel? Name) : base ()
		{
			this.Location = Location;
			this.Identification = Identification;
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				Identification,
				Name
			};
		}
		public virtual Global.IfcURIReference? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IfcURIReference val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
		public virtual Global.IfcIdentifier? _Identification
		{
			get
			{
				return Identification;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identification = val;
				}
				else if(value == null)
				{
					Identification = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _ExternalReferenceForResources
		{
			get
			{
				if(ExternalReferenceForResources != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in ExternalReferenceForResources)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcExternalReferenceRelationship
	/// SUBTYPE OF (IfcResourceLevelRelationship);
	/// RelatingReference : IfcExternalReference;
	/// RelatedResourceObjects : SET [1:?] OF IfcResourceObjectSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcExternalReferenceRelationship : IfcResourceLevelRelationship, Global.IfcExternalReferenceRelationship
	{
		public virtual IfcExternalReference? RelatingReference { get; set; }
		public virtual List<IfcResourceObjectSelect>? RelatedResourceObjects { get; set; }
		public IfcExternalReferenceRelationship() : base()
		{
		}
		public IfcExternalReferenceRelationship(IfcLabel? Name, IfcText? Description, IfcExternalReference? RelatingReference, List<IfcResourceObjectSelect>? RelatedResourceObjects) : base (Name, Description)
		{
			this.RelatingReference = RelatingReference;
			this.RelatedResourceObjects = RelatedResourceObjects;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingReference,
				RelatedResourceObjects
			};
		}
		public virtual Global.IfcExternalReference? _RelatingReference
		{
			get
			{
				return RelatingReference;
			}
			set
			{
				if(value is IfcExternalReference val)
				{
					RelatingReference = val;
				}
				else if(value == null)
				{
					RelatingReference = null;
				}
			}
		}
		public virtual List<Global.IfcResourceObjectSelect>? _RelatedResourceObjects
		{
			get
			{
				if(RelatedResourceObjects != null)
				{
					List<Global.IfcResourceObjectSelect>? items = new List<Global.IfcResourceObjectSelect>();
					foreach (IfcResourceObjectSelect item in RelatedResourceObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedResourceObjects = null;
				}
				else
				{
					RelatedResourceObjects = new List<IfcResourceObjectSelect>();
					foreach(var val in value)
					{
						if(val is IfcResourceObjectSelect v)
						{
							RelatedResourceObjects.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcExternalSpatialElement
	/// SUBTYPE OF (IfcExternalSpatialStructureElement);
	/// PredefinedType : OPTIONAL IfcExternalSpatialElementTypeEnum;
	/// INVERSE
	/// BoundedBy : SET [0:?] OF IfcRelSpaceBoundary FOR RelatingSpace;
	/// END_ENTITY;
	/// <summary>
	public class IfcExternalSpatialElement : IfcExternalSpatialStructureElement, IfcSpaceBoundarySelect, Global.IfcExternalSpatialElement
	{
		public virtual IfcExternalSpatialElementTypeEnum? PredefinedType { get; set; }
		public List<IfcRelSpaceBoundary>? BoundedBy {get{return Model?.GetItems<IfcRelSpaceBoundary>().Where(x => x.RelatingSpace != null && x.RelatingSpace == this).ToList();}}
		public IfcExternalSpatialElement() : base()
		{
		}
		public IfcExternalSpatialElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcExternalSpatialElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				PredefinedType
			};
		}
		public virtual Global.IfcExternalSpatialElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcExternalSpatialElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual List<Global.IfcRelSpaceBoundary>? _BoundedBy
		{
			get
			{
				if(BoundedBy != null)
				{
					List<Global.IfcRelSpaceBoundary>? items = new List<Global.IfcRelSpaceBoundary>();
					foreach (IfcRelSpaceBoundary item in BoundedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcExternalSpatialStructureElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcExternalSpatialElement))
	/// SUBTYPE OF (IfcSpatialElement);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcExternalSpatialStructureElement : IfcSpatialElement, Global.IfcExternalSpatialStructureElement
	{
		public IfcExternalSpatialStructureElement() : base()
		{
		}
		public IfcExternalSpatialStructureElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExternallyDefinedHatchStyle
	/// SUBTYPE OF (IfcExternalReference);
	/// END_ENTITY;
	/// <summary>
	public class IfcExternallyDefinedHatchStyle : IfcExternalReference, IfcFillStyleSelect, Global.IfcExternallyDefinedHatchStyle
	{
		public IfcExternallyDefinedHatchStyle() : base()
		{
		}
		public IfcExternallyDefinedHatchStyle(IfcURIReference? Location, IfcIdentifier? Identification, IfcLabel? Name) : base (Location, Identification, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				Identification,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExternallyDefinedSurfaceStyle
	/// SUBTYPE OF (IfcExternalReference);
	/// END_ENTITY;
	/// <summary>
	public class IfcExternallyDefinedSurfaceStyle : IfcExternalReference, IfcSurfaceStyleElementSelect, Global.IfcExternallyDefinedSurfaceStyle
	{
		public IfcExternallyDefinedSurfaceStyle() : base()
		{
		}
		public IfcExternallyDefinedSurfaceStyle(IfcURIReference? Location, IfcIdentifier? Identification, IfcLabel? Name) : base (Location, Identification, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				Identification,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExternallyDefinedTextFont
	/// SUBTYPE OF (IfcExternalReference);
	/// END_ENTITY;
	/// <summary>
	public class IfcExternallyDefinedTextFont : IfcExternalReference, IfcTextFontSelect, Global.IfcExternallyDefinedTextFont
	{
		public IfcExternallyDefinedTextFont() : base()
		{
		}
		public IfcExternallyDefinedTextFont(IfcURIReference? Location, IfcIdentifier? Identification, IfcLabel? Name) : base (Location, Identification, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				Identification,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExtrudedAreaSolid
	/// SUPERTYPE OF (ONEOF
	/// (IfcExtrudedAreaSolidTapered))
	/// SUBTYPE OF (IfcSweptAreaSolid);
	/// ExtrudedDirection : IfcDirection;
	/// Depth : IfcPositiveLengthMeasure;
	/// WHERE
	/// ValidExtrusionDirection : IfcDotProduct(IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcDirection([0.0,0.0,1.0]), SELF.ExtrudedDirection) <> 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IfcExtrudedAreaSolid : IfcSweptAreaSolid, Global.IfcExtrudedAreaSolid
	{
		public virtual IfcDirection? ExtrudedDirection { get; set; }
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public IfcExtrudedAreaSolid() : base()
		{
		}
		public IfcExtrudedAreaSolid(IfcProfileDef? SweptArea, IfcAxis2Placement3D? Position, IfcDirection? ExtrudedDirection, IfcPositiveLengthMeasure? Depth) : base (SweptArea, Position)
		{
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptArea,
				Position,
				ExtrudedDirection,
				Depth
			};
		}
		public virtual Global.IfcDirection? _ExtrudedDirection
		{
			get
			{
				return ExtrudedDirection;
			}
			set
			{
				if(value is IfcDirection val)
				{
					ExtrudedDirection = val;
				}
				else if(value == null)
				{
					ExtrudedDirection = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcExtrudedAreaSolidTapered
	/// SUBTYPE OF (IfcExtrudedAreaSolid);
	/// EndSweptArea : IfcProfileDef;
	/// WHERE
	/// CorrectProfileAssignment : IfcTaperedSweptAreaProfiles(SELF\IfcSweptAreaSolid.SweptArea, SELF.EndSweptArea);
	/// END_ENTITY;
	/// <summary>
	public class IfcExtrudedAreaSolidTapered : IfcExtrudedAreaSolid, Global.IfcExtrudedAreaSolidTapered
	{
		public virtual IfcProfileDef? EndSweptArea { get; set; }
		public IfcExtrudedAreaSolidTapered() : base()
		{
		}
		public IfcExtrudedAreaSolidTapered(IfcProfileDef? SweptArea, IfcAxis2Placement3D? Position, IfcDirection? ExtrudedDirection, IfcPositiveLengthMeasure? Depth, IfcProfileDef? EndSweptArea) : base (SweptArea, Position, ExtrudedDirection, Depth)
		{
			this.EndSweptArea = EndSweptArea;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptArea,
				Position,
				ExtrudedDirection,
				Depth,
				EndSweptArea
			};
		}
		public virtual Global.IfcProfileDef? _EndSweptArea
		{
			get
			{
				return EndSweptArea;
			}
			set
			{
				if(value is IfcProfileDef val)
				{
					EndSweptArea = val;
				}
				else if(value == null)
				{
					EndSweptArea = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFace
	/// SUPERTYPE OF (ONEOF
	/// (IfcFaceSurface))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// Bounds : SET [1:?] OF IfcFaceBound;
	/// INVERSE
	/// HasTextureMaps : SET [0:?] OF IfcTextureMap FOR MappedTo;
	/// WHERE
	/// HasOuterBound : SIZEOF(QUERY(temp <* Bounds | 'IFC4.IFCFACEOUTERBOUND' IN TYPEOF(temp))) <= 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcFace : IfcTopologicalRepresentationItem, Global.IfcFace
	{
		public virtual List<IfcFaceBound>? Bounds { get; set; }
		public List<IfcTextureMap>? HasTextureMaps {get{return Model?.GetItems<IfcTextureMap>().Where(x => x.MappedTo != null && x.MappedTo == this).ToList();}}
		public IfcFace() : base()
		{
		}
		public IfcFace(List<IfcFaceBound>? Bounds) : base ()
		{
			this.Bounds = Bounds;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Bounds
			};
		}
		public virtual List<Global.IfcFaceBound>? _Bounds
		{
			get
			{
				if(Bounds != null)
				{
					List<Global.IfcFaceBound>? items = new List<Global.IfcFaceBound>();
					foreach (IfcFaceBound item in Bounds)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Bounds = null;
				}
				else
				{
					Bounds = new List<IfcFaceBound>();
					foreach(var val in value)
					{
						if(val is IfcFaceBound v)
						{
							Bounds.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcTextureMap>? _HasTextureMaps
		{
			get
			{
				if(HasTextureMaps != null)
				{
					List<Global.IfcTextureMap>? items = new List<Global.IfcTextureMap>();
					foreach (IfcTextureMap item in HasTextureMaps)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFaceBasedSurfaceModel
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// FbsmFaces : SET [1:?] OF IfcConnectedFaceSet;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcFaceBasedSurfaceModel : IfcGeometricRepresentationItem, IfcSurfaceOrFaceSurface, Global.IfcFaceBasedSurfaceModel
	{
		public virtual List<IfcConnectedFaceSet>? FbsmFaces { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcFaceBasedSurfaceModel() : base()
		{
		}
		public IfcFaceBasedSurfaceModel(List<IfcConnectedFaceSet>? FbsmFaces) : base ()
		{
			this.FbsmFaces = FbsmFaces;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				FbsmFaces
			};
		}
		public virtual List<Global.IfcConnectedFaceSet>? _FbsmFaces
		{
			get
			{
				if(FbsmFaces != null)
				{
					List<Global.IfcConnectedFaceSet>? items = new List<Global.IfcConnectedFaceSet>();
					foreach (IfcConnectedFaceSet item in FbsmFaces)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					FbsmFaces = null;
				}
				else
				{
					FbsmFaces = new List<IfcConnectedFaceSet>();
					foreach(var val in value)
					{
						if(val is IfcConnectedFaceSet v)
						{
							FbsmFaces.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFaceBound
	/// SUPERTYPE OF (ONEOF
	/// (IfcFaceOuterBound))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// Bound : IfcLoop;
	/// Orientation : IfcBoolean;
	/// END_ENTITY;
	/// <summary>
	public class IfcFaceBound : IfcTopologicalRepresentationItem, Global.IfcFaceBound
	{
		public virtual IfcLoop? Bound { get; set; }
		public virtual IfcBoolean? Orientation { get; set; }
		public IfcFaceBound() : base()
		{
		}
		public IfcFaceBound(IfcLoop? Bound, IfcBoolean? Orientation) : base ()
		{
			this.Bound = Bound;
			this.Orientation = Orientation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Bound,
				Orientation
			};
		}
		public virtual Global.IfcLoop? _Bound
		{
			get
			{
				return Bound;
			}
			set
			{
				if(value is IfcLoop val)
				{
					Bound = val;
				}
				else if(value == null)
				{
					Bound = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _Orientation
		{
			get
			{
				return Orientation;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					Orientation = val;
				}
				else if(value == null)
				{
					Orientation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFaceOuterBound
	/// SUBTYPE OF (IfcFaceBound);
	/// END_ENTITY;
	/// <summary>
	public class IfcFaceOuterBound : IfcFaceBound, Global.IfcFaceOuterBound
	{
		public IfcFaceOuterBound() : base()
		{
		}
		public IfcFaceOuterBound(IfcLoop? Bound, IfcBoolean? Orientation) : base (Bound, Orientation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Bound,
				Orientation
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFaceSurface
	/// SUPERTYPE OF (ONEOF
	/// (IfcAdvancedFace))
	/// SUBTYPE OF (IfcFace);
	/// FaceSurface : IfcSurface;
	/// SameSense : IfcBoolean;
	/// END_ENTITY;
	/// <summary>
	public class IfcFaceSurface : IfcFace, IfcSurfaceOrFaceSurface, Global.IfcFaceSurface
	{
		public virtual IfcSurface? FaceSurface { get; set; }
		public virtual IfcBoolean? SameSense { get; set; }
		public IfcFaceSurface() : base()
		{
		}
		public IfcFaceSurface(List<IfcFaceBound>? Bounds, IfcSurface? FaceSurface, IfcBoolean? SameSense) : base (Bounds)
		{
			this.FaceSurface = FaceSurface;
			this.SameSense = SameSense;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Bounds,
				FaceSurface,
				SameSense
			};
		}
		public virtual Global.IfcSurface? _FaceSurface
		{
			get
			{
				return FaceSurface;
			}
			set
			{
				if(value is IfcSurface val)
				{
					FaceSurface = val;
				}
				else if(value == null)
				{
					FaceSurface = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _SameSense
		{
			get
			{
				return SameSense;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					SameSense = val;
				}
				else if(value == null)
				{
					SameSense = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFacetedBrep
	/// SUPERTYPE OF (ONEOF
	/// (IfcFacetedBrepWithVoids))
	/// SUBTYPE OF (IfcManifoldSolidBrep);
	/// END_ENTITY;
	/// <summary>
	public class IfcFacetedBrep : IfcManifoldSolidBrep, Global.IfcFacetedBrep
	{
		public IfcFacetedBrep() : base()
		{
		}
		public IfcFacetedBrep(IfcClosedShell? Outer) : base (Outer)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Outer
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFacetedBrepWithVoids
	/// SUBTYPE OF (IfcFacetedBrep);
	/// Voids : SET [1:?] OF IfcClosedShell;
	/// END_ENTITY;
	/// <summary>
	public class IfcFacetedBrepWithVoids : IfcFacetedBrep, Global.IfcFacetedBrepWithVoids
	{
		public virtual List<IfcClosedShell>? Voids { get; set; }
		public IfcFacetedBrepWithVoids() : base()
		{
		}
		public IfcFacetedBrepWithVoids(IfcClosedShell? Outer, List<IfcClosedShell>? Voids) : base (Outer)
		{
			this.Voids = Voids;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Outer,
				Voids
			};
		}
		public virtual List<Global.IfcClosedShell>? _Voids
		{
			get
			{
				if(Voids != null)
				{
					List<Global.IfcClosedShell>? items = new List<Global.IfcClosedShell>();
					foreach (IfcClosedShell item in Voids)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Voids = null;
				}
				else
				{
					Voids = new List<IfcClosedShell>();
					foreach(var val in value)
					{
						if(val is IfcClosedShell v)
						{
							Voids.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFailureConnectionCondition
	/// SUBTYPE OF (IfcStructuralConnectionCondition);
	/// TensionFailureX : OPTIONAL IfcForceMeasure;
	/// TensionFailureY : OPTIONAL IfcForceMeasure;
	/// TensionFailureZ : OPTIONAL IfcForceMeasure;
	/// CompressionFailureX : OPTIONAL IfcForceMeasure;
	/// CompressionFailureY : OPTIONAL IfcForceMeasure;
	/// CompressionFailureZ : OPTIONAL IfcForceMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcFailureConnectionCondition : IfcStructuralConnectionCondition, Global.IfcFailureConnectionCondition
	{
		public virtual IfcForceMeasure? TensionFailureX { get; set; }
		public virtual IfcForceMeasure? TensionFailureY { get; set; }
		public virtual IfcForceMeasure? TensionFailureZ { get; set; }
		public virtual IfcForceMeasure? CompressionFailureX { get; set; }
		public virtual IfcForceMeasure? CompressionFailureY { get; set; }
		public virtual IfcForceMeasure? CompressionFailureZ { get; set; }
		public IfcFailureConnectionCondition() : base()
		{
		}
		public IfcFailureConnectionCondition(IfcLabel? Name, IfcForceMeasure? TensionFailureX, IfcForceMeasure? TensionFailureY, IfcForceMeasure? TensionFailureZ, IfcForceMeasure? CompressionFailureX, IfcForceMeasure? CompressionFailureY, IfcForceMeasure? CompressionFailureZ) : base (Name)
		{
			this.TensionFailureX = TensionFailureX;
			this.TensionFailureY = TensionFailureY;
			this.TensionFailureZ = TensionFailureZ;
			this.CompressionFailureX = CompressionFailureX;
			this.CompressionFailureY = CompressionFailureY;
			this.CompressionFailureZ = CompressionFailureZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				TensionFailureX,
				TensionFailureY,
				TensionFailureZ,
				CompressionFailureX,
				CompressionFailureY,
				CompressionFailureZ
			};
		}
		public virtual Global.IfcForceMeasure? _TensionFailureX
		{
			get
			{
				return TensionFailureX;
			}
			set
			{
				if(value is IfcForceMeasure val)
				{
					TensionFailureX = val;
				}
				else if(value == null)
				{
					TensionFailureX = null;
				}
			}
		}
		public virtual Global.IfcForceMeasure? _TensionFailureY
		{
			get
			{
				return TensionFailureY;
			}
			set
			{
				if(value is IfcForceMeasure val)
				{
					TensionFailureY = val;
				}
				else if(value == null)
				{
					TensionFailureY = null;
				}
			}
		}
		public virtual Global.IfcForceMeasure? _TensionFailureZ
		{
			get
			{
				return TensionFailureZ;
			}
			set
			{
				if(value is IfcForceMeasure val)
				{
					TensionFailureZ = val;
				}
				else if(value == null)
				{
					TensionFailureZ = null;
				}
			}
		}
		public virtual Global.IfcForceMeasure? _CompressionFailureX
		{
			get
			{
				return CompressionFailureX;
			}
			set
			{
				if(value is IfcForceMeasure val)
				{
					CompressionFailureX = val;
				}
				else if(value == null)
				{
					CompressionFailureX = null;
				}
			}
		}
		public virtual Global.IfcForceMeasure? _CompressionFailureY
		{
			get
			{
				return CompressionFailureY;
			}
			set
			{
				if(value is IfcForceMeasure val)
				{
					CompressionFailureY = val;
				}
				else if(value == null)
				{
					CompressionFailureY = null;
				}
			}
		}
		public virtual Global.IfcForceMeasure? _CompressionFailureZ
		{
			get
			{
				return CompressionFailureZ;
			}
			set
			{
				if(value is IfcForceMeasure val)
				{
					CompressionFailureZ = val;
				}
				else if(value == null)
				{
					CompressionFailureZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFan
	/// SUBTYPE OF (IfcFlowMovingDevice);
	/// PredefinedType : OPTIONAL IfcFanTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcFanTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFanTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCFANTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFan : IfcFlowMovingDevice, Global.IfcFan
	{
		public virtual IfcFanTypeEnum? PredefinedType { get; set; }
		public IfcFan() : base()
		{
		}
		public IfcFan(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcFanTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcFanTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFanTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFanType
	/// SUBTYPE OF (IfcFlowMovingDeviceType);
	/// PredefinedType : IfcFanTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcFanTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFanTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFanType : IfcFlowMovingDeviceType, Global.IfcFanType
	{
		public virtual IfcFanTypeEnum? PredefinedType { get; set; }
		public IfcFanType() : base()
		{
		}
		public IfcFanType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFanTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFanTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFanTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFastener
	/// SUBTYPE OF (IfcElementComponent);
	/// PredefinedType : OPTIONAL IfcFastenerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcFastenerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFastenerTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCFASTENERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFastener : IfcElementComponent, Global.IfcFastener
	{
		public virtual IfcFastenerTypeEnum? PredefinedType { get; set; }
		public IfcFastener() : base()
		{
		}
		public IfcFastener(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcFastenerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcFastenerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFastenerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFastenerType
	/// SUBTYPE OF (IfcElementComponentType);
	/// PredefinedType : IfcFastenerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcFastenerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFastenerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFastenerType : IfcElementComponentType, Global.IfcFastenerType
	{
		public virtual IfcFastenerTypeEnum? PredefinedType { get; set; }
		public IfcFastenerType() : base()
		{
		}
		public IfcFastenerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFastenerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFastenerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFastenerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFeatureElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcFeatureElementAddition
	/// ,IfcFeatureElementSubtraction
	/// ,IfcSurfaceFeature))
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFeatureElement : IfcElement, Global.IfcFeatureElement
	{
		public IfcFeatureElement() : base()
		{
		}
		public IfcFeatureElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFeatureElementAddition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcProjectionElement))
	/// SUBTYPE OF (IfcFeatureElement);
	/// INVERSE
	/// ProjectsElements : IfcRelProjectsElement FOR RelatedFeatureElement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFeatureElementAddition : IfcFeatureElement, Global.IfcFeatureElementAddition
	{
		public IfcRelProjectsElement? ProjectsElements {get{return Model?.GetItems<IfcRelProjectsElement>().FirstOrDefault(x => x.RelatedFeatureElement != null && x.RelatedFeatureElement == this);}}
		public IfcFeatureElementAddition() : base()
		{
		}
		public IfcFeatureElementAddition(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
		public virtual Global.IfcRelProjectsElement? _ProjectsElements
		{
			get
			{
				return ProjectsElements;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFeatureElementSubtraction
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcOpeningElement
	/// ,IfcVoidingFeature))
	/// SUBTYPE OF (IfcFeatureElement);
	/// INVERSE
	/// VoidsElements : IfcRelVoidsElement FOR RelatedOpeningElement;
	/// WHERE
	/// HasNoSubtraction : SIZEOF(SELF\IfcElement.HasOpenings) = 0;
	/// IsNotFilling : SIZEOF(SELF\IfcElement.FillsVoids) = 0;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFeatureElementSubtraction : IfcFeatureElement, Global.IfcFeatureElementSubtraction
	{
		public IfcRelVoidsElement? VoidsElements {get{return Model?.GetItems<IfcRelVoidsElement>().FirstOrDefault(x => x.RelatedOpeningElement != null && x.RelatedOpeningElement == this);}}
		public IfcFeatureElementSubtraction() : base()
		{
		}
		public IfcFeatureElementSubtraction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
		public virtual Global.IfcRelVoidsElement? _VoidsElements
		{
			get
			{
				return VoidsElements;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFillAreaStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// FillStyles : SET [1:?] OF IfcFillStyleSelect;
	/// ModelorDraughting : OPTIONAL IfcBoolean;
	/// WHERE
	/// MaxOneColour : SIZEOF(QUERY(Style <* SELF.FillStyles |
	/// 'IFC4.IFCCOLOUR' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// MaxOneExtHatchStyle : SIZEOF(QUERY(Style <* SELF.FillStyles |
	/// 'IFC4.IFCEXTERNALLYDEFINEDHATCHSTYLE' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// ConsistentHatchStyleDef : IfcCorrectFillAreaStyle(SELF.FillStyles);
	/// END_ENTITY;
	/// <summary>
	public class IfcFillAreaStyle : IfcPresentationStyle, IfcPresentationStyleSelect, Global.IfcFillAreaStyle
	{
		public virtual List<IfcFillStyleSelect>? FillStyles { get; set; }
		public virtual IfcBoolean? ModelorDraughting { get; set; }
		public IfcFillAreaStyle() : base()
		{
		}
		public IfcFillAreaStyle(IfcLabel? Name, List<IfcFillStyleSelect>? FillStyles, IfcBoolean? ModelorDraughting) : base (Name)
		{
			this.FillStyles = FillStyles;
			this.ModelorDraughting = ModelorDraughting;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				FillStyles,
				ModelorDraughting
			};
		}
		public virtual List<Global.IfcFillStyleSelect>? _FillStyles
		{
			get
			{
				if(FillStyles != null)
				{
					List<Global.IfcFillStyleSelect>? items = new List<Global.IfcFillStyleSelect>();
					foreach (IfcFillStyleSelect item in FillStyles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					FillStyles = null;
				}
				else
				{
					FillStyles = new List<IfcFillStyleSelect>();
					foreach(var val in value)
					{
						if(val is IfcFillStyleSelect v)
						{
							FillStyles.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcBoolean? _ModelorDraughting
		{
			get
			{
				return ModelorDraughting;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					ModelorDraughting = val;
				}
				else if(value == null)
				{
					ModelorDraughting = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFillAreaStyleHatching
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// HatchLineAppearance : IfcCurveStyle;
	/// StartOfNextHatchLine : IfcHatchLineDistanceSelect;
	/// PointOfReferenceHatchLine : OPTIONAL IfcCartesianPoint;
	/// PatternStart : OPTIONAL IfcCartesianPoint;
	/// HatchLineAngle : IfcPlaneAngleMeasure;
	/// WHERE
	/// PatternStart2D : NOT(EXISTS(PatternStart)) OR (PatternStart.Dim = 2);
	/// RefHatchLine2D : NOT(EXISTS(PointOfReferenceHatchLine)) OR (PointOfReferenceHatchLine.Dim = 2);
	/// END_ENTITY;
	/// <summary>
	public class IfcFillAreaStyleHatching : IfcGeometricRepresentationItem, IfcFillStyleSelect, Global.IfcFillAreaStyleHatching
	{
		public virtual IfcCurveStyle? HatchLineAppearance { get; set; }
		public virtual IfcHatchLineDistanceSelect? StartOfNextHatchLine { get; set; }
		public virtual IfcCartesianPoint? PointOfReferenceHatchLine { get; set; }
		public virtual IfcCartesianPoint? PatternStart { get; set; }
		public virtual IfcPlaneAngleMeasure? HatchLineAngle { get; set; }
		public IfcFillAreaStyleHatching() : base()
		{
		}
		public IfcFillAreaStyleHatching(IfcCurveStyle? HatchLineAppearance, IfcHatchLineDistanceSelect? StartOfNextHatchLine, IfcCartesianPoint? PointOfReferenceHatchLine, IfcCartesianPoint? PatternStart, IfcPlaneAngleMeasure? HatchLineAngle) : base ()
		{
			this.HatchLineAppearance = HatchLineAppearance;
			this.StartOfNextHatchLine = StartOfNextHatchLine;
			this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
			this.PatternStart = PatternStart;
			this.HatchLineAngle = HatchLineAngle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				HatchLineAppearance,
				StartOfNextHatchLine,
				PointOfReferenceHatchLine,
				PatternStart,
				HatchLineAngle
			};
		}
		public virtual Global.IfcCurveStyle? _HatchLineAppearance
		{
			get
			{
				return HatchLineAppearance;
			}
			set
			{
				if(value is IfcCurveStyle val)
				{
					HatchLineAppearance = val;
				}
				else if(value == null)
				{
					HatchLineAppearance = null;
				}
			}
		}
		public virtual Global.IfcHatchLineDistanceSelect? _StartOfNextHatchLine
		{
			get
			{
				return StartOfNextHatchLine;
			}
			set
			{
				if(value is IfcHatchLineDistanceSelect val)
				{
					StartOfNextHatchLine = val;
				}
				else if(value == null)
				{
					StartOfNextHatchLine = null;
				}
			}
		}
		public virtual Global.IfcCartesianPoint? _PointOfReferenceHatchLine
		{
			get
			{
				return PointOfReferenceHatchLine;
			}
			set
			{
				if(value is IfcCartesianPoint val)
				{
					PointOfReferenceHatchLine = val;
				}
				else if(value == null)
				{
					PointOfReferenceHatchLine = null;
				}
			}
		}
		public virtual Global.IfcCartesianPoint? _PatternStart
		{
			get
			{
				return PatternStart;
			}
			set
			{
				if(value is IfcCartesianPoint val)
				{
					PatternStart = val;
				}
				else if(value == null)
				{
					PatternStart = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _HatchLineAngle
		{
			get
			{
				return HatchLineAngle;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					HatchLineAngle = val;
				}
				else if(value == null)
				{
					HatchLineAngle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFillAreaStyleTiles
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// TilingPattern : LIST [2:2] OF IfcVector;
	/// Tiles : SET [1:?] OF IfcStyledItem;
	/// TilingScale : IfcPositiveRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcFillAreaStyleTiles : IfcGeometricRepresentationItem, IfcFillStyleSelect, Global.IfcFillAreaStyleTiles
	{
		public virtual List<IfcVector>? TilingPattern { get; set; }
		public virtual List<IfcStyledItem>? Tiles { get; set; }
		public virtual IfcPositiveRatioMeasure? TilingScale { get; set; }
		public IfcFillAreaStyleTiles() : base()
		{
		}
		public IfcFillAreaStyleTiles(List<IfcVector>? TilingPattern, List<IfcStyledItem>? Tiles, IfcPositiveRatioMeasure? TilingScale) : base ()
		{
			this.TilingPattern = TilingPattern;
			this.Tiles = Tiles;
			this.TilingScale = TilingScale;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TilingPattern,
				Tiles,
				TilingScale
			};
		}
		public virtual List<Global.IfcVector>? _TilingPattern
		{
			get
			{
				if(TilingPattern != null)
				{
					List<Global.IfcVector>? items = new List<Global.IfcVector>();
					foreach (IfcVector item in TilingPattern)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					TilingPattern = null;
				}
				else
				{
					TilingPattern = new List<IfcVector>();
					foreach(var val in value)
					{
						if(val is IfcVector v)
						{
							TilingPattern.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcStyledItem>? _Tiles
		{
			get
			{
				if(Tiles != null)
				{
					List<Global.IfcStyledItem>? items = new List<Global.IfcStyledItem>();
					foreach (IfcStyledItem item in Tiles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Tiles = null;
				}
				else
				{
					Tiles = new List<IfcStyledItem>();
					foreach(var val in value)
					{
						if(val is IfcStyledItem v)
						{
							Tiles.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcPositiveRatioMeasure? _TilingScale
		{
			get
			{
				return TilingScale;
			}
			set
			{
				if(value is IfcPositiveRatioMeasure val)
				{
					TilingScale = val;
				}
				else if(value == null)
				{
					TilingScale = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFilter
	/// SUBTYPE OF (IfcFlowTreatmentDevice);
	/// PredefinedType : OPTIONAL IfcFilterTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcFilterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFilterTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCFILTERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFilter : IfcFlowTreatmentDevice, Global.IfcFilter
	{
		public virtual IfcFilterTypeEnum? PredefinedType { get; set; }
		public IfcFilter() : base()
		{
		}
		public IfcFilter(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcFilterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcFilterTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFilterTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFilterType
	/// SUBTYPE OF (IfcFlowTreatmentDeviceType);
	/// PredefinedType : IfcFilterTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcFilterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFilterTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFilterType : IfcFlowTreatmentDeviceType, Global.IfcFilterType
	{
		public virtual IfcFilterTypeEnum? PredefinedType { get; set; }
		public IfcFilterType() : base()
		{
		}
		public IfcFilterType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFilterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFilterTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFilterTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFireSuppressionTerminal
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcFireSuppressionTerminalTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcFireSuppressionTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFireSuppressionTerminalTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCFIRESUPPRESSIONTERMINALTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFireSuppressionTerminal : IfcFlowTerminal, Global.IfcFireSuppressionTerminal
	{
		public virtual IfcFireSuppressionTerminalTypeEnum? PredefinedType { get; set; }
		public IfcFireSuppressionTerminal() : base()
		{
		}
		public IfcFireSuppressionTerminal(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcFireSuppressionTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcFireSuppressionTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFireSuppressionTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFireSuppressionTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcFireSuppressionTerminalTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcFireSuppressionTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFireSuppressionTerminalTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFireSuppressionTerminalType : IfcFlowTerminalType, Global.IfcFireSuppressionTerminalType
	{
		public virtual IfcFireSuppressionTerminalTypeEnum? PredefinedType { get; set; }
		public IfcFireSuppressionTerminalType() : base()
		{
		}
		public IfcFireSuppressionTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFireSuppressionTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFireSuppressionTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFireSuppressionTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFixedReferenceSweptAreaSolid
	/// SUBTYPE OF (IfcSweptAreaSolid);
	/// Directrix : IfcCurve;
	/// StartParam : OPTIONAL IfcParameterValue;
	/// EndParam : OPTIONAL IfcParameterValue;
	/// FixedReference : IfcDirection;
	/// WHERE
	/// DirectrixBounded : (EXISTS(StartParam) AND EXISTS(EndParam)) OR
	/// (SIZEOF(['IFC4.IFCCONIC', 'IFC4.IFCBOUNDEDCURVE'] * TYPEOF(Directrix)) = 1);
	/// END_ENTITY;
	/// <summary>
	public class IfcFixedReferenceSweptAreaSolid : IfcSweptAreaSolid, Global.IfcFixedReferenceSweptAreaSolid
	{
		public virtual IfcCurve? Directrix { get; set; }
		public virtual IfcParameterValue? StartParam { get; set; }
		public virtual IfcParameterValue? EndParam { get; set; }
		public virtual IfcDirection? FixedReference { get; set; }
		public IfcFixedReferenceSweptAreaSolid() : base()
		{
		}
		public IfcFixedReferenceSweptAreaSolid(IfcProfileDef? SweptArea, IfcAxis2Placement3D? Position, IfcCurve? Directrix, IfcParameterValue? StartParam, IfcParameterValue? EndParam, IfcDirection? FixedReference) : base (SweptArea, Position)
		{
			this.Directrix = Directrix;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
			this.FixedReference = FixedReference;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptArea,
				Position,
				Directrix,
				StartParam,
				EndParam,
				FixedReference
			};
		}
		public virtual Global.IfcCurve? _Directrix
		{
			get
			{
				return Directrix;
			}
			set
			{
				if(value is IfcCurve val)
				{
					Directrix = val;
				}
				else if(value == null)
				{
					Directrix = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _StartParam
		{
			get
			{
				return StartParam;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					StartParam = val;
				}
				else if(value == null)
				{
					StartParam = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _EndParam
		{
			get
			{
				return EndParam;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					EndParam = val;
				}
				else if(value == null)
				{
					EndParam = null;
				}
			}
		}
		public virtual Global.IfcDirection? _FixedReference
		{
			get
			{
				return FixedReference;
			}
			set
			{
				if(value is IfcDirection val)
				{
					FixedReference = val;
				}
				else if(value == null)
				{
					FixedReference = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFlowController
	/// SUPERTYPE OF (ONEOF
	/// (IfcAirTerminalBox
	/// ,IfcDamper
	/// ,IfcElectricDistributionBoard
	/// ,IfcElectricTimeControl
	/// ,IfcFlowMeter
	/// ,IfcProtectiveDevice
	/// ,IfcSwitchingDevice
	/// ,IfcValve))
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowController : IfcDistributionFlowElement, Global.IfcFlowController
	{
		public IfcFlowController() : base()
		{
		}
		public IfcFlowController(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowControllerType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAirTerminalBoxType
	/// ,IfcDamperType
	/// ,IfcElectricDistributionBoardType
	/// ,IfcElectricTimeControlType
	/// ,IfcFlowMeterType
	/// ,IfcProtectiveDeviceType
	/// ,IfcSwitchingDeviceType
	/// ,IfcValveType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowControllerType : IfcDistributionFlowElementType, Global.IfcFlowControllerType
	{
		public IfcFlowControllerType() : base()
		{
		}
		public IfcFlowControllerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowFitting
	/// SUPERTYPE OF (ONEOF
	/// (IfcCableCarrierFitting
	/// ,IfcCableFitting
	/// ,IfcDuctFitting
	/// ,IfcJunctionBox
	/// ,IfcPipeFitting))
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowFitting : IfcDistributionFlowElement, Global.IfcFlowFitting
	{
		public IfcFlowFitting() : base()
		{
		}
		public IfcFlowFitting(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowFittingType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCableCarrierFittingType
	/// ,IfcCableFittingType
	/// ,IfcDuctFittingType
	/// ,IfcJunctionBoxType
	/// ,IfcPipeFittingType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowFittingType : IfcDistributionFlowElementType, Global.IfcFlowFittingType
	{
		public IfcFlowFittingType() : base()
		{
		}
		public IfcFlowFittingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowInstrument
	/// SUBTYPE OF (IfcDistributionControlElement);
	/// PredefinedType : OPTIONAL IfcFlowInstrumentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcFlowInstrumentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFlowInstrumentTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCFLOWINSTRUMENTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowInstrument : IfcDistributionControlElement, Global.IfcFlowInstrument
	{
		public virtual IfcFlowInstrumentTypeEnum? PredefinedType { get; set; }
		public IfcFlowInstrument() : base()
		{
		}
		public IfcFlowInstrument(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcFlowInstrumentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcFlowInstrumentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFlowInstrumentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFlowInstrumentType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcFlowInstrumentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcFlowInstrumentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFlowInstrumentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowInstrumentType : IfcDistributionControlElementType, Global.IfcFlowInstrumentType
	{
		public virtual IfcFlowInstrumentTypeEnum? PredefinedType { get; set; }
		public IfcFlowInstrumentType() : base()
		{
		}
		public IfcFlowInstrumentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFlowInstrumentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFlowInstrumentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFlowInstrumentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFlowMeter
	/// SUBTYPE OF (IfcFlowController);
	/// PredefinedType : OPTIONAL IfcFlowMeterTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcFlowMeterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFlowMeterTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCFLOWMETERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowMeter : IfcFlowController, Global.IfcFlowMeter
	{
		public virtual IfcFlowMeterTypeEnum? PredefinedType { get; set; }
		public IfcFlowMeter() : base()
		{
		}
		public IfcFlowMeter(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcFlowMeterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcFlowMeterTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFlowMeterTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFlowMeterType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcFlowMeterTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcFlowMeterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFlowMeterTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowMeterType : IfcFlowControllerType, Global.IfcFlowMeterType
	{
		public virtual IfcFlowMeterTypeEnum? PredefinedType { get; set; }
		public IfcFlowMeterType() : base()
		{
		}
		public IfcFlowMeterType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFlowMeterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFlowMeterTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFlowMeterTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFlowMovingDevice
	/// SUPERTYPE OF (ONEOF
	/// (IfcCompressor
	/// ,IfcFan
	/// ,IfcPump))
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowMovingDevice : IfcDistributionFlowElement, Global.IfcFlowMovingDevice
	{
		public IfcFlowMovingDevice() : base()
		{
		}
		public IfcFlowMovingDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowMovingDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCompressorType
	/// ,IfcFanType
	/// ,IfcPumpType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowMovingDeviceType : IfcDistributionFlowElementType, Global.IfcFlowMovingDeviceType
	{
		public IfcFlowMovingDeviceType() : base()
		{
		}
		public IfcFlowMovingDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowSegment
	/// SUPERTYPE OF (ONEOF
	/// (IfcCableCarrierSegment
	/// ,IfcCableSegment
	/// ,IfcDuctSegment
	/// ,IfcPipeSegment))
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowSegment : IfcDistributionFlowElement, Global.IfcFlowSegment
	{
		public IfcFlowSegment() : base()
		{
		}
		public IfcFlowSegment(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowSegmentType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCableCarrierSegmentType
	/// ,IfcCableSegmentType
	/// ,IfcDuctSegmentType
	/// ,IfcPipeSegmentType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowSegmentType : IfcDistributionFlowElementType, Global.IfcFlowSegmentType
	{
		public IfcFlowSegmentType() : base()
		{
		}
		public IfcFlowSegmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowStorageDevice
	/// SUPERTYPE OF (ONEOF
	/// (IfcElectricFlowStorageDevice
	/// ,IfcTank))
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowStorageDevice : IfcDistributionFlowElement, Global.IfcFlowStorageDevice
	{
		public IfcFlowStorageDevice() : base()
		{
		}
		public IfcFlowStorageDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowStorageDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcElectricFlowStorageDeviceType
	/// ,IfcTankType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowStorageDeviceType : IfcDistributionFlowElementType, Global.IfcFlowStorageDeviceType
	{
		public IfcFlowStorageDeviceType() : base()
		{
		}
		public IfcFlowStorageDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTerminal
	/// SUPERTYPE OF (ONEOF
	/// (IfcAirTerminal
	/// ,IfcAudioVisualAppliance
	/// ,IfcCommunicationsAppliance
	/// ,IfcElectricAppliance
	/// ,IfcFireSuppressionTerminal
	/// ,IfcLamp
	/// ,IfcLightFixture
	/// ,IfcMedicalDevice
	/// ,IfcOutlet
	/// ,IfcSanitaryTerminal
	/// ,IfcSpaceHeater
	/// ,IfcStackTerminal
	/// ,IfcWasteTerminal))
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowTerminal : IfcDistributionFlowElement, Global.IfcFlowTerminal
	{
		public IfcFlowTerminal() : base()
		{
		}
		public IfcFlowTerminal(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTerminalType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAirTerminalType
	/// ,IfcAudioVisualApplianceType
	/// ,IfcCommunicationsApplianceType
	/// ,IfcElectricApplianceType
	/// ,IfcFireSuppressionTerminalType
	/// ,IfcLampType
	/// ,IfcLightFixtureType
	/// ,IfcMedicalDeviceType
	/// ,IfcOutletType
	/// ,IfcSanitaryTerminalType
	/// ,IfcSpaceHeaterType
	/// ,IfcStackTerminalType
	/// ,IfcWasteTerminalType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowTerminalType : IfcDistributionFlowElementType, Global.IfcFlowTerminalType
	{
		public IfcFlowTerminalType() : base()
		{
		}
		public IfcFlowTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTreatmentDevice
	/// SUPERTYPE OF (ONEOF
	/// (IfcDuctSilencer
	/// ,IfcFilter
	/// ,IfcInterceptor))
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowTreatmentDevice : IfcDistributionFlowElement, Global.IfcFlowTreatmentDevice
	{
		public IfcFlowTreatmentDevice() : base()
		{
		}
		public IfcFlowTreatmentDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTreatmentDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDuctSilencerType
	/// ,IfcFilterType
	/// ,IfcInterceptorType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowTreatmentDeviceType : IfcDistributionFlowElementType, Global.IfcFlowTreatmentDeviceType
	{
		public IfcFlowTreatmentDeviceType() : base()
		{
		}
		public IfcFlowTreatmentDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFooting
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcFootingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT EXISTS(PredefinedType) OR
	/// (PredefinedType <> IfcFootingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFootingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCFOOTINGTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFooting : IfcBuildingElement, Global.IfcFooting
	{
		public virtual IfcFootingTypeEnum? PredefinedType { get; set; }
		public IfcFooting() : base()
		{
		}
		public IfcFooting(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcFootingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcFootingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFootingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFootingType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcFootingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcFootingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFootingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFootingType : IfcBuildingElementType, Global.IfcFootingType
	{
		public virtual IfcFootingTypeEnum? PredefinedType { get; set; }
		public IfcFootingType() : base()
		{
		}
		public IfcFootingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFootingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFootingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFootingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFurnishingElement
	/// SUPERTYPE OF (ONEOF
	/// (IfcFurniture
	/// ,IfcSystemFurnitureElement))
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFurnishingElement : IfcElement, Global.IfcFurnishingElement
	{
		public IfcFurnishingElement() : base()
		{
		}
		public IfcFurnishingElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFurnishingElementType
	/// SUPERTYPE OF (ONEOF
	/// (IfcFurnitureType
	/// ,IfcSystemFurnitureElementType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public class IfcFurnishingElementType : IfcElementType, Global.IfcFurnishingElementType
	{
		public IfcFurnishingElementType() : base()
		{
		}
		public IfcFurnishingElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFurniture
	/// SUBTYPE OF (IfcFurnishingElement);
	/// PredefinedType : OPTIONAL IfcFurnitureTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcFurnitureTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFurnitureTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCFURNITURETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFurniture : IfcFurnishingElement, Global.IfcFurniture
	{
		public virtual IfcFurnitureTypeEnum? PredefinedType { get; set; }
		public IfcFurniture() : base()
		{
		}
		public IfcFurniture(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcFurnitureTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcFurnitureTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFurnitureTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFurnitureType
	/// SUBTYPE OF (IfcFurnishingElementType);
	/// AssemblyPlace : IfcAssemblyPlaceEnum;
	/// PredefinedType : OPTIONAL IfcFurnitureTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcFurnitureTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFurnitureTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFurnitureType : IfcFurnishingElementType, Global.IfcFurnitureType
	{
		public virtual IfcAssemblyPlaceEnum? AssemblyPlace { get; set; }
		public virtual IfcFurnitureTypeEnum? PredefinedType { get; set; }
		public IfcFurnitureType() : base()
		{
		}
		public IfcFurnitureType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcAssemblyPlaceEnum? AssemblyPlace, IfcFurnitureTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.AssemblyPlace = AssemblyPlace;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				AssemblyPlace,
				PredefinedType
			};
		}
		public virtual Global.IfcAssemblyPlaceEnum? _AssemblyPlace
		{
			get
			{
				return AssemblyPlace;
			}
			set
			{
				if(value is IfcAssemblyPlaceEnum val)
				{
					AssemblyPlace = val;
				}
				else if(value == null)
				{
					AssemblyPlace = null;
				}
			}
		}
		public virtual Global.IfcFurnitureTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcFurnitureTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGeographicElement
	/// SUBTYPE OF (IfcElement);
	/// PredefinedType : OPTIONAL IfcGeographicElementTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcGeographicElementTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcGeographicElementTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCGEOGRAPHICELEMENTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcGeographicElement : IfcElement, Global.IfcGeographicElement
	{
		public virtual IfcGeographicElementTypeEnum? PredefinedType { get; set; }
		public IfcGeographicElement() : base()
		{
		}
		public IfcGeographicElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcGeographicElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcGeographicElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcGeographicElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGeographicElementType
	/// SUBTYPE OF (IfcElementType);
	/// PredefinedType : IfcGeographicElementTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcGeographicElementTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcGeographicElementTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcGeographicElementType : IfcElementType, Global.IfcGeographicElementType
	{
		public virtual IfcGeographicElementTypeEnum? PredefinedType { get; set; }
		public IfcGeographicElementType() : base()
		{
		}
		public IfcGeographicElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcGeographicElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcGeographicElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcGeographicElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricCurveSet
	/// SUBTYPE OF (IfcGeometricSet);
	/// WHERE
	/// NoSurfaces : SIZEOF(QUERY(Temp <* SELF\IfcGeometricSet.Elements |
	/// 'IFC4.IFCSURFACE' IN TYPEOF(Temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcGeometricCurveSet : IfcGeometricSet, Global.IfcGeometricCurveSet
	{
		public IfcGeometricCurveSet() : base()
		{
		}
		public IfcGeometricCurveSet(List<IfcGeometricSetSelect>? Elements) : base (Elements)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Elements
			};
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricRepresentationContext
	/// SUPERTYPE OF (ONEOF
	/// (IfcGeometricRepresentationSubContext))
	/// SUBTYPE OF (IfcRepresentationContext);
	/// CoordinateSpaceDimension : IfcDimensionCount;
	/// Precision : OPTIONAL IfcReal;
	/// WorldCoordinateSystem : IfcAxis2Placement;
	/// TrueNorth : OPTIONAL IfcDirection;
	/// INVERSE
	/// HasSubContexts : SET [0:?] OF IfcGeometricRepresentationSubContext FOR ParentContext;
	/// HasCoordinateOperation : SET [0:1] OF IfcCoordinateOperation FOR SourceCRS;
	/// WHERE
	/// North2D : NOT(EXISTS(TrueNorth)) OR (HIINDEX(TrueNorth.DirectionRatios) = 2);
	/// END_ENTITY;
	/// <summary>
	public class IfcGeometricRepresentationContext : IfcRepresentationContext, IfcCoordinateReferenceSystemSelect, Global.IfcGeometricRepresentationContext
	{
		public virtual IfcDimensionCount? CoordinateSpaceDimension { get; set; }
		public virtual IfcReal? Precision { get; set; }
		public virtual IfcAxis2Placement? WorldCoordinateSystem { get; set; }
		public virtual IfcDirection? TrueNorth { get; set; }
		public List<IfcGeometricRepresentationSubContext>? HasSubContexts {get{return Model?.GetItems<IfcGeometricRepresentationSubContext>().Where(x => x.ParentContext != null && x.ParentContext == this).ToList();}}
		public List<IfcCoordinateOperation>? HasCoordinateOperation {get{return Model?.GetItems<IfcCoordinateOperation>().Where(x => x.SourceCRS != null && x.SourceCRS == this).ToList();}}
		public IfcGeometricRepresentationContext() : base()
		{
		}
		public IfcGeometricRepresentationContext(IfcLabel? ContextIdentifier, IfcLabel? ContextType, IfcDimensionCount? CoordinateSpaceDimension, IfcReal? Precision, IfcAxis2Placement? WorldCoordinateSystem, IfcDirection? TrueNorth) : base (ContextIdentifier, ContextType)
		{
			this.CoordinateSpaceDimension = CoordinateSpaceDimension;
			this.Precision = Precision;
			this.WorldCoordinateSystem = WorldCoordinateSystem;
			this.TrueNorth = TrueNorth;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextIdentifier,
				ContextType,
				CoordinateSpaceDimension,
				Precision,
				WorldCoordinateSystem,
				TrueNorth
			};
		}
		public virtual Global.IfcDimensionCount? _CoordinateSpaceDimension
		{
			get
			{
				return CoordinateSpaceDimension;
			}
			set
			{
				if(value is IfcDimensionCount val)
				{
					CoordinateSpaceDimension = val;
				}
				else if(value == null)
				{
					CoordinateSpaceDimension = null;
				}
			}
		}
		public virtual Global.IfcReal? _Precision
		{
			get
			{
				return Precision;
			}
			set
			{
				if(value is IfcReal val)
				{
					Precision = val;
				}
				else if(value == null)
				{
					Precision = null;
				}
			}
		}
		public virtual Global.IfcAxis2Placement? _WorldCoordinateSystem
		{
			get
			{
				return WorldCoordinateSystem;
			}
			set
			{
				if(value is IfcAxis2Placement val)
				{
					WorldCoordinateSystem = val;
				}
				else if(value == null)
				{
					WorldCoordinateSystem = null;
				}
			}
		}
		public virtual Global.IfcDirection? _TrueNorth
		{
			get
			{
				return TrueNorth;
			}
			set
			{
				if(value is IfcDirection val)
				{
					TrueNorth = val;
				}
				else if(value == null)
				{
					TrueNorth = null;
				}
			}
		}
		public virtual List<Global.IfcGeometricRepresentationSubContext>? _HasSubContexts
		{
			get
			{
				if(HasSubContexts != null)
				{
					List<Global.IfcGeometricRepresentationSubContext>? items = new List<Global.IfcGeometricRepresentationSubContext>();
					foreach (IfcGeometricRepresentationSubContext item in HasSubContexts)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcCoordinateOperation>? _HasCoordinateOperation
		{
			get
			{
				if(HasCoordinateOperation != null)
				{
					List<Global.IfcCoordinateOperation>? items = new List<Global.IfcCoordinateOperation>();
					foreach (IfcCoordinateOperation item in HasCoordinateOperation)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricRepresentationItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAnnotationFillArea
	/// ,IfcBooleanResult
	/// ,IfcBoundingBox
	/// ,IfcCartesianPointList
	/// ,IfcCartesianTransformationOperator
	/// ,IfcCompositeCurveSegment
	/// ,IfcCsgPrimitive3D
	/// ,IfcCurve
	/// ,IfcDirection
	/// ,IfcFaceBasedSurfaceModel
	/// ,IfcFillAreaStyleHatching
	/// ,IfcFillAreaStyleTiles
	/// ,IfcGeometricSet
	/// ,IfcHalfSpaceSolid
	/// ,IfcLightSource
	/// ,IfcPlacement
	/// ,IfcPlanarExtent
	/// ,IfcPoint
	/// ,IfcSectionedSpine
	/// ,IfcShellBasedSurfaceModel
	/// ,IfcSolidModel
	/// ,IfcSurface
	/// ,IfcTessellatedItem
	/// ,IfcTextLiteral
	/// ,IfcVector))
	/// SUBTYPE OF (IfcRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcGeometricRepresentationItem : IfcRepresentationItem, Global.IfcGeometricRepresentationItem
	{
		public IfcGeometricRepresentationItem() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricRepresentationSubContext
	/// SUBTYPE OF (IfcGeometricRepresentationContext);
	/// ParentContext : IfcGeometricRepresentationContext;
	/// TargetScale : OPTIONAL IfcPositiveRatioMeasure;
	/// TargetView : IfcGeometricProjectionEnum;
	/// UserDefinedTargetView : OPTIONAL IfcLabel;
	/// DERIVE
	/// SELF\IfcGeometricRepresentationContext.WorldCoordinateSystem : IfcAxis2Placement := ParentContext.WorldCoordinateSystem;
	/// SELF\IfcGeometricRepresentationContext.CoordinateSpaceDimension : IfcDimensionCount := ParentContext.CoordinateSpaceDimension;
	/// SELF\IfcGeometricRepresentationContext.TrueNorth : IfcDirection := NVL(ParentContext.TrueNorth, IfcConvertDirectionInto2D(SELF\IfcGeometricRepresentationContext.WorldCoordinateSystem.P[2]));
	/// SELF\IfcGeometricRepresentationContext.Precision : IfcReal := NVL(ParentContext.Precision,1.E-5);
	/// WHERE
	/// ParentNoSub : NOT('IFC4.IFCGEOMETRICREPRESENTATIONSUBCONTEXT' IN TYPEOF(ParentContext));
	/// UserTargetProvided : (TargetView <> IfcGeometricProjectionEnum.USERDEFINED) OR
	/// ((TargetView =  IfcGeometricProjectionEnum.USERDEFINED) AND EXISTS(UserDefinedTargetView));
	/// NoCoordOperation : SIZEOF(SELF\IfcGeometricRepresentationContext.HasCoordinateOperation) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcGeometricRepresentationSubContext : IfcGeometricRepresentationContext, Global.IfcGeometricRepresentationSubContext
	{
		public virtual IfcGeometricRepresentationContext? ParentContext { get; set; }
		public virtual IfcPositiveRatioMeasure? TargetScale { get; set; }
		public virtual IfcGeometricProjectionEnum? TargetView { get; set; }
		public virtual IfcLabel? UserDefinedTargetView { get; set; }
		//DERIVE
		public override IfcAxis2Placement? WorldCoordinateSystem {get {return null;}}
		//DERIVE
		public override IfcDimensionCount? CoordinateSpaceDimension {get {return null;}}
		//DERIVE
		public override IfcDirection? TrueNorth {get {return null;}}
		//DERIVE
		public override IfcReal? Precision {get {return null;}}
		public IfcGeometricRepresentationSubContext() : base()
		{
		}
		public IfcGeometricRepresentationSubContext(IfcLabel? ContextIdentifier, IfcLabel? ContextType, IfcDimensionCount? CoordinateSpaceDimension, IfcReal? Precision, IfcAxis2Placement? WorldCoordinateSystem, IfcDirection? TrueNorth, IfcGeometricRepresentationContext? ParentContext, IfcPositiveRatioMeasure? TargetScale, IfcGeometricProjectionEnum? TargetView, IfcLabel? UserDefinedTargetView) : base (ContextIdentifier, ContextType, CoordinateSpaceDimension, Precision, WorldCoordinateSystem, TrueNorth)
		{
			this.ParentContext = ParentContext;
			this.TargetScale = TargetScale;
			this.TargetView = TargetView;
			this.UserDefinedTargetView = UserDefinedTargetView;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextIdentifier,
				ContextType,
				CoordinateSpaceDimension,
				Precision,
				WorldCoordinateSystem,
				TrueNorth,
				ParentContext,
				TargetScale,
				TargetView,
				UserDefinedTargetView
			};
		}
		public virtual Global.IfcGeometricRepresentationContext? _ParentContext
		{
			get
			{
				return ParentContext;
			}
			set
			{
				if(value is IfcGeometricRepresentationContext val)
				{
					ParentContext = val;
				}
				else if(value == null)
				{
					ParentContext = null;
				}
			}
		}
		public virtual Global.IfcPositiveRatioMeasure? _TargetScale
		{
			get
			{
				return TargetScale;
			}
			set
			{
				if(value is IfcPositiveRatioMeasure val)
				{
					TargetScale = val;
				}
				else if(value == null)
				{
					TargetScale = null;
				}
			}
		}
		public virtual Global.IfcGeometricProjectionEnum? _TargetView
		{
			get
			{
				return TargetView;
			}
			set
			{
				if(value is IfcGeometricProjectionEnum val)
				{
					TargetView = val;
				}
				else if(value == null)
				{
					TargetView = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedTargetView
		{
			get
			{
				return UserDefinedTargetView;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedTargetView = val;
				}
				else if(value == null)
				{
					UserDefinedTargetView = null;
				}
			}
		}
		public override Global.IfcAxis2Placement? _WorldCoordinateSystem
		{
			get
			{
				return WorldCoordinateSystem;
			}
		}
		public override Global.IfcDimensionCount? _CoordinateSpaceDimension
		{
			get
			{
				return CoordinateSpaceDimension;
			}
		}
		public override Global.IfcDirection? _TrueNorth
		{
			get
			{
				return TrueNorth;
			}
		}
		public override Global.IfcReal? _Precision
		{
			get
			{
				return Precision;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricSet
	/// SUPERTYPE OF (ONEOF
	/// (IfcGeometricCurveSet))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Elements : SET [1:?] OF IfcGeometricSetSelect;
	/// DERIVE
	/// Dim : IfcDimensionCount := Elements[1].Dim;
	/// WHERE
	/// ConsistentDim : SIZEOF(QUERY(Temp <* Elements |
	/// Temp.Dim <> Elements[1].Dim))
	/// = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcGeometricSet : IfcGeometricRepresentationItem, Global.IfcGeometricSet
	{
		public virtual List<IfcGeometricSetSelect>? Elements { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcGeometricSet() : base()
		{
		}
		public IfcGeometricSet(List<IfcGeometricSetSelect>? Elements) : base ()
		{
			this.Elements = Elements;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Elements
			};
		}
		public virtual List<Global.IfcGeometricSetSelect>? _Elements
		{
			get
			{
				if(Elements != null)
				{
					List<Global.IfcGeometricSetSelect>? items = new List<Global.IfcGeometricSetSelect>();
					foreach (IfcGeometricSetSelect item in Elements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Elements = null;
				}
				else
				{
					Elements = new List<IfcGeometricSetSelect>();
					foreach(var val in value)
					{
						if(val is IfcGeometricSetSelect v)
						{
							Elements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGrid
	/// SUBTYPE OF (IfcProduct);
	/// UAxes : LIST [1:?] OF UNIQUE IfcGridAxis;
	/// VAxes : LIST [1:?] OF UNIQUE IfcGridAxis;
	/// WAxes : OPTIONAL LIST [1:?] OF UNIQUE IfcGridAxis;
	/// PredefinedType : OPTIONAL IfcGridTypeEnum;
	/// INVERSE
	/// ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
	/// WHERE
	/// HasPlacement : EXISTS(SELF\IfcProduct.ObjectPlacement);
	/// END_ENTITY;
	/// <summary>
	public class IfcGrid : IfcProduct, Global.IfcGrid
	{
		public virtual List<IfcGridAxis>? UAxes { get; set; }
		public virtual List<IfcGridAxis>? VAxes { get; set; }
		public virtual List<IfcGridAxis>? WAxes { get; set; }
		public virtual IfcGridTypeEnum? PredefinedType { get; set; }
		public List<IfcRelContainedInSpatialStructure>? ContainedInStructure {get{return Model?.GetItems<IfcRelContainedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList();}}
		public IfcGrid() : base()
		{
		}
		public IfcGrid(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, List<IfcGridAxis>? UAxes, List<IfcGridAxis>? VAxes, List<IfcGridAxis>? WAxes, IfcGridTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.UAxes = UAxes;
			this.VAxes = VAxes;
			this.WAxes = WAxes;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				UAxes,
				VAxes,
				WAxes,
				PredefinedType
			};
		}
		public virtual List<Global.IfcGridAxis>? _UAxes
		{
			get
			{
				if(UAxes != null)
				{
					List<Global.IfcGridAxis>? items = new List<Global.IfcGridAxis>();
					foreach (IfcGridAxis item in UAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					UAxes = null;
				}
				else
				{
					UAxes = new List<IfcGridAxis>();
					foreach(var val in value)
					{
						if(val is IfcGridAxis v)
						{
							UAxes.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcGridAxis>? _VAxes
		{
			get
			{
				if(VAxes != null)
				{
					List<Global.IfcGridAxis>? items = new List<Global.IfcGridAxis>();
					foreach (IfcGridAxis item in VAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					VAxes = null;
				}
				else
				{
					VAxes = new List<IfcGridAxis>();
					foreach(var val in value)
					{
						if(val is IfcGridAxis v)
						{
							VAxes.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcGridAxis>? _WAxes
		{
			get
			{
				if(WAxes != null)
				{
					List<Global.IfcGridAxis>? items = new List<Global.IfcGridAxis>();
					foreach (IfcGridAxis item in WAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					WAxes = null;
				}
				else
				{
					WAxes = new List<IfcGridAxis>();
					foreach(var val in value)
					{
						if(val is IfcGridAxis v)
						{
							WAxes.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcGridTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcGridTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual List<Global.IfcRelContainedInSpatialStructure>? _ContainedInStructure
		{
			get
			{
				if(ContainedInStructure != null)
				{
					List<Global.IfcRelContainedInSpatialStructure>? items = new List<Global.IfcRelContainedInSpatialStructure>();
					foreach (IfcRelContainedInSpatialStructure item in ContainedInStructure)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGridAxis;
	/// AxisTag : OPTIONAL IfcLabel;
	/// AxisCurve : IfcCurve;
	/// SameSense : IfcBoolean;
	/// INVERSE
	/// PartOfW : SET [0:1] OF IfcGrid FOR WAxes;
	/// PartOfV : SET [0:1] OF IfcGrid FOR VAxes;
	/// PartOfU : SET [0:1] OF IfcGrid FOR UAxes;
	/// HasIntersections : SET [0:?] OF IfcVirtualGridIntersection FOR IntersectingAxes;
	/// WHERE
	/// WR1 : AxisCurve.Dim = 2;
	/// WR2 : (SIZEOF(PartOfU) = 1) XOR (SIZEOF(PartOfV) = 1) XOR (SIZEOF(PartOfW) = 1);
	/// END_ENTITY;
	/// <summary>
	public class IfcGridAxis : Ifc_Entity, Global.IfcGridAxis
	{
		public virtual IfcLabel? AxisTag { get; set; }
		public virtual IfcCurve? AxisCurve { get; set; }
		public virtual IfcBoolean? SameSense { get; set; }
		public List<IfcGrid>? PartOfW {get{return Model?.GetItems<IfcGrid>().Where(x => x.WAxes != null && x.WAxes.Contains(this)).ToList();}}
		public List<IfcGrid>? PartOfV {get{return Model?.GetItems<IfcGrid>().Where(x => x.VAxes != null && x.VAxes.Contains(this)).ToList();}}
		public List<IfcGrid>? PartOfU {get{return Model?.GetItems<IfcGrid>().Where(x => x.UAxes != null && x.UAxes.Contains(this)).ToList();}}
		public List<IfcVirtualGridIntersection>? HasIntersections {get{return Model?.GetItems<IfcVirtualGridIntersection>().Where(x => x.IntersectingAxes != null && x.IntersectingAxes.Contains(this)).ToList();}}
		public IfcGridAxis() : base()
		{
		}
		public IfcGridAxis(IfcLabel? AxisTag, IfcCurve? AxisCurve, IfcBoolean? SameSense) : base ()
		{
			this.AxisTag = AxisTag;
			this.AxisCurve = AxisCurve;
			this.SameSense = SameSense;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				AxisTag,
				AxisCurve,
				SameSense
			};
		}
		public virtual Global.IfcLabel? _AxisTag
		{
			get
			{
				return AxisTag;
			}
			set
			{
				if(value is IfcLabel val)
				{
					AxisTag = val;
				}
				else if(value == null)
				{
					AxisTag = null;
				}
			}
		}
		public virtual Global.IfcCurve? _AxisCurve
		{
			get
			{
				return AxisCurve;
			}
			set
			{
				if(value is IfcCurve val)
				{
					AxisCurve = val;
				}
				else if(value == null)
				{
					AxisCurve = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _SameSense
		{
			get
			{
				return SameSense;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					SameSense = val;
				}
				else if(value == null)
				{
					SameSense = null;
				}
			}
		}
		public virtual List<Global.IfcGrid>? _PartOfW
		{
			get
			{
				if(PartOfW != null)
				{
					List<Global.IfcGrid>? items = new List<Global.IfcGrid>();
					foreach (IfcGrid item in PartOfW)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcGrid>? _PartOfV
		{
			get
			{
				if(PartOfV != null)
				{
					List<Global.IfcGrid>? items = new List<Global.IfcGrid>();
					foreach (IfcGrid item in PartOfV)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcGrid>? _PartOfU
		{
			get
			{
				if(PartOfU != null)
				{
					List<Global.IfcGrid>? items = new List<Global.IfcGrid>();
					foreach (IfcGrid item in PartOfU)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcVirtualGridIntersection>? _HasIntersections
		{
			get
			{
				if(HasIntersections != null)
				{
					List<Global.IfcVirtualGridIntersection>? items = new List<Global.IfcVirtualGridIntersection>();
					foreach (IfcVirtualGridIntersection item in HasIntersections)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGridPlacement
	/// SUBTYPE OF (IfcObjectPlacement);
	/// PlacementLocation : IfcVirtualGridIntersection;
	/// PlacementRefDirection : OPTIONAL IfcGridPlacementDirectionSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcGridPlacement : IfcObjectPlacement, Global.IfcGridPlacement
	{
		public virtual IfcVirtualGridIntersection? PlacementLocation { get; set; }
		public virtual IfcGridPlacementDirectionSelect? PlacementRefDirection { get; set; }
		public IfcGridPlacement() : base()
		{
		}
		public IfcGridPlacement(IfcVirtualGridIntersection? PlacementLocation, IfcGridPlacementDirectionSelect? PlacementRefDirection) : base ()
		{
			this.PlacementLocation = PlacementLocation;
			this.PlacementRefDirection = PlacementRefDirection;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				PlacementLocation,
				PlacementRefDirection
			};
		}
		public virtual Global.IfcVirtualGridIntersection? _PlacementLocation
		{
			get
			{
				return PlacementLocation;
			}
			set
			{
				if(value is IfcVirtualGridIntersection val)
				{
					PlacementLocation = val;
				}
				else if(value == null)
				{
					PlacementLocation = null;
				}
			}
		}
		public virtual Global.IfcGridPlacementDirectionSelect? _PlacementRefDirection
		{
			get
			{
				return PlacementRefDirection;
			}
			set
			{
				if(value is IfcGridPlacementDirectionSelect val)
				{
					PlacementRefDirection = val;
				}
				else if(value == null)
				{
					PlacementRefDirection = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGroup
	/// SUPERTYPE OF (ONEOF
	/// (IfcAsset
	/// ,IfcInventory
	/// ,IfcStructuralLoadGroup
	/// ,IfcStructuralResultGroup
	/// ,IfcSystem))
	/// SUBTYPE OF (IfcObject);
	/// INVERSE
	/// IsGroupedBy : SET [0:?] OF IfcRelAssignsToGroup FOR RelatingGroup;
	/// END_ENTITY;
	/// <summary>
	public class IfcGroup : IfcObject, Global.IfcGroup
	{
		public List<IfcRelAssignsToGroup>? IsGroupedBy {get{return Model?.GetItems<IfcRelAssignsToGroup>().Where(x => x.RelatingGroup != null && x.RelatingGroup == this).ToList();}}
		public IfcGroup() : base()
		{
		}
		public IfcGroup(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
		public virtual List<Global.IfcRelAssignsToGroup>? _IsGroupedBy
		{
			get
			{
				if(IsGroupedBy != null)
				{
					List<Global.IfcRelAssignsToGroup>? items = new List<Global.IfcRelAssignsToGroup>();
					foreach (IfcRelAssignsToGroup item in IsGroupedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcHalfSpaceSolid
	/// SUPERTYPE OF (ONEOF
	/// (IfcBoxedHalfSpace
	/// ,IfcPolygonalBoundedHalfSpace))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// BaseSurface : IfcSurface;
	/// AgreementFlag : IfcBoolean;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcHalfSpaceSolid : IfcGeometricRepresentationItem, IfcBooleanOperand, Global.IfcHalfSpaceSolid
	{
		public virtual IfcSurface? BaseSurface { get; set; }
		public virtual IfcBoolean? AgreementFlag { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcHalfSpaceSolid() : base()
		{
		}
		public IfcHalfSpaceSolid(IfcSurface? BaseSurface, IfcBoolean? AgreementFlag) : base ()
		{
			this.BaseSurface = BaseSurface;
			this.AgreementFlag = AgreementFlag;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BaseSurface,
				AgreementFlag
			};
		}
		public virtual Global.IfcSurface? _BaseSurface
		{
			get
			{
				return BaseSurface;
			}
			set
			{
				if(value is IfcSurface val)
				{
					BaseSurface = val;
				}
				else if(value == null)
				{
					BaseSurface = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _AgreementFlag
		{
			get
			{
				return AgreementFlag;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					AgreementFlag = val;
				}
				else if(value == null)
				{
					AgreementFlag = null;
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcHeatExchanger
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcHeatExchangerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcHeatExchangerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcHeatExchangerTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCHEATEXCHANGERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcHeatExchanger : IfcEnergyConversionDevice, Global.IfcHeatExchanger
	{
		public virtual IfcHeatExchangerTypeEnum? PredefinedType { get; set; }
		public IfcHeatExchanger() : base()
		{
		}
		public IfcHeatExchanger(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcHeatExchangerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcHeatExchangerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcHeatExchangerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcHeatExchangerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcHeatExchangerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcHeatExchangerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcHeatExchangerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcHeatExchangerType : IfcEnergyConversionDeviceType, Global.IfcHeatExchangerType
	{
		public virtual IfcHeatExchangerTypeEnum? PredefinedType { get; set; }
		public IfcHeatExchangerType() : base()
		{
		}
		public IfcHeatExchangerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcHeatExchangerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcHeatExchangerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcHeatExchangerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcHumidifier
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcHumidifierTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcHumidifierTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcHumidifierTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCHUMIDIFIERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcHumidifier : IfcEnergyConversionDevice, Global.IfcHumidifier
	{
		public virtual IfcHumidifierTypeEnum? PredefinedType { get; set; }
		public IfcHumidifier() : base()
		{
		}
		public IfcHumidifier(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcHumidifierTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcHumidifierTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcHumidifierTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcHumidifierType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcHumidifierTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcHumidifierTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcHumidifierTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcHumidifierType : IfcEnergyConversionDeviceType, Global.IfcHumidifierType
	{
		public virtual IfcHumidifierTypeEnum? PredefinedType { get; set; }
		public IfcHumidifierType() : base()
		{
		}
		public IfcHumidifierType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcHumidifierTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcHumidifierTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcHumidifierTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// OverallWidth : IfcPositiveLengthMeasure;
	/// OverallDepth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// FlangeEdgeRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// FlangeSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// WHERE
	/// ValidFlangeThickness : (2. * FlangeThickness) < OverallDepth;
	/// ValidWebThickness : WebThickness < OverallWidth;
	/// ValidFilletRadius : NOT(EXISTS(FilletRadius)) OR
	/// ((FilletRadius <= (OverallWidth - WebThickness)/2.) AND
	/// (FilletRadius <= (OverallDepth - (2. * FlangeThickness))/2.));
	/// END_ENTITY;
	/// <summary>
	public class IfcIShapeProfileDef : IfcParameterizedProfileDef, Global.IfcIShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? OverallWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? OverallDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IfcNonNegativeLengthMeasure? FilletRadius { get; set; }
		public virtual IfcNonNegativeLengthMeasure? FlangeEdgeRadius { get; set; }
		public virtual IfcPlaneAngleMeasure? FlangeSlope { get; set; }
		public IfcIShapeProfileDef() : base()
		{
		}
		public IfcIShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? OverallWidth, IfcPositiveLengthMeasure? OverallDepth, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? FlangeThickness, IfcNonNegativeLengthMeasure? FilletRadius, IfcNonNegativeLengthMeasure? FlangeEdgeRadius, IfcPlaneAngleMeasure? FlangeSlope) : base (ProfileType, ProfileName, Position)
		{
			this.OverallWidth = OverallWidth;
			this.OverallDepth = OverallDepth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.FlangeEdgeRadius = FlangeEdgeRadius;
			this.FlangeSlope = FlangeSlope;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				OverallWidth,
				OverallDepth,
				WebThickness,
				FlangeThickness,
				FilletRadius,
				FlangeEdgeRadius,
				FlangeSlope
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallWidth
		{
			get
			{
				return OverallWidth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					OverallWidth = val;
				}
				else if(value == null)
				{
					OverallWidth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallDepth
		{
			get
			{
				return OverallDepth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					OverallDepth = val;
				}
				else if(value == null)
				{
					OverallDepth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _WebThickness
		{
			get
			{
				return WebThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					WebThickness = val;
				}
				else if(value == null)
				{
					WebThickness = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _FlangeThickness
		{
			get
			{
				return FlangeThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FlangeThickness = val;
				}
				else if(value == null)
				{
					FlangeThickness = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _FilletRadius
		{
			get
			{
				return FilletRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					FilletRadius = val;
				}
				else if(value == null)
				{
					FilletRadius = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _FlangeEdgeRadius
		{
			get
			{
				return FlangeEdgeRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					FlangeEdgeRadius = val;
				}
				else if(value == null)
				{
					FlangeEdgeRadius = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _FlangeSlope
		{
			get
			{
				return FlangeSlope;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					FlangeSlope = val;
				}
				else if(value == null)
				{
					FlangeSlope = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcImageTexture
	/// SUBTYPE OF (IfcSurfaceTexture);
	/// URLReference : IfcURIReference;
	/// END_ENTITY;
	/// <summary>
	public class IfcImageTexture : IfcSurfaceTexture, Global.IfcImageTexture
	{
		public virtual IfcURIReference? URLReference { get; set; }
		public IfcImageTexture() : base()
		{
		}
		public IfcImageTexture(IfcBoolean? RepeatS, IfcBoolean? RepeatT, IfcIdentifier? Mode, IfcCartesianTransformationOperator2D? TextureTransform, List<IfcIdentifier>? Parameter, IfcURIReference? URLReference) : base (RepeatS, RepeatT, Mode, TextureTransform, Parameter)
		{
			this.URLReference = URLReference;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RepeatS,
				RepeatT,
				Mode,
				TextureTransform,
				Parameter,
				URLReference
			};
		}
		public virtual Global.IfcURIReference? _URLReference
		{
			get
			{
				return URLReference;
			}
			set
			{
				if(value is IfcURIReference val)
				{
					URLReference = val;
				}
				else if(value == null)
				{
					URLReference = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIndexedColourMap
	/// SUBTYPE OF (IfcPresentationItem);
	/// MappedTo : IfcTessellatedFaceSet;
	/// Opacity : OPTIONAL IfcNormalisedRatioMeasure;
	/// Colours : IfcColourRgbList;
	/// ColourIndex : LIST [1:?] OF IfcPositiveInteger;
	/// END_ENTITY;
	/// <summary>
	public class IfcIndexedColourMap : IfcPresentationItem, Global.IfcIndexedColourMap
	{
		public virtual IfcTessellatedFaceSet? MappedTo { get; set; }
		public virtual IfcNormalisedRatioMeasure? Opacity { get; set; }
		public virtual IfcColourRgbList? Colours { get; set; }
		public virtual List<IfcPositiveInteger>? ColourIndex { get; set; }
		public IfcIndexedColourMap() : base()
		{
		}
		public IfcIndexedColourMap(IfcTessellatedFaceSet? MappedTo, IfcNormalisedRatioMeasure? Opacity, IfcColourRgbList? Colours, List<IfcPositiveInteger>? ColourIndex) : base ()
		{
			this.MappedTo = MappedTo;
			this.Opacity = Opacity;
			this.Colours = Colours;
			this.ColourIndex = ColourIndex;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				MappedTo,
				Opacity,
				Colours,
				ColourIndex
			};
		}
		public virtual Global.IfcTessellatedFaceSet? _MappedTo
		{
			get
			{
				return MappedTo;
			}
			set
			{
				if(value is IfcTessellatedFaceSet val)
				{
					MappedTo = val;
				}
				else if(value == null)
				{
					MappedTo = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _Opacity
		{
			get
			{
				return Opacity;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					Opacity = val;
				}
				else if(value == null)
				{
					Opacity = null;
				}
			}
		}
		public virtual Global.IfcColourRgbList? _Colours
		{
			get
			{
				return Colours;
			}
			set
			{
				if(value is IfcColourRgbList val)
				{
					Colours = val;
				}
				else if(value == null)
				{
					Colours = null;
				}
			}
		}
		public virtual List<Global.IfcPositiveInteger>? _ColourIndex
		{
			get
			{
				if(ColourIndex != null)
				{
					List<Global.IfcPositiveInteger>? items = new List<Global.IfcPositiveInteger>();
					foreach (IfcPositiveInteger item in ColourIndex)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ColourIndex = null;
				}
				else
				{
					ColourIndex = new List<IfcPositiveInteger>();
					foreach(var val in value)
					{
						if(val is IfcPositiveInteger v)
						{
							ColourIndex.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIndexedPolyCurve
	/// SUBTYPE OF (IfcBoundedCurve);
	/// Points : IfcCartesianPointList;
	/// Segments : OPTIONAL LIST [1:?] OF IfcSegmentIndexSelect;
	/// SelfIntersect : OPTIONAL IfcBoolean;
	/// WHERE
	/// Consecutive : (SIZEOF(Segments) = 0) OR IfcConsecutiveSegments(Segments);
	/// END_ENTITY;
	/// <summary>
	public class IfcIndexedPolyCurve : IfcBoundedCurve, Global.IfcIndexedPolyCurve
	{
		public virtual IfcCartesianPointList? Points { get; set; }
		public virtual List<IfcSegmentIndexSelect>? Segments { get; set; }
		public virtual IfcBoolean? SelfIntersect { get; set; }
		public IfcIndexedPolyCurve() : base()
		{
		}
		public IfcIndexedPolyCurve(IfcCartesianPointList? Points, List<IfcSegmentIndexSelect>? Segments, IfcBoolean? SelfIntersect) : base ()
		{
			this.Points = Points;
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Points,
				Segments,
				SelfIntersect
			};
		}
		public virtual Global.IfcCartesianPointList? _Points
		{
			get
			{
				return Points;
			}
			set
			{
				if(value is IfcCartesianPointList val)
				{
					Points = val;
				}
				else if(value == null)
				{
					Points = null;
				}
			}
		}
		public virtual List<Global.IfcSegmentIndexSelect>? _Segments
		{
			get
			{
				if(Segments != null)
				{
					List<Global.IfcSegmentIndexSelect>? items = new List<Global.IfcSegmentIndexSelect>();
					foreach (IfcSegmentIndexSelect item in Segments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Segments = null;
				}
				else
				{
					Segments = new List<IfcSegmentIndexSelect>();
					foreach(var val in value)
					{
						if(val is IfcSegmentIndexSelect v)
						{
							Segments.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcBoolean? _SelfIntersect
		{
			get
			{
				return SelfIntersect;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					SelfIntersect = val;
				}
				else if(value == null)
				{
					SelfIntersect = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIndexedPolygonalFace
	/// SUPERTYPE OF (ONEOF
	/// (IfcIndexedPolygonalFaceWithVoids))
	/// SUBTYPE OF (IfcTessellatedItem);
	/// CoordIndex : LIST [3:?] OF IfcPositiveInteger;
	/// INVERSE
	/// ToFaceSet : SET [1:?] OF IfcPolygonalFaceSet FOR Faces;
	/// END_ENTITY;
	/// <summary>
	public class IfcIndexedPolygonalFace : IfcTessellatedItem, Global.IfcIndexedPolygonalFace
	{
		public virtual List<IfcPositiveInteger>? CoordIndex { get; set; }
		public List<IfcPolygonalFaceSet>? ToFaceSet {get{return Model?.GetItems<IfcPolygonalFaceSet>().Where(x => x.Faces != null && x.Faces.Contains(this)).ToList();}}
		public IfcIndexedPolygonalFace() : base()
		{
		}
		public IfcIndexedPolygonalFace(List<IfcPositiveInteger>? CoordIndex) : base ()
		{
			this.CoordIndex = CoordIndex;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CoordIndex
			};
		}
		public virtual List<Global.IfcPositiveInteger>? _CoordIndex
		{
			get
			{
				if(CoordIndex != null)
				{
					List<Global.IfcPositiveInteger>? items = new List<Global.IfcPositiveInteger>();
					foreach (IfcPositiveInteger item in CoordIndex)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CoordIndex = null;
				}
				else
				{
					CoordIndex = new List<IfcPositiveInteger>();
					foreach(var val in value)
					{
						if(val is IfcPositiveInteger v)
						{
							CoordIndex.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcPolygonalFaceSet>? _ToFaceSet
		{
			get
			{
				if(ToFaceSet != null)
				{
					List<Global.IfcPolygonalFaceSet>? items = new List<Global.IfcPolygonalFaceSet>();
					foreach (IfcPolygonalFaceSet item in ToFaceSet)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIndexedPolygonalFaceWithVoids
	/// SUBTYPE OF (IfcIndexedPolygonalFace);
	/// InnerCoordIndices : LIST [1:?] OF LIST [3:?] OF UNIQUE IfcPositiveInteger;
	/// END_ENTITY;
	/// <summary>
	public class IfcIndexedPolygonalFaceWithVoids : IfcIndexedPolygonalFace, Global.IfcIndexedPolygonalFaceWithVoids
	{
		public virtual List<List<IfcPositiveInteger>>? InnerCoordIndices { get; set; }
		public IfcIndexedPolygonalFaceWithVoids() : base()
		{
		}
		public IfcIndexedPolygonalFaceWithVoids(List<IfcPositiveInteger>? CoordIndex, List<List<IfcPositiveInteger>>? InnerCoordIndices) : base (CoordIndex)
		{
			this.InnerCoordIndices = InnerCoordIndices;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CoordIndex,
				InnerCoordIndices
			};
		}
		public virtual List<List<Global.IfcPositiveInteger>>? _InnerCoordIndices
		{
			get
			{
				if(InnerCoordIndices != null)
				{
					List<List<Global.IfcPositiveInteger>>? items = new List<List<Global.IfcPositiveInteger>>();
					foreach (List<IfcPositiveInteger> item1s in InnerCoordIndices)
					{
						List<Global.IfcPositiveInteger>? resultItems = new List<Global.IfcPositiveInteger>();
						foreach (IfcPositiveInteger item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					InnerCoordIndices = null;
				}
				else
				{
					InnerCoordIndices = new List<List<IfcPositiveInteger>>();
					foreach(var vals in value)
					{
						if(vals != null)
						{
							List<IfcPositiveInteger> items = new List<IfcPositiveInteger>();
							foreach(var val in vals)
							{
								if(val is IfcPositiveInteger v)
								{
									items.Add(v);
								}
							}
							InnerCoordIndices.Add(items);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIndexedTextureMap
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcIndexedTriangleTextureMap))
	/// SUBTYPE OF (IfcTextureCoordinate);
	/// MappedTo : IfcTessellatedFaceSet;
	/// TexCoords : IfcTextureVertexList;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcIndexedTextureMap : IfcTextureCoordinate, Global.IfcIndexedTextureMap
	{
		public virtual IfcTessellatedFaceSet? MappedTo { get; set; }
		public virtual IfcTextureVertexList? TexCoords { get; set; }
		public IfcIndexedTextureMap() : base()
		{
		}
		public IfcIndexedTextureMap(List<IfcSurfaceTexture>? Maps, IfcTessellatedFaceSet? MappedTo, IfcTextureVertexList? TexCoords) : base (Maps)
		{
			this.MappedTo = MappedTo;
			this.TexCoords = TexCoords;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Maps,
				MappedTo,
				TexCoords
			};
		}
		public virtual Global.IfcTessellatedFaceSet? _MappedTo
		{
			get
			{
				return MappedTo;
			}
			set
			{
				if(value is IfcTessellatedFaceSet val)
				{
					MappedTo = val;
				}
				else if(value == null)
				{
					MappedTo = null;
				}
			}
		}
		public virtual Global.IfcTextureVertexList? _TexCoords
		{
			get
			{
				return TexCoords;
			}
			set
			{
				if(value is IfcTextureVertexList val)
				{
					TexCoords = val;
				}
				else if(value == null)
				{
					TexCoords = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIndexedTriangleTextureMap
	/// SUBTYPE OF (IfcIndexedTextureMap);
	/// TexCoordIndex : OPTIONAL LIST [1:?] OF LIST [3:3] OF IfcPositiveInteger;
	/// END_ENTITY;
	/// <summary>
	public class IfcIndexedTriangleTextureMap : IfcIndexedTextureMap, Global.IfcIndexedTriangleTextureMap
	{
		public virtual List<List<IfcPositiveInteger>>? TexCoordIndex { get; set; }
		public IfcIndexedTriangleTextureMap() : base()
		{
		}
		public IfcIndexedTriangleTextureMap(List<IfcSurfaceTexture>? Maps, IfcTessellatedFaceSet? MappedTo, IfcTextureVertexList? TexCoords, List<List<IfcPositiveInteger>>? TexCoordIndex) : base (Maps, MappedTo, TexCoords)
		{
			this.TexCoordIndex = TexCoordIndex;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Maps,
				MappedTo,
				TexCoords,
				TexCoordIndex
			};
		}
		public virtual List<List<Global.IfcPositiveInteger>>? _TexCoordIndex
		{
			get
			{
				if(TexCoordIndex != null)
				{
					List<List<Global.IfcPositiveInteger>>? items = new List<List<Global.IfcPositiveInteger>>();
					foreach (List<IfcPositiveInteger> item1s in TexCoordIndex)
					{
						List<Global.IfcPositiveInteger>? resultItems = new List<Global.IfcPositiveInteger>();
						foreach (IfcPositiveInteger item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					TexCoordIndex = null;
				}
				else
				{
					TexCoordIndex = new List<List<IfcPositiveInteger>>();
					foreach(var vals in value)
					{
						if(vals != null)
						{
							List<IfcPositiveInteger> items = new List<IfcPositiveInteger>();
							foreach(var val in vals)
							{
								if(val is IfcPositiveInteger v)
								{
									items.Add(v);
								}
							}
							TexCoordIndex.Add(items);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcInterceptor
	/// SUBTYPE OF (IfcFlowTreatmentDevice);
	/// PredefinedType : OPTIONAL IfcInterceptorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcInterceptorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcInterceptorTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCINTERCEPTORTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcInterceptor : IfcFlowTreatmentDevice, Global.IfcInterceptor
	{
		public virtual IfcInterceptorTypeEnum? PredefinedType { get; set; }
		public IfcInterceptor() : base()
		{
		}
		public IfcInterceptor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcInterceptorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcInterceptorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcInterceptorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcInterceptorType
	/// SUBTYPE OF (IfcFlowTreatmentDeviceType);
	/// PredefinedType : IfcInterceptorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcInterceptorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcInterceptorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcInterceptorType : IfcFlowTreatmentDeviceType, Global.IfcInterceptorType
	{
		public virtual IfcInterceptorTypeEnum? PredefinedType { get; set; }
		public IfcInterceptorType() : base()
		{
		}
		public IfcInterceptorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcInterceptorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcInterceptorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcInterceptorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIntersectionCurve
	/// SUBTYPE OF (IfcSurfaceCurve);
	/// WHERE
	/// TwoPCurves : SIZEOF(SELF\IfcSurfaceCurve.AssociatedGeometry) = 2;
	/// DistinctSurfaces : IfcAssociatedSurface(SELF\IfcSurfaceCurve.AssociatedGeometry[1]) <> IfcAssociatedSurface(SELF\IfcSurfaceCurve.AssociatedGeometry[2]);
	/// END_ENTITY;
	/// <summary>
	public class IfcIntersectionCurve : IfcSurfaceCurve, Global.IfcIntersectionCurve
	{
		public IfcIntersectionCurve() : base()
		{
		}
		public IfcIntersectionCurve(IfcCurve? Curve3D, List<IfcPcurve>? AssociatedGeometry, IfcPreferredSurfaceCurveRepresentation? MasterRepresentation) : base (Curve3D, AssociatedGeometry, MasterRepresentation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Curve3D,
				AssociatedGeometry,
				MasterRepresentation
			};
		}
	}
	/// <summary>
	/// ENTITY IfcInventory
	/// SUBTYPE OF (IfcGroup);
	/// PredefinedType : OPTIONAL IfcInventoryTypeEnum;
	/// Jurisdiction : OPTIONAL IfcActorSelect;
	/// ResponsiblePersons : OPTIONAL SET [1:?] OF IfcPerson;
	/// LastUpdateDate : OPTIONAL IfcDate;
	/// CurrentValue : OPTIONAL IfcCostValue;
	/// OriginalValue : OPTIONAL IfcCostValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcInventory : IfcGroup, Global.IfcInventory
	{
		public virtual IfcInventoryTypeEnum? PredefinedType { get; set; }
		public virtual IfcActorSelect? Jurisdiction { get; set; }
		public virtual List<IfcPerson>? ResponsiblePersons { get; set; }
		public virtual IfcDate? LastUpdateDate { get; set; }
		public virtual IfcCostValue? CurrentValue { get; set; }
		public virtual IfcCostValue? OriginalValue { get; set; }
		public IfcInventory() : base()
		{
		}
		public IfcInventory(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcInventoryTypeEnum? PredefinedType, IfcActorSelect? Jurisdiction, List<IfcPerson>? ResponsiblePersons, IfcDate? LastUpdateDate, IfcCostValue? CurrentValue, IfcCostValue? OriginalValue) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.PredefinedType = PredefinedType;
			this.Jurisdiction = Jurisdiction;
			this.ResponsiblePersons = ResponsiblePersons;
			this.LastUpdateDate = LastUpdateDate;
			this.CurrentValue = CurrentValue;
			this.OriginalValue = OriginalValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				PredefinedType,
				Jurisdiction,
				ResponsiblePersons,
				LastUpdateDate,
				CurrentValue,
				OriginalValue
			};
		}
		public virtual Global.IfcInventoryTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcInventoryTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcActorSelect? _Jurisdiction
		{
			get
			{
				return Jurisdiction;
			}
			set
			{
				if(value is IfcActorSelect val)
				{
					Jurisdiction = val;
				}
				else if(value == null)
				{
					Jurisdiction = null;
				}
			}
		}
		public virtual List<Global.IfcPerson>? _ResponsiblePersons
		{
			get
			{
				if(ResponsiblePersons != null)
				{
					List<Global.IfcPerson>? items = new List<Global.IfcPerson>();
					foreach (IfcPerson item in ResponsiblePersons)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ResponsiblePersons = null;
				}
				else
				{
					ResponsiblePersons = new List<IfcPerson>();
					foreach(var val in value)
					{
						if(val is IfcPerson v)
						{
							ResponsiblePersons.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcDate? _LastUpdateDate
		{
			get
			{
				return LastUpdateDate;
			}
			set
			{
				if(value is IfcDate val)
				{
					LastUpdateDate = val;
				}
				else if(value == null)
				{
					LastUpdateDate = null;
				}
			}
		}
		public virtual Global.IfcCostValue? _CurrentValue
		{
			get
			{
				return CurrentValue;
			}
			set
			{
				if(value is IfcCostValue val)
				{
					CurrentValue = val;
				}
				else if(value == null)
				{
					CurrentValue = null;
				}
			}
		}
		public virtual Global.IfcCostValue? _OriginalValue
		{
			get
			{
				return OriginalValue;
			}
			set
			{
				if(value is IfcCostValue val)
				{
					OriginalValue = val;
				}
				else if(value == null)
				{
					OriginalValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIrregularTimeSeries
	/// SUBTYPE OF (IfcTimeSeries);
	/// Values : LIST [1:?] OF IfcIrregularTimeSeriesValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcIrregularTimeSeries : IfcTimeSeries, Global.IfcIrregularTimeSeries
	{
		public virtual List<IfcIrregularTimeSeriesValue>? Values { get; set; }
		public IfcIrregularTimeSeries() : base()
		{
		}
		public IfcIrregularTimeSeries(IfcLabel? Name, IfcText? Description, IfcDateTime? StartTime, IfcDateTime? EndTime, IfcTimeSeriesDataTypeEnum? TimeSeriesDataType, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcUnit? Unit, List<IfcIrregularTimeSeriesValue>? Values) : base (Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit)
		{
			this.Values = Values;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				StartTime,
				EndTime,
				TimeSeriesDataType,
				DataOrigin,
				UserDefinedDataOrigin,
				Unit,
				Values
			};
		}
		public virtual List<Global.IfcIrregularTimeSeriesValue>? _Values
		{
			get
			{
				if(Values != null)
				{
					List<Global.IfcIrregularTimeSeriesValue>? items = new List<Global.IfcIrregularTimeSeriesValue>();
					foreach (IfcIrregularTimeSeriesValue item in Values)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Values = null;
				}
				else
				{
					Values = new List<IfcIrregularTimeSeriesValue>();
					foreach(var val in value)
					{
						if(val is IfcIrregularTimeSeriesValue v)
						{
							Values.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIrregularTimeSeriesValue;
	/// TimeStamp : IfcDateTime;
	/// ListValues : LIST [1:?] OF IfcValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcIrregularTimeSeriesValue : Ifc_Entity, Global.IfcIrregularTimeSeriesValue
	{
		public virtual IfcDateTime? TimeStamp { get; set; }
		public virtual List<IfcValue>? ListValues { get; set; }
		public IfcIrregularTimeSeriesValue() : base()
		{
		}
		public IfcIrregularTimeSeriesValue(IfcDateTime? TimeStamp, List<IfcValue>? ListValues) : base ()
		{
			this.TimeStamp = TimeStamp;
			this.ListValues = ListValues;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TimeStamp,
				ListValues
			};
		}
		public virtual Global.IfcDateTime? _TimeStamp
		{
			get
			{
				return TimeStamp;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					TimeStamp = val;
				}
				else if(value == null)
				{
					TimeStamp = null;
				}
			}
		}
		public virtual List<Global.IfcValue>? _ListValues
		{
			get
			{
				if(ListValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in ListValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ListValues = null;
				}
				else
				{
					ListValues = new List<IfcValue>();
					foreach(var val in value)
					{
						if(val is IfcValue v)
						{
							ListValues.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcJunctionBox
	/// SUBTYPE OF (IfcFlowFitting);
	/// PredefinedType : OPTIONAL IfcJunctionBoxTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcJunctionBoxTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcJunctionBoxTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCJUNCTIONBOXTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcJunctionBox : IfcFlowFitting, Global.IfcJunctionBox
	{
		public virtual IfcJunctionBoxTypeEnum? PredefinedType { get; set; }
		public IfcJunctionBox() : base()
		{
		}
		public IfcJunctionBox(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcJunctionBoxTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcJunctionBoxTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcJunctionBoxTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcJunctionBoxType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcJunctionBoxTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcJunctionBoxTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcJunctionBoxTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcJunctionBoxType : IfcFlowFittingType, Global.IfcJunctionBoxType
	{
		public virtual IfcJunctionBoxTypeEnum? PredefinedType { get; set; }
		public IfcJunctionBoxType() : base()
		{
		}
		public IfcJunctionBoxType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcJunctionBoxTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcJunctionBoxTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcJunctionBoxTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// Width : OPTIONAL IfcPositiveLengthMeasure;
	/// Thickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// EdgeRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// LegSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// WHERE
	/// ValidThickness : (Thickness < Depth) AND (NOT(EXISTS(Width)) OR (Thickness < Width));
	/// END_ENTITY;
	/// <summary>
	public class IfcLShapeProfileDef : IfcParameterizedProfileDef, Global.IfcLShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public virtual IfcPositiveLengthMeasure? Width { get; set; }
		public virtual IfcPositiveLengthMeasure? Thickness { get; set; }
		public virtual IfcNonNegativeLengthMeasure? FilletRadius { get; set; }
		public virtual IfcNonNegativeLengthMeasure? EdgeRadius { get; set; }
		public virtual IfcPlaneAngleMeasure? LegSlope { get; set; }
		public IfcLShapeProfileDef() : base()
		{
		}
		public IfcLShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Depth, IfcPositiveLengthMeasure? Width, IfcPositiveLengthMeasure? Thickness, IfcNonNegativeLengthMeasure? FilletRadius, IfcNonNegativeLengthMeasure? EdgeRadius, IfcPlaneAngleMeasure? LegSlope) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.Width = Width;
			this.Thickness = Thickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.LegSlope = LegSlope;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Depth,
				Width,
				Thickness,
				FilletRadius,
				EdgeRadius,
				LegSlope
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _Width
		{
			get
			{
				return Width;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Width = val;
				}
				else if(value == null)
				{
					Width = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _Thickness
		{
			get
			{
				return Thickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Thickness = val;
				}
				else if(value == null)
				{
					Thickness = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _FilletRadius
		{
			get
			{
				return FilletRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					FilletRadius = val;
				}
				else if(value == null)
				{
					FilletRadius = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _EdgeRadius
		{
			get
			{
				return EdgeRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					EdgeRadius = val;
				}
				else if(value == null)
				{
					EdgeRadius = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _LegSlope
		{
			get
			{
				return LegSlope;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					LegSlope = val;
				}
				else if(value == null)
				{
					LegSlope = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLaborResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// PredefinedType : OPTIONAL IfcLaborResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcLaborResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcLaborResourceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcLaborResource : IfcConstructionResource, Global.IfcLaborResource
	{
		public virtual IfcLaborResourceTypeEnum? PredefinedType { get; set; }
		public IfcLaborResource() : base()
		{
		}
		public IfcLaborResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription, IfcResourceTime? Usage, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcLaborResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription,
				Usage,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcLaborResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcLaborResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLaborResourceType
	/// SUBTYPE OF (IfcConstructionResourceType);
	/// PredefinedType : IfcLaborResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcLaborResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcLaborResourceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcTypeResource.ResourceType));
	/// END_ENTITY;
	/// <summary>
	public class IfcLaborResourceType : IfcConstructionResourceType, Global.IfcLaborResourceType
	{
		public virtual IfcLaborResourceTypeEnum? PredefinedType { get; set; }
		public IfcLaborResourceType() : base()
		{
		}
		public IfcLaborResourceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ResourceType, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcLaborResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ResourceType,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcLaborResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcLaborResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLagTime
	/// SUBTYPE OF (IfcSchedulingTime);
	/// LagValue : IfcTimeOrRatioSelect;
	/// DurationType : IfcTaskDurationEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcLagTime : IfcSchedulingTime, Global.IfcLagTime
	{
		public virtual IfcTimeOrRatioSelect? LagValue { get; set; }
		public virtual IfcTaskDurationEnum? DurationType { get; set; }
		public IfcLagTime() : base()
		{
		}
		public IfcLagTime(IfcLabel? Name, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcTimeOrRatioSelect? LagValue, IfcTaskDurationEnum? DurationType) : base (Name, DataOrigin, UserDefinedDataOrigin)
		{
			this.LagValue = LagValue;
			this.DurationType = DurationType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DataOrigin,
				UserDefinedDataOrigin,
				LagValue,
				DurationType
			};
		}
		public virtual Global.IfcTimeOrRatioSelect? _LagValue
		{
			get
			{
				return LagValue;
			}
			set
			{
				if(value is IfcTimeOrRatioSelect val)
				{
					LagValue = val;
				}
				else if(value == null)
				{
					LagValue = null;
				}
			}
		}
		public virtual Global.IfcTaskDurationEnum? _DurationType
		{
			get
			{
				return DurationType;
			}
			set
			{
				if(value is IfcTaskDurationEnum val)
				{
					DurationType = val;
				}
				else if(value == null)
				{
					DurationType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLamp
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcLampTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcLampTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcLampTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCLAMPTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcLamp : IfcFlowTerminal, Global.IfcLamp
	{
		public virtual IfcLampTypeEnum? PredefinedType { get; set; }
		public IfcLamp() : base()
		{
		}
		public IfcLamp(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLampTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcLampTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcLampTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLampType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcLampTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcLampTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcLampTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcLampType : IfcFlowTerminalType, Global.IfcLampType
	{
		public virtual IfcLampTypeEnum? PredefinedType { get; set; }
		public IfcLampType() : base()
		{
		}
		public IfcLampType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcLampTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcLampTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcLampTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLibraryInformation
	/// SUBTYPE OF (IfcExternalInformation);
	/// Name : IfcLabel;
	/// Version : OPTIONAL IfcLabel;
	/// Publisher : OPTIONAL IfcActorSelect;
	/// VersionDate : OPTIONAL IfcDateTime;
	/// Location : OPTIONAL IfcURIReference;
	/// Description : OPTIONAL IfcText;
	/// INVERSE
	/// LibraryInfoForObjects : SET [0:?] OF IfcRelAssociatesLibrary FOR RelatingLibrary;
	/// HasLibraryReferences : SET [0:?] OF IfcLibraryReference FOR ReferencedLibrary;
	/// END_ENTITY;
	/// <summary>
	public class IfcLibraryInformation : IfcExternalInformation, IfcLibrarySelect, Global.IfcLibraryInformation
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcLabel? Version { get; set; }
		public virtual IfcActorSelect? Publisher { get; set; }
		public virtual IfcDateTime? VersionDate { get; set; }
		public virtual IfcURIReference? Location { get; set; }
		public virtual IfcText? Description { get; set; }
		public List<IfcRelAssociatesLibrary>? LibraryInfoForObjects {get{return Model?.GetItems<IfcRelAssociatesLibrary>().Where(x => x.RelatingLibrary != null && x.RelatingLibrary == this).ToList();}}
		public List<IfcLibraryReference>? HasLibraryReferences {get{return Model?.GetItems<IfcLibraryReference>().Where(x => x.ReferencedLibrary != null && x.ReferencedLibrary == this).ToList();}}
		public IfcLibraryInformation() : base()
		{
		}
		public IfcLibraryInformation(IfcLabel? Name, IfcLabel? Version, IfcActorSelect? Publisher, IfcDateTime? VersionDate, IfcURIReference? Location, IfcText? Description) : base ()
		{
			this.Name = Name;
			this.Version = Version;
			this.Publisher = Publisher;
			this.VersionDate = VersionDate;
			this.Location = Location;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Version,
				Publisher,
				VersionDate,
				Location,
				Description
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Version
		{
			get
			{
				return Version;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Version = val;
				}
				else if(value == null)
				{
					Version = null;
				}
			}
		}
		public virtual Global.IfcActorSelect? _Publisher
		{
			get
			{
				return Publisher;
			}
			set
			{
				if(value is IfcActorSelect val)
				{
					Publisher = val;
				}
				else if(value == null)
				{
					Publisher = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _VersionDate
		{
			get
			{
				return VersionDate;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					VersionDate = val;
				}
				else if(value == null)
				{
					VersionDate = null;
				}
			}
		}
		public virtual Global.IfcURIReference? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IfcURIReference val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssociatesLibrary>? _LibraryInfoForObjects
		{
			get
			{
				if(LibraryInfoForObjects != null)
				{
					List<Global.IfcRelAssociatesLibrary>? items = new List<Global.IfcRelAssociatesLibrary>();
					foreach (IfcRelAssociatesLibrary item in LibraryInfoForObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcLibraryReference>? _HasLibraryReferences
		{
			get
			{
				if(HasLibraryReferences != null)
				{
					List<Global.IfcLibraryReference>? items = new List<Global.IfcLibraryReference>();
					foreach (IfcLibraryReference item in HasLibraryReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLibraryReference
	/// SUBTYPE OF (IfcExternalReference);
	/// Description : OPTIONAL IfcText;
	/// Language : OPTIONAL IfcLanguageId;
	/// ReferencedLibrary : OPTIONAL IfcLibraryInformation;
	/// INVERSE
	/// LibraryRefForObjects : SET [0:?] OF IfcRelAssociatesLibrary FOR RelatingLibrary;
	/// END_ENTITY;
	/// <summary>
	public class IfcLibraryReference : IfcExternalReference, IfcLibrarySelect, Global.IfcLibraryReference
	{
		public virtual IfcText? Description { get; set; }
		public virtual IfcLanguageId? Language { get; set; }
		public virtual IfcLibraryInformation? ReferencedLibrary { get; set; }
		public List<IfcRelAssociatesLibrary>? LibraryRefForObjects {get{return Model?.GetItems<IfcRelAssociatesLibrary>().Where(x => x.RelatingLibrary != null && x.RelatingLibrary == this).ToList();}}
		public IfcLibraryReference() : base()
		{
		}
		public IfcLibraryReference(IfcURIReference? Location, IfcIdentifier? Identification, IfcLabel? Name, IfcText? Description, IfcLanguageId? Language, IfcLibraryInformation? ReferencedLibrary) : base (Location, Identification, Name)
		{
			this.Description = Description;
			this.Language = Language;
			this.ReferencedLibrary = ReferencedLibrary;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				Identification,
				Name,
				Description,
				Language,
				ReferencedLibrary
			};
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcLanguageId? _Language
		{
			get
			{
				return Language;
			}
			set
			{
				if(value is IfcLanguageId val)
				{
					Language = val;
				}
				else if(value == null)
				{
					Language = null;
				}
			}
		}
		public virtual Global.IfcLibraryInformation? _ReferencedLibrary
		{
			get
			{
				return ReferencedLibrary;
			}
			set
			{
				if(value is IfcLibraryInformation val)
				{
					ReferencedLibrary = val;
				}
				else if(value == null)
				{
					ReferencedLibrary = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssociatesLibrary>? _LibraryRefForObjects
		{
			get
			{
				if(LibraryRefForObjects != null)
				{
					List<Global.IfcRelAssociatesLibrary>? items = new List<Global.IfcRelAssociatesLibrary>();
					foreach (IfcRelAssociatesLibrary item in LibraryRefForObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightDistributionData;
	/// MainPlaneAngle : IfcPlaneAngleMeasure;
	/// SecondaryPlaneAngle : LIST [1:?] OF IfcPlaneAngleMeasure;
	/// LuminousIntensity : LIST [1:?] OF IfcLuminousIntensityDistributionMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightDistributionData : Ifc_Entity, Global.IfcLightDistributionData
	{
		public virtual IfcPlaneAngleMeasure? MainPlaneAngle { get; set; }
		public virtual List<IfcPlaneAngleMeasure>? SecondaryPlaneAngle { get; set; }
		public virtual List<IfcLuminousIntensityDistributionMeasure>? LuminousIntensity { get; set; }
		public IfcLightDistributionData() : base()
		{
		}
		public IfcLightDistributionData(IfcPlaneAngleMeasure? MainPlaneAngle, List<IfcPlaneAngleMeasure>? SecondaryPlaneAngle, List<IfcLuminousIntensityDistributionMeasure>? LuminousIntensity) : base ()
		{
			this.MainPlaneAngle = MainPlaneAngle;
			this.SecondaryPlaneAngle = SecondaryPlaneAngle;
			this.LuminousIntensity = LuminousIntensity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				MainPlaneAngle,
				SecondaryPlaneAngle,
				LuminousIntensity
			};
		}
		public virtual Global.IfcPlaneAngleMeasure? _MainPlaneAngle
		{
			get
			{
				return MainPlaneAngle;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					MainPlaneAngle = val;
				}
				else if(value == null)
				{
					MainPlaneAngle = null;
				}
			}
		}
		public virtual List<Global.IfcPlaneAngleMeasure>? _SecondaryPlaneAngle
		{
			get
			{
				if(SecondaryPlaneAngle != null)
				{
					List<Global.IfcPlaneAngleMeasure>? items = new List<Global.IfcPlaneAngleMeasure>();
					foreach (IfcPlaneAngleMeasure item in SecondaryPlaneAngle)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SecondaryPlaneAngle = null;
				}
				else
				{
					SecondaryPlaneAngle = new List<IfcPlaneAngleMeasure>();
					foreach(var val in value)
					{
						if(val is IfcPlaneAngleMeasure v)
						{
							SecondaryPlaneAngle.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcLuminousIntensityDistributionMeasure>? _LuminousIntensity
		{
			get
			{
				if(LuminousIntensity != null)
				{
					List<Global.IfcLuminousIntensityDistributionMeasure>? items = new List<Global.IfcLuminousIntensityDistributionMeasure>();
					foreach (IfcLuminousIntensityDistributionMeasure item in LuminousIntensity)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					LuminousIntensity = null;
				}
				else
				{
					LuminousIntensity = new List<IfcLuminousIntensityDistributionMeasure>();
					foreach(var val in value)
					{
						if(val is IfcLuminousIntensityDistributionMeasure v)
						{
							LuminousIntensity.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightFixture
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcLightFixtureTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcLightFixtureTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcLightFixtureTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCLIGHTFIXTURETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcLightFixture : IfcFlowTerminal, Global.IfcLightFixture
	{
		public virtual IfcLightFixtureTypeEnum? PredefinedType { get; set; }
		public IfcLightFixture() : base()
		{
		}
		public IfcLightFixture(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLightFixtureTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcLightFixtureTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcLightFixtureTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightFixtureType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcLightFixtureTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcLightFixtureTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcLightFixtureTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcLightFixtureType : IfcFlowTerminalType, Global.IfcLightFixtureType
	{
		public virtual IfcLightFixtureTypeEnum? PredefinedType { get; set; }
		public IfcLightFixtureType() : base()
		{
		}
		public IfcLightFixtureType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcLightFixtureTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcLightFixtureTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcLightFixtureTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightIntensityDistribution;
	/// LightDistributionCurve : IfcLightDistributionCurveEnum;
	/// DistributionData : LIST [1:?] OF IfcLightDistributionData;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightIntensityDistribution : Ifc_Entity, IfcLightDistributionDataSourceSelect, Global.IfcLightIntensityDistribution
	{
		public virtual IfcLightDistributionCurveEnum? LightDistributionCurve { get; set; }
		public virtual List<IfcLightDistributionData>? DistributionData { get; set; }
		public IfcLightIntensityDistribution() : base()
		{
		}
		public IfcLightIntensityDistribution(IfcLightDistributionCurveEnum? LightDistributionCurve, List<IfcLightDistributionData>? DistributionData) : base ()
		{
			this.LightDistributionCurve = LightDistributionCurve;
			this.DistributionData = DistributionData;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				LightDistributionCurve,
				DistributionData
			};
		}
		public virtual Global.IfcLightDistributionCurveEnum? _LightDistributionCurve
		{
			get
			{
				return LightDistributionCurve;
			}
			set
			{
				if(value is IfcLightDistributionCurveEnum val)
				{
					LightDistributionCurve = val;
				}
				else if(value == null)
				{
					LightDistributionCurve = null;
				}
			}
		}
		public virtual List<Global.IfcLightDistributionData>? _DistributionData
		{
			get
			{
				if(DistributionData != null)
				{
					List<Global.IfcLightDistributionData>? items = new List<Global.IfcLightDistributionData>();
					foreach (IfcLightDistributionData item in DistributionData)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					DistributionData = null;
				}
				else
				{
					DistributionData = new List<IfcLightDistributionData>();
					foreach(var val in value)
					{
						if(val is IfcLightDistributionData v)
						{
							DistributionData.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightSource
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcLightSourceAmbient
	/// ,IfcLightSourceDirectional
	/// ,IfcLightSourceGoniometric
	/// ,IfcLightSourcePositional))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Name : OPTIONAL IfcLabel;
	/// LightColour : IfcColourRgb;
	/// AmbientIntensity : OPTIONAL IfcNormalisedRatioMeasure;
	/// Intensity : OPTIONAL IfcNormalisedRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcLightSource : IfcGeometricRepresentationItem, Global.IfcLightSource
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcColourRgb? LightColour { get; set; }
		public virtual IfcNormalisedRatioMeasure? AmbientIntensity { get; set; }
		public virtual IfcNormalisedRatioMeasure? Intensity { get; set; }
		public IfcLightSource() : base()
		{
		}
		public IfcLightSource(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity) : base ()
		{
			this.Name = Name;
			this.LightColour = LightColour;
			this.AmbientIntensity = AmbientIntensity;
			this.Intensity = Intensity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcColourRgb? _LightColour
		{
			get
			{
				return LightColour;
			}
			set
			{
				if(value is IfcColourRgb val)
				{
					LightColour = val;
				}
				else if(value == null)
				{
					LightColour = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _AmbientIntensity
		{
			get
			{
				return AmbientIntensity;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					AmbientIntensity = val;
				}
				else if(value == null)
				{
					AmbientIntensity = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _Intensity
		{
			get
			{
				return Intensity;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					Intensity = val;
				}
				else if(value == null)
				{
					Intensity = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightSourceAmbient
	/// SUBTYPE OF (IfcLightSource);
	/// END_ENTITY;
	/// <summary>
	public class IfcLightSourceAmbient : IfcLightSource, Global.IfcLightSourceAmbient
	{
		public IfcLightSourceAmbient() : base()
		{
		}
		public IfcLightSourceAmbient(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity
			};
		}
	}
	/// <summary>
	/// ENTITY IfcLightSourceDirectional
	/// SUBTYPE OF (IfcLightSource);
	/// Orientation : IfcDirection;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightSourceDirectional : IfcLightSource, Global.IfcLightSourceDirectional
	{
		public virtual IfcDirection? Orientation { get; set; }
		public IfcLightSourceDirectional() : base()
		{
		}
		public IfcLightSourceDirectional(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity, IfcDirection? Orientation) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
			this.Orientation = Orientation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity,
				Orientation
			};
		}
		public virtual Global.IfcDirection? _Orientation
		{
			get
			{
				return Orientation;
			}
			set
			{
				if(value is IfcDirection val)
				{
					Orientation = val;
				}
				else if(value == null)
				{
					Orientation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightSourceGoniometric
	/// SUBTYPE OF (IfcLightSource);
	/// Position : IfcAxis2Placement3D;
	/// ColourAppearance : OPTIONAL IfcColourRgb;
	/// ColourTemperature : IfcThermodynamicTemperatureMeasure;
	/// LuminousFlux : IfcLuminousFluxMeasure;
	/// LightEmissionSource : IfcLightEmissionSourceEnum;
	/// LightDistributionDataSource : IfcLightDistributionDataSourceSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightSourceGoniometric : IfcLightSource, Global.IfcLightSourceGoniometric
	{
		public virtual IfcAxis2Placement3D? Position { get; set; }
		public virtual IfcColourRgb? ColourAppearance { get; set; }
		public virtual IfcThermodynamicTemperatureMeasure? ColourTemperature { get; set; }
		public virtual IfcLuminousFluxMeasure? LuminousFlux { get; set; }
		public virtual IfcLightEmissionSourceEnum? LightEmissionSource { get; set; }
		public virtual IfcLightDistributionDataSourceSelect? LightDistributionDataSource { get; set; }
		public IfcLightSourceGoniometric() : base()
		{
		}
		public IfcLightSourceGoniometric(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity, IfcAxis2Placement3D? Position, IfcColourRgb? ColourAppearance, IfcThermodynamicTemperatureMeasure? ColourTemperature, IfcLuminousFluxMeasure? LuminousFlux, IfcLightEmissionSourceEnum? LightEmissionSource, IfcLightDistributionDataSourceSelect? LightDistributionDataSource) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
			this.Position = Position;
			this.ColourAppearance = ColourAppearance;
			this.ColourTemperature = ColourTemperature;
			this.LuminousFlux = LuminousFlux;
			this.LightEmissionSource = LightEmissionSource;
			this.LightDistributionDataSource = LightDistributionDataSource;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity,
				Position,
				ColourAppearance,
				ColourTemperature,
				LuminousFlux,
				LightEmissionSource,
				LightDistributionDataSource
			};
		}
		public virtual Global.IfcAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IfcAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
		public virtual Global.IfcColourRgb? _ColourAppearance
		{
			get
			{
				return ColourAppearance;
			}
			set
			{
				if(value is IfcColourRgb val)
				{
					ColourAppearance = val;
				}
				else if(value == null)
				{
					ColourAppearance = null;
				}
			}
		}
		public virtual Global.IfcThermodynamicTemperatureMeasure? _ColourTemperature
		{
			get
			{
				return ColourTemperature;
			}
			set
			{
				if(value is IfcThermodynamicTemperatureMeasure val)
				{
					ColourTemperature = val;
				}
				else if(value == null)
				{
					ColourTemperature = null;
				}
			}
		}
		public virtual Global.IfcLuminousFluxMeasure? _LuminousFlux
		{
			get
			{
				return LuminousFlux;
			}
			set
			{
				if(value is IfcLuminousFluxMeasure val)
				{
					LuminousFlux = val;
				}
				else if(value == null)
				{
					LuminousFlux = null;
				}
			}
		}
		public virtual Global.IfcLightEmissionSourceEnum? _LightEmissionSource
		{
			get
			{
				return LightEmissionSource;
			}
			set
			{
				if(value is IfcLightEmissionSourceEnum val)
				{
					LightEmissionSource = val;
				}
				else if(value == null)
				{
					LightEmissionSource = null;
				}
			}
		}
		public virtual Global.IfcLightDistributionDataSourceSelect? _LightDistributionDataSource
		{
			get
			{
				return LightDistributionDataSource;
			}
			set
			{
				if(value is IfcLightDistributionDataSourceSelect val)
				{
					LightDistributionDataSource = val;
				}
				else if(value == null)
				{
					LightDistributionDataSource = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightSourcePositional
	/// SUPERTYPE OF (ONEOF
	/// (IfcLightSourceSpot))
	/// SUBTYPE OF (IfcLightSource);
	/// Position : IfcCartesianPoint;
	/// Radius : IfcPositiveLengthMeasure;
	/// ConstantAttenuation : IfcReal;
	/// DistanceAttenuation : IfcReal;
	/// QuadricAttenuation : IfcReal;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightSourcePositional : IfcLightSource, Global.IfcLightSourcePositional
	{
		public virtual IfcCartesianPoint? Position { get; set; }
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public virtual IfcReal? ConstantAttenuation { get; set; }
		public virtual IfcReal? DistanceAttenuation { get; set; }
		public virtual IfcReal? QuadricAttenuation { get; set; }
		public IfcLightSourcePositional() : base()
		{
		}
		public IfcLightSourcePositional(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity, IfcCartesianPoint? Position, IfcPositiveLengthMeasure? Radius, IfcReal? ConstantAttenuation, IfcReal? DistanceAttenuation, IfcReal? QuadricAttenuation) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
			this.Position = Position;
			this.Radius = Radius;
			this.ConstantAttenuation = ConstantAttenuation;
			this.DistanceAttenuation = DistanceAttenuation;
			this.QuadricAttenuation = QuadricAttenuation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity,
				Position,
				Radius,
				ConstantAttenuation,
				DistanceAttenuation,
				QuadricAttenuation
			};
		}
		public virtual Global.IfcCartesianPoint? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IfcCartesianPoint val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
		public virtual Global.IfcReal? _ConstantAttenuation
		{
			get
			{
				return ConstantAttenuation;
			}
			set
			{
				if(value is IfcReal val)
				{
					ConstantAttenuation = val;
				}
				else if(value == null)
				{
					ConstantAttenuation = null;
				}
			}
		}
		public virtual Global.IfcReal? _DistanceAttenuation
		{
			get
			{
				return DistanceAttenuation;
			}
			set
			{
				if(value is IfcReal val)
				{
					DistanceAttenuation = val;
				}
				else if(value == null)
				{
					DistanceAttenuation = null;
				}
			}
		}
		public virtual Global.IfcReal? _QuadricAttenuation
		{
			get
			{
				return QuadricAttenuation;
			}
			set
			{
				if(value is IfcReal val)
				{
					QuadricAttenuation = val;
				}
				else if(value == null)
				{
					QuadricAttenuation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightSourceSpot
	/// SUBTYPE OF (IfcLightSourcePositional);
	/// Orientation : IfcDirection;
	/// ConcentrationExponent : OPTIONAL IfcReal;
	/// SpreadAngle : IfcPositivePlaneAngleMeasure;
	/// BeamWidthAngle : IfcPositivePlaneAngleMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightSourceSpot : IfcLightSourcePositional, Global.IfcLightSourceSpot
	{
		public virtual IfcDirection? Orientation { get; set; }
		public virtual IfcReal? ConcentrationExponent { get; set; }
		public virtual IfcPositivePlaneAngleMeasure? SpreadAngle { get; set; }
		public virtual IfcPositivePlaneAngleMeasure? BeamWidthAngle { get; set; }
		public IfcLightSourceSpot() : base()
		{
		}
		public IfcLightSourceSpot(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity, IfcCartesianPoint? Position, IfcPositiveLengthMeasure? Radius, IfcReal? ConstantAttenuation, IfcReal? DistanceAttenuation, IfcReal? QuadricAttenuation, IfcDirection? Orientation, IfcReal? ConcentrationExponent, IfcPositivePlaneAngleMeasure? SpreadAngle, IfcPositivePlaneAngleMeasure? BeamWidthAngle) : base (Name, LightColour, AmbientIntensity, Intensity, Position, Radius, ConstantAttenuation, DistanceAttenuation, QuadricAttenuation)
		{
			this.Orientation = Orientation;
			this.ConcentrationExponent = ConcentrationExponent;
			this.SpreadAngle = SpreadAngle;
			this.BeamWidthAngle = BeamWidthAngle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity,
				Position,
				Radius,
				ConstantAttenuation,
				DistanceAttenuation,
				QuadricAttenuation,
				Orientation,
				ConcentrationExponent,
				SpreadAngle,
				BeamWidthAngle
			};
		}
		public virtual Global.IfcDirection? _Orientation
		{
			get
			{
				return Orientation;
			}
			set
			{
				if(value is IfcDirection val)
				{
					Orientation = val;
				}
				else if(value == null)
				{
					Orientation = null;
				}
			}
		}
		public virtual Global.IfcReal? _ConcentrationExponent
		{
			get
			{
				return ConcentrationExponent;
			}
			set
			{
				if(value is IfcReal val)
				{
					ConcentrationExponent = val;
				}
				else if(value == null)
				{
					ConcentrationExponent = null;
				}
			}
		}
		public virtual Global.IfcPositivePlaneAngleMeasure? _SpreadAngle
		{
			get
			{
				return SpreadAngle;
			}
			set
			{
				if(value is IfcPositivePlaneAngleMeasure val)
				{
					SpreadAngle = val;
				}
				else if(value == null)
				{
					SpreadAngle = null;
				}
			}
		}
		public virtual Global.IfcPositivePlaneAngleMeasure? _BeamWidthAngle
		{
			get
			{
				return BeamWidthAngle;
			}
			set
			{
				if(value is IfcPositivePlaneAngleMeasure val)
				{
					BeamWidthAngle = val;
				}
				else if(value == null)
				{
					BeamWidthAngle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLine
	/// SUBTYPE OF (IfcCurve);
	/// Pnt : IfcCartesianPoint;
	/// Dir : IfcVector;
	/// WHERE
	/// SameDim : Dir.Dim = Pnt.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IfcLine : IfcCurve, Global.IfcLine
	{
		public virtual IfcCartesianPoint? Pnt { get; set; }
		public virtual IfcVector? Dir { get; set; }
		public IfcLine() : base()
		{
		}
		public IfcLine(IfcCartesianPoint? Pnt, IfcVector? Dir) : base ()
		{
			this.Pnt = Pnt;
			this.Dir = Dir;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Pnt,
				Dir
			};
		}
		public virtual Global.IfcCartesianPoint? _Pnt
		{
			get
			{
				return Pnt;
			}
			set
			{
				if(value is IfcCartesianPoint val)
				{
					Pnt = val;
				}
				else if(value == null)
				{
					Pnt = null;
				}
			}
		}
		public virtual Global.IfcVector? _Dir
		{
			get
			{
				return Dir;
			}
			set
			{
				if(value is IfcVector val)
				{
					Dir = val;
				}
				else if(value == null)
				{
					Dir = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLocalPlacement
	/// SUBTYPE OF (IfcObjectPlacement);
	/// PlacementRelTo : OPTIONAL IfcObjectPlacement;
	/// RelativePlacement : IfcAxis2Placement;
	/// WHERE
	/// WR21 : IfcCorrectLocalPlacement(RelativePlacement, PlacementRelTo);
	/// END_ENTITY;
	/// <summary>
	public class IfcLocalPlacement : IfcObjectPlacement, Global.IfcLocalPlacement
	{
		public virtual IfcObjectPlacement? PlacementRelTo { get; set; }
		public virtual IfcAxis2Placement? RelativePlacement { get; set; }
		public IfcLocalPlacement() : base()
		{
		}
		public IfcLocalPlacement(IfcObjectPlacement? PlacementRelTo, IfcAxis2Placement? RelativePlacement) : base ()
		{
			this.PlacementRelTo = PlacementRelTo;
			this.RelativePlacement = RelativePlacement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				PlacementRelTo,
				RelativePlacement
			};
		}
		public virtual Global.IfcObjectPlacement? _PlacementRelTo
		{
			get
			{
				return PlacementRelTo;
			}
			set
			{
				if(value is IfcObjectPlacement val)
				{
					PlacementRelTo = val;
				}
				else if(value == null)
				{
					PlacementRelTo = null;
				}
			}
		}
		public virtual Global.IfcAxis2Placement? _RelativePlacement
		{
			get
			{
				return RelativePlacement;
			}
			set
			{
				if(value is IfcAxis2Placement val)
				{
					RelativePlacement = val;
				}
				else if(value == null)
				{
					RelativePlacement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLoop
	/// SUPERTYPE OF (ONEOF
	/// (IfcEdgeLoop
	/// ,IfcPolyLoop
	/// ,IfcVertexLoop))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public class IfcLoop : IfcTopologicalRepresentationItem, Global.IfcLoop
	{
		public IfcLoop() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcManifoldSolidBrep
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAdvancedBrep
	/// ,IfcFacetedBrep))
	/// SUBTYPE OF (IfcSolidModel);
	/// Outer : IfcClosedShell;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcManifoldSolidBrep : IfcSolidModel, Global.IfcManifoldSolidBrep
	{
		public virtual IfcClosedShell? Outer { get; set; }
		public IfcManifoldSolidBrep() : base()
		{
		}
		public IfcManifoldSolidBrep(IfcClosedShell? Outer) : base ()
		{
			this.Outer = Outer;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Outer
			};
		}
		public virtual Global.IfcClosedShell? _Outer
		{
			get
			{
				return Outer;
			}
			set
			{
				if(value is IfcClosedShell val)
				{
					Outer = val;
				}
				else if(value == null)
				{
					Outer = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMapConversion
	/// SUBTYPE OF (IfcCoordinateOperation);
	/// Eastings : IfcLengthMeasure;
	/// Northings : IfcLengthMeasure;
	/// OrthogonalHeight : IfcLengthMeasure;
	/// XAxisAbscissa : OPTIONAL IfcReal;
	/// XAxisOrdinate : OPTIONAL IfcReal;
	/// Scale : OPTIONAL IfcReal;
	/// END_ENTITY;
	/// <summary>
	public class IfcMapConversion : IfcCoordinateOperation, Global.IfcMapConversion
	{
		public virtual IfcLengthMeasure? Eastings { get; set; }
		public virtual IfcLengthMeasure? Northings { get; set; }
		public virtual IfcLengthMeasure? OrthogonalHeight { get; set; }
		public virtual IfcReal? XAxisAbscissa { get; set; }
		public virtual IfcReal? XAxisOrdinate { get; set; }
		public virtual IfcReal? Scale { get; set; }
		public IfcMapConversion() : base()
		{
		}
		public IfcMapConversion(IfcCoordinateReferenceSystemSelect? SourceCRS, IfcCoordinateReferenceSystem? TargetCRS, IfcLengthMeasure? Eastings, IfcLengthMeasure? Northings, IfcLengthMeasure? OrthogonalHeight, IfcReal? XAxisAbscissa, IfcReal? XAxisOrdinate, IfcReal? Scale) : base (SourceCRS, TargetCRS)
		{
			this.Eastings = Eastings;
			this.Northings = Northings;
			this.OrthogonalHeight = OrthogonalHeight;
			this.XAxisAbscissa = XAxisAbscissa;
			this.XAxisOrdinate = XAxisOrdinate;
			this.Scale = Scale;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SourceCRS,
				TargetCRS,
				Eastings,
				Northings,
				OrthogonalHeight,
				XAxisAbscissa,
				XAxisOrdinate,
				Scale
			};
		}
		public virtual Global.IfcLengthMeasure? _Eastings
		{
			get
			{
				return Eastings;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					Eastings = val;
				}
				else if(value == null)
				{
					Eastings = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _Northings
		{
			get
			{
				return Northings;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					Northings = val;
				}
				else if(value == null)
				{
					Northings = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _OrthogonalHeight
		{
			get
			{
				return OrthogonalHeight;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					OrthogonalHeight = val;
				}
				else if(value == null)
				{
					OrthogonalHeight = null;
				}
			}
		}
		public virtual Global.IfcReal? _XAxisAbscissa
		{
			get
			{
				return XAxisAbscissa;
			}
			set
			{
				if(value is IfcReal val)
				{
					XAxisAbscissa = val;
				}
				else if(value == null)
				{
					XAxisAbscissa = null;
				}
			}
		}
		public virtual Global.IfcReal? _XAxisOrdinate
		{
			get
			{
				return XAxisOrdinate;
			}
			set
			{
				if(value is IfcReal val)
				{
					XAxisOrdinate = val;
				}
				else if(value == null)
				{
					XAxisOrdinate = null;
				}
			}
		}
		public virtual Global.IfcReal? _Scale
		{
			get
			{
				return Scale;
			}
			set
			{
				if(value is IfcReal val)
				{
					Scale = val;
				}
				else if(value == null)
				{
					Scale = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMappedItem
	/// SUBTYPE OF (IfcRepresentationItem);
	/// MappingSource : IfcRepresentationMap;
	/// MappingTarget : IfcCartesianTransformationOperator;
	/// END_ENTITY;
	/// <summary>
	public class IfcMappedItem : IfcRepresentationItem, Global.IfcMappedItem
	{
		public virtual IfcRepresentationMap? MappingSource { get; set; }
		public virtual IfcCartesianTransformationOperator? MappingTarget { get; set; }
		public IfcMappedItem() : base()
		{
		}
		public IfcMappedItem(IfcRepresentationMap? MappingSource, IfcCartesianTransformationOperator? MappingTarget) : base ()
		{
			this.MappingSource = MappingSource;
			this.MappingTarget = MappingTarget;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				MappingSource,
				MappingTarget
			};
		}
		public virtual Global.IfcRepresentationMap? _MappingSource
		{
			get
			{
				return MappingSource;
			}
			set
			{
				if(value is IfcRepresentationMap val)
				{
					MappingSource = val;
				}
				else if(value == null)
				{
					MappingSource = null;
				}
			}
		}
		public virtual Global.IfcCartesianTransformationOperator? _MappingTarget
		{
			get
			{
				return MappingTarget;
			}
			set
			{
				if(value is IfcCartesianTransformationOperator val)
				{
					MappingTarget = val;
				}
				else if(value == null)
				{
					MappingTarget = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterial
	/// SUBTYPE OF (IfcMaterialDefinition);
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Category : OPTIONAL IfcLabel;
	/// INVERSE
	/// HasRepresentation : SET [0:1] OF IfcMaterialDefinitionRepresentation FOR RepresentedMaterial;
	/// IsRelatedWith : SET [0:?] OF IfcMaterialRelationship FOR RelatedMaterials;
	/// RelatesTo : SET [0:1] OF IfcMaterialRelationship FOR RelatingMaterial;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterial : IfcMaterialDefinition, Global.IfcMaterial
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcLabel? Category { get; set; }
		public List<IfcMaterialDefinitionRepresentation>? HasRepresentation {get{return Model?.GetItems<IfcMaterialDefinitionRepresentation>().Where(x => x.RepresentedMaterial != null && x.RepresentedMaterial == this).ToList();}}
		public List<IfcMaterialRelationship>? IsRelatedWith {get{return Model?.GetItems<IfcMaterialRelationship>().Where(x => x.RelatedMaterials != null && x.RelatedMaterials.Contains(this)).ToList();}}
		public List<IfcMaterialRelationship>? RelatesTo {get{return Model?.GetItems<IfcMaterialRelationship>().Where(x => x.RelatingMaterial != null && x.RelatingMaterial == this).ToList();}}
		public IfcMaterial() : base()
		{
		}
		public IfcMaterial(IfcLabel? Name, IfcText? Description, IfcLabel? Category) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.Category = Category;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Category
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Category
		{
			get
			{
				return Category;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Category = val;
				}
				else if(value == null)
				{
					Category = null;
				}
			}
		}
		public virtual List<Global.IfcMaterialDefinitionRepresentation>? _HasRepresentation
		{
			get
			{
				if(HasRepresentation != null)
				{
					List<Global.IfcMaterialDefinitionRepresentation>? items = new List<Global.IfcMaterialDefinitionRepresentation>();
					foreach (IfcMaterialDefinitionRepresentation item in HasRepresentation)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcMaterialRelationship>? _IsRelatedWith
		{
			get
			{
				if(IsRelatedWith != null)
				{
					List<Global.IfcMaterialRelationship>? items = new List<Global.IfcMaterialRelationship>();
					foreach (IfcMaterialRelationship item in IsRelatedWith)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcMaterialRelationship>? _RelatesTo
		{
			get
			{
				if(RelatesTo != null)
				{
					List<Global.IfcMaterialRelationship>? items = new List<Global.IfcMaterialRelationship>();
					foreach (IfcMaterialRelationship item in RelatesTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialClassificationRelationship;
	/// MaterialClassifications : SET [1:?] OF IfcClassificationSelect;
	/// ClassifiedMaterial : IfcMaterial;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialClassificationRelationship : Ifc_Entity, Global.IfcMaterialClassificationRelationship
	{
		public virtual List<IfcClassificationSelect>? MaterialClassifications { get; set; }
		public virtual IfcMaterial? ClassifiedMaterial { get; set; }
		public IfcMaterialClassificationRelationship() : base()
		{
		}
		public IfcMaterialClassificationRelationship(List<IfcClassificationSelect>? MaterialClassifications, IfcMaterial? ClassifiedMaterial) : base ()
		{
			this.MaterialClassifications = MaterialClassifications;
			this.ClassifiedMaterial = ClassifiedMaterial;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				MaterialClassifications,
				ClassifiedMaterial
			};
		}
		public virtual List<Global.IfcClassificationSelect>? _MaterialClassifications
		{
			get
			{
				if(MaterialClassifications != null)
				{
					List<Global.IfcClassificationSelect>? items = new List<Global.IfcClassificationSelect>();
					foreach (IfcClassificationSelect item in MaterialClassifications)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					MaterialClassifications = null;
				}
				else
				{
					MaterialClassifications = new List<IfcClassificationSelect>();
					foreach(var val in value)
					{
						if(val is IfcClassificationSelect v)
						{
							MaterialClassifications.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcMaterial? _ClassifiedMaterial
		{
			get
			{
				return ClassifiedMaterial;
			}
			set
			{
				if(value is IfcMaterial val)
				{
					ClassifiedMaterial = val;
				}
				else if(value == null)
				{
					ClassifiedMaterial = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialConstituent
	/// SUBTYPE OF (IfcMaterialDefinition);
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Material : IfcMaterial;
	/// Fraction : OPTIONAL IfcNormalisedRatioMeasure;
	/// Category : OPTIONAL IfcLabel;
	/// INVERSE
	/// ToMaterialConstituentSet : IfcMaterialConstituentSet FOR MaterialConstituents;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialConstituent : IfcMaterialDefinition, Global.IfcMaterialConstituent
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcMaterial? Material { get; set; }
		public virtual IfcNormalisedRatioMeasure? Fraction { get; set; }
		public virtual IfcLabel? Category { get; set; }
		public IfcMaterialConstituentSet? ToMaterialConstituentSet {get{return Model?.GetItems<IfcMaterialConstituentSet>().FirstOrDefault(x => x.MaterialConstituents != null && x.MaterialConstituents.Contains(this));}}
		public IfcMaterialConstituent() : base()
		{
		}
		public IfcMaterialConstituent(IfcLabel? Name, IfcText? Description, IfcMaterial? Material, IfcNormalisedRatioMeasure? Fraction, IfcLabel? Category) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.Material = Material;
			this.Fraction = Fraction;
			this.Category = Category;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Material,
				Fraction,
				Category
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcMaterial? _Material
		{
			get
			{
				return Material;
			}
			set
			{
				if(value is IfcMaterial val)
				{
					Material = val;
				}
				else if(value == null)
				{
					Material = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _Fraction
		{
			get
			{
				return Fraction;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					Fraction = val;
				}
				else if(value == null)
				{
					Fraction = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Category
		{
			get
			{
				return Category;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Category = val;
				}
				else if(value == null)
				{
					Category = null;
				}
			}
		}
		public virtual Global.IfcMaterialConstituentSet? _ToMaterialConstituentSet
		{
			get
			{
				return ToMaterialConstituentSet;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialConstituentSet
	/// SUBTYPE OF (IfcMaterialDefinition);
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// MaterialConstituents : OPTIONAL SET [1:?] OF IfcMaterialConstituent;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialConstituentSet : IfcMaterialDefinition, Global.IfcMaterialConstituentSet
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual List<IfcMaterialConstituent>? MaterialConstituents { get; set; }
		public IfcMaterialConstituentSet() : base()
		{
		}
		public IfcMaterialConstituentSet(IfcLabel? Name, IfcText? Description, List<IfcMaterialConstituent>? MaterialConstituents) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.MaterialConstituents = MaterialConstituents;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				MaterialConstituents
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual List<Global.IfcMaterialConstituent>? _MaterialConstituents
		{
			get
			{
				if(MaterialConstituents != null)
				{
					List<Global.IfcMaterialConstituent>? items = new List<Global.IfcMaterialConstituent>();
					foreach (IfcMaterialConstituent item in MaterialConstituents)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					MaterialConstituents = null;
				}
				else
				{
					MaterialConstituents = new List<IfcMaterialConstituent>();
					foreach(var val in value)
					{
						if(val is IfcMaterialConstituent v)
						{
							MaterialConstituents.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcMaterial
	/// ,IfcMaterialConstituent
	/// ,IfcMaterialConstituentSet
	/// ,IfcMaterialLayer
	/// ,IfcMaterialLayerSet
	/// ,IfcMaterialProfile
	/// ,IfcMaterialProfileSet));
	/// INVERSE
	/// AssociatedTo : SET [0:?] OF IfcRelAssociatesMaterial FOR RelatingMaterial;
	/// HasExternalReferences : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
	/// HasProperties : SET [0:?] OF IfcMaterialProperties FOR Material;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcMaterialDefinition : Ifc_Entity, IfcMaterialSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect, Global.IfcMaterialDefinition
	{
		public List<IfcRelAssociatesMaterial>? AssociatedTo {get{return Model?.GetItems<IfcRelAssociatesMaterial>().Where(x => x.RelatingMaterial != null && x.RelatingMaterial == this).ToList();}}
		public List<IfcExternalReferenceRelationship>? HasExternalReferences {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public List<IfcMaterialProperties>? HasProperties {get{return Model?.GetItems<IfcMaterialProperties>().Where(x => x.Material != null && x.Material == this).ToList();}}
		public IfcMaterialDefinition() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual List<Global.IfcRelAssociatesMaterial>? _AssociatedTo
		{
			get
			{
				if(AssociatedTo != null)
				{
					List<Global.IfcRelAssociatesMaterial>? items = new List<Global.IfcRelAssociatesMaterial>();
					foreach (IfcRelAssociatesMaterial item in AssociatedTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _HasExternalReferences
		{
			get
			{
				if(HasExternalReferences != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in HasExternalReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcMaterialProperties>? _HasProperties
		{
			get
			{
				if(HasProperties != null)
				{
					List<Global.IfcMaterialProperties>? items = new List<Global.IfcMaterialProperties>();
					foreach (IfcMaterialProperties item in HasProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialDefinitionRepresentation
	/// SUBTYPE OF (IfcProductRepresentation);
	/// RepresentedMaterial : IfcMaterial;
	/// WHERE
	/// OnlyStyledRepresentations : SIZEOF(QUERY(temp <* Representations |
	/// (NOT('IFC4.IFCSTYLEDREPRESENTATION' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialDefinitionRepresentation : IfcProductRepresentation, Global.IfcMaterialDefinitionRepresentation
	{
		public virtual IfcMaterial? RepresentedMaterial { get; set; }
		public IfcMaterialDefinitionRepresentation() : base()
		{
		}
		public IfcMaterialDefinitionRepresentation(IfcLabel? Name, IfcText? Description, List<IfcRepresentation>? Representations, IfcMaterial? RepresentedMaterial) : base (Name, Description, Representations)
		{
			this.RepresentedMaterial = RepresentedMaterial;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Representations,
				RepresentedMaterial
			};
		}
		public virtual Global.IfcMaterial? _RepresentedMaterial
		{
			get
			{
				return RepresentedMaterial;
			}
			set
			{
				if(value is IfcMaterial val)
				{
					RepresentedMaterial = val;
				}
				else if(value == null)
				{
					RepresentedMaterial = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialLayer
	/// SUPERTYPE OF (ONEOF
	/// (IfcMaterialLayerWithOffsets))
	/// SUBTYPE OF (IfcMaterialDefinition);
	/// Material : OPTIONAL IfcMaterial;
	/// LayerThickness : IfcNonNegativeLengthMeasure;
	/// IsVentilated : OPTIONAL IfcLogical;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Category : OPTIONAL IfcLabel;
	/// Priority : OPTIONAL IfcInteger;
	/// INVERSE
	/// ToMaterialLayerSet : IfcMaterialLayerSet FOR MaterialLayers;
	/// WHERE
	/// NormalizedPriority : NOT(EXISTS(Priority)) OR {0 <= Priority <= 100};
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialLayer : IfcMaterialDefinition, Global.IfcMaterialLayer
	{
		public virtual IfcMaterial? Material { get; set; }
		public virtual IfcNonNegativeLengthMeasure? LayerThickness { get; set; }
		public virtual IfcLogical? IsVentilated { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcLabel? Category { get; set; }
		public virtual IfcInteger? Priority { get; set; }
		public IfcMaterialLayerSet? ToMaterialLayerSet {get{return Model?.GetItems<IfcMaterialLayerSet>().FirstOrDefault(x => x.MaterialLayers != null && x.MaterialLayers.Contains(this));}}
		public IfcMaterialLayer() : base()
		{
		}
		public IfcMaterialLayer(IfcMaterial? Material, IfcNonNegativeLengthMeasure? LayerThickness, IfcLogical? IsVentilated, IfcLabel? Name, IfcText? Description, IfcLabel? Category, IfcInteger? Priority) : base ()
		{
			this.Material = Material;
			this.LayerThickness = LayerThickness;
			this.IsVentilated = IsVentilated;
			this.Name = Name;
			this.Description = Description;
			this.Category = Category;
			this.Priority = Priority;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				LayerThickness,
				IsVentilated,
				Name,
				Description,
				Category,
				Priority
			};
		}
		public virtual Global.IfcMaterial? _Material
		{
			get
			{
				return Material;
			}
			set
			{
				if(value is IfcMaterial val)
				{
					Material = val;
				}
				else if(value == null)
				{
					Material = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _LayerThickness
		{
			get
			{
				return LayerThickness;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					LayerThickness = val;
				}
				else if(value == null)
				{
					LayerThickness = null;
				}
			}
		}
		public virtual Global.IfcLogical? _IsVentilated
		{
			get
			{
				return IsVentilated;
			}
			set
			{
				if(value is IfcLogical val)
				{
					IsVentilated = val;
				}
				else if(value == null)
				{
					IsVentilated = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Category
		{
			get
			{
				return Category;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Category = val;
				}
				else if(value == null)
				{
					Category = null;
				}
			}
		}
		public virtual Global.IfcInteger? _Priority
		{
			get
			{
				return Priority;
			}
			set
			{
				if(value is IfcInteger val)
				{
					Priority = val;
				}
				else if(value == null)
				{
					Priority = null;
				}
			}
		}
		public virtual Global.IfcMaterialLayerSet? _ToMaterialLayerSet
		{
			get
			{
				return ToMaterialLayerSet;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialLayerSet
	/// SUBTYPE OF (IfcMaterialDefinition);
	/// MaterialLayers : LIST [1:?] OF IfcMaterialLayer;
	/// LayerSetName : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// DERIVE
	/// TotalThickness : IfcLengthMeasure := IfcMlsTotalThickness(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialLayerSet : IfcMaterialDefinition, Global.IfcMaterialLayerSet
	{
		public virtual List<IfcMaterialLayer>? MaterialLayers { get; set; }
		public virtual IfcLabel? LayerSetName { get; set; }
		public virtual IfcText? Description { get; set; }
		//DERIVE
		public virtual IfcLengthMeasure? TotalThickness {get {return null;}}
		public IfcMaterialLayerSet() : base()
		{
		}
		public IfcMaterialLayerSet(List<IfcMaterialLayer>? MaterialLayers, IfcLabel? LayerSetName, IfcText? Description) : base ()
		{
			this.MaterialLayers = MaterialLayers;
			this.LayerSetName = LayerSetName;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				MaterialLayers,
				LayerSetName,
				Description
			};
		}
		public virtual List<Global.IfcMaterialLayer>? _MaterialLayers
		{
			get
			{
				if(MaterialLayers != null)
				{
					List<Global.IfcMaterialLayer>? items = new List<Global.IfcMaterialLayer>();
					foreach (IfcMaterialLayer item in MaterialLayers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					MaterialLayers = null;
				}
				else
				{
					MaterialLayers = new List<IfcMaterialLayer>();
					foreach(var val in value)
					{
						if(val is IfcMaterialLayer v)
						{
							MaterialLayers.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _LayerSetName
		{
			get
			{
				return LayerSetName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					LayerSetName = val;
				}
				else if(value == null)
				{
					LayerSetName = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _TotalThickness
		{
			get
			{
				return TotalThickness;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialLayerSetUsage
	/// SUBTYPE OF (IfcMaterialUsageDefinition);
	/// ForLayerSet : IfcMaterialLayerSet;
	/// LayerSetDirection : IfcLayerSetDirectionEnum;
	/// DirectionSense : IfcDirectionSenseEnum;
	/// OffsetFromReferenceLine : IfcLengthMeasure;
	/// ReferenceExtent : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialLayerSetUsage : IfcMaterialUsageDefinition, Global.IfcMaterialLayerSetUsage
	{
		public virtual IfcMaterialLayerSet? ForLayerSet { get; set; }
		public virtual IfcLayerSetDirectionEnum? LayerSetDirection { get; set; }
		public virtual IfcDirectionSenseEnum? DirectionSense { get; set; }
		public virtual IfcLengthMeasure? OffsetFromReferenceLine { get; set; }
		public virtual IfcPositiveLengthMeasure? ReferenceExtent { get; set; }
		public IfcMaterialLayerSetUsage() : base()
		{
		}
		public IfcMaterialLayerSetUsage(IfcMaterialLayerSet? ForLayerSet, IfcLayerSetDirectionEnum? LayerSetDirection, IfcDirectionSenseEnum? DirectionSense, IfcLengthMeasure? OffsetFromReferenceLine, IfcPositiveLengthMeasure? ReferenceExtent) : base ()
		{
			this.ForLayerSet = ForLayerSet;
			this.LayerSetDirection = LayerSetDirection;
			this.DirectionSense = DirectionSense;
			this.OffsetFromReferenceLine = OffsetFromReferenceLine;
			this.ReferenceExtent = ReferenceExtent;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ForLayerSet,
				LayerSetDirection,
				DirectionSense,
				OffsetFromReferenceLine,
				ReferenceExtent
			};
		}
		public virtual Global.IfcMaterialLayerSet? _ForLayerSet
		{
			get
			{
				return ForLayerSet;
			}
			set
			{
				if(value is IfcMaterialLayerSet val)
				{
					ForLayerSet = val;
				}
				else if(value == null)
				{
					ForLayerSet = null;
				}
			}
		}
		public virtual Global.IfcLayerSetDirectionEnum? _LayerSetDirection
		{
			get
			{
				return LayerSetDirection;
			}
			set
			{
				if(value is IfcLayerSetDirectionEnum val)
				{
					LayerSetDirection = val;
				}
				else if(value == null)
				{
					LayerSetDirection = null;
				}
			}
		}
		public virtual Global.IfcDirectionSenseEnum? _DirectionSense
		{
			get
			{
				return DirectionSense;
			}
			set
			{
				if(value is IfcDirectionSenseEnum val)
				{
					DirectionSense = val;
				}
				else if(value == null)
				{
					DirectionSense = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _OffsetFromReferenceLine
		{
			get
			{
				return OffsetFromReferenceLine;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					OffsetFromReferenceLine = val;
				}
				else if(value == null)
				{
					OffsetFromReferenceLine = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _ReferenceExtent
		{
			get
			{
				return ReferenceExtent;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					ReferenceExtent = val;
				}
				else if(value == null)
				{
					ReferenceExtent = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialLayerWithOffsets
	/// SUBTYPE OF (IfcMaterialLayer);
	/// OffsetDirection : IfcLayerSetDirectionEnum;
	/// OffsetValues : ARRAY [1:2] OF IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialLayerWithOffsets : IfcMaterialLayer, Global.IfcMaterialLayerWithOffsets
	{
		public virtual IfcLayerSetDirectionEnum? OffsetDirection { get; set; }
		public virtual List<IfcLengthMeasure>? OffsetValues { get; set; }
		public IfcMaterialLayerWithOffsets() : base()
		{
		}
		public IfcMaterialLayerWithOffsets(IfcMaterial? Material, IfcNonNegativeLengthMeasure? LayerThickness, IfcLogical? IsVentilated, IfcLabel? Name, IfcText? Description, IfcLabel? Category, IfcInteger? Priority, IfcLayerSetDirectionEnum? OffsetDirection, List<IfcLengthMeasure>? OffsetValues) : base (Material, LayerThickness, IsVentilated, Name, Description, Category, Priority)
		{
			this.OffsetDirection = OffsetDirection;
			this.OffsetValues = OffsetValues;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				LayerThickness,
				IsVentilated,
				Name,
				Description,
				Category,
				Priority,
				OffsetDirection,
				OffsetValues
			};
		}
		public virtual Global.IfcLayerSetDirectionEnum? _OffsetDirection
		{
			get
			{
				return OffsetDirection;
			}
			set
			{
				if(value is IfcLayerSetDirectionEnum val)
				{
					OffsetDirection = val;
				}
				else if(value == null)
				{
					OffsetDirection = null;
				}
			}
		}
		public virtual List<Global.IfcLengthMeasure>? _OffsetValues
		{
			get
			{
				if(OffsetValues != null)
				{
					List<Global.IfcLengthMeasure>? items = new List<Global.IfcLengthMeasure>();
					foreach (IfcLengthMeasure item in OffsetValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					OffsetValues = null;
				}
				else
				{
					OffsetValues = new List<IfcLengthMeasure>();
					foreach(var val in value)
					{
						if(val is IfcLengthMeasure v)
						{
							OffsetValues.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialList;
	/// Materials : LIST [1:?] OF IfcMaterial;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialList : Ifc_Entity, IfcMaterialSelect, Global.IfcMaterialList
	{
		public virtual List<IfcMaterial>? Materials { get; set; }
		public IfcMaterialList() : base()
		{
		}
		public IfcMaterialList(List<IfcMaterial>? Materials) : base ()
		{
			this.Materials = Materials;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Materials
			};
		}
		public virtual List<Global.IfcMaterial>? _Materials
		{
			get
			{
				if(Materials != null)
				{
					List<Global.IfcMaterial>? items = new List<Global.IfcMaterial>();
					foreach (IfcMaterial item in Materials)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Materials = null;
				}
				else
				{
					Materials = new List<IfcMaterial>();
					foreach(var val in value)
					{
						if(val is IfcMaterial v)
						{
							Materials.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialProfile
	/// SUPERTYPE OF (ONEOF
	/// (IfcMaterialProfileWithOffsets))
	/// SUBTYPE OF (IfcMaterialDefinition);
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Material : OPTIONAL IfcMaterial;
	/// Profile : IfcProfileDef;
	/// Priority : OPTIONAL IfcInteger;
	/// Category : OPTIONAL IfcLabel;
	/// INVERSE
	/// ToMaterialProfileSet : IfcMaterialProfileSet FOR MaterialProfiles;
	/// WHERE
	/// NormalizedPriority : NOT(EXISTS(Priority)) OR {0 <= Priority <= 100};
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialProfile : IfcMaterialDefinition, Global.IfcMaterialProfile
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcMaterial? Material { get; set; }
		public virtual IfcProfileDef? Profile { get; set; }
		public virtual IfcInteger? Priority { get; set; }
		public virtual IfcLabel? Category { get; set; }
		public IfcMaterialProfileSet? ToMaterialProfileSet {get{return Model?.GetItems<IfcMaterialProfileSet>().FirstOrDefault(x => x.MaterialProfiles != null && x.MaterialProfiles.Contains(this));}}
		public IfcMaterialProfile() : base()
		{
		}
		public IfcMaterialProfile(IfcLabel? Name, IfcText? Description, IfcMaterial? Material, IfcProfileDef? Profile, IfcInteger? Priority, IfcLabel? Category) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.Material = Material;
			this.Profile = Profile;
			this.Priority = Priority;
			this.Category = Category;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Material,
				Profile,
				Priority,
				Category
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcMaterial? _Material
		{
			get
			{
				return Material;
			}
			set
			{
				if(value is IfcMaterial val)
				{
					Material = val;
				}
				else if(value == null)
				{
					Material = null;
				}
			}
		}
		public virtual Global.IfcProfileDef? _Profile
		{
			get
			{
				return Profile;
			}
			set
			{
				if(value is IfcProfileDef val)
				{
					Profile = val;
				}
				else if(value == null)
				{
					Profile = null;
				}
			}
		}
		public virtual Global.IfcInteger? _Priority
		{
			get
			{
				return Priority;
			}
			set
			{
				if(value is IfcInteger val)
				{
					Priority = val;
				}
				else if(value == null)
				{
					Priority = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Category
		{
			get
			{
				return Category;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Category = val;
				}
				else if(value == null)
				{
					Category = null;
				}
			}
		}
		public virtual Global.IfcMaterialProfileSet? _ToMaterialProfileSet
		{
			get
			{
				return ToMaterialProfileSet;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialProfileSet
	/// SUBTYPE OF (IfcMaterialDefinition);
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// MaterialProfiles : LIST [1:?] OF IfcMaterialProfile;
	/// CompositeProfile : OPTIONAL IfcCompositeProfileDef;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialProfileSet : IfcMaterialDefinition, Global.IfcMaterialProfileSet
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual List<IfcMaterialProfile>? MaterialProfiles { get; set; }
		public virtual IfcCompositeProfileDef? CompositeProfile { get; set; }
		public IfcMaterialProfileSet() : base()
		{
		}
		public IfcMaterialProfileSet(IfcLabel? Name, IfcText? Description, List<IfcMaterialProfile>? MaterialProfiles, IfcCompositeProfileDef? CompositeProfile) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.MaterialProfiles = MaterialProfiles;
			this.CompositeProfile = CompositeProfile;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				MaterialProfiles,
				CompositeProfile
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual List<Global.IfcMaterialProfile>? _MaterialProfiles
		{
			get
			{
				if(MaterialProfiles != null)
				{
					List<Global.IfcMaterialProfile>? items = new List<Global.IfcMaterialProfile>();
					foreach (IfcMaterialProfile item in MaterialProfiles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					MaterialProfiles = null;
				}
				else
				{
					MaterialProfiles = new List<IfcMaterialProfile>();
					foreach(var val in value)
					{
						if(val is IfcMaterialProfile v)
						{
							MaterialProfiles.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcCompositeProfileDef? _CompositeProfile
		{
			get
			{
				return CompositeProfile;
			}
			set
			{
				if(value is IfcCompositeProfileDef val)
				{
					CompositeProfile = val;
				}
				else if(value == null)
				{
					CompositeProfile = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialProfileSetUsage
	/// SUPERTYPE OF (ONEOF
	/// (IfcMaterialProfileSetUsageTapering))
	/// SUBTYPE OF (IfcMaterialUsageDefinition);
	/// ForProfileSet : IfcMaterialProfileSet;
	/// CardinalPoint : OPTIONAL IfcCardinalPointReference;
	/// ReferenceExtent : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialProfileSetUsage : IfcMaterialUsageDefinition, Global.IfcMaterialProfileSetUsage
	{
		public virtual IfcMaterialProfileSet? ForProfileSet { get; set; }
		public virtual IfcCardinalPointReference? CardinalPoint { get; set; }
		public virtual IfcPositiveLengthMeasure? ReferenceExtent { get; set; }
		public IfcMaterialProfileSetUsage() : base()
		{
		}
		public IfcMaterialProfileSetUsage(IfcMaterialProfileSet? ForProfileSet, IfcCardinalPointReference? CardinalPoint, IfcPositiveLengthMeasure? ReferenceExtent) : base ()
		{
			this.ForProfileSet = ForProfileSet;
			this.CardinalPoint = CardinalPoint;
			this.ReferenceExtent = ReferenceExtent;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ForProfileSet,
				CardinalPoint,
				ReferenceExtent
			};
		}
		public virtual Global.IfcMaterialProfileSet? _ForProfileSet
		{
			get
			{
				return ForProfileSet;
			}
			set
			{
				if(value is IfcMaterialProfileSet val)
				{
					ForProfileSet = val;
				}
				else if(value == null)
				{
					ForProfileSet = null;
				}
			}
		}
		public virtual Global.IfcCardinalPointReference? _CardinalPoint
		{
			get
			{
				return CardinalPoint;
			}
			set
			{
				if(value is IfcCardinalPointReference val)
				{
					CardinalPoint = val;
				}
				else if(value == null)
				{
					CardinalPoint = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _ReferenceExtent
		{
			get
			{
				return ReferenceExtent;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					ReferenceExtent = val;
				}
				else if(value == null)
				{
					ReferenceExtent = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialProfileSetUsageTapering
	/// SUBTYPE OF (IfcMaterialProfileSetUsage);
	/// ForProfileEndSet : IfcMaterialProfileSet;
	/// CardinalEndPoint : OPTIONAL IfcCardinalPointReference;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialProfileSetUsageTapering : IfcMaterialProfileSetUsage, Global.IfcMaterialProfileSetUsageTapering
	{
		public virtual IfcMaterialProfileSet? ForProfileEndSet { get; set; }
		public virtual IfcCardinalPointReference? CardinalEndPoint { get; set; }
		public IfcMaterialProfileSetUsageTapering() : base()
		{
		}
		public IfcMaterialProfileSetUsageTapering(IfcMaterialProfileSet? ForProfileSet, IfcCardinalPointReference? CardinalPoint, IfcPositiveLengthMeasure? ReferenceExtent, IfcMaterialProfileSet? ForProfileEndSet, IfcCardinalPointReference? CardinalEndPoint) : base (ForProfileSet, CardinalPoint, ReferenceExtent)
		{
			this.ForProfileEndSet = ForProfileEndSet;
			this.CardinalEndPoint = CardinalEndPoint;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ForProfileSet,
				CardinalPoint,
				ReferenceExtent,
				ForProfileEndSet,
				CardinalEndPoint
			};
		}
		public virtual Global.IfcMaterialProfileSet? _ForProfileEndSet
		{
			get
			{
				return ForProfileEndSet;
			}
			set
			{
				if(value is IfcMaterialProfileSet val)
				{
					ForProfileEndSet = val;
				}
				else if(value == null)
				{
					ForProfileEndSet = null;
				}
			}
		}
		public virtual Global.IfcCardinalPointReference? _CardinalEndPoint
		{
			get
			{
				return CardinalEndPoint;
			}
			set
			{
				if(value is IfcCardinalPointReference val)
				{
					CardinalEndPoint = val;
				}
				else if(value == null)
				{
					CardinalEndPoint = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialProfileWithOffsets
	/// SUBTYPE OF (IfcMaterialProfile);
	/// OffsetValues : ARRAY [1:2] OF IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialProfileWithOffsets : IfcMaterialProfile, Global.IfcMaterialProfileWithOffsets
	{
		public virtual List<IfcLengthMeasure>? OffsetValues { get; set; }
		public IfcMaterialProfileWithOffsets() : base()
		{
		}
		public IfcMaterialProfileWithOffsets(IfcLabel? Name, IfcText? Description, IfcMaterial? Material, IfcProfileDef? Profile, IfcInteger? Priority, IfcLabel? Category, List<IfcLengthMeasure>? OffsetValues) : base (Name, Description, Material, Profile, Priority, Category)
		{
			this.OffsetValues = OffsetValues;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Material,
				Profile,
				Priority,
				Category,
				OffsetValues
			};
		}
		public virtual List<Global.IfcLengthMeasure>? _OffsetValues
		{
			get
			{
				if(OffsetValues != null)
				{
					List<Global.IfcLengthMeasure>? items = new List<Global.IfcLengthMeasure>();
					foreach (IfcLengthMeasure item in OffsetValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					OffsetValues = null;
				}
				else
				{
					OffsetValues = new List<IfcLengthMeasure>();
					foreach(var val in value)
					{
						if(val is IfcLengthMeasure v)
						{
							OffsetValues.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialProperties
	/// SUBTYPE OF (IfcExtendedProperties);
	/// Material : IfcMaterialDefinition;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialProperties : IfcExtendedProperties, Global.IfcMaterialProperties
	{
		public virtual IfcMaterialDefinition? Material { get; set; }
		public IfcMaterialProperties() : base()
		{
		}
		public IfcMaterialProperties(IfcIdentifier? Name, IfcText? Description, List<IfcProperty>? Properties, IfcMaterialDefinition? Material) : base (Name, Description, Properties)
		{
			this.Material = Material;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Properties,
				Material
			};
		}
		public virtual Global.IfcMaterialDefinition? _Material
		{
			get
			{
				return Material;
			}
			set
			{
				if(value is IfcMaterialDefinition val)
				{
					Material = val;
				}
				else if(value == null)
				{
					Material = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialRelationship
	/// SUBTYPE OF (IfcResourceLevelRelationship);
	/// RelatingMaterial : IfcMaterial;
	/// RelatedMaterials : SET [1:?] OF IfcMaterial;
	/// Expression : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialRelationship : IfcResourceLevelRelationship, Global.IfcMaterialRelationship
	{
		public virtual IfcMaterial? RelatingMaterial { get; set; }
		public virtual List<IfcMaterial>? RelatedMaterials { get; set; }
		public virtual IfcLabel? Expression { get; set; }
		public IfcMaterialRelationship() : base()
		{
		}
		public IfcMaterialRelationship(IfcLabel? Name, IfcText? Description, IfcMaterial? RelatingMaterial, List<IfcMaterial>? RelatedMaterials, IfcLabel? Expression) : base (Name, Description)
		{
			this.RelatingMaterial = RelatingMaterial;
			this.RelatedMaterials = RelatedMaterials;
			this.Expression = Expression;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingMaterial,
				RelatedMaterials,
				Expression
			};
		}
		public virtual Global.IfcMaterial? _RelatingMaterial
		{
			get
			{
				return RelatingMaterial;
			}
			set
			{
				if(value is IfcMaterial val)
				{
					RelatingMaterial = val;
				}
				else if(value == null)
				{
					RelatingMaterial = null;
				}
			}
		}
		public virtual List<Global.IfcMaterial>? _RelatedMaterials
		{
			get
			{
				if(RelatedMaterials != null)
				{
					List<Global.IfcMaterial>? items = new List<Global.IfcMaterial>();
					foreach (IfcMaterial item in RelatedMaterials)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedMaterials = null;
				}
				else
				{
					RelatedMaterials = new List<IfcMaterial>();
					foreach(var val in value)
					{
						if(val is IfcMaterial v)
						{
							RelatedMaterials.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _Expression
		{
			get
			{
				return Expression;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Expression = val;
				}
				else if(value == null)
				{
					Expression = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialUsageDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcMaterialLayerSetUsage
	/// ,IfcMaterialProfileSetUsage));
	/// INVERSE
	/// AssociatedTo : SET [1:?] OF IfcRelAssociatesMaterial FOR RelatingMaterial;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcMaterialUsageDefinition : Ifc_Entity, IfcMaterialSelect, Global.IfcMaterialUsageDefinition
	{
		public List<IfcRelAssociatesMaterial>? AssociatedTo {get{return Model?.GetItems<IfcRelAssociatesMaterial>().Where(x => x.RelatingMaterial != null && x.RelatingMaterial == this).ToList();}}
		public IfcMaterialUsageDefinition() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual List<Global.IfcRelAssociatesMaterial>? _AssociatedTo
		{
			get
			{
				if(AssociatedTo != null)
				{
					List<Global.IfcRelAssociatesMaterial>? items = new List<Global.IfcRelAssociatesMaterial>();
					foreach (IfcRelAssociatesMaterial item in AssociatedTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMeasureWithUnit;
	/// ValueComponent : IfcValue;
	/// UnitComponent : IfcUnit;
	/// END_ENTITY;
	/// <summary>
	public class IfcMeasureWithUnit : Ifc_Entity, IfcAppliedValueSelect, IfcMetricValueSelect, Global.IfcMeasureWithUnit
	{
		public virtual IfcValue? ValueComponent { get; set; }
		public virtual IfcUnit? UnitComponent { get; set; }
		public IfcMeasureWithUnit() : base()
		{
		}
		public IfcMeasureWithUnit(IfcValue? ValueComponent, IfcUnit? UnitComponent) : base ()
		{
			this.ValueComponent = ValueComponent;
			this.UnitComponent = UnitComponent;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ValueComponent,
				UnitComponent
			};
		}
		public virtual Global.IfcValue? _ValueComponent
		{
			get
			{
				return ValueComponent;
			}
			set
			{
				if(value is IfcValue val)
				{
					ValueComponent = val;
				}
				else if(value == null)
				{
					ValueComponent = null;
				}
			}
		}
		public virtual Global.IfcUnit? _UnitComponent
		{
			get
			{
				return UnitComponent;
			}
			set
			{
				if(value is IfcUnit val)
				{
					UnitComponent = val;
				}
				else if(value == null)
				{
					UnitComponent = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMechanicalFastener
	/// SUBTYPE OF (IfcElementComponent);
	/// NominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// NominalLength : OPTIONAL IfcPositiveLengthMeasure;
	/// PredefinedType : OPTIONAL IfcMechanicalFastenerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcMechanicalFastenerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcMechanicalFastenerTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCMECHANICALFASTENERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcMechanicalFastener : IfcElementComponent, Global.IfcMechanicalFastener
	{
		public virtual IfcPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IfcPositiveLengthMeasure? NominalLength { get; set; }
		public virtual IfcMechanicalFastenerTypeEnum? PredefinedType { get; set; }
		public IfcMechanicalFastener() : base()
		{
		}
		public IfcMechanicalFastener(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPositiveLengthMeasure? NominalDiameter, IfcPositiveLengthMeasure? NominalLength, IfcMechanicalFastenerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.NominalDiameter = NominalDiameter;
			this.NominalLength = NominalLength;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				NominalDiameter,
				NominalLength,
				PredefinedType
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _NominalDiameter
		{
			get
			{
				return NominalDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					NominalDiameter = val;
				}
				else if(value == null)
				{
					NominalDiameter = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _NominalLength
		{
			get
			{
				return NominalLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					NominalLength = val;
				}
				else if(value == null)
				{
					NominalLength = null;
				}
			}
		}
		public virtual Global.IfcMechanicalFastenerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcMechanicalFastenerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMechanicalFastenerType
	/// SUBTYPE OF (IfcElementComponentType);
	/// PredefinedType : IfcMechanicalFastenerTypeEnum;
	/// NominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// NominalLength : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcMechanicalFastenerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcMechanicalFastenerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcMechanicalFastenerType : IfcElementComponentType, Global.IfcMechanicalFastenerType
	{
		public virtual IfcMechanicalFastenerTypeEnum? PredefinedType { get; set; }
		public virtual IfcPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IfcPositiveLengthMeasure? NominalLength { get; set; }
		public IfcMechanicalFastenerType() : base()
		{
		}
		public IfcMechanicalFastenerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcMechanicalFastenerTypeEnum? PredefinedType, IfcPositiveLengthMeasure? NominalDiameter, IfcPositiveLengthMeasure? NominalLength) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.NominalLength = NominalLength;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType,
				NominalDiameter,
				NominalLength
			};
		}
		public virtual Global.IfcMechanicalFastenerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcMechanicalFastenerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _NominalDiameter
		{
			get
			{
				return NominalDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					NominalDiameter = val;
				}
				else if(value == null)
				{
					NominalDiameter = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _NominalLength
		{
			get
			{
				return NominalLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					NominalLength = val;
				}
				else if(value == null)
				{
					NominalLength = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMedicalDevice
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcMedicalDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcMedicalDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcMedicalDeviceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCMEDICALDEVICETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcMedicalDevice : IfcFlowTerminal, Global.IfcMedicalDevice
	{
		public virtual IfcMedicalDeviceTypeEnum? PredefinedType { get; set; }
		public IfcMedicalDevice() : base()
		{
		}
		public IfcMedicalDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcMedicalDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcMedicalDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcMedicalDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMedicalDeviceType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcMedicalDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcMedicalDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcMedicalDeviceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcMedicalDeviceType : IfcFlowTerminalType, Global.IfcMedicalDeviceType
	{
		public virtual IfcMedicalDeviceTypeEnum? PredefinedType { get; set; }
		public IfcMedicalDeviceType() : base()
		{
		}
		public IfcMedicalDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcMedicalDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcMedicalDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcMedicalDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMember
	/// SUPERTYPE OF (ONEOF
	/// (IfcMemberStandardCase))
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcMemberTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcMemberTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcMemberTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCMEMBERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcMember : IfcBuildingElement, Global.IfcMember
	{
		public virtual IfcMemberTypeEnum? PredefinedType { get; set; }
		public IfcMember() : base()
		{
		}
		public IfcMember(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcMemberTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcMemberTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcMemberTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMemberStandardCase
	/// SUBTYPE OF (IfcMember);
	/// WHERE
	/// HasMaterialProfileSetUsage : SIZEOF (QUERY(temp <* USEDIN(SELF, 'IFC4.IFCRELASSOCIATES.RELATEDOBJECTS') |
	/// ('IFC4.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)) AND
	/// ('IFC4.IFCMATERIALPROFILESETUSAGE' IN TYPEOF(temp.RelatingMaterial))
	/// )) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcMemberStandardCase : IfcMember, Global.IfcMemberStandardCase
	{
		public IfcMemberStandardCase() : base()
		{
		}
		public IfcMemberStandardCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcMemberTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcMemberType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcMemberTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcMemberTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcMemberTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcMemberType : IfcBuildingElementType, Global.IfcMemberType
	{
		public virtual IfcMemberTypeEnum? PredefinedType { get; set; }
		public IfcMemberType() : base()
		{
		}
		public IfcMemberType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcMemberTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcMemberTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcMemberTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMetric
	/// SUBTYPE OF (IfcConstraint);
	/// Benchmark : IfcBenchmarkEnum;
	/// ValueSource : OPTIONAL IfcLabel;
	/// DataValue : OPTIONAL IfcMetricValueSelect;
	/// ReferencePath : OPTIONAL IfcReference;
	/// END_ENTITY;
	/// <summary>
	public class IfcMetric : IfcConstraint, Global.IfcMetric
	{
		public virtual IfcBenchmarkEnum? Benchmark { get; set; }
		public virtual IfcLabel? ValueSource { get; set; }
		public virtual IfcMetricValueSelect? DataValue { get; set; }
		public virtual IfcReference? ReferencePath { get; set; }
		public IfcMetric() : base()
		{
		}
		public IfcMetric(IfcLabel? Name, IfcText? Description, IfcConstraintEnum? ConstraintGrade, IfcLabel? ConstraintSource, IfcActorSelect? CreatingActor, IfcDateTime? CreationTime, IfcLabel? UserDefinedGrade, IfcBenchmarkEnum? Benchmark, IfcLabel? ValueSource, IfcMetricValueSelect? DataValue, IfcReference? ReferencePath) : base (Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade)
		{
			this.Benchmark = Benchmark;
			this.ValueSource = ValueSource;
			this.DataValue = DataValue;
			this.ReferencePath = ReferencePath;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				ConstraintGrade,
				ConstraintSource,
				CreatingActor,
				CreationTime,
				UserDefinedGrade,
				Benchmark,
				ValueSource,
				DataValue,
				ReferencePath
			};
		}
		public virtual Global.IfcBenchmarkEnum? _Benchmark
		{
			get
			{
				return Benchmark;
			}
			set
			{
				if(value is IfcBenchmarkEnum val)
				{
					Benchmark = val;
				}
				else if(value == null)
				{
					Benchmark = null;
				}
			}
		}
		public virtual Global.IfcLabel? _ValueSource
		{
			get
			{
				return ValueSource;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ValueSource = val;
				}
				else if(value == null)
				{
					ValueSource = null;
				}
			}
		}
		public virtual Global.IfcMetricValueSelect? _DataValue
		{
			get
			{
				return DataValue;
			}
			set
			{
				if(value is IfcMetricValueSelect val)
				{
					DataValue = val;
				}
				else if(value == null)
				{
					DataValue = null;
				}
			}
		}
		public virtual Global.IfcReference? _ReferencePath
		{
			get
			{
				return ReferencePath;
			}
			set
			{
				if(value is IfcReference val)
				{
					ReferencePath = val;
				}
				else if(value == null)
				{
					ReferencePath = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMirroredProfileDef
	/// SUBTYPE OF (IfcDerivedProfileDef);
	/// DERIVE
	/// SELF\IfcDerivedProfileDef.Operator : IfcCartesianTransformationOperator2D :=
	/// IfcRepresentationItem() || IfcGeometricRepresentationItem() ||
	/// IfcCartesianTransformationOperator(
	/// -- Axis1
	/// IfcRepresentationItem() || IfcGeometricRepresentationItem() ||
	/// IfcDirection([-1., 0.]),
	/// -- Axis2
	/// IfcRepresentationItem() || IfcGeometricRepresentationItem() ||
	/// IfcDirection([ 0., 1.]),
	/// -- LocalOrigin
	/// IfcRepresentationItem() || IfcGeometricRepresentationItem() ||
	/// IfcPoint() || IfcCartesianPoint([0., 0.]),
	/// -- Scale
	/// 1.) ||
	/// IfcCartesianTransformationOperator2D();
	/// END_ENTITY;
	/// <summary>
	public class IfcMirroredProfileDef : IfcDerivedProfileDef, Global.IfcMirroredProfileDef
	{
		//DERIVE
		public override IfcCartesianTransformationOperator2D? Operator {get {return null;}}
		public IfcMirroredProfileDef() : base()
		{
		}
		public IfcMirroredProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcProfileDef? ParentProfile, IfcCartesianTransformationOperator2D? Operator, IfcLabel? Label) : base (ProfileType, ProfileName, ParentProfile, Operator, Label)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				ParentProfile,
				Operator,
				Label
			};
		}
		public override Global.IfcCartesianTransformationOperator2D? _Operator
		{
			get
			{
				return Operator;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMonetaryUnit;
	/// Currency : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcMonetaryUnit : Ifc_Entity, IfcUnit, Global.IfcMonetaryUnit
	{
		public virtual IfcLabel? Currency { get; set; }
		public IfcMonetaryUnit() : base()
		{
		}
		public IfcMonetaryUnit(IfcLabel? Currency) : base ()
		{
			this.Currency = Currency;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Currency
			};
		}
		public virtual Global.IfcLabel? _Currency
		{
			get
			{
				return Currency;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Currency = val;
				}
				else if(value == null)
				{
					Currency = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMotorConnection
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcMotorConnectionTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcMotorConnectionTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcMotorConnectionTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCMOTORCONNECTIONTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcMotorConnection : IfcEnergyConversionDevice, Global.IfcMotorConnection
	{
		public virtual IfcMotorConnectionTypeEnum? PredefinedType { get; set; }
		public IfcMotorConnection() : base()
		{
		}
		public IfcMotorConnection(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcMotorConnectionTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcMotorConnectionTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcMotorConnectionTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMotorConnectionType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcMotorConnectionTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcMotorConnectionTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcMotorConnectionTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcMotorConnectionType : IfcEnergyConversionDeviceType, Global.IfcMotorConnectionType
	{
		public virtual IfcMotorConnectionTypeEnum? PredefinedType { get; set; }
		public IfcMotorConnectionType() : base()
		{
		}
		public IfcMotorConnectionType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcMotorConnectionTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcMotorConnectionTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcMotorConnectionTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcNamedUnit
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcContextDependentUnit
	/// ,IfcConversionBasedUnit
	/// ,IfcSIUnit));
	/// Dimensions : IfcDimensionalExponents;
	/// UnitType : IfcUnitEnum;
	/// WHERE
	/// WR1 : IfcCorrectDimensions (SELF.UnitType, SELF.Dimensions);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcNamedUnit : Ifc_Entity, IfcUnit, Global.IfcNamedUnit
	{
		public virtual IfcDimensionalExponents? Dimensions { get; set; }
		public virtual IfcUnitEnum? UnitType { get; set; }
		public IfcNamedUnit() : base()
		{
		}
		public IfcNamedUnit(IfcDimensionalExponents? Dimensions, IfcUnitEnum? UnitType) : base ()
		{
			this.Dimensions = Dimensions;
			this.UnitType = UnitType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Dimensions,
				UnitType
			};
		}
		public virtual Global.IfcDimensionalExponents? _Dimensions
		{
			get
			{
				return Dimensions;
			}
			set
			{
				if(value is IfcDimensionalExponents val)
				{
					Dimensions = val;
				}
				else if(value == null)
				{
					Dimensions = null;
				}
			}
		}
		public virtual Global.IfcUnitEnum? _UnitType
		{
			get
			{
				return UnitType;
			}
			set
			{
				if(value is IfcUnitEnum val)
				{
					UnitType = val;
				}
				else if(value == null)
				{
					UnitType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcObject
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcActor
	/// ,IfcControl
	/// ,IfcGroup
	/// ,IfcProcess
	/// ,IfcProduct
	/// ,IfcResource))
	/// SUBTYPE OF (IfcObjectDefinition);
	/// ObjectType : OPTIONAL IfcLabel;
	/// INVERSE
	/// IsDeclaredBy : SET [0:1] OF IfcRelDefinesByObject FOR RelatedObjects;
	/// Declares : SET [0:?] OF IfcRelDefinesByObject FOR RelatingObject;
	/// IsTypedBy : SET [0:1] OF IfcRelDefinesByType FOR RelatedObjects;
	/// IsDefinedBy : SET [0:?] OF IfcRelDefinesByProperties FOR RelatedObjects;
	/// WHERE
	/// UniquePropertySetNames : ((SIZEOF(IsDefinedBy) = 0) OR IfcUniqueDefinitionNames(IsDefinedBy));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcObject : IfcObjectDefinition, Global.IfcObject
	{
		public virtual IfcLabel? ObjectType { get; set; }
		public List<IfcRelDefinesByObject>? IsDeclaredBy {get{return Model?.GetItems<IfcRelDefinesByObject>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();}}
		public List<IfcRelDefinesByObject>? Declares {get{return Model?.GetItems<IfcRelDefinesByObject>().Where(x => x.RelatingObject != null && x.RelatingObject == this).ToList();}}
		public List<IfcRelDefinesByType>? IsTypedBy {get{return Model?.GetItems<IfcRelDefinesByType>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();}}
		public List<IfcRelDefinesByProperties>? IsDefinedBy {get{return Model?.GetItems<IfcRelDefinesByProperties>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();}}
		public IfcObject() : base()
		{
		}
		public IfcObject(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ObjectType = ObjectType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
		public virtual Global.IfcLabel? _ObjectType
		{
			get
			{
				return ObjectType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ObjectType = val;
				}
				else if(value == null)
				{
					ObjectType = null;
				}
			}
		}
		public virtual List<Global.IfcRelDefinesByObject>? _IsDeclaredBy
		{
			get
			{
				if(IsDeclaredBy != null)
				{
					List<Global.IfcRelDefinesByObject>? items = new List<Global.IfcRelDefinesByObject>();
					foreach (IfcRelDefinesByObject item in IsDeclaredBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDefinesByObject>? _Declares
		{
			get
			{
				if(Declares != null)
				{
					List<Global.IfcRelDefinesByObject>? items = new List<Global.IfcRelDefinesByObject>();
					foreach (IfcRelDefinesByObject item in Declares)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDefinesByType>? _IsTypedBy
		{
			get
			{
				if(IsTypedBy != null)
				{
					List<Global.IfcRelDefinesByType>? items = new List<Global.IfcRelDefinesByType>();
					foreach (IfcRelDefinesByType item in IsTypedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDefinesByProperties>? _IsDefinedBy
		{
			get
			{
				if(IsDefinedBy != null)
				{
					List<Global.IfcRelDefinesByProperties>? items = new List<Global.IfcRelDefinesByProperties>();
					foreach (IfcRelDefinesByProperties item in IsDefinedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcObjectDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcContext
	/// ,IfcObject
	/// ,IfcTypeObject))
	/// SUBTYPE OF (IfcRoot);
	/// INVERSE
	/// HasAssignments : SET [0:?] OF IfcRelAssigns FOR RelatedObjects;
	/// Nests : SET [0:1] OF IfcRelNests FOR RelatedObjects;
	/// IsNestedBy : SET [0:?] OF IfcRelNests FOR RelatingObject;
	/// HasContext : SET [0:1] OF IfcRelDeclares FOR RelatedDefinitions;
	/// IsDecomposedBy : SET [0:?] OF IfcRelAggregates FOR RelatingObject;
	/// Decomposes : SET [0:1] OF IfcRelAggregates FOR RelatedObjects;
	/// HasAssociations : SET [0:?] OF IfcRelAssociates FOR RelatedObjects;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcObjectDefinition : IfcRoot, IfcDefinitionSelect, Global.IfcObjectDefinition
	{
		public List<IfcRelAssigns>? HasAssignments {get{return Model?.GetItems<IfcRelAssigns>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();}}
		public List<IfcRelNests>? Nests {get{return Model?.GetItems<IfcRelNests>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();}}
		public List<IfcRelNests>? IsNestedBy {get{return Model?.GetItems<IfcRelNests>().Where(x => x.RelatingObject != null && x.RelatingObject == this).ToList();}}
		public List<IfcRelDeclares>? HasContext {get{return Model?.GetItems<IfcRelDeclares>().Where(x => x.RelatedDefinitions != null && x.RelatedDefinitions.Contains(this)).ToList();}}
		public List<IfcRelAggregates>? IsDecomposedBy {get{return Model?.GetItems<IfcRelAggregates>().Where(x => x.RelatingObject != null && x.RelatingObject == this).ToList();}}
		public List<IfcRelAggregates>? Decomposes {get{return Model?.GetItems<IfcRelAggregates>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();}}
		public List<IfcRelAssociates>? HasAssociations {get{return Model?.GetItems<IfcRelAssociates>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();}}
		public IfcObjectDefinition() : base()
		{
		}
		public IfcObjectDefinition(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
		public virtual List<Global.IfcRelAssigns>? _HasAssignments
		{
			get
			{
				if(HasAssignments != null)
				{
					List<Global.IfcRelAssigns>? items = new List<Global.IfcRelAssigns>();
					foreach (IfcRelAssigns item in HasAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelNests>? _Nests
		{
			get
			{
				if(Nests != null)
				{
					List<Global.IfcRelNests>? items = new List<Global.IfcRelNests>();
					foreach (IfcRelNests item in Nests)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelNests>? _IsNestedBy
		{
			get
			{
				if(IsNestedBy != null)
				{
					List<Global.IfcRelNests>? items = new List<Global.IfcRelNests>();
					foreach (IfcRelNests item in IsNestedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDeclares>? _HasContext
		{
			get
			{
				if(HasContext != null)
				{
					List<Global.IfcRelDeclares>? items = new List<Global.IfcRelDeclares>();
					foreach (IfcRelDeclares item in HasContext)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelAggregates>? _IsDecomposedBy
		{
			get
			{
				if(IsDecomposedBy != null)
				{
					List<Global.IfcRelAggregates>? items = new List<Global.IfcRelAggregates>();
					foreach (IfcRelAggregates item in IsDecomposedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelAggregates>? _Decomposes
		{
			get
			{
				if(Decomposes != null)
				{
					List<Global.IfcRelAggregates>? items = new List<Global.IfcRelAggregates>();
					foreach (IfcRelAggregates item in Decomposes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelAssociates>? _HasAssociations
		{
			get
			{
				if(HasAssociations != null)
				{
					List<Global.IfcRelAssociates>? items = new List<Global.IfcRelAssociates>();
					foreach (IfcRelAssociates item in HasAssociations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcObjectPlacement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcGridPlacement
	/// ,IfcLocalPlacement));
	/// INVERSE
	/// PlacesObject : SET [0:?] OF IfcProduct FOR ObjectPlacement;
	/// ReferencedByPlacements : SET [0:?] OF IfcLocalPlacement FOR PlacementRelTo;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcObjectPlacement : Ifc_Entity, Global.IfcObjectPlacement
	{
		public List<IfcProduct>? PlacesObject {get{return Model?.GetItems<IfcProduct>().Where(x => x.ObjectPlacement != null && x.ObjectPlacement == this).ToList();}}
		public List<IfcLocalPlacement>? ReferencedByPlacements {get{return Model?.GetItems<IfcLocalPlacement>().Where(x => x.PlacementRelTo != null && x.PlacementRelTo == this).ToList();}}
		public IfcObjectPlacement() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual List<Global.IfcProduct>? _PlacesObject
		{
			get
			{
				if(PlacesObject != null)
				{
					List<Global.IfcProduct>? items = new List<Global.IfcProduct>();
					foreach (IfcProduct item in PlacesObject)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcLocalPlacement>? _ReferencedByPlacements
		{
			get
			{
				if(ReferencedByPlacements != null)
				{
					List<Global.IfcLocalPlacement>? items = new List<Global.IfcLocalPlacement>();
					foreach (IfcLocalPlacement item in ReferencedByPlacements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcObjective
	/// SUBTYPE OF (IfcConstraint);
	/// BenchmarkValues : OPTIONAL LIST [1:?] OF IfcConstraint;
	/// LogicalAggregator : OPTIONAL IfcLogicalOperatorEnum;
	/// ObjectiveQualifier : IfcObjectiveEnum;
	/// UserDefinedQualifier : OPTIONAL IfcLabel;
	/// WHERE
	/// WR21 : (ObjectiveQualifier <> IfcObjectiveEnum.USERDEFINED) OR
	/// ((ObjectiveQualifier = IfcObjectiveEnum.USERDEFINED) AND EXISTS(SELF\IfcObjective.UserDefinedQualifier));
	/// END_ENTITY;
	/// <summary>
	public class IfcObjective : IfcConstraint, Global.IfcObjective
	{
		public virtual List<IfcConstraint>? BenchmarkValues { get; set; }
		public virtual IfcLogicalOperatorEnum? LogicalAggregator { get; set; }
		public virtual IfcObjectiveEnum? ObjectiveQualifier { get; set; }
		public virtual IfcLabel? UserDefinedQualifier { get; set; }
		public IfcObjective() : base()
		{
		}
		public IfcObjective(IfcLabel? Name, IfcText? Description, IfcConstraintEnum? ConstraintGrade, IfcLabel? ConstraintSource, IfcActorSelect? CreatingActor, IfcDateTime? CreationTime, IfcLabel? UserDefinedGrade, List<IfcConstraint>? BenchmarkValues, IfcLogicalOperatorEnum? LogicalAggregator, IfcObjectiveEnum? ObjectiveQualifier, IfcLabel? UserDefinedQualifier) : base (Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade)
		{
			this.BenchmarkValues = BenchmarkValues;
			this.LogicalAggregator = LogicalAggregator;
			this.ObjectiveQualifier = ObjectiveQualifier;
			this.UserDefinedQualifier = UserDefinedQualifier;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				ConstraintGrade,
				ConstraintSource,
				CreatingActor,
				CreationTime,
				UserDefinedGrade,
				BenchmarkValues,
				LogicalAggregator,
				ObjectiveQualifier,
				UserDefinedQualifier
			};
		}
		public virtual List<Global.IfcConstraint>? _BenchmarkValues
		{
			get
			{
				if(BenchmarkValues != null)
				{
					List<Global.IfcConstraint>? items = new List<Global.IfcConstraint>();
					foreach (IfcConstraint item in BenchmarkValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					BenchmarkValues = null;
				}
				else
				{
					BenchmarkValues = new List<IfcConstraint>();
					foreach(var val in value)
					{
						if(val is IfcConstraint v)
						{
							BenchmarkValues.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLogicalOperatorEnum? _LogicalAggregator
		{
			get
			{
				return LogicalAggregator;
			}
			set
			{
				if(value is IfcLogicalOperatorEnum val)
				{
					LogicalAggregator = val;
				}
				else if(value == null)
				{
					LogicalAggregator = null;
				}
			}
		}
		public virtual Global.IfcObjectiveEnum? _ObjectiveQualifier
		{
			get
			{
				return ObjectiveQualifier;
			}
			set
			{
				if(value is IfcObjectiveEnum val)
				{
					ObjectiveQualifier = val;
				}
				else if(value == null)
				{
					ObjectiveQualifier = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedQualifier
		{
			get
			{
				return UserDefinedQualifier;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedQualifier = val;
				}
				else if(value == null)
				{
					UserDefinedQualifier = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOccupant
	/// SUBTYPE OF (IfcActor);
	/// PredefinedType : OPTIONAL IfcOccupantTypeEnum;
	/// WHERE
	/// WR31 : NOT(PredefinedType = IfcOccupantTypeEnum.USERDEFINED)
	/// OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcOccupant : IfcActor, Global.IfcOccupant
	{
		public virtual IfcOccupantTypeEnum? PredefinedType { get; set; }
		public IfcOccupant() : base()
		{
		}
		public IfcOccupant(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcActorSelect? TheActor, IfcOccupantTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, TheActor)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				TheActor,
				PredefinedType
			};
		}
		public virtual Global.IfcOccupantTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcOccupantTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOffsetCurve2D
	/// SUBTYPE OF (IfcCurve);
	/// BasisCurve : IfcCurve;
	/// Distance : IfcLengthMeasure;
	/// SelfIntersect : IfcLogical;
	/// WHERE
	/// DimIs2D : BasisCurve.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class IfcOffsetCurve2D : IfcCurve, Global.IfcOffsetCurve2D
	{
		public virtual IfcCurve? BasisCurve { get; set; }
		public virtual IfcLengthMeasure? Distance { get; set; }
		public virtual IfcLogical? SelfIntersect { get; set; }
		public IfcOffsetCurve2D() : base()
		{
		}
		public IfcOffsetCurve2D(IfcCurve? BasisCurve, IfcLengthMeasure? Distance, IfcLogical? SelfIntersect) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisCurve,
				Distance,
				SelfIntersect
			};
		}
		public virtual Global.IfcCurve? _BasisCurve
		{
			get
			{
				return BasisCurve;
			}
			set
			{
				if(value is IfcCurve val)
				{
					BasisCurve = val;
				}
				else if(value == null)
				{
					BasisCurve = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _Distance
		{
			get
			{
				return Distance;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					Distance = val;
				}
				else if(value == null)
				{
					Distance = null;
				}
			}
		}
		public virtual Global.IfcLogical? _SelfIntersect
		{
			get
			{
				return SelfIntersect;
			}
			set
			{
				if(value is IfcLogical val)
				{
					SelfIntersect = val;
				}
				else if(value == null)
				{
					SelfIntersect = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOffsetCurve3D
	/// SUBTYPE OF (IfcCurve);
	/// BasisCurve : IfcCurve;
	/// Distance : IfcLengthMeasure;
	/// SelfIntersect : IfcLogical;
	/// RefDirection : IfcDirection;
	/// WHERE
	/// DimIs2D : BasisCurve.Dim = 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcOffsetCurve3D : IfcCurve, Global.IfcOffsetCurve3D
	{
		public virtual IfcCurve? BasisCurve { get; set; }
		public virtual IfcLengthMeasure? Distance { get; set; }
		public virtual IfcLogical? SelfIntersect { get; set; }
		public virtual IfcDirection? RefDirection { get; set; }
		public IfcOffsetCurve3D() : base()
		{
		}
		public IfcOffsetCurve3D(IfcCurve? BasisCurve, IfcLengthMeasure? Distance, IfcLogical? SelfIntersect, IfcDirection? RefDirection) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
			this.RefDirection = RefDirection;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisCurve,
				Distance,
				SelfIntersect,
				RefDirection
			};
		}
		public virtual Global.IfcCurve? _BasisCurve
		{
			get
			{
				return BasisCurve;
			}
			set
			{
				if(value is IfcCurve val)
				{
					BasisCurve = val;
				}
				else if(value == null)
				{
					BasisCurve = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _Distance
		{
			get
			{
				return Distance;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					Distance = val;
				}
				else if(value == null)
				{
					Distance = null;
				}
			}
		}
		public virtual Global.IfcLogical? _SelfIntersect
		{
			get
			{
				return SelfIntersect;
			}
			set
			{
				if(value is IfcLogical val)
				{
					SelfIntersect = val;
				}
				else if(value == null)
				{
					SelfIntersect = null;
				}
			}
		}
		public virtual Global.IfcDirection? _RefDirection
		{
			get
			{
				return RefDirection;
			}
			set
			{
				if(value is IfcDirection val)
				{
					RefDirection = val;
				}
				else if(value == null)
				{
					RefDirection = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOpenShell
	/// SUBTYPE OF (IfcConnectedFaceSet);
	/// END_ENTITY;
	/// <summary>
	public class IfcOpenShell : IfcConnectedFaceSet, IfcShell, Global.IfcOpenShell
	{
		public IfcOpenShell() : base()
		{
		}
		public IfcOpenShell(List<IfcFace>? CfsFaces) : base (CfsFaces)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CfsFaces
			};
		}
	}
	/// <summary>
	/// ENTITY IfcOpeningElement
	/// SUPERTYPE OF (ONEOF
	/// (IfcOpeningStandardCase))
	/// SUBTYPE OF (IfcFeatureElementSubtraction);
	/// PredefinedType : OPTIONAL IfcOpeningElementTypeEnum;
	/// INVERSE
	/// HasFillings : SET [0:?] OF IfcRelFillsElement FOR RelatingOpeningElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcOpeningElement : IfcFeatureElementSubtraction, Global.IfcOpeningElement
	{
		public virtual IfcOpeningElementTypeEnum? PredefinedType { get; set; }
		public List<IfcRelFillsElement>? HasFillings {get{return Model?.GetItems<IfcRelFillsElement>().Where(x => x.RelatingOpeningElement != null && x.RelatingOpeningElement == this).ToList();}}
		public IfcOpeningElement() : base()
		{
		}
		public IfcOpeningElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcOpeningElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcOpeningElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcOpeningElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual List<Global.IfcRelFillsElement>? _HasFillings
		{
			get
			{
				if(HasFillings != null)
				{
					List<Global.IfcRelFillsElement>? items = new List<Global.IfcRelFillsElement>();
					foreach (IfcRelFillsElement item in HasFillings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOpeningStandardCase
	/// SUBTYPE OF (IfcOpeningElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcOpeningStandardCase : IfcOpeningElement, Global.IfcOpeningStandardCase
	{
		public IfcOpeningStandardCase() : base()
		{
		}
		public IfcOpeningStandardCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcOpeningElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcOrganization;
	/// Identification : OPTIONAL IfcIdentifier;
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
	/// Addresses : OPTIONAL LIST [1:?] OF IfcAddress;
	/// INVERSE
	/// IsRelatedBy : SET [0:?] OF IfcOrganizationRelationship FOR RelatedOrganizations;
	/// Relates : SET [0:?] OF IfcOrganizationRelationship FOR RelatingOrganization;
	/// Engages : SET [0:?] OF IfcPersonAndOrganization FOR TheOrganization;
	/// END_ENTITY;
	/// <summary>
	public class IfcOrganization : Ifc_Entity, IfcActorSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect, Global.IfcOrganization
	{
		public virtual IfcIdentifier? Identification { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual List<IfcActorRole>? Roles { get; set; }
		public virtual List<IfcAddress>? Addresses { get; set; }
		public List<IfcOrganizationRelationship>? IsRelatedBy {get{return Model?.GetItems<IfcOrganizationRelationship>().Where(x => x.RelatedOrganizations != null && x.RelatedOrganizations.Contains(this)).ToList();}}
		public List<IfcOrganizationRelationship>? Relates {get{return Model?.GetItems<IfcOrganizationRelationship>().Where(x => x.RelatingOrganization != null && x.RelatingOrganization == this).ToList();}}
		public List<IfcPersonAndOrganization>? Engages {get{return Model?.GetItems<IfcPersonAndOrganization>().Where(x => x.TheOrganization != null && x.TheOrganization == this).ToList();}}
		public IfcOrganization() : base()
		{
		}
		public IfcOrganization(IfcIdentifier? Identification, IfcLabel? Name, IfcText? Description, List<IfcActorRole>? Roles, List<IfcAddress>? Addresses) : base ()
		{
			this.Identification = Identification;
			this.Name = Name;
			this.Description = Description;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Identification,
				Name,
				Description,
				Roles,
				Addresses
			};
		}
		public virtual Global.IfcIdentifier? _Identification
		{
			get
			{
				return Identification;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identification = val;
				}
				else if(value == null)
				{
					Identification = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual List<Global.IfcActorRole>? _Roles
		{
			get
			{
				if(Roles != null)
				{
					List<Global.IfcActorRole>? items = new List<Global.IfcActorRole>();
					foreach (IfcActorRole item in Roles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Roles = null;
				}
				else
				{
					Roles = new List<IfcActorRole>();
					foreach(var val in value)
					{
						if(val is IfcActorRole v)
						{
							Roles.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcAddress>? _Addresses
		{
			get
			{
				if(Addresses != null)
				{
					List<Global.IfcAddress>? items = new List<Global.IfcAddress>();
					foreach (IfcAddress item in Addresses)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Addresses = null;
				}
				else
				{
					Addresses = new List<IfcAddress>();
					foreach(var val in value)
					{
						if(val is IfcAddress v)
						{
							Addresses.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcOrganizationRelationship>? _IsRelatedBy
		{
			get
			{
				if(IsRelatedBy != null)
				{
					List<Global.IfcOrganizationRelationship>? items = new List<Global.IfcOrganizationRelationship>();
					foreach (IfcOrganizationRelationship item in IsRelatedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcOrganizationRelationship>? _Relates
		{
			get
			{
				if(Relates != null)
				{
					List<Global.IfcOrganizationRelationship>? items = new List<Global.IfcOrganizationRelationship>();
					foreach (IfcOrganizationRelationship item in Relates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcPersonAndOrganization>? _Engages
		{
			get
			{
				if(Engages != null)
				{
					List<Global.IfcPersonAndOrganization>? items = new List<Global.IfcPersonAndOrganization>();
					foreach (IfcPersonAndOrganization item in Engages)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOrganizationRelationship
	/// SUBTYPE OF (IfcResourceLevelRelationship);
	/// RelatingOrganization : IfcOrganization;
	/// RelatedOrganizations : SET [1:?] OF IfcOrganization;
	/// END_ENTITY;
	/// <summary>
	public class IfcOrganizationRelationship : IfcResourceLevelRelationship, Global.IfcOrganizationRelationship
	{
		public virtual IfcOrganization? RelatingOrganization { get; set; }
		public virtual List<IfcOrganization>? RelatedOrganizations { get; set; }
		public IfcOrganizationRelationship() : base()
		{
		}
		public IfcOrganizationRelationship(IfcLabel? Name, IfcText? Description, IfcOrganization? RelatingOrganization, List<IfcOrganization>? RelatedOrganizations) : base (Name, Description)
		{
			this.RelatingOrganization = RelatingOrganization;
			this.RelatedOrganizations = RelatedOrganizations;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingOrganization,
				RelatedOrganizations
			};
		}
		public virtual Global.IfcOrganization? _RelatingOrganization
		{
			get
			{
				return RelatingOrganization;
			}
			set
			{
				if(value is IfcOrganization val)
				{
					RelatingOrganization = val;
				}
				else if(value == null)
				{
					RelatingOrganization = null;
				}
			}
		}
		public virtual List<Global.IfcOrganization>? _RelatedOrganizations
		{
			get
			{
				if(RelatedOrganizations != null)
				{
					List<Global.IfcOrganization>? items = new List<Global.IfcOrganization>();
					foreach (IfcOrganization item in RelatedOrganizations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedOrganizations = null;
				}
				else
				{
					RelatedOrganizations = new List<IfcOrganization>();
					foreach(var val in value)
					{
						if(val is IfcOrganization v)
						{
							RelatedOrganizations.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOrientedEdge
	/// SUBTYPE OF (IfcEdge);
	/// EdgeElement : IfcEdge;
	/// Orientation : IfcBoolean;
	/// DERIVE
	/// SELF\IfcEdge.EdgeStart : IfcVertex := IfcBooleanChoose
	/// (Orientation, EdgeElement.EdgeStart, EdgeElement.EdgeEnd);
	/// SELF\IfcEdge.EdgeEnd : IfcVertex := IfcBooleanChoose
	/// (Orientation, EdgeElement.EdgeEnd, EdgeElement.EdgeStart);
	/// WHERE
	/// EdgeElementNotOriented : NOT('IFC4.IFCORIENTEDEDGE' IN TYPEOF(EdgeElement));
	/// END_ENTITY;
	/// <summary>
	public class IfcOrientedEdge : IfcEdge, Global.IfcOrientedEdge
	{
		public virtual IfcEdge? EdgeElement { get; set; }
		public virtual IfcBoolean? Orientation { get; set; }
		//DERIVE
		public override IfcVertex? EdgeStart {get {return null;}}
		//DERIVE
		public override IfcVertex? EdgeEnd {get {return null;}}
		public IfcOrientedEdge() : base()
		{
		}
		public IfcOrientedEdge(IfcVertex? EdgeStart, IfcVertex? EdgeEnd, IfcEdge? EdgeElement, IfcBoolean? Orientation) : base (EdgeStart, EdgeEnd)
		{
			this.EdgeElement = EdgeElement;
			this.Orientation = Orientation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeStart,
				EdgeEnd,
				EdgeElement,
				Orientation
			};
		}
		public virtual Global.IfcEdge? _EdgeElement
		{
			get
			{
				return EdgeElement;
			}
			set
			{
				if(value is IfcEdge val)
				{
					EdgeElement = val;
				}
				else if(value == null)
				{
					EdgeElement = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _Orientation
		{
			get
			{
				return Orientation;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					Orientation = val;
				}
				else if(value == null)
				{
					Orientation = null;
				}
			}
		}
		public override Global.IfcVertex? _EdgeStart
		{
			get
			{
				return EdgeStart;
			}
		}
		public override Global.IfcVertex? _EdgeEnd
		{
			get
			{
				return EdgeEnd;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOuterBoundaryCurve
	/// SUBTYPE OF (IfcBoundaryCurve);
	/// END_ENTITY;
	/// <summary>
	public class IfcOuterBoundaryCurve : IfcBoundaryCurve, Global.IfcOuterBoundaryCurve
	{
		public IfcOuterBoundaryCurve() : base()
		{
		}
		public IfcOuterBoundaryCurve(List<IfcCompositeCurveSegment>? Segments, IfcLogical? SelfIntersect) : base (Segments, SelfIntersect)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Segments,
				SelfIntersect
			};
		}
	}
	/// <summary>
	/// ENTITY IfcOutlet
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcOutletTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcOutletTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcOutletTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCOUTLETTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcOutlet : IfcFlowTerminal, Global.IfcOutlet
	{
		public virtual IfcOutletTypeEnum? PredefinedType { get; set; }
		public IfcOutlet() : base()
		{
		}
		public IfcOutlet(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcOutletTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcOutletTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcOutletTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOutletType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcOutletTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcOutletTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcOutletTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcOutletType : IfcFlowTerminalType, Global.IfcOutletType
	{
		public virtual IfcOutletTypeEnum? PredefinedType { get; set; }
		public IfcOutletType() : base()
		{
		}
		public IfcOutletType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcOutletTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcOutletTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcOutletTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOwnerHistory;
	/// OwningUser : IfcPersonAndOrganization;
	/// OwningApplication : IfcApplication;
	/// State : OPTIONAL IfcStateEnum;
	/// ChangeAction : OPTIONAL IfcChangeActionEnum;
	/// LastModifiedDate : OPTIONAL IfcTimeStamp;
	/// LastModifyingUser : OPTIONAL IfcPersonAndOrganization;
	/// LastModifyingApplication : OPTIONAL IfcApplication;
	/// CreationDate : IfcTimeStamp;
	/// WHERE
	/// CorrectChangeAction : (EXISTS(LastModifiedDate)) OR
	/// (NOT(EXISTS(LastModifiedDate)) AND NOT(EXISTS(ChangeAction))) OR
	/// (NOT(EXISTS(LastModifiedDate)) AND EXISTS(ChangeAction) AND ((ChangeAction = IfcChangeActionEnum.NOTDEFINED) OR (ChangeAction = IfcChangeActionEnum.NOCHANGE)));
	/// END_ENTITY;
	/// <summary>
	public class IfcOwnerHistory : Ifc_Entity, Global.IfcOwnerHistory
	{
		public virtual IfcPersonAndOrganization? OwningUser { get; set; }
		public virtual IfcApplication? OwningApplication { get; set; }
		public virtual IfcStateEnum? State { get; set; }
		public virtual IfcChangeActionEnum? ChangeAction { get; set; }
		public virtual IfcTimeStamp? LastModifiedDate { get; set; }
		public virtual IfcPersonAndOrganization? LastModifyingUser { get; set; }
		public virtual IfcApplication? LastModifyingApplication { get; set; }
		public virtual IfcTimeStamp? CreationDate { get; set; }
		public IfcOwnerHistory() : base()
		{
		}
		public IfcOwnerHistory(IfcPersonAndOrganization? OwningUser, IfcApplication? OwningApplication, IfcStateEnum? State, IfcChangeActionEnum? ChangeAction, IfcTimeStamp? LastModifiedDate, IfcPersonAndOrganization? LastModifyingUser, IfcApplication? LastModifyingApplication, IfcTimeStamp? CreationDate) : base ()
		{
			this.OwningUser = OwningUser;
			this.OwningApplication = OwningApplication;
			this.State = State;
			this.ChangeAction = ChangeAction;
			this.LastModifiedDate = LastModifiedDate;
			this.LastModifyingUser = LastModifyingUser;
			this.LastModifyingApplication = LastModifyingApplication;
			this.CreationDate = CreationDate;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				OwningUser,
				OwningApplication,
				State,
				ChangeAction,
				LastModifiedDate,
				LastModifyingUser,
				LastModifyingApplication,
				CreationDate
			};
		}
		public virtual Global.IfcPersonAndOrganization? _OwningUser
		{
			get
			{
				return OwningUser;
			}
			set
			{
				if(value is IfcPersonAndOrganization val)
				{
					OwningUser = val;
				}
				else if(value == null)
				{
					OwningUser = null;
				}
			}
		}
		public virtual Global.IfcApplication? _OwningApplication
		{
			get
			{
				return OwningApplication;
			}
			set
			{
				if(value is IfcApplication val)
				{
					OwningApplication = val;
				}
				else if(value == null)
				{
					OwningApplication = null;
				}
			}
		}
		public virtual Global.IfcStateEnum? _State
		{
			get
			{
				return State;
			}
			set
			{
				if(value is IfcStateEnum val)
				{
					State = val;
				}
				else if(value == null)
				{
					State = null;
				}
			}
		}
		public virtual Global.IfcChangeActionEnum? _ChangeAction
		{
			get
			{
				return ChangeAction;
			}
			set
			{
				if(value is IfcChangeActionEnum val)
				{
					ChangeAction = val;
				}
				else if(value == null)
				{
					ChangeAction = null;
				}
			}
		}
		public virtual Global.IfcTimeStamp? _LastModifiedDate
		{
			get
			{
				return LastModifiedDate;
			}
			set
			{
				if(value is IfcTimeStamp val)
				{
					LastModifiedDate = val;
				}
				else if(value == null)
				{
					LastModifiedDate = null;
				}
			}
		}
		public virtual Global.IfcPersonAndOrganization? _LastModifyingUser
		{
			get
			{
				return LastModifyingUser;
			}
			set
			{
				if(value is IfcPersonAndOrganization val)
				{
					LastModifyingUser = val;
				}
				else if(value == null)
				{
					LastModifyingUser = null;
				}
			}
		}
		public virtual Global.IfcApplication? _LastModifyingApplication
		{
			get
			{
				return LastModifyingApplication;
			}
			set
			{
				if(value is IfcApplication val)
				{
					LastModifyingApplication = val;
				}
				else if(value == null)
				{
					LastModifyingApplication = null;
				}
			}
		}
		public virtual Global.IfcTimeStamp? _CreationDate
		{
			get
			{
				return CreationDate;
			}
			set
			{
				if(value is IfcTimeStamp val)
				{
					CreationDate = val;
				}
				else if(value == null)
				{
					CreationDate = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcParameterizedProfileDef
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAsymmetricIShapeProfileDef
	/// ,IfcCShapeProfileDef
	/// ,IfcCircleProfileDef
	/// ,IfcEllipseProfileDef
	/// ,IfcIShapeProfileDef
	/// ,IfcLShapeProfileDef
	/// ,IfcRectangleProfileDef
	/// ,IfcTShapeProfileDef
	/// ,IfcTrapeziumProfileDef
	/// ,IfcUShapeProfileDef
	/// ,IfcZShapeProfileDef))
	/// SUBTYPE OF (IfcProfileDef);
	/// Position : OPTIONAL IfcAxis2Placement2D;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcParameterizedProfileDef : IfcProfileDef, Global.IfcParameterizedProfileDef
	{
		public virtual IfcAxis2Placement2D? Position { get; set; }
		public IfcParameterizedProfileDef() : base()
		{
		}
		public IfcParameterizedProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position) : base (ProfileType, ProfileName)
		{
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position
			};
		}
		public virtual Global.IfcAxis2Placement2D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IfcAxis2Placement2D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPath
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// EdgeList : LIST [1:?] OF UNIQUE IfcOrientedEdge;
	/// WHERE
	/// IsContinuous : IfcPathHeadToTail(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IfcPath : IfcTopologicalRepresentationItem, Global.IfcPath
	{
		public virtual List<IfcOrientedEdge>? EdgeList { get; set; }
		public IfcPath() : base()
		{
		}
		public IfcPath(List<IfcOrientedEdge>? EdgeList) : base ()
		{
			this.EdgeList = EdgeList;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeList
			};
		}
		public virtual List<Global.IfcOrientedEdge>? _EdgeList
		{
			get
			{
				if(EdgeList != null)
				{
					List<Global.IfcOrientedEdge>? items = new List<Global.IfcOrientedEdge>();
					foreach (IfcOrientedEdge item in EdgeList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					EdgeList = null;
				}
				else
				{
					EdgeList = new List<IfcOrientedEdge>();
					foreach(var val in value)
					{
						if(val is IfcOrientedEdge v)
						{
							EdgeList.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPcurve
	/// SUBTYPE OF (IfcCurve);
	/// BasisSurface : IfcSurface;
	/// ReferenceCurve : IfcCurve;
	/// WHERE
	/// DimIs2D : ReferenceCurve.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class IfcPcurve : IfcCurve, IfcCurveOnSurface, Global.IfcPcurve
	{
		public virtual IfcSurface? BasisSurface { get; set; }
		public virtual IfcCurve? ReferenceCurve { get; set; }
		public IfcPcurve() : base()
		{
		}
		public IfcPcurve(IfcSurface? BasisSurface, IfcCurve? ReferenceCurve) : base ()
		{
			this.BasisSurface = BasisSurface;
			this.ReferenceCurve = ReferenceCurve;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisSurface,
				ReferenceCurve
			};
		}
		public virtual Global.IfcSurface? _BasisSurface
		{
			get
			{
				return BasisSurface;
			}
			set
			{
				if(value is IfcSurface val)
				{
					BasisSurface = val;
				}
				else if(value == null)
				{
					BasisSurface = null;
				}
			}
		}
		public virtual Global.IfcCurve? _ReferenceCurve
		{
			get
			{
				return ReferenceCurve;
			}
			set
			{
				if(value is IfcCurve val)
				{
					ReferenceCurve = val;
				}
				else if(value == null)
				{
					ReferenceCurve = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPerformanceHistory
	/// SUBTYPE OF (IfcControl);
	/// LifeCyclePhase : IfcLabel;
	/// PredefinedType : OPTIONAL IfcPerformanceHistoryTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcPerformanceHistory : IfcControl, Global.IfcPerformanceHistory
	{
		public virtual IfcLabel? LifeCyclePhase { get; set; }
		public virtual IfcPerformanceHistoryTypeEnum? PredefinedType { get; set; }
		public IfcPerformanceHistory() : base()
		{
		}
		public IfcPerformanceHistory(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcLabel? LifeCyclePhase, IfcPerformanceHistoryTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification)
		{
			this.LifeCyclePhase = LifeCyclePhase;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LifeCyclePhase,
				PredefinedType
			};
		}
		public virtual Global.IfcLabel? _LifeCyclePhase
		{
			get
			{
				return LifeCyclePhase;
			}
			set
			{
				if(value is IfcLabel val)
				{
					LifeCyclePhase = val;
				}
				else if(value == null)
				{
					LifeCyclePhase = null;
				}
			}
		}
		public virtual Global.IfcPerformanceHistoryTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPerformanceHistoryTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPermeableCoveringProperties
	/// SUBTYPE OF (IfcPreDefinedPropertySet);
	/// OperationType : IfcPermeableCoveringOperationEnum;
	/// PanelPosition : IfcWindowPanelPositionEnum;
	/// FrameDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// FrameThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// END_ENTITY;
	/// <summary>
	public class IfcPermeableCoveringProperties : IfcPreDefinedPropertySet, Global.IfcPermeableCoveringProperties
	{
		public virtual IfcPermeableCoveringOperationEnum? OperationType { get; set; }
		public virtual IfcWindowPanelPositionEnum? PanelPosition { get; set; }
		public virtual IfcPositiveLengthMeasure? FrameDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? FrameThickness { get; set; }
		public virtual IfcShapeAspect? ShapeAspectStyle { get; set; }
		public IfcPermeableCoveringProperties() : base()
		{
		}
		public IfcPermeableCoveringProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPermeableCoveringOperationEnum? OperationType, IfcWindowPanelPositionEnum? PanelPosition, IfcPositiveLengthMeasure? FrameDepth, IfcPositiveLengthMeasure? FrameThickness, IfcShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				OperationType,
				PanelPosition,
				FrameDepth,
				FrameThickness,
				ShapeAspectStyle
			};
		}
		public virtual Global.IfcPermeableCoveringOperationEnum? _OperationType
		{
			get
			{
				return OperationType;
			}
			set
			{
				if(value is IfcPermeableCoveringOperationEnum val)
				{
					OperationType = val;
				}
				else if(value == null)
				{
					OperationType = null;
				}
			}
		}
		public virtual Global.IfcWindowPanelPositionEnum? _PanelPosition
		{
			get
			{
				return PanelPosition;
			}
			set
			{
				if(value is IfcWindowPanelPositionEnum val)
				{
					PanelPosition = val;
				}
				else if(value == null)
				{
					PanelPosition = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _FrameDepth
		{
			get
			{
				return FrameDepth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FrameDepth = val;
				}
				else if(value == null)
				{
					FrameDepth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _FrameThickness
		{
			get
			{
				return FrameThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FrameThickness = val;
				}
				else if(value == null)
				{
					FrameThickness = null;
				}
			}
		}
		public virtual Global.IfcShapeAspect? _ShapeAspectStyle
		{
			get
			{
				return ShapeAspectStyle;
			}
			set
			{
				if(value is IfcShapeAspect val)
				{
					ShapeAspectStyle = val;
				}
				else if(value == null)
				{
					ShapeAspectStyle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPermit
	/// SUBTYPE OF (IfcControl);
	/// PredefinedType : OPTIONAL IfcPermitTypeEnum;
	/// Status : OPTIONAL IfcLabel;
	/// LongDescription : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IfcPermit : IfcControl, Global.IfcPermit
	{
		public virtual IfcPermitTypeEnum? PredefinedType { get; set; }
		public virtual IfcLabel? Status { get; set; }
		public virtual IfcText? LongDescription { get; set; }
		public IfcPermit() : base()
		{
		}
		public IfcPermit(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcPermitTypeEnum? PredefinedType, IfcLabel? Status, IfcText? LongDescription) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification)
		{
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.LongDescription = LongDescription;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				PredefinedType,
				Status,
				LongDescription
			};
		}
		public virtual Global.IfcPermitTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPermitTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Status
		{
			get
			{
				return Status;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Status = val;
				}
				else if(value == null)
				{
					Status = null;
				}
			}
		}
		public virtual Global.IfcText? _LongDescription
		{
			get
			{
				return LongDescription;
			}
			set
			{
				if(value is IfcText val)
				{
					LongDescription = val;
				}
				else if(value == null)
				{
					LongDescription = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPerson;
	/// Identification : OPTIONAL IfcIdentifier;
	/// FamilyName : OPTIONAL IfcLabel;
	/// GivenName : OPTIONAL IfcLabel;
	/// MiddleNames : OPTIONAL LIST [1:?] OF IfcLabel;
	/// PrefixTitles : OPTIONAL LIST [1:?] OF IfcLabel;
	/// SuffixTitles : OPTIONAL LIST [1:?] OF IfcLabel;
	/// Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
	/// Addresses : OPTIONAL LIST [1:?] OF IfcAddress;
	/// INVERSE
	/// EngagedIn : SET [0:?] OF IfcPersonAndOrganization FOR ThePerson;
	/// WHERE
	/// IdentifiablePerson : EXISTS(Identification) OR EXISTS(FamilyName) OR EXISTS(GivenName);
	/// ValidSetOfNames : NOT EXISTS(MiddleNames) OR EXISTS(FamilyName) OR EXISTS(GivenName);
	/// END_ENTITY;
	/// <summary>
	public class IfcPerson : Ifc_Entity, IfcActorSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect, Global.IfcPerson
	{
		public virtual IfcIdentifier? Identification { get; set; }
		public virtual IfcLabel? FamilyName { get; set; }
		public virtual IfcLabel? GivenName { get; set; }
		public virtual List<IfcLabel>? MiddleNames { get; set; }
		public virtual List<IfcLabel>? PrefixTitles { get; set; }
		public virtual List<IfcLabel>? SuffixTitles { get; set; }
		public virtual List<IfcActorRole>? Roles { get; set; }
		public virtual List<IfcAddress>? Addresses { get; set; }
		public List<IfcPersonAndOrganization>? EngagedIn {get{return Model?.GetItems<IfcPersonAndOrganization>().Where(x => x.ThePerson != null && x.ThePerson == this).ToList();}}
		public IfcPerson() : base()
		{
		}
		public IfcPerson(IfcIdentifier? Identification, IfcLabel? FamilyName, IfcLabel? GivenName, List<IfcLabel>? MiddleNames, List<IfcLabel>? PrefixTitles, List<IfcLabel>? SuffixTitles, List<IfcActorRole>? Roles, List<IfcAddress>? Addresses) : base ()
		{
			this.Identification = Identification;
			this.FamilyName = FamilyName;
			this.GivenName = GivenName;
			this.MiddleNames = MiddleNames;
			this.PrefixTitles = PrefixTitles;
			this.SuffixTitles = SuffixTitles;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Identification,
				FamilyName,
				GivenName,
				MiddleNames,
				PrefixTitles,
				SuffixTitles,
				Roles,
				Addresses
			};
		}
		public virtual Global.IfcIdentifier? _Identification
		{
			get
			{
				return Identification;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identification = val;
				}
				else if(value == null)
				{
					Identification = null;
				}
			}
		}
		public virtual Global.IfcLabel? _FamilyName
		{
			get
			{
				return FamilyName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					FamilyName = val;
				}
				else if(value == null)
				{
					FamilyName = null;
				}
			}
		}
		public virtual Global.IfcLabel? _GivenName
		{
			get
			{
				return GivenName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					GivenName = val;
				}
				else if(value == null)
				{
					GivenName = null;
				}
			}
		}
		public virtual List<Global.IfcLabel>? _MiddleNames
		{
			get
			{
				if(MiddleNames != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in MiddleNames)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					MiddleNames = null;
				}
				else
				{
					MiddleNames = new List<IfcLabel>();
					foreach(var val in value)
					{
						if(val is IfcLabel v)
						{
							MiddleNames.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcLabel>? _PrefixTitles
		{
			get
			{
				if(PrefixTitles != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in PrefixTitles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					PrefixTitles = null;
				}
				else
				{
					PrefixTitles = new List<IfcLabel>();
					foreach(var val in value)
					{
						if(val is IfcLabel v)
						{
							PrefixTitles.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcLabel>? _SuffixTitles
		{
			get
			{
				if(SuffixTitles != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in SuffixTitles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SuffixTitles = null;
				}
				else
				{
					SuffixTitles = new List<IfcLabel>();
					foreach(var val in value)
					{
						if(val is IfcLabel v)
						{
							SuffixTitles.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcActorRole>? _Roles
		{
			get
			{
				if(Roles != null)
				{
					List<Global.IfcActorRole>? items = new List<Global.IfcActorRole>();
					foreach (IfcActorRole item in Roles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Roles = null;
				}
				else
				{
					Roles = new List<IfcActorRole>();
					foreach(var val in value)
					{
						if(val is IfcActorRole v)
						{
							Roles.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcAddress>? _Addresses
		{
			get
			{
				if(Addresses != null)
				{
					List<Global.IfcAddress>? items = new List<Global.IfcAddress>();
					foreach (IfcAddress item in Addresses)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Addresses = null;
				}
				else
				{
					Addresses = new List<IfcAddress>();
					foreach(var val in value)
					{
						if(val is IfcAddress v)
						{
							Addresses.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcPersonAndOrganization>? _EngagedIn
		{
			get
			{
				if(EngagedIn != null)
				{
					List<Global.IfcPersonAndOrganization>? items = new List<Global.IfcPersonAndOrganization>();
					foreach (IfcPersonAndOrganization item in EngagedIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPersonAndOrganization;
	/// ThePerson : IfcPerson;
	/// TheOrganization : IfcOrganization;
	/// Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
	/// END_ENTITY;
	/// <summary>
	public class IfcPersonAndOrganization : Ifc_Entity, IfcActorSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect, Global.IfcPersonAndOrganization
	{
		public virtual IfcPerson? ThePerson { get; set; }
		public virtual IfcOrganization? TheOrganization { get; set; }
		public virtual List<IfcActorRole>? Roles { get; set; }
		public IfcPersonAndOrganization() : base()
		{
		}
		public IfcPersonAndOrganization(IfcPerson? ThePerson, IfcOrganization? TheOrganization, List<IfcActorRole>? Roles) : base ()
		{
			this.ThePerson = ThePerson;
			this.TheOrganization = TheOrganization;
			this.Roles = Roles;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ThePerson,
				TheOrganization,
				Roles
			};
		}
		public virtual Global.IfcPerson? _ThePerson
		{
			get
			{
				return ThePerson;
			}
			set
			{
				if(value is IfcPerson val)
				{
					ThePerson = val;
				}
				else if(value == null)
				{
					ThePerson = null;
				}
			}
		}
		public virtual Global.IfcOrganization? _TheOrganization
		{
			get
			{
				return TheOrganization;
			}
			set
			{
				if(value is IfcOrganization val)
				{
					TheOrganization = val;
				}
				else if(value == null)
				{
					TheOrganization = null;
				}
			}
		}
		public virtual List<Global.IfcActorRole>? _Roles
		{
			get
			{
				if(Roles != null)
				{
					List<Global.IfcActorRole>? items = new List<Global.IfcActorRole>();
					foreach (IfcActorRole item in Roles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Roles = null;
				}
				else
				{
					Roles = new List<IfcActorRole>();
					foreach(var val in value)
					{
						if(val is IfcActorRole v)
						{
							Roles.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPhysicalComplexQuantity
	/// SUBTYPE OF (IfcPhysicalQuantity);
	/// HasQuantities : SET [1:?] OF IfcPhysicalQuantity;
	/// Discrimination : IfcLabel;
	/// Quality : OPTIONAL IfcLabel;
	/// Usage : OPTIONAL IfcLabel;
	/// WHERE
	/// NoSelfReference : SIZEOF(QUERY(temp <* HasQuantities | SELF :=: temp)) = 0;
	/// UniqueQuantityNames : IfcUniqueQuantityNames(HasQuantities);
	/// END_ENTITY;
	/// <summary>
	public class IfcPhysicalComplexQuantity : IfcPhysicalQuantity, Global.IfcPhysicalComplexQuantity
	{
		public virtual List<IfcPhysicalQuantity>? HasQuantities { get; set; }
		public virtual IfcLabel? Discrimination { get; set; }
		public virtual IfcLabel? Quality { get; set; }
		public virtual IfcLabel? Usage { get; set; }
		public IfcPhysicalComplexQuantity() : base()
		{
		}
		public IfcPhysicalComplexQuantity(IfcLabel? Name, IfcText? Description, List<IfcPhysicalQuantity>? HasQuantities, IfcLabel? Discrimination, IfcLabel? Quality, IfcLabel? Usage) : base (Name, Description)
		{
			this.HasQuantities = HasQuantities;
			this.Discrimination = Discrimination;
			this.Quality = Quality;
			this.Usage = Usage;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				HasQuantities,
				Discrimination,
				Quality,
				Usage
			};
		}
		public virtual List<Global.IfcPhysicalQuantity>? _HasQuantities
		{
			get
			{
				if(HasQuantities != null)
				{
					List<Global.IfcPhysicalQuantity>? items = new List<Global.IfcPhysicalQuantity>();
					foreach (IfcPhysicalQuantity item in HasQuantities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasQuantities = null;
				}
				else
				{
					HasQuantities = new List<IfcPhysicalQuantity>();
					foreach(var val in value)
					{
						if(val is IfcPhysicalQuantity v)
						{
							HasQuantities.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _Discrimination
		{
			get
			{
				return Discrimination;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Discrimination = val;
				}
				else if(value == null)
				{
					Discrimination = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Quality
		{
			get
			{
				return Quality;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Quality = val;
				}
				else if(value == null)
				{
					Quality = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Usage
		{
			get
			{
				return Usage;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Usage = val;
				}
				else if(value == null)
				{
					Usage = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPhysicalQuantity
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPhysicalComplexQuantity
	/// ,IfcPhysicalSimpleQuantity));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// INVERSE
	/// HasExternalReferences : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
	/// PartOfComplex : SET [0:1] OF IfcPhysicalComplexQuantity FOR HasQuantities;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPhysicalQuantity : Ifc_Entity, IfcResourceObjectSelect, Global.IfcPhysicalQuantity
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public List<IfcExternalReferenceRelationship>? HasExternalReferences {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public List<IfcPhysicalComplexQuantity>? PartOfComplex {get{return Model?.GetItems<IfcPhysicalComplexQuantity>().Where(x => x.HasQuantities != null && x.HasQuantities.Contains(this)).ToList();}}
		public IfcPhysicalQuantity() : base()
		{
		}
		public IfcPhysicalQuantity(IfcLabel? Name, IfcText? Description) : base ()
		{
			this.Name = Name;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _HasExternalReferences
		{
			get
			{
				if(HasExternalReferences != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in HasExternalReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcPhysicalComplexQuantity>? _PartOfComplex
		{
			get
			{
				if(PartOfComplex != null)
				{
					List<Global.IfcPhysicalComplexQuantity>? items = new List<Global.IfcPhysicalComplexQuantity>();
					foreach (IfcPhysicalComplexQuantity item in PartOfComplex)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPhysicalSimpleQuantity
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcQuantityArea
	/// ,IfcQuantityCount
	/// ,IfcQuantityLength
	/// ,IfcQuantityTime
	/// ,IfcQuantityVolume
	/// ,IfcQuantityWeight))
	/// SUBTYPE OF (IfcPhysicalQuantity);
	/// Unit : OPTIONAL IfcNamedUnit;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPhysicalSimpleQuantity : IfcPhysicalQuantity, Global.IfcPhysicalSimpleQuantity
	{
		public virtual IfcNamedUnit? Unit { get; set; }
		public IfcPhysicalSimpleQuantity() : base()
		{
		}
		public IfcPhysicalSimpleQuantity(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit) : base (Name, Description)
		{
			this.Unit = Unit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit
			};
		}
		public virtual Global.IfcNamedUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IfcNamedUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPile
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcPileTypeEnum;
	/// ConstructionType : OPTIONAL IfcPileConstructionEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT EXISTS(PredefinedType) OR
	/// (PredefinedType <> IfcPileTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPileTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCPILETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPile : IfcBuildingElement, Global.IfcPile
	{
		public virtual IfcPileTypeEnum? PredefinedType { get; set; }
		public virtual IfcPileConstructionEnum? ConstructionType { get; set; }
		public IfcPile() : base()
		{
		}
		public IfcPile(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPileTypeEnum? PredefinedType, IfcPileConstructionEnum? ConstructionType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
			this.ConstructionType = ConstructionType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType,
				ConstructionType
			};
		}
		public virtual Global.IfcPileTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPileTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcPileConstructionEnum? _ConstructionType
		{
			get
			{
				return ConstructionType;
			}
			set
			{
				if(value is IfcPileConstructionEnum val)
				{
					ConstructionType = val;
				}
				else if(value == null)
				{
					ConstructionType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPileType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcPileTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcPileTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPileTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPileType : IfcBuildingElementType, Global.IfcPileType
	{
		public virtual IfcPileTypeEnum? PredefinedType { get; set; }
		public IfcPileType() : base()
		{
		}
		public IfcPileType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcPileTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcPileTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPileTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPipeFitting
	/// SUBTYPE OF (IfcFlowFitting);
	/// PredefinedType : OPTIONAL IfcPipeFittingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcPipeFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPipeFittingTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCPIPEFITTINGTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPipeFitting : IfcFlowFitting, Global.IfcPipeFitting
	{
		public virtual IfcPipeFittingTypeEnum? PredefinedType { get; set; }
		public IfcPipeFitting() : base()
		{
		}
		public IfcPipeFitting(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPipeFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcPipeFittingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPipeFittingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPipeFittingType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcPipeFittingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcPipeFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPipeFittingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPipeFittingType : IfcFlowFittingType, Global.IfcPipeFittingType
	{
		public virtual IfcPipeFittingTypeEnum? PredefinedType { get; set; }
		public IfcPipeFittingType() : base()
		{
		}
		public IfcPipeFittingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcPipeFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcPipeFittingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPipeFittingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPipeSegment
	/// SUBTYPE OF (IfcFlowSegment);
	/// PredefinedType : OPTIONAL IfcPipeSegmentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcPipeSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPipeSegmentTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCPIPESEGMENTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPipeSegment : IfcFlowSegment, Global.IfcPipeSegment
	{
		public virtual IfcPipeSegmentTypeEnum? PredefinedType { get; set; }
		public IfcPipeSegment() : base()
		{
		}
		public IfcPipeSegment(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPipeSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcPipeSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPipeSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPipeSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcPipeSegmentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcPipeSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPipeSegmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPipeSegmentType : IfcFlowSegmentType, Global.IfcPipeSegmentType
	{
		public virtual IfcPipeSegmentTypeEnum? PredefinedType { get; set; }
		public IfcPipeSegmentType() : base()
		{
		}
		public IfcPipeSegmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcPipeSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcPipeSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPipeSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPixelTexture
	/// SUBTYPE OF (IfcSurfaceTexture);
	/// Width : IfcInteger;
	/// Height : IfcInteger;
	/// ColourComponents : IfcInteger;
	/// Pixel : LIST [1:?] OF IfcBinary;
	/// WHERE
	/// MinPixelInS : Width >= 1;
	/// MinPixelInT : Height >= 1;
	/// NumberOfColours : {1 <= ColourComponents <= 4};
	/// SizeOfPixelList : SIZEOF(Pixel) = (Width * Height);
	/// PixelAsByteAndSameLength : SIZEOF(QUERY(temp<* Pixel |
	/// (BLENGTH(temp) MOD 8 = 0) AND
	/// (BLENGTH(temp) = BLENGTH(Pixel[1]))
	/// )) = SIZEOF(Pixel);
	/// END_ENTITY;
	/// <summary>
	public class IfcPixelTexture : IfcSurfaceTexture, Global.IfcPixelTexture
	{
		public virtual IfcInteger? Width { get; set; }
		public virtual IfcInteger? Height { get; set; }
		public virtual IfcInteger? ColourComponents { get; set; }
		public virtual List<IfcBinary>? Pixel { get; set; }
		public IfcPixelTexture() : base()
		{
		}
		public IfcPixelTexture(IfcBoolean? RepeatS, IfcBoolean? RepeatT, IfcIdentifier? Mode, IfcCartesianTransformationOperator2D? TextureTransform, List<IfcIdentifier>? Parameter, IfcInteger? Width, IfcInteger? Height, IfcInteger? ColourComponents, List<IfcBinary>? Pixel) : base (RepeatS, RepeatT, Mode, TextureTransform, Parameter)
		{
			this.Width = Width;
			this.Height = Height;
			this.ColourComponents = ColourComponents;
			this.Pixel = Pixel;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RepeatS,
				RepeatT,
				Mode,
				TextureTransform,
				Parameter,
				Width,
				Height,
				ColourComponents,
				Pixel
			};
		}
		public virtual Global.IfcInteger? _Width
		{
			get
			{
				return Width;
			}
			set
			{
				if(value is IfcInteger val)
				{
					Width = val;
				}
				else if(value == null)
				{
					Width = null;
				}
			}
		}
		public virtual Global.IfcInteger? _Height
		{
			get
			{
				return Height;
			}
			set
			{
				if(value is IfcInteger val)
				{
					Height = val;
				}
				else if(value == null)
				{
					Height = null;
				}
			}
		}
		public virtual Global.IfcInteger? _ColourComponents
		{
			get
			{
				return ColourComponents;
			}
			set
			{
				if(value is IfcInteger val)
				{
					ColourComponents = val;
				}
				else if(value == null)
				{
					ColourComponents = null;
				}
			}
		}
		public virtual List<Global.IfcBinary>? _Pixel
		{
			get
			{
				if(Pixel != null)
				{
					List<Global.IfcBinary>? items = new List<Global.IfcBinary>();
					foreach (IfcBinary item in Pixel)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Pixel = null;
				}
				else
				{
					Pixel = new List<IfcBinary>();
					foreach(var val in value)
					{
						if(val is IfcBinary v)
						{
							Pixel.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPlacement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAxis1Placement
	/// ,IfcAxis2Placement2D
	/// ,IfcAxis2Placement3D))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Location : IfcCartesianPoint;
	/// DERIVE
	/// Dim : IfcDimensionCount := Location.Dim;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPlacement : IfcGeometricRepresentationItem, Global.IfcPlacement
	{
		public virtual IfcCartesianPoint? Location { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcPlacement() : base()
		{
		}
		public IfcPlacement(IfcCartesianPoint? Location) : base ()
		{
			this.Location = Location;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location
			};
		}
		public virtual Global.IfcCartesianPoint? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IfcCartesianPoint val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPlanarBox
	/// SUBTYPE OF (IfcPlanarExtent);
	/// Placement : IfcAxis2Placement;
	/// END_ENTITY;
	/// <summary>
	public class IfcPlanarBox : IfcPlanarExtent, Global.IfcPlanarBox
	{
		public virtual IfcAxis2Placement? Placement { get; set; }
		public IfcPlanarBox() : base()
		{
		}
		public IfcPlanarBox(IfcLengthMeasure? SizeInX, IfcLengthMeasure? SizeInY, IfcAxis2Placement? Placement) : base (SizeInX, SizeInY)
		{
			this.Placement = Placement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SizeInX,
				SizeInY,
				Placement
			};
		}
		public virtual Global.IfcAxis2Placement? _Placement
		{
			get
			{
				return Placement;
			}
			set
			{
				if(value is IfcAxis2Placement val)
				{
					Placement = val;
				}
				else if(value == null)
				{
					Placement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPlanarExtent
	/// SUPERTYPE OF (ONEOF
	/// (IfcPlanarBox))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// SizeInX : IfcLengthMeasure;
	/// SizeInY : IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcPlanarExtent : IfcGeometricRepresentationItem, Global.IfcPlanarExtent
	{
		public virtual IfcLengthMeasure? SizeInX { get; set; }
		public virtual IfcLengthMeasure? SizeInY { get; set; }
		public IfcPlanarExtent() : base()
		{
		}
		public IfcPlanarExtent(IfcLengthMeasure? SizeInX, IfcLengthMeasure? SizeInY) : base ()
		{
			this.SizeInX = SizeInX;
			this.SizeInY = SizeInY;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SizeInX,
				SizeInY
			};
		}
		public virtual Global.IfcLengthMeasure? _SizeInX
		{
			get
			{
				return SizeInX;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					SizeInX = val;
				}
				else if(value == null)
				{
					SizeInX = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _SizeInY
		{
			get
			{
				return SizeInY;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					SizeInY = val;
				}
				else if(value == null)
				{
					SizeInY = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPlane
	/// SUBTYPE OF (IfcElementarySurface);
	/// END_ENTITY;
	/// <summary>
	public class IfcPlane : IfcElementarySurface, Global.IfcPlane
	{
		public IfcPlane() : base()
		{
		}
		public IfcPlane(IfcAxis2Placement3D? Position) : base (Position)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPlate
	/// SUPERTYPE OF (ONEOF
	/// (IfcPlateStandardCase))
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcPlateTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcPlateTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPlateTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCPLATETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPlate : IfcBuildingElement, Global.IfcPlate
	{
		public virtual IfcPlateTypeEnum? PredefinedType { get; set; }
		public IfcPlate() : base()
		{
		}
		public IfcPlate(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPlateTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcPlateTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPlateTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPlateStandardCase
	/// SUBTYPE OF (IfcPlate);
	/// WHERE
	/// HasMaterialLayerSetUsage : SIZEOF (QUERY(temp <* USEDIN(SELF, 'IFC4.IFCRELASSOCIATES.RELATEDOBJECTS') |
	/// ('IFC4.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)) AND
	/// ('IFC4.IFCMATERIALLAYERSETUSAGE' IN TYPEOF(temp.RelatingMaterial))
	/// )) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcPlateStandardCase : IfcPlate, Global.IfcPlateStandardCase
	{
		public IfcPlateStandardCase() : base()
		{
		}
		public IfcPlateStandardCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPlateTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPlateType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcPlateTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcPlateTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPlateTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPlateType : IfcBuildingElementType, Global.IfcPlateType
	{
		public virtual IfcPlateTypeEnum? PredefinedType { get; set; }
		public IfcPlateType() : base()
		{
		}
		public IfcPlateType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcPlateTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcPlateTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPlateTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPoint
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCartesianPoint
	/// ,IfcPointOnCurve
	/// ,IfcPointOnSurface))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPoint : IfcGeometricRepresentationItem, IfcGeometricSetSelect, IfcPointOrVertexPoint, Global.IfcPoint
	{
		public virtual IfcDimensionCount? Dim {get; set;}
		public IfcPoint() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
			set
			{
				if(value is IfcDimensionCount val)
				{
					Dim = val;
				}
				else if(value == null)
				{
					Dim = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPointOnCurve
	/// SUBTYPE OF (IfcPoint);
	/// BasisCurve : IfcCurve;
	/// PointParameter : IfcParameterValue;
	/// DERIVE
	/// Dim : IfcDimensionCount := BasisCurve.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IfcPointOnCurve : IfcPoint, Global.IfcPointOnCurve
	{
		public virtual IfcCurve? BasisCurve { get; set; }
		public virtual IfcParameterValue? PointParameter { get; set; }
		//DERIVE
		public override IfcDimensionCount? Dim {get {return null;}}
		public IfcPointOnCurve() : base()
		{
		}
		public IfcPointOnCurve(IfcCurve? BasisCurve, IfcParameterValue? PointParameter) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.PointParameter = PointParameter;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisCurve,
				PointParameter
			};
		}
		public virtual Global.IfcCurve? _BasisCurve
		{
			get
			{
				return BasisCurve;
			}
			set
			{
				if(value is IfcCurve val)
				{
					BasisCurve = val;
				}
				else if(value == null)
				{
					BasisCurve = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _PointParameter
		{
			get
			{
				return PointParameter;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					PointParameter = val;
				}
				else if(value == null)
				{
					PointParameter = null;
				}
			}
		}
		public override Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPointOnSurface
	/// SUBTYPE OF (IfcPoint);
	/// BasisSurface : IfcSurface;
	/// PointParameterU : IfcParameterValue;
	/// PointParameterV : IfcParameterValue;
	/// DERIVE
	/// Dim : IfcDimensionCount := BasisSurface.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IfcPointOnSurface : IfcPoint, Global.IfcPointOnSurface
	{
		public virtual IfcSurface? BasisSurface { get; set; }
		public virtual IfcParameterValue? PointParameterU { get; set; }
		public virtual IfcParameterValue? PointParameterV { get; set; }
		//DERIVE
		public override IfcDimensionCount? Dim {get {return null;}}
		public IfcPointOnSurface() : base()
		{
		}
		public IfcPointOnSurface(IfcSurface? BasisSurface, IfcParameterValue? PointParameterU, IfcParameterValue? PointParameterV) : base ()
		{
			this.BasisSurface = BasisSurface;
			this.PointParameterU = PointParameterU;
			this.PointParameterV = PointParameterV;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisSurface,
				PointParameterU,
				PointParameterV
			};
		}
		public virtual Global.IfcSurface? _BasisSurface
		{
			get
			{
				return BasisSurface;
			}
			set
			{
				if(value is IfcSurface val)
				{
					BasisSurface = val;
				}
				else if(value == null)
				{
					BasisSurface = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _PointParameterU
		{
			get
			{
				return PointParameterU;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					PointParameterU = val;
				}
				else if(value == null)
				{
					PointParameterU = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _PointParameterV
		{
			get
			{
				return PointParameterV;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					PointParameterV = val;
				}
				else if(value == null)
				{
					PointParameterV = null;
				}
			}
		}
		public override Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPolyLoop
	/// SUBTYPE OF (IfcLoop);
	/// Polygon : LIST [3:?] OF UNIQUE IfcCartesianPoint;
	/// WHERE
	/// AllPointsSameDim : SIZEOF(QUERY(Temp <* Polygon | Temp.Dim <> Polygon[1].Dim)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcPolyLoop : IfcLoop, Global.IfcPolyLoop
	{
		public virtual List<IfcCartesianPoint>? Polygon { get; set; }
		public IfcPolyLoop() : base()
		{
		}
		public IfcPolyLoop(List<IfcCartesianPoint>? Polygon) : base ()
		{
			this.Polygon = Polygon;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Polygon
			};
		}
		public virtual List<Global.IfcCartesianPoint>? _Polygon
		{
			get
			{
				if(Polygon != null)
				{
					List<Global.IfcCartesianPoint>? items = new List<Global.IfcCartesianPoint>();
					foreach (IfcCartesianPoint item in Polygon)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Polygon = null;
				}
				else
				{
					Polygon = new List<IfcCartesianPoint>();
					foreach(var val in value)
					{
						if(val is IfcCartesianPoint v)
						{
							Polygon.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPolygonalBoundedHalfSpace
	/// SUBTYPE OF (IfcHalfSpaceSolid);
	/// Position : IfcAxis2Placement3D;
	/// PolygonalBoundary : IfcBoundedCurve;
	/// WHERE
	/// BoundaryDim : PolygonalBoundary.Dim = 2;
	/// BoundaryType : SIZEOF(TYPEOF(PolygonalBoundary) * [
	/// 'IFC4.IFCPOLYLINE',
	/// 'IFC4.IFCCOMPOSITECURVE']
	/// ) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcPolygonalBoundedHalfSpace : IfcHalfSpaceSolid, Global.IfcPolygonalBoundedHalfSpace
	{
		public virtual IfcAxis2Placement3D? Position { get; set; }
		public virtual IfcBoundedCurve? PolygonalBoundary { get; set; }
		public IfcPolygonalBoundedHalfSpace() : base()
		{
		}
		public IfcPolygonalBoundedHalfSpace(IfcSurface? BaseSurface, IfcBoolean? AgreementFlag, IfcAxis2Placement3D? Position, IfcBoundedCurve? PolygonalBoundary) : base (BaseSurface, AgreementFlag)
		{
			this.Position = Position;
			this.PolygonalBoundary = PolygonalBoundary;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BaseSurface,
				AgreementFlag,
				Position,
				PolygonalBoundary
			};
		}
		public virtual Global.IfcAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IfcAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
		public virtual Global.IfcBoundedCurve? _PolygonalBoundary
		{
			get
			{
				return PolygonalBoundary;
			}
			set
			{
				if(value is IfcBoundedCurve val)
				{
					PolygonalBoundary = val;
				}
				else if(value == null)
				{
					PolygonalBoundary = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPolygonalFaceSet
	/// SUBTYPE OF (IfcTessellatedFaceSet);
	/// Closed : OPTIONAL IfcBoolean;
	/// Faces : LIST [1:?] OF IfcIndexedPolygonalFace;
	/// PnIndex : OPTIONAL LIST [1:?] OF IfcPositiveInteger;
	/// END_ENTITY;
	/// <summary>
	public class IfcPolygonalFaceSet : IfcTessellatedFaceSet, Global.IfcPolygonalFaceSet
	{
		public virtual IfcBoolean? Closed { get; set; }
		public virtual List<IfcIndexedPolygonalFace>? Faces { get; set; }
		public virtual List<IfcPositiveInteger>? PnIndex { get; set; }
		public IfcPolygonalFaceSet() : base()
		{
		}
		public IfcPolygonalFaceSet(IfcCartesianPointList3D? Coordinates, IfcBoolean? Closed, List<IfcIndexedPolygonalFace>? Faces, List<IfcPositiveInteger>? PnIndex) : base (Coordinates)
		{
			this.Closed = Closed;
			this.Faces = Faces;
			this.PnIndex = PnIndex;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Coordinates,
				Closed,
				Faces,
				PnIndex
			};
		}
		public virtual Global.IfcBoolean? _Closed
		{
			get
			{
				return Closed;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					Closed = val;
				}
				else if(value == null)
				{
					Closed = null;
				}
			}
		}
		public virtual List<Global.IfcIndexedPolygonalFace>? _Faces
		{
			get
			{
				if(Faces != null)
				{
					List<Global.IfcIndexedPolygonalFace>? items = new List<Global.IfcIndexedPolygonalFace>();
					foreach (IfcIndexedPolygonalFace item in Faces)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Faces = null;
				}
				else
				{
					Faces = new List<IfcIndexedPolygonalFace>();
					foreach(var val in value)
					{
						if(val is IfcIndexedPolygonalFace v)
						{
							Faces.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcPositiveInteger>? _PnIndex
		{
			get
			{
				if(PnIndex != null)
				{
					List<Global.IfcPositiveInteger>? items = new List<Global.IfcPositiveInteger>();
					foreach (IfcPositiveInteger item in PnIndex)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					PnIndex = null;
				}
				else
				{
					PnIndex = new List<IfcPositiveInteger>();
					foreach(var val in value)
					{
						if(val is IfcPositiveInteger v)
						{
							PnIndex.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPolyline
	/// SUBTYPE OF (IfcBoundedCurve);
	/// Points : LIST [2:?] OF IfcCartesianPoint;
	/// WHERE
	/// SameDim : SIZEOF(QUERY(Temp <* Points | Temp.Dim <> Points[1].Dim)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcPolyline : IfcBoundedCurve, Global.IfcPolyline
	{
		public virtual List<IfcCartesianPoint>? Points { get; set; }
		public IfcPolyline() : base()
		{
		}
		public IfcPolyline(List<IfcCartesianPoint>? Points) : base ()
		{
			this.Points = Points;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Points
			};
		}
		public virtual List<Global.IfcCartesianPoint>? _Points
		{
			get
			{
				if(Points != null)
				{
					List<Global.IfcCartesianPoint>? items = new List<Global.IfcCartesianPoint>();
					foreach (IfcCartesianPoint item in Points)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Points = null;
				}
				else
				{
					Points = new List<IfcCartesianPoint>();
					foreach(var val in value)
					{
						if(val is IfcCartesianPoint v)
						{
							Points.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPort
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDistributionPort))
	/// SUBTYPE OF (IfcProduct);
	/// INVERSE
	/// ContainedIn : SET [0:1] OF IfcRelConnectsPortToElement FOR RelatingPort;
	/// ConnectedFrom : SET [0:1] OF IfcRelConnectsPorts FOR RelatedPort;
	/// ConnectedTo : SET [0:1] OF IfcRelConnectsPorts FOR RelatingPort;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPort : IfcProduct, Global.IfcPort
	{
		public List<IfcRelConnectsPortToElement>? ContainedIn {get{return Model?.GetItems<IfcRelConnectsPortToElement>().Where(x => x.RelatingPort != null && x.RelatingPort == this).ToList();}}
		public List<IfcRelConnectsPorts>? ConnectedFrom {get{return Model?.GetItems<IfcRelConnectsPorts>().Where(x => x.RelatedPort != null && x.RelatedPort == this).ToList();}}
		public List<IfcRelConnectsPorts>? ConnectedTo {get{return Model?.GetItems<IfcRelConnectsPorts>().Where(x => x.RelatingPort != null && x.RelatingPort == this).ToList();}}
		public IfcPort() : base()
		{
		}
		public IfcPort(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation
			};
		}
		public virtual List<Global.IfcRelConnectsPortToElement>? _ContainedIn
		{
			get
			{
				if(ContainedIn != null)
				{
					List<Global.IfcRelConnectsPortToElement>? items = new List<Global.IfcRelConnectsPortToElement>();
					foreach (IfcRelConnectsPortToElement item in ContainedIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelConnectsPorts>? _ConnectedFrom
		{
			get
			{
				if(ConnectedFrom != null)
				{
					List<Global.IfcRelConnectsPorts>? items = new List<Global.IfcRelConnectsPorts>();
					foreach (IfcRelConnectsPorts item in ConnectedFrom)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelConnectsPorts>? _ConnectedTo
		{
			get
			{
				if(ConnectedTo != null)
				{
					List<Global.IfcRelConnectsPorts>? items = new List<Global.IfcRelConnectsPorts>();
					foreach (IfcRelConnectsPorts item in ConnectedTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPostalAddress
	/// SUBTYPE OF (IfcAddress);
	/// InternalLocation : OPTIONAL IfcLabel;
	/// AddressLines : OPTIONAL LIST [1:?] OF IfcLabel;
	/// PostalBox : OPTIONAL IfcLabel;
	/// Town : OPTIONAL IfcLabel;
	/// Region : OPTIONAL IfcLabel;
	/// PostalCode : OPTIONAL IfcLabel;
	/// Country : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS (InternalLocation) OR
	/// EXISTS (AddressLines) OR
	/// EXISTS (PostalBox) OR
	/// EXISTS (PostalCode) OR
	/// EXISTS (Town) OR
	/// EXISTS (Region) OR
	/// EXISTS (Country);
	/// END_ENTITY;
	/// <summary>
	public class IfcPostalAddress : IfcAddress, Global.IfcPostalAddress
	{
		public virtual IfcLabel? InternalLocation { get; set; }
		public virtual List<IfcLabel>? AddressLines { get; set; }
		public virtual IfcLabel? PostalBox { get; set; }
		public virtual IfcLabel? Town { get; set; }
		public virtual IfcLabel? Region { get; set; }
		public virtual IfcLabel? PostalCode { get; set; }
		public virtual IfcLabel? Country { get; set; }
		public IfcPostalAddress() : base()
		{
		}
		public IfcPostalAddress(IfcAddressTypeEnum? Purpose, IfcText? Description, IfcLabel? UserDefinedPurpose, IfcLabel? InternalLocation, List<IfcLabel>? AddressLines, IfcLabel? PostalBox, IfcLabel? Town, IfcLabel? Region, IfcLabel? PostalCode, IfcLabel? Country) : base (Purpose, Description, UserDefinedPurpose)
		{
			this.InternalLocation = InternalLocation;
			this.AddressLines = AddressLines;
			this.PostalBox = PostalBox;
			this.Town = Town;
			this.Region = Region;
			this.PostalCode = PostalCode;
			this.Country = Country;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Purpose,
				Description,
				UserDefinedPurpose,
				InternalLocation,
				AddressLines,
				PostalBox,
				Town,
				Region,
				PostalCode,
				Country
			};
		}
		public virtual Global.IfcLabel? _InternalLocation
		{
			get
			{
				return InternalLocation;
			}
			set
			{
				if(value is IfcLabel val)
				{
					InternalLocation = val;
				}
				else if(value == null)
				{
					InternalLocation = null;
				}
			}
		}
		public virtual List<Global.IfcLabel>? _AddressLines
		{
			get
			{
				if(AddressLines != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in AddressLines)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					AddressLines = null;
				}
				else
				{
					AddressLines = new List<IfcLabel>();
					foreach(var val in value)
					{
						if(val is IfcLabel v)
						{
							AddressLines.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _PostalBox
		{
			get
			{
				return PostalBox;
			}
			set
			{
				if(value is IfcLabel val)
				{
					PostalBox = val;
				}
				else if(value == null)
				{
					PostalBox = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Town
		{
			get
			{
				return Town;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Town = val;
				}
				else if(value == null)
				{
					Town = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Region
		{
			get
			{
				return Region;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Region = val;
				}
				else if(value == null)
				{
					Region = null;
				}
			}
		}
		public virtual Global.IfcLabel? _PostalCode
		{
			get
			{
				return PostalCode;
			}
			set
			{
				if(value is IfcLabel val)
				{
					PostalCode = val;
				}
				else if(value == null)
				{
					PostalCode = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Country
		{
			get
			{
				return Country;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Country = val;
				}
				else if(value == null)
				{
					Country = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedColour
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDraughtingPreDefinedColour))
	/// SUBTYPE OF (IfcPreDefinedItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPreDefinedColour : IfcPreDefinedItem, IfcColour, Global.IfcPreDefinedColour
	{
		public IfcPreDefinedColour() : base()
		{
		}
		public IfcPreDefinedColour(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedCurveFont
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDraughtingPreDefinedCurveFont))
	/// SUBTYPE OF (IfcPreDefinedItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPreDefinedCurveFont : IfcPreDefinedItem, IfcCurveStyleFontSelect, Global.IfcPreDefinedCurveFont
	{
		public IfcPreDefinedCurveFont() : base()
		{
		}
		public IfcPreDefinedCurveFont(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPreDefinedColour
	/// ,IfcPreDefinedCurveFont
	/// ,IfcPreDefinedTextFont))
	/// SUBTYPE OF (IfcPresentationItem);
	/// Name : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPreDefinedItem : IfcPresentationItem, Global.IfcPreDefinedItem
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcPreDefinedItem() : base()
		{
		}
		public IfcPreDefinedItem(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedProperties
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcReinforcementBarProperties
	/// ,IfcSectionProperties
	/// ,IfcSectionReinforcementProperties))
	/// SUBTYPE OF (IfcPropertyAbstraction);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPreDefinedProperties : IfcPropertyAbstraction, Global.IfcPreDefinedProperties
	{
		public IfcPreDefinedProperties() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedPropertySet
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDoorLiningProperties
	/// ,IfcDoorPanelProperties
	/// ,IfcPermeableCoveringProperties
	/// ,IfcReinforcementDefinitionProperties
	/// ,IfcWindowLiningProperties
	/// ,IfcWindowPanelProperties))
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPreDefinedPropertySet : IfcPropertySetDefinition, Global.IfcPreDefinedPropertySet
	{
		public IfcPreDefinedPropertySet() : base()
		{
		}
		public IfcPreDefinedPropertySet(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedTextFont
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcTextStyleFontModel))
	/// SUBTYPE OF (IfcPreDefinedItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPreDefinedTextFont : IfcPreDefinedItem, IfcTextFontSelect, Global.IfcPreDefinedTextFont
	{
		public IfcPreDefinedTextFont() : base()
		{
		}
		public IfcPreDefinedTextFont(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPresentationItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcColourRgbList
	/// ,IfcColourSpecification
	/// ,IfcCurveStyleFont
	/// ,IfcCurveStyleFontAndScaling
	/// ,IfcCurveStyleFontPattern
	/// ,IfcIndexedColourMap
	/// ,IfcPreDefinedItem
	/// ,IfcSurfaceStyleLighting
	/// ,IfcSurfaceStyleRefraction
	/// ,IfcSurfaceStyleShading
	/// ,IfcSurfaceStyleWithTextures
	/// ,IfcSurfaceTexture
	/// ,IfcTextStyleForDefinedFont
	/// ,IfcTextStyleTextModel
	/// ,IfcTextureCoordinate
	/// ,IfcTextureVertex
	/// ,IfcTextureVertexList));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPresentationItem : Ifc_Entity, Global.IfcPresentationItem
	{
		public IfcPresentationItem() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPresentationLayerAssignment
	/// SUPERTYPE OF (ONEOF
	/// (IfcPresentationLayerWithStyle));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// AssignedItems : SET [1:?] OF IfcLayeredItem;
	/// Identifier : OPTIONAL IfcIdentifier;
	/// WHERE
	/// ApplicableItems : SIZEOF(QUERY(temp <* AssignedItems | (
	/// SIZEOF(TYPEOF(temp) * [
	/// 'IFC4.IFCSHAPEREPRESENTATION',
	/// 'IFC4.IFCGEOMETRICREPRESENTATIONITEM',
	/// 'IFC4.IFCMAPPEDITEM']) = 1)
	/// )) = SIZEOF(AssignedItems);
	/// END_ENTITY;
	/// <summary>
	public class IfcPresentationLayerAssignment : Ifc_Entity, Global.IfcPresentationLayerAssignment
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual List<IfcLayeredItem>? AssignedItems { get; set; }
		public virtual IfcIdentifier? Identifier { get; set; }
		public IfcPresentationLayerAssignment() : base()
		{
		}
		public IfcPresentationLayerAssignment(IfcLabel? Name, IfcText? Description, List<IfcLayeredItem>? AssignedItems, IfcIdentifier? Identifier) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.AssignedItems = AssignedItems;
			this.Identifier = Identifier;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				AssignedItems,
				Identifier
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual List<Global.IfcLayeredItem>? _AssignedItems
		{
			get
			{
				if(AssignedItems != null)
				{
					List<Global.IfcLayeredItem>? items = new List<Global.IfcLayeredItem>();
					foreach (IfcLayeredItem item in AssignedItems)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					AssignedItems = null;
				}
				else
				{
					AssignedItems = new List<IfcLayeredItem>();
					foreach(var val in value)
					{
						if(val is IfcLayeredItem v)
						{
							AssignedItems.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcIdentifier? _Identifier
		{
			get
			{
				return Identifier;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identifier = val;
				}
				else if(value == null)
				{
					Identifier = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPresentationLayerWithStyle
	/// SUBTYPE OF (IfcPresentationLayerAssignment);
	/// LayerOn : IfcLogical;
	/// LayerFrozen : IfcLogical;
	/// LayerBlocked : IfcLogical;
	/// LayerStyles : SET [0:?] OF IfcPresentationStyle;
	/// WHERE
	/// ApplicableOnlyToItems : SIZEOF(QUERY(temp <* AssignedItems | (
	/// SIZEOF(TYPEOF(temp) * [
	/// 'IFC4.IFCGEOMETRICREPRESENTATIONITEM',
	/// 'IFC4.IFCMAPPEDITEM']) = 1)
	/// )) = SIZEOF(AssignedItems);
	/// END_ENTITY;
	/// <summary>
	public class IfcPresentationLayerWithStyle : IfcPresentationLayerAssignment, Global.IfcPresentationLayerWithStyle
	{
		public virtual IfcLogical? LayerOn { get; set; }
		public virtual IfcLogical? LayerFrozen { get; set; }
		public virtual IfcLogical? LayerBlocked { get; set; }
		public virtual List<IfcPresentationStyle>? LayerStyles { get; set; }
		public IfcPresentationLayerWithStyle() : base()
		{
		}
		public IfcPresentationLayerWithStyle(IfcLabel? Name, IfcText? Description, List<IfcLayeredItem>? AssignedItems, IfcIdentifier? Identifier, IfcLogical? LayerOn, IfcLogical? LayerFrozen, IfcLogical? LayerBlocked, List<IfcPresentationStyle>? LayerStyles) : base (Name, Description, AssignedItems, Identifier)
		{
			this.LayerOn = LayerOn;
			this.LayerFrozen = LayerFrozen;
			this.LayerBlocked = LayerBlocked;
			this.LayerStyles = LayerStyles;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				AssignedItems,
				Identifier,
				LayerOn,
				LayerFrozen,
				LayerBlocked,
				LayerStyles
			};
		}
		public virtual Global.IfcLogical? _LayerOn
		{
			get
			{
				return LayerOn;
			}
			set
			{
				if(value is IfcLogical val)
				{
					LayerOn = val;
				}
				else if(value == null)
				{
					LayerOn = null;
				}
			}
		}
		public virtual Global.IfcLogical? _LayerFrozen
		{
			get
			{
				return LayerFrozen;
			}
			set
			{
				if(value is IfcLogical val)
				{
					LayerFrozen = val;
				}
				else if(value == null)
				{
					LayerFrozen = null;
				}
			}
		}
		public virtual Global.IfcLogical? _LayerBlocked
		{
			get
			{
				return LayerBlocked;
			}
			set
			{
				if(value is IfcLogical val)
				{
					LayerBlocked = val;
				}
				else if(value == null)
				{
					LayerBlocked = null;
				}
			}
		}
		public virtual List<Global.IfcPresentationStyle>? _LayerStyles
		{
			get
			{
				if(LayerStyles != null)
				{
					List<Global.IfcPresentationStyle>? items = new List<Global.IfcPresentationStyle>();
					foreach (IfcPresentationStyle item in LayerStyles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					LayerStyles = null;
				}
				else
				{
					LayerStyles = new List<IfcPresentationStyle>();
					foreach(var val in value)
					{
						if(val is IfcPresentationStyle v)
						{
							LayerStyles.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPresentationStyle
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCurveStyle
	/// ,IfcFillAreaStyle
	/// ,IfcSurfaceStyle
	/// ,IfcTextStyle));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPresentationStyle : Ifc_Entity, IfcStyleAssignmentSelect, Global.IfcPresentationStyle
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcPresentationStyle() : base()
		{
		}
		public IfcPresentationStyle(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPresentationStyleAssignment;
	/// Styles : SET [1:?] OF IfcPresentationStyleSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcPresentationStyleAssignment : Ifc_Entity, IfcStyleAssignmentSelect, Global.IfcPresentationStyleAssignment
	{
		public virtual List<IfcPresentationStyleSelect>? Styles { get; set; }
		public IfcPresentationStyleAssignment() : base()
		{
		}
		public IfcPresentationStyleAssignment(List<IfcPresentationStyleSelect>? Styles) : base ()
		{
			this.Styles = Styles;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Styles
			};
		}
		public virtual List<Global.IfcPresentationStyleSelect>? _Styles
		{
			get
			{
				if(Styles != null)
				{
					List<Global.IfcPresentationStyleSelect>? items = new List<Global.IfcPresentationStyleSelect>();
					foreach (IfcPresentationStyleSelect item in Styles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Styles = null;
				}
				else
				{
					Styles = new List<IfcPresentationStyleSelect>();
					foreach(var val in value)
					{
						if(val is IfcPresentationStyleSelect v)
						{
							Styles.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProcedure
	/// SUBTYPE OF (IfcProcess);
	/// PredefinedType : OPTIONAL IfcProcedureTypeEnum;
	/// WHERE
	/// HasName : EXISTS(SELF\IfcRoot.Name);
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR (PredefinedType <> IfcProcedureTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcProcedureTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcProcedure : IfcProcess, Global.IfcProcedure
	{
		public virtual IfcProcedureTypeEnum? PredefinedType { get; set; }
		public IfcProcedure() : base()
		{
		}
		public IfcProcedure(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription, IfcProcedureTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription,
				PredefinedType
			};
		}
		public virtual Global.IfcProcedureTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcProcedureTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProcedureType
	/// SUBTYPE OF (IfcTypeProcess);
	/// PredefinedType : IfcProcedureTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcProcedureTypeEnum.USERDEFINED) OR ((PredefinedType = IfcProcedureTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcTypeProcess.ProcessType));
	/// END_ENTITY;
	/// <summary>
	public class IfcProcedureType : IfcTypeProcess, Global.IfcProcedureType
	{
		public virtual IfcProcedureTypeEnum? PredefinedType { get; set; }
		public IfcProcedureType() : base()
		{
		}
		public IfcProcedureType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ProcessType, IfcProcedureTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ProcessType,
				PredefinedType
			};
		}
		public virtual Global.IfcProcedureTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcProcedureTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProcess
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcEvent
	/// ,IfcProcedure
	/// ,IfcTask))
	/// SUBTYPE OF (IfcObject);
	/// Identification : OPTIONAL IfcIdentifier;
	/// LongDescription : OPTIONAL IfcText;
	/// INVERSE
	/// IsPredecessorTo : SET [0:?] OF IfcRelSequence FOR RelatingProcess;
	/// IsSuccessorFrom : SET [0:?] OF IfcRelSequence FOR RelatedProcess;
	/// OperatesOn : SET [0:?] OF IfcRelAssignsToProcess FOR RelatingProcess;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcProcess : IfcObject, IfcProcessSelect, Global.IfcProcess
	{
		public virtual IfcIdentifier? Identification { get; set; }
		public virtual IfcText? LongDescription { get; set; }
		public List<IfcRelSequence>? IsPredecessorTo {get{return Model?.GetItems<IfcRelSequence>().Where(x => x.RelatingProcess != null && x.RelatingProcess == this).ToList();}}
		public List<IfcRelSequence>? IsSuccessorFrom {get{return Model?.GetItems<IfcRelSequence>().Where(x => x.RelatedProcess != null && x.RelatedProcess == this).ToList();}}
		public List<IfcRelAssignsToProcess>? OperatesOn {get{return Model?.GetItems<IfcRelAssignsToProcess>().Where(x => x.RelatingProcess != null && x.RelatingProcess == this).ToList();}}
		public IfcProcess() : base()
		{
		}
		public IfcProcess(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.Identification = Identification;
			this.LongDescription = LongDescription;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription
			};
		}
		public virtual Global.IfcIdentifier? _Identification
		{
			get
			{
				return Identification;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identification = val;
				}
				else if(value == null)
				{
					Identification = null;
				}
			}
		}
		public virtual Global.IfcText? _LongDescription
		{
			get
			{
				return LongDescription;
			}
			set
			{
				if(value is IfcText val)
				{
					LongDescription = val;
				}
				else if(value == null)
				{
					LongDescription = null;
				}
			}
		}
		public virtual List<Global.IfcRelSequence>? _IsPredecessorTo
		{
			get
			{
				if(IsPredecessorTo != null)
				{
					List<Global.IfcRelSequence>? items = new List<Global.IfcRelSequence>();
					foreach (IfcRelSequence item in IsPredecessorTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelSequence>? _IsSuccessorFrom
		{
			get
			{
				if(IsSuccessorFrom != null)
				{
					List<Global.IfcRelSequence>? items = new List<Global.IfcRelSequence>();
					foreach (IfcRelSequence item in IsSuccessorFrom)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelAssignsToProcess>? _OperatesOn
		{
			get
			{
				if(OperatesOn != null)
				{
					List<Global.IfcRelAssignsToProcess>? items = new List<Global.IfcRelAssignsToProcess>();
					foreach (IfcRelAssignsToProcess item in OperatesOn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProduct
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAnnotation
	/// ,IfcElement
	/// ,IfcGrid
	/// ,IfcPort
	/// ,IfcProxy
	/// ,IfcSpatialElement
	/// ,IfcStructuralActivity
	/// ,IfcStructuralItem))
	/// SUBTYPE OF (IfcObject);
	/// ObjectPlacement : OPTIONAL IfcObjectPlacement;
	/// Representation : OPTIONAL IfcProductRepresentation;
	/// INVERSE
	/// ReferencedBy : SET [0:?] OF IfcRelAssignsToProduct FOR RelatingProduct;
	/// WHERE
	/// PlacementForShapeRepresentation : (EXISTS(Representation) AND EXISTS(ObjectPlacement))
	/// OR (EXISTS(Representation) AND
	/// (SIZEOF(QUERY(temp <* Representation.Representations | 'IFC4.IFCSHAPEREPRESENTATION' IN TYPEOF(temp))) = 0))
	/// OR (NOT(EXISTS(Representation)));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcProduct : IfcObject, IfcProductSelect, Global.IfcProduct
	{
		public virtual IfcObjectPlacement? ObjectPlacement { get; set; }
		public virtual IfcProductRepresentation? Representation { get; set; }
		public List<IfcRelAssignsToProduct>? ReferencedBy {get{return Model?.GetItems<IfcRelAssignsToProduct>().Where(x => x.RelatingProduct != null && x.RelatingProduct == this).ToList();}}
		public IfcProduct() : base()
		{
		}
		public IfcProduct(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation
			};
		}
		public virtual Global.IfcObjectPlacement? _ObjectPlacement
		{
			get
			{
				return ObjectPlacement;
			}
			set
			{
				if(value is IfcObjectPlacement val)
				{
					ObjectPlacement = val;
				}
				else if(value == null)
				{
					ObjectPlacement = null;
				}
			}
		}
		public virtual Global.IfcProductRepresentation? _Representation
		{
			get
			{
				return Representation;
			}
			set
			{
				if(value is IfcProductRepresentation val)
				{
					Representation = val;
				}
				else if(value == null)
				{
					Representation = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssignsToProduct>? _ReferencedBy
		{
			get
			{
				if(ReferencedBy != null)
				{
					List<Global.IfcRelAssignsToProduct>? items = new List<Global.IfcRelAssignsToProduct>();
					foreach (IfcRelAssignsToProduct item in ReferencedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProductDefinitionShape
	/// SUBTYPE OF (IfcProductRepresentation);
	/// INVERSE
	/// ShapeOfProduct : SET [1:?] OF IfcProduct FOR Representation;
	/// HasShapeAspects : SET [0:?] OF IfcShapeAspect FOR PartOfProductDefinitionShape;
	/// WHERE
	/// OnlyShapeModel : SIZEOF(QUERY(temp <* Representations |
	/// (NOT('IFC4.IFCSHAPEMODEL' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcProductDefinitionShape : IfcProductRepresentation, IfcProductRepresentationSelect, Global.IfcProductDefinitionShape
	{
		public List<IfcProduct>? ShapeOfProduct {get{return Model?.GetItems<IfcProduct>().Where(x => x.Representation != null && x.Representation == this).ToList();}}
		public List<IfcShapeAspect>? HasShapeAspects {get{return Model?.GetItems<IfcShapeAspect>().Where(x => x.PartOfProductDefinitionShape != null && x.PartOfProductDefinitionShape == this).ToList();}}
		public IfcProductDefinitionShape() : base()
		{
		}
		public IfcProductDefinitionShape(IfcLabel? Name, IfcText? Description, List<IfcRepresentation>? Representations) : base (Name, Description, Representations)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Representations
			};
		}
		public virtual List<Global.IfcProduct>? _ShapeOfProduct
		{
			get
			{
				if(ShapeOfProduct != null)
				{
					List<Global.IfcProduct>? items = new List<Global.IfcProduct>();
					foreach (IfcProduct item in ShapeOfProduct)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcShapeAspect>? _HasShapeAspects
		{
			get
			{
				if(HasShapeAspects != null)
				{
					List<Global.IfcShapeAspect>? items = new List<Global.IfcShapeAspect>();
					foreach (IfcShapeAspect item in HasShapeAspects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProductRepresentation
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcMaterialDefinitionRepresentation
	/// ,IfcProductDefinitionShape));
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Representations : LIST [1:?] OF IfcRepresentation;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcProductRepresentation : Ifc_Entity, Global.IfcProductRepresentation
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual List<IfcRepresentation>? Representations { get; set; }
		public IfcProductRepresentation() : base()
		{
		}
		public IfcProductRepresentation(IfcLabel? Name, IfcText? Description, List<IfcRepresentation>? Representations) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.Representations = Representations;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Representations
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual List<Global.IfcRepresentation>? _Representations
		{
			get
			{
				if(Representations != null)
				{
					List<Global.IfcRepresentation>? items = new List<Global.IfcRepresentation>();
					foreach (IfcRepresentation item in Representations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Representations = null;
				}
				else
				{
					Representations = new List<IfcRepresentation>();
					foreach(var val in value)
					{
						if(val is IfcRepresentation v)
						{
							Representations.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcArbitraryClosedProfileDef
	/// ,IfcArbitraryOpenProfileDef
	/// ,IfcCompositeProfileDef
	/// ,IfcDerivedProfileDef
	/// ,IfcParameterizedProfileDef));
	/// ProfileType : IfcProfileTypeEnum;
	/// ProfileName : OPTIONAL IfcLabel;
	/// INVERSE
	/// HasExternalReference : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
	/// HasProperties : SET [0:?] OF IfcProfileProperties FOR ProfileDefinition;
	/// END_ENTITY;
	/// <summary>
	public class IfcProfileDef : Ifc_Entity, IfcResourceObjectSelect, Global.IfcProfileDef
	{
		public virtual IfcProfileTypeEnum? ProfileType { get; set; }
		public virtual IfcLabel? ProfileName { get; set; }
		public List<IfcExternalReferenceRelationship>? HasExternalReference {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public List<IfcProfileProperties>? HasProperties {get{return Model?.GetItems<IfcProfileProperties>().Where(x => x.ProfileDefinition != null && x.ProfileDefinition == this).ToList();}}
		public IfcProfileDef() : base()
		{
		}
		public IfcProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName) : base ()
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName
			};
		}
		public virtual Global.IfcProfileTypeEnum? _ProfileType
		{
			get
			{
				return ProfileType;
			}
			set
			{
				if(value is IfcProfileTypeEnum val)
				{
					ProfileType = val;
				}
				else if(value == null)
				{
					ProfileType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _ProfileName
		{
			get
			{
				return ProfileName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ProfileName = val;
				}
				else if(value == null)
				{
					ProfileName = null;
				}
			}
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _HasExternalReference
		{
			get
			{
				if(HasExternalReference != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in HasExternalReference)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcProfileProperties>? _HasProperties
		{
			get
			{
				if(HasProperties != null)
				{
					List<Global.IfcProfileProperties>? items = new List<Global.IfcProfileProperties>();
					foreach (IfcProfileProperties item in HasProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProfileProperties
	/// SUBTYPE OF (IfcExtendedProperties);
	/// ProfileDefinition : IfcProfileDef;
	/// END_ENTITY;
	/// <summary>
	public class IfcProfileProperties : IfcExtendedProperties, Global.IfcProfileProperties
	{
		public virtual IfcProfileDef? ProfileDefinition { get; set; }
		public IfcProfileProperties() : base()
		{
		}
		public IfcProfileProperties(IfcIdentifier? Name, IfcText? Description, List<IfcProperty>? Properties, IfcProfileDef? ProfileDefinition) : base (Name, Description, Properties)
		{
			this.ProfileDefinition = ProfileDefinition;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Properties,
				ProfileDefinition
			};
		}
		public virtual Global.IfcProfileDef? _ProfileDefinition
		{
			get
			{
				return ProfileDefinition;
			}
			set
			{
				if(value is IfcProfileDef val)
				{
					ProfileDefinition = val;
				}
				else if(value == null)
				{
					ProfileDefinition = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProject
	/// SUBTYPE OF (IfcContext);
	/// WHERE
	/// HasName : EXISTS(SELF\IfcRoot.Name);
	/// CorrectContext : NOT(EXISTS(SELF\IfcContext.RepresentationContexts)) OR
	/// (SIZEOF(QUERY(Temp <* SELF\IfcContext.RepresentationContexts |
	/// 'IFC4.IFCGEOMETRICREPRESENTATIONSUBCONTEXT' IN TYPEOF(Temp)
	/// )) = 0);
	/// NoDecomposition : SIZEOF(SELF\IfcObjectDefinition.Decomposes) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcProject : IfcContext, Global.IfcProject
	{
		public IfcProject() : base()
		{
		}
		public IfcProject(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcLabel? LongName, IfcLabel? Phase, List<IfcRepresentationContext>? RepresentationContexts, IfcUnitAssignment? UnitsInContext) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, Phase, RepresentationContexts, UnitsInContext)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				LongName,
				Phase,
				RepresentationContexts,
				UnitsInContext
			};
		}
	}
	/// <summary>
	/// ENTITY IfcProjectLibrary
	/// SUBTYPE OF (IfcContext);
	/// END_ENTITY;
	/// <summary>
	public class IfcProjectLibrary : IfcContext, Global.IfcProjectLibrary
	{
		public IfcProjectLibrary() : base()
		{
		}
		public IfcProjectLibrary(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcLabel? LongName, IfcLabel? Phase, List<IfcRepresentationContext>? RepresentationContexts, IfcUnitAssignment? UnitsInContext) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, Phase, RepresentationContexts, UnitsInContext)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				LongName,
				Phase,
				RepresentationContexts,
				UnitsInContext
			};
		}
	}
	/// <summary>
	/// ENTITY IfcProjectOrder
	/// SUBTYPE OF (IfcControl);
	/// PredefinedType : OPTIONAL IfcProjectOrderTypeEnum;
	/// Status : OPTIONAL IfcLabel;
	/// LongDescription : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IfcProjectOrder : IfcControl, Global.IfcProjectOrder
	{
		public virtual IfcProjectOrderTypeEnum? PredefinedType { get; set; }
		public virtual IfcLabel? Status { get; set; }
		public virtual IfcText? LongDescription { get; set; }
		public IfcProjectOrder() : base()
		{
		}
		public IfcProjectOrder(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcProjectOrderTypeEnum? PredefinedType, IfcLabel? Status, IfcText? LongDescription) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification)
		{
			this.PredefinedType = PredefinedType;
			this.Status = Status;
			this.LongDescription = LongDescription;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				PredefinedType,
				Status,
				LongDescription
			};
		}
		public virtual Global.IfcProjectOrderTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcProjectOrderTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Status
		{
			get
			{
				return Status;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Status = val;
				}
				else if(value == null)
				{
					Status = null;
				}
			}
		}
		public virtual Global.IfcText? _LongDescription
		{
			get
			{
				return LongDescription;
			}
			set
			{
				if(value is IfcText val)
				{
					LongDescription = val;
				}
				else if(value == null)
				{
					LongDescription = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProjectedCRS
	/// SUBTYPE OF (IfcCoordinateReferenceSystem);
	/// MapProjection : OPTIONAL IfcIdentifier;
	/// MapZone : OPTIONAL IfcIdentifier;
	/// MapUnit : OPTIONAL IfcNamedUnit;
	/// WHERE
	/// IsLengthUnit : NOT(EXISTS(MapUnit)) OR (MapUnit.UnitType = IfcUnitEnum.LENGTHUNIT);
	/// END_ENTITY;
	/// <summary>
	public class IfcProjectedCRS : IfcCoordinateReferenceSystem, Global.IfcProjectedCRS
	{
		public virtual IfcIdentifier? MapProjection { get; set; }
		public virtual IfcIdentifier? MapZone { get; set; }
		public virtual IfcNamedUnit? MapUnit { get; set; }
		public IfcProjectedCRS() : base()
		{
		}
		public IfcProjectedCRS(IfcLabel? Name, IfcText? Description, IfcIdentifier? GeodeticDatum, IfcIdentifier? VerticalDatum, IfcIdentifier? MapProjection, IfcIdentifier? MapZone, IfcNamedUnit? MapUnit) : base (Name, Description, GeodeticDatum, VerticalDatum)
		{
			this.MapProjection = MapProjection;
			this.MapZone = MapZone;
			this.MapUnit = MapUnit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				GeodeticDatum,
				VerticalDatum,
				MapProjection,
				MapZone,
				MapUnit
			};
		}
		public virtual Global.IfcIdentifier? _MapProjection
		{
			get
			{
				return MapProjection;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					MapProjection = val;
				}
				else if(value == null)
				{
					MapProjection = null;
				}
			}
		}
		public virtual Global.IfcIdentifier? _MapZone
		{
			get
			{
				return MapZone;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					MapZone = val;
				}
				else if(value == null)
				{
					MapZone = null;
				}
			}
		}
		public virtual Global.IfcNamedUnit? _MapUnit
		{
			get
			{
				return MapUnit;
			}
			set
			{
				if(value is IfcNamedUnit val)
				{
					MapUnit = val;
				}
				else if(value == null)
				{
					MapUnit = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProjectionElement
	/// SUBTYPE OF (IfcFeatureElementAddition);
	/// PredefinedType : OPTIONAL IfcProjectionElementTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcProjectionElement : IfcFeatureElementAddition, Global.IfcProjectionElement
	{
		public virtual IfcProjectionElementTypeEnum? PredefinedType { get; set; }
		public IfcProjectionElement() : base()
		{
		}
		public IfcProjectionElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcProjectionElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcProjectionElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcProjectionElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProperty
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcComplexProperty
	/// ,IfcSimpleProperty))
	/// SUBTYPE OF (IfcPropertyAbstraction);
	/// Name : IfcIdentifier;
	/// Description : OPTIONAL IfcText;
	/// INVERSE
	/// PartOfPset : SET [0:?] OF IfcPropertySet FOR HasProperties;
	/// PropertyForDependance : SET [0:?] OF IfcPropertyDependencyRelationship FOR DependingProperty;
	/// PropertyDependsOn : SET [0:?] OF IfcPropertyDependencyRelationship FOR DependantProperty;
	/// PartOfComplex : SET [0:?] OF IfcComplexProperty FOR HasProperties;
	/// HasConstraints : SET [0:?] OF IfcResourceConstraintRelationship FOR RelatedResourceObjects;
	/// HasApprovals : SET [0:?] OF IfcResourceApprovalRelationship FOR RelatedResourceObjects;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcProperty : IfcPropertyAbstraction, Global.IfcProperty
	{
		public virtual IfcIdentifier? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public List<IfcPropertySet>? PartOfPset {get{return Model?.GetItems<IfcPropertySet>().Where(x => x.HasProperties != null && x.HasProperties.Contains(this)).ToList();}}
		public List<IfcPropertyDependencyRelationship>? PropertyForDependance {get{return Model?.GetItems<IfcPropertyDependencyRelationship>().Where(x => x.DependingProperty != null && x.DependingProperty == this).ToList();}}
		public List<IfcPropertyDependencyRelationship>? PropertyDependsOn {get{return Model?.GetItems<IfcPropertyDependencyRelationship>().Where(x => x.DependantProperty != null && x.DependantProperty == this).ToList();}}
		public List<IfcComplexProperty>? PartOfComplex {get{return Model?.GetItems<IfcComplexProperty>().Where(x => x.HasProperties != null && x.HasProperties.Contains(this)).ToList();}}
		public List<IfcResourceConstraintRelationship>? HasConstraints {get{return Model?.GetItems<IfcResourceConstraintRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public List<IfcResourceApprovalRelationship>? HasApprovals {get{return Model?.GetItems<IfcResourceApprovalRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public IfcProperty() : base()
		{
		}
		public IfcProperty(IfcIdentifier? Name, IfcText? Description) : base ()
		{
			this.Name = Name;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description
			};
		}
		public virtual Global.IfcIdentifier? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual List<Global.IfcPropertySet>? _PartOfPset
		{
			get
			{
				if(PartOfPset != null)
				{
					List<Global.IfcPropertySet>? items = new List<Global.IfcPropertySet>();
					foreach (IfcPropertySet item in PartOfPset)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcPropertyDependencyRelationship>? _PropertyForDependance
		{
			get
			{
				if(PropertyForDependance != null)
				{
					List<Global.IfcPropertyDependencyRelationship>? items = new List<Global.IfcPropertyDependencyRelationship>();
					foreach (IfcPropertyDependencyRelationship item in PropertyForDependance)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcPropertyDependencyRelationship>? _PropertyDependsOn
		{
			get
			{
				if(PropertyDependsOn != null)
				{
					List<Global.IfcPropertyDependencyRelationship>? items = new List<Global.IfcPropertyDependencyRelationship>();
					foreach (IfcPropertyDependencyRelationship item in PropertyDependsOn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcComplexProperty>? _PartOfComplex
		{
			get
			{
				if(PartOfComplex != null)
				{
					List<Global.IfcComplexProperty>? items = new List<Global.IfcComplexProperty>();
					foreach (IfcComplexProperty item in PartOfComplex)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcResourceConstraintRelationship>? _HasConstraints
		{
			get
			{
				if(HasConstraints != null)
				{
					List<Global.IfcResourceConstraintRelationship>? items = new List<Global.IfcResourceConstraintRelationship>();
					foreach (IfcResourceConstraintRelationship item in HasConstraints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcResourceApprovalRelationship>? _HasApprovals
		{
			get
			{
				if(HasApprovals != null)
				{
					List<Global.IfcResourceApprovalRelationship>? items = new List<Global.IfcResourceApprovalRelationship>();
					foreach (IfcResourceApprovalRelationship item in HasApprovals)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyAbstraction
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcExtendedProperties
	/// ,IfcPreDefinedProperties
	/// ,IfcProperty
	/// ,IfcPropertyEnumeration));
	/// INVERSE
	/// HasExternalReferences : SET [0:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPropertyAbstraction : Ifc_Entity, IfcResourceObjectSelect, Global.IfcPropertyAbstraction
	{
		public List<IfcExternalReferenceRelationship>? HasExternalReferences {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public IfcPropertyAbstraction() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _HasExternalReferences
		{
			get
			{
				if(HasExternalReferences != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in HasExternalReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyBoundedValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// UpperBoundValue : OPTIONAL IfcValue;
	/// LowerBoundValue : OPTIONAL IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// SetPointValue : OPTIONAL IfcValue;
	/// WHERE
	/// SameUnitUpperLower : NOT(EXISTS(UpperBoundValue)) OR NOT(EXISTS(LowerBoundValue)) OR
	/// (TYPEOF(UpperBoundValue) = TYPEOF(LowerBoundValue));
	/// SameUnitUpperSet : NOT(EXISTS(UpperBoundValue)) OR NOT(EXISTS(SetPointValue)) OR
	/// (TYPEOF(UpperBoundValue) = TYPEOF(SetPointValue));
	/// SameUnitLowerSet : NOT(EXISTS(LowerBoundValue)) OR NOT(EXISTS(SetPointValue)) OR
	/// (TYPEOF(LowerBoundValue) = TYPEOF(SetPointValue));
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyBoundedValue : IfcSimpleProperty, Global.IfcPropertyBoundedValue
	{
		public virtual IfcValue? UpperBoundValue { get; set; }
		public virtual IfcValue? LowerBoundValue { get; set; }
		public virtual IfcUnit? Unit { get; set; }
		public virtual IfcValue? SetPointValue { get; set; }
		public IfcPropertyBoundedValue() : base()
		{
		}
		public IfcPropertyBoundedValue(IfcIdentifier? Name, IfcText? Description, IfcValue? UpperBoundValue, IfcValue? LowerBoundValue, IfcUnit? Unit, IfcValue? SetPointValue) : base (Name, Description)
		{
			this.UpperBoundValue = UpperBoundValue;
			this.LowerBoundValue = LowerBoundValue;
			this.Unit = Unit;
			this.SetPointValue = SetPointValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				UpperBoundValue,
				LowerBoundValue,
				Unit,
				SetPointValue
			};
		}
		public virtual Global.IfcValue? _UpperBoundValue
		{
			get
			{
				return UpperBoundValue;
			}
			set
			{
				if(value is IfcValue val)
				{
					UpperBoundValue = val;
				}
				else if(value == null)
				{
					UpperBoundValue = null;
				}
			}
		}
		public virtual Global.IfcValue? _LowerBoundValue
		{
			get
			{
				return LowerBoundValue;
			}
			set
			{
				if(value is IfcValue val)
				{
					LowerBoundValue = val;
				}
				else if(value == null)
				{
					LowerBoundValue = null;
				}
			}
		}
		public virtual Global.IfcUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IfcUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
		public virtual Global.IfcValue? _SetPointValue
		{
			get
			{
				return SetPointValue;
			}
			set
			{
				if(value is IfcValue val)
				{
					SetPointValue = val;
				}
				else if(value == null)
				{
					SetPointValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPropertySetDefinition
	/// ,IfcPropertyTemplateDefinition))
	/// SUBTYPE OF (IfcRoot);
	/// INVERSE
	/// HasContext : SET [0:1] OF IfcRelDeclares FOR RelatedDefinitions;
	/// HasAssociations : SET [0:?] OF IfcRelAssociates FOR RelatedObjects;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPropertyDefinition : IfcRoot, IfcDefinitionSelect, Global.IfcPropertyDefinition
	{
		public List<IfcRelDeclares>? HasContext {get{return Model?.GetItems<IfcRelDeclares>().Where(x => x.RelatedDefinitions != null && x.RelatedDefinitions.Contains(this)).ToList();}}
		public List<IfcRelAssociates>? HasAssociations {get{return Model?.GetItems<IfcRelAssociates>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();}}
		public IfcPropertyDefinition() : base()
		{
		}
		public IfcPropertyDefinition(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
		public virtual List<Global.IfcRelDeclares>? _HasContext
		{
			get
			{
				if(HasContext != null)
				{
					List<Global.IfcRelDeclares>? items = new List<Global.IfcRelDeclares>();
					foreach (IfcRelDeclares item in HasContext)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelAssociates>? _HasAssociations
		{
			get
			{
				if(HasAssociations != null)
				{
					List<Global.IfcRelAssociates>? items = new List<Global.IfcRelAssociates>();
					foreach (IfcRelAssociates item in HasAssociations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyDependencyRelationship
	/// SUBTYPE OF (IfcResourceLevelRelationship);
	/// DependingProperty : IfcProperty;
	/// DependantProperty : IfcProperty;
	/// Expression : OPTIONAL IfcText;
	/// WHERE
	/// NoSelfReference : DependingProperty :<>: DependantProperty;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyDependencyRelationship : IfcResourceLevelRelationship, Global.IfcPropertyDependencyRelationship
	{
		public virtual IfcProperty? DependingProperty { get; set; }
		public virtual IfcProperty? DependantProperty { get; set; }
		public virtual IfcText? Expression { get; set; }
		public IfcPropertyDependencyRelationship() : base()
		{
		}
		public IfcPropertyDependencyRelationship(IfcLabel? Name, IfcText? Description, IfcProperty? DependingProperty, IfcProperty? DependantProperty, IfcText? Expression) : base (Name, Description)
		{
			this.DependingProperty = DependingProperty;
			this.DependantProperty = DependantProperty;
			this.Expression = Expression;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				DependingProperty,
				DependantProperty,
				Expression
			};
		}
		public virtual Global.IfcProperty? _DependingProperty
		{
			get
			{
				return DependingProperty;
			}
			set
			{
				if(value is IfcProperty val)
				{
					DependingProperty = val;
				}
				else if(value == null)
				{
					DependingProperty = null;
				}
			}
		}
		public virtual Global.IfcProperty? _DependantProperty
		{
			get
			{
				return DependantProperty;
			}
			set
			{
				if(value is IfcProperty val)
				{
					DependantProperty = val;
				}
				else if(value == null)
				{
					DependantProperty = null;
				}
			}
		}
		public virtual Global.IfcText? _Expression
		{
			get
			{
				return Expression;
			}
			set
			{
				if(value is IfcText val)
				{
					Expression = val;
				}
				else if(value == null)
				{
					Expression = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyEnumeratedValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// EnumerationValues : OPTIONAL LIST [1:?] OF IfcValue;
	/// EnumerationReference : OPTIONAL IfcPropertyEnumeration;
	/// WHERE
	/// WR21 : NOT(EXISTS(EnumerationReference))
	/// OR  NOT(EXISTS(EnumerationValues))
	/// OR  (SIZEOF(QUERY(temp <* EnumerationValues |
	/// temp IN EnumerationReference.EnumerationValues))
	/// = SIZEOF(EnumerationValues));
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyEnumeratedValue : IfcSimpleProperty, Global.IfcPropertyEnumeratedValue
	{
		public virtual List<IfcValue>? EnumerationValues { get; set; }
		public virtual IfcPropertyEnumeration? EnumerationReference { get; set; }
		public IfcPropertyEnumeratedValue() : base()
		{
		}
		public IfcPropertyEnumeratedValue(IfcIdentifier? Name, IfcText? Description, List<IfcValue>? EnumerationValues, IfcPropertyEnumeration? EnumerationReference) : base (Name, Description)
		{
			this.EnumerationValues = EnumerationValues;
			this.EnumerationReference = EnumerationReference;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				EnumerationValues,
				EnumerationReference
			};
		}
		public virtual List<Global.IfcValue>? _EnumerationValues
		{
			get
			{
				if(EnumerationValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in EnumerationValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					EnumerationValues = null;
				}
				else
				{
					EnumerationValues = new List<IfcValue>();
					foreach(var val in value)
					{
						if(val is IfcValue v)
						{
							EnumerationValues.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcPropertyEnumeration? _EnumerationReference
		{
			get
			{
				return EnumerationReference;
			}
			set
			{
				if(value is IfcPropertyEnumeration val)
				{
					EnumerationReference = val;
				}
				else if(value == null)
				{
					EnumerationReference = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyEnumeration
	/// SUBTYPE OF (IfcPropertyAbstraction);
	/// Name : IfcLabel;
	/// EnumerationValues : LIST [1:?] OF UNIQUE IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// UNIQUE
	/// UR1 : Name;
	/// WHERE
	/// WR01 : SIZEOF(QUERY(temp <* SELF.EnumerationValues |
	/// NOT(TYPEOF(SELF.EnumerationValues[1]) = TYPEOF(temp))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyEnumeration : IfcPropertyAbstraction, Global.IfcPropertyEnumeration
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual List<IfcValue>? EnumerationValues { get; set; }
		public virtual IfcUnit? Unit { get; set; }
		public IfcPropertyEnumeration() : base()
		{
		}
		public IfcPropertyEnumeration(IfcLabel? Name, List<IfcValue>? EnumerationValues, IfcUnit? Unit) : base ()
		{
			this.Name = Name;
			this.EnumerationValues = EnumerationValues;
			this.Unit = Unit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				EnumerationValues,
				Unit
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual List<Global.IfcValue>? _EnumerationValues
		{
			get
			{
				if(EnumerationValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in EnumerationValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					EnumerationValues = null;
				}
				else
				{
					EnumerationValues = new List<IfcValue>();
					foreach(var val in value)
					{
						if(val is IfcValue v)
						{
							EnumerationValues.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IfcUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyListValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// ListValues : OPTIONAL LIST [1:?] OF IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// WHERE
	/// WR31 : SIZEOF(QUERY(temp <* SELF.ListValues |
	/// NOT(TYPEOF(SELF.ListValues[1]) = TYPEOF(temp))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyListValue : IfcSimpleProperty, Global.IfcPropertyListValue
	{
		public virtual List<IfcValue>? ListValues { get; set; }
		public virtual IfcUnit? Unit { get; set; }
		public IfcPropertyListValue() : base()
		{
		}
		public IfcPropertyListValue(IfcIdentifier? Name, IfcText? Description, List<IfcValue>? ListValues, IfcUnit? Unit) : base (Name, Description)
		{
			this.ListValues = ListValues;
			this.Unit = Unit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				ListValues,
				Unit
			};
		}
		public virtual List<Global.IfcValue>? _ListValues
		{
			get
			{
				if(ListValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in ListValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ListValues = null;
				}
				else
				{
					ListValues = new List<IfcValue>();
					foreach(var val in value)
					{
						if(val is IfcValue v)
						{
							ListValues.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IfcUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyReferenceValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// UsageName : OPTIONAL IfcText;
	/// PropertyReference : OPTIONAL IfcObjectReferenceSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyReferenceValue : IfcSimpleProperty, Global.IfcPropertyReferenceValue
	{
		public virtual IfcText? UsageName { get; set; }
		public virtual IfcObjectReferenceSelect? PropertyReference { get; set; }
		public IfcPropertyReferenceValue() : base()
		{
		}
		public IfcPropertyReferenceValue(IfcIdentifier? Name, IfcText? Description, IfcText? UsageName, IfcObjectReferenceSelect? PropertyReference) : base (Name, Description)
		{
			this.UsageName = UsageName;
			this.PropertyReference = PropertyReference;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				UsageName,
				PropertyReference
			};
		}
		public virtual Global.IfcText? _UsageName
		{
			get
			{
				return UsageName;
			}
			set
			{
				if(value is IfcText val)
				{
					UsageName = val;
				}
				else if(value == null)
				{
					UsageName = null;
				}
			}
		}
		public virtual Global.IfcObjectReferenceSelect? _PropertyReference
		{
			get
			{
				return PropertyReference;
			}
			set
			{
				if(value is IfcObjectReferenceSelect val)
				{
					PropertyReference = val;
				}
				else if(value == null)
				{
					PropertyReference = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertySet
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// HasProperties : SET [1:?] OF IfcProperty;
	/// WHERE
	/// ExistsName : EXISTS(SELF\IfcRoot.Name);
	/// UniquePropertyNames : IfcUniquePropertyName(HasProperties);
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertySet : IfcPropertySetDefinition, Global.IfcPropertySet
	{
		public virtual List<IfcProperty>? HasProperties { get; set; }
		public IfcPropertySet() : base()
		{
		}
		public IfcPropertySet(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcProperty>? HasProperties) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.HasProperties = HasProperties;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				HasProperties
			};
		}
		public virtual List<Global.IfcProperty>? _HasProperties
		{
			get
			{
				if(HasProperties != null)
				{
					List<Global.IfcProperty>? items = new List<Global.IfcProperty>();
					foreach (IfcProperty item in HasProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasProperties = null;
				}
				else
				{
					HasProperties = new List<IfcProperty>();
					foreach(var val in value)
					{
						if(val is IfcProperty v)
						{
							HasProperties.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertySetDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPreDefinedPropertySet
	/// ,IfcPropertySet
	/// ,IfcQuantitySet))
	/// SUBTYPE OF (IfcPropertyDefinition);
	/// INVERSE
	/// DefinesType : SET [0:?] OF IfcTypeObject FOR HasPropertySets;
	/// IsDefinedBy : SET [0:?] OF IfcRelDefinesByTemplate FOR RelatedPropertySets;
	/// DefinesOccurrence : SET [0:?] OF IfcRelDefinesByProperties FOR RelatingPropertyDefinition;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPropertySetDefinition : IfcPropertyDefinition, IfcPropertySetDefinitionSelect, Global.IfcPropertySetDefinition
	{
		public List<IfcTypeObject>? DefinesType {get{return Model?.GetItems<IfcTypeObject>().Where(x => x.HasPropertySets != null && x.HasPropertySets.Contains(this)).ToList();}}
		public List<IfcRelDefinesByTemplate>? IsDefinedBy {get{return Model?.GetItems<IfcRelDefinesByTemplate>().Where(x => x.RelatedPropertySets != null && x.RelatedPropertySets.Contains(this)).ToList();}}
		public List<IfcRelDefinesByProperties>? DefinesOccurrence {get{return Model?.GetItems<IfcRelDefinesByProperties>().Where(x => x.RelatingPropertyDefinition != null && x.RelatingPropertyDefinition == this).ToList();}}
		public IfcPropertySetDefinition() : base()
		{
		}
		public IfcPropertySetDefinition(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
		public virtual List<Global.IfcTypeObject>? _DefinesType
		{
			get
			{
				if(DefinesType != null)
				{
					List<Global.IfcTypeObject>? items = new List<Global.IfcTypeObject>();
					foreach (IfcTypeObject item in DefinesType)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDefinesByTemplate>? _IsDefinedBy
		{
			get
			{
				if(IsDefinedBy != null)
				{
					List<Global.IfcRelDefinesByTemplate>? items = new List<Global.IfcRelDefinesByTemplate>();
					foreach (IfcRelDefinesByTemplate item in IsDefinedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDefinesByProperties>? _DefinesOccurrence
		{
			get
			{
				if(DefinesOccurrence != null)
				{
					List<Global.IfcRelDefinesByProperties>? items = new List<Global.IfcRelDefinesByProperties>();
					foreach (IfcRelDefinesByProperties item in DefinesOccurrence)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertySetTemplate
	/// SUBTYPE OF (IfcPropertyTemplateDefinition);
	/// TemplateType : OPTIONAL IfcPropertySetTemplateTypeEnum;
	/// ApplicableEntity : OPTIONAL IfcIdentifier;
	/// HasPropertyTemplates : SET [1:?] OF IfcPropertyTemplate;
	/// INVERSE
	/// Defines : SET [0:?] OF IfcRelDefinesByTemplate FOR RelatingTemplate;
	/// WHERE
	/// ExistsName : EXISTS(SELF\IfcRoot.Name);
	/// UniquePropertyNames : IfcUniquePropertyTemplateNames(HasPropertyTemplates);
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertySetTemplate : IfcPropertyTemplateDefinition, Global.IfcPropertySetTemplate
	{
		public virtual IfcPropertySetTemplateTypeEnum? TemplateType { get; set; }
		public virtual IfcIdentifier? ApplicableEntity { get; set; }
		public virtual List<IfcPropertyTemplate>? HasPropertyTemplates { get; set; }
		public List<IfcRelDefinesByTemplate>? Defines {get{return Model?.GetItems<IfcRelDefinesByTemplate>().Where(x => x.RelatingTemplate != null && x.RelatingTemplate == this).ToList();}}
		public IfcPropertySetTemplate() : base()
		{
		}
		public IfcPropertySetTemplate(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPropertySetTemplateTypeEnum? TemplateType, IfcIdentifier? ApplicableEntity, List<IfcPropertyTemplate>? HasPropertyTemplates) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.TemplateType = TemplateType;
			this.ApplicableEntity = ApplicableEntity;
			this.HasPropertyTemplates = HasPropertyTemplates;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				TemplateType,
				ApplicableEntity,
				HasPropertyTemplates
			};
		}
		public virtual Global.IfcPropertySetTemplateTypeEnum? _TemplateType
		{
			get
			{
				return TemplateType;
			}
			set
			{
				if(value is IfcPropertySetTemplateTypeEnum val)
				{
					TemplateType = val;
				}
				else if(value == null)
				{
					TemplateType = null;
				}
			}
		}
		public virtual Global.IfcIdentifier? _ApplicableEntity
		{
			get
			{
				return ApplicableEntity;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					ApplicableEntity = val;
				}
				else if(value == null)
				{
					ApplicableEntity = null;
				}
			}
		}
		public virtual List<Global.IfcPropertyTemplate>? _HasPropertyTemplates
		{
			get
			{
				if(HasPropertyTemplates != null)
				{
					List<Global.IfcPropertyTemplate>? items = new List<Global.IfcPropertyTemplate>();
					foreach (IfcPropertyTemplate item in HasPropertyTemplates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasPropertyTemplates = null;
				}
				else
				{
					HasPropertyTemplates = new List<IfcPropertyTemplate>();
					foreach(var val in value)
					{
						if(val is IfcPropertyTemplate v)
						{
							HasPropertyTemplates.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcRelDefinesByTemplate>? _Defines
		{
			get
			{
				if(Defines != null)
				{
					List<Global.IfcRelDefinesByTemplate>? items = new List<Global.IfcRelDefinesByTemplate>();
					foreach (IfcRelDefinesByTemplate item in Defines)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertySingleValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// NominalValue : OPTIONAL IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertySingleValue : IfcSimpleProperty, Global.IfcPropertySingleValue
	{
		public virtual IfcValue? NominalValue { get; set; }
		public virtual IfcUnit? Unit { get; set; }
		public IfcPropertySingleValue() : base()
		{
		}
		public IfcPropertySingleValue(IfcIdentifier? Name, IfcText? Description, IfcValue? NominalValue, IfcUnit? Unit) : base (Name, Description)
		{
			this.NominalValue = NominalValue;
			this.Unit = Unit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				NominalValue,
				Unit
			};
		}
		public virtual Global.IfcValue? _NominalValue
		{
			get
			{
				return NominalValue;
			}
			set
			{
				if(value is IfcValue val)
				{
					NominalValue = val;
				}
				else if(value == null)
				{
					NominalValue = null;
				}
			}
		}
		public virtual Global.IfcUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IfcUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyTableValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// DefiningValues : OPTIONAL LIST [1:?] OF UNIQUE IfcValue;
	/// DefinedValues : OPTIONAL LIST [1:?] OF IfcValue;
	/// Expression : OPTIONAL IfcText;
	/// DefiningUnit : OPTIONAL IfcUnit;
	/// DefinedUnit : OPTIONAL IfcUnit;
	/// CurveInterpolation : OPTIONAL IfcCurveInterpolationEnum;
	/// WHERE
	/// WR21 : (NOT(EXISTS(DefiningValues)) AND NOT(EXISTS(DefinedValues)))
	/// OR (SIZEOF(DefiningValues) = SIZEOF(DefinedValues));
	/// WR22 : NOT(EXISTS(DefiningValues)) OR
	/// (SIZEOF(QUERY(temp <* SELF.DefiningValues | TYPEOF(temp) <> TYPEOF(SELF.DefiningValues[1])
	/// )) = 0);
	/// WR23 : NOT(EXISTS(DefinedValues)) OR
	/// (SIZEOF(QUERY(temp <* SELF.DefinedValues | TYPEOF(temp) <> TYPEOF(SELF.DefinedValues[1])
	/// )) = 0);
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyTableValue : IfcSimpleProperty, Global.IfcPropertyTableValue
	{
		public virtual List<IfcValue>? DefiningValues { get; set; }
		public virtual List<IfcValue>? DefinedValues { get; set; }
		public virtual IfcText? Expression { get; set; }
		public virtual IfcUnit? DefiningUnit { get; set; }
		public virtual IfcUnit? DefinedUnit { get; set; }
		public virtual IfcCurveInterpolationEnum? CurveInterpolation { get; set; }
		public IfcPropertyTableValue() : base()
		{
		}
		public IfcPropertyTableValue(IfcIdentifier? Name, IfcText? Description, List<IfcValue>? DefiningValues, List<IfcValue>? DefinedValues, IfcText? Expression, IfcUnit? DefiningUnit, IfcUnit? DefinedUnit, IfcCurveInterpolationEnum? CurveInterpolation) : base (Name, Description)
		{
			this.DefiningValues = DefiningValues;
			this.DefinedValues = DefinedValues;
			this.Expression = Expression;
			this.DefiningUnit = DefiningUnit;
			this.DefinedUnit = DefinedUnit;
			this.CurveInterpolation = CurveInterpolation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				DefiningValues,
				DefinedValues,
				Expression,
				DefiningUnit,
				DefinedUnit,
				CurveInterpolation
			};
		}
		public virtual List<Global.IfcValue>? _DefiningValues
		{
			get
			{
				if(DefiningValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in DefiningValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					DefiningValues = null;
				}
				else
				{
					DefiningValues = new List<IfcValue>();
					foreach(var val in value)
					{
						if(val is IfcValue v)
						{
							DefiningValues.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcValue>? _DefinedValues
		{
			get
			{
				if(DefinedValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in DefinedValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					DefinedValues = null;
				}
				else
				{
					DefinedValues = new List<IfcValue>();
					foreach(var val in value)
					{
						if(val is IfcValue v)
						{
							DefinedValues.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcText? _Expression
		{
			get
			{
				return Expression;
			}
			set
			{
				if(value is IfcText val)
				{
					Expression = val;
				}
				else if(value == null)
				{
					Expression = null;
				}
			}
		}
		public virtual Global.IfcUnit? _DefiningUnit
		{
			get
			{
				return DefiningUnit;
			}
			set
			{
				if(value is IfcUnit val)
				{
					DefiningUnit = val;
				}
				else if(value == null)
				{
					DefiningUnit = null;
				}
			}
		}
		public virtual Global.IfcUnit? _DefinedUnit
		{
			get
			{
				return DefinedUnit;
			}
			set
			{
				if(value is IfcUnit val)
				{
					DefinedUnit = val;
				}
				else if(value == null)
				{
					DefinedUnit = null;
				}
			}
		}
		public virtual Global.IfcCurveInterpolationEnum? _CurveInterpolation
		{
			get
			{
				return CurveInterpolation;
			}
			set
			{
				if(value is IfcCurveInterpolationEnum val)
				{
					CurveInterpolation = val;
				}
				else if(value == null)
				{
					CurveInterpolation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyTemplate
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcComplexPropertyTemplate
	/// ,IfcSimplePropertyTemplate))
	/// SUBTYPE OF (IfcPropertyTemplateDefinition);
	/// INVERSE
	/// PartOfComplexTemplate : SET [0:?] OF IfcComplexPropertyTemplate FOR HasPropertyTemplates;
	/// PartOfPsetTemplate : SET [0:?] OF IfcPropertySetTemplate FOR HasPropertyTemplates;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPropertyTemplate : IfcPropertyTemplateDefinition, Global.IfcPropertyTemplate
	{
		public List<IfcComplexPropertyTemplate>? PartOfComplexTemplate {get{return Model?.GetItems<IfcComplexPropertyTemplate>().Where(x => x.HasPropertyTemplates != null && x.HasPropertyTemplates.Contains(this)).ToList();}}
		public List<IfcPropertySetTemplate>? PartOfPsetTemplate {get{return Model?.GetItems<IfcPropertySetTemplate>().Where(x => x.HasPropertyTemplates != null && x.HasPropertyTemplates.Contains(this)).ToList();}}
		public IfcPropertyTemplate() : base()
		{
		}
		public IfcPropertyTemplate(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
		public virtual List<Global.IfcComplexPropertyTemplate>? _PartOfComplexTemplate
		{
			get
			{
				if(PartOfComplexTemplate != null)
				{
					List<Global.IfcComplexPropertyTemplate>? items = new List<Global.IfcComplexPropertyTemplate>();
					foreach (IfcComplexPropertyTemplate item in PartOfComplexTemplate)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcPropertySetTemplate>? _PartOfPsetTemplate
		{
			get
			{
				if(PartOfPsetTemplate != null)
				{
					List<Global.IfcPropertySetTemplate>? items = new List<Global.IfcPropertySetTemplate>();
					foreach (IfcPropertySetTemplate item in PartOfPsetTemplate)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyTemplateDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPropertySetTemplate
	/// ,IfcPropertyTemplate))
	/// SUBTYPE OF (IfcPropertyDefinition);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPropertyTemplateDefinition : IfcPropertyDefinition, Global.IfcPropertyTemplateDefinition
	{
		public IfcPropertyTemplateDefinition() : base()
		{
		}
		public IfcPropertyTemplateDefinition(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
	}
	/// <summary>
	/// ENTITY IfcProtectiveDevice
	/// SUBTYPE OF (IfcFlowController);
	/// PredefinedType : OPTIONAL IfcProtectiveDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcProtectiveDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcProtectiveDeviceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCPROTECTIVEDEVICETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcProtectiveDevice : IfcFlowController, Global.IfcProtectiveDevice
	{
		public virtual IfcProtectiveDeviceTypeEnum? PredefinedType { get; set; }
		public IfcProtectiveDevice() : base()
		{
		}
		public IfcProtectiveDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcProtectiveDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcProtectiveDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcProtectiveDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProtectiveDeviceTrippingUnit
	/// SUBTYPE OF (IfcDistributionControlElement);
	/// PredefinedType : OPTIONAL IfcProtectiveDeviceTrippingUnitTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcProtectiveDeviceTrippingUnitTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcProtectiveDeviceTrippingUnitTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcProtectiveDeviceTrippingUnit : IfcDistributionControlElement, Global.IfcProtectiveDeviceTrippingUnit
	{
		public virtual IfcProtectiveDeviceTrippingUnitTypeEnum? PredefinedType { get; set; }
		public IfcProtectiveDeviceTrippingUnit() : base()
		{
		}
		public IfcProtectiveDeviceTrippingUnit(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcProtectiveDeviceTrippingUnitTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcProtectiveDeviceTrippingUnitTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcProtectiveDeviceTrippingUnitTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProtectiveDeviceTrippingUnitType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcProtectiveDeviceTrippingUnitTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcProtectiveDeviceTrippingUnitTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcProtectiveDeviceTrippingUnitTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcProtectiveDeviceTrippingUnitType : IfcDistributionControlElementType, Global.IfcProtectiveDeviceTrippingUnitType
	{
		public virtual IfcProtectiveDeviceTrippingUnitTypeEnum? PredefinedType { get; set; }
		public IfcProtectiveDeviceTrippingUnitType() : base()
		{
		}
		public IfcProtectiveDeviceTrippingUnitType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcProtectiveDeviceTrippingUnitTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcProtectiveDeviceTrippingUnitTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcProtectiveDeviceTrippingUnitTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProtectiveDeviceType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcProtectiveDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcProtectiveDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcProtectiveDeviceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcProtectiveDeviceType : IfcFlowControllerType, Global.IfcProtectiveDeviceType
	{
		public virtual IfcProtectiveDeviceTypeEnum? PredefinedType { get; set; }
		public IfcProtectiveDeviceType() : base()
		{
		}
		public IfcProtectiveDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcProtectiveDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcProtectiveDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcProtectiveDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProxy
	/// SUBTYPE OF (IfcProduct);
	/// ProxyType : IfcObjectTypeEnum;
	/// Tag : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IfcProxy : IfcProduct, Global.IfcProxy
	{
		public virtual IfcObjectTypeEnum? ProxyType { get; set; }
		public virtual IfcLabel? Tag { get; set; }
		public IfcProxy() : base()
		{
		}
		public IfcProxy(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcObjectTypeEnum? ProxyType, IfcLabel? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.ProxyType = ProxyType;
			this.Tag = Tag;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				ProxyType,
				Tag
			};
		}
		public virtual Global.IfcObjectTypeEnum? _ProxyType
		{
			get
			{
				return ProxyType;
			}
			set
			{
				if(value is IfcObjectTypeEnum val)
				{
					ProxyType = val;
				}
				else if(value == null)
				{
					ProxyType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Tag
		{
			get
			{
				return Tag;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Tag = val;
				}
				else if(value == null)
				{
					Tag = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPump
	/// SUBTYPE OF (IfcFlowMovingDevice);
	/// PredefinedType : OPTIONAL IfcPumpTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcPumpTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPumpTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCPUMPTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPump : IfcFlowMovingDevice, Global.IfcPump
	{
		public virtual IfcPumpTypeEnum? PredefinedType { get; set; }
		public IfcPump() : base()
		{
		}
		public IfcPump(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPumpTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcPumpTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPumpTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPumpType
	/// SUBTYPE OF (IfcFlowMovingDeviceType);
	/// PredefinedType : IfcPumpTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcPumpTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPumpTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPumpType : IfcFlowMovingDeviceType, Global.IfcPumpType
	{
		public virtual IfcPumpTypeEnum? PredefinedType { get; set; }
		public IfcPumpType() : base()
		{
		}
		public IfcPumpType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcPumpTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcPumpTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcPumpTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityArea
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// AreaValue : IfcAreaMeasure;
	/// Formula : OPTIONAL IfcLabel;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.AREAUNIT);
	/// WR22 : AreaValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityArea : IfcPhysicalSimpleQuantity, Global.IfcQuantityArea
	{
		public virtual IfcAreaMeasure? AreaValue { get; set; }
		public virtual IfcLabel? Formula { get; set; }
		public IfcQuantityArea() : base()
		{
		}
		public IfcQuantityArea(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcAreaMeasure? AreaValue, IfcLabel? Formula) : base (Name, Description, Unit)
		{
			this.AreaValue = AreaValue;
			this.Formula = Formula;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				AreaValue,
				Formula
			};
		}
		public virtual Global.IfcAreaMeasure? _AreaValue
		{
			get
			{
				return AreaValue;
			}
			set
			{
				if(value is IfcAreaMeasure val)
				{
					AreaValue = val;
				}
				else if(value == null)
				{
					AreaValue = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Formula
		{
			get
			{
				return Formula;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Formula = val;
				}
				else if(value == null)
				{
					Formula = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityCount
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// CountValue : IfcCountMeasure;
	/// Formula : OPTIONAL IfcLabel;
	/// WHERE
	/// WR21 : CountValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityCount : IfcPhysicalSimpleQuantity, Global.IfcQuantityCount
	{
		public virtual IfcCountMeasure? CountValue { get; set; }
		public virtual IfcLabel? Formula { get; set; }
		public IfcQuantityCount() : base()
		{
		}
		public IfcQuantityCount(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcCountMeasure? CountValue, IfcLabel? Formula) : base (Name, Description, Unit)
		{
			this.CountValue = CountValue;
			this.Formula = Formula;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				CountValue,
				Formula
			};
		}
		public virtual Global.IfcCountMeasure? _CountValue
		{
			get
			{
				return CountValue;
			}
			set
			{
				if(value is IfcCountMeasure val)
				{
					CountValue = val;
				}
				else if(value == null)
				{
					CountValue = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Formula
		{
			get
			{
				return Formula;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Formula = val;
				}
				else if(value == null)
				{
					Formula = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityLength
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// LengthValue : IfcLengthMeasure;
	/// Formula : OPTIONAL IfcLabel;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.LENGTHUNIT);
	/// WR22 : LengthValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityLength : IfcPhysicalSimpleQuantity, Global.IfcQuantityLength
	{
		public virtual IfcLengthMeasure? LengthValue { get; set; }
		public virtual IfcLabel? Formula { get; set; }
		public IfcQuantityLength() : base()
		{
		}
		public IfcQuantityLength(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcLengthMeasure? LengthValue, IfcLabel? Formula) : base (Name, Description, Unit)
		{
			this.LengthValue = LengthValue;
			this.Formula = Formula;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				LengthValue,
				Formula
			};
		}
		public virtual Global.IfcLengthMeasure? _LengthValue
		{
			get
			{
				return LengthValue;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					LengthValue = val;
				}
				else if(value == null)
				{
					LengthValue = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Formula
		{
			get
			{
				return Formula;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Formula = val;
				}
				else if(value == null)
				{
					Formula = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantitySet
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcElementQuantity))
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcQuantitySet : IfcPropertySetDefinition, Global.IfcQuantitySet
	{
		public IfcQuantitySet() : base()
		{
		}
		public IfcQuantitySet(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityTime
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// TimeValue : IfcTimeMeasure;
	/// Formula : OPTIONAL IfcLabel;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.TIMEUNIT);
	/// WR22 : TimeValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityTime : IfcPhysicalSimpleQuantity, Global.IfcQuantityTime
	{
		public virtual IfcTimeMeasure? TimeValue { get; set; }
		public virtual IfcLabel? Formula { get; set; }
		public IfcQuantityTime() : base()
		{
		}
		public IfcQuantityTime(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcTimeMeasure? TimeValue, IfcLabel? Formula) : base (Name, Description, Unit)
		{
			this.TimeValue = TimeValue;
			this.Formula = Formula;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				TimeValue,
				Formula
			};
		}
		public virtual Global.IfcTimeMeasure? _TimeValue
		{
			get
			{
				return TimeValue;
			}
			set
			{
				if(value is IfcTimeMeasure val)
				{
					TimeValue = val;
				}
				else if(value == null)
				{
					TimeValue = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Formula
		{
			get
			{
				return Formula;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Formula = val;
				}
				else if(value == null)
				{
					Formula = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityVolume
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// VolumeValue : IfcVolumeMeasure;
	/// Formula : OPTIONAL IfcLabel;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.VOLUMEUNIT);
	/// WR22 : VolumeValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityVolume : IfcPhysicalSimpleQuantity, Global.IfcQuantityVolume
	{
		public virtual IfcVolumeMeasure? VolumeValue { get; set; }
		public virtual IfcLabel? Formula { get; set; }
		public IfcQuantityVolume() : base()
		{
		}
		public IfcQuantityVolume(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcVolumeMeasure? VolumeValue, IfcLabel? Formula) : base (Name, Description, Unit)
		{
			this.VolumeValue = VolumeValue;
			this.Formula = Formula;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				VolumeValue,
				Formula
			};
		}
		public virtual Global.IfcVolumeMeasure? _VolumeValue
		{
			get
			{
				return VolumeValue;
			}
			set
			{
				if(value is IfcVolumeMeasure val)
				{
					VolumeValue = val;
				}
				else if(value == null)
				{
					VolumeValue = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Formula
		{
			get
			{
				return Formula;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Formula = val;
				}
				else if(value == null)
				{
					Formula = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityWeight
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// WeightValue : IfcMassMeasure;
	/// Formula : OPTIONAL IfcLabel;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.MASSUNIT);
	/// WR22 : WeightValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityWeight : IfcPhysicalSimpleQuantity, Global.IfcQuantityWeight
	{
		public virtual IfcMassMeasure? WeightValue { get; set; }
		public virtual IfcLabel? Formula { get; set; }
		public IfcQuantityWeight() : base()
		{
		}
		public IfcQuantityWeight(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcMassMeasure? WeightValue, IfcLabel? Formula) : base (Name, Description, Unit)
		{
			this.WeightValue = WeightValue;
			this.Formula = Formula;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				WeightValue,
				Formula
			};
		}
		public virtual Global.IfcMassMeasure? _WeightValue
		{
			get
			{
				return WeightValue;
			}
			set
			{
				if(value is IfcMassMeasure val)
				{
					WeightValue = val;
				}
				else if(value == null)
				{
					WeightValue = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Formula
		{
			get
			{
				return Formula;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Formula = val;
				}
				else if(value == null)
				{
					Formula = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRailing
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcRailingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcRailingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcRailingTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCRAILINGTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcRailing : IfcBuildingElement, Global.IfcRailing
	{
		public virtual IfcRailingTypeEnum? PredefinedType { get; set; }
		public IfcRailing() : base()
		{
		}
		public IfcRailing(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcRailingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcRailingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcRailingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRailingType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcRailingTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcRailingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcRailingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcRailingType : IfcBuildingElementType, Global.IfcRailingType
	{
		public virtual IfcRailingTypeEnum? PredefinedType { get; set; }
		public IfcRailingType() : base()
		{
		}
		public IfcRailingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcRailingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcRailingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcRailingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRamp
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcRampTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcRampTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcRampTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCRAMPTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcRamp : IfcBuildingElement, Global.IfcRamp
	{
		public virtual IfcRampTypeEnum? PredefinedType { get; set; }
		public IfcRamp() : base()
		{
		}
		public IfcRamp(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcRampTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcRampTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcRampTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRampFlight
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcRampFlightTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcRampFlightTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcRampFlightTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCRAMPFLIGHTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcRampFlight : IfcBuildingElement, Global.IfcRampFlight
	{
		public virtual IfcRampFlightTypeEnum? PredefinedType { get; set; }
		public IfcRampFlight() : base()
		{
		}
		public IfcRampFlight(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcRampFlightTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcRampFlightTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcRampFlightTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRampFlightType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcRampFlightTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcRampFlightTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcRampFlightTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcRampFlightType : IfcBuildingElementType, Global.IfcRampFlightType
	{
		public virtual IfcRampFlightTypeEnum? PredefinedType { get; set; }
		public IfcRampFlightType() : base()
		{
		}
		public IfcRampFlightType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcRampFlightTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcRampFlightTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcRampFlightTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRampType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcRampTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcRampTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcRampTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcRampType : IfcBuildingElementType, Global.IfcRampType
	{
		public virtual IfcRampTypeEnum? PredefinedType { get; set; }
		public IfcRampType() : base()
		{
		}
		public IfcRampType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcRampTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcRampTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcRampTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRationalBSplineCurveWithKnots
	/// SUBTYPE OF (IfcBSplineCurveWithKnots);
	/// WeightsData : LIST [2:?] OF IfcReal;
	/// DERIVE
	/// Weights : ARRAY [0:UpperIndexOnControlPoints] OF IfcReal := IfcListToArray(WeightsData,0,SELF\IfcBSplineCurve.UpperIndexOnControlPoints);
	/// WHERE
	/// SameNumOfWeightsAndPoints : SIZEOF(WeightsData) = SIZEOF(SELF\IfcBSplineCurve.ControlPointsList);
	/// WeightsGreaterZero : IfcCurveWeightsPositive(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IfcRationalBSplineCurveWithKnots : IfcBSplineCurveWithKnots, Global.IfcRationalBSplineCurveWithKnots
	{
		public virtual List<IfcReal>? WeightsData { get; set; }
		//DERIVE
		public virtual List<IfcReal>? Weights {get {return null;}}
		public IfcRationalBSplineCurveWithKnots() : base()
		{
		}
		public IfcRationalBSplineCurveWithKnots(IfcInteger? Degree, List<IfcCartesianPoint>? ControlPointsList, IfcBSplineCurveForm? CurveForm, IfcLogical? ClosedCurve, IfcLogical? SelfIntersect, List<IfcInteger>? KnotMultiplicities, List<IfcParameterValue>? Knots, IfcKnotType? KnotSpec, List<IfcReal>? WeightsData) : base (Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect, KnotMultiplicities, Knots, KnotSpec)
		{
			this.WeightsData = WeightsData;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Degree,
				ControlPointsList,
				CurveForm,
				ClosedCurve,
				SelfIntersect,
				KnotMultiplicities,
				Knots,
				KnotSpec,
				WeightsData
			};
		}
		public virtual List<Global.IfcReal>? _WeightsData
		{
			get
			{
				if(WeightsData != null)
				{
					List<Global.IfcReal>? items = new List<Global.IfcReal>();
					foreach (IfcReal item in WeightsData)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					WeightsData = null;
				}
				else
				{
					WeightsData = new List<IfcReal>();
					foreach(var val in value)
					{
						if(val is IfcReal v)
						{
							WeightsData.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcReal>? _Weights
		{
			get
			{
				if(Weights != null)
				{
					List<Global.IfcReal>? items = new List<Global.IfcReal>();
					foreach (IfcReal item in Weights)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRationalBSplineSurfaceWithKnots
	/// SUBTYPE OF (IfcBSplineSurfaceWithKnots);
	/// WeightsData : LIST [2:?] OF LIST [2:?] OF IfcReal;
	/// DERIVE
	/// Weights : ARRAY [0:UUpper] OF ARRAY [0:VUpper] OF IfcReal := IfcMakeArrayOfArray(WeightsData,0,UUpper,0,VUpper);
	/// WHERE
	/// CorrespondingWeightsDataLists : (SIZEOF(WeightsData) = SIZEOF(SELF\IfcBSplineSurface.ControlPointsList))
	/// AND
	/// (SIZEOF(WeightsData[1]) = SIZEOF(SELF\IfcBSplineSurface.ControlPointsList[1]));
	/// WeightValuesGreaterZero : IfcSurfaceWeightsPositive(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IfcRationalBSplineSurfaceWithKnots : IfcBSplineSurfaceWithKnots, Global.IfcRationalBSplineSurfaceWithKnots
	{
		public virtual List<List<IfcReal>>? WeightsData { get; set; }
		//DERIVE
		public virtual List<List<IfcReal>>? Weights {get {return null;}}
		public IfcRationalBSplineSurfaceWithKnots() : base()
		{
		}
		public IfcRationalBSplineSurfaceWithKnots(IfcInteger? UDegree, IfcInteger? VDegree, List<List<IfcCartesianPoint>>? ControlPointsList, IfcBSplineSurfaceForm? SurfaceForm, IfcLogical? UClosed, IfcLogical? VClosed, IfcLogical? SelfIntersect, List<IfcInteger>? UMultiplicities, List<IfcInteger>? VMultiplicities, List<IfcParameterValue>? UKnots, List<IfcParameterValue>? VKnots, IfcKnotType? KnotSpec, List<List<IfcReal>>? WeightsData) : base (UDegree, VDegree, ControlPointsList, SurfaceForm, UClosed, VClosed, SelfIntersect, UMultiplicities, VMultiplicities, UKnots, VKnots, KnotSpec)
		{
			this.WeightsData = WeightsData;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				UDegree,
				VDegree,
				ControlPointsList,
				SurfaceForm,
				UClosed,
				VClosed,
				SelfIntersect,
				UMultiplicities,
				VMultiplicities,
				UKnots,
				VKnots,
				KnotSpec,
				WeightsData
			};
		}
		public virtual List<List<Global.IfcReal>>? _WeightsData
		{
			get
			{
				if(WeightsData != null)
				{
					List<List<Global.IfcReal>>? items = new List<List<Global.IfcReal>>();
					foreach (List<IfcReal> item1s in WeightsData)
					{
						List<Global.IfcReal>? resultItems = new List<Global.IfcReal>();
						foreach (IfcReal item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					WeightsData = null;
				}
				else
				{
					WeightsData = new List<List<IfcReal>>();
					foreach(var vals in value)
					{
						if(vals != null)
						{
							List<IfcReal> items = new List<IfcReal>();
							foreach(var val in vals)
							{
								if(val is IfcReal v)
								{
									items.Add(v);
								}
							}
							WeightsData.Add(items);
						}
					}
				}
			}
		}
		public virtual List<List<Global.IfcReal>>? _Weights
		{
			get
			{
				if(Weights != null)
				{
					List<List<Global.IfcReal>>? items = new List<List<Global.IfcReal>>();
					foreach (List<IfcReal> item1s in Weights)
					{
						List<Global.IfcReal>? resultItems = new List<Global.IfcReal>();
						foreach (IfcReal item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRectangleHollowProfileDef
	/// SUBTYPE OF (IfcRectangleProfileDef);
	/// WallThickness : IfcPositiveLengthMeasure;
	/// InnerFilletRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// OuterFilletRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// WHERE
	/// ValidWallThickness : (WallThickness < (SELF\IfcRectangleProfileDef.XDim/2.)) AND
	/// (WallThickness < (SELF\IfcRectangleProfileDef.YDim/2.));
	/// ValidInnerRadius : NOT(EXISTS(InnerFilletRadius)) OR
	/// ((InnerFilletRadius <= (SELF\IfcRectangleProfileDef.XDim/2. - WallThickness)) AND
	/// (InnerFilletRadius <= (SELF\IfcRectangleProfileDef.YDim/2. - WallThickness)));
	/// ValidOuterRadius : NOT(EXISTS(OuterFilletRadius)) OR
	/// ((OuterFilletRadius <= (SELF\IfcRectangleProfileDef.XDim/2.)) AND
	/// (OuterFilletRadius <= (SELF\IfcRectangleProfileDef.YDim/2.)));
	/// END_ENTITY;
	/// <summary>
	public class IfcRectangleHollowProfileDef : IfcRectangleProfileDef, Global.IfcRectangleHollowProfileDef
	{
		public virtual IfcPositiveLengthMeasure? WallThickness { get; set; }
		public virtual IfcNonNegativeLengthMeasure? InnerFilletRadius { get; set; }
		public virtual IfcNonNegativeLengthMeasure? OuterFilletRadius { get; set; }
		public IfcRectangleHollowProfileDef() : base()
		{
		}
		public IfcRectangleHollowProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? XDim, IfcPositiveLengthMeasure? YDim, IfcPositiveLengthMeasure? WallThickness, IfcNonNegativeLengthMeasure? InnerFilletRadius, IfcNonNegativeLengthMeasure? OuterFilletRadius) : base (ProfileType, ProfileName, Position, XDim, YDim)
		{
			this.WallThickness = WallThickness;
			this.InnerFilletRadius = InnerFilletRadius;
			this.OuterFilletRadius = OuterFilletRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				XDim,
				YDim,
				WallThickness,
				InnerFilletRadius,
				OuterFilletRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _WallThickness
		{
			get
			{
				return WallThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					WallThickness = val;
				}
				else if(value == null)
				{
					WallThickness = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _InnerFilletRadius
		{
			get
			{
				return InnerFilletRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					InnerFilletRadius = val;
				}
				else if(value == null)
				{
					InnerFilletRadius = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _OuterFilletRadius
		{
			get
			{
				return OuterFilletRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					OuterFilletRadius = val;
				}
				else if(value == null)
				{
					OuterFilletRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRectangleProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcRectangleHollowProfileDef
	/// ,IfcRoundedRectangleProfileDef))
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// XDim : IfcPositiveLengthMeasure;
	/// YDim : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcRectangleProfileDef : IfcParameterizedProfileDef, Global.IfcRectangleProfileDef
	{
		public virtual IfcPositiveLengthMeasure? XDim { get; set; }
		public virtual IfcPositiveLengthMeasure? YDim { get; set; }
		public IfcRectangleProfileDef() : base()
		{
		}
		public IfcRectangleProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? XDim, IfcPositiveLengthMeasure? YDim) : base (ProfileType, ProfileName, Position)
		{
			this.XDim = XDim;
			this.YDim = YDim;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				XDim,
				YDim
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _XDim
		{
			get
			{
				return XDim;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					XDim = val;
				}
				else if(value == null)
				{
					XDim = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _YDim
		{
			get
			{
				return YDim;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					YDim = val;
				}
				else if(value == null)
				{
					YDim = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRectangularPyramid
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// XLength : IfcPositiveLengthMeasure;
	/// YLength : IfcPositiveLengthMeasure;
	/// Height : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcRectangularPyramid : IfcCsgPrimitive3D, Global.IfcRectangularPyramid
	{
		public virtual IfcPositiveLengthMeasure? XLength { get; set; }
		public virtual IfcPositiveLengthMeasure? YLength { get; set; }
		public virtual IfcPositiveLengthMeasure? Height { get; set; }
		public IfcRectangularPyramid() : base()
		{
		}
		public IfcRectangularPyramid(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? XLength, IfcPositiveLengthMeasure? YLength, IfcPositiveLengthMeasure? Height) : base (Position)
		{
			this.XLength = XLength;
			this.YLength = YLength;
			this.Height = Height;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				XLength,
				YLength,
				Height
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _XLength
		{
			get
			{
				return XLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					XLength = val;
				}
				else if(value == null)
				{
					XLength = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _YLength
		{
			get
			{
				return YLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					YLength = val;
				}
				else if(value == null)
				{
					YLength = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _Height
		{
			get
			{
				return Height;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Height = val;
				}
				else if(value == null)
				{
					Height = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRectangularTrimmedSurface
	/// SUBTYPE OF (IfcBoundedSurface);
	/// BasisSurface : IfcSurface;
	/// U1 : IfcParameterValue;
	/// V1 : IfcParameterValue;
	/// U2 : IfcParameterValue;
	/// V2 : IfcParameterValue;
	/// Usense : IfcBoolean;
	/// Vsense : IfcBoolean;
	/// WHERE
	/// U1AndU2Different : U1 <> U2;
	/// V1AndV2Different : V1 <> V2;
	/// UsenseCompatible : (('IFC4.IFCELEMENTARYSURFACE' IN TYPEOF(BasisSurface)) AND
	/// (NOT ('IFC4.IFCPLANE' IN TYPEOF(BasisSurface)))) OR
	/// ('IFC4.IFCSURFACEOFREVOLUTION' IN TYPEOF(BasisSurface)) OR
	/// (Usense = (U2 > U1));
	/// VsenseCompatible : Vsense = (V2 > V1);
	/// END_ENTITY;
	/// <summary>
	public class IfcRectangularTrimmedSurface : IfcBoundedSurface, Global.IfcRectangularTrimmedSurface
	{
		public virtual IfcSurface? BasisSurface { get; set; }
		public virtual IfcParameterValue? U1 { get; set; }
		public virtual IfcParameterValue? V1 { get; set; }
		public virtual IfcParameterValue? U2 { get; set; }
		public virtual IfcParameterValue? V2 { get; set; }
		public virtual IfcBoolean? Usense { get; set; }
		public virtual IfcBoolean? Vsense { get; set; }
		public IfcRectangularTrimmedSurface() : base()
		{
		}
		public IfcRectangularTrimmedSurface(IfcSurface? BasisSurface, IfcParameterValue? U1, IfcParameterValue? V1, IfcParameterValue? U2, IfcParameterValue? V2, IfcBoolean? Usense, IfcBoolean? Vsense) : base ()
		{
			this.BasisSurface = BasisSurface;
			this.U1 = U1;
			this.V1 = V1;
			this.U2 = U2;
			this.V2 = V2;
			this.Usense = Usense;
			this.Vsense = Vsense;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisSurface,
				U1,
				V1,
				U2,
				V2,
				Usense,
				Vsense
			};
		}
		public virtual Global.IfcSurface? _BasisSurface
		{
			get
			{
				return BasisSurface;
			}
			set
			{
				if(value is IfcSurface val)
				{
					BasisSurface = val;
				}
				else if(value == null)
				{
					BasisSurface = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _U1
		{
			get
			{
				return U1;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					U1 = val;
				}
				else if(value == null)
				{
					U1 = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _V1
		{
			get
			{
				return V1;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					V1 = val;
				}
				else if(value == null)
				{
					V1 = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _U2
		{
			get
			{
				return U2;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					U2 = val;
				}
				else if(value == null)
				{
					U2 = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _V2
		{
			get
			{
				return V2;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					V2 = val;
				}
				else if(value == null)
				{
					V2 = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _Usense
		{
			get
			{
				return Usense;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					Usense = val;
				}
				else if(value == null)
				{
					Usense = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _Vsense
		{
			get
			{
				return Vsense;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					Vsense = val;
				}
				else if(value == null)
				{
					Vsense = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRecurrencePattern;
	/// RecurrenceType : IfcRecurrenceTypeEnum;
	/// DayComponent : OPTIONAL SET [1:?] OF IfcDayInMonthNumber;
	/// WeekdayComponent : OPTIONAL SET [1:?] OF IfcDayInWeekNumber;
	/// MonthComponent : OPTIONAL SET [1:?] OF IfcMonthInYearNumber;
	/// Position : OPTIONAL IfcInteger;
	/// Interval : OPTIONAL IfcInteger;
	/// Occurrences : OPTIONAL IfcInteger;
	/// TimePeriods : OPTIONAL LIST [1:?] OF IfcTimePeriod;
	/// END_ENTITY;
	/// <summary>
	public class IfcRecurrencePattern : Ifc_Entity, Global.IfcRecurrencePattern
	{
		public virtual IfcRecurrenceTypeEnum? RecurrenceType { get; set; }
		public virtual List<IfcDayInMonthNumber>? DayComponent { get; set; }
		public virtual List<IfcDayInWeekNumber>? WeekdayComponent { get; set; }
		public virtual List<IfcMonthInYearNumber>? MonthComponent { get; set; }
		public virtual IfcInteger? Position { get; set; }
		public virtual IfcInteger? Interval { get; set; }
		public virtual IfcInteger? Occurrences { get; set; }
		public virtual List<IfcTimePeriod>? TimePeriods { get; set; }
		public IfcRecurrencePattern() : base()
		{
		}
		public IfcRecurrencePattern(IfcRecurrenceTypeEnum? RecurrenceType, List<IfcDayInMonthNumber>? DayComponent, List<IfcDayInWeekNumber>? WeekdayComponent, List<IfcMonthInYearNumber>? MonthComponent, IfcInteger? Position, IfcInteger? Interval, IfcInteger? Occurrences, List<IfcTimePeriod>? TimePeriods) : base ()
		{
			this.RecurrenceType = RecurrenceType;
			this.DayComponent = DayComponent;
			this.WeekdayComponent = WeekdayComponent;
			this.MonthComponent = MonthComponent;
			this.Position = Position;
			this.Interval = Interval;
			this.Occurrences = Occurrences;
			this.TimePeriods = TimePeriods;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RecurrenceType,
				DayComponent,
				WeekdayComponent,
				MonthComponent,
				Position,
				Interval,
				Occurrences,
				TimePeriods
			};
		}
		public virtual Global.IfcRecurrenceTypeEnum? _RecurrenceType
		{
			get
			{
				return RecurrenceType;
			}
			set
			{
				if(value is IfcRecurrenceTypeEnum val)
				{
					RecurrenceType = val;
				}
				else if(value == null)
				{
					RecurrenceType = null;
				}
			}
		}
		public virtual List<Global.IfcDayInMonthNumber>? _DayComponent
		{
			get
			{
				if(DayComponent != null)
				{
					List<Global.IfcDayInMonthNumber>? items = new List<Global.IfcDayInMonthNumber>();
					foreach (IfcDayInMonthNumber item in DayComponent)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					DayComponent = null;
				}
				else
				{
					DayComponent = new List<IfcDayInMonthNumber>();
					foreach(var val in value)
					{
						if(val is IfcDayInMonthNumber v)
						{
							DayComponent.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcDayInWeekNumber>? _WeekdayComponent
		{
			get
			{
				if(WeekdayComponent != null)
				{
					List<Global.IfcDayInWeekNumber>? items = new List<Global.IfcDayInWeekNumber>();
					foreach (IfcDayInWeekNumber item in WeekdayComponent)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					WeekdayComponent = null;
				}
				else
				{
					WeekdayComponent = new List<IfcDayInWeekNumber>();
					foreach(var val in value)
					{
						if(val is IfcDayInWeekNumber v)
						{
							WeekdayComponent.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcMonthInYearNumber>? _MonthComponent
		{
			get
			{
				if(MonthComponent != null)
				{
					List<Global.IfcMonthInYearNumber>? items = new List<Global.IfcMonthInYearNumber>();
					foreach (IfcMonthInYearNumber item in MonthComponent)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					MonthComponent = null;
				}
				else
				{
					MonthComponent = new List<IfcMonthInYearNumber>();
					foreach(var val in value)
					{
						if(val is IfcMonthInYearNumber v)
						{
							MonthComponent.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcInteger? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IfcInteger val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
		public virtual Global.IfcInteger? _Interval
		{
			get
			{
				return Interval;
			}
			set
			{
				if(value is IfcInteger val)
				{
					Interval = val;
				}
				else if(value == null)
				{
					Interval = null;
				}
			}
		}
		public virtual Global.IfcInteger? _Occurrences
		{
			get
			{
				return Occurrences;
			}
			set
			{
				if(value is IfcInteger val)
				{
					Occurrences = val;
				}
				else if(value == null)
				{
					Occurrences = null;
				}
			}
		}
		public virtual List<Global.IfcTimePeriod>? _TimePeriods
		{
			get
			{
				if(TimePeriods != null)
				{
					List<Global.IfcTimePeriod>? items = new List<Global.IfcTimePeriod>();
					foreach (IfcTimePeriod item in TimePeriods)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					TimePeriods = null;
				}
				else
				{
					TimePeriods = new List<IfcTimePeriod>();
					foreach(var val in value)
					{
						if(val is IfcTimePeriod v)
						{
							TimePeriods.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReference;
	/// TypeIdentifier : OPTIONAL IfcIdentifier;
	/// AttributeIdentifier : OPTIONAL IfcIdentifier;
	/// InstanceName : OPTIONAL IfcLabel;
	/// ListPositions : OPTIONAL LIST [1:?] OF IfcInteger;
	/// InnerReference : OPTIONAL IfcReference;
	/// END_ENTITY;
	/// <summary>
	public class IfcReference : Ifc_Entity, IfcAppliedValueSelect, IfcMetricValueSelect, Global.IfcReference
	{
		public virtual IfcIdentifier? TypeIdentifier { get; set; }
		public virtual IfcIdentifier? AttributeIdentifier { get; set; }
		public virtual IfcLabel? InstanceName { get; set; }
		public virtual List<IfcInteger>? ListPositions { get; set; }
		public virtual IfcReference? InnerReference { get; set; }
		public IfcReference() : base()
		{
		}
		public IfcReference(IfcIdentifier? TypeIdentifier, IfcIdentifier? AttributeIdentifier, IfcLabel? InstanceName, List<IfcInteger>? ListPositions, IfcReference? InnerReference) : base ()
		{
			this.TypeIdentifier = TypeIdentifier;
			this.AttributeIdentifier = AttributeIdentifier;
			this.InstanceName = InstanceName;
			this.ListPositions = ListPositions;
			this.InnerReference = InnerReference;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TypeIdentifier,
				AttributeIdentifier,
				InstanceName,
				ListPositions,
				InnerReference
			};
		}
		public virtual Global.IfcIdentifier? _TypeIdentifier
		{
			get
			{
				return TypeIdentifier;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					TypeIdentifier = val;
				}
				else if(value == null)
				{
					TypeIdentifier = null;
				}
			}
		}
		public virtual Global.IfcIdentifier? _AttributeIdentifier
		{
			get
			{
				return AttributeIdentifier;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					AttributeIdentifier = val;
				}
				else if(value == null)
				{
					AttributeIdentifier = null;
				}
			}
		}
		public virtual Global.IfcLabel? _InstanceName
		{
			get
			{
				return InstanceName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					InstanceName = val;
				}
				else if(value == null)
				{
					InstanceName = null;
				}
			}
		}
		public virtual List<Global.IfcInteger>? _ListPositions
		{
			get
			{
				if(ListPositions != null)
				{
					List<Global.IfcInteger>? items = new List<Global.IfcInteger>();
					foreach (IfcInteger item in ListPositions)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ListPositions = null;
				}
				else
				{
					ListPositions = new List<IfcInteger>();
					foreach(var val in value)
					{
						if(val is IfcInteger v)
						{
							ListPositions.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcReference? _InnerReference
		{
			get
			{
				return InnerReference;
			}
			set
			{
				if(value is IfcReference val)
				{
					InnerReference = val;
				}
				else if(value == null)
				{
					InnerReference = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRegularTimeSeries
	/// SUBTYPE OF (IfcTimeSeries);
	/// TimeStep : IfcTimeMeasure;
	/// Values : LIST [1:?] OF IfcTimeSeriesValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcRegularTimeSeries : IfcTimeSeries, Global.IfcRegularTimeSeries
	{
		public virtual IfcTimeMeasure? TimeStep { get; set; }
		public virtual List<IfcTimeSeriesValue>? Values { get; set; }
		public IfcRegularTimeSeries() : base()
		{
		}
		public IfcRegularTimeSeries(IfcLabel? Name, IfcText? Description, IfcDateTime? StartTime, IfcDateTime? EndTime, IfcTimeSeriesDataTypeEnum? TimeSeriesDataType, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcUnit? Unit, IfcTimeMeasure? TimeStep, List<IfcTimeSeriesValue>? Values) : base (Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit)
		{
			this.TimeStep = TimeStep;
			this.Values = Values;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				StartTime,
				EndTime,
				TimeSeriesDataType,
				DataOrigin,
				UserDefinedDataOrigin,
				Unit,
				TimeStep,
				Values
			};
		}
		public virtual Global.IfcTimeMeasure? _TimeStep
		{
			get
			{
				return TimeStep;
			}
			set
			{
				if(value is IfcTimeMeasure val)
				{
					TimeStep = val;
				}
				else if(value == null)
				{
					TimeStep = null;
				}
			}
		}
		public virtual List<Global.IfcTimeSeriesValue>? _Values
		{
			get
			{
				if(Values != null)
				{
					List<Global.IfcTimeSeriesValue>? items = new List<Global.IfcTimeSeriesValue>();
					foreach (IfcTimeSeriesValue item in Values)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Values = null;
				}
				else
				{
					Values = new List<IfcTimeSeriesValue>();
					foreach(var val in value)
					{
						if(val is IfcTimeSeriesValue v)
						{
							Values.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcementBarProperties
	/// SUBTYPE OF (IfcPreDefinedProperties);
	/// TotalCrossSectionArea : IfcAreaMeasure;
	/// SteelGrade : IfcLabel;
	/// BarSurface : OPTIONAL IfcReinforcingBarSurfaceEnum;
	/// EffectiveDepth : OPTIONAL IfcLengthMeasure;
	/// NominalBarDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// BarCount : OPTIONAL IfcCountMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcReinforcementBarProperties : IfcPreDefinedProperties, Global.IfcReinforcementBarProperties
	{
		public virtual IfcAreaMeasure? TotalCrossSectionArea { get; set; }
		public virtual IfcLabel? SteelGrade { get; set; }
		public virtual IfcReinforcingBarSurfaceEnum? BarSurface { get; set; }
		public virtual IfcLengthMeasure? EffectiveDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? NominalBarDiameter { get; set; }
		public virtual IfcCountMeasure? BarCount { get; set; }
		public IfcReinforcementBarProperties() : base()
		{
		}
		public IfcReinforcementBarProperties(IfcAreaMeasure? TotalCrossSectionArea, IfcLabel? SteelGrade, IfcReinforcingBarSurfaceEnum? BarSurface, IfcLengthMeasure? EffectiveDepth, IfcPositiveLengthMeasure? NominalBarDiameter, IfcCountMeasure? BarCount) : base ()
		{
			this.TotalCrossSectionArea = TotalCrossSectionArea;
			this.SteelGrade = SteelGrade;
			this.BarSurface = BarSurface;
			this.EffectiveDepth = EffectiveDepth;
			this.NominalBarDiameter = NominalBarDiameter;
			this.BarCount = BarCount;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TotalCrossSectionArea,
				SteelGrade,
				BarSurface,
				EffectiveDepth,
				NominalBarDiameter,
				BarCount
			};
		}
		public virtual Global.IfcAreaMeasure? _TotalCrossSectionArea
		{
			get
			{
				return TotalCrossSectionArea;
			}
			set
			{
				if(value is IfcAreaMeasure val)
				{
					TotalCrossSectionArea = val;
				}
				else if(value == null)
				{
					TotalCrossSectionArea = null;
				}
			}
		}
		public virtual Global.IfcLabel? _SteelGrade
		{
			get
			{
				return SteelGrade;
			}
			set
			{
				if(value is IfcLabel val)
				{
					SteelGrade = val;
				}
				else if(value == null)
				{
					SteelGrade = null;
				}
			}
		}
		public virtual Global.IfcReinforcingBarSurfaceEnum? _BarSurface
		{
			get
			{
				return BarSurface;
			}
			set
			{
				if(value is IfcReinforcingBarSurfaceEnum val)
				{
					BarSurface = val;
				}
				else if(value == null)
				{
					BarSurface = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _EffectiveDepth
		{
			get
			{
				return EffectiveDepth;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					EffectiveDepth = val;
				}
				else if(value == null)
				{
					EffectiveDepth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _NominalBarDiameter
		{
			get
			{
				return NominalBarDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					NominalBarDiameter = val;
				}
				else if(value == null)
				{
					NominalBarDiameter = null;
				}
			}
		}
		public virtual Global.IfcCountMeasure? _BarCount
		{
			get
			{
				return BarCount;
			}
			set
			{
				if(value is IfcCountMeasure val)
				{
					BarCount = val;
				}
				else if(value == null)
				{
					BarCount = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcementDefinitionProperties
	/// SUBTYPE OF (IfcPreDefinedPropertySet);
	/// DefinitionType : OPTIONAL IfcLabel;
	/// ReinforcementSectionDefinitions : LIST [1:?] OF IfcSectionReinforcementProperties;
	/// END_ENTITY;
	/// <summary>
	public class IfcReinforcementDefinitionProperties : IfcPreDefinedPropertySet, Global.IfcReinforcementDefinitionProperties
	{
		public virtual IfcLabel? DefinitionType { get; set; }
		public virtual List<IfcSectionReinforcementProperties>? ReinforcementSectionDefinitions { get; set; }
		public IfcReinforcementDefinitionProperties() : base()
		{
		}
		public IfcReinforcementDefinitionProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? DefinitionType, List<IfcSectionReinforcementProperties>? ReinforcementSectionDefinitions) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.DefinitionType = DefinitionType;
			this.ReinforcementSectionDefinitions = ReinforcementSectionDefinitions;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				DefinitionType,
				ReinforcementSectionDefinitions
			};
		}
		public virtual Global.IfcLabel? _DefinitionType
		{
			get
			{
				return DefinitionType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					DefinitionType = val;
				}
				else if(value == null)
				{
					DefinitionType = null;
				}
			}
		}
		public virtual List<Global.IfcSectionReinforcementProperties>? _ReinforcementSectionDefinitions
		{
			get
			{
				if(ReinforcementSectionDefinitions != null)
				{
					List<Global.IfcSectionReinforcementProperties>? items = new List<Global.IfcSectionReinforcementProperties>();
					foreach (IfcSectionReinforcementProperties item in ReinforcementSectionDefinitions)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ReinforcementSectionDefinitions = null;
				}
				else
				{
					ReinforcementSectionDefinitions = new List<IfcSectionReinforcementProperties>();
					foreach(var val in value)
					{
						if(val is IfcSectionReinforcementProperties v)
						{
							ReinforcementSectionDefinitions.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcingBar
	/// SUBTYPE OF (IfcReinforcingElement);
	/// NominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// CrossSectionArea : OPTIONAL IfcAreaMeasure;
	/// BarLength : OPTIONAL IfcPositiveLengthMeasure;
	/// PredefinedType : OPTIONAL IfcReinforcingBarTypeEnum;
	/// BarSurface : OPTIONAL IfcReinforcingBarSurfaceEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT EXISTS(PredefinedType) OR
	/// (PredefinedType <> IfcReinforcingBarTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcReinforcingBarTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCREINFORCINGBARTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcReinforcingBar : IfcReinforcingElement, Global.IfcReinforcingBar
	{
		public virtual IfcPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IfcAreaMeasure? CrossSectionArea { get; set; }
		public virtual IfcPositiveLengthMeasure? BarLength { get; set; }
		public virtual IfcReinforcingBarTypeEnum? PredefinedType { get; set; }
		public virtual IfcReinforcingBarSurfaceEnum? BarSurface { get; set; }
		public IfcReinforcingBar() : base()
		{
		}
		public IfcReinforcingBar(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLabel? SteelGrade, IfcPositiveLengthMeasure? NominalDiameter, IfcAreaMeasure? CrossSectionArea, IfcPositiveLengthMeasure? BarLength, IfcReinforcingBarTypeEnum? PredefinedType, IfcReinforcingBarSurfaceEnum? BarSurface) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.BarLength = BarLength;
			this.PredefinedType = PredefinedType;
			this.BarSurface = BarSurface;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				SteelGrade,
				NominalDiameter,
				CrossSectionArea,
				BarLength,
				PredefinedType,
				BarSurface
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _NominalDiameter
		{
			get
			{
				return NominalDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					NominalDiameter = val;
				}
				else if(value == null)
				{
					NominalDiameter = null;
				}
			}
		}
		public virtual Global.IfcAreaMeasure? _CrossSectionArea
		{
			get
			{
				return CrossSectionArea;
			}
			set
			{
				if(value is IfcAreaMeasure val)
				{
					CrossSectionArea = val;
				}
				else if(value == null)
				{
					CrossSectionArea = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _BarLength
		{
			get
			{
				return BarLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					BarLength = val;
				}
				else if(value == null)
				{
					BarLength = null;
				}
			}
		}
		public virtual Global.IfcReinforcingBarTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcReinforcingBarTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcReinforcingBarSurfaceEnum? _BarSurface
		{
			get
			{
				return BarSurface;
			}
			set
			{
				if(value is IfcReinforcingBarSurfaceEnum val)
				{
					BarSurface = val;
				}
				else if(value == null)
				{
					BarSurface = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcingBarType
	/// SUBTYPE OF (IfcReinforcingElementType);
	/// PredefinedType : IfcReinforcingBarTypeEnum;
	/// NominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// CrossSectionArea : OPTIONAL IfcAreaMeasure;
	/// BarLength : OPTIONAL IfcPositiveLengthMeasure;
	/// BarSurface : OPTIONAL IfcReinforcingBarSurfaceEnum;
	/// BendingShapeCode : OPTIONAL IfcLabel;
	/// BendingParameters : OPTIONAL LIST [1:?] OF IfcBendingParameterSelect;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcReinforcingBarTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcReinforcingBarTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// BendingShapeCodeProvided : NOT EXISTS(BendingParameters) OR EXISTS(BendingShapeCode);
	/// END_ENTITY;
	/// <summary>
	public class IfcReinforcingBarType : IfcReinforcingElementType, Global.IfcReinforcingBarType
	{
		public virtual IfcReinforcingBarTypeEnum? PredefinedType { get; set; }
		public virtual IfcPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IfcAreaMeasure? CrossSectionArea { get; set; }
		public virtual IfcPositiveLengthMeasure? BarLength { get; set; }
		public virtual IfcReinforcingBarSurfaceEnum? BarSurface { get; set; }
		public virtual IfcLabel? BendingShapeCode { get; set; }
		public virtual List<IfcBendingParameterSelect>? BendingParameters { get; set; }
		public IfcReinforcingBarType() : base()
		{
		}
		public IfcReinforcingBarType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcReinforcingBarTypeEnum? PredefinedType, IfcPositiveLengthMeasure? NominalDiameter, IfcAreaMeasure? CrossSectionArea, IfcPositiveLengthMeasure? BarLength, IfcReinforcingBarSurfaceEnum? BarSurface, IfcLabel? BendingShapeCode, List<IfcBendingParameterSelect>? BendingParameters) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.BarLength = BarLength;
			this.BarSurface = BarSurface;
			this.BendingShapeCode = BendingShapeCode;
			this.BendingParameters = BendingParameters;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType,
				NominalDiameter,
				CrossSectionArea,
				BarLength,
				BarSurface,
				BendingShapeCode,
				BendingParameters
			};
		}
		public virtual Global.IfcReinforcingBarTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcReinforcingBarTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _NominalDiameter
		{
			get
			{
				return NominalDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					NominalDiameter = val;
				}
				else if(value == null)
				{
					NominalDiameter = null;
				}
			}
		}
		public virtual Global.IfcAreaMeasure? _CrossSectionArea
		{
			get
			{
				return CrossSectionArea;
			}
			set
			{
				if(value is IfcAreaMeasure val)
				{
					CrossSectionArea = val;
				}
				else if(value == null)
				{
					CrossSectionArea = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _BarLength
		{
			get
			{
				return BarLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					BarLength = val;
				}
				else if(value == null)
				{
					BarLength = null;
				}
			}
		}
		public virtual Global.IfcReinforcingBarSurfaceEnum? _BarSurface
		{
			get
			{
				return BarSurface;
			}
			set
			{
				if(value is IfcReinforcingBarSurfaceEnum val)
				{
					BarSurface = val;
				}
				else if(value == null)
				{
					BarSurface = null;
				}
			}
		}
		public virtual Global.IfcLabel? _BendingShapeCode
		{
			get
			{
				return BendingShapeCode;
			}
			set
			{
				if(value is IfcLabel val)
				{
					BendingShapeCode = val;
				}
				else if(value == null)
				{
					BendingShapeCode = null;
				}
			}
		}
		public virtual List<Global.IfcBendingParameterSelect>? _BendingParameters
		{
			get
			{
				if(BendingParameters != null)
				{
					List<Global.IfcBendingParameterSelect>? items = new List<Global.IfcBendingParameterSelect>();
					foreach (IfcBendingParameterSelect item in BendingParameters)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					BendingParameters = null;
				}
				else
				{
					BendingParameters = new List<IfcBendingParameterSelect>();
					foreach(var val in value)
					{
						if(val is IfcBendingParameterSelect v)
						{
							BendingParameters.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcingElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcReinforcingBar
	/// ,IfcReinforcingMesh
	/// ,IfcTendon
	/// ,IfcTendonAnchor))
	/// SUBTYPE OF (IfcElementComponent);
	/// SteelGrade : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcReinforcingElement : IfcElementComponent, Global.IfcReinforcingElement
	{
		public virtual IfcLabel? SteelGrade { get; set; }
		public IfcReinforcingElement() : base()
		{
		}
		public IfcReinforcingElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLabel? SteelGrade) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.SteelGrade = SteelGrade;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				SteelGrade
			};
		}
		public virtual Global.IfcLabel? _SteelGrade
		{
			get
			{
				return SteelGrade;
			}
			set
			{
				if(value is IfcLabel val)
				{
					SteelGrade = val;
				}
				else if(value == null)
				{
					SteelGrade = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcingElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcReinforcingBarType
	/// ,IfcReinforcingMeshType
	/// ,IfcTendonAnchorType
	/// ,IfcTendonType))
	/// SUBTYPE OF (IfcElementComponentType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcReinforcingElementType : IfcElementComponentType, Global.IfcReinforcingElementType
	{
		public IfcReinforcingElementType() : base()
		{
		}
		public IfcReinforcingElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcingMesh
	/// SUBTYPE OF (IfcReinforcingElement);
	/// MeshLength : OPTIONAL IfcPositiveLengthMeasure;
	/// MeshWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// LongitudinalBarNominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// TransverseBarNominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// LongitudinalBarCrossSectionArea : OPTIONAL IfcAreaMeasure;
	/// TransverseBarCrossSectionArea : OPTIONAL IfcAreaMeasure;
	/// LongitudinalBarSpacing : OPTIONAL IfcPositiveLengthMeasure;
	/// TransverseBarSpacing : OPTIONAL IfcPositiveLengthMeasure;
	/// PredefinedType : OPTIONAL IfcReinforcingMeshTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT EXISTS(PredefinedType) OR
	/// (PredefinedType <> IfcReinforcingMeshTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcReinforcingMeshTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCREINFORCINGMESHTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcReinforcingMesh : IfcReinforcingElement, Global.IfcReinforcingMesh
	{
		public virtual IfcPositiveLengthMeasure? MeshLength { get; set; }
		public virtual IfcPositiveLengthMeasure? MeshWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? LongitudinalBarNominalDiameter { get; set; }
		public virtual IfcPositiveLengthMeasure? TransverseBarNominalDiameter { get; set; }
		public virtual IfcAreaMeasure? LongitudinalBarCrossSectionArea { get; set; }
		public virtual IfcAreaMeasure? TransverseBarCrossSectionArea { get; set; }
		public virtual IfcPositiveLengthMeasure? LongitudinalBarSpacing { get; set; }
		public virtual IfcPositiveLengthMeasure? TransverseBarSpacing { get; set; }
		public virtual IfcReinforcingMeshTypeEnum? PredefinedType { get; set; }
		public IfcReinforcingMesh() : base()
		{
		}
		public IfcReinforcingMesh(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLabel? SteelGrade, IfcPositiveLengthMeasure? MeshLength, IfcPositiveLengthMeasure? MeshWidth, IfcPositiveLengthMeasure? LongitudinalBarNominalDiameter, IfcPositiveLengthMeasure? TransverseBarNominalDiameter, IfcAreaMeasure? LongitudinalBarCrossSectionArea, IfcAreaMeasure? TransverseBarCrossSectionArea, IfcPositiveLengthMeasure? LongitudinalBarSpacing, IfcPositiveLengthMeasure? TransverseBarSpacing, IfcReinforcingMeshTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
			this.MeshLength = MeshLength;
			this.MeshWidth = MeshWidth;
			this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
			this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
			this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
			this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
			this.LongitudinalBarSpacing = LongitudinalBarSpacing;
			this.TransverseBarSpacing = TransverseBarSpacing;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				SteelGrade,
				MeshLength,
				MeshWidth,
				LongitudinalBarNominalDiameter,
				TransverseBarNominalDiameter,
				LongitudinalBarCrossSectionArea,
				TransverseBarCrossSectionArea,
				LongitudinalBarSpacing,
				TransverseBarSpacing,
				PredefinedType
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _MeshLength
		{
			get
			{
				return MeshLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					MeshLength = val;
				}
				else if(value == null)
				{
					MeshLength = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _MeshWidth
		{
			get
			{
				return MeshWidth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					MeshWidth = val;
				}
				else if(value == null)
				{
					MeshWidth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _LongitudinalBarNominalDiameter
		{
			get
			{
				return LongitudinalBarNominalDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					LongitudinalBarNominalDiameter = val;
				}
				else if(value == null)
				{
					LongitudinalBarNominalDiameter = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _TransverseBarNominalDiameter
		{
			get
			{
				return TransverseBarNominalDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					TransverseBarNominalDiameter = val;
				}
				else if(value == null)
				{
					TransverseBarNominalDiameter = null;
				}
			}
		}
		public virtual Global.IfcAreaMeasure? _LongitudinalBarCrossSectionArea
		{
			get
			{
				return LongitudinalBarCrossSectionArea;
			}
			set
			{
				if(value is IfcAreaMeasure val)
				{
					LongitudinalBarCrossSectionArea = val;
				}
				else if(value == null)
				{
					LongitudinalBarCrossSectionArea = null;
				}
			}
		}
		public virtual Global.IfcAreaMeasure? _TransverseBarCrossSectionArea
		{
			get
			{
				return TransverseBarCrossSectionArea;
			}
			set
			{
				if(value is IfcAreaMeasure val)
				{
					TransverseBarCrossSectionArea = val;
				}
				else if(value == null)
				{
					TransverseBarCrossSectionArea = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _LongitudinalBarSpacing
		{
			get
			{
				return LongitudinalBarSpacing;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					LongitudinalBarSpacing = val;
				}
				else if(value == null)
				{
					LongitudinalBarSpacing = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _TransverseBarSpacing
		{
			get
			{
				return TransverseBarSpacing;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					TransverseBarSpacing = val;
				}
				else if(value == null)
				{
					TransverseBarSpacing = null;
				}
			}
		}
		public virtual Global.IfcReinforcingMeshTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcReinforcingMeshTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcingMeshType
	/// SUBTYPE OF (IfcReinforcingElementType);
	/// PredefinedType : IfcReinforcingMeshTypeEnum;
	/// MeshLength : OPTIONAL IfcPositiveLengthMeasure;
	/// MeshWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// LongitudinalBarNominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// TransverseBarNominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// LongitudinalBarCrossSectionArea : OPTIONAL IfcAreaMeasure;
	/// TransverseBarCrossSectionArea : OPTIONAL IfcAreaMeasure;
	/// LongitudinalBarSpacing : OPTIONAL IfcPositiveLengthMeasure;
	/// TransverseBarSpacing : OPTIONAL IfcPositiveLengthMeasure;
	/// BendingShapeCode : OPTIONAL IfcLabel;
	/// BendingParameters : OPTIONAL LIST [1:?] OF IfcBendingParameterSelect;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcReinforcingMeshTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcReinforcingMeshTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// BendingShapeCodeProvided : NOT EXISTS(BendingParameters) OR EXISTS(BendingShapeCode);
	/// END_ENTITY;
	/// <summary>
	public class IfcReinforcingMeshType : IfcReinforcingElementType, Global.IfcReinforcingMeshType
	{
		public virtual IfcReinforcingMeshTypeEnum? PredefinedType { get; set; }
		public virtual IfcPositiveLengthMeasure? MeshLength { get; set; }
		public virtual IfcPositiveLengthMeasure? MeshWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? LongitudinalBarNominalDiameter { get; set; }
		public virtual IfcPositiveLengthMeasure? TransverseBarNominalDiameter { get; set; }
		public virtual IfcAreaMeasure? LongitudinalBarCrossSectionArea { get; set; }
		public virtual IfcAreaMeasure? TransverseBarCrossSectionArea { get; set; }
		public virtual IfcPositiveLengthMeasure? LongitudinalBarSpacing { get; set; }
		public virtual IfcPositiveLengthMeasure? TransverseBarSpacing { get; set; }
		public virtual IfcLabel? BendingShapeCode { get; set; }
		public virtual List<IfcBendingParameterSelect>? BendingParameters { get; set; }
		public IfcReinforcingMeshType() : base()
		{
		}
		public IfcReinforcingMeshType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcReinforcingMeshTypeEnum? PredefinedType, IfcPositiveLengthMeasure? MeshLength, IfcPositiveLengthMeasure? MeshWidth, IfcPositiveLengthMeasure? LongitudinalBarNominalDiameter, IfcPositiveLengthMeasure? TransverseBarNominalDiameter, IfcAreaMeasure? LongitudinalBarCrossSectionArea, IfcAreaMeasure? TransverseBarCrossSectionArea, IfcPositiveLengthMeasure? LongitudinalBarSpacing, IfcPositiveLengthMeasure? TransverseBarSpacing, IfcLabel? BendingShapeCode, List<IfcBendingParameterSelect>? BendingParameters) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
			this.MeshLength = MeshLength;
			this.MeshWidth = MeshWidth;
			this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
			this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
			this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
			this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
			this.LongitudinalBarSpacing = LongitudinalBarSpacing;
			this.TransverseBarSpacing = TransverseBarSpacing;
			this.BendingShapeCode = BendingShapeCode;
			this.BendingParameters = BendingParameters;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType,
				MeshLength,
				MeshWidth,
				LongitudinalBarNominalDiameter,
				TransverseBarNominalDiameter,
				LongitudinalBarCrossSectionArea,
				TransverseBarCrossSectionArea,
				LongitudinalBarSpacing,
				TransverseBarSpacing,
				BendingShapeCode,
				BendingParameters
			};
		}
		public virtual Global.IfcReinforcingMeshTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcReinforcingMeshTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _MeshLength
		{
			get
			{
				return MeshLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					MeshLength = val;
				}
				else if(value == null)
				{
					MeshLength = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _MeshWidth
		{
			get
			{
				return MeshWidth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					MeshWidth = val;
				}
				else if(value == null)
				{
					MeshWidth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _LongitudinalBarNominalDiameter
		{
			get
			{
				return LongitudinalBarNominalDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					LongitudinalBarNominalDiameter = val;
				}
				else if(value == null)
				{
					LongitudinalBarNominalDiameter = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _TransverseBarNominalDiameter
		{
			get
			{
				return TransverseBarNominalDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					TransverseBarNominalDiameter = val;
				}
				else if(value == null)
				{
					TransverseBarNominalDiameter = null;
				}
			}
		}
		public virtual Global.IfcAreaMeasure? _LongitudinalBarCrossSectionArea
		{
			get
			{
				return LongitudinalBarCrossSectionArea;
			}
			set
			{
				if(value is IfcAreaMeasure val)
				{
					LongitudinalBarCrossSectionArea = val;
				}
				else if(value == null)
				{
					LongitudinalBarCrossSectionArea = null;
				}
			}
		}
		public virtual Global.IfcAreaMeasure? _TransverseBarCrossSectionArea
		{
			get
			{
				return TransverseBarCrossSectionArea;
			}
			set
			{
				if(value is IfcAreaMeasure val)
				{
					TransverseBarCrossSectionArea = val;
				}
				else if(value == null)
				{
					TransverseBarCrossSectionArea = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _LongitudinalBarSpacing
		{
			get
			{
				return LongitudinalBarSpacing;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					LongitudinalBarSpacing = val;
				}
				else if(value == null)
				{
					LongitudinalBarSpacing = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _TransverseBarSpacing
		{
			get
			{
				return TransverseBarSpacing;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					TransverseBarSpacing = val;
				}
				else if(value == null)
				{
					TransverseBarSpacing = null;
				}
			}
		}
		public virtual Global.IfcLabel? _BendingShapeCode
		{
			get
			{
				return BendingShapeCode;
			}
			set
			{
				if(value is IfcLabel val)
				{
					BendingShapeCode = val;
				}
				else if(value == null)
				{
					BendingShapeCode = null;
				}
			}
		}
		public virtual List<Global.IfcBendingParameterSelect>? _BendingParameters
		{
			get
			{
				if(BendingParameters != null)
				{
					List<Global.IfcBendingParameterSelect>? items = new List<Global.IfcBendingParameterSelect>();
					foreach (IfcBendingParameterSelect item in BendingParameters)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					BendingParameters = null;
				}
				else
				{
					BendingParameters = new List<IfcBendingParameterSelect>();
					foreach(var val in value)
					{
						if(val is IfcBendingParameterSelect v)
						{
							BendingParameters.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAggregates
	/// SUBTYPE OF (IfcRelDecomposes);
	/// RelatingObject : IfcObjectDefinition;
	/// RelatedObjects : SET [1:?] OF IfcObjectDefinition;
	/// WHERE
	/// NoSelfReference : SIZEOF(QUERY(Temp <* RelatedObjects | RelatingObject :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAggregates : IfcRelDecomposes, Global.IfcRelAggregates
	{
		public virtual IfcObjectDefinition? RelatingObject { get; set; }
		public virtual List<IfcObjectDefinition>? RelatedObjects { get; set; }
		public IfcRelAggregates() : base()
		{
		}
		public IfcRelAggregates(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcObjectDefinition? RelatingObject, List<IfcObjectDefinition>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingObject = RelatingObject;
			this.RelatedObjects = RelatedObjects;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingObject,
				RelatedObjects
			};
		}
		public virtual Global.IfcObjectDefinition? _RelatingObject
		{
			get
			{
				return RelatingObject;
			}
			set
			{
				if(value is IfcObjectDefinition val)
				{
					RelatingObject = val;
				}
				else if(value == null)
				{
					RelatingObject = null;
				}
			}
		}
		public virtual List<Global.IfcObjectDefinition>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					List<Global.IfcObjectDefinition>? items = new List<Global.IfcObjectDefinition>();
					foreach (IfcObjectDefinition item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedObjects = null;
				}
				else
				{
					RelatedObjects = new List<IfcObjectDefinition>();
					foreach(var val in value)
					{
						if(val is IfcObjectDefinition v)
						{
							RelatedObjects.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssigns
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelAssignsToActor
	/// ,IfcRelAssignsToControl
	/// ,IfcRelAssignsToGroup
	/// ,IfcRelAssignsToProcess
	/// ,IfcRelAssignsToProduct
	/// ,IfcRelAssignsToResource))
	/// SUBTYPE OF (IfcRelationship);
	/// RelatedObjects : SET [1:?] OF IfcObjectDefinition;
	/// RelatedObjectsType : OPTIONAL IfcObjectTypeEnum;
	/// WHERE
	/// WR1 : IfcCorrectObjectAssignment(RelatedObjectsType, RelatedObjects);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRelAssigns : IfcRelationship, Global.IfcRelAssigns
	{
		public virtual List<IfcObjectDefinition>? RelatedObjects { get; set; }
		public virtual IfcObjectTypeEnum? RelatedObjectsType { get; set; }
		public IfcRelAssigns() : base()
		{
		}
		public IfcRelAssigns(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType
			};
		}
		public virtual List<Global.IfcObjectDefinition>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					List<Global.IfcObjectDefinition>? items = new List<Global.IfcObjectDefinition>();
					foreach (IfcObjectDefinition item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedObjects = null;
				}
				else
				{
					RelatedObjects = new List<IfcObjectDefinition>();
					foreach(var val in value)
					{
						if(val is IfcObjectDefinition v)
						{
							RelatedObjects.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcObjectTypeEnum? _RelatedObjectsType
		{
			get
			{
				return RelatedObjectsType;
			}
			set
			{
				if(value is IfcObjectTypeEnum val)
				{
					RelatedObjectsType = val;
				}
				else if(value == null)
				{
					RelatedObjectsType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToActor
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingActor : IfcActor;
	/// ActingRole : OPTIONAL IfcActorRole;
	/// WHERE
	/// NoSelfReference : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingActor :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToActor : IfcRelAssigns, Global.IfcRelAssignsToActor
	{
		public virtual IfcActor? RelatingActor { get; set; }
		public virtual IfcActorRole? ActingRole { get; set; }
		public IfcRelAssignsToActor() : base()
		{
		}
		public IfcRelAssignsToActor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcActor? RelatingActor, IfcActorRole? ActingRole) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingActor = RelatingActor;
			this.ActingRole = ActingRole;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingActor,
				ActingRole
			};
		}
		public virtual Global.IfcActor? _RelatingActor
		{
			get
			{
				return RelatingActor;
			}
			set
			{
				if(value is IfcActor val)
				{
					RelatingActor = val;
				}
				else if(value == null)
				{
					RelatingActor = null;
				}
			}
		}
		public virtual Global.IfcActorRole? _ActingRole
		{
			get
			{
				return ActingRole;
			}
			set
			{
				if(value is IfcActorRole val)
				{
					ActingRole = val;
				}
				else if(value == null)
				{
					ActingRole = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToControl
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingControl : IfcControl;
	/// WHERE
	/// NoSelfReference : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingControl :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToControl : IfcRelAssigns, Global.IfcRelAssignsToControl
	{
		public virtual IfcControl? RelatingControl { get; set; }
		public IfcRelAssignsToControl() : base()
		{
		}
		public IfcRelAssignsToControl(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcControl? RelatingControl) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingControl = RelatingControl;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingControl
			};
		}
		public virtual Global.IfcControl? _RelatingControl
		{
			get
			{
				return RelatingControl;
			}
			set
			{
				if(value is IfcControl val)
				{
					RelatingControl = val;
				}
				else if(value == null)
				{
					RelatingControl = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToGroup
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelAssignsToGroupByFactor))
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingGroup : IfcGroup;
	/// WHERE
	/// NoSelfReference : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingGroup :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToGroup : IfcRelAssigns, Global.IfcRelAssignsToGroup
	{
		public virtual IfcGroup? RelatingGroup { get; set; }
		public IfcRelAssignsToGroup() : base()
		{
		}
		public IfcRelAssignsToGroup(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcGroup? RelatingGroup) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingGroup = RelatingGroup;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingGroup
			};
		}
		public virtual Global.IfcGroup? _RelatingGroup
		{
			get
			{
				return RelatingGroup;
			}
			set
			{
				if(value is IfcGroup val)
				{
					RelatingGroup = val;
				}
				else if(value == null)
				{
					RelatingGroup = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToGroupByFactor
	/// SUBTYPE OF (IfcRelAssignsToGroup);
	/// Factor : IfcRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToGroupByFactor : IfcRelAssignsToGroup, Global.IfcRelAssignsToGroupByFactor
	{
		public virtual IfcRatioMeasure? Factor { get; set; }
		public IfcRelAssignsToGroupByFactor() : base()
		{
		}
		public IfcRelAssignsToGroupByFactor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcGroup? RelatingGroup, IfcRatioMeasure? Factor) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingGroup)
		{
			this.Factor = Factor;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingGroup,
				Factor
			};
		}
		public virtual Global.IfcRatioMeasure? _Factor
		{
			get
			{
				return Factor;
			}
			set
			{
				if(value is IfcRatioMeasure val)
				{
					Factor = val;
				}
				else if(value == null)
				{
					Factor = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToProcess
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingProcess : IfcProcessSelect;
	/// QuantityInProcess : OPTIONAL IfcMeasureWithUnit;
	/// WHERE
	/// NoSelfReference : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingProcess :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToProcess : IfcRelAssigns, Global.IfcRelAssignsToProcess
	{
		public virtual IfcProcessSelect? RelatingProcess { get; set; }
		public virtual IfcMeasureWithUnit? QuantityInProcess { get; set; }
		public IfcRelAssignsToProcess() : base()
		{
		}
		public IfcRelAssignsToProcess(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcProcessSelect? RelatingProcess, IfcMeasureWithUnit? QuantityInProcess) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingProcess = RelatingProcess;
			this.QuantityInProcess = QuantityInProcess;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingProcess,
				QuantityInProcess
			};
		}
		public virtual Global.IfcProcessSelect? _RelatingProcess
		{
			get
			{
				return RelatingProcess;
			}
			set
			{
				if(value is IfcProcessSelect val)
				{
					RelatingProcess = val;
				}
				else if(value == null)
				{
					RelatingProcess = null;
				}
			}
		}
		public virtual Global.IfcMeasureWithUnit? _QuantityInProcess
		{
			get
			{
				return QuantityInProcess;
			}
			set
			{
				if(value is IfcMeasureWithUnit val)
				{
					QuantityInProcess = val;
				}
				else if(value == null)
				{
					QuantityInProcess = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToProduct
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingProduct : IfcProductSelect;
	/// WHERE
	/// NoSelfReference : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingProduct :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToProduct : IfcRelAssigns, Global.IfcRelAssignsToProduct
	{
		public virtual IfcProductSelect? RelatingProduct { get; set; }
		public IfcRelAssignsToProduct() : base()
		{
		}
		public IfcRelAssignsToProduct(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcProductSelect? RelatingProduct) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingProduct = RelatingProduct;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingProduct
			};
		}
		public virtual Global.IfcProductSelect? _RelatingProduct
		{
			get
			{
				return RelatingProduct;
			}
			set
			{
				if(value is IfcProductSelect val)
				{
					RelatingProduct = val;
				}
				else if(value == null)
				{
					RelatingProduct = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToResource
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingResource : IfcResourceSelect;
	/// WHERE
	/// NoSelfReference : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingResource :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToResource : IfcRelAssigns, Global.IfcRelAssignsToResource
	{
		public virtual IfcResourceSelect? RelatingResource { get; set; }
		public IfcRelAssignsToResource() : base()
		{
		}
		public IfcRelAssignsToResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcResourceSelect? RelatingResource) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingResource = RelatingResource;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingResource
			};
		}
		public virtual Global.IfcResourceSelect? _RelatingResource
		{
			get
			{
				return RelatingResource;
			}
			set
			{
				if(value is IfcResourceSelect val)
				{
					RelatingResource = val;
				}
				else if(value == null)
				{
					RelatingResource = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociates
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelAssociatesApproval
	/// ,IfcRelAssociatesClassification
	/// ,IfcRelAssociatesConstraint
	/// ,IfcRelAssociatesDocument
	/// ,IfcRelAssociatesLibrary
	/// ,IfcRelAssociatesMaterial))
	/// SUBTYPE OF (IfcRelationship);
	/// RelatedObjects : SET [1:?] OF IfcDefinitionSelect;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRelAssociates : IfcRelationship, Global.IfcRelAssociates
	{
		public virtual List<IfcDefinitionSelect>? RelatedObjects { get; set; }
		public IfcRelAssociates() : base()
		{
		}
		public IfcRelAssociates(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcDefinitionSelect>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedObjects = RelatedObjects;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects
			};
		}
		public virtual List<Global.IfcDefinitionSelect>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					List<Global.IfcDefinitionSelect>? items = new List<Global.IfcDefinitionSelect>();
					foreach (IfcDefinitionSelect item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedObjects = null;
				}
				else
				{
					RelatedObjects = new List<IfcDefinitionSelect>();
					foreach(var val in value)
					{
						if(val is IfcDefinitionSelect v)
						{
							RelatedObjects.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesApproval
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingApproval : IfcApproval;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesApproval : IfcRelAssociates, Global.IfcRelAssociatesApproval
	{
		public virtual IfcApproval? RelatingApproval { get; set; }
		public IfcRelAssociatesApproval() : base()
		{
		}
		public IfcRelAssociatesApproval(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcDefinitionSelect>? RelatedObjects, IfcApproval? RelatingApproval) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingApproval = RelatingApproval;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingApproval
			};
		}
		public virtual Global.IfcApproval? _RelatingApproval
		{
			get
			{
				return RelatingApproval;
			}
			set
			{
				if(value is IfcApproval val)
				{
					RelatingApproval = val;
				}
				else if(value == null)
				{
					RelatingApproval = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesClassification
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingClassification : IfcClassificationSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesClassification : IfcRelAssociates, Global.IfcRelAssociatesClassification
	{
		public virtual IfcClassificationSelect? RelatingClassification { get; set; }
		public IfcRelAssociatesClassification() : base()
		{
		}
		public IfcRelAssociatesClassification(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcDefinitionSelect>? RelatedObjects, IfcClassificationSelect? RelatingClassification) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingClassification = RelatingClassification;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingClassification
			};
		}
		public virtual Global.IfcClassificationSelect? _RelatingClassification
		{
			get
			{
				return RelatingClassification;
			}
			set
			{
				if(value is IfcClassificationSelect val)
				{
					RelatingClassification = val;
				}
				else if(value == null)
				{
					RelatingClassification = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesConstraint
	/// SUBTYPE OF (IfcRelAssociates);
	/// Intent : OPTIONAL IfcLabel;
	/// RelatingConstraint : IfcConstraint;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesConstraint : IfcRelAssociates, Global.IfcRelAssociatesConstraint
	{
		public virtual IfcLabel? Intent { get; set; }
		public virtual IfcConstraint? RelatingConstraint { get; set; }
		public IfcRelAssociatesConstraint() : base()
		{
		}
		public IfcRelAssociatesConstraint(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcDefinitionSelect>? RelatedObjects, IfcLabel? Intent, IfcConstraint? RelatingConstraint) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.Intent = Intent;
			this.RelatingConstraint = RelatingConstraint;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				Intent,
				RelatingConstraint
			};
		}
		public virtual Global.IfcLabel? _Intent
		{
			get
			{
				return Intent;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Intent = val;
				}
				else if(value == null)
				{
					Intent = null;
				}
			}
		}
		public virtual Global.IfcConstraint? _RelatingConstraint
		{
			get
			{
				return RelatingConstraint;
			}
			set
			{
				if(value is IfcConstraint val)
				{
					RelatingConstraint = val;
				}
				else if(value == null)
				{
					RelatingConstraint = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesDocument
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingDocument : IfcDocumentSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesDocument : IfcRelAssociates, Global.IfcRelAssociatesDocument
	{
		public virtual IfcDocumentSelect? RelatingDocument { get; set; }
		public IfcRelAssociatesDocument() : base()
		{
		}
		public IfcRelAssociatesDocument(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcDefinitionSelect>? RelatedObjects, IfcDocumentSelect? RelatingDocument) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingDocument = RelatingDocument;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingDocument
			};
		}
		public virtual Global.IfcDocumentSelect? _RelatingDocument
		{
			get
			{
				return RelatingDocument;
			}
			set
			{
				if(value is IfcDocumentSelect val)
				{
					RelatingDocument = val;
				}
				else if(value == null)
				{
					RelatingDocument = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesLibrary
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingLibrary : IfcLibrarySelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesLibrary : IfcRelAssociates, Global.IfcRelAssociatesLibrary
	{
		public virtual IfcLibrarySelect? RelatingLibrary { get; set; }
		public IfcRelAssociatesLibrary() : base()
		{
		}
		public IfcRelAssociatesLibrary(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcDefinitionSelect>? RelatedObjects, IfcLibrarySelect? RelatingLibrary) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingLibrary = RelatingLibrary;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingLibrary
			};
		}
		public virtual Global.IfcLibrarySelect? _RelatingLibrary
		{
			get
			{
				return RelatingLibrary;
			}
			set
			{
				if(value is IfcLibrarySelect val)
				{
					RelatingLibrary = val;
				}
				else if(value == null)
				{
					RelatingLibrary = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesMaterial
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingMaterial : IfcMaterialSelect;
	/// WHERE
	/// NoVoidElement : SIZEOF(QUERY(temp <* SELF\IfcRelAssociates.RelatedObjects |
	/// ('IFC4.IFCFEATUREELEMENTSUBTRACTION' IN TYPEOF(temp)) OR
	/// ('IFC4.IFCVIRTUALELEMENT' IN TYPEOF(temp))
	/// )) = 0;
	/// AllowedElements : SIZEOF(QUERY(temp <* SELF\IfcRelAssociates.RelatedObjects | (
	/// SIZEOF(TYPEOF(temp) * [
	/// 'IFC4.IFCELEMENT',
	/// 'IFC4.IFCELEMENTTYPE',
	/// 'IFC4.IFCWINDOWSTYLE',
	/// 'IFC4.IFCDOORSTYLE',
	/// 'IFC4.IFCSTRUCTURALMEMBER',
	/// 'IFC4.IFCPORT']) = 0)
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesMaterial : IfcRelAssociates, Global.IfcRelAssociatesMaterial
	{
		public virtual IfcMaterialSelect? RelatingMaterial { get; set; }
		public IfcRelAssociatesMaterial() : base()
		{
		}
		public IfcRelAssociatesMaterial(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcDefinitionSelect>? RelatedObjects, IfcMaterialSelect? RelatingMaterial) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingMaterial = RelatingMaterial;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingMaterial
			};
		}
		public virtual Global.IfcMaterialSelect? _RelatingMaterial
		{
			get
			{
				return RelatingMaterial;
			}
			set
			{
				if(value is IfcMaterialSelect val)
				{
					RelatingMaterial = val;
				}
				else if(value == null)
				{
					RelatingMaterial = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnects
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelConnectsElements
	/// ,IfcRelConnectsPortToElement
	/// ,IfcRelConnectsPorts
	/// ,IfcRelConnectsStructuralActivity
	/// ,IfcRelConnectsStructuralMember
	/// ,IfcRelContainedInSpatialStructure
	/// ,IfcRelCoversBldgElements
	/// ,IfcRelCoversSpaces
	/// ,IfcRelFillsElement
	/// ,IfcRelFlowControlElements
	/// ,IfcRelInterferesElements
	/// ,IfcRelReferencedInSpatialStructure
	/// ,IfcRelSequence
	/// ,IfcRelServicesBuildings
	/// ,IfcRelSpaceBoundary))
	/// SUBTYPE OF (IfcRelationship);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRelConnects : IfcRelationship, Global.IfcRelConnects
	{
		public IfcRelConnects() : base()
		{
		}
		public IfcRelConnects(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsElements
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelConnectsPathElements
	/// ,IfcRelConnectsWithRealizingElements))
	/// SUBTYPE OF (IfcRelConnects);
	/// ConnectionGeometry : OPTIONAL IfcConnectionGeometry;
	/// RelatingElement : IfcElement;
	/// RelatedElement : IfcElement;
	/// WHERE
	/// NoSelfReference : RelatingElement :<>: RelatedElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsElements : IfcRelConnects, Global.IfcRelConnectsElements
	{
		public virtual IfcConnectionGeometry? ConnectionGeometry { get; set; }
		public virtual IfcElement? RelatingElement { get; set; }
		public virtual IfcElement? RelatedElement { get; set; }
		public IfcRelConnectsElements() : base()
		{
		}
		public IfcRelConnectsElements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcConnectionGeometry? ConnectionGeometry, IfcElement? RelatingElement, IfcElement? RelatedElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ConnectionGeometry = ConnectionGeometry;
			this.RelatingElement = RelatingElement;
			this.RelatedElement = RelatedElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ConnectionGeometry,
				RelatingElement,
				RelatedElement
			};
		}
		public virtual Global.IfcConnectionGeometry? _ConnectionGeometry
		{
			get
			{
				return ConnectionGeometry;
			}
			set
			{
				if(value is IfcConnectionGeometry val)
				{
					ConnectionGeometry = val;
				}
				else if(value == null)
				{
					ConnectionGeometry = null;
				}
			}
		}
		public virtual Global.IfcElement? _RelatingElement
		{
			get
			{
				return RelatingElement;
			}
			set
			{
				if(value is IfcElement val)
				{
					RelatingElement = val;
				}
				else if(value == null)
				{
					RelatingElement = null;
				}
			}
		}
		public virtual Global.IfcElement? _RelatedElement
		{
			get
			{
				return RelatedElement;
			}
			set
			{
				if(value is IfcElement val)
				{
					RelatedElement = val;
				}
				else if(value == null)
				{
					RelatedElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsPathElements
	/// SUBTYPE OF (IfcRelConnectsElements);
	/// RelatingPriorities : LIST [0:?] OF IfcInteger;
	/// RelatedPriorities : LIST [0:?] OF IfcInteger;
	/// RelatedConnectionType : IfcConnectionTypeEnum;
	/// RelatingConnectionType : IfcConnectionTypeEnum;
	/// WHERE
	/// NormalizedRelatingPriorities : (SIZEOF(RelatingPriorities) = 0)
	/// OR
	/// (SIZEOF (QUERY (temp <* RelatingPriorities
	/// | {0 <= temp <= 100}
	/// )) = SIZEOF(RelatingPriorities));
	/// NormalizedRelatedPriorities : (SIZEOF(RelatedPriorities) = 0)
	/// OR
	/// (SIZEOF (QUERY (temp <* RelatedPriorities
	/// | {0 <= temp <= 100}
	/// )) = SIZEOF(RelatedPriorities));
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsPathElements : IfcRelConnectsElements, Global.IfcRelConnectsPathElements
	{
		public virtual List<IfcInteger>? RelatingPriorities { get; set; }
		public virtual List<IfcInteger>? RelatedPriorities { get; set; }
		public virtual IfcConnectionTypeEnum? RelatedConnectionType { get; set; }
		public virtual IfcConnectionTypeEnum? RelatingConnectionType { get; set; }
		public IfcRelConnectsPathElements() : base()
		{
		}
		public IfcRelConnectsPathElements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcConnectionGeometry? ConnectionGeometry, IfcElement? RelatingElement, IfcElement? RelatedElement, List<IfcInteger>? RelatingPriorities, List<IfcInteger>? RelatedPriorities, IfcConnectionTypeEnum? RelatedConnectionType, IfcConnectionTypeEnum? RelatingConnectionType) : base (GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement)
		{
			this.RelatingPriorities = RelatingPriorities;
			this.RelatedPriorities = RelatedPriorities;
			this.RelatedConnectionType = RelatedConnectionType;
			this.RelatingConnectionType = RelatingConnectionType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ConnectionGeometry,
				RelatingElement,
				RelatedElement,
				RelatingPriorities,
				RelatedPriorities,
				RelatedConnectionType,
				RelatingConnectionType
			};
		}
		public virtual List<Global.IfcInteger>? _RelatingPriorities
		{
			get
			{
				if(RelatingPriorities != null)
				{
					List<Global.IfcInteger>? items = new List<Global.IfcInteger>();
					foreach (IfcInteger item in RelatingPriorities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatingPriorities = null;
				}
				else
				{
					RelatingPriorities = new List<IfcInteger>();
					foreach(var val in value)
					{
						if(val is IfcInteger v)
						{
							RelatingPriorities.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcInteger>? _RelatedPriorities
		{
			get
			{
				if(RelatedPriorities != null)
				{
					List<Global.IfcInteger>? items = new List<Global.IfcInteger>();
					foreach (IfcInteger item in RelatedPriorities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedPriorities = null;
				}
				else
				{
					RelatedPriorities = new List<IfcInteger>();
					foreach(var val in value)
					{
						if(val is IfcInteger v)
						{
							RelatedPriorities.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcConnectionTypeEnum? _RelatedConnectionType
		{
			get
			{
				return RelatedConnectionType;
			}
			set
			{
				if(value is IfcConnectionTypeEnum val)
				{
					RelatedConnectionType = val;
				}
				else if(value == null)
				{
					RelatedConnectionType = null;
				}
			}
		}
		public virtual Global.IfcConnectionTypeEnum? _RelatingConnectionType
		{
			get
			{
				return RelatingConnectionType;
			}
			set
			{
				if(value is IfcConnectionTypeEnum val)
				{
					RelatingConnectionType = val;
				}
				else if(value == null)
				{
					RelatingConnectionType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsPortToElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingPort : IfcPort;
	/// RelatedElement : IfcDistributionElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsPortToElement : IfcRelConnects, Global.IfcRelConnectsPortToElement
	{
		public virtual IfcPort? RelatingPort { get; set; }
		public virtual IfcDistributionElement? RelatedElement { get; set; }
		public IfcRelConnectsPortToElement() : base()
		{
		}
		public IfcRelConnectsPortToElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPort? RelatingPort, IfcDistributionElement? RelatedElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingPort = RelatingPort;
			this.RelatedElement = RelatedElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingPort,
				RelatedElement
			};
		}
		public virtual Global.IfcPort? _RelatingPort
		{
			get
			{
				return RelatingPort;
			}
			set
			{
				if(value is IfcPort val)
				{
					RelatingPort = val;
				}
				else if(value == null)
				{
					RelatingPort = null;
				}
			}
		}
		public virtual Global.IfcDistributionElement? _RelatedElement
		{
			get
			{
				return RelatedElement;
			}
			set
			{
				if(value is IfcDistributionElement val)
				{
					RelatedElement = val;
				}
				else if(value == null)
				{
					RelatedElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsPorts
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingPort : IfcPort;
	/// RelatedPort : IfcPort;
	/// RealizingElement : OPTIONAL IfcElement;
	/// WHERE
	/// NoSelfReference : RelatingPort :<>: RelatedPort;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsPorts : IfcRelConnects, Global.IfcRelConnectsPorts
	{
		public virtual IfcPort? RelatingPort { get; set; }
		public virtual IfcPort? RelatedPort { get; set; }
		public virtual IfcElement? RealizingElement { get; set; }
		public IfcRelConnectsPorts() : base()
		{
		}
		public IfcRelConnectsPorts(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPort? RelatingPort, IfcPort? RelatedPort, IfcElement? RealizingElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingPort = RelatingPort;
			this.RelatedPort = RelatedPort;
			this.RealizingElement = RealizingElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingPort,
				RelatedPort,
				RealizingElement
			};
		}
		public virtual Global.IfcPort? _RelatingPort
		{
			get
			{
				return RelatingPort;
			}
			set
			{
				if(value is IfcPort val)
				{
					RelatingPort = val;
				}
				else if(value == null)
				{
					RelatingPort = null;
				}
			}
		}
		public virtual Global.IfcPort? _RelatedPort
		{
			get
			{
				return RelatedPort;
			}
			set
			{
				if(value is IfcPort val)
				{
					RelatedPort = val;
				}
				else if(value == null)
				{
					RelatedPort = null;
				}
			}
		}
		public virtual Global.IfcElement? _RealizingElement
		{
			get
			{
				return RealizingElement;
			}
			set
			{
				if(value is IfcElement val)
				{
					RealizingElement = val;
				}
				else if(value == null)
				{
					RealizingElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsStructuralActivity
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingElement : IfcStructuralActivityAssignmentSelect;
	/// RelatedStructuralActivity : IfcStructuralActivity;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsStructuralActivity : IfcRelConnects, Global.IfcRelConnectsStructuralActivity
	{
		public virtual IfcStructuralActivityAssignmentSelect? RelatingElement { get; set; }
		public virtual IfcStructuralActivity? RelatedStructuralActivity { get; set; }
		public IfcRelConnectsStructuralActivity() : base()
		{
		}
		public IfcRelConnectsStructuralActivity(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcStructuralActivityAssignmentSelect? RelatingElement, IfcStructuralActivity? RelatedStructuralActivity) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingElement = RelatingElement;
			this.RelatedStructuralActivity = RelatedStructuralActivity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingElement,
				RelatedStructuralActivity
			};
		}
		public virtual Global.IfcStructuralActivityAssignmentSelect? _RelatingElement
		{
			get
			{
				return RelatingElement;
			}
			set
			{
				if(value is IfcStructuralActivityAssignmentSelect val)
				{
					RelatingElement = val;
				}
				else if(value == null)
				{
					RelatingElement = null;
				}
			}
		}
		public virtual Global.IfcStructuralActivity? _RelatedStructuralActivity
		{
			get
			{
				return RelatedStructuralActivity;
			}
			set
			{
				if(value is IfcStructuralActivity val)
				{
					RelatedStructuralActivity = val;
				}
				else if(value == null)
				{
					RelatedStructuralActivity = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsStructuralMember
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelConnectsWithEccentricity))
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingStructuralMember : IfcStructuralMember;
	/// RelatedStructuralConnection : IfcStructuralConnection;
	/// AppliedCondition : OPTIONAL IfcBoundaryCondition;
	/// AdditionalConditions : OPTIONAL IfcStructuralConnectionCondition;
	/// SupportedLength : OPTIONAL IfcLengthMeasure;
	/// ConditionCoordinateSystem : OPTIONAL IfcAxis2Placement3D;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsStructuralMember : IfcRelConnects, Global.IfcRelConnectsStructuralMember
	{
		public virtual IfcStructuralMember? RelatingStructuralMember { get; set; }
		public virtual IfcStructuralConnection? RelatedStructuralConnection { get; set; }
		public virtual IfcBoundaryCondition? AppliedCondition { get; set; }
		public virtual IfcStructuralConnectionCondition? AdditionalConditions { get; set; }
		public virtual IfcLengthMeasure? SupportedLength { get; set; }
		public virtual IfcAxis2Placement3D? ConditionCoordinateSystem { get; set; }
		public IfcRelConnectsStructuralMember() : base()
		{
		}
		public IfcRelConnectsStructuralMember(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcStructuralMember? RelatingStructuralMember, IfcStructuralConnection? RelatedStructuralConnection, IfcBoundaryCondition? AppliedCondition, IfcStructuralConnectionCondition? AdditionalConditions, IfcLengthMeasure? SupportedLength, IfcAxis2Placement3D? ConditionCoordinateSystem) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingStructuralMember = RelatingStructuralMember;
			this.RelatedStructuralConnection = RelatedStructuralConnection;
			this.AppliedCondition = AppliedCondition;
			this.AdditionalConditions = AdditionalConditions;
			this.SupportedLength = SupportedLength;
			this.ConditionCoordinateSystem = ConditionCoordinateSystem;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingStructuralMember,
				RelatedStructuralConnection,
				AppliedCondition,
				AdditionalConditions,
				SupportedLength,
				ConditionCoordinateSystem
			};
		}
		public virtual Global.IfcStructuralMember? _RelatingStructuralMember
		{
			get
			{
				return RelatingStructuralMember;
			}
			set
			{
				if(value is IfcStructuralMember val)
				{
					RelatingStructuralMember = val;
				}
				else if(value == null)
				{
					RelatingStructuralMember = null;
				}
			}
		}
		public virtual Global.IfcStructuralConnection? _RelatedStructuralConnection
		{
			get
			{
				return RelatedStructuralConnection;
			}
			set
			{
				if(value is IfcStructuralConnection val)
				{
					RelatedStructuralConnection = val;
				}
				else if(value == null)
				{
					RelatedStructuralConnection = null;
				}
			}
		}
		public virtual Global.IfcBoundaryCondition? _AppliedCondition
		{
			get
			{
				return AppliedCondition;
			}
			set
			{
				if(value is IfcBoundaryCondition val)
				{
					AppliedCondition = val;
				}
				else if(value == null)
				{
					AppliedCondition = null;
				}
			}
		}
		public virtual Global.IfcStructuralConnectionCondition? _AdditionalConditions
		{
			get
			{
				return AdditionalConditions;
			}
			set
			{
				if(value is IfcStructuralConnectionCondition val)
				{
					AdditionalConditions = val;
				}
				else if(value == null)
				{
					AdditionalConditions = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _SupportedLength
		{
			get
			{
				return SupportedLength;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					SupportedLength = val;
				}
				else if(value == null)
				{
					SupportedLength = null;
				}
			}
		}
		public virtual Global.IfcAxis2Placement3D? _ConditionCoordinateSystem
		{
			get
			{
				return ConditionCoordinateSystem;
			}
			set
			{
				if(value is IfcAxis2Placement3D val)
				{
					ConditionCoordinateSystem = val;
				}
				else if(value == null)
				{
					ConditionCoordinateSystem = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsWithEccentricity
	/// SUBTYPE OF (IfcRelConnectsStructuralMember);
	/// ConnectionConstraint : IfcConnectionGeometry;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsWithEccentricity : IfcRelConnectsStructuralMember, Global.IfcRelConnectsWithEccentricity
	{
		public virtual IfcConnectionGeometry? ConnectionConstraint { get; set; }
		public IfcRelConnectsWithEccentricity() : base()
		{
		}
		public IfcRelConnectsWithEccentricity(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcStructuralMember? RelatingStructuralMember, IfcStructuralConnection? RelatedStructuralConnection, IfcBoundaryCondition? AppliedCondition, IfcStructuralConnectionCondition? AdditionalConditions, IfcLengthMeasure? SupportedLength, IfcAxis2Placement3D? ConditionCoordinateSystem, IfcConnectionGeometry? ConnectionConstraint) : base (GlobalId, OwnerHistory, Name, Description, RelatingStructuralMember, RelatedStructuralConnection, AppliedCondition, AdditionalConditions, SupportedLength, ConditionCoordinateSystem)
		{
			this.ConnectionConstraint = ConnectionConstraint;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingStructuralMember,
				RelatedStructuralConnection,
				AppliedCondition,
				AdditionalConditions,
				SupportedLength,
				ConditionCoordinateSystem,
				ConnectionConstraint
			};
		}
		public virtual Global.IfcConnectionGeometry? _ConnectionConstraint
		{
			get
			{
				return ConnectionConstraint;
			}
			set
			{
				if(value is IfcConnectionGeometry val)
				{
					ConnectionConstraint = val;
				}
				else if(value == null)
				{
					ConnectionConstraint = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsWithRealizingElements
	/// SUBTYPE OF (IfcRelConnectsElements);
	/// RealizingElements : SET [1:?] OF IfcElement;
	/// ConnectionType : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsWithRealizingElements : IfcRelConnectsElements, Global.IfcRelConnectsWithRealizingElements
	{
		public virtual List<IfcElement>? RealizingElements { get; set; }
		public virtual IfcLabel? ConnectionType { get; set; }
		public IfcRelConnectsWithRealizingElements() : base()
		{
		}
		public IfcRelConnectsWithRealizingElements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcConnectionGeometry? ConnectionGeometry, IfcElement? RelatingElement, IfcElement? RelatedElement, List<IfcElement>? RealizingElements, IfcLabel? ConnectionType) : base (GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement)
		{
			this.RealizingElements = RealizingElements;
			this.ConnectionType = ConnectionType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ConnectionGeometry,
				RelatingElement,
				RelatedElement,
				RealizingElements,
				ConnectionType
			};
		}
		public virtual List<Global.IfcElement>? _RealizingElements
		{
			get
			{
				if(RealizingElements != null)
				{
					List<Global.IfcElement>? items = new List<Global.IfcElement>();
					foreach (IfcElement item in RealizingElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RealizingElements = null;
				}
				else
				{
					RealizingElements = new List<IfcElement>();
					foreach(var val in value)
					{
						if(val is IfcElement v)
						{
							RealizingElements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _ConnectionType
		{
			get
			{
				return ConnectionType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ConnectionType = val;
				}
				else if(value == null)
				{
					ConnectionType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelContainedInSpatialStructure
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatedElements : SET [1:?] OF IfcProduct;
	/// RelatingStructure : IfcSpatialElement;
	/// WHERE
	/// WR31 : SIZEOF(QUERY(temp <* RelatedElements | 'IFC4.IFCSPATIALSTRUCTUREELEMENT' IN TYPEOF(temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelContainedInSpatialStructure : IfcRelConnects, Global.IfcRelContainedInSpatialStructure
	{
		public virtual List<IfcProduct>? RelatedElements { get; set; }
		public virtual IfcSpatialElement? RelatingStructure { get; set; }
		public IfcRelContainedInSpatialStructure() : base()
		{
		}
		public IfcRelContainedInSpatialStructure(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcProduct>? RelatedElements, IfcSpatialElement? RelatingStructure) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedElements,
				RelatingStructure
			};
		}
		public virtual List<Global.IfcProduct>? _RelatedElements
		{
			get
			{
				if(RelatedElements != null)
				{
					List<Global.IfcProduct>? items = new List<Global.IfcProduct>();
					foreach (IfcProduct item in RelatedElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedElements = null;
				}
				else
				{
					RelatedElements = new List<IfcProduct>();
					foreach(var val in value)
					{
						if(val is IfcProduct v)
						{
							RelatedElements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcSpatialElement? _RelatingStructure
		{
			get
			{
				return RelatingStructure;
			}
			set
			{
				if(value is IfcSpatialElement val)
				{
					RelatingStructure = val;
				}
				else if(value == null)
				{
					RelatingStructure = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelCoversBldgElements
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingBuildingElement : IfcElement;
	/// RelatedCoverings : SET [1:?] OF IfcCovering;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelCoversBldgElements : IfcRelConnects, Global.IfcRelCoversBldgElements
	{
		public virtual IfcElement? RelatingBuildingElement { get; set; }
		public virtual List<IfcCovering>? RelatedCoverings { get; set; }
		public IfcRelCoversBldgElements() : base()
		{
		}
		public IfcRelCoversBldgElements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcElement? RelatingBuildingElement, List<IfcCovering>? RelatedCoverings) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedCoverings = RelatedCoverings;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingBuildingElement,
				RelatedCoverings
			};
		}
		public virtual Global.IfcElement? _RelatingBuildingElement
		{
			get
			{
				return RelatingBuildingElement;
			}
			set
			{
				if(value is IfcElement val)
				{
					RelatingBuildingElement = val;
				}
				else if(value == null)
				{
					RelatingBuildingElement = null;
				}
			}
		}
		public virtual List<Global.IfcCovering>? _RelatedCoverings
		{
			get
			{
				if(RelatedCoverings != null)
				{
					List<Global.IfcCovering>? items = new List<Global.IfcCovering>();
					foreach (IfcCovering item in RelatedCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedCoverings = null;
				}
				else
				{
					RelatedCoverings = new List<IfcCovering>();
					foreach(var val in value)
					{
						if(val is IfcCovering v)
						{
							RelatedCoverings.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelCoversSpaces
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingSpace : IfcSpace;
	/// RelatedCoverings : SET [1:?] OF IfcCovering;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelCoversSpaces : IfcRelConnects, Global.IfcRelCoversSpaces
	{
		public virtual IfcSpace? RelatingSpace { get; set; }
		public virtual List<IfcCovering>? RelatedCoverings { get; set; }
		public IfcRelCoversSpaces() : base()
		{
		}
		public IfcRelCoversSpaces(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcSpace? RelatingSpace, List<IfcCovering>? RelatedCoverings) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingSpace = RelatingSpace;
			this.RelatedCoverings = RelatedCoverings;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingSpace,
				RelatedCoverings
			};
		}
		public virtual Global.IfcSpace? _RelatingSpace
		{
			get
			{
				return RelatingSpace;
			}
			set
			{
				if(value is IfcSpace val)
				{
					RelatingSpace = val;
				}
				else if(value == null)
				{
					RelatingSpace = null;
				}
			}
		}
		public virtual List<Global.IfcCovering>? _RelatedCoverings
		{
			get
			{
				if(RelatedCoverings != null)
				{
					List<Global.IfcCovering>? items = new List<Global.IfcCovering>();
					foreach (IfcCovering item in RelatedCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedCoverings = null;
				}
				else
				{
					RelatedCoverings = new List<IfcCovering>();
					foreach(var val in value)
					{
						if(val is IfcCovering v)
						{
							RelatedCoverings.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDeclares
	/// SUBTYPE OF (IfcRelationship);
	/// RelatingContext : IfcContext;
	/// RelatedDefinitions : SET [1:?] OF IfcDefinitionSelect;
	/// WHERE
	/// NoSelfReference : SIZEOF(QUERY(Temp <* RelatedDefinitions | RelatingContext :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelDeclares : IfcRelationship, Global.IfcRelDeclares
	{
		public virtual IfcContext? RelatingContext { get; set; }
		public virtual List<IfcDefinitionSelect>? RelatedDefinitions { get; set; }
		public IfcRelDeclares() : base()
		{
		}
		public IfcRelDeclares(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcContext? RelatingContext, List<IfcDefinitionSelect>? RelatedDefinitions) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingContext = RelatingContext;
			this.RelatedDefinitions = RelatedDefinitions;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingContext,
				RelatedDefinitions
			};
		}
		public virtual Global.IfcContext? _RelatingContext
		{
			get
			{
				return RelatingContext;
			}
			set
			{
				if(value is IfcContext val)
				{
					RelatingContext = val;
				}
				else if(value == null)
				{
					RelatingContext = null;
				}
			}
		}
		public virtual List<Global.IfcDefinitionSelect>? _RelatedDefinitions
		{
			get
			{
				if(RelatedDefinitions != null)
				{
					List<Global.IfcDefinitionSelect>? items = new List<Global.IfcDefinitionSelect>();
					foreach (IfcDefinitionSelect item in RelatedDefinitions)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedDefinitions = null;
				}
				else
				{
					RelatedDefinitions = new List<IfcDefinitionSelect>();
					foreach(var val in value)
					{
						if(val is IfcDefinitionSelect v)
						{
							RelatedDefinitions.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDecomposes
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelAggregates
	/// ,IfcRelNests
	/// ,IfcRelProjectsElement
	/// ,IfcRelVoidsElement))
	/// SUBTYPE OF (IfcRelationship);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRelDecomposes : IfcRelationship, Global.IfcRelDecomposes
	{
		public IfcRelDecomposes() : base()
		{
		}
		public IfcRelDecomposes(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelDefines
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelDefinesByObject
	/// ,IfcRelDefinesByProperties
	/// ,IfcRelDefinesByTemplate
	/// ,IfcRelDefinesByType))
	/// SUBTYPE OF (IfcRelationship);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRelDefines : IfcRelationship, Global.IfcRelDefines
	{
		public IfcRelDefines() : base()
		{
		}
		public IfcRelDefines(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelDefinesByObject
	/// SUBTYPE OF (IfcRelDefines);
	/// RelatedObjects : SET [1:?] OF IfcObject;
	/// RelatingObject : IfcObject;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelDefinesByObject : IfcRelDefines, Global.IfcRelDefinesByObject
	{
		public virtual List<IfcObject>? RelatedObjects { get; set; }
		public virtual IfcObject? RelatingObject { get; set; }
		public IfcRelDefinesByObject() : base()
		{
		}
		public IfcRelDefinesByObject(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObject>? RelatedObjects, IfcObject? RelatingObject) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedObjects = RelatedObjects;
			this.RelatingObject = RelatingObject;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingObject
			};
		}
		public virtual List<Global.IfcObject>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					List<Global.IfcObject>? items = new List<Global.IfcObject>();
					foreach (IfcObject item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedObjects = null;
				}
				else
				{
					RelatedObjects = new List<IfcObject>();
					foreach(var val in value)
					{
						if(val is IfcObject v)
						{
							RelatedObjects.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcObject? _RelatingObject
		{
			get
			{
				return RelatingObject;
			}
			set
			{
				if(value is IfcObject val)
				{
					RelatingObject = val;
				}
				else if(value == null)
				{
					RelatingObject = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDefinesByProperties
	/// SUBTYPE OF (IfcRelDefines);
	/// RelatedObjects : SET [1:?] OF IfcObjectDefinition;
	/// RelatingPropertyDefinition : IfcPropertySetDefinitionSelect;
	/// WHERE
	/// NoRelatedTypeObject : SIZEOF(QUERY(Types <* SELF\IfcRelDefinesByProperties.RelatedObjects |  'IFC4.IFCTYPEOBJECT' IN TYPEOF(Types))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelDefinesByProperties : IfcRelDefines, Global.IfcRelDefinesByProperties
	{
		public virtual List<IfcObjectDefinition>? RelatedObjects { get; set; }
		public virtual IfcPropertySetDefinitionSelect? RelatingPropertyDefinition { get; set; }
		public IfcRelDefinesByProperties() : base()
		{
		}
		public IfcRelDefinesByProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcPropertySetDefinitionSelect? RelatingPropertyDefinition) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedObjects = RelatedObjects;
			this.RelatingPropertyDefinition = RelatingPropertyDefinition;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingPropertyDefinition
			};
		}
		public virtual List<Global.IfcObjectDefinition>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					List<Global.IfcObjectDefinition>? items = new List<Global.IfcObjectDefinition>();
					foreach (IfcObjectDefinition item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedObjects = null;
				}
				else
				{
					RelatedObjects = new List<IfcObjectDefinition>();
					foreach(var val in value)
					{
						if(val is IfcObjectDefinition v)
						{
							RelatedObjects.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcPropertySetDefinitionSelect? _RelatingPropertyDefinition
		{
			get
			{
				return RelatingPropertyDefinition;
			}
			set
			{
				if(value is IfcPropertySetDefinitionSelect val)
				{
					RelatingPropertyDefinition = val;
				}
				else if(value == null)
				{
					RelatingPropertyDefinition = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDefinesByTemplate
	/// SUBTYPE OF (IfcRelDefines);
	/// RelatedPropertySets : SET [1:?] OF IfcPropertySetDefinition;
	/// RelatingTemplate : IfcPropertySetTemplate;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelDefinesByTemplate : IfcRelDefines, Global.IfcRelDefinesByTemplate
	{
		public virtual List<IfcPropertySetDefinition>? RelatedPropertySets { get; set; }
		public virtual IfcPropertySetTemplate? RelatingTemplate { get; set; }
		public IfcRelDefinesByTemplate() : base()
		{
		}
		public IfcRelDefinesByTemplate(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcPropertySetDefinition>? RelatedPropertySets, IfcPropertySetTemplate? RelatingTemplate) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedPropertySets = RelatedPropertySets;
			this.RelatingTemplate = RelatingTemplate;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedPropertySets,
				RelatingTemplate
			};
		}
		public virtual List<Global.IfcPropertySetDefinition>? _RelatedPropertySets
		{
			get
			{
				if(RelatedPropertySets != null)
				{
					List<Global.IfcPropertySetDefinition>? items = new List<Global.IfcPropertySetDefinition>();
					foreach (IfcPropertySetDefinition item in RelatedPropertySets)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedPropertySets = null;
				}
				else
				{
					RelatedPropertySets = new List<IfcPropertySetDefinition>();
					foreach(var val in value)
					{
						if(val is IfcPropertySetDefinition v)
						{
							RelatedPropertySets.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcPropertySetTemplate? _RelatingTemplate
		{
			get
			{
				return RelatingTemplate;
			}
			set
			{
				if(value is IfcPropertySetTemplate val)
				{
					RelatingTemplate = val;
				}
				else if(value == null)
				{
					RelatingTemplate = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDefinesByType
	/// SUBTYPE OF (IfcRelDefines);
	/// RelatedObjects : SET [1:?] OF IfcObject;
	/// RelatingType : IfcTypeObject;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelDefinesByType : IfcRelDefines, Global.IfcRelDefinesByType
	{
		public virtual List<IfcObject>? RelatedObjects { get; set; }
		public virtual IfcTypeObject? RelatingType { get; set; }
		public IfcRelDefinesByType() : base()
		{
		}
		public IfcRelDefinesByType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObject>? RelatedObjects, IfcTypeObject? RelatingType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedObjects = RelatedObjects;
			this.RelatingType = RelatingType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingType
			};
		}
		public virtual List<Global.IfcObject>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					List<Global.IfcObject>? items = new List<Global.IfcObject>();
					foreach (IfcObject item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedObjects = null;
				}
				else
				{
					RelatedObjects = new List<IfcObject>();
					foreach(var val in value)
					{
						if(val is IfcObject v)
						{
							RelatedObjects.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcTypeObject? _RelatingType
		{
			get
			{
				return RelatingType;
			}
			set
			{
				if(value is IfcTypeObject val)
				{
					RelatingType = val;
				}
				else if(value == null)
				{
					RelatingType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelFillsElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingOpeningElement : IfcOpeningElement;
	/// RelatedBuildingElement : IfcElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelFillsElement : IfcRelConnects, Global.IfcRelFillsElement
	{
		public virtual IfcOpeningElement? RelatingOpeningElement { get; set; }
		public virtual IfcElement? RelatedBuildingElement { get; set; }
		public IfcRelFillsElement() : base()
		{
		}
		public IfcRelFillsElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcOpeningElement? RelatingOpeningElement, IfcElement? RelatedBuildingElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingOpeningElement = RelatingOpeningElement;
			this.RelatedBuildingElement = RelatedBuildingElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingOpeningElement,
				RelatedBuildingElement
			};
		}
		public virtual Global.IfcOpeningElement? _RelatingOpeningElement
		{
			get
			{
				return RelatingOpeningElement;
			}
			set
			{
				if(value is IfcOpeningElement val)
				{
					RelatingOpeningElement = val;
				}
				else if(value == null)
				{
					RelatingOpeningElement = null;
				}
			}
		}
		public virtual Global.IfcElement? _RelatedBuildingElement
		{
			get
			{
				return RelatedBuildingElement;
			}
			set
			{
				if(value is IfcElement val)
				{
					RelatedBuildingElement = val;
				}
				else if(value == null)
				{
					RelatedBuildingElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelFlowControlElements
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatedControlElements : SET [1:?] OF IfcDistributionControlElement;
	/// RelatingFlowElement : IfcDistributionFlowElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelFlowControlElements : IfcRelConnects, Global.IfcRelFlowControlElements
	{
		public virtual List<IfcDistributionControlElement>? RelatedControlElements { get; set; }
		public virtual IfcDistributionFlowElement? RelatingFlowElement { get; set; }
		public IfcRelFlowControlElements() : base()
		{
		}
		public IfcRelFlowControlElements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcDistributionControlElement>? RelatedControlElements, IfcDistributionFlowElement? RelatingFlowElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedControlElements = RelatedControlElements;
			this.RelatingFlowElement = RelatingFlowElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedControlElements,
				RelatingFlowElement
			};
		}
		public virtual List<Global.IfcDistributionControlElement>? _RelatedControlElements
		{
			get
			{
				if(RelatedControlElements != null)
				{
					List<Global.IfcDistributionControlElement>? items = new List<Global.IfcDistributionControlElement>();
					foreach (IfcDistributionControlElement item in RelatedControlElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedControlElements = null;
				}
				else
				{
					RelatedControlElements = new List<IfcDistributionControlElement>();
					foreach(var val in value)
					{
						if(val is IfcDistributionControlElement v)
						{
							RelatedControlElements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcDistributionFlowElement? _RelatingFlowElement
		{
			get
			{
				return RelatingFlowElement;
			}
			set
			{
				if(value is IfcDistributionFlowElement val)
				{
					RelatingFlowElement = val;
				}
				else if(value == null)
				{
					RelatingFlowElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelInterferesElements
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingElement : IfcElement;
	/// RelatedElement : IfcElement;
	/// InterferenceGeometry : OPTIONAL IfcConnectionGeometry;
	/// InterferenceType : OPTIONAL IfcIdentifier;
	/// ImpliedOrder : LOGICAL;
	/// WHERE
	/// NotSelfReference : RelatingElement :<>: RelatedElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelInterferesElements : IfcRelConnects, Global.IfcRelInterferesElements
	{
		public virtual IfcElement? RelatingElement { get; set; }
		public virtual IfcElement? RelatedElement { get; set; }
		public virtual IfcConnectionGeometry? InterferenceGeometry { get; set; }
		public virtual IfcIdentifier? InterferenceType { get; set; }
		public virtual LOGICAL? ImpliedOrder { get; set; }
		public IfcRelInterferesElements() : base()
		{
		}
		public IfcRelInterferesElements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcElement? RelatingElement, IfcElement? RelatedElement, IfcConnectionGeometry? InterferenceGeometry, IfcIdentifier? InterferenceType, LOGICAL? ImpliedOrder) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingElement = RelatingElement;
			this.RelatedElement = RelatedElement;
			this.InterferenceGeometry = InterferenceGeometry;
			this.InterferenceType = InterferenceType;
			this.ImpliedOrder = ImpliedOrder;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingElement,
				RelatedElement,
				InterferenceGeometry,
				InterferenceType,
				ImpliedOrder
			};
		}
		public virtual Global.IfcElement? _RelatingElement
		{
			get
			{
				return RelatingElement;
			}
			set
			{
				if(value is IfcElement val)
				{
					RelatingElement = val;
				}
				else if(value == null)
				{
					RelatingElement = null;
				}
			}
		}
		public virtual Global.IfcElement? _RelatedElement
		{
			get
			{
				return RelatedElement;
			}
			set
			{
				if(value is IfcElement val)
				{
					RelatedElement = val;
				}
				else if(value == null)
				{
					RelatedElement = null;
				}
			}
		}
		public virtual Global.IfcConnectionGeometry? _InterferenceGeometry
		{
			get
			{
				return InterferenceGeometry;
			}
			set
			{
				if(value is IfcConnectionGeometry val)
				{
					InterferenceGeometry = val;
				}
				else if(value == null)
				{
					InterferenceGeometry = null;
				}
			}
		}
		public virtual Global.IfcIdentifier? _InterferenceType
		{
			get
			{
				return InterferenceType;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					InterferenceType = val;
				}
				else if(value == null)
				{
					InterferenceType = null;
				}
			}
		}
		public virtual LOGICAL? _ImpliedOrder
		{
			get
			{
				return ImpliedOrder;
			}
			set
			{
				if(value is LOGICAL val)
				{
					ImpliedOrder = val;
				}
				else if(value == null)
				{
					ImpliedOrder = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelNests
	/// SUBTYPE OF (IfcRelDecomposes);
	/// RelatingObject : IfcObjectDefinition;
	/// RelatedObjects : LIST [1:?] OF IfcObjectDefinition;
	/// WHERE
	/// NoSelfReference : SIZEOF(QUERY(Temp <* RelatedObjects | RelatingObject :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelNests : IfcRelDecomposes, Global.IfcRelNests
	{
		public virtual IfcObjectDefinition? RelatingObject { get; set; }
		public virtual List<IfcObjectDefinition>? RelatedObjects { get; set; }
		public IfcRelNests() : base()
		{
		}
		public IfcRelNests(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcObjectDefinition? RelatingObject, List<IfcObjectDefinition>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingObject = RelatingObject;
			this.RelatedObjects = RelatedObjects;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingObject,
				RelatedObjects
			};
		}
		public virtual Global.IfcObjectDefinition? _RelatingObject
		{
			get
			{
				return RelatingObject;
			}
			set
			{
				if(value is IfcObjectDefinition val)
				{
					RelatingObject = val;
				}
				else if(value == null)
				{
					RelatingObject = null;
				}
			}
		}
		public virtual List<Global.IfcObjectDefinition>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					List<Global.IfcObjectDefinition>? items = new List<Global.IfcObjectDefinition>();
					foreach (IfcObjectDefinition item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedObjects = null;
				}
				else
				{
					RelatedObjects = new List<IfcObjectDefinition>();
					foreach(var val in value)
					{
						if(val is IfcObjectDefinition v)
						{
							RelatedObjects.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelProjectsElement
	/// SUBTYPE OF (IfcRelDecomposes);
	/// RelatingElement : IfcElement;
	/// RelatedFeatureElement : IfcFeatureElementAddition;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelProjectsElement : IfcRelDecomposes, Global.IfcRelProjectsElement
	{
		public virtual IfcElement? RelatingElement { get; set; }
		public virtual IfcFeatureElementAddition? RelatedFeatureElement { get; set; }
		public IfcRelProjectsElement() : base()
		{
		}
		public IfcRelProjectsElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcElement? RelatingElement, IfcFeatureElementAddition? RelatedFeatureElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingElement = RelatingElement;
			this.RelatedFeatureElement = RelatedFeatureElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingElement,
				RelatedFeatureElement
			};
		}
		public virtual Global.IfcElement? _RelatingElement
		{
			get
			{
				return RelatingElement;
			}
			set
			{
				if(value is IfcElement val)
				{
					RelatingElement = val;
				}
				else if(value == null)
				{
					RelatingElement = null;
				}
			}
		}
		public virtual Global.IfcFeatureElementAddition? _RelatedFeatureElement
		{
			get
			{
				return RelatedFeatureElement;
			}
			set
			{
				if(value is IfcFeatureElementAddition val)
				{
					RelatedFeatureElement = val;
				}
				else if(value == null)
				{
					RelatedFeatureElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelReferencedInSpatialStructure
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatedElements : SET [1:?] OF IfcProduct;
	/// RelatingStructure : IfcSpatialElement;
	/// WHERE
	/// AllowedRelatedElements : SIZEOF(QUERY(temp <* RelatedElements | ('IFC4.IFCSPATIALSTRUCTUREELEMENT' IN TYPEOF(temp)) AND (NOT ('IFC4.IFCSPACE' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelReferencedInSpatialStructure : IfcRelConnects, Global.IfcRelReferencedInSpatialStructure
	{
		public virtual List<IfcProduct>? RelatedElements { get; set; }
		public virtual IfcSpatialElement? RelatingStructure { get; set; }
		public IfcRelReferencedInSpatialStructure() : base()
		{
		}
		public IfcRelReferencedInSpatialStructure(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcProduct>? RelatedElements, IfcSpatialElement? RelatingStructure) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedElements,
				RelatingStructure
			};
		}
		public virtual List<Global.IfcProduct>? _RelatedElements
		{
			get
			{
				if(RelatedElements != null)
				{
					List<Global.IfcProduct>? items = new List<Global.IfcProduct>();
					foreach (IfcProduct item in RelatedElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedElements = null;
				}
				else
				{
					RelatedElements = new List<IfcProduct>();
					foreach(var val in value)
					{
						if(val is IfcProduct v)
						{
							RelatedElements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcSpatialElement? _RelatingStructure
		{
			get
			{
				return RelatingStructure;
			}
			set
			{
				if(value is IfcSpatialElement val)
				{
					RelatingStructure = val;
				}
				else if(value == null)
				{
					RelatingStructure = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelSequence
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingProcess : IfcProcess;
	/// RelatedProcess : IfcProcess;
	/// TimeLag : OPTIONAL IfcLagTime;
	/// SequenceType : OPTIONAL IfcSequenceEnum;
	/// UserDefinedSequenceType : OPTIONAL IfcLabel;
	/// WHERE
	/// AvoidInconsistentSequence : RelatingProcess :<>: RelatedProcess;
	/// CorrectSequenceType : (SequenceType <> IfcSequenceEnum.USERDEFINED) OR ((SequenceType = IfcSequenceEnum.USERDEFINED) AND EXISTS(UserDefinedSequenceType));
	/// END_ENTITY;
	/// <summary>
	public class IfcRelSequence : IfcRelConnects, Global.IfcRelSequence
	{
		public virtual IfcProcess? RelatingProcess { get; set; }
		public virtual IfcProcess? RelatedProcess { get; set; }
		public virtual IfcLagTime? TimeLag { get; set; }
		public virtual IfcSequenceEnum? SequenceType { get; set; }
		public virtual IfcLabel? UserDefinedSequenceType { get; set; }
		public IfcRelSequence() : base()
		{
		}
		public IfcRelSequence(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcProcess? RelatingProcess, IfcProcess? RelatedProcess, IfcLagTime? TimeLag, IfcSequenceEnum? SequenceType, IfcLabel? UserDefinedSequenceType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingProcess = RelatingProcess;
			this.RelatedProcess = RelatedProcess;
			this.TimeLag = TimeLag;
			this.SequenceType = SequenceType;
			this.UserDefinedSequenceType = UserDefinedSequenceType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingProcess,
				RelatedProcess,
				TimeLag,
				SequenceType,
				UserDefinedSequenceType
			};
		}
		public virtual Global.IfcProcess? _RelatingProcess
		{
			get
			{
				return RelatingProcess;
			}
			set
			{
				if(value is IfcProcess val)
				{
					RelatingProcess = val;
				}
				else if(value == null)
				{
					RelatingProcess = null;
				}
			}
		}
		public virtual Global.IfcProcess? _RelatedProcess
		{
			get
			{
				return RelatedProcess;
			}
			set
			{
				if(value is IfcProcess val)
				{
					RelatedProcess = val;
				}
				else if(value == null)
				{
					RelatedProcess = null;
				}
			}
		}
		public virtual Global.IfcLagTime? _TimeLag
		{
			get
			{
				return TimeLag;
			}
			set
			{
				if(value is IfcLagTime val)
				{
					TimeLag = val;
				}
				else if(value == null)
				{
					TimeLag = null;
				}
			}
		}
		public virtual Global.IfcSequenceEnum? _SequenceType
		{
			get
			{
				return SequenceType;
			}
			set
			{
				if(value is IfcSequenceEnum val)
				{
					SequenceType = val;
				}
				else if(value == null)
				{
					SequenceType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedSequenceType
		{
			get
			{
				return UserDefinedSequenceType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedSequenceType = val;
				}
				else if(value == null)
				{
					UserDefinedSequenceType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelServicesBuildings
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingSystem : IfcSystem;
	/// RelatedBuildings : SET [1:?] OF IfcSpatialElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelServicesBuildings : IfcRelConnects, Global.IfcRelServicesBuildings
	{
		public virtual IfcSystem? RelatingSystem { get; set; }
		public virtual List<IfcSpatialElement>? RelatedBuildings { get; set; }
		public IfcRelServicesBuildings() : base()
		{
		}
		public IfcRelServicesBuildings(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcSystem? RelatingSystem, List<IfcSpatialElement>? RelatedBuildings) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingSystem = RelatingSystem;
			this.RelatedBuildings = RelatedBuildings;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingSystem,
				RelatedBuildings
			};
		}
		public virtual Global.IfcSystem? _RelatingSystem
		{
			get
			{
				return RelatingSystem;
			}
			set
			{
				if(value is IfcSystem val)
				{
					RelatingSystem = val;
				}
				else if(value == null)
				{
					RelatingSystem = null;
				}
			}
		}
		public virtual List<Global.IfcSpatialElement>? _RelatedBuildings
		{
			get
			{
				if(RelatedBuildings != null)
				{
					List<Global.IfcSpatialElement>? items = new List<Global.IfcSpatialElement>();
					foreach (IfcSpatialElement item in RelatedBuildings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedBuildings = null;
				}
				else
				{
					RelatedBuildings = new List<IfcSpatialElement>();
					foreach(var val in value)
					{
						if(val is IfcSpatialElement v)
						{
							RelatedBuildings.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelSpaceBoundary
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelSpaceBoundary1stLevel))
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingSpace : IfcSpaceBoundarySelect;
	/// RelatedBuildingElement : IfcElement;
	/// ConnectionGeometry : OPTIONAL IfcConnectionGeometry;
	/// PhysicalOrVirtualBoundary : IfcPhysicalOrVirtualEnum;
	/// InternalOrExternalBoundary : IfcInternalOrExternalEnum;
	/// WHERE
	/// CorrectPhysOrVirt : ((PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.Physical)
	/// AND (NOT('IFC4.IFCVIRTUALELEMENT' IN TYPEOF(RelatedBuildingElement))))
	/// OR
	/// ((PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.Virtual)
	/// AND (('IFC4.IFCVIRTUALELEMENT' IN TYPEOF(RelatedBuildingElement))
	/// OR   ('IFC4.IFCOPENINGELEMENT' IN TYPEOF(RelatedBuildingElement))))
	/// OR
	/// (PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.NotDefined);
	/// END_ENTITY;
	/// <summary>
	public class IfcRelSpaceBoundary : IfcRelConnects, Global.IfcRelSpaceBoundary
	{
		public virtual IfcSpaceBoundarySelect? RelatingSpace { get; set; }
		public virtual IfcElement? RelatedBuildingElement { get; set; }
		public virtual IfcConnectionGeometry? ConnectionGeometry { get; set; }
		public virtual IfcPhysicalOrVirtualEnum? PhysicalOrVirtualBoundary { get; set; }
		public virtual IfcInternalOrExternalEnum? InternalOrExternalBoundary { get; set; }
		public IfcRelSpaceBoundary() : base()
		{
		}
		public IfcRelSpaceBoundary(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcSpaceBoundarySelect? RelatingSpace, IfcElement? RelatedBuildingElement, IfcConnectionGeometry? ConnectionGeometry, IfcPhysicalOrVirtualEnum? PhysicalOrVirtualBoundary, IfcInternalOrExternalEnum? InternalOrExternalBoundary) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingSpace = RelatingSpace;
			this.RelatedBuildingElement = RelatedBuildingElement;
			this.ConnectionGeometry = ConnectionGeometry;
			this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
			this.InternalOrExternalBoundary = InternalOrExternalBoundary;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingSpace,
				RelatedBuildingElement,
				ConnectionGeometry,
				PhysicalOrVirtualBoundary,
				InternalOrExternalBoundary
			};
		}
		public virtual Global.IfcSpaceBoundarySelect? _RelatingSpace
		{
			get
			{
				return RelatingSpace;
			}
			set
			{
				if(value is IfcSpaceBoundarySelect val)
				{
					RelatingSpace = val;
				}
				else if(value == null)
				{
					RelatingSpace = null;
				}
			}
		}
		public virtual Global.IfcElement? _RelatedBuildingElement
		{
			get
			{
				return RelatedBuildingElement;
			}
			set
			{
				if(value is IfcElement val)
				{
					RelatedBuildingElement = val;
				}
				else if(value == null)
				{
					RelatedBuildingElement = null;
				}
			}
		}
		public virtual Global.IfcConnectionGeometry? _ConnectionGeometry
		{
			get
			{
				return ConnectionGeometry;
			}
			set
			{
				if(value is IfcConnectionGeometry val)
				{
					ConnectionGeometry = val;
				}
				else if(value == null)
				{
					ConnectionGeometry = null;
				}
			}
		}
		public virtual Global.IfcPhysicalOrVirtualEnum? _PhysicalOrVirtualBoundary
		{
			get
			{
				return PhysicalOrVirtualBoundary;
			}
			set
			{
				if(value is IfcPhysicalOrVirtualEnum val)
				{
					PhysicalOrVirtualBoundary = val;
				}
				else if(value == null)
				{
					PhysicalOrVirtualBoundary = null;
				}
			}
		}
		public virtual Global.IfcInternalOrExternalEnum? _InternalOrExternalBoundary
		{
			get
			{
				return InternalOrExternalBoundary;
			}
			set
			{
				if(value is IfcInternalOrExternalEnum val)
				{
					InternalOrExternalBoundary = val;
				}
				else if(value == null)
				{
					InternalOrExternalBoundary = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelSpaceBoundary1stLevel
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelSpaceBoundary2ndLevel))
	/// SUBTYPE OF (IfcRelSpaceBoundary);
	/// ParentBoundary : OPTIONAL IfcRelSpaceBoundary1stLevel;
	/// INVERSE
	/// InnerBoundaries : SET [0:?] OF IfcRelSpaceBoundary1stLevel FOR ParentBoundary;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelSpaceBoundary1stLevel : IfcRelSpaceBoundary, Global.IfcRelSpaceBoundary1stLevel
	{
		public virtual IfcRelSpaceBoundary1stLevel? ParentBoundary { get; set; }
		public List<IfcRelSpaceBoundary1stLevel>? InnerBoundaries {get{return Model?.GetItems<IfcRelSpaceBoundary1stLevel>().Where(x => x.ParentBoundary != null && x.ParentBoundary == this).ToList();}}
		public IfcRelSpaceBoundary1stLevel() : base()
		{
		}
		public IfcRelSpaceBoundary1stLevel(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcSpaceBoundarySelect? RelatingSpace, IfcElement? RelatedBuildingElement, IfcConnectionGeometry? ConnectionGeometry, IfcPhysicalOrVirtualEnum? PhysicalOrVirtualBoundary, IfcInternalOrExternalEnum? InternalOrExternalBoundary, IfcRelSpaceBoundary1stLevel? ParentBoundary) : base (GlobalId, OwnerHistory, Name, Description, RelatingSpace, RelatedBuildingElement, ConnectionGeometry, PhysicalOrVirtualBoundary, InternalOrExternalBoundary)
		{
			this.ParentBoundary = ParentBoundary;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingSpace,
				RelatedBuildingElement,
				ConnectionGeometry,
				PhysicalOrVirtualBoundary,
				InternalOrExternalBoundary,
				ParentBoundary
			};
		}
		public virtual Global.IfcRelSpaceBoundary1stLevel? _ParentBoundary
		{
			get
			{
				return ParentBoundary;
			}
			set
			{
				if(value is IfcRelSpaceBoundary1stLevel val)
				{
					ParentBoundary = val;
				}
				else if(value == null)
				{
					ParentBoundary = null;
				}
			}
		}
		public virtual List<Global.IfcRelSpaceBoundary1stLevel>? _InnerBoundaries
		{
			get
			{
				if(InnerBoundaries != null)
				{
					List<Global.IfcRelSpaceBoundary1stLevel>? items = new List<Global.IfcRelSpaceBoundary1stLevel>();
					foreach (IfcRelSpaceBoundary1stLevel item in InnerBoundaries)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelSpaceBoundary2ndLevel
	/// SUBTYPE OF (IfcRelSpaceBoundary1stLevel);
	/// CorrespondingBoundary : OPTIONAL IfcRelSpaceBoundary2ndLevel;
	/// INVERSE
	/// Corresponds : SET [0:1] OF IfcRelSpaceBoundary2ndLevel FOR CorrespondingBoundary;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelSpaceBoundary2ndLevel : IfcRelSpaceBoundary1stLevel, Global.IfcRelSpaceBoundary2ndLevel
	{
		public virtual IfcRelSpaceBoundary2ndLevel? CorrespondingBoundary { get; set; }
		public List<IfcRelSpaceBoundary2ndLevel>? Corresponds {get{return Model?.GetItems<IfcRelSpaceBoundary2ndLevel>().Where(x => x.CorrespondingBoundary != null && x.CorrespondingBoundary == this).ToList();}}
		public IfcRelSpaceBoundary2ndLevel() : base()
		{
		}
		public IfcRelSpaceBoundary2ndLevel(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcSpaceBoundarySelect? RelatingSpace, IfcElement? RelatedBuildingElement, IfcConnectionGeometry? ConnectionGeometry, IfcPhysicalOrVirtualEnum? PhysicalOrVirtualBoundary, IfcInternalOrExternalEnum? InternalOrExternalBoundary, IfcRelSpaceBoundary1stLevel? ParentBoundary, IfcRelSpaceBoundary2ndLevel? CorrespondingBoundary) : base (GlobalId, OwnerHistory, Name, Description, RelatingSpace, RelatedBuildingElement, ConnectionGeometry, PhysicalOrVirtualBoundary, InternalOrExternalBoundary, ParentBoundary)
		{
			this.CorrespondingBoundary = CorrespondingBoundary;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingSpace,
				RelatedBuildingElement,
				ConnectionGeometry,
				PhysicalOrVirtualBoundary,
				InternalOrExternalBoundary,
				ParentBoundary,
				CorrespondingBoundary
			};
		}
		public virtual Global.IfcRelSpaceBoundary2ndLevel? _CorrespondingBoundary
		{
			get
			{
				return CorrespondingBoundary;
			}
			set
			{
				if(value is IfcRelSpaceBoundary2ndLevel val)
				{
					CorrespondingBoundary = val;
				}
				else if(value == null)
				{
					CorrespondingBoundary = null;
				}
			}
		}
		public virtual List<Global.IfcRelSpaceBoundary2ndLevel>? _Corresponds
		{
			get
			{
				if(Corresponds != null)
				{
					List<Global.IfcRelSpaceBoundary2ndLevel>? items = new List<Global.IfcRelSpaceBoundary2ndLevel>();
					foreach (IfcRelSpaceBoundary2ndLevel item in Corresponds)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelVoidsElement
	/// SUBTYPE OF (IfcRelDecomposes);
	/// RelatingBuildingElement : IfcElement;
	/// RelatedOpeningElement : IfcFeatureElementSubtraction;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelVoidsElement : IfcRelDecomposes, Global.IfcRelVoidsElement
	{
		public virtual IfcElement? RelatingBuildingElement { get; set; }
		public virtual IfcFeatureElementSubtraction? RelatedOpeningElement { get; set; }
		public IfcRelVoidsElement() : base()
		{
		}
		public IfcRelVoidsElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcElement? RelatingBuildingElement, IfcFeatureElementSubtraction? RelatedOpeningElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedOpeningElement = RelatedOpeningElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingBuildingElement,
				RelatedOpeningElement
			};
		}
		public virtual Global.IfcElement? _RelatingBuildingElement
		{
			get
			{
				return RelatingBuildingElement;
			}
			set
			{
				if(value is IfcElement val)
				{
					RelatingBuildingElement = val;
				}
				else if(value == null)
				{
					RelatingBuildingElement = null;
				}
			}
		}
		public virtual Global.IfcFeatureElementSubtraction? _RelatedOpeningElement
		{
			get
			{
				return RelatedOpeningElement;
			}
			set
			{
				if(value is IfcFeatureElementSubtraction val)
				{
					RelatedOpeningElement = val;
				}
				else if(value == null)
				{
					RelatedOpeningElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelationship
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelAssigns
	/// ,IfcRelAssociates
	/// ,IfcRelConnects
	/// ,IfcRelDeclares
	/// ,IfcRelDecomposes
	/// ,IfcRelDefines))
	/// SUBTYPE OF (IfcRoot);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRelationship : IfcRoot, Global.IfcRelationship
	{
		public IfcRelationship() : base()
		{
		}
		public IfcRelationship(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
	}
	/// <summary>
	/// ENTITY IfcReparametrisedCompositeCurveSegment
	/// SUBTYPE OF (IfcCompositeCurveSegment);
	/// ParamLength : IfcParameterValue;
	/// WHERE
	/// PositiveLengthParameter : ParamLength > 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IfcReparametrisedCompositeCurveSegment : IfcCompositeCurveSegment, Global.IfcReparametrisedCompositeCurveSegment
	{
		public virtual IfcParameterValue? ParamLength { get; set; }
		public IfcReparametrisedCompositeCurveSegment() : base()
		{
		}
		public IfcReparametrisedCompositeCurveSegment(IfcTransitionCode? Transition, IfcBoolean? SameSense, IfcCurve? ParentCurve, IfcParameterValue? ParamLength) : base (Transition, SameSense, ParentCurve)
		{
			this.ParamLength = ParamLength;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Transition,
				SameSense,
				ParentCurve,
				ParamLength
			};
		}
		public virtual Global.IfcParameterValue? _ParamLength
		{
			get
			{
				return ParamLength;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					ParamLength = val;
				}
				else if(value == null)
				{
					ParamLength = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRepresentation
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcShapeModel
	/// ,IfcStyleModel));
	/// ContextOfItems : IfcRepresentationContext;
	/// RepresentationIdentifier : OPTIONAL IfcLabel;
	/// RepresentationType : OPTIONAL IfcLabel;
	/// Items : SET [1:?] OF IfcRepresentationItem;
	/// INVERSE
	/// RepresentationMap : SET [0:1] OF IfcRepresentationMap FOR MappedRepresentation;
	/// LayerAssignments : SET [0:?] OF IfcPresentationLayerAssignment FOR AssignedItems;
	/// OfProductRepresentation : SET [0:?] OF IfcProductRepresentation FOR Representations;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRepresentation : Ifc_Entity, IfcLayeredItem, Global.IfcRepresentation
	{
		public virtual IfcRepresentationContext? ContextOfItems { get; set; }
		public virtual IfcLabel? RepresentationIdentifier { get; set; }
		public virtual IfcLabel? RepresentationType { get; set; }
		public virtual List<IfcRepresentationItem>? Items { get; set; }
		public List<IfcRepresentationMap>? RepresentationMap {get{return Model?.GetItems<IfcRepresentationMap>().Where(x => x.MappedRepresentation != null && x.MappedRepresentation == this).ToList();}}
		public List<IfcPresentationLayerAssignment>? LayerAssignments {get{return Model?.GetItems<IfcPresentationLayerAssignment>().Where(x => x.AssignedItems != null && x.AssignedItems.Contains(this)).ToList();}}
		public List<IfcProductRepresentation>? OfProductRepresentation {get{return Model?.GetItems<IfcProductRepresentation>().Where(x => x.Representations != null && x.Representations.Contains(this)).ToList();}}
		public IfcRepresentation() : base()
		{
		}
		public IfcRepresentation(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base ()
		{
			this.ContextOfItems = ContextOfItems;
			this.RepresentationIdentifier = RepresentationIdentifier;
			this.RepresentationType = RepresentationType;
			this.Items = Items;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
		public virtual Global.IfcRepresentationContext? _ContextOfItems
		{
			get
			{
				return ContextOfItems;
			}
			set
			{
				if(value is IfcRepresentationContext val)
				{
					ContextOfItems = val;
				}
				else if(value == null)
				{
					ContextOfItems = null;
				}
			}
		}
		public virtual Global.IfcLabel? _RepresentationIdentifier
		{
			get
			{
				return RepresentationIdentifier;
			}
			set
			{
				if(value is IfcLabel val)
				{
					RepresentationIdentifier = val;
				}
				else if(value == null)
				{
					RepresentationIdentifier = null;
				}
			}
		}
		public virtual Global.IfcLabel? _RepresentationType
		{
			get
			{
				return RepresentationType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					RepresentationType = val;
				}
				else if(value == null)
				{
					RepresentationType = null;
				}
			}
		}
		public virtual List<Global.IfcRepresentationItem>? _Items
		{
			get
			{
				if(Items != null)
				{
					List<Global.IfcRepresentationItem>? items = new List<Global.IfcRepresentationItem>();
					foreach (IfcRepresentationItem item in Items)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Items = null;
				}
				else
				{
					Items = new List<IfcRepresentationItem>();
					foreach(var val in value)
					{
						if(val is IfcRepresentationItem v)
						{
							Items.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcRepresentationMap>? _RepresentationMap
		{
			get
			{
				if(RepresentationMap != null)
				{
					List<Global.IfcRepresentationMap>? items = new List<Global.IfcRepresentationMap>();
					foreach (IfcRepresentationMap item in RepresentationMap)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcProductRepresentation>? _OfProductRepresentation
		{
			get
			{
				if(OfProductRepresentation != null)
				{
					List<Global.IfcProductRepresentation>? items = new List<Global.IfcProductRepresentation>();
					foreach (IfcProductRepresentation item in OfProductRepresentation)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRepresentationContext
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcGeometricRepresentationContext));
	/// ContextIdentifier : OPTIONAL IfcLabel;
	/// ContextType : OPTIONAL IfcLabel;
	/// INVERSE
	/// RepresentationsInContext : SET [0:?] OF IfcRepresentation FOR ContextOfItems;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRepresentationContext : Ifc_Entity, Global.IfcRepresentationContext
	{
		public virtual IfcLabel? ContextIdentifier { get; set; }
		public virtual IfcLabel? ContextType { get; set; }
		public List<IfcRepresentation>? RepresentationsInContext {get{return Model?.GetItems<IfcRepresentation>().Where(x => x.ContextOfItems != null && x.ContextOfItems == this).ToList();}}
		public IfcRepresentationContext() : base()
		{
		}
		public IfcRepresentationContext(IfcLabel? ContextIdentifier, IfcLabel? ContextType) : base ()
		{
			this.ContextIdentifier = ContextIdentifier;
			this.ContextType = ContextType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextIdentifier,
				ContextType
			};
		}
		public virtual Global.IfcLabel? _ContextIdentifier
		{
			get
			{
				return ContextIdentifier;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ContextIdentifier = val;
				}
				else if(value == null)
				{
					ContextIdentifier = null;
				}
			}
		}
		public virtual Global.IfcLabel? _ContextType
		{
			get
			{
				return ContextType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ContextType = val;
				}
				else if(value == null)
				{
					ContextType = null;
				}
			}
		}
		public virtual List<Global.IfcRepresentation>? _RepresentationsInContext
		{
			get
			{
				if(RepresentationsInContext != null)
				{
					List<Global.IfcRepresentation>? items = new List<Global.IfcRepresentation>();
					foreach (IfcRepresentation item in RepresentationsInContext)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRepresentationItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcGeometricRepresentationItem
	/// ,IfcMappedItem
	/// ,IfcStyledItem
	/// ,IfcTopologicalRepresentationItem));
	/// INVERSE
	/// LayerAssignment : SET [0:1] OF IfcPresentationLayerAssignment FOR AssignedItems;
	/// StyledByItem : SET [0:1] OF IfcStyledItem FOR Item;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRepresentationItem : Ifc_Entity, IfcLayeredItem, Global.IfcRepresentationItem
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignment {get{return Model?.GetItems<IfcPresentationLayerAssignment>().Where(x => x.AssignedItems != null && x.AssignedItems.Contains(this)).ToList();}}
		public List<IfcStyledItem>? StyledByItem {get{return Model?.GetItems<IfcStyledItem>().Where(x => x.Item != null && x.Item == this).ToList();}}
		public IfcRepresentationItem() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignment
		{
			get
			{
				if(LayerAssignment != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignment)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcStyledItem>? _StyledByItem
		{
			get
			{
				if(StyledByItem != null)
				{
					List<Global.IfcStyledItem>? items = new List<Global.IfcStyledItem>();
					foreach (IfcStyledItem item in StyledByItem)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRepresentationMap;
	/// MappingOrigin : IfcAxis2Placement;
	/// MappedRepresentation : IfcRepresentation;
	/// INVERSE
	/// HasShapeAspects : SET [0:?] OF IfcShapeAspect FOR PartOfProductDefinitionShape;
	/// MapUsage : SET [0:?] OF IfcMappedItem FOR MappingSource;
	/// WHERE
	/// ApplicableMappedRepr : 'IFC4.IFCSHAPEMODEL' IN TYPEOF(MappedRepresentation);
	/// END_ENTITY;
	/// <summary>
	public class IfcRepresentationMap : Ifc_Entity, IfcProductRepresentationSelect, Global.IfcRepresentationMap
	{
		public virtual IfcAxis2Placement? MappingOrigin { get; set; }
		public virtual IfcRepresentation? MappedRepresentation { get; set; }
		public List<IfcShapeAspect>? HasShapeAspects {get{return Model?.GetItems<IfcShapeAspect>().Where(x => x.PartOfProductDefinitionShape != null && x.PartOfProductDefinitionShape == this).ToList();}}
		public List<IfcMappedItem>? MapUsage {get{return Model?.GetItems<IfcMappedItem>().Where(x => x.MappingSource != null && x.MappingSource == this).ToList();}}
		public IfcRepresentationMap() : base()
		{
		}
		public IfcRepresentationMap(IfcAxis2Placement? MappingOrigin, IfcRepresentation? MappedRepresentation) : base ()
		{
			this.MappingOrigin = MappingOrigin;
			this.MappedRepresentation = MappedRepresentation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				MappingOrigin,
				MappedRepresentation
			};
		}
		public virtual Global.IfcAxis2Placement? _MappingOrigin
		{
			get
			{
				return MappingOrigin;
			}
			set
			{
				if(value is IfcAxis2Placement val)
				{
					MappingOrigin = val;
				}
				else if(value == null)
				{
					MappingOrigin = null;
				}
			}
		}
		public virtual Global.IfcRepresentation? _MappedRepresentation
		{
			get
			{
				return MappedRepresentation;
			}
			set
			{
				if(value is IfcRepresentation val)
				{
					MappedRepresentation = val;
				}
				else if(value == null)
				{
					MappedRepresentation = null;
				}
			}
		}
		public virtual List<Global.IfcShapeAspect>? _HasShapeAspects
		{
			get
			{
				if(HasShapeAspects != null)
				{
					List<Global.IfcShapeAspect>? items = new List<Global.IfcShapeAspect>();
					foreach (IfcShapeAspect item in HasShapeAspects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcMappedItem>? _MapUsage
		{
			get
			{
				if(MapUsage != null)
				{
					List<Global.IfcMappedItem>? items = new List<Global.IfcMappedItem>();
					foreach (IfcMappedItem item in MapUsage)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcResource
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConstructionResource))
	/// SUBTYPE OF (IfcObject);
	/// Identification : OPTIONAL IfcIdentifier;
	/// LongDescription : OPTIONAL IfcText;
	/// INVERSE
	/// ResourceOf : SET [0:?] OF IfcRelAssignsToResource FOR RelatingResource;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcResource : IfcObject, IfcResourceSelect, Global.IfcResource
	{
		public virtual IfcIdentifier? Identification { get; set; }
		public virtual IfcText? LongDescription { get; set; }
		public virtual List<IfcAppliedValue>? BaseCosts {get; set;}
		public virtual IfcPhysicalQuantity? BaseQuantity {get; set;}
		public List<IfcRelAssignsToResource>? ResourceOf {get{return Model?.GetItems<IfcRelAssignsToResource>().Where(x => x.RelatingResource != null && x.RelatingResource == this).ToList();}}
		public IfcResource() : base()
		{
		}
		public IfcResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.Identification = Identification;
			this.LongDescription = LongDescription;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription
			};
		}
		public virtual Global.IfcIdentifier? _Identification
		{
			get
			{
				return Identification;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identification = val;
				}
				else if(value == null)
				{
					Identification = null;
				}
			}
		}
		public virtual Global.IfcText? _LongDescription
		{
			get
			{
				return LongDescription;
			}
			set
			{
				if(value is IfcText val)
				{
					LongDescription = val;
				}
				else if(value == null)
				{
					LongDescription = null;
				}
			}
		}
		public virtual List<Global.IfcAppliedValue>? _BaseCosts
		{
			get
			{
				if(BaseCosts != null)
				{
					List<Global.IfcAppliedValue>? items = new List<Global.IfcAppliedValue>();
					foreach (IfcAppliedValue item in BaseCosts)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					BaseCosts = null;
				}
				else
				{
					BaseCosts = new List<IfcAppliedValue>();
					foreach(var val in value)
					{
						if(val is IfcAppliedValue v)
						{
							BaseCosts.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcPhysicalQuantity? _BaseQuantity
		{
			get
			{
				return BaseQuantity;
			}
			set
			{
				if(value is IfcPhysicalQuantity val)
				{
					BaseQuantity = val;
				}
				else if(value == null)
				{
					BaseQuantity = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssignsToResource>? _ResourceOf
		{
			get
			{
				if(ResourceOf != null)
				{
					List<Global.IfcRelAssignsToResource>? items = new List<Global.IfcRelAssignsToResource>();
					foreach (IfcRelAssignsToResource item in ResourceOf)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcResourceApprovalRelationship
	/// SUBTYPE OF (IfcResourceLevelRelationship);
	/// RelatedResourceObjects : SET [1:?] OF IfcResourceObjectSelect;
	/// RelatingApproval : IfcApproval;
	/// END_ENTITY;
	/// <summary>
	public class IfcResourceApprovalRelationship : IfcResourceLevelRelationship, Global.IfcResourceApprovalRelationship
	{
		public virtual List<IfcResourceObjectSelect>? RelatedResourceObjects { get; set; }
		public virtual IfcApproval? RelatingApproval { get; set; }
		public IfcResourceApprovalRelationship() : base()
		{
		}
		public IfcResourceApprovalRelationship(IfcLabel? Name, IfcText? Description, List<IfcResourceObjectSelect>? RelatedResourceObjects, IfcApproval? RelatingApproval) : base (Name, Description)
		{
			this.RelatedResourceObjects = RelatedResourceObjects;
			this.RelatingApproval = RelatingApproval;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatedResourceObjects,
				RelatingApproval
			};
		}
		public virtual List<Global.IfcResourceObjectSelect>? _RelatedResourceObjects
		{
			get
			{
				if(RelatedResourceObjects != null)
				{
					List<Global.IfcResourceObjectSelect>? items = new List<Global.IfcResourceObjectSelect>();
					foreach (IfcResourceObjectSelect item in RelatedResourceObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedResourceObjects = null;
				}
				else
				{
					RelatedResourceObjects = new List<IfcResourceObjectSelect>();
					foreach(var val in value)
					{
						if(val is IfcResourceObjectSelect v)
						{
							RelatedResourceObjects.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcApproval? _RelatingApproval
		{
			get
			{
				return RelatingApproval;
			}
			set
			{
				if(value is IfcApproval val)
				{
					RelatingApproval = val;
				}
				else if(value == null)
				{
					RelatingApproval = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcResourceConstraintRelationship
	/// SUBTYPE OF (IfcResourceLevelRelationship);
	/// RelatingConstraint : IfcConstraint;
	/// RelatedResourceObjects : SET [1:?] OF IfcResourceObjectSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcResourceConstraintRelationship : IfcResourceLevelRelationship, Global.IfcResourceConstraintRelationship
	{
		public virtual IfcConstraint? RelatingConstraint { get; set; }
		public virtual List<IfcResourceObjectSelect>? RelatedResourceObjects { get; set; }
		public IfcResourceConstraintRelationship() : base()
		{
		}
		public IfcResourceConstraintRelationship(IfcLabel? Name, IfcText? Description, IfcConstraint? RelatingConstraint, List<IfcResourceObjectSelect>? RelatedResourceObjects) : base (Name, Description)
		{
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedResourceObjects = RelatedResourceObjects;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingConstraint,
				RelatedResourceObjects
			};
		}
		public virtual Global.IfcConstraint? _RelatingConstraint
		{
			get
			{
				return RelatingConstraint;
			}
			set
			{
				if(value is IfcConstraint val)
				{
					RelatingConstraint = val;
				}
				else if(value == null)
				{
					RelatingConstraint = null;
				}
			}
		}
		public virtual List<Global.IfcResourceObjectSelect>? _RelatedResourceObjects
		{
			get
			{
				if(RelatedResourceObjects != null)
				{
					List<Global.IfcResourceObjectSelect>? items = new List<Global.IfcResourceObjectSelect>();
					foreach (IfcResourceObjectSelect item in RelatedResourceObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedResourceObjects = null;
				}
				else
				{
					RelatedResourceObjects = new List<IfcResourceObjectSelect>();
					foreach(var val in value)
					{
						if(val is IfcResourceObjectSelect v)
						{
							RelatedResourceObjects.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcResourceLevelRelationship
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcApprovalRelationship
	/// ,IfcCurrencyRelationship
	/// ,IfcDocumentInformationRelationship
	/// ,IfcExternalReferenceRelationship
	/// ,IfcMaterialRelationship
	/// ,IfcOrganizationRelationship
	/// ,IfcPropertyDependencyRelationship
	/// ,IfcResourceApprovalRelationship
	/// ,IfcResourceConstraintRelationship));
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcResourceLevelRelationship : Ifc_Entity, Global.IfcResourceLevelRelationship
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public IfcResourceLevelRelationship() : base()
		{
		}
		public IfcResourceLevelRelationship(IfcLabel? Name, IfcText? Description) : base ()
		{
			this.Name = Name;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcResourceTime
	/// SUBTYPE OF (IfcSchedulingTime);
	/// ScheduleWork : OPTIONAL IfcDuration;
	/// ScheduleUsage : OPTIONAL IfcPositiveRatioMeasure;
	/// ScheduleStart : OPTIONAL IfcDateTime;
	/// ScheduleFinish : OPTIONAL IfcDateTime;
	/// ScheduleContour : OPTIONAL IfcLabel;
	/// LevelingDelay : OPTIONAL IfcDuration;
	/// IsOverAllocated : OPTIONAL IfcBoolean;
	/// StatusTime : OPTIONAL IfcDateTime;
	/// ActualWork : OPTIONAL IfcDuration;
	/// ActualUsage : OPTIONAL IfcPositiveRatioMeasure;
	/// ActualStart : OPTIONAL IfcDateTime;
	/// ActualFinish : OPTIONAL IfcDateTime;
	/// RemainingWork : OPTIONAL IfcDuration;
	/// RemainingUsage : OPTIONAL IfcPositiveRatioMeasure;
	/// Completion : OPTIONAL IfcPositiveRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcResourceTime : IfcSchedulingTime, Global.IfcResourceTime
	{
		public virtual IfcDuration? ScheduleWork { get; set; }
		public virtual IfcPositiveRatioMeasure? ScheduleUsage { get; set; }
		public virtual IfcDateTime? ScheduleStart { get; set; }
		public virtual IfcDateTime? ScheduleFinish { get; set; }
		public virtual IfcLabel? ScheduleContour { get; set; }
		public virtual IfcDuration? LevelingDelay { get; set; }
		public virtual IfcBoolean? IsOverAllocated { get; set; }
		public virtual IfcDateTime? StatusTime { get; set; }
		public virtual IfcDuration? ActualWork { get; set; }
		public virtual IfcPositiveRatioMeasure? ActualUsage { get; set; }
		public virtual IfcDateTime? ActualStart { get; set; }
		public virtual IfcDateTime? ActualFinish { get; set; }
		public virtual IfcDuration? RemainingWork { get; set; }
		public virtual IfcPositiveRatioMeasure? RemainingUsage { get; set; }
		public virtual IfcPositiveRatioMeasure? Completion { get; set; }
		public IfcResourceTime() : base()
		{
		}
		public IfcResourceTime(IfcLabel? Name, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcDuration? ScheduleWork, IfcPositiveRatioMeasure? ScheduleUsage, IfcDateTime? ScheduleStart, IfcDateTime? ScheduleFinish, IfcLabel? ScheduleContour, IfcDuration? LevelingDelay, IfcBoolean? IsOverAllocated, IfcDateTime? StatusTime, IfcDuration? ActualWork, IfcPositiveRatioMeasure? ActualUsage, IfcDateTime? ActualStart, IfcDateTime? ActualFinish, IfcDuration? RemainingWork, IfcPositiveRatioMeasure? RemainingUsage, IfcPositiveRatioMeasure? Completion) : base (Name, DataOrigin, UserDefinedDataOrigin)
		{
			this.ScheduleWork = ScheduleWork;
			this.ScheduleUsage = ScheduleUsage;
			this.ScheduleStart = ScheduleStart;
			this.ScheduleFinish = ScheduleFinish;
			this.ScheduleContour = ScheduleContour;
			this.LevelingDelay = LevelingDelay;
			this.IsOverAllocated = IsOverAllocated;
			this.StatusTime = StatusTime;
			this.ActualWork = ActualWork;
			this.ActualUsage = ActualUsage;
			this.ActualStart = ActualStart;
			this.ActualFinish = ActualFinish;
			this.RemainingWork = RemainingWork;
			this.RemainingUsage = RemainingUsage;
			this.Completion = Completion;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DataOrigin,
				UserDefinedDataOrigin,
				ScheduleWork,
				ScheduleUsage,
				ScheduleStart,
				ScheduleFinish,
				ScheduleContour,
				LevelingDelay,
				IsOverAllocated,
				StatusTime,
				ActualWork,
				ActualUsage,
				ActualStart,
				ActualFinish,
				RemainingWork,
				RemainingUsage,
				Completion
			};
		}
		public virtual Global.IfcDuration? _ScheduleWork
		{
			get
			{
				return ScheduleWork;
			}
			set
			{
				if(value is IfcDuration val)
				{
					ScheduleWork = val;
				}
				else if(value == null)
				{
					ScheduleWork = null;
				}
			}
		}
		public virtual Global.IfcPositiveRatioMeasure? _ScheduleUsage
		{
			get
			{
				return ScheduleUsage;
			}
			set
			{
				if(value is IfcPositiveRatioMeasure val)
				{
					ScheduleUsage = val;
				}
				else if(value == null)
				{
					ScheduleUsage = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _ScheduleStart
		{
			get
			{
				return ScheduleStart;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					ScheduleStart = val;
				}
				else if(value == null)
				{
					ScheduleStart = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _ScheduleFinish
		{
			get
			{
				return ScheduleFinish;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					ScheduleFinish = val;
				}
				else if(value == null)
				{
					ScheduleFinish = null;
				}
			}
		}
		public virtual Global.IfcLabel? _ScheduleContour
		{
			get
			{
				return ScheduleContour;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ScheduleContour = val;
				}
				else if(value == null)
				{
					ScheduleContour = null;
				}
			}
		}
		public virtual Global.IfcDuration? _LevelingDelay
		{
			get
			{
				return LevelingDelay;
			}
			set
			{
				if(value is IfcDuration val)
				{
					LevelingDelay = val;
				}
				else if(value == null)
				{
					LevelingDelay = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _IsOverAllocated
		{
			get
			{
				return IsOverAllocated;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					IsOverAllocated = val;
				}
				else if(value == null)
				{
					IsOverAllocated = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _StatusTime
		{
			get
			{
				return StatusTime;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					StatusTime = val;
				}
				else if(value == null)
				{
					StatusTime = null;
				}
			}
		}
		public virtual Global.IfcDuration? _ActualWork
		{
			get
			{
				return ActualWork;
			}
			set
			{
				if(value is IfcDuration val)
				{
					ActualWork = val;
				}
				else if(value == null)
				{
					ActualWork = null;
				}
			}
		}
		public virtual Global.IfcPositiveRatioMeasure? _ActualUsage
		{
			get
			{
				return ActualUsage;
			}
			set
			{
				if(value is IfcPositiveRatioMeasure val)
				{
					ActualUsage = val;
				}
				else if(value == null)
				{
					ActualUsage = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _ActualStart
		{
			get
			{
				return ActualStart;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					ActualStart = val;
				}
				else if(value == null)
				{
					ActualStart = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _ActualFinish
		{
			get
			{
				return ActualFinish;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					ActualFinish = val;
				}
				else if(value == null)
				{
					ActualFinish = null;
				}
			}
		}
		public virtual Global.IfcDuration? _RemainingWork
		{
			get
			{
				return RemainingWork;
			}
			set
			{
				if(value is IfcDuration val)
				{
					RemainingWork = val;
				}
				else if(value == null)
				{
					RemainingWork = null;
				}
			}
		}
		public virtual Global.IfcPositiveRatioMeasure? _RemainingUsage
		{
			get
			{
				return RemainingUsage;
			}
			set
			{
				if(value is IfcPositiveRatioMeasure val)
				{
					RemainingUsage = val;
				}
				else if(value == null)
				{
					RemainingUsage = null;
				}
			}
		}
		public virtual Global.IfcPositiveRatioMeasure? _Completion
		{
			get
			{
				return Completion;
			}
			set
			{
				if(value is IfcPositiveRatioMeasure val)
				{
					Completion = val;
				}
				else if(value == null)
				{
					Completion = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRevolvedAreaSolid
	/// SUPERTYPE OF (ONEOF
	/// (IfcRevolvedAreaSolidTapered))
	/// SUBTYPE OF (IfcSweptAreaSolid);
	/// Axis : IfcAxis1Placement;
	/// Angle : IfcPlaneAngleMeasure;
	/// DERIVE
	/// AxisLine : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(Axis.Location,
	/// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(Axis.Z,1.0));
	/// WHERE
	/// AxisStartInXY : Axis.Location.Coordinates[3] = 0.0;
	/// AxisDirectionInXY : Axis.Z.DirectionRatios[3] = 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRevolvedAreaSolid : IfcSweptAreaSolid, Global.IfcRevolvedAreaSolid
	{
		public virtual IfcAxis1Placement? Axis { get; set; }
		public virtual IfcPlaneAngleMeasure? Angle { get; set; }
		//DERIVE
		public virtual IfcLine? AxisLine {get {return null;}}
		public IfcRevolvedAreaSolid() : base()
		{
		}
		public IfcRevolvedAreaSolid(IfcProfileDef? SweptArea, IfcAxis2Placement3D? Position, IfcAxis1Placement? Axis, IfcPlaneAngleMeasure? Angle) : base (SweptArea, Position)
		{
			this.Axis = Axis;
			this.Angle = Angle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptArea,
				Position,
				Axis,
				Angle
			};
		}
		public virtual Global.IfcAxis1Placement? _Axis
		{
			get
			{
				return Axis;
			}
			set
			{
				if(value is IfcAxis1Placement val)
				{
					Axis = val;
				}
				else if(value == null)
				{
					Axis = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _Angle
		{
			get
			{
				return Angle;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					Angle = val;
				}
				else if(value == null)
				{
					Angle = null;
				}
			}
		}
		public virtual Global.IfcLine? _AxisLine
		{
			get
			{
				return AxisLine;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRevolvedAreaSolidTapered
	/// SUBTYPE OF (IfcRevolvedAreaSolid);
	/// EndSweptArea : IfcProfileDef;
	/// WHERE
	/// CorrectProfileAssignment : IfcTaperedSweptAreaProfiles(SELF\IfcSweptAreaSolid.SweptArea, SELF.EndSweptArea);
	/// END_ENTITY;
	/// <summary>
	public class IfcRevolvedAreaSolidTapered : IfcRevolvedAreaSolid, Global.IfcRevolvedAreaSolidTapered
	{
		public virtual IfcProfileDef? EndSweptArea { get; set; }
		public IfcRevolvedAreaSolidTapered() : base()
		{
		}
		public IfcRevolvedAreaSolidTapered(IfcProfileDef? SweptArea, IfcAxis2Placement3D? Position, IfcAxis1Placement? Axis, IfcPlaneAngleMeasure? Angle, IfcProfileDef? EndSweptArea) : base (SweptArea, Position, Axis, Angle)
		{
			this.EndSweptArea = EndSweptArea;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptArea,
				Position,
				Axis,
				Angle,
				EndSweptArea
			};
		}
		public virtual Global.IfcProfileDef? _EndSweptArea
		{
			get
			{
				return EndSweptArea;
			}
			set
			{
				if(value is IfcProfileDef val)
				{
					EndSweptArea = val;
				}
				else if(value == null)
				{
					EndSweptArea = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRightCircularCone
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// Height : IfcPositiveLengthMeasure;
	/// BottomRadius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcRightCircularCone : IfcCsgPrimitive3D, Global.IfcRightCircularCone
	{
		public virtual IfcPositiveLengthMeasure? Height { get; set; }
		public virtual IfcPositiveLengthMeasure? BottomRadius { get; set; }
		public IfcRightCircularCone() : base()
		{
		}
		public IfcRightCircularCone(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? Height, IfcPositiveLengthMeasure? BottomRadius) : base (Position)
		{
			this.Height = Height;
			this.BottomRadius = BottomRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				Height,
				BottomRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Height
		{
			get
			{
				return Height;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Height = val;
				}
				else if(value == null)
				{
					Height = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _BottomRadius
		{
			get
			{
				return BottomRadius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					BottomRadius = val;
				}
				else if(value == null)
				{
					BottomRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRightCircularCylinder
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// Height : IfcPositiveLengthMeasure;
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcRightCircularCylinder : IfcCsgPrimitive3D, Global.IfcRightCircularCylinder
	{
		public virtual IfcPositiveLengthMeasure? Height { get; set; }
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public IfcRightCircularCylinder() : base()
		{
		}
		public IfcRightCircularCylinder(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? Height, IfcPositiveLengthMeasure? Radius) : base (Position)
		{
			this.Height = Height;
			this.Radius = Radius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				Height,
				Radius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Height
		{
			get
			{
				return Height;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Height = val;
				}
				else if(value == null)
				{
					Height = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRoof
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcRoofTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcRoofTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcRoofTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCROOFTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcRoof : IfcBuildingElement, Global.IfcRoof
	{
		public virtual IfcRoofTypeEnum? PredefinedType { get; set; }
		public IfcRoof() : base()
		{
		}
		public IfcRoof(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcRoofTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcRoofTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcRoofTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRoofType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcRoofTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcRoofTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcRoofTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcRoofType : IfcBuildingElementType, Global.IfcRoofType
	{
		public virtual IfcRoofTypeEnum? PredefinedType { get; set; }
		public IfcRoofType() : base()
		{
		}
		public IfcRoofType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcRoofTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcRoofTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcRoofTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRoot
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcObjectDefinition
	/// ,IfcPropertyDefinition
	/// ,IfcRelationship));
	/// GlobalId : IfcGloballyUniqueId;
	/// OwnerHistory : OPTIONAL IfcOwnerHistory;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// UNIQUE
	/// UR1 : GlobalId;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRoot : Ifc_Entity, Global.IfcRoot
	{
		public virtual IfcGloballyUniqueId? GlobalId { get; set; }
		public virtual IfcOwnerHistory? OwnerHistory { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public IfcRoot() : base()
		{
		}
		public IfcRoot(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base ()
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
		public virtual Global.IfcGloballyUniqueId? _GlobalId
		{
			get
			{
				return GlobalId;
			}
			set
			{
				if(value is IfcGloballyUniqueId val)
				{
					GlobalId = val;
				}
				else if(value == null)
				{
					GlobalId = null;
				}
			}
		}
		public virtual Global.IfcOwnerHistory? _OwnerHistory
		{
			get
			{
				return OwnerHistory;
			}
			set
			{
				if(value is IfcOwnerHistory val)
				{
					OwnerHistory = val;
				}
				else if(value == null)
				{
					OwnerHistory = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRoundedRectangleProfileDef
	/// SUBTYPE OF (IfcRectangleProfileDef);
	/// RoundingRadius : IfcPositiveLengthMeasure;
	/// WHERE
	/// ValidRadius : ((RoundingRadius <= (SELF\IfcRectangleProfileDef.XDim/2.)) AND
	/// (RoundingRadius <= (SELF\IfcRectangleProfileDef.YDim/2.)));
	/// END_ENTITY;
	/// <summary>
	public class IfcRoundedRectangleProfileDef : IfcRectangleProfileDef, Global.IfcRoundedRectangleProfileDef
	{
		public virtual IfcPositiveLengthMeasure? RoundingRadius { get; set; }
		public IfcRoundedRectangleProfileDef() : base()
		{
		}
		public IfcRoundedRectangleProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? XDim, IfcPositiveLengthMeasure? YDim, IfcPositiveLengthMeasure? RoundingRadius) : base (ProfileType, ProfileName, Position, XDim, YDim)
		{
			this.RoundingRadius = RoundingRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				XDim,
				YDim,
				RoundingRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _RoundingRadius
		{
			get
			{
				return RoundingRadius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					RoundingRadius = val;
				}
				else if(value == null)
				{
					RoundingRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSIUnit
	/// SUBTYPE OF (IfcNamedUnit);
	/// Prefix : OPTIONAL IfcSIPrefix;
	/// Name : IfcSIUnitName;
	/// DERIVE
	/// SELF\IfcNamedUnit.Dimensions : IfcDimensionalExponents := IfcDimensionsForSiUnit (SELF.Name);
	/// END_ENTITY;
	/// <summary>
	public class IfcSIUnit : IfcNamedUnit, Global.IfcSIUnit
	{
		public virtual IfcSIPrefix? Prefix { get; set; }
		public virtual IfcSIUnitName? Name { get; set; }
		//DERIVE
		public override IfcDimensionalExponents? Dimensions {get {return null;}}
		public IfcSIUnit() : base()
		{
		}
		public IfcSIUnit(IfcDimensionalExponents? Dimensions, IfcUnitEnum? UnitType, IfcSIPrefix? Prefix, IfcSIUnitName? Name) : base (Dimensions, UnitType)
		{
			this.Prefix = Prefix;
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Dimensions,
				UnitType,
				Prefix,
				Name
			};
		}
		public virtual Global.IfcSIPrefix? _Prefix
		{
			get
			{
				return Prefix;
			}
			set
			{
				if(value is IfcSIPrefix val)
				{
					Prefix = val;
				}
				else if(value == null)
				{
					Prefix = null;
				}
			}
		}
		public virtual Global.IfcSIUnitName? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcSIUnitName val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public override Global.IfcDimensionalExponents? _Dimensions
		{
			get
			{
				return Dimensions;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSanitaryTerminal
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcSanitaryTerminalTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSanitaryTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSanitaryTerminalTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSANITARYTERMINALTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSanitaryTerminal : IfcFlowTerminal, Global.IfcSanitaryTerminal
	{
		public virtual IfcSanitaryTerminalTypeEnum? PredefinedType { get; set; }
		public IfcSanitaryTerminal() : base()
		{
		}
		public IfcSanitaryTerminal(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcSanitaryTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcSanitaryTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSanitaryTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSanitaryTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcSanitaryTerminalTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcSanitaryTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSanitaryTerminalTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSanitaryTerminalType : IfcFlowTerminalType, Global.IfcSanitaryTerminalType
	{
		public virtual IfcSanitaryTerminalTypeEnum? PredefinedType { get; set; }
		public IfcSanitaryTerminalType() : base()
		{
		}
		public IfcSanitaryTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSanitaryTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSanitaryTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSanitaryTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSchedulingTime
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcEventTime
	/// ,IfcLagTime
	/// ,IfcResourceTime
	/// ,IfcTaskTime
	/// ,IfcWorkTime));
	/// Name : OPTIONAL IfcLabel;
	/// DataOrigin : OPTIONAL IfcDataOriginEnum;
	/// UserDefinedDataOrigin : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSchedulingTime : Ifc_Entity, Global.IfcSchedulingTime
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcDataOriginEnum? DataOrigin { get; set; }
		public virtual IfcLabel? UserDefinedDataOrigin { get; set; }
		public IfcSchedulingTime() : base()
		{
		}
		public IfcSchedulingTime(IfcLabel? Name, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin) : base ()
		{
			this.Name = Name;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DataOrigin,
				UserDefinedDataOrigin
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcDataOriginEnum? _DataOrigin
		{
			get
			{
				return DataOrigin;
			}
			set
			{
				if(value is IfcDataOriginEnum val)
				{
					DataOrigin = val;
				}
				else if(value == null)
				{
					DataOrigin = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedDataOrigin
		{
			get
			{
				return UserDefinedDataOrigin;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedDataOrigin = val;
				}
				else if(value == null)
				{
					UserDefinedDataOrigin = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSeamCurve
	/// SUBTYPE OF (IfcSurfaceCurve);
	/// WHERE
	/// TwoPCurves : SIZEOF(SELF\IfcSurfaceCurve.AssociatedGeometry) = 2;
	/// SameSurface : IfcAssociatedSurface(SELF\IfcSurfaceCurve.AssociatedGeometry[1]) = IfcAssociatedSurface(SELF\IfcSurfaceCurve.AssociatedGeometry[2]);
	/// END_ENTITY;
	/// <summary>
	public class IfcSeamCurve : IfcSurfaceCurve, Global.IfcSeamCurve
	{
		public IfcSeamCurve() : base()
		{
		}
		public IfcSeamCurve(IfcCurve? Curve3D, List<IfcPcurve>? AssociatedGeometry, IfcPreferredSurfaceCurveRepresentation? MasterRepresentation) : base (Curve3D, AssociatedGeometry, MasterRepresentation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Curve3D,
				AssociatedGeometry,
				MasterRepresentation
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSectionProperties
	/// SUBTYPE OF (IfcPreDefinedProperties);
	/// SectionType : IfcSectionTypeEnum;
	/// StartProfile : IfcProfileDef;
	/// EndProfile : OPTIONAL IfcProfileDef;
	/// END_ENTITY;
	/// <summary>
	public class IfcSectionProperties : IfcPreDefinedProperties, Global.IfcSectionProperties
	{
		public virtual IfcSectionTypeEnum? SectionType { get; set; }
		public virtual IfcProfileDef? StartProfile { get; set; }
		public virtual IfcProfileDef? EndProfile { get; set; }
		public IfcSectionProperties() : base()
		{
		}
		public IfcSectionProperties(IfcSectionTypeEnum? SectionType, IfcProfileDef? StartProfile, IfcProfileDef? EndProfile) : base ()
		{
			this.SectionType = SectionType;
			this.StartProfile = StartProfile;
			this.EndProfile = EndProfile;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SectionType,
				StartProfile,
				EndProfile
			};
		}
		public virtual Global.IfcSectionTypeEnum? _SectionType
		{
			get
			{
				return SectionType;
			}
			set
			{
				if(value is IfcSectionTypeEnum val)
				{
					SectionType = val;
				}
				else if(value == null)
				{
					SectionType = null;
				}
			}
		}
		public virtual Global.IfcProfileDef? _StartProfile
		{
			get
			{
				return StartProfile;
			}
			set
			{
				if(value is IfcProfileDef val)
				{
					StartProfile = val;
				}
				else if(value == null)
				{
					StartProfile = null;
				}
			}
		}
		public virtual Global.IfcProfileDef? _EndProfile
		{
			get
			{
				return EndProfile;
			}
			set
			{
				if(value is IfcProfileDef val)
				{
					EndProfile = val;
				}
				else if(value == null)
				{
					EndProfile = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSectionReinforcementProperties
	/// SUBTYPE OF (IfcPreDefinedProperties);
	/// LongitudinalStartPosition : IfcLengthMeasure;
	/// LongitudinalEndPosition : IfcLengthMeasure;
	/// TransversePosition : OPTIONAL IfcLengthMeasure;
	/// ReinforcementRole : IfcReinforcingBarRoleEnum;
	/// SectionDefinition : IfcSectionProperties;
	/// CrossSectionReinforcementDefinitions : SET [1:?] OF IfcReinforcementBarProperties;
	/// END_ENTITY;
	/// <summary>
	public class IfcSectionReinforcementProperties : IfcPreDefinedProperties, Global.IfcSectionReinforcementProperties
	{
		public virtual IfcLengthMeasure? LongitudinalStartPosition { get; set; }
		public virtual IfcLengthMeasure? LongitudinalEndPosition { get; set; }
		public virtual IfcLengthMeasure? TransversePosition { get; set; }
		public virtual IfcReinforcingBarRoleEnum? ReinforcementRole { get; set; }
		public virtual IfcSectionProperties? SectionDefinition { get; set; }
		public virtual List<IfcReinforcementBarProperties>? CrossSectionReinforcementDefinitions { get; set; }
		public IfcSectionReinforcementProperties() : base()
		{
		}
		public IfcSectionReinforcementProperties(IfcLengthMeasure? LongitudinalStartPosition, IfcLengthMeasure? LongitudinalEndPosition, IfcLengthMeasure? TransversePosition, IfcReinforcingBarRoleEnum? ReinforcementRole, IfcSectionProperties? SectionDefinition, List<IfcReinforcementBarProperties>? CrossSectionReinforcementDefinitions) : base ()
		{
			this.LongitudinalStartPosition = LongitudinalStartPosition;
			this.LongitudinalEndPosition = LongitudinalEndPosition;
			this.TransversePosition = TransversePosition;
			this.ReinforcementRole = ReinforcementRole;
			this.SectionDefinition = SectionDefinition;
			this.CrossSectionReinforcementDefinitions = CrossSectionReinforcementDefinitions;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				LongitudinalStartPosition,
				LongitudinalEndPosition,
				TransversePosition,
				ReinforcementRole,
				SectionDefinition,
				CrossSectionReinforcementDefinitions
			};
		}
		public virtual Global.IfcLengthMeasure? _LongitudinalStartPosition
		{
			get
			{
				return LongitudinalStartPosition;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					LongitudinalStartPosition = val;
				}
				else if(value == null)
				{
					LongitudinalStartPosition = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _LongitudinalEndPosition
		{
			get
			{
				return LongitudinalEndPosition;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					LongitudinalEndPosition = val;
				}
				else if(value == null)
				{
					LongitudinalEndPosition = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _TransversePosition
		{
			get
			{
				return TransversePosition;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					TransversePosition = val;
				}
				else if(value == null)
				{
					TransversePosition = null;
				}
			}
		}
		public virtual Global.IfcReinforcingBarRoleEnum? _ReinforcementRole
		{
			get
			{
				return ReinforcementRole;
			}
			set
			{
				if(value is IfcReinforcingBarRoleEnum val)
				{
					ReinforcementRole = val;
				}
				else if(value == null)
				{
					ReinforcementRole = null;
				}
			}
		}
		public virtual Global.IfcSectionProperties? _SectionDefinition
		{
			get
			{
				return SectionDefinition;
			}
			set
			{
				if(value is IfcSectionProperties val)
				{
					SectionDefinition = val;
				}
				else if(value == null)
				{
					SectionDefinition = null;
				}
			}
		}
		public virtual List<Global.IfcReinforcementBarProperties>? _CrossSectionReinforcementDefinitions
		{
			get
			{
				if(CrossSectionReinforcementDefinitions != null)
				{
					List<Global.IfcReinforcementBarProperties>? items = new List<Global.IfcReinforcementBarProperties>();
					foreach (IfcReinforcementBarProperties item in CrossSectionReinforcementDefinitions)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CrossSectionReinforcementDefinitions = null;
				}
				else
				{
					CrossSectionReinforcementDefinitions = new List<IfcReinforcementBarProperties>();
					foreach(var val in value)
					{
						if(val is IfcReinforcementBarProperties v)
						{
							CrossSectionReinforcementDefinitions.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSectionedSpine
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// SpineCurve : IfcCompositeCurve;
	/// CrossSections : LIST [2:?] OF IfcProfileDef;
	/// CrossSectionPositions : LIST [2:?] OF IfcAxis2Placement3D;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// WHERE
	/// CorrespondingSectionPositions : SIZEOF(CrossSections) = SIZEOF(CrossSectionPositions);
	/// ConsistentProfileTypes : SIZEOF(QUERY(temp <* CrossSections | CrossSections[1].ProfileType <> temp.ProfileType)) = 0;
	/// SpineCurveDim : SpineCurve.Dim = 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcSectionedSpine : IfcGeometricRepresentationItem, Global.IfcSectionedSpine
	{
		public virtual IfcCompositeCurve? SpineCurve { get; set; }
		public virtual List<IfcProfileDef>? CrossSections { get; set; }
		public virtual List<IfcAxis2Placement3D>? CrossSectionPositions { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcSectionedSpine() : base()
		{
		}
		public IfcSectionedSpine(IfcCompositeCurve? SpineCurve, List<IfcProfileDef>? CrossSections, List<IfcAxis2Placement3D>? CrossSectionPositions) : base ()
		{
			this.SpineCurve = SpineCurve;
			this.CrossSections = CrossSections;
			this.CrossSectionPositions = CrossSectionPositions;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SpineCurve,
				CrossSections,
				CrossSectionPositions
			};
		}
		public virtual Global.IfcCompositeCurve? _SpineCurve
		{
			get
			{
				return SpineCurve;
			}
			set
			{
				if(value is IfcCompositeCurve val)
				{
					SpineCurve = val;
				}
				else if(value == null)
				{
					SpineCurve = null;
				}
			}
		}
		public virtual List<Global.IfcProfileDef>? _CrossSections
		{
			get
			{
				if(CrossSections != null)
				{
					List<Global.IfcProfileDef>? items = new List<Global.IfcProfileDef>();
					foreach (IfcProfileDef item in CrossSections)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CrossSections = null;
				}
				else
				{
					CrossSections = new List<IfcProfileDef>();
					foreach(var val in value)
					{
						if(val is IfcProfileDef v)
						{
							CrossSections.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcAxis2Placement3D>? _CrossSectionPositions
		{
			get
			{
				if(CrossSectionPositions != null)
				{
					List<Global.IfcAxis2Placement3D>? items = new List<Global.IfcAxis2Placement3D>();
					foreach (IfcAxis2Placement3D item in CrossSectionPositions)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CrossSectionPositions = null;
				}
				else
				{
					CrossSectionPositions = new List<IfcAxis2Placement3D>();
					foreach(var val in value)
					{
						if(val is IfcAxis2Placement3D v)
						{
							CrossSectionPositions.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSensor
	/// SUBTYPE OF (IfcDistributionControlElement);
	/// PredefinedType : OPTIONAL IfcSensorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSensorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSensorTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSENSORTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSensor : IfcDistributionControlElement, Global.IfcSensor
	{
		public virtual IfcSensorTypeEnum? PredefinedType { get; set; }
		public IfcSensor() : base()
		{
		}
		public IfcSensor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcSensorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcSensorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSensorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSensorType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcSensorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcSensorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSensorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSensorType : IfcDistributionControlElementType, Global.IfcSensorType
	{
		public virtual IfcSensorTypeEnum? PredefinedType { get; set; }
		public IfcSensorType() : base()
		{
		}
		public IfcSensorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSensorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSensorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSensorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcShadingDevice
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcShadingDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcShadingDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcShadingDeviceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSHADINGDEVICETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcShadingDevice : IfcBuildingElement, Global.IfcShadingDevice
	{
		public virtual IfcShadingDeviceTypeEnum? PredefinedType { get; set; }
		public IfcShadingDevice() : base()
		{
		}
		public IfcShadingDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcShadingDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcShadingDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcShadingDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcShadingDeviceType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcShadingDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcShadingDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcShadingDeviceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcShadingDeviceType : IfcBuildingElementType, Global.IfcShadingDeviceType
	{
		public virtual IfcShadingDeviceTypeEnum? PredefinedType { get; set; }
		public IfcShadingDeviceType() : base()
		{
		}
		public IfcShadingDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcShadingDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcShadingDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcShadingDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcShapeAspect;
	/// ShapeRepresentations : LIST [1:?] OF IfcShapeModel;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// ProductDefinitional : IfcLogical;
	/// PartOfProductDefinitionShape : OPTIONAL IfcProductRepresentationSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcShapeAspect : Ifc_Entity, Global.IfcShapeAspect
	{
		public virtual List<IfcShapeModel>? ShapeRepresentations { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcLogical? ProductDefinitional { get; set; }
		public virtual IfcProductRepresentationSelect? PartOfProductDefinitionShape { get; set; }
		public IfcShapeAspect() : base()
		{
		}
		public IfcShapeAspect(List<IfcShapeModel>? ShapeRepresentations, IfcLabel? Name, IfcText? Description, IfcLogical? ProductDefinitional, IfcProductRepresentationSelect? PartOfProductDefinitionShape) : base ()
		{
			this.ShapeRepresentations = ShapeRepresentations;
			this.Name = Name;
			this.Description = Description;
			this.ProductDefinitional = ProductDefinitional;
			this.PartOfProductDefinitionShape = PartOfProductDefinitionShape;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ShapeRepresentations,
				Name,
				Description,
				ProductDefinitional,
				PartOfProductDefinitionShape
			};
		}
		public virtual List<Global.IfcShapeModel>? _ShapeRepresentations
		{
			get
			{
				if(ShapeRepresentations != null)
				{
					List<Global.IfcShapeModel>? items = new List<Global.IfcShapeModel>();
					foreach (IfcShapeModel item in ShapeRepresentations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ShapeRepresentations = null;
				}
				else
				{
					ShapeRepresentations = new List<IfcShapeModel>();
					foreach(var val in value)
					{
						if(val is IfcShapeModel v)
						{
							ShapeRepresentations.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcLogical? _ProductDefinitional
		{
			get
			{
				return ProductDefinitional;
			}
			set
			{
				if(value is IfcLogical val)
				{
					ProductDefinitional = val;
				}
				else if(value == null)
				{
					ProductDefinitional = null;
				}
			}
		}
		public virtual Global.IfcProductRepresentationSelect? _PartOfProductDefinitionShape
		{
			get
			{
				return PartOfProductDefinitionShape;
			}
			set
			{
				if(value is IfcProductRepresentationSelect val)
				{
					PartOfProductDefinitionShape = val;
				}
				else if(value == null)
				{
					PartOfProductDefinitionShape = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcShapeModel
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcShapeRepresentation
	/// ,IfcTopologyRepresentation))
	/// SUBTYPE OF (IfcRepresentation);
	/// INVERSE
	/// OfShapeAspect : SET [0:1] OF IfcShapeAspect FOR ShapeRepresentations;
	/// WHERE
	/// WR11 : (SIZEOF(SELF\IfcRepresentation.OfProductRepresentation) = 1) XOR
	/// (SIZEOF(SELF\IfcRepresentation.RepresentationMap) = 1) XOR
	/// (SIZEOF(OfShapeAspect) = 1);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcShapeModel : IfcRepresentation, Global.IfcShapeModel
	{
		public List<IfcShapeAspect>? OfShapeAspect {get{return Model?.GetItems<IfcShapeAspect>().Where(x => x.ShapeRepresentations != null && x.ShapeRepresentations.Contains(this)).ToList();}}
		public IfcShapeModel() : base()
		{
		}
		public IfcShapeModel(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
		public virtual List<Global.IfcShapeAspect>? _OfShapeAspect
		{
			get
			{
				if(OfShapeAspect != null)
				{
					List<Global.IfcShapeAspect>? items = new List<Global.IfcShapeAspect>();
					foreach (IfcShapeAspect item in OfShapeAspect)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcShapeRepresentation
	/// SUBTYPE OF (IfcShapeModel);
	/// WHERE
	/// CorrectContext : 'IFC4.IFCGEOMETRICREPRESENTATIONCONTEXT'
	/// IN TYPEOF(SELF\IfcRepresentation.ContextOfItems);
	/// NoTopologicalItem : SIZEOF(QUERY(temp <* Items |
	/// ('IFC4.IFCTOPOLOGICALREPRESENTATIONITEM' IN TYPEOF(temp))
	/// AND (NOT(SIZEOF(
	/// ['IFC4.IFCVERTEXPOINT',
	/// 'IFC4.IFCEDGECURVE',
	/// 'IFC4.IFCFACESURFACE'] * TYPEOF(temp)) = 1))
	/// )) = 0;
	/// HasRepresentationType : EXISTS(SELF\IfcRepresentation.RepresentationType);
	/// HasRepresentationIdentifier : EXISTS(SELF\IfcRepresentation.RepresentationIdentifier);
	/// CorrectItemsForType : IfcShapeRepresentationTypes(SELF\IfcRepresentation.RepresentationType, SELF\IfcRepresentation.Items);
	/// END_ENTITY;
	/// <summary>
	public class IfcShapeRepresentation : IfcShapeModel, Global.IfcShapeRepresentation
	{
		public IfcShapeRepresentation() : base()
		{
		}
		public IfcShapeRepresentation(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
	}
	/// <summary>
	/// ENTITY IfcShellBasedSurfaceModel
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// SbsmBoundary : SET [1:?] OF IfcShell;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcShellBasedSurfaceModel : IfcGeometricRepresentationItem, Global.IfcShellBasedSurfaceModel
	{
		public virtual List<IfcShell>? SbsmBoundary { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcShellBasedSurfaceModel() : base()
		{
		}
		public IfcShellBasedSurfaceModel(List<IfcShell>? SbsmBoundary) : base ()
		{
			this.SbsmBoundary = SbsmBoundary;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SbsmBoundary
			};
		}
		public virtual List<Global.IfcShell>? _SbsmBoundary
		{
			get
			{
				if(SbsmBoundary != null)
				{
					List<Global.IfcShell>? items = new List<Global.IfcShell>();
					foreach (IfcShell item in SbsmBoundary)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SbsmBoundary = null;
				}
				else
				{
					SbsmBoundary = new List<IfcShell>();
					foreach(var val in value)
					{
						if(val is IfcShell v)
						{
							SbsmBoundary.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSimpleProperty
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPropertyBoundedValue
	/// ,IfcPropertyEnumeratedValue
	/// ,IfcPropertyListValue
	/// ,IfcPropertyReferenceValue
	/// ,IfcPropertySingleValue
	/// ,IfcPropertyTableValue))
	/// SUBTYPE OF (IfcProperty);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSimpleProperty : IfcProperty, Global.IfcSimpleProperty
	{
		public IfcSimpleProperty() : base()
		{
		}
		public IfcSimpleProperty(IfcIdentifier? Name, IfcText? Description) : base (Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSimplePropertyTemplate
	/// SUBTYPE OF (IfcPropertyTemplate);
	/// TemplateType : OPTIONAL IfcSimplePropertyTemplateTypeEnum;
	/// PrimaryMeasureType : OPTIONAL IfcLabel;
	/// SecondaryMeasureType : OPTIONAL IfcLabel;
	/// Enumerators : OPTIONAL IfcPropertyEnumeration;
	/// PrimaryUnit : OPTIONAL IfcUnit;
	/// SecondaryUnit : OPTIONAL IfcUnit;
	/// Expression : OPTIONAL IfcLabel;
	/// AccessState : OPTIONAL IfcStateEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcSimplePropertyTemplate : IfcPropertyTemplate, Global.IfcSimplePropertyTemplate
	{
		public virtual IfcSimplePropertyTemplateTypeEnum? TemplateType { get; set; }
		public virtual IfcLabel? PrimaryMeasureType { get; set; }
		public virtual IfcLabel? SecondaryMeasureType { get; set; }
		public virtual IfcPropertyEnumeration? Enumerators { get; set; }
		public virtual IfcUnit? PrimaryUnit { get; set; }
		public virtual IfcUnit? SecondaryUnit { get; set; }
		public virtual IfcLabel? Expression { get; set; }
		public virtual IfcStateEnum? AccessState { get; set; }
		public IfcSimplePropertyTemplate() : base()
		{
		}
		public IfcSimplePropertyTemplate(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcSimplePropertyTemplateTypeEnum? TemplateType, IfcLabel? PrimaryMeasureType, IfcLabel? SecondaryMeasureType, IfcPropertyEnumeration? Enumerators, IfcUnit? PrimaryUnit, IfcUnit? SecondaryUnit, IfcLabel? Expression, IfcStateEnum? AccessState) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.TemplateType = TemplateType;
			this.PrimaryMeasureType = PrimaryMeasureType;
			this.SecondaryMeasureType = SecondaryMeasureType;
			this.Enumerators = Enumerators;
			this.PrimaryUnit = PrimaryUnit;
			this.SecondaryUnit = SecondaryUnit;
			this.Expression = Expression;
			this.AccessState = AccessState;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				TemplateType,
				PrimaryMeasureType,
				SecondaryMeasureType,
				Enumerators,
				PrimaryUnit,
				SecondaryUnit,
				Expression,
				AccessState
			};
		}
		public virtual Global.IfcSimplePropertyTemplateTypeEnum? _TemplateType
		{
			get
			{
				return TemplateType;
			}
			set
			{
				if(value is IfcSimplePropertyTemplateTypeEnum val)
				{
					TemplateType = val;
				}
				else if(value == null)
				{
					TemplateType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _PrimaryMeasureType
		{
			get
			{
				return PrimaryMeasureType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					PrimaryMeasureType = val;
				}
				else if(value == null)
				{
					PrimaryMeasureType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _SecondaryMeasureType
		{
			get
			{
				return SecondaryMeasureType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					SecondaryMeasureType = val;
				}
				else if(value == null)
				{
					SecondaryMeasureType = null;
				}
			}
		}
		public virtual Global.IfcPropertyEnumeration? _Enumerators
		{
			get
			{
				return Enumerators;
			}
			set
			{
				if(value is IfcPropertyEnumeration val)
				{
					Enumerators = val;
				}
				else if(value == null)
				{
					Enumerators = null;
				}
			}
		}
		public virtual Global.IfcUnit? _PrimaryUnit
		{
			get
			{
				return PrimaryUnit;
			}
			set
			{
				if(value is IfcUnit val)
				{
					PrimaryUnit = val;
				}
				else if(value == null)
				{
					PrimaryUnit = null;
				}
			}
		}
		public virtual Global.IfcUnit? _SecondaryUnit
		{
			get
			{
				return SecondaryUnit;
			}
			set
			{
				if(value is IfcUnit val)
				{
					SecondaryUnit = val;
				}
				else if(value == null)
				{
					SecondaryUnit = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Expression
		{
			get
			{
				return Expression;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Expression = val;
				}
				else if(value == null)
				{
					Expression = null;
				}
			}
		}
		public virtual Global.IfcStateEnum? _AccessState
		{
			get
			{
				return AccessState;
			}
			set
			{
				if(value is IfcStateEnum val)
				{
					AccessState = val;
				}
				else if(value == null)
				{
					AccessState = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSite
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// RefLatitude : OPTIONAL IfcCompoundPlaneAngleMeasure;
	/// RefLongitude : OPTIONAL IfcCompoundPlaneAngleMeasure;
	/// RefElevation : OPTIONAL IfcLengthMeasure;
	/// LandTitleNumber : OPTIONAL IfcLabel;
	/// SiteAddress : OPTIONAL IfcPostalAddress;
	/// END_ENTITY;
	/// <summary>
	public class IfcSite : IfcSpatialStructureElement, Global.IfcSite
	{
		public virtual IfcCompoundPlaneAngleMeasure? RefLatitude { get; set; }
		public virtual IfcCompoundPlaneAngleMeasure? RefLongitude { get; set; }
		public virtual IfcLengthMeasure? RefElevation { get; set; }
		public virtual IfcLabel? LandTitleNumber { get; set; }
		public virtual IfcPostalAddress? SiteAddress { get; set; }
		public IfcSite() : base()
		{
		}
		public IfcSite(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcElementCompositionEnum? CompositionType, IfcCompoundPlaneAngleMeasure? RefLatitude, IfcCompoundPlaneAngleMeasure? RefLongitude, IfcLengthMeasure? RefElevation, IfcLabel? LandTitleNumber, IfcPostalAddress? SiteAddress) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.RefLatitude = RefLatitude;
			this.RefLongitude = RefLongitude;
			this.RefElevation = RefElevation;
			this.LandTitleNumber = LandTitleNumber;
			this.SiteAddress = SiteAddress;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				CompositionType,
				RefLatitude,
				RefLongitude,
				RefElevation,
				LandTitleNumber,
				SiteAddress
			};
		}
		public virtual Global.IfcCompoundPlaneAngleMeasure? _RefLatitude
		{
			get
			{
				return RefLatitude;
			}
			set
			{
				if(value is IfcCompoundPlaneAngleMeasure val)
				{
					RefLatitude = val;
				}
				else if(value == null)
				{
					RefLatitude = null;
				}
			}
		}
		public virtual Global.IfcCompoundPlaneAngleMeasure? _RefLongitude
		{
			get
			{
				return RefLongitude;
			}
			set
			{
				if(value is IfcCompoundPlaneAngleMeasure val)
				{
					RefLongitude = val;
				}
				else if(value == null)
				{
					RefLongitude = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _RefElevation
		{
			get
			{
				return RefElevation;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					RefElevation = val;
				}
				else if(value == null)
				{
					RefElevation = null;
				}
			}
		}
		public virtual Global.IfcLabel? _LandTitleNumber
		{
			get
			{
				return LandTitleNumber;
			}
			set
			{
				if(value is IfcLabel val)
				{
					LandTitleNumber = val;
				}
				else if(value == null)
				{
					LandTitleNumber = null;
				}
			}
		}
		public virtual Global.IfcPostalAddress? _SiteAddress
		{
			get
			{
				return SiteAddress;
			}
			set
			{
				if(value is IfcPostalAddress val)
				{
					SiteAddress = val;
				}
				else if(value == null)
				{
					SiteAddress = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSlab
	/// SUPERTYPE OF (ONEOF
	/// (IfcSlabElementedCase
	/// ,IfcSlabStandardCase))
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcSlabTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSlabTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSlabTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSLABTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSlab : IfcBuildingElement, Global.IfcSlab
	{
		public virtual IfcSlabTypeEnum? PredefinedType { get; set; }
		public IfcSlab() : base()
		{
		}
		public IfcSlab(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcSlabTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcSlabTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSlabTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSlabElementedCase
	/// SUBTYPE OF (IfcSlab);
	/// WHERE
	/// HasDecomposition : HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) > 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcSlabElementedCase : IfcSlab, Global.IfcSlabElementedCase
	{
		public IfcSlabElementedCase() : base()
		{
		}
		public IfcSlabElementedCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcSlabTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSlabStandardCase
	/// SUBTYPE OF (IfcSlab);
	/// WHERE
	/// HasMaterialLayerSetusage : SIZEOF (QUERY(temp <* USEDIN(SELF, 'IFC4.IFCRELASSOCIATES.RELATEDOBJECTS') |
	/// ('IFC4.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)) AND
	/// ('IFC4.IFCMATERIALLAYERSETUSAGE' IN TYPEOF(temp.RelatingMaterial))
	/// )) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcSlabStandardCase : IfcSlab, Global.IfcSlabStandardCase
	{
		public IfcSlabStandardCase() : base()
		{
		}
		public IfcSlabStandardCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcSlabTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSlabType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcSlabTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcSlabTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSlabTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSlabType : IfcBuildingElementType, Global.IfcSlabType
	{
		public virtual IfcSlabTypeEnum? PredefinedType { get; set; }
		public IfcSlabType() : base()
		{
		}
		public IfcSlabType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSlabTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSlabTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSlabTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSlippageConnectionCondition
	/// SUBTYPE OF (IfcStructuralConnectionCondition);
	/// SlippageX : OPTIONAL IfcLengthMeasure;
	/// SlippageY : OPTIONAL IfcLengthMeasure;
	/// SlippageZ : OPTIONAL IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcSlippageConnectionCondition : IfcStructuralConnectionCondition, Global.IfcSlippageConnectionCondition
	{
		public virtual IfcLengthMeasure? SlippageX { get; set; }
		public virtual IfcLengthMeasure? SlippageY { get; set; }
		public virtual IfcLengthMeasure? SlippageZ { get; set; }
		public IfcSlippageConnectionCondition() : base()
		{
		}
		public IfcSlippageConnectionCondition(IfcLabel? Name, IfcLengthMeasure? SlippageX, IfcLengthMeasure? SlippageY, IfcLengthMeasure? SlippageZ) : base (Name)
		{
			this.SlippageX = SlippageX;
			this.SlippageY = SlippageY;
			this.SlippageZ = SlippageZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				SlippageX,
				SlippageY,
				SlippageZ
			};
		}
		public virtual Global.IfcLengthMeasure? _SlippageX
		{
			get
			{
				return SlippageX;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					SlippageX = val;
				}
				else if(value == null)
				{
					SlippageX = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _SlippageY
		{
			get
			{
				return SlippageY;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					SlippageY = val;
				}
				else if(value == null)
				{
					SlippageY = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _SlippageZ
		{
			get
			{
				return SlippageZ;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					SlippageZ = val;
				}
				else if(value == null)
				{
					SlippageZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSolarDevice
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcSolarDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSolarDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSolarDeviceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSOLARDEVICETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSolarDevice : IfcEnergyConversionDevice, Global.IfcSolarDevice
	{
		public virtual IfcSolarDeviceTypeEnum? PredefinedType { get; set; }
		public IfcSolarDevice() : base()
		{
		}
		public IfcSolarDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcSolarDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcSolarDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSolarDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSolarDeviceType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcSolarDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcSolarDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSolarDeviceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSolarDeviceType : IfcEnergyConversionDeviceType, Global.IfcSolarDeviceType
	{
		public virtual IfcSolarDeviceTypeEnum? PredefinedType { get; set; }
		public IfcSolarDeviceType() : base()
		{
		}
		public IfcSolarDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSolarDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSolarDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSolarDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSolidModel
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCsgSolid
	/// ,IfcManifoldSolidBrep
	/// ,IfcSweptAreaSolid
	/// ,IfcSweptDiskSolid))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSolidModel : IfcGeometricRepresentationItem, IfcBooleanOperand, IfcSolidOrShell, Global.IfcSolidModel
	{
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcSolidModel() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpace
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// PredefinedType : OPTIONAL IfcSpaceTypeEnum;
	/// ElevationWithFlooring : OPTIONAL IfcLengthMeasure;
	/// INVERSE
	/// HasCoverings : SET [0:?] OF IfcRelCoversSpaces FOR RelatingSpace;
	/// BoundedBy : SET [0:?] OF IfcRelSpaceBoundary FOR RelatingSpace;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSpaceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSpaceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSPACETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSpace : IfcSpatialStructureElement, IfcSpaceBoundarySelect, Global.IfcSpace
	{
		public virtual IfcSpaceTypeEnum? PredefinedType { get; set; }
		public virtual IfcLengthMeasure? ElevationWithFlooring { get; set; }
		public List<IfcRelCoversSpaces>? HasCoverings {get{return Model?.GetItems<IfcRelCoversSpaces>().Where(x => x.RelatingSpace != null && x.RelatingSpace == this).ToList();}}
		public List<IfcRelSpaceBoundary>? BoundedBy {get{return Model?.GetItems<IfcRelSpaceBoundary>().Where(x => x.RelatingSpace != null && x.RelatingSpace == this).ToList();}}
		public IfcSpace() : base()
		{
		}
		public IfcSpace(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcElementCompositionEnum? CompositionType, IfcSpaceTypeEnum? PredefinedType, IfcLengthMeasure? ElevationWithFlooring) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.PredefinedType = PredefinedType;
			this.ElevationWithFlooring = ElevationWithFlooring;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				CompositionType,
				PredefinedType,
				ElevationWithFlooring
			};
		}
		public virtual Global.IfcSpaceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSpaceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _ElevationWithFlooring
		{
			get
			{
				return ElevationWithFlooring;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					ElevationWithFlooring = val;
				}
				else if(value == null)
				{
					ElevationWithFlooring = null;
				}
			}
		}
		public virtual List<Global.IfcRelCoversSpaces>? _HasCoverings
		{
			get
			{
				if(HasCoverings != null)
				{
					List<Global.IfcRelCoversSpaces>? items = new List<Global.IfcRelCoversSpaces>();
					foreach (IfcRelCoversSpaces item in HasCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelSpaceBoundary>? _BoundedBy
		{
			get
			{
				if(BoundedBy != null)
				{
					List<Global.IfcRelSpaceBoundary>? items = new List<Global.IfcRelSpaceBoundary>();
					foreach (IfcRelSpaceBoundary item in BoundedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpaceHeater
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcSpaceHeaterTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSpaceHeaterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSpaceHeaterTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSPACEHEATERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSpaceHeater : IfcFlowTerminal, Global.IfcSpaceHeater
	{
		public virtual IfcSpaceHeaterTypeEnum? PredefinedType { get; set; }
		public IfcSpaceHeater() : base()
		{
		}
		public IfcSpaceHeater(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcSpaceHeaterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcSpaceHeaterTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSpaceHeaterTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpaceHeaterType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcSpaceHeaterTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcSpaceHeaterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSpaceHeaterTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSpaceHeaterType : IfcFlowTerminalType, Global.IfcSpaceHeaterType
	{
		public virtual IfcSpaceHeaterTypeEnum? PredefinedType { get; set; }
		public IfcSpaceHeaterType() : base()
		{
		}
		public IfcSpaceHeaterType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSpaceHeaterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSpaceHeaterTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSpaceHeaterTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpaceType
	/// SUBTYPE OF (IfcSpatialStructureElementType);
	/// PredefinedType : IfcSpaceTypeEnum;
	/// LongName : OPTIONAL IfcLabel;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcSpaceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSpaceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcSpatialElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSpaceType : IfcSpatialStructureElementType, Global.IfcSpaceType
	{
		public virtual IfcSpaceTypeEnum? PredefinedType { get; set; }
		public virtual IfcLabel? LongName { get; set; }
		public IfcSpaceType() : base()
		{
		}
		public IfcSpaceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSpaceTypeEnum? PredefinedType, IfcLabel? LongName) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
			this.LongName = LongName;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType,
				LongName
			};
		}
		public virtual Global.IfcSpaceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSpaceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _LongName
		{
			get
			{
				return LongName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					LongName = val;
				}
				else if(value == null)
				{
					LongName = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpatialElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcExternalSpatialStructureElement
	/// ,IfcSpatialStructureElement
	/// ,IfcSpatialZone))
	/// SUBTYPE OF (IfcProduct);
	/// LongName : OPTIONAL IfcLabel;
	/// INVERSE
	/// ContainsElements : SET [0:?] OF IfcRelContainedInSpatialStructure FOR RelatingStructure;
	/// ServicedBySystems : SET [0:?] OF IfcRelServicesBuildings FOR RelatedBuildings;
	/// ReferencesElements : SET [0:?] OF IfcRelReferencedInSpatialStructure FOR RelatingStructure;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSpatialElement : IfcProduct, Global.IfcSpatialElement
	{
		public virtual IfcLabel? LongName { get; set; }
		public List<IfcRelContainedInSpatialStructure>? ContainsElements {get{return Model?.GetItems<IfcRelContainedInSpatialStructure>().Where(x => x.RelatingStructure != null && x.RelatingStructure == this).ToList();}}
		public List<IfcRelServicesBuildings>? ServicedBySystems {get{return Model?.GetItems<IfcRelServicesBuildings>().Where(x => x.RelatedBuildings != null && x.RelatedBuildings.Contains(this)).ToList();}}
		public List<IfcRelReferencedInSpatialStructure>? ReferencesElements {get{return Model?.GetItems<IfcRelReferencedInSpatialStructure>().Where(x => x.RelatingStructure != null && x.RelatingStructure == this).ToList();}}
		public IfcSpatialElement() : base()
		{
		}
		public IfcSpatialElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.LongName = LongName;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName
			};
		}
		public virtual Global.IfcLabel? _LongName
		{
			get
			{
				return LongName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					LongName = val;
				}
				else if(value == null)
				{
					LongName = null;
				}
			}
		}
		public virtual List<Global.IfcRelContainedInSpatialStructure>? _ContainsElements
		{
			get
			{
				if(ContainsElements != null)
				{
					List<Global.IfcRelContainedInSpatialStructure>? items = new List<Global.IfcRelContainedInSpatialStructure>();
					foreach (IfcRelContainedInSpatialStructure item in ContainsElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelServicesBuildings>? _ServicedBySystems
		{
			get
			{
				if(ServicedBySystems != null)
				{
					List<Global.IfcRelServicesBuildings>? items = new List<Global.IfcRelServicesBuildings>();
					foreach (IfcRelServicesBuildings item in ServicedBySystems)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelReferencedInSpatialStructure>? _ReferencesElements
		{
			get
			{
				if(ReferencesElements != null)
				{
					List<Global.IfcRelReferencedInSpatialStructure>? items = new List<Global.IfcRelReferencedInSpatialStructure>();
					foreach (IfcRelReferencedInSpatialStructure item in ReferencesElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpatialElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcSpatialStructureElementType
	/// ,IfcSpatialZoneType))
	/// SUBTYPE OF (IfcTypeProduct);
	/// ElementType : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSpatialElementType : IfcTypeProduct, Global.IfcSpatialElementType
	{
		public virtual IfcLabel? ElementType { get; set; }
		public IfcSpatialElementType() : base()
		{
		}
		public IfcSpatialElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag)
		{
			this.ElementType = ElementType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
		public virtual Global.IfcLabel? _ElementType
		{
			get
			{
				return ElementType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ElementType = val;
				}
				else if(value == null)
				{
					ElementType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpatialStructureElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuilding
	/// ,IfcBuildingStorey
	/// ,IfcSite
	/// ,IfcSpace))
	/// SUBTYPE OF (IfcSpatialElement);
	/// CompositionType : OPTIONAL IfcElementCompositionEnum;
	/// WHERE
	/// WR41 : (HIINDEX(SELF\IfcObjectDefinition.Decomposes) = 1)
	/// AND
	/// ('IFC4.IFCRELAGGREGATES' IN TYPEOF(SELF\IfcObjectDefinition.Decomposes[1]))
	/// AND
	/// (('IFC4.IFCPROJECT' IN TYPEOF (SELF\IfcObjectDefinition.Decomposes[1].RelatingObject)) OR
	/// ('IFC4.IFCSPATIALSTRUCTUREELEMENT' IN TYPEOF (SELF\IfcObjectDefinition.Decomposes[1].RelatingObject))
	/// );
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSpatialStructureElement : IfcSpatialElement, Global.IfcSpatialStructureElement
	{
		public virtual IfcElementCompositionEnum? CompositionType { get; set; }
		public IfcSpatialStructureElement() : base()
		{
		}
		public IfcSpatialStructureElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcElementCompositionEnum? CompositionType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName)
		{
			this.CompositionType = CompositionType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				CompositionType
			};
		}
		public virtual Global.IfcElementCompositionEnum? _CompositionType
		{
			get
			{
				return CompositionType;
			}
			set
			{
				if(value is IfcElementCompositionEnum val)
				{
					CompositionType = val;
				}
				else if(value == null)
				{
					CompositionType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpatialStructureElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcSpaceType))
	/// SUBTYPE OF (IfcSpatialElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSpatialStructureElementType : IfcSpatialElementType, Global.IfcSpatialStructureElementType
	{
		public IfcSpatialStructureElementType() : base()
		{
		}
		public IfcSpatialStructureElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSpatialZone
	/// SUBTYPE OF (IfcSpatialElement);
	/// PredefinedType : OPTIONAL IfcSpatialZoneTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSpatialZoneTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSpatialZoneTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSPATIALZONETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSpatialZone : IfcSpatialElement, Global.IfcSpatialZone
	{
		public virtual IfcSpatialZoneTypeEnum? PredefinedType { get; set; }
		public IfcSpatialZone() : base()
		{
		}
		public IfcSpatialZone(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcSpatialZoneTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				PredefinedType
			};
		}
		public virtual Global.IfcSpatialZoneTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSpatialZoneTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpatialZoneType
	/// SUBTYPE OF (IfcSpatialElementType);
	/// PredefinedType : IfcSpatialZoneTypeEnum;
	/// LongName : OPTIONAL IfcLabel;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcSpatialZoneTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSpatialZoneTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcSpatialElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSpatialZoneType : IfcSpatialElementType, Global.IfcSpatialZoneType
	{
		public virtual IfcSpatialZoneTypeEnum? PredefinedType { get; set; }
		public virtual IfcLabel? LongName { get; set; }
		public IfcSpatialZoneType() : base()
		{
		}
		public IfcSpatialZoneType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSpatialZoneTypeEnum? PredefinedType, IfcLabel? LongName) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
			this.LongName = LongName;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType,
				LongName
			};
		}
		public virtual Global.IfcSpatialZoneTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSpatialZoneTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _LongName
		{
			get
			{
				return LongName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					LongName = val;
				}
				else if(value == null)
				{
					LongName = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSphere
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcSphere : IfcCsgPrimitive3D, Global.IfcSphere
	{
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public IfcSphere() : base()
		{
		}
		public IfcSphere(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? Radius) : base (Position)
		{
			this.Radius = Radius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				Radius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSphericalSurface
	/// SUBTYPE OF (IfcElementarySurface);
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcSphericalSurface : IfcElementarySurface, Global.IfcSphericalSurface
	{
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public IfcSphericalSurface() : base()
		{
		}
		public IfcSphericalSurface(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? Radius) : base (Position)
		{
			this.Radius = Radius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				Radius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStackTerminal
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcStackTerminalTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcStackTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcStackTerminalTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSTACKTERMINALTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcStackTerminal : IfcFlowTerminal, Global.IfcStackTerminal
	{
		public virtual IfcStackTerminalTypeEnum? PredefinedType { get; set; }
		public IfcStackTerminal() : base()
		{
		}
		public IfcStackTerminal(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcStackTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcStackTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStackTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStackTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcStackTerminalTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcStackTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcStackTerminalTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcStackTerminalType : IfcFlowTerminalType, Global.IfcStackTerminalType
	{
		public virtual IfcStackTerminalTypeEnum? PredefinedType { get; set; }
		public IfcStackTerminalType() : base()
		{
		}
		public IfcStackTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcStackTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcStackTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStackTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStair
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcStairTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcStairTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcStairTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSTAIRTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcStair : IfcBuildingElement, Global.IfcStair
	{
		public virtual IfcStairTypeEnum? PredefinedType { get; set; }
		public IfcStair() : base()
		{
		}
		public IfcStair(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcStairTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcStairTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStairTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStairFlight
	/// SUBTYPE OF (IfcBuildingElement);
	/// NumberOfRisers : OPTIONAL IfcInteger;
	/// NumberOfTreads : OPTIONAL IfcInteger;
	/// RiserHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// TreadLength : OPTIONAL IfcPositiveLengthMeasure;
	/// PredefinedType : OPTIONAL IfcStairFlightTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcStairFlightTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcStairFlightTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSTAIRFLIGHTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcStairFlight : IfcBuildingElement, Global.IfcStairFlight
	{
		public virtual IfcInteger? NumberOfRisers { get; set; }
		public virtual IfcInteger? NumberOfTreads { get; set; }
		public virtual IfcPositiveLengthMeasure? RiserHeight { get; set; }
		public virtual IfcPositiveLengthMeasure? TreadLength { get; set; }
		public virtual IfcStairFlightTypeEnum? PredefinedType { get; set; }
		public IfcStairFlight() : base()
		{
		}
		public IfcStairFlight(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcInteger? NumberOfRisers, IfcInteger? NumberOfTreads, IfcPositiveLengthMeasure? RiserHeight, IfcPositiveLengthMeasure? TreadLength, IfcStairFlightTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.NumberOfRisers = NumberOfRisers;
			this.NumberOfTreads = NumberOfTreads;
			this.RiserHeight = RiserHeight;
			this.TreadLength = TreadLength;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				NumberOfRisers,
				NumberOfTreads,
				RiserHeight,
				TreadLength,
				PredefinedType
			};
		}
		public virtual Global.IfcInteger? _NumberOfRisers
		{
			get
			{
				return NumberOfRisers;
			}
			set
			{
				if(value is IfcInteger val)
				{
					NumberOfRisers = val;
				}
				else if(value == null)
				{
					NumberOfRisers = null;
				}
			}
		}
		public virtual Global.IfcInteger? _NumberOfTreads
		{
			get
			{
				return NumberOfTreads;
			}
			set
			{
				if(value is IfcInteger val)
				{
					NumberOfTreads = val;
				}
				else if(value == null)
				{
					NumberOfTreads = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _RiserHeight
		{
			get
			{
				return RiserHeight;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					RiserHeight = val;
				}
				else if(value == null)
				{
					RiserHeight = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _TreadLength
		{
			get
			{
				return TreadLength;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					TreadLength = val;
				}
				else if(value == null)
				{
					TreadLength = null;
				}
			}
		}
		public virtual Global.IfcStairFlightTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStairFlightTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStairFlightType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcStairFlightTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcStairFlightTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcStairFlightTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcStairFlightType : IfcBuildingElementType, Global.IfcStairFlightType
	{
		public virtual IfcStairFlightTypeEnum? PredefinedType { get; set; }
		public IfcStairFlightType() : base()
		{
		}
		public IfcStairFlightType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcStairFlightTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcStairFlightTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStairFlightTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStairType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcStairTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcStairTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcStairTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcStairType : IfcBuildingElementType, Global.IfcStairType
	{
		public virtual IfcStairTypeEnum? PredefinedType { get; set; }
		public IfcStairType() : base()
		{
		}
		public IfcStairType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcStairTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcStairTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStairTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralAction
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralCurveAction
	/// ,IfcStructuralPointAction
	/// ,IfcStructuralSurfaceAction))
	/// SUBTYPE OF (IfcStructuralActivity);
	/// DestabilizingLoad : OPTIONAL IfcBoolean;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralAction : IfcStructuralActivity, Global.IfcStructuralAction
	{
		public virtual IfcBoolean? DestabilizingLoad { get; set; }
		public IfcStructuralAction() : base()
		{
		}
		public IfcStructuralAction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, IfcBoolean? DestabilizingLoad) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal)
		{
			this.DestabilizingLoad = DestabilizingLoad;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad
			};
		}
		public virtual Global.IfcBoolean? _DestabilizingLoad
		{
			get
			{
				return DestabilizingLoad;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					DestabilizingLoad = val;
				}
				else if(value == null)
				{
					DestabilizingLoad = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralActivity
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralAction
	/// ,IfcStructuralReaction))
	/// SUBTYPE OF (IfcProduct);
	/// AppliedLoad : IfcStructuralLoad;
	/// GlobalOrLocal : IfcGlobalOrLocalEnum;
	/// INVERSE
	/// AssignedToStructuralItem : SET [0:1] OF IfcRelConnectsStructuralActivity FOR RelatedStructuralActivity;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralActivity : IfcProduct, Global.IfcStructuralActivity
	{
		public virtual IfcStructuralLoad? AppliedLoad { get; set; }
		public virtual IfcGlobalOrLocalEnum? GlobalOrLocal { get; set; }
		public List<IfcRelConnectsStructuralActivity>? AssignedToStructuralItem {get{return Model?.GetItems<IfcRelConnectsStructuralActivity>().Where(x => x.RelatedStructuralActivity != null && x.RelatedStructuralActivity == this).ToList();}}
		public IfcStructuralActivity() : base()
		{
		}
		public IfcStructuralActivity(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal
			};
		}
		public virtual Global.IfcStructuralLoad? _AppliedLoad
		{
			get
			{
				return AppliedLoad;
			}
			set
			{
				if(value is IfcStructuralLoad val)
				{
					AppliedLoad = val;
				}
				else if(value == null)
				{
					AppliedLoad = null;
				}
			}
		}
		public virtual Global.IfcGlobalOrLocalEnum? _GlobalOrLocal
		{
			get
			{
				return GlobalOrLocal;
			}
			set
			{
				if(value is IfcGlobalOrLocalEnum val)
				{
					GlobalOrLocal = val;
				}
				else if(value == null)
				{
					GlobalOrLocal = null;
				}
			}
		}
		public virtual List<Global.IfcRelConnectsStructuralActivity>? _AssignedToStructuralItem
		{
			get
			{
				if(AssignedToStructuralItem != null)
				{
					List<Global.IfcRelConnectsStructuralActivity>? items = new List<Global.IfcRelConnectsStructuralActivity>();
					foreach (IfcRelConnectsStructuralActivity item in AssignedToStructuralItem)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralAnalysisModel
	/// SUBTYPE OF (IfcSystem);
	/// PredefinedType : IfcAnalysisModelTypeEnum;
	/// OrientationOf2DPlane : OPTIONAL IfcAxis2Placement3D;
	/// LoadedBy : OPTIONAL SET [1:?] OF IfcStructuralLoadGroup;
	/// HasResults : OPTIONAL SET [1:?] OF IfcStructuralResultGroup;
	/// SharedPlacement : OPTIONAL IfcObjectPlacement;
	/// WHERE
	/// HasObjectType : (PredefinedType <> IfcAnalysisModelTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralAnalysisModel : IfcSystem, Global.IfcStructuralAnalysisModel
	{
		public virtual IfcAnalysisModelTypeEnum? PredefinedType { get; set; }
		public virtual IfcAxis2Placement3D? OrientationOf2DPlane { get; set; }
		public virtual List<IfcStructuralLoadGroup>? LoadedBy { get; set; }
		public virtual List<IfcStructuralResultGroup>? HasResults { get; set; }
		public virtual IfcObjectPlacement? SharedPlacement { get; set; }
		public IfcStructuralAnalysisModel() : base()
		{
		}
		public IfcStructuralAnalysisModel(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcAnalysisModelTypeEnum? PredefinedType, IfcAxis2Placement3D? OrientationOf2DPlane, List<IfcStructuralLoadGroup>? LoadedBy, List<IfcStructuralResultGroup>? HasResults, IfcObjectPlacement? SharedPlacement) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.PredefinedType = PredefinedType;
			this.OrientationOf2DPlane = OrientationOf2DPlane;
			this.LoadedBy = LoadedBy;
			this.HasResults = HasResults;
			this.SharedPlacement = SharedPlacement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				PredefinedType,
				OrientationOf2DPlane,
				LoadedBy,
				HasResults,
				SharedPlacement
			};
		}
		public virtual Global.IfcAnalysisModelTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcAnalysisModelTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcAxis2Placement3D? _OrientationOf2DPlane
		{
			get
			{
				return OrientationOf2DPlane;
			}
			set
			{
				if(value is IfcAxis2Placement3D val)
				{
					OrientationOf2DPlane = val;
				}
				else if(value == null)
				{
					OrientationOf2DPlane = null;
				}
			}
		}
		public virtual List<Global.IfcStructuralLoadGroup>? _LoadedBy
		{
			get
			{
				if(LoadedBy != null)
				{
					List<Global.IfcStructuralLoadGroup>? items = new List<Global.IfcStructuralLoadGroup>();
					foreach (IfcStructuralLoadGroup item in LoadedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					LoadedBy = null;
				}
				else
				{
					LoadedBy = new List<IfcStructuralLoadGroup>();
					foreach(var val in value)
					{
						if(val is IfcStructuralLoadGroup v)
						{
							LoadedBy.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcStructuralResultGroup>? _HasResults
		{
			get
			{
				if(HasResults != null)
				{
					List<Global.IfcStructuralResultGroup>? items = new List<Global.IfcStructuralResultGroup>();
					foreach (IfcStructuralResultGroup item in HasResults)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasResults = null;
				}
				else
				{
					HasResults = new List<IfcStructuralResultGroup>();
					foreach(var val in value)
					{
						if(val is IfcStructuralResultGroup v)
						{
							HasResults.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcObjectPlacement? _SharedPlacement
		{
			get
			{
				return SharedPlacement;
			}
			set
			{
				if(value is IfcObjectPlacement val)
				{
					SharedPlacement = val;
				}
				else if(value == null)
				{
					SharedPlacement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralConnection
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralCurveConnection
	/// ,IfcStructuralPointConnection
	/// ,IfcStructuralSurfaceConnection))
	/// SUBTYPE OF (IfcStructuralItem);
	/// AppliedCondition : OPTIONAL IfcBoundaryCondition;
	/// INVERSE
	/// ConnectsStructuralMembers : SET [1:?] OF IfcRelConnectsStructuralMember FOR RelatedStructuralConnection;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralConnection : IfcStructuralItem, Global.IfcStructuralConnection
	{
		public virtual IfcBoundaryCondition? AppliedCondition { get; set; }
		public List<IfcRelConnectsStructuralMember>? ConnectsStructuralMembers {get{return Model?.GetItems<IfcRelConnectsStructuralMember>().Where(x => x.RelatedStructuralConnection != null && x.RelatedStructuralConnection == this).ToList();}}
		public IfcStructuralConnection() : base()
		{
		}
		public IfcStructuralConnection(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcBoundaryCondition? AppliedCondition) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.AppliedCondition = AppliedCondition;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedCondition
			};
		}
		public virtual Global.IfcBoundaryCondition? _AppliedCondition
		{
			get
			{
				return AppliedCondition;
			}
			set
			{
				if(value is IfcBoundaryCondition val)
				{
					AppliedCondition = val;
				}
				else if(value == null)
				{
					AppliedCondition = null;
				}
			}
		}
		public virtual List<Global.IfcRelConnectsStructuralMember>? _ConnectsStructuralMembers
		{
			get
			{
				if(ConnectsStructuralMembers != null)
				{
					List<Global.IfcRelConnectsStructuralMember>? items = new List<Global.IfcRelConnectsStructuralMember>();
					foreach (IfcRelConnectsStructuralMember item in ConnectsStructuralMembers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralConnectionCondition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcFailureConnectionCondition
	/// ,IfcSlippageConnectionCondition));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralConnectionCondition : Ifc_Entity, Global.IfcStructuralConnectionCondition
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcStructuralConnectionCondition() : base()
		{
		}
		public IfcStructuralConnectionCondition(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralCurveAction
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralLinearAction))
	/// SUBTYPE OF (IfcStructuralAction);
	/// ProjectedOrTrue : OPTIONAL IfcProjectedOrTrueLengthEnum;
	/// PredefinedType : IfcStructuralCurveActivityTypeEnum;
	/// WHERE
	/// ProjectedIsGlobal : (NOT EXISTS(ProjectedOrTrue)) OR
	/// ((ProjectedOrTrue <> PROJECTED_LENGTH) OR
	/// (SELF\IfcStructuralActivity.GlobalOrLocal = GLOBAL_COORDS));
	/// HasObjectType : (PredefinedType <> IfcStructuralCurveActivityTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// SuitablePredefinedType : PredefinedType <> IfcStructuralCurveActivityTypeEnum.EQUIDISTANT;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralCurveAction : IfcStructuralAction, Global.IfcStructuralCurveAction
	{
		public virtual IfcProjectedOrTrueLengthEnum? ProjectedOrTrue { get; set; }
		public virtual IfcStructuralCurveActivityTypeEnum? PredefinedType { get; set; }
		public IfcStructuralCurveAction() : base()
		{
		}
		public IfcStructuralCurveAction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, IfcBoolean? DestabilizingLoad, IfcProjectedOrTrueLengthEnum? ProjectedOrTrue, IfcStructuralCurveActivityTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad)
		{
			this.ProjectedOrTrue = ProjectedOrTrue;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad,
				ProjectedOrTrue,
				PredefinedType
			};
		}
		public virtual Global.IfcProjectedOrTrueLengthEnum? _ProjectedOrTrue
		{
			get
			{
				return ProjectedOrTrue;
			}
			set
			{
				if(value is IfcProjectedOrTrueLengthEnum val)
				{
					ProjectedOrTrue = val;
				}
				else if(value == null)
				{
					ProjectedOrTrue = null;
				}
			}
		}
		public virtual Global.IfcStructuralCurveActivityTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStructuralCurveActivityTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralCurveConnection
	/// SUBTYPE OF (IfcStructuralConnection);
	/// Axis : IfcDirection;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralCurveConnection : IfcStructuralConnection, Global.IfcStructuralCurveConnection
	{
		public virtual IfcDirection? Axis { get; set; }
		public IfcStructuralCurveConnection() : base()
		{
		}
		public IfcStructuralCurveConnection(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcBoundaryCondition? AppliedCondition, IfcDirection? Axis) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition)
		{
			this.Axis = Axis;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedCondition,
				Axis
			};
		}
		public virtual Global.IfcDirection? _Axis
		{
			get
			{
				return Axis;
			}
			set
			{
				if(value is IfcDirection val)
				{
					Axis = val;
				}
				else if(value == null)
				{
					Axis = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralCurveMember
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralCurveMemberVarying))
	/// SUBTYPE OF (IfcStructuralMember);
	/// PredefinedType : IfcStructuralCurveMemberTypeEnum;
	/// Axis : IfcDirection;
	/// WHERE
	/// HasObjectType : (PredefinedType <> IfcStructuralCurveMemberTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralCurveMember : IfcStructuralMember, Global.IfcStructuralCurveMember
	{
		public virtual IfcStructuralCurveMemberTypeEnum? PredefinedType { get; set; }
		public virtual IfcDirection? Axis { get; set; }
		public IfcStructuralCurveMember() : base()
		{
		}
		public IfcStructuralCurveMember(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralCurveMemberTypeEnum? PredefinedType, IfcDirection? Axis) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.PredefinedType = PredefinedType;
			this.Axis = Axis;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				PredefinedType,
				Axis
			};
		}
		public virtual Global.IfcStructuralCurveMemberTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStructuralCurveMemberTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcDirection? _Axis
		{
			get
			{
				return Axis;
			}
			set
			{
				if(value is IfcDirection val)
				{
					Axis = val;
				}
				else if(value == null)
				{
					Axis = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralCurveMemberVarying
	/// SUBTYPE OF (IfcStructuralCurveMember);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralCurveMemberVarying : IfcStructuralCurveMember, Global.IfcStructuralCurveMemberVarying
	{
		public IfcStructuralCurveMemberVarying() : base()
		{
		}
		public IfcStructuralCurveMemberVarying(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralCurveMemberTypeEnum? PredefinedType, IfcDirection? Axis) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, Axis)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				PredefinedType,
				Axis
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralCurveReaction
	/// SUBTYPE OF (IfcStructuralReaction);
	/// PredefinedType : IfcStructuralCurveActivityTypeEnum;
	/// WHERE
	/// HasObjectType : (PredefinedType <> IfcStructuralCurveActivityTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// SuitablePredefinedType : (PredefinedType <> IfcStructuralCurveActivityTypeEnum.SINUS) AND (PredefinedType <> IfcStructuralCurveActivityTypeEnum.PARABOLA);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralCurveReaction : IfcStructuralReaction, Global.IfcStructuralCurveReaction
	{
		public virtual IfcStructuralCurveActivityTypeEnum? PredefinedType { get; set; }
		public IfcStructuralCurveReaction() : base()
		{
		}
		public IfcStructuralCurveReaction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, IfcStructuralCurveActivityTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				PredefinedType
			};
		}
		public virtual Global.IfcStructuralCurveActivityTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStructuralCurveActivityTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralConnection
	/// ,IfcStructuralMember))
	/// SUBTYPE OF (IfcProduct);
	/// INVERSE
	/// AssignedStructuralActivity : SET [0:?] OF IfcRelConnectsStructuralActivity FOR RelatingElement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralItem : IfcProduct, IfcStructuralActivityAssignmentSelect, Global.IfcStructuralItem
	{
		public List<IfcRelConnectsStructuralActivity>? AssignedStructuralActivity {get{return Model?.GetItems<IfcRelConnectsStructuralActivity>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList();}}
		public IfcStructuralItem() : base()
		{
		}
		public IfcStructuralItem(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation
			};
		}
		public virtual List<Global.IfcRelConnectsStructuralActivity>? _AssignedStructuralActivity
		{
			get
			{
				if(AssignedStructuralActivity != null)
				{
					List<Global.IfcRelConnectsStructuralActivity>? items = new List<Global.IfcRelConnectsStructuralActivity>();
					foreach (IfcRelConnectsStructuralActivity item in AssignedStructuralActivity)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLinearAction
	/// SUBTYPE OF (IfcStructuralCurveAction);
	/// WHERE
	/// SuitableLoadType : SIZEOF(['IFC4.IFCSTRUCTURALLOADLINEARFORCE', 'IFC4.IFCSTRUCTURALLOADTEMPERATURE'] * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// ConstPredefinedType : SELF\IfcStructuralCurveAction.PredefinedType = IfcStructuralCurveActivityTypeEnum.CONST;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLinearAction : IfcStructuralCurveAction, Global.IfcStructuralLinearAction
	{
		public IfcStructuralLinearAction() : base()
		{
		}
		public IfcStructuralLinearAction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, IfcBoolean? DestabilizingLoad, IfcProjectedOrTrueLengthEnum? ProjectedOrTrue, IfcStructuralCurveActivityTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, ProjectedOrTrue, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad,
				ProjectedOrTrue,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoad
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadConfiguration
	/// ,IfcStructuralLoadOrResult));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralLoad : Ifc_Entity, Global.IfcStructuralLoad
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcStructuralLoad() : base()
		{
		}
		public IfcStructuralLoad(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadCase
	/// SUBTYPE OF (IfcStructuralLoadGroup);
	/// SelfWeightCoefficients : OPTIONAL LIST [3:3] OF IfcRatioMeasure;
	/// WHERE
	/// IsLoadCasePredefinedType : SELF\IfcStructuralLoadGroup.PredefinedType = IfcLoadGroupTypeEnum.LOAD_CASE;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadCase : IfcStructuralLoadGroup, Global.IfcStructuralLoadCase
	{
		public virtual List<IfcRatioMeasure>? SelfWeightCoefficients { get; set; }
		public IfcStructuralLoadCase() : base()
		{
		}
		public IfcStructuralLoadCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcLoadGroupTypeEnum? PredefinedType, IfcActionTypeEnum? ActionType, IfcActionSourceTypeEnum? ActionSource, IfcRatioMeasure? Coefficient, IfcLabel? Purpose, List<IfcRatioMeasure>? SelfWeightCoefficients) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, PredefinedType, ActionType, ActionSource, Coefficient, Purpose)
		{
			this.SelfWeightCoefficients = SelfWeightCoefficients;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				PredefinedType,
				ActionType,
				ActionSource,
				Coefficient,
				Purpose,
				SelfWeightCoefficients
			};
		}
		public virtual List<Global.IfcRatioMeasure>? _SelfWeightCoefficients
		{
			get
			{
				if(SelfWeightCoefficients != null)
				{
					List<Global.IfcRatioMeasure>? items = new List<Global.IfcRatioMeasure>();
					foreach (IfcRatioMeasure item in SelfWeightCoefficients)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SelfWeightCoefficients = null;
				}
				else
				{
					SelfWeightCoefficients = new List<IfcRatioMeasure>();
					foreach(var val in value)
					{
						if(val is IfcRatioMeasure v)
						{
							SelfWeightCoefficients.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadConfiguration
	/// SUBTYPE OF (IfcStructuralLoad);
	/// Values : LIST [1:?] OF IfcStructuralLoadOrResult;
	/// Locations : OPTIONAL LIST [1:?] OF UNIQUE LIST [1:2] OF IfcLengthMeasure;
	/// WHERE
	/// ValidListSize : NOT EXISTS(Locations) OR (SIZEOF(Locations) = SIZEOF(Values));
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadConfiguration : IfcStructuralLoad, Global.IfcStructuralLoadConfiguration
	{
		public virtual List<IfcStructuralLoadOrResult>? Values { get; set; }
		public virtual List<List<IfcLengthMeasure>>? Locations { get; set; }
		public IfcStructuralLoadConfiguration() : base()
		{
		}
		public IfcStructuralLoadConfiguration(IfcLabel? Name, List<IfcStructuralLoadOrResult>? Values, List<List<IfcLengthMeasure>>? Locations) : base (Name)
		{
			this.Values = Values;
			this.Locations = Locations;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Values,
				Locations
			};
		}
		public virtual List<Global.IfcStructuralLoadOrResult>? _Values
		{
			get
			{
				if(Values != null)
				{
					List<Global.IfcStructuralLoadOrResult>? items = new List<Global.IfcStructuralLoadOrResult>();
					foreach (IfcStructuralLoadOrResult item in Values)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Values = null;
				}
				else
				{
					Values = new List<IfcStructuralLoadOrResult>();
					foreach(var val in value)
					{
						if(val is IfcStructuralLoadOrResult v)
						{
							Values.Add(v);
						}
					}
				}
			}
		}
		public virtual List<List<Global.IfcLengthMeasure>>? _Locations
		{
			get
			{
				if(Locations != null)
				{
					List<List<Global.IfcLengthMeasure>>? items = new List<List<Global.IfcLengthMeasure>>();
					foreach (List<IfcLengthMeasure> item1s in Locations)
					{
						List<Global.IfcLengthMeasure>? resultItems = new List<Global.IfcLengthMeasure>();
						foreach (IfcLengthMeasure item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Locations = null;
				}
				else
				{
					Locations = new List<List<IfcLengthMeasure>>();
					foreach(var vals in value)
					{
						if(vals != null)
						{
							List<IfcLengthMeasure> items = new List<IfcLengthMeasure>();
							foreach(var val in vals)
							{
								if(val is IfcLengthMeasure v)
								{
									items.Add(v);
								}
							}
							Locations.Add(items);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadGroup
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadCase))
	/// SUBTYPE OF (IfcGroup);
	/// PredefinedType : IfcLoadGroupTypeEnum;
	/// ActionType : IfcActionTypeEnum;
	/// ActionSource : IfcActionSourceTypeEnum;
	/// Coefficient : OPTIONAL IfcRatioMeasure;
	/// Purpose : OPTIONAL IfcLabel;
	/// INVERSE
	/// SourceOfResultGroup : SET [0:1] OF IfcStructuralResultGroup FOR ResultForLoadGroup;
	/// LoadGroupFor : SET [0:?] OF IfcStructuralAnalysisModel FOR LoadedBy;
	/// WHERE
	/// HasObjectType : (
	/// (PredefinedType <> IfcLoadGroupTypeEnum.USERDEFINED) AND
	/// (ActionType <> IfcActionTypeEnum.USERDEFINED) AND
	/// (ActionSource <> IfcActionSourceTypeEnum.USERDEFINED)
	/// ) OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadGroup : IfcGroup, Global.IfcStructuralLoadGroup
	{
		public virtual IfcLoadGroupTypeEnum? PredefinedType { get; set; }
		public virtual IfcActionTypeEnum? ActionType { get; set; }
		public virtual IfcActionSourceTypeEnum? ActionSource { get; set; }
		public virtual IfcRatioMeasure? Coefficient { get; set; }
		public virtual IfcLabel? Purpose { get; set; }
		public List<IfcStructuralResultGroup>? SourceOfResultGroup {get{return Model?.GetItems<IfcStructuralResultGroup>().Where(x => x.ResultForLoadGroup != null && x.ResultForLoadGroup == this).ToList();}}
		public List<IfcStructuralAnalysisModel>? LoadGroupFor {get{return Model?.GetItems<IfcStructuralAnalysisModel>().Where(x => x.LoadedBy != null && x.LoadedBy.Contains(this)).ToList();}}
		public IfcStructuralLoadGroup() : base()
		{
		}
		public IfcStructuralLoadGroup(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcLoadGroupTypeEnum? PredefinedType, IfcActionTypeEnum? ActionType, IfcActionSourceTypeEnum? ActionSource, IfcRatioMeasure? Coefficient, IfcLabel? Purpose) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.PredefinedType = PredefinedType;
			this.ActionType = ActionType;
			this.ActionSource = ActionSource;
			this.Coefficient = Coefficient;
			this.Purpose = Purpose;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				PredefinedType,
				ActionType,
				ActionSource,
				Coefficient,
				Purpose
			};
		}
		public virtual Global.IfcLoadGroupTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcLoadGroupTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcActionTypeEnum? _ActionType
		{
			get
			{
				return ActionType;
			}
			set
			{
				if(value is IfcActionTypeEnum val)
				{
					ActionType = val;
				}
				else if(value == null)
				{
					ActionType = null;
				}
			}
		}
		public virtual Global.IfcActionSourceTypeEnum? _ActionSource
		{
			get
			{
				return ActionSource;
			}
			set
			{
				if(value is IfcActionSourceTypeEnum val)
				{
					ActionSource = val;
				}
				else if(value == null)
				{
					ActionSource = null;
				}
			}
		}
		public virtual Global.IfcRatioMeasure? _Coefficient
		{
			get
			{
				return Coefficient;
			}
			set
			{
				if(value is IfcRatioMeasure val)
				{
					Coefficient = val;
				}
				else if(value == null)
				{
					Coefficient = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Purpose
		{
			get
			{
				return Purpose;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Purpose = val;
				}
				else if(value == null)
				{
					Purpose = null;
				}
			}
		}
		public virtual List<Global.IfcStructuralResultGroup>? _SourceOfResultGroup
		{
			get
			{
				if(SourceOfResultGroup != null)
				{
					List<Global.IfcStructuralResultGroup>? items = new List<Global.IfcStructuralResultGroup>();
					foreach (IfcStructuralResultGroup item in SourceOfResultGroup)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcStructuralAnalysisModel>? _LoadGroupFor
		{
			get
			{
				if(LoadGroupFor != null)
				{
					List<Global.IfcStructuralAnalysisModel>? items = new List<Global.IfcStructuralAnalysisModel>();
					foreach (IfcStructuralAnalysisModel item in LoadGroupFor)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadLinearForce
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// LinearForceX : OPTIONAL IfcLinearForceMeasure;
	/// LinearForceY : OPTIONAL IfcLinearForceMeasure;
	/// LinearForceZ : OPTIONAL IfcLinearForceMeasure;
	/// LinearMomentX : OPTIONAL IfcLinearMomentMeasure;
	/// LinearMomentY : OPTIONAL IfcLinearMomentMeasure;
	/// LinearMomentZ : OPTIONAL IfcLinearMomentMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadLinearForce : IfcStructuralLoadStatic, Global.IfcStructuralLoadLinearForce
	{
		public virtual IfcLinearForceMeasure? LinearForceX { get; set; }
		public virtual IfcLinearForceMeasure? LinearForceY { get; set; }
		public virtual IfcLinearForceMeasure? LinearForceZ { get; set; }
		public virtual IfcLinearMomentMeasure? LinearMomentX { get; set; }
		public virtual IfcLinearMomentMeasure? LinearMomentY { get; set; }
		public virtual IfcLinearMomentMeasure? LinearMomentZ { get; set; }
		public IfcStructuralLoadLinearForce() : base()
		{
		}
		public IfcStructuralLoadLinearForce(IfcLabel? Name, IfcLinearForceMeasure? LinearForceX, IfcLinearForceMeasure? LinearForceY, IfcLinearForceMeasure? LinearForceZ, IfcLinearMomentMeasure? LinearMomentX, IfcLinearMomentMeasure? LinearMomentY, IfcLinearMomentMeasure? LinearMomentZ) : base (Name)
		{
			this.LinearForceX = LinearForceX;
			this.LinearForceY = LinearForceY;
			this.LinearForceZ = LinearForceZ;
			this.LinearMomentX = LinearMomentX;
			this.LinearMomentY = LinearMomentY;
			this.LinearMomentZ = LinearMomentZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LinearForceX,
				LinearForceY,
				LinearForceZ,
				LinearMomentX,
				LinearMomentY,
				LinearMomentZ
			};
		}
		public virtual Global.IfcLinearForceMeasure? _LinearForceX
		{
			get
			{
				return LinearForceX;
			}
			set
			{
				if(value is IfcLinearForceMeasure val)
				{
					LinearForceX = val;
				}
				else if(value == null)
				{
					LinearForceX = null;
				}
			}
		}
		public virtual Global.IfcLinearForceMeasure? _LinearForceY
		{
			get
			{
				return LinearForceY;
			}
			set
			{
				if(value is IfcLinearForceMeasure val)
				{
					LinearForceY = val;
				}
				else if(value == null)
				{
					LinearForceY = null;
				}
			}
		}
		public virtual Global.IfcLinearForceMeasure? _LinearForceZ
		{
			get
			{
				return LinearForceZ;
			}
			set
			{
				if(value is IfcLinearForceMeasure val)
				{
					LinearForceZ = val;
				}
				else if(value == null)
				{
					LinearForceZ = null;
				}
			}
		}
		public virtual Global.IfcLinearMomentMeasure? _LinearMomentX
		{
			get
			{
				return LinearMomentX;
			}
			set
			{
				if(value is IfcLinearMomentMeasure val)
				{
					LinearMomentX = val;
				}
				else if(value == null)
				{
					LinearMomentX = null;
				}
			}
		}
		public virtual Global.IfcLinearMomentMeasure? _LinearMomentY
		{
			get
			{
				return LinearMomentY;
			}
			set
			{
				if(value is IfcLinearMomentMeasure val)
				{
					LinearMomentY = val;
				}
				else if(value == null)
				{
					LinearMomentY = null;
				}
			}
		}
		public virtual Global.IfcLinearMomentMeasure? _LinearMomentZ
		{
			get
			{
				return LinearMomentZ;
			}
			set
			{
				if(value is IfcLinearMomentMeasure val)
				{
					LinearMomentZ = val;
				}
				else if(value == null)
				{
					LinearMomentZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadOrResult
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadStatic
	/// ,IfcSurfaceReinforcementArea))
	/// SUBTYPE OF (IfcStructuralLoad);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralLoadOrResult : IfcStructuralLoad, Global.IfcStructuralLoadOrResult
	{
		public IfcStructuralLoadOrResult() : base()
		{
		}
		public IfcStructuralLoadOrResult(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadPlanarForce
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// PlanarForceX : OPTIONAL IfcPlanarForceMeasure;
	/// PlanarForceY : OPTIONAL IfcPlanarForceMeasure;
	/// PlanarForceZ : OPTIONAL IfcPlanarForceMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadPlanarForce : IfcStructuralLoadStatic, Global.IfcStructuralLoadPlanarForce
	{
		public virtual IfcPlanarForceMeasure? PlanarForceX { get; set; }
		public virtual IfcPlanarForceMeasure? PlanarForceY { get; set; }
		public virtual IfcPlanarForceMeasure? PlanarForceZ { get; set; }
		public IfcStructuralLoadPlanarForce() : base()
		{
		}
		public IfcStructuralLoadPlanarForce(IfcLabel? Name, IfcPlanarForceMeasure? PlanarForceX, IfcPlanarForceMeasure? PlanarForceY, IfcPlanarForceMeasure? PlanarForceZ) : base (Name)
		{
			this.PlanarForceX = PlanarForceX;
			this.PlanarForceY = PlanarForceY;
			this.PlanarForceZ = PlanarForceZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				PlanarForceX,
				PlanarForceY,
				PlanarForceZ
			};
		}
		public virtual Global.IfcPlanarForceMeasure? _PlanarForceX
		{
			get
			{
				return PlanarForceX;
			}
			set
			{
				if(value is IfcPlanarForceMeasure val)
				{
					PlanarForceX = val;
				}
				else if(value == null)
				{
					PlanarForceX = null;
				}
			}
		}
		public virtual Global.IfcPlanarForceMeasure? _PlanarForceY
		{
			get
			{
				return PlanarForceY;
			}
			set
			{
				if(value is IfcPlanarForceMeasure val)
				{
					PlanarForceY = val;
				}
				else if(value == null)
				{
					PlanarForceY = null;
				}
			}
		}
		public virtual Global.IfcPlanarForceMeasure? _PlanarForceZ
		{
			get
			{
				return PlanarForceZ;
			}
			set
			{
				if(value is IfcPlanarForceMeasure val)
				{
					PlanarForceZ = val;
				}
				else if(value == null)
				{
					PlanarForceZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleDisplacement
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadSingleDisplacementDistortion))
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// DisplacementX : OPTIONAL IfcLengthMeasure;
	/// DisplacementY : OPTIONAL IfcLengthMeasure;
	/// DisplacementZ : OPTIONAL IfcLengthMeasure;
	/// RotationalDisplacementRX : OPTIONAL IfcPlaneAngleMeasure;
	/// RotationalDisplacementRY : OPTIONAL IfcPlaneAngleMeasure;
	/// RotationalDisplacementRZ : OPTIONAL IfcPlaneAngleMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadSingleDisplacement : IfcStructuralLoadStatic, Global.IfcStructuralLoadSingleDisplacement
	{
		public virtual IfcLengthMeasure? DisplacementX { get; set; }
		public virtual IfcLengthMeasure? DisplacementY { get; set; }
		public virtual IfcLengthMeasure? DisplacementZ { get; set; }
		public virtual IfcPlaneAngleMeasure? RotationalDisplacementRX { get; set; }
		public virtual IfcPlaneAngleMeasure? RotationalDisplacementRY { get; set; }
		public virtual IfcPlaneAngleMeasure? RotationalDisplacementRZ { get; set; }
		public IfcStructuralLoadSingleDisplacement() : base()
		{
		}
		public IfcStructuralLoadSingleDisplacement(IfcLabel? Name, IfcLengthMeasure? DisplacementX, IfcLengthMeasure? DisplacementY, IfcLengthMeasure? DisplacementZ, IfcPlaneAngleMeasure? RotationalDisplacementRX, IfcPlaneAngleMeasure? RotationalDisplacementRY, IfcPlaneAngleMeasure? RotationalDisplacementRZ) : base (Name)
		{
			this.DisplacementX = DisplacementX;
			this.DisplacementY = DisplacementY;
			this.DisplacementZ = DisplacementZ;
			this.RotationalDisplacementRX = RotationalDisplacementRX;
			this.RotationalDisplacementRY = RotationalDisplacementRY;
			this.RotationalDisplacementRZ = RotationalDisplacementRZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DisplacementX,
				DisplacementY,
				DisplacementZ,
				RotationalDisplacementRX,
				RotationalDisplacementRY,
				RotationalDisplacementRZ
			};
		}
		public virtual Global.IfcLengthMeasure? _DisplacementX
		{
			get
			{
				return DisplacementX;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					DisplacementX = val;
				}
				else if(value == null)
				{
					DisplacementX = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _DisplacementY
		{
			get
			{
				return DisplacementY;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					DisplacementY = val;
				}
				else if(value == null)
				{
					DisplacementY = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _DisplacementZ
		{
			get
			{
				return DisplacementZ;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					DisplacementZ = val;
				}
				else if(value == null)
				{
					DisplacementZ = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _RotationalDisplacementRX
		{
			get
			{
				return RotationalDisplacementRX;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					RotationalDisplacementRX = val;
				}
				else if(value == null)
				{
					RotationalDisplacementRX = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _RotationalDisplacementRY
		{
			get
			{
				return RotationalDisplacementRY;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					RotationalDisplacementRY = val;
				}
				else if(value == null)
				{
					RotationalDisplacementRY = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _RotationalDisplacementRZ
		{
			get
			{
				return RotationalDisplacementRZ;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					RotationalDisplacementRZ = val;
				}
				else if(value == null)
				{
					RotationalDisplacementRZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleDisplacementDistortion
	/// SUBTYPE OF (IfcStructuralLoadSingleDisplacement);
	/// Distortion : OPTIONAL IfcCurvatureMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadSingleDisplacementDistortion : IfcStructuralLoadSingleDisplacement, Global.IfcStructuralLoadSingleDisplacementDistortion
	{
		public virtual IfcCurvatureMeasure? Distortion { get; set; }
		public IfcStructuralLoadSingleDisplacementDistortion() : base()
		{
		}
		public IfcStructuralLoadSingleDisplacementDistortion(IfcLabel? Name, IfcLengthMeasure? DisplacementX, IfcLengthMeasure? DisplacementY, IfcLengthMeasure? DisplacementZ, IfcPlaneAngleMeasure? RotationalDisplacementRX, IfcPlaneAngleMeasure? RotationalDisplacementRY, IfcPlaneAngleMeasure? RotationalDisplacementRZ, IfcCurvatureMeasure? Distortion) : base (Name, DisplacementX, DisplacementY, DisplacementZ, RotationalDisplacementRX, RotationalDisplacementRY, RotationalDisplacementRZ)
		{
			this.Distortion = Distortion;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DisplacementX,
				DisplacementY,
				DisplacementZ,
				RotationalDisplacementRX,
				RotationalDisplacementRY,
				RotationalDisplacementRZ,
				Distortion
			};
		}
		public virtual Global.IfcCurvatureMeasure? _Distortion
		{
			get
			{
				return Distortion;
			}
			set
			{
				if(value is IfcCurvatureMeasure val)
				{
					Distortion = val;
				}
				else if(value == null)
				{
					Distortion = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleForce
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadSingleForceWarping))
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// ForceX : OPTIONAL IfcForceMeasure;
	/// ForceY : OPTIONAL IfcForceMeasure;
	/// ForceZ : OPTIONAL IfcForceMeasure;
	/// MomentX : OPTIONAL IfcTorqueMeasure;
	/// MomentY : OPTIONAL IfcTorqueMeasure;
	/// MomentZ : OPTIONAL IfcTorqueMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadSingleForce : IfcStructuralLoadStatic, Global.IfcStructuralLoadSingleForce
	{
		public virtual IfcForceMeasure? ForceX { get; set; }
		public virtual IfcForceMeasure? ForceY { get; set; }
		public virtual IfcForceMeasure? ForceZ { get; set; }
		public virtual IfcTorqueMeasure? MomentX { get; set; }
		public virtual IfcTorqueMeasure? MomentY { get; set; }
		public virtual IfcTorqueMeasure? MomentZ { get; set; }
		public IfcStructuralLoadSingleForce() : base()
		{
		}
		public IfcStructuralLoadSingleForce(IfcLabel? Name, IfcForceMeasure? ForceX, IfcForceMeasure? ForceY, IfcForceMeasure? ForceZ, IfcTorqueMeasure? MomentX, IfcTorqueMeasure? MomentY, IfcTorqueMeasure? MomentZ) : base (Name)
		{
			this.ForceX = ForceX;
			this.ForceY = ForceY;
			this.ForceZ = ForceZ;
			this.MomentX = MomentX;
			this.MomentY = MomentY;
			this.MomentZ = MomentZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				ForceX,
				ForceY,
				ForceZ,
				MomentX,
				MomentY,
				MomentZ
			};
		}
		public virtual Global.IfcForceMeasure? _ForceX
		{
			get
			{
				return ForceX;
			}
			set
			{
				if(value is IfcForceMeasure val)
				{
					ForceX = val;
				}
				else if(value == null)
				{
					ForceX = null;
				}
			}
		}
		public virtual Global.IfcForceMeasure? _ForceY
		{
			get
			{
				return ForceY;
			}
			set
			{
				if(value is IfcForceMeasure val)
				{
					ForceY = val;
				}
				else if(value == null)
				{
					ForceY = null;
				}
			}
		}
		public virtual Global.IfcForceMeasure? _ForceZ
		{
			get
			{
				return ForceZ;
			}
			set
			{
				if(value is IfcForceMeasure val)
				{
					ForceZ = val;
				}
				else if(value == null)
				{
					ForceZ = null;
				}
			}
		}
		public virtual Global.IfcTorqueMeasure? _MomentX
		{
			get
			{
				return MomentX;
			}
			set
			{
				if(value is IfcTorqueMeasure val)
				{
					MomentX = val;
				}
				else if(value == null)
				{
					MomentX = null;
				}
			}
		}
		public virtual Global.IfcTorqueMeasure? _MomentY
		{
			get
			{
				return MomentY;
			}
			set
			{
				if(value is IfcTorqueMeasure val)
				{
					MomentY = val;
				}
				else if(value == null)
				{
					MomentY = null;
				}
			}
		}
		public virtual Global.IfcTorqueMeasure? _MomentZ
		{
			get
			{
				return MomentZ;
			}
			set
			{
				if(value is IfcTorqueMeasure val)
				{
					MomentZ = val;
				}
				else if(value == null)
				{
					MomentZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleForceWarping
	/// SUBTYPE OF (IfcStructuralLoadSingleForce);
	/// WarpingMoment : OPTIONAL IfcWarpingMomentMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadSingleForceWarping : IfcStructuralLoadSingleForce, Global.IfcStructuralLoadSingleForceWarping
	{
		public virtual IfcWarpingMomentMeasure? WarpingMoment { get; set; }
		public IfcStructuralLoadSingleForceWarping() : base()
		{
		}
		public IfcStructuralLoadSingleForceWarping(IfcLabel? Name, IfcForceMeasure? ForceX, IfcForceMeasure? ForceY, IfcForceMeasure? ForceZ, IfcTorqueMeasure? MomentX, IfcTorqueMeasure? MomentY, IfcTorqueMeasure? MomentZ, IfcWarpingMomentMeasure? WarpingMoment) : base (Name, ForceX, ForceY, ForceZ, MomentX, MomentY, MomentZ)
		{
			this.WarpingMoment = WarpingMoment;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				ForceX,
				ForceY,
				ForceZ,
				MomentX,
				MomentY,
				MomentZ,
				WarpingMoment
			};
		}
		public virtual Global.IfcWarpingMomentMeasure? _WarpingMoment
		{
			get
			{
				return WarpingMoment;
			}
			set
			{
				if(value is IfcWarpingMomentMeasure val)
				{
					WarpingMoment = val;
				}
				else if(value == null)
				{
					WarpingMoment = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadStatic
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadLinearForce
	/// ,IfcStructuralLoadPlanarForce
	/// ,IfcStructuralLoadSingleDisplacement
	/// ,IfcStructuralLoadSingleForce
	/// ,IfcStructuralLoadTemperature))
	/// SUBTYPE OF (IfcStructuralLoadOrResult);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralLoadStatic : IfcStructuralLoadOrResult, Global.IfcStructuralLoadStatic
	{
		public IfcStructuralLoadStatic() : base()
		{
		}
		public IfcStructuralLoadStatic(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadTemperature
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// DeltaTConstant : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// DeltaTY : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// DeltaTZ : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadTemperature : IfcStructuralLoadStatic, Global.IfcStructuralLoadTemperature
	{
		public virtual IfcThermodynamicTemperatureMeasure? DeltaTConstant { get; set; }
		public virtual IfcThermodynamicTemperatureMeasure? DeltaTY { get; set; }
		public virtual IfcThermodynamicTemperatureMeasure? DeltaTZ { get; set; }
		public IfcStructuralLoadTemperature() : base()
		{
		}
		public IfcStructuralLoadTemperature(IfcLabel? Name, IfcThermodynamicTemperatureMeasure? DeltaTConstant, IfcThermodynamicTemperatureMeasure? DeltaTY, IfcThermodynamicTemperatureMeasure? DeltaTZ) : base (Name)
		{
			this.DeltaTConstant = DeltaTConstant;
			this.DeltaTY = DeltaTY;
			this.DeltaTZ = DeltaTZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DeltaTConstant,
				DeltaTY,
				DeltaTZ
			};
		}
		public virtual Global.IfcThermodynamicTemperatureMeasure? _DeltaTConstant
		{
			get
			{
				return DeltaTConstant;
			}
			set
			{
				if(value is IfcThermodynamicTemperatureMeasure val)
				{
					DeltaTConstant = val;
				}
				else if(value == null)
				{
					DeltaTConstant = null;
				}
			}
		}
		public virtual Global.IfcThermodynamicTemperatureMeasure? _DeltaTY
		{
			get
			{
				return DeltaTY;
			}
			set
			{
				if(value is IfcThermodynamicTemperatureMeasure val)
				{
					DeltaTY = val;
				}
				else if(value == null)
				{
					DeltaTY = null;
				}
			}
		}
		public virtual Global.IfcThermodynamicTemperatureMeasure? _DeltaTZ
		{
			get
			{
				return DeltaTZ;
			}
			set
			{
				if(value is IfcThermodynamicTemperatureMeasure val)
				{
					DeltaTZ = val;
				}
				else if(value == null)
				{
					DeltaTZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralMember
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralCurveMember
	/// ,IfcStructuralSurfaceMember))
	/// SUBTYPE OF (IfcStructuralItem);
	/// INVERSE
	/// ConnectedBy : SET [0:?] OF IfcRelConnectsStructuralMember FOR RelatingStructuralMember;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralMember : IfcStructuralItem, Global.IfcStructuralMember
	{
		public List<IfcRelConnectsStructuralMember>? ConnectedBy {get{return Model?.GetItems<IfcRelConnectsStructuralMember>().Where(x => x.RelatingStructuralMember != null && x.RelatingStructuralMember == this).ToList();}}
		public IfcStructuralMember() : base()
		{
		}
		public IfcStructuralMember(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation
			};
		}
		public virtual List<Global.IfcRelConnectsStructuralMember>? _ConnectedBy
		{
			get
			{
				if(ConnectedBy != null)
				{
					List<Global.IfcRelConnectsStructuralMember>? items = new List<Global.IfcRelConnectsStructuralMember>();
					foreach (IfcRelConnectsStructuralMember item in ConnectedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPlanarAction
	/// SUBTYPE OF (IfcStructuralSurfaceAction);
	/// WHERE
	/// SuitableLoadType : SIZEOF(['IFC4.IFCSTRUCTURALLOADPLANARFORCE', 'IFC4.IFCSTRUCTURALLOADTEMPERATURE'] * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// ConstPredefinedType : SELF\IfcStructuralSurfaceAction.PredefinedType = IfcStructuralSurfaceActivityTypeEnum.CONST;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralPlanarAction : IfcStructuralSurfaceAction, Global.IfcStructuralPlanarAction
	{
		public IfcStructuralPlanarAction() : base()
		{
		}
		public IfcStructuralPlanarAction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, IfcBoolean? DestabilizingLoad, IfcProjectedOrTrueLengthEnum? ProjectedOrTrue, IfcStructuralSurfaceActivityTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, ProjectedOrTrue, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad,
				ProjectedOrTrue,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPointAction
	/// SUBTYPE OF (IfcStructuralAction);
	/// WHERE
	/// SuitableLoadType : SIZEOF(['IFC4.IFCSTRUCTURALLOADSINGLEFORCE', 'IFC4.IFCSTRUCTURALLOADSINGLEDISPLACEMENT'] * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralPointAction : IfcStructuralAction, Global.IfcStructuralPointAction
	{
		public IfcStructuralPointAction() : base()
		{
		}
		public IfcStructuralPointAction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, IfcBoolean? DestabilizingLoad) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPointConnection
	/// SUBTYPE OF (IfcStructuralConnection);
	/// ConditionCoordinateSystem : OPTIONAL IfcAxis2Placement3D;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralPointConnection : IfcStructuralConnection, Global.IfcStructuralPointConnection
	{
		public virtual IfcAxis2Placement3D? ConditionCoordinateSystem { get; set; }
		public IfcStructuralPointConnection() : base()
		{
		}
		public IfcStructuralPointConnection(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcBoundaryCondition? AppliedCondition, IfcAxis2Placement3D? ConditionCoordinateSystem) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition)
		{
			this.ConditionCoordinateSystem = ConditionCoordinateSystem;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedCondition,
				ConditionCoordinateSystem
			};
		}
		public virtual Global.IfcAxis2Placement3D? _ConditionCoordinateSystem
		{
			get
			{
				return ConditionCoordinateSystem;
			}
			set
			{
				if(value is IfcAxis2Placement3D val)
				{
					ConditionCoordinateSystem = val;
				}
				else if(value == null)
				{
					ConditionCoordinateSystem = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPointReaction
	/// SUBTYPE OF (IfcStructuralReaction);
	/// WHERE
	/// SuitableLoadType : SIZEOF(['IFC4.IFCSTRUCTURALLOADSINGLEFORCE', 'IFC4.IFCSTRUCTURALLOADSINGLEDISPLACEMENT'] * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralPointReaction : IfcStructuralReaction, Global.IfcStructuralPointReaction
	{
		public IfcStructuralPointReaction() : base()
		{
		}
		public IfcStructuralPointReaction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralReaction
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralCurveReaction
	/// ,IfcStructuralPointReaction
	/// ,IfcStructuralSurfaceReaction))
	/// SUBTYPE OF (IfcStructuralActivity);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralReaction : IfcStructuralActivity, Global.IfcStructuralReaction
	{
		public IfcStructuralReaction() : base()
		{
		}
		public IfcStructuralReaction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralResultGroup
	/// SUBTYPE OF (IfcGroup);
	/// TheoryType : IfcAnalysisTheoryTypeEnum;
	/// ResultForLoadGroup : OPTIONAL IfcStructuralLoadGroup;
	/// IsLinear : IfcBoolean;
	/// INVERSE
	/// ResultGroupFor : SET [0:1] OF IfcStructuralAnalysisModel FOR HasResults;
	/// WHERE
	/// HasObjectType : (TheoryType <> IfcAnalysisTheoryTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralResultGroup : IfcGroup, Global.IfcStructuralResultGroup
	{
		public virtual IfcAnalysisTheoryTypeEnum? TheoryType { get; set; }
		public virtual IfcStructuralLoadGroup? ResultForLoadGroup { get; set; }
		public virtual IfcBoolean? IsLinear { get; set; }
		public List<IfcStructuralAnalysisModel>? ResultGroupFor {get{return Model?.GetItems<IfcStructuralAnalysisModel>().Where(x => x.HasResults != null && x.HasResults.Contains(this)).ToList();}}
		public IfcStructuralResultGroup() : base()
		{
		}
		public IfcStructuralResultGroup(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcAnalysisTheoryTypeEnum? TheoryType, IfcStructuralLoadGroup? ResultForLoadGroup, IfcBoolean? IsLinear) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.TheoryType = TheoryType;
			this.ResultForLoadGroup = ResultForLoadGroup;
			this.IsLinear = IsLinear;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				TheoryType,
				ResultForLoadGroup,
				IsLinear
			};
		}
		public virtual Global.IfcAnalysisTheoryTypeEnum? _TheoryType
		{
			get
			{
				return TheoryType;
			}
			set
			{
				if(value is IfcAnalysisTheoryTypeEnum val)
				{
					TheoryType = val;
				}
				else if(value == null)
				{
					TheoryType = null;
				}
			}
		}
		public virtual Global.IfcStructuralLoadGroup? _ResultForLoadGroup
		{
			get
			{
				return ResultForLoadGroup;
			}
			set
			{
				if(value is IfcStructuralLoadGroup val)
				{
					ResultForLoadGroup = val;
				}
				else if(value == null)
				{
					ResultForLoadGroup = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _IsLinear
		{
			get
			{
				return IsLinear;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					IsLinear = val;
				}
				else if(value == null)
				{
					IsLinear = null;
				}
			}
		}
		public virtual List<Global.IfcStructuralAnalysisModel>? _ResultGroupFor
		{
			get
			{
				if(ResultGroupFor != null)
				{
					List<Global.IfcStructuralAnalysisModel>? items = new List<Global.IfcStructuralAnalysisModel>();
					foreach (IfcStructuralAnalysisModel item in ResultGroupFor)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralSurfaceAction
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralPlanarAction))
	/// SUBTYPE OF (IfcStructuralAction);
	/// ProjectedOrTrue : OPTIONAL IfcProjectedOrTrueLengthEnum;
	/// PredefinedType : IfcStructuralSurfaceActivityTypeEnum;
	/// WHERE
	/// ProjectedIsGlobal : (NOT EXISTS(ProjectedOrTrue)) OR
	/// ((ProjectedOrTrue <> PROJECTED_LENGTH) OR
	/// (SELF\IfcStructuralActivity.GlobalOrLocal = GLOBAL_COORDS));
	/// HasObjectType : (PredefinedType <> IfcStructuralSurfaceActivityTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralSurfaceAction : IfcStructuralAction, Global.IfcStructuralSurfaceAction
	{
		public virtual IfcProjectedOrTrueLengthEnum? ProjectedOrTrue { get; set; }
		public virtual IfcStructuralSurfaceActivityTypeEnum? PredefinedType { get; set; }
		public IfcStructuralSurfaceAction() : base()
		{
		}
		public IfcStructuralSurfaceAction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, IfcBoolean? DestabilizingLoad, IfcProjectedOrTrueLengthEnum? ProjectedOrTrue, IfcStructuralSurfaceActivityTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad)
		{
			this.ProjectedOrTrue = ProjectedOrTrue;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad,
				ProjectedOrTrue,
				PredefinedType
			};
		}
		public virtual Global.IfcProjectedOrTrueLengthEnum? _ProjectedOrTrue
		{
			get
			{
				return ProjectedOrTrue;
			}
			set
			{
				if(value is IfcProjectedOrTrueLengthEnum val)
				{
					ProjectedOrTrue = val;
				}
				else if(value == null)
				{
					ProjectedOrTrue = null;
				}
			}
		}
		public virtual Global.IfcStructuralSurfaceActivityTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStructuralSurfaceActivityTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralSurfaceConnection
	/// SUBTYPE OF (IfcStructuralConnection);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralSurfaceConnection : IfcStructuralConnection, Global.IfcStructuralSurfaceConnection
	{
		public IfcStructuralSurfaceConnection() : base()
		{
		}
		public IfcStructuralSurfaceConnection(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcBoundaryCondition? AppliedCondition) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedCondition
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralSurfaceMember
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralSurfaceMemberVarying))
	/// SUBTYPE OF (IfcStructuralMember);
	/// PredefinedType : IfcStructuralSurfaceMemberTypeEnum;
	/// Thickness : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// HasObjectType : (PredefinedType <> IfcStructuralSurfaceMemberTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralSurfaceMember : IfcStructuralMember, Global.IfcStructuralSurfaceMember
	{
		public virtual IfcStructuralSurfaceMemberTypeEnum? PredefinedType { get; set; }
		public virtual IfcPositiveLengthMeasure? Thickness { get; set; }
		public IfcStructuralSurfaceMember() : base()
		{
		}
		public IfcStructuralSurfaceMember(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralSurfaceMemberTypeEnum? PredefinedType, IfcPositiveLengthMeasure? Thickness) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.PredefinedType = PredefinedType;
			this.Thickness = Thickness;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				PredefinedType,
				Thickness
			};
		}
		public virtual Global.IfcStructuralSurfaceMemberTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStructuralSurfaceMemberTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _Thickness
		{
			get
			{
				return Thickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Thickness = val;
				}
				else if(value == null)
				{
					Thickness = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralSurfaceMemberVarying
	/// SUBTYPE OF (IfcStructuralSurfaceMember);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralSurfaceMemberVarying : IfcStructuralSurfaceMember, Global.IfcStructuralSurfaceMemberVarying
	{
		public IfcStructuralSurfaceMemberVarying() : base()
		{
		}
		public IfcStructuralSurfaceMemberVarying(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralSurfaceMemberTypeEnum? PredefinedType, IfcPositiveLengthMeasure? Thickness) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, Thickness)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				PredefinedType,
				Thickness
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralSurfaceReaction
	/// SUBTYPE OF (IfcStructuralReaction);
	/// PredefinedType : IfcStructuralSurfaceActivityTypeEnum;
	/// WHERE
	/// HasPredefinedType : (PredefinedType <> IfcStructuralSurfaceActivityTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralSurfaceReaction : IfcStructuralReaction, Global.IfcStructuralSurfaceReaction
	{
		public virtual IfcStructuralSurfaceActivityTypeEnum? PredefinedType { get; set; }
		public IfcStructuralSurfaceReaction() : base()
		{
		}
		public IfcStructuralSurfaceReaction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, IfcStructuralSurfaceActivityTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				PredefinedType
			};
		}
		public virtual Global.IfcStructuralSurfaceActivityTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcStructuralSurfaceActivityTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStyleModel
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStyledRepresentation))
	/// SUBTYPE OF (IfcRepresentation);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStyleModel : IfcRepresentation, Global.IfcStyleModel
	{
		public IfcStyleModel() : base()
		{
		}
		public IfcStyleModel(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStyledItem
	/// SUBTYPE OF (IfcRepresentationItem);
	/// Item : OPTIONAL IfcRepresentationItem;
	/// Styles : SET [1:?] OF IfcStyleAssignmentSelect;
	/// Name : OPTIONAL IfcLabel;
	/// WHERE
	/// ApplicableItem : NOT('IFC4.IFCSTYLEDITEM' IN TYPEOF(Item));
	/// END_ENTITY;
	/// <summary>
	public class IfcStyledItem : IfcRepresentationItem, Global.IfcStyledItem
	{
		public virtual IfcRepresentationItem? Item { get; set; }
		public virtual List<IfcStyleAssignmentSelect>? Styles { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public IfcStyledItem() : base()
		{
		}
		public IfcStyledItem(IfcRepresentationItem? Item, List<IfcStyleAssignmentSelect>? Styles, IfcLabel? Name) : base ()
		{
			this.Item = Item;
			this.Styles = Styles;
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name
			};
		}
		public virtual Global.IfcRepresentationItem? _Item
		{
			get
			{
				return Item;
			}
			set
			{
				if(value is IfcRepresentationItem val)
				{
					Item = val;
				}
				else if(value == null)
				{
					Item = null;
				}
			}
		}
		public virtual List<Global.IfcStyleAssignmentSelect>? _Styles
		{
			get
			{
				if(Styles != null)
				{
					List<Global.IfcStyleAssignmentSelect>? items = new List<Global.IfcStyleAssignmentSelect>();
					foreach (IfcStyleAssignmentSelect item in Styles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Styles = null;
				}
				else
				{
					Styles = new List<IfcStyleAssignmentSelect>();
					foreach(var val in value)
					{
						if(val is IfcStyleAssignmentSelect v)
						{
							Styles.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStyledRepresentation
	/// SUBTYPE OF (IfcStyleModel);
	/// WHERE
	/// OnlyStyledItems : SIZEOF(QUERY(temp <* SELF\IfcRepresentation.Items |
	/// (NOT('IFC4.IFCSTYLEDITEM' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcStyledRepresentation : IfcStyleModel, Global.IfcStyledRepresentation
	{
		public IfcStyledRepresentation() : base()
		{
		}
		public IfcStyledRepresentation(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSubContractResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// PredefinedType : OPTIONAL IfcSubContractResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSubContractResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSubContractResourceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSubContractResource : IfcConstructionResource, Global.IfcSubContractResource
	{
		public virtual IfcSubContractResourceTypeEnum? PredefinedType { get; set; }
		public IfcSubContractResource() : base()
		{
		}
		public IfcSubContractResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription, IfcResourceTime? Usage, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcSubContractResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription,
				Usage,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcSubContractResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSubContractResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSubContractResourceType
	/// SUBTYPE OF (IfcConstructionResourceType);
	/// PredefinedType : IfcSubContractResourceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcSubContractResourceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSubContractResourceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcTypeResource.ResourceType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSubContractResourceType : IfcConstructionResourceType, Global.IfcSubContractResourceType
	{
		public virtual IfcSubContractResourceTypeEnum? PredefinedType { get; set; }
		public IfcSubContractResourceType() : base()
		{
		}
		public IfcSubContractResourceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ResourceType, List<IfcAppliedValue>? BaseCosts, IfcPhysicalQuantity? BaseQuantity, IfcSubContractResourceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ResourceType,
				BaseCosts,
				BaseQuantity,
				PredefinedType
			};
		}
		public virtual Global.IfcSubContractResourceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSubContractResourceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSubedge
	/// SUBTYPE OF (IfcEdge);
	/// ParentEdge : IfcEdge;
	/// END_ENTITY;
	/// <summary>
	public class IfcSubedge : IfcEdge, Global.IfcSubedge
	{
		public virtual IfcEdge? ParentEdge { get; set; }
		public IfcSubedge() : base()
		{
		}
		public IfcSubedge(IfcVertex? EdgeStart, IfcVertex? EdgeEnd, IfcEdge? ParentEdge) : base (EdgeStart, EdgeEnd)
		{
			this.ParentEdge = ParentEdge;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeStart,
				EdgeEnd,
				ParentEdge
			};
		}
		public virtual Global.IfcEdge? _ParentEdge
		{
			get
			{
				return ParentEdge;
			}
			set
			{
				if(value is IfcEdge val)
				{
					ParentEdge = val;
				}
				else if(value == null)
				{
					ParentEdge = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurface
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBoundedSurface
	/// ,IfcElementarySurface
	/// ,IfcSweptSurface))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSurface : IfcGeometricRepresentationItem, IfcGeometricSetSelect, IfcSurfaceOrFaceSurface, Global.IfcSurface
	{
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcSurface() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceCurve
	/// SUPERTYPE OF (ONEOF
	/// (IfcIntersectionCurve
	/// ,IfcSeamCurve))
	/// SUBTYPE OF (IfcCurve);
	/// Curve3D : IfcCurve;
	/// AssociatedGeometry : LIST [1:2] OF IfcPcurve;
	/// MasterRepresentation : IfcPreferredSurfaceCurveRepresentation;
	/// DERIVE
	/// BasisSurface : SET [1:2] OF IfcSurface := IfcGetBasisSurface(SELF);
	/// WHERE
	/// CurveIs3D : Curve3D.Dim = 3;
	/// CurveIsNotPcurve : NOT ('IFC4.IFCPCURVE' IN TYPEOF(Curve3D));
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceCurve : IfcCurve, IfcCurveOnSurface, Global.IfcSurfaceCurve
	{
		public virtual IfcCurve? Curve3D { get; set; }
		public virtual List<IfcPcurve>? AssociatedGeometry { get; set; }
		public virtual IfcPreferredSurfaceCurveRepresentation? MasterRepresentation { get; set; }
		//DERIVE
		public virtual List<IfcSurface>? BasisSurface {get {return null;}}
		public IfcSurfaceCurve() : base()
		{
		}
		public IfcSurfaceCurve(IfcCurve? Curve3D, List<IfcPcurve>? AssociatedGeometry, IfcPreferredSurfaceCurveRepresentation? MasterRepresentation) : base ()
		{
			this.Curve3D = Curve3D;
			this.AssociatedGeometry = AssociatedGeometry;
			this.MasterRepresentation = MasterRepresentation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Curve3D,
				AssociatedGeometry,
				MasterRepresentation
			};
		}
		public virtual Global.IfcCurve? _Curve3D
		{
			get
			{
				return Curve3D;
			}
			set
			{
				if(value is IfcCurve val)
				{
					Curve3D = val;
				}
				else if(value == null)
				{
					Curve3D = null;
				}
			}
		}
		public virtual List<Global.IfcPcurve>? _AssociatedGeometry
		{
			get
			{
				if(AssociatedGeometry != null)
				{
					List<Global.IfcPcurve>? items = new List<Global.IfcPcurve>();
					foreach (IfcPcurve item in AssociatedGeometry)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					AssociatedGeometry = null;
				}
				else
				{
					AssociatedGeometry = new List<IfcPcurve>();
					foreach(var val in value)
					{
						if(val is IfcPcurve v)
						{
							AssociatedGeometry.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcPreferredSurfaceCurveRepresentation? _MasterRepresentation
		{
			get
			{
				return MasterRepresentation;
			}
			set
			{
				if(value is IfcPreferredSurfaceCurveRepresentation val)
				{
					MasterRepresentation = val;
				}
				else if(value == null)
				{
					MasterRepresentation = null;
				}
			}
		}
		public virtual List<Global.IfcSurface>? _BasisSurface
		{
			get
			{
				if(BasisSurface != null)
				{
					List<Global.IfcSurface>? items = new List<Global.IfcSurface>();
					foreach (IfcSurface item in BasisSurface)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceCurveSweptAreaSolid
	/// SUBTYPE OF (IfcSweptAreaSolid);
	/// Directrix : IfcCurve;
	/// StartParam : OPTIONAL IfcParameterValue;
	/// EndParam : OPTIONAL IfcParameterValue;
	/// ReferenceSurface : IfcSurface;
	/// WHERE
	/// DirectrixBounded : (EXISTS(StartParam) AND EXISTS(EndParam)) OR
	/// (SIZEOF(['IFC4.IFCCONIC', 'IFC4.IFCBOUNDEDCURVE'] * TYPEOF(Directrix)) = 1);
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceCurveSweptAreaSolid : IfcSweptAreaSolid, Global.IfcSurfaceCurveSweptAreaSolid
	{
		public virtual IfcCurve? Directrix { get; set; }
		public virtual IfcParameterValue? StartParam { get; set; }
		public virtual IfcParameterValue? EndParam { get; set; }
		public virtual IfcSurface? ReferenceSurface { get; set; }
		public IfcSurfaceCurveSweptAreaSolid() : base()
		{
		}
		public IfcSurfaceCurveSweptAreaSolid(IfcProfileDef? SweptArea, IfcAxis2Placement3D? Position, IfcCurve? Directrix, IfcParameterValue? StartParam, IfcParameterValue? EndParam, IfcSurface? ReferenceSurface) : base (SweptArea, Position)
		{
			this.Directrix = Directrix;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
			this.ReferenceSurface = ReferenceSurface;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptArea,
				Position,
				Directrix,
				StartParam,
				EndParam,
				ReferenceSurface
			};
		}
		public virtual Global.IfcCurve? _Directrix
		{
			get
			{
				return Directrix;
			}
			set
			{
				if(value is IfcCurve val)
				{
					Directrix = val;
				}
				else if(value == null)
				{
					Directrix = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _StartParam
		{
			get
			{
				return StartParam;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					StartParam = val;
				}
				else if(value == null)
				{
					StartParam = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _EndParam
		{
			get
			{
				return EndParam;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					EndParam = val;
				}
				else if(value == null)
				{
					EndParam = null;
				}
			}
		}
		public virtual Global.IfcSurface? _ReferenceSurface
		{
			get
			{
				return ReferenceSurface;
			}
			set
			{
				if(value is IfcSurface val)
				{
					ReferenceSurface = val;
				}
				else if(value == null)
				{
					ReferenceSurface = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceFeature
	/// SUBTYPE OF (IfcFeatureElement);
	/// PredefinedType : OPTIONAL IfcSurfaceFeatureTypeEnum;
	/// WHERE
	/// HasObjectType : NOT EXISTS(PredefinedType) OR (PredefinedType <> IfcSurfaceFeatureTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceFeature : IfcFeatureElement, Global.IfcSurfaceFeature
	{
		public virtual IfcSurfaceFeatureTypeEnum? PredefinedType { get; set; }
		public IfcSurfaceFeature() : base()
		{
		}
		public IfcSurfaceFeature(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcSurfaceFeatureTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcSurfaceFeatureTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSurfaceFeatureTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceOfLinearExtrusion
	/// SUBTYPE OF (IfcSweptSurface);
	/// ExtrudedDirection : IfcDirection;
	/// Depth : IfcLengthMeasure;
	/// DERIVE
	/// ExtrusionAxis : IfcVector := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector (ExtrudedDirection, Depth);
	/// WHERE
	/// DepthGreaterZero : Depth > 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceOfLinearExtrusion : IfcSweptSurface, Global.IfcSurfaceOfLinearExtrusion
	{
		public virtual IfcDirection? ExtrudedDirection { get; set; }
		public virtual IfcLengthMeasure? Depth { get; set; }
		//DERIVE
		public virtual IfcVector? ExtrusionAxis {get {return null;}}
		public IfcSurfaceOfLinearExtrusion() : base()
		{
		}
		public IfcSurfaceOfLinearExtrusion(IfcProfileDef? SweptCurve, IfcAxis2Placement3D? Position, IfcDirection? ExtrudedDirection, IfcLengthMeasure? Depth) : base (SweptCurve, Position)
		{
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptCurve,
				Position,
				ExtrudedDirection,
				Depth
			};
		}
		public virtual Global.IfcDirection? _ExtrudedDirection
		{
			get
			{
				return ExtrudedDirection;
			}
			set
			{
				if(value is IfcDirection val)
				{
					ExtrudedDirection = val;
				}
				else if(value == null)
				{
					ExtrudedDirection = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IfcVector? _ExtrusionAxis
		{
			get
			{
				return ExtrusionAxis;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceOfRevolution
	/// SUBTYPE OF (IfcSweptSurface);
	/// AxisPosition : IfcAxis1Placement;
	/// DERIVE
	/// AxisLine : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(AxisPosition.Location,
	/// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(AxisPosition.Z,1.0));
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceOfRevolution : IfcSweptSurface, Global.IfcSurfaceOfRevolution
	{
		public virtual IfcAxis1Placement? AxisPosition { get; set; }
		//DERIVE
		public virtual IfcLine? AxisLine {get {return null;}}
		public IfcSurfaceOfRevolution() : base()
		{
		}
		public IfcSurfaceOfRevolution(IfcProfileDef? SweptCurve, IfcAxis2Placement3D? Position, IfcAxis1Placement? AxisPosition) : base (SweptCurve, Position)
		{
			this.AxisPosition = AxisPosition;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptCurve,
				Position,
				AxisPosition
			};
		}
		public virtual Global.IfcAxis1Placement? _AxisPosition
		{
			get
			{
				return AxisPosition;
			}
			set
			{
				if(value is IfcAxis1Placement val)
				{
					AxisPosition = val;
				}
				else if(value == null)
				{
					AxisPosition = null;
				}
			}
		}
		public virtual Global.IfcLine? _AxisLine
		{
			get
			{
				return AxisLine;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceReinforcementArea
	/// SUBTYPE OF (IfcStructuralLoadOrResult);
	/// SurfaceReinforcement1 : OPTIONAL LIST [2:3] OF IfcLengthMeasure;
	/// SurfaceReinforcement2 : OPTIONAL LIST [2:3] OF IfcLengthMeasure;
	/// ShearReinforcement : OPTIONAL IfcRatioMeasure;
	/// WHERE
	/// SurfaceAndOrShearAreaSpecified : EXISTS(SurfaceReinforcement1) OR EXISTS(SurfaceReinforcement2) OR EXISTS(ShearReinforcement);
	/// NonnegativeArea1 : (NOT EXISTS(SurfaceReinforcement1)) OR (
	/// (SurfaceReinforcement1[1] >= 0.) AND
	/// (SurfaceReinforcement1[2] >= 0.) AND
	/// ((SIZEOF(SurfaceReinforcement1) = 1) OR (SurfaceReinforcement1[1] >= 0.))
	/// );
	/// NonnegativeArea2 : (NOT EXISTS(SurfaceReinforcement2)) OR (
	/// (SurfaceReinforcement2[1] >= 0.) AND
	/// (SurfaceReinforcement2[2] >= 0.) AND
	/// ((SIZEOF(SurfaceReinforcement2) = 1) OR (SurfaceReinforcement2[1] >= 0.))
	/// );
	/// NonnegativeArea3 : (NOT EXISTS(ShearReinforcement)) OR (ShearReinforcement >= 0.);
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceReinforcementArea : IfcStructuralLoadOrResult, Global.IfcSurfaceReinforcementArea
	{
		public virtual List<IfcLengthMeasure>? SurfaceReinforcement1 { get; set; }
		public virtual List<IfcLengthMeasure>? SurfaceReinforcement2 { get; set; }
		public virtual IfcRatioMeasure? ShearReinforcement { get; set; }
		public IfcSurfaceReinforcementArea() : base()
		{
		}
		public IfcSurfaceReinforcementArea(IfcLabel? Name, List<IfcLengthMeasure>? SurfaceReinforcement1, List<IfcLengthMeasure>? SurfaceReinforcement2, IfcRatioMeasure? ShearReinforcement) : base (Name)
		{
			this.SurfaceReinforcement1 = SurfaceReinforcement1;
			this.SurfaceReinforcement2 = SurfaceReinforcement2;
			this.ShearReinforcement = ShearReinforcement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				SurfaceReinforcement1,
				SurfaceReinforcement2,
				ShearReinforcement
			};
		}
		public virtual List<Global.IfcLengthMeasure>? _SurfaceReinforcement1
		{
			get
			{
				if(SurfaceReinforcement1 != null)
				{
					List<Global.IfcLengthMeasure>? items = new List<Global.IfcLengthMeasure>();
					foreach (IfcLengthMeasure item in SurfaceReinforcement1)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SurfaceReinforcement1 = null;
				}
				else
				{
					SurfaceReinforcement1 = new List<IfcLengthMeasure>();
					foreach(var val in value)
					{
						if(val is IfcLengthMeasure v)
						{
							SurfaceReinforcement1.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcLengthMeasure>? _SurfaceReinforcement2
		{
			get
			{
				if(SurfaceReinforcement2 != null)
				{
					List<Global.IfcLengthMeasure>? items = new List<Global.IfcLengthMeasure>();
					foreach (IfcLengthMeasure item in SurfaceReinforcement2)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SurfaceReinforcement2 = null;
				}
				else
				{
					SurfaceReinforcement2 = new List<IfcLengthMeasure>();
					foreach(var val in value)
					{
						if(val is IfcLengthMeasure v)
						{
							SurfaceReinforcement2.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcRatioMeasure? _ShearReinforcement
		{
			get
			{
				return ShearReinforcement;
			}
			set
			{
				if(value is IfcRatioMeasure val)
				{
					ShearReinforcement = val;
				}
				else if(value == null)
				{
					ShearReinforcement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// Side : IfcSurfaceSide;
	/// Styles : SET [1:5] OF IfcSurfaceStyleElementSelect;
	/// WHERE
	/// MaxOneShading : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC4.IFCSURFACESTYLESHADING' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// MaxOneLighting : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC4.IFCSURFACESTYLELIGHTING' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// MaxOneRefraction : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC4.IFCSURFACESTYLEREFRACTION' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// MaxOneTextures : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC4.IFCSURFACESTYLEWITHTEXTURES' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// MaxOneExtDefined : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC4.IFCEXTERNALLYDEFINEDSURFACESTYLE' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyle : IfcPresentationStyle, IfcPresentationStyleSelect, Global.IfcSurfaceStyle
	{
		public virtual IfcSurfaceSide? Side { get; set; }
		public virtual List<IfcSurfaceStyleElementSelect>? Styles { get; set; }
		public IfcSurfaceStyle() : base()
		{
		}
		public IfcSurfaceStyle(IfcLabel? Name, IfcSurfaceSide? Side, List<IfcSurfaceStyleElementSelect>? Styles) : base (Name)
		{
			this.Side = Side;
			this.Styles = Styles;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Side,
				Styles
			};
		}
		public virtual Global.IfcSurfaceSide? _Side
		{
			get
			{
				return Side;
			}
			set
			{
				if(value is IfcSurfaceSide val)
				{
					Side = val;
				}
				else if(value == null)
				{
					Side = null;
				}
			}
		}
		public virtual List<Global.IfcSurfaceStyleElementSelect>? _Styles
		{
			get
			{
				if(Styles != null)
				{
					List<Global.IfcSurfaceStyleElementSelect>? items = new List<Global.IfcSurfaceStyleElementSelect>();
					foreach (IfcSurfaceStyleElementSelect item in Styles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Styles = null;
				}
				else
				{
					Styles = new List<IfcSurfaceStyleElementSelect>();
					foreach(var val in value)
					{
						if(val is IfcSurfaceStyleElementSelect v)
						{
							Styles.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleLighting
	/// SUBTYPE OF (IfcPresentationItem);
	/// DiffuseTransmissionColour : IfcColourRgb;
	/// DiffuseReflectionColour : IfcColourRgb;
	/// TransmissionColour : IfcColourRgb;
	/// ReflectanceColour : IfcColourRgb;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyleLighting : IfcPresentationItem, IfcSurfaceStyleElementSelect, Global.IfcSurfaceStyleLighting
	{
		public virtual IfcColourRgb? DiffuseTransmissionColour { get; set; }
		public virtual IfcColourRgb? DiffuseReflectionColour { get; set; }
		public virtual IfcColourRgb? TransmissionColour { get; set; }
		public virtual IfcColourRgb? ReflectanceColour { get; set; }
		public IfcSurfaceStyleLighting() : base()
		{
		}
		public IfcSurfaceStyleLighting(IfcColourRgb? DiffuseTransmissionColour, IfcColourRgb? DiffuseReflectionColour, IfcColourRgb? TransmissionColour, IfcColourRgb? ReflectanceColour) : base ()
		{
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.DiffuseReflectionColour = DiffuseReflectionColour;
			this.TransmissionColour = TransmissionColour;
			this.ReflectanceColour = ReflectanceColour;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				DiffuseTransmissionColour,
				DiffuseReflectionColour,
				TransmissionColour,
				ReflectanceColour
			};
		}
		public virtual Global.IfcColourRgb? _DiffuseTransmissionColour
		{
			get
			{
				return DiffuseTransmissionColour;
			}
			set
			{
				if(value is IfcColourRgb val)
				{
					DiffuseTransmissionColour = val;
				}
				else if(value == null)
				{
					DiffuseTransmissionColour = null;
				}
			}
		}
		public virtual Global.IfcColourRgb? _DiffuseReflectionColour
		{
			get
			{
				return DiffuseReflectionColour;
			}
			set
			{
				if(value is IfcColourRgb val)
				{
					DiffuseReflectionColour = val;
				}
				else if(value == null)
				{
					DiffuseReflectionColour = null;
				}
			}
		}
		public virtual Global.IfcColourRgb? _TransmissionColour
		{
			get
			{
				return TransmissionColour;
			}
			set
			{
				if(value is IfcColourRgb val)
				{
					TransmissionColour = val;
				}
				else if(value == null)
				{
					TransmissionColour = null;
				}
			}
		}
		public virtual Global.IfcColourRgb? _ReflectanceColour
		{
			get
			{
				return ReflectanceColour;
			}
			set
			{
				if(value is IfcColourRgb val)
				{
					ReflectanceColour = val;
				}
				else if(value == null)
				{
					ReflectanceColour = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleRefraction
	/// SUBTYPE OF (IfcPresentationItem);
	/// RefractionIndex : OPTIONAL IfcReal;
	/// DispersionFactor : OPTIONAL IfcReal;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyleRefraction : IfcPresentationItem, IfcSurfaceStyleElementSelect, Global.IfcSurfaceStyleRefraction
	{
		public virtual IfcReal? RefractionIndex { get; set; }
		public virtual IfcReal? DispersionFactor { get; set; }
		public IfcSurfaceStyleRefraction() : base()
		{
		}
		public IfcSurfaceStyleRefraction(IfcReal? RefractionIndex, IfcReal? DispersionFactor) : base ()
		{
			this.RefractionIndex = RefractionIndex;
			this.DispersionFactor = DispersionFactor;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RefractionIndex,
				DispersionFactor
			};
		}
		public virtual Global.IfcReal? _RefractionIndex
		{
			get
			{
				return RefractionIndex;
			}
			set
			{
				if(value is IfcReal val)
				{
					RefractionIndex = val;
				}
				else if(value == null)
				{
					RefractionIndex = null;
				}
			}
		}
		public virtual Global.IfcReal? _DispersionFactor
		{
			get
			{
				return DispersionFactor;
			}
			set
			{
				if(value is IfcReal val)
				{
					DispersionFactor = val;
				}
				else if(value == null)
				{
					DispersionFactor = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleRendering
	/// SUBTYPE OF (IfcSurfaceStyleShading);
	/// DiffuseColour : OPTIONAL IfcColourOrFactor;
	/// TransmissionColour : OPTIONAL IfcColourOrFactor;
	/// DiffuseTransmissionColour : OPTIONAL IfcColourOrFactor;
	/// ReflectionColour : OPTIONAL IfcColourOrFactor;
	/// SpecularColour : OPTIONAL IfcColourOrFactor;
	/// SpecularHighlight : OPTIONAL IfcSpecularHighlightSelect;
	/// ReflectanceMethod : IfcReflectanceMethodEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyleRendering : IfcSurfaceStyleShading, Global.IfcSurfaceStyleRendering
	{
		public virtual IfcColourOrFactor? DiffuseColour { get; set; }
		public virtual IfcColourOrFactor? TransmissionColour { get; set; }
		public virtual IfcColourOrFactor? DiffuseTransmissionColour { get; set; }
		public virtual IfcColourOrFactor? ReflectionColour { get; set; }
		public virtual IfcColourOrFactor? SpecularColour { get; set; }
		public virtual IfcSpecularHighlightSelect? SpecularHighlight { get; set; }
		public virtual IfcReflectanceMethodEnum? ReflectanceMethod { get; set; }
		public IfcSurfaceStyleRendering() : base()
		{
		}
		public IfcSurfaceStyleRendering(IfcColourRgb? SurfaceColour, IfcNormalisedRatioMeasure? Transparency, IfcColourOrFactor? DiffuseColour, IfcColourOrFactor? TransmissionColour, IfcColourOrFactor? DiffuseTransmissionColour, IfcColourOrFactor? ReflectionColour, IfcColourOrFactor? SpecularColour, IfcSpecularHighlightSelect? SpecularHighlight, IfcReflectanceMethodEnum? ReflectanceMethod) : base (SurfaceColour, Transparency)
		{
			this.DiffuseColour = DiffuseColour;
			this.TransmissionColour = TransmissionColour;
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.ReflectionColour = ReflectionColour;
			this.SpecularColour = SpecularColour;
			this.SpecularHighlight = SpecularHighlight;
			this.ReflectanceMethod = ReflectanceMethod;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SurfaceColour,
				Transparency,
				DiffuseColour,
				TransmissionColour,
				DiffuseTransmissionColour,
				ReflectionColour,
				SpecularColour,
				SpecularHighlight,
				ReflectanceMethod
			};
		}
		public virtual Global.IfcColourOrFactor? _DiffuseColour
		{
			get
			{
				return DiffuseColour;
			}
			set
			{
				if(value is IfcColourOrFactor val)
				{
					DiffuseColour = val;
				}
				else if(value == null)
				{
					DiffuseColour = null;
				}
			}
		}
		public virtual Global.IfcColourOrFactor? _TransmissionColour
		{
			get
			{
				return TransmissionColour;
			}
			set
			{
				if(value is IfcColourOrFactor val)
				{
					TransmissionColour = val;
				}
				else if(value == null)
				{
					TransmissionColour = null;
				}
			}
		}
		public virtual Global.IfcColourOrFactor? _DiffuseTransmissionColour
		{
			get
			{
				return DiffuseTransmissionColour;
			}
			set
			{
				if(value is IfcColourOrFactor val)
				{
					DiffuseTransmissionColour = val;
				}
				else if(value == null)
				{
					DiffuseTransmissionColour = null;
				}
			}
		}
		public virtual Global.IfcColourOrFactor? _ReflectionColour
		{
			get
			{
				return ReflectionColour;
			}
			set
			{
				if(value is IfcColourOrFactor val)
				{
					ReflectionColour = val;
				}
				else if(value == null)
				{
					ReflectionColour = null;
				}
			}
		}
		public virtual Global.IfcColourOrFactor? _SpecularColour
		{
			get
			{
				return SpecularColour;
			}
			set
			{
				if(value is IfcColourOrFactor val)
				{
					SpecularColour = val;
				}
				else if(value == null)
				{
					SpecularColour = null;
				}
			}
		}
		public virtual Global.IfcSpecularHighlightSelect? _SpecularHighlight
		{
			get
			{
				return SpecularHighlight;
			}
			set
			{
				if(value is IfcSpecularHighlightSelect val)
				{
					SpecularHighlight = val;
				}
				else if(value == null)
				{
					SpecularHighlight = null;
				}
			}
		}
		public virtual Global.IfcReflectanceMethodEnum? _ReflectanceMethod
		{
			get
			{
				return ReflectanceMethod;
			}
			set
			{
				if(value is IfcReflectanceMethodEnum val)
				{
					ReflectanceMethod = val;
				}
				else if(value == null)
				{
					ReflectanceMethod = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleShading
	/// SUPERTYPE OF (ONEOF
	/// (IfcSurfaceStyleRendering))
	/// SUBTYPE OF (IfcPresentationItem);
	/// SurfaceColour : IfcColourRgb;
	/// Transparency : OPTIONAL IfcNormalisedRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyleShading : IfcPresentationItem, IfcSurfaceStyleElementSelect, Global.IfcSurfaceStyleShading
	{
		public virtual IfcColourRgb? SurfaceColour { get; set; }
		public virtual IfcNormalisedRatioMeasure? Transparency { get; set; }
		public IfcSurfaceStyleShading() : base()
		{
		}
		public IfcSurfaceStyleShading(IfcColourRgb? SurfaceColour, IfcNormalisedRatioMeasure? Transparency) : base ()
		{
			this.SurfaceColour = SurfaceColour;
			this.Transparency = Transparency;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SurfaceColour,
				Transparency
			};
		}
		public virtual Global.IfcColourRgb? _SurfaceColour
		{
			get
			{
				return SurfaceColour;
			}
			set
			{
				if(value is IfcColourRgb val)
				{
					SurfaceColour = val;
				}
				else if(value == null)
				{
					SurfaceColour = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _Transparency
		{
			get
			{
				return Transparency;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					Transparency = val;
				}
				else if(value == null)
				{
					Transparency = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleWithTextures
	/// SUBTYPE OF (IfcPresentationItem);
	/// Textures : LIST [1:?] OF IfcSurfaceTexture;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyleWithTextures : IfcPresentationItem, IfcSurfaceStyleElementSelect, Global.IfcSurfaceStyleWithTextures
	{
		public virtual List<IfcSurfaceTexture>? Textures { get; set; }
		public IfcSurfaceStyleWithTextures() : base()
		{
		}
		public IfcSurfaceStyleWithTextures(List<IfcSurfaceTexture>? Textures) : base ()
		{
			this.Textures = Textures;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Textures
			};
		}
		public virtual List<Global.IfcSurfaceTexture>? _Textures
		{
			get
			{
				if(Textures != null)
				{
					List<Global.IfcSurfaceTexture>? items = new List<Global.IfcSurfaceTexture>();
					foreach (IfcSurfaceTexture item in Textures)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Textures = null;
				}
				else
				{
					Textures = new List<IfcSurfaceTexture>();
					foreach(var val in value)
					{
						if(val is IfcSurfaceTexture v)
						{
							Textures.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceTexture
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBlobTexture
	/// ,IfcImageTexture
	/// ,IfcPixelTexture))
	/// SUBTYPE OF (IfcPresentationItem);
	/// RepeatS : IfcBoolean;
	/// RepeatT : IfcBoolean;
	/// Mode : OPTIONAL IfcIdentifier;
	/// TextureTransform : OPTIONAL IfcCartesianTransformationOperator2D;
	/// Parameter : OPTIONAL LIST [1:?] OF IfcIdentifier;
	/// INVERSE
	/// IsMappedBy : SET [0:?] OF IfcTextureCoordinate FOR Maps;
	/// UsedInStyles : SET [0:?] OF IfcSurfaceStyleWithTextures FOR Textures;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSurfaceTexture : IfcPresentationItem, Global.IfcSurfaceTexture
	{
		public virtual IfcBoolean? RepeatS { get; set; }
		public virtual IfcBoolean? RepeatT { get; set; }
		public virtual IfcIdentifier? Mode { get; set; }
		public virtual IfcCartesianTransformationOperator2D? TextureTransform { get; set; }
		public virtual List<IfcIdentifier>? Parameter { get; set; }
		public List<IfcTextureCoordinate>? IsMappedBy {get{return Model?.GetItems<IfcTextureCoordinate>().Where(x => x.Maps != null && x.Maps.Contains(this)).ToList();}}
		public List<IfcSurfaceStyleWithTextures>? UsedInStyles {get{return Model?.GetItems<IfcSurfaceStyleWithTextures>().Where(x => x.Textures != null && x.Textures.Contains(this)).ToList();}}
		public IfcSurfaceTexture() : base()
		{
		}
		public IfcSurfaceTexture(IfcBoolean? RepeatS, IfcBoolean? RepeatT, IfcIdentifier? Mode, IfcCartesianTransformationOperator2D? TextureTransform, List<IfcIdentifier>? Parameter) : base ()
		{
			this.RepeatS = RepeatS;
			this.RepeatT = RepeatT;
			this.Mode = Mode;
			this.TextureTransform = TextureTransform;
			this.Parameter = Parameter;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RepeatS,
				RepeatT,
				Mode,
				TextureTransform,
				Parameter
			};
		}
		public virtual Global.IfcBoolean? _RepeatS
		{
			get
			{
				return RepeatS;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					RepeatS = val;
				}
				else if(value == null)
				{
					RepeatS = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _RepeatT
		{
			get
			{
				return RepeatT;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					RepeatT = val;
				}
				else if(value == null)
				{
					RepeatT = null;
				}
			}
		}
		public virtual Global.IfcIdentifier? _Mode
		{
			get
			{
				return Mode;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Mode = val;
				}
				else if(value == null)
				{
					Mode = null;
				}
			}
		}
		public virtual Global.IfcCartesianTransformationOperator2D? _TextureTransform
		{
			get
			{
				return TextureTransform;
			}
			set
			{
				if(value is IfcCartesianTransformationOperator2D val)
				{
					TextureTransform = val;
				}
				else if(value == null)
				{
					TextureTransform = null;
				}
			}
		}
		public virtual List<Global.IfcIdentifier>? _Parameter
		{
			get
			{
				if(Parameter != null)
				{
					List<Global.IfcIdentifier>? items = new List<Global.IfcIdentifier>();
					foreach (IfcIdentifier item in Parameter)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Parameter = null;
				}
				else
				{
					Parameter = new List<IfcIdentifier>();
					foreach(var val in value)
					{
						if(val is IfcIdentifier v)
						{
							Parameter.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcTextureCoordinate>? _IsMappedBy
		{
			get
			{
				if(IsMappedBy != null)
				{
					List<Global.IfcTextureCoordinate>? items = new List<Global.IfcTextureCoordinate>();
					foreach (IfcTextureCoordinate item in IsMappedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcSurfaceStyleWithTextures>? _UsedInStyles
		{
			get
			{
				if(UsedInStyles != null)
				{
					List<Global.IfcSurfaceStyleWithTextures>? items = new List<Global.IfcSurfaceStyleWithTextures>();
					foreach (IfcSurfaceStyleWithTextures item in UsedInStyles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSweptAreaSolid
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcExtrudedAreaSolid
	/// ,IfcFixedReferenceSweptAreaSolid
	/// ,IfcRevolvedAreaSolid
	/// ,IfcSurfaceCurveSweptAreaSolid))
	/// SUBTYPE OF (IfcSolidModel);
	/// SweptArea : IfcProfileDef;
	/// Position : OPTIONAL IfcAxis2Placement3D;
	/// WHERE
	/// SweptAreaType : SweptArea.ProfileType = IfcProfileTypeEnum.Area;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSweptAreaSolid : IfcSolidModel, Global.IfcSweptAreaSolid
	{
		public virtual IfcProfileDef? SweptArea { get; set; }
		public virtual IfcAxis2Placement3D? Position { get; set; }
		public IfcSweptAreaSolid() : base()
		{
		}
		public IfcSweptAreaSolid(IfcProfileDef? SweptArea, IfcAxis2Placement3D? Position) : base ()
		{
			this.SweptArea = SweptArea;
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptArea,
				Position
			};
		}
		public virtual Global.IfcProfileDef? _SweptArea
		{
			get
			{
				return SweptArea;
			}
			set
			{
				if(value is IfcProfileDef val)
				{
					SweptArea = val;
				}
				else if(value == null)
				{
					SweptArea = null;
				}
			}
		}
		public virtual Global.IfcAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IfcAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSweptDiskSolid
	/// SUPERTYPE OF (ONEOF
	/// (IfcSweptDiskSolidPolygonal))
	/// SUBTYPE OF (IfcSolidModel);
	/// Directrix : IfcCurve;
	/// Radius : IfcPositiveLengthMeasure;
	/// InnerRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// StartParam : OPTIONAL IfcParameterValue;
	/// EndParam : OPTIONAL IfcParameterValue;
	/// WHERE
	/// DirectrixDim : Directrix.Dim = 3;
	/// InnerRadiusSize : (NOT EXISTS(InnerRadius)) OR (Radius > InnerRadius);
	/// DirectrixBounded : (EXISTS(StartParam) AND EXISTS(EndParam)) OR
	/// (SIZEOF(['IFC4.IFCCONIC', 'IFC4.IFCBOUNDEDCURVE'] * TYPEOF(Directrix)) = 1);
	/// END_ENTITY;
	/// <summary>
	public class IfcSweptDiskSolid : IfcSolidModel, Global.IfcSweptDiskSolid
	{
		public virtual IfcCurve? Directrix { get; set; }
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public virtual IfcPositiveLengthMeasure? InnerRadius { get; set; }
		public virtual IfcParameterValue? StartParam { get; set; }
		public virtual IfcParameterValue? EndParam { get; set; }
		public IfcSweptDiskSolid() : base()
		{
		}
		public IfcSweptDiskSolid(IfcCurve? Directrix, IfcPositiveLengthMeasure? Radius, IfcPositiveLengthMeasure? InnerRadius, IfcParameterValue? StartParam, IfcParameterValue? EndParam) : base ()
		{
			this.Directrix = Directrix;
			this.Radius = Radius;
			this.InnerRadius = InnerRadius;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Directrix,
				Radius,
				InnerRadius,
				StartParam,
				EndParam
			};
		}
		public virtual Global.IfcCurve? _Directrix
		{
			get
			{
				return Directrix;
			}
			set
			{
				if(value is IfcCurve val)
				{
					Directrix = val;
				}
				else if(value == null)
				{
					Directrix = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _InnerRadius
		{
			get
			{
				return InnerRadius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					InnerRadius = val;
				}
				else if(value == null)
				{
					InnerRadius = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _StartParam
		{
			get
			{
				return StartParam;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					StartParam = val;
				}
				else if(value == null)
				{
					StartParam = null;
				}
			}
		}
		public virtual Global.IfcParameterValue? _EndParam
		{
			get
			{
				return EndParam;
			}
			set
			{
				if(value is IfcParameterValue val)
				{
					EndParam = val;
				}
				else if(value == null)
				{
					EndParam = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSweptDiskSolidPolygonal
	/// SUBTYPE OF (IfcSweptDiskSolid);
	/// FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// CorrectRadii : NOT(EXISTS(FilletRadius)) OR (FilletRadius >= SELF\IfcSweptDiskSolid.Radius);
	/// DirectrixIsPolyline : ('IFC4.IFCPOLYLINE' IN TYPEOF(SELF\IfcSweptDiskSolid.Directrix)) OR
	/// (('IFC4.IFCINDEXEDPOLYCURVE' IN TYPEOF(SELF\IfcSweptDiskSolid.Directrix)) AND NOT(EXISTS(SELF\IfcSweptDiskSolid.Directrix.Segments)));
	/// END_ENTITY;
	/// <summary>
	public class IfcSweptDiskSolidPolygonal : IfcSweptDiskSolid, Global.IfcSweptDiskSolidPolygonal
	{
		public virtual IfcPositiveLengthMeasure? FilletRadius { get; set; }
		public IfcSweptDiskSolidPolygonal() : base()
		{
		}
		public IfcSweptDiskSolidPolygonal(IfcCurve? Directrix, IfcPositiveLengthMeasure? Radius, IfcPositiveLengthMeasure? InnerRadius, IfcParameterValue? StartParam, IfcParameterValue? EndParam, IfcPositiveLengthMeasure? FilletRadius) : base (Directrix, Radius, InnerRadius, StartParam, EndParam)
		{
			this.FilletRadius = FilletRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Directrix,
				Radius,
				InnerRadius,
				StartParam,
				EndParam,
				FilletRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _FilletRadius
		{
			get
			{
				return FilletRadius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FilletRadius = val;
				}
				else if(value == null)
				{
					FilletRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSweptSurface
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcSurfaceOfLinearExtrusion
	/// ,IfcSurfaceOfRevolution))
	/// SUBTYPE OF (IfcSurface);
	/// SweptCurve : IfcProfileDef;
	/// Position : OPTIONAL IfcAxis2Placement3D;
	/// WHERE
	/// SweptCurveType : SweptCurve.ProfileType = IfcProfileTypeEnum.Curve;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSweptSurface : IfcSurface, Global.IfcSweptSurface
	{
		public virtual IfcProfileDef? SweptCurve { get; set; }
		public virtual IfcAxis2Placement3D? Position { get; set; }
		public IfcSweptSurface() : base()
		{
		}
		public IfcSweptSurface(IfcProfileDef? SweptCurve, IfcAxis2Placement3D? Position) : base ()
		{
			this.SweptCurve = SweptCurve;
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptCurve,
				Position
			};
		}
		public virtual Global.IfcProfileDef? _SweptCurve
		{
			get
			{
				return SweptCurve;
			}
			set
			{
				if(value is IfcProfileDef val)
				{
					SweptCurve = val;
				}
				else if(value == null)
				{
					SweptCurve = null;
				}
			}
		}
		public virtual Global.IfcAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IfcAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSwitchingDevice
	/// SUBTYPE OF (IfcFlowController);
	/// PredefinedType : OPTIONAL IfcSwitchingDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSwitchingDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSwitchingDeviceTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSWITCHINGDEVICETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSwitchingDevice : IfcFlowController, Global.IfcSwitchingDevice
	{
		public virtual IfcSwitchingDeviceTypeEnum? PredefinedType { get; set; }
		public IfcSwitchingDevice() : base()
		{
		}
		public IfcSwitchingDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcSwitchingDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcSwitchingDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSwitchingDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSwitchingDeviceType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcSwitchingDeviceTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcSwitchingDeviceTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSwitchingDeviceTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSwitchingDeviceType : IfcFlowControllerType, Global.IfcSwitchingDeviceType
	{
		public virtual IfcSwitchingDeviceTypeEnum? PredefinedType { get; set; }
		public IfcSwitchingDeviceType() : base()
		{
		}
		public IfcSwitchingDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSwitchingDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSwitchingDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSwitchingDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSystem
	/// SUPERTYPE OF (ONEOF
	/// (IfcBuildingSystem
	/// ,IfcDistributionSystem
	/// ,IfcStructuralAnalysisModel
	/// ,IfcZone))
	/// SUBTYPE OF (IfcGroup);
	/// INVERSE
	/// ServicesBuildings : SET [0:1] OF IfcRelServicesBuildings FOR RelatingSystem;
	/// END_ENTITY;
	/// <summary>
	public class IfcSystem : IfcGroup, Global.IfcSystem
	{
		public List<IfcRelServicesBuildings>? ServicesBuildings {get{return Model?.GetItems<IfcRelServicesBuildings>().Where(x => x.RelatingSystem != null && x.RelatingSystem == this).ToList();}}
		public IfcSystem() : base()
		{
		}
		public IfcSystem(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
		public virtual List<Global.IfcRelServicesBuildings>? _ServicesBuildings
		{
			get
			{
				if(ServicesBuildings != null)
				{
					List<Global.IfcRelServicesBuildings>? items = new List<Global.IfcRelServicesBuildings>();
					foreach (IfcRelServicesBuildings item in ServicesBuildings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSystemFurnitureElement
	/// SUBTYPE OF (IfcFurnishingElement);
	/// PredefinedType : OPTIONAL IfcSystemFurnitureElementTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSystemFurnitureElementTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSystemFurnitureElementTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCSYSTEMFURNITUREELEMENTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSystemFurnitureElement : IfcFurnishingElement, Global.IfcSystemFurnitureElement
	{
		public virtual IfcSystemFurnitureElementTypeEnum? PredefinedType { get; set; }
		public IfcSystemFurnitureElement() : base()
		{
		}
		public IfcSystemFurnitureElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcSystemFurnitureElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcSystemFurnitureElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSystemFurnitureElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSystemFurnitureElementType
	/// SUBTYPE OF (IfcFurnishingElementType);
	/// PredefinedType : OPTIONAL IfcSystemFurnitureElementTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcSystemFurnitureElementTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSystemFurnitureElementTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSystemFurnitureElementType : IfcFurnishingElementType, Global.IfcSystemFurnitureElementType
	{
		public virtual IfcSystemFurnitureElementTypeEnum? PredefinedType { get; set; }
		public IfcSystemFurnitureElementType() : base()
		{
		}
		public IfcSystemFurnitureElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSystemFurnitureElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSystemFurnitureElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcSystemFurnitureElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// FlangeWidth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// FlangeEdgeRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// WebEdgeRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// WebSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// FlangeSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// WHERE
	/// ValidFlangeThickness : FlangeThickness < Depth;
	/// ValidWebThickness : WebThickness < FlangeWidth;
	/// END_ENTITY;
	/// <summary>
	public class IfcTShapeProfileDef : IfcParameterizedProfileDef, Global.IfcTShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IfcNonNegativeLengthMeasure? FilletRadius { get; set; }
		public virtual IfcNonNegativeLengthMeasure? FlangeEdgeRadius { get; set; }
		public virtual IfcNonNegativeLengthMeasure? WebEdgeRadius { get; set; }
		public virtual IfcPlaneAngleMeasure? WebSlope { get; set; }
		public virtual IfcPlaneAngleMeasure? FlangeSlope { get; set; }
		public IfcTShapeProfileDef() : base()
		{
		}
		public IfcTShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Depth, IfcPositiveLengthMeasure? FlangeWidth, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? FlangeThickness, IfcNonNegativeLengthMeasure? FilletRadius, IfcNonNegativeLengthMeasure? FlangeEdgeRadius, IfcNonNegativeLengthMeasure? WebEdgeRadius, IfcPlaneAngleMeasure? WebSlope, IfcPlaneAngleMeasure? FlangeSlope) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.FlangeEdgeRadius = FlangeEdgeRadius;
			this.WebEdgeRadius = WebEdgeRadius;
			this.WebSlope = WebSlope;
			this.FlangeSlope = FlangeSlope;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Depth,
				FlangeWidth,
				WebThickness,
				FlangeThickness,
				FilletRadius,
				FlangeEdgeRadius,
				WebEdgeRadius,
				WebSlope,
				FlangeSlope
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _FlangeWidth
		{
			get
			{
				return FlangeWidth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FlangeWidth = val;
				}
				else if(value == null)
				{
					FlangeWidth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _WebThickness
		{
			get
			{
				return WebThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					WebThickness = val;
				}
				else if(value == null)
				{
					WebThickness = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _FlangeThickness
		{
			get
			{
				return FlangeThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FlangeThickness = val;
				}
				else if(value == null)
				{
					FlangeThickness = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _FilletRadius
		{
			get
			{
				return FilletRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					FilletRadius = val;
				}
				else if(value == null)
				{
					FilletRadius = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _FlangeEdgeRadius
		{
			get
			{
				return FlangeEdgeRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					FlangeEdgeRadius = val;
				}
				else if(value == null)
				{
					FlangeEdgeRadius = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _WebEdgeRadius
		{
			get
			{
				return WebEdgeRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					WebEdgeRadius = val;
				}
				else if(value == null)
				{
					WebEdgeRadius = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _WebSlope
		{
			get
			{
				return WebSlope;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					WebSlope = val;
				}
				else if(value == null)
				{
					WebSlope = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _FlangeSlope
		{
			get
			{
				return FlangeSlope;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					FlangeSlope = val;
				}
				else if(value == null)
				{
					FlangeSlope = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTable;
	/// Name : OPTIONAL IfcLabel;
	/// Rows : OPTIONAL LIST [1:?] OF IfcTableRow;
	/// Columns : OPTIONAL LIST [1:?] OF IfcTableColumn;
	/// DERIVE
	/// NumberOfCellsInRow : IfcInteger := HIINDEX(Rows[1].RowCells);
	/// NumberOfHeadings : IfcInteger := SIZEOF(QUERY( Temp <* Rows | Temp.IsHeading));
	/// NumberOfDataRows : IfcInteger := SIZEOF(QUERY( Temp <* Rows | NOT(Temp.IsHeading)));
	/// WHERE
	/// WR1 : SIZEOF(QUERY( Temp <* Rows | HIINDEX(Temp.RowCells) <> HIINDEX(Rows[1].RowCells))) = 0;
	/// WR2 : { 0 <= NumberOfHeadings <= 1 };
	/// END_ENTITY;
	/// <summary>
	public class IfcTable : Ifc_Entity, IfcMetricValueSelect, IfcObjectReferenceSelect, Global.IfcTable
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual List<IfcTableRow>? Rows { get; set; }
		public virtual List<IfcTableColumn>? Columns { get; set; }
		//DERIVE
		public virtual IfcInteger? NumberOfCellsInRow {get {return null;}}
		//DERIVE
		public virtual IfcInteger? NumberOfHeadings {get {return null;}}
		//DERIVE
		public virtual IfcInteger? NumberOfDataRows {get {return null;}}
		public IfcTable() : base()
		{
		}
		public IfcTable(IfcLabel? Name, List<IfcTableRow>? Rows, List<IfcTableColumn>? Columns) : base ()
		{
			this.Name = Name;
			this.Rows = Rows;
			this.Columns = Columns;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Rows,
				Columns
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual List<Global.IfcTableRow>? _Rows
		{
			get
			{
				if(Rows != null)
				{
					List<Global.IfcTableRow>? items = new List<Global.IfcTableRow>();
					foreach (IfcTableRow item in Rows)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Rows = null;
				}
				else
				{
					Rows = new List<IfcTableRow>();
					foreach(var val in value)
					{
						if(val is IfcTableRow v)
						{
							Rows.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcTableColumn>? _Columns
		{
			get
			{
				if(Columns != null)
				{
					List<Global.IfcTableColumn>? items = new List<Global.IfcTableColumn>();
					foreach (IfcTableColumn item in Columns)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Columns = null;
				}
				else
				{
					Columns = new List<IfcTableColumn>();
					foreach(var val in value)
					{
						if(val is IfcTableColumn v)
						{
							Columns.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcInteger? _NumberOfCellsInRow
		{
			get
			{
				return NumberOfCellsInRow;
			}
		}
		public virtual Global.IfcInteger? _NumberOfHeadings
		{
			get
			{
				return NumberOfHeadings;
			}
		}
		public virtual Global.IfcInteger? _NumberOfDataRows
		{
			get
			{
				return NumberOfDataRows;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTableColumn;
	/// Identifier : OPTIONAL IfcIdentifier;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Unit : OPTIONAL IfcUnit;
	/// ReferencePath : OPTIONAL IfcReference;
	/// END_ENTITY;
	/// <summary>
	public class IfcTableColumn : Ifc_Entity, Global.IfcTableColumn
	{
		public virtual IfcIdentifier? Identifier { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcUnit? Unit { get; set; }
		public virtual IfcReference? ReferencePath { get; set; }
		public IfcTableColumn() : base()
		{
		}
		public IfcTableColumn(IfcIdentifier? Identifier, IfcLabel? Name, IfcText? Description, IfcUnit? Unit, IfcReference? ReferencePath) : base ()
		{
			this.Identifier = Identifier;
			this.Name = Name;
			this.Description = Description;
			this.Unit = Unit;
			this.ReferencePath = ReferencePath;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Identifier,
				Name,
				Description,
				Unit,
				ReferencePath
			};
		}
		public virtual Global.IfcIdentifier? _Identifier
		{
			get
			{
				return Identifier;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identifier = val;
				}
				else if(value == null)
				{
					Identifier = null;
				}
			}
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IfcUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
		public virtual Global.IfcReference? _ReferencePath
		{
			get
			{
				return ReferencePath;
			}
			set
			{
				if(value is IfcReference val)
				{
					ReferencePath = val;
				}
				else if(value == null)
				{
					ReferencePath = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTableRow;
	/// RowCells : OPTIONAL LIST [1:?] OF IfcValue;
	/// IsHeading : OPTIONAL IfcBoolean;
	/// END_ENTITY;
	/// <summary>
	public class IfcTableRow : Ifc_Entity, Global.IfcTableRow
	{
		public virtual List<IfcValue>? RowCells { get; set; }
		public virtual IfcBoolean? IsHeading { get; set; }
		public IfcTableRow() : base()
		{
		}
		public IfcTableRow(List<IfcValue>? RowCells, IfcBoolean? IsHeading) : base ()
		{
			this.RowCells = RowCells;
			this.IsHeading = IsHeading;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RowCells,
				IsHeading
			};
		}
		public virtual List<Global.IfcValue>? _RowCells
		{
			get
			{
				if(RowCells != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in RowCells)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RowCells = null;
				}
				else
				{
					RowCells = new List<IfcValue>();
					foreach(var val in value)
					{
						if(val is IfcValue v)
						{
							RowCells.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcBoolean? _IsHeading
		{
			get
			{
				return IsHeading;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					IsHeading = val;
				}
				else if(value == null)
				{
					IsHeading = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTank
	/// SUBTYPE OF (IfcFlowStorageDevice);
	/// PredefinedType : OPTIONAL IfcTankTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcTankTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTankTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCTANKTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTank : IfcFlowStorageDevice, Global.IfcTank
	{
		public virtual IfcTankTypeEnum? PredefinedType { get; set; }
		public IfcTank() : base()
		{
		}
		public IfcTank(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcTankTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcTankTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTankTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTankType
	/// SUBTYPE OF (IfcFlowStorageDeviceType);
	/// PredefinedType : IfcTankTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcTankTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTankTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTankType : IfcFlowStorageDeviceType, Global.IfcTankType
	{
		public virtual IfcTankTypeEnum? PredefinedType { get; set; }
		public IfcTankType() : base()
		{
		}
		public IfcTankType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcTankTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcTankTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTankTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTask
	/// SUBTYPE OF (IfcProcess);
	/// Status : OPTIONAL IfcLabel;
	/// WorkMethod : OPTIONAL IfcLabel;
	/// IsMilestone : IfcBoolean;
	/// Priority : OPTIONAL IfcInteger;
	/// TaskTime : OPTIONAL IfcTaskTime;
	/// PredefinedType : OPTIONAL IfcTaskTypeEnum;
	/// WHERE
	/// HasName : EXISTS(SELF\IfcRoot.Name);
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR (PredefinedType <> IfcTaskTypeEnum.USERDEFINED) OR ((PredefinedType = IfcTaskTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTask : IfcProcess, Global.IfcTask
	{
		public virtual IfcLabel? Status { get; set; }
		public virtual IfcLabel? WorkMethod { get; set; }
		public virtual IfcBoolean? IsMilestone { get; set; }
		public virtual IfcInteger? Priority { get; set; }
		public virtual IfcTaskTime? TaskTime { get; set; }
		public virtual IfcTaskTypeEnum? PredefinedType { get; set; }
		public IfcTask() : base()
		{
		}
		public IfcTask(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? Status, IfcLabel? WorkMethod, IfcBoolean? IsMilestone, IfcInteger? Priority, IfcTaskTime? TaskTime, IfcTaskTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription)
		{
			this.Status = Status;
			this.WorkMethod = WorkMethod;
			this.IsMilestone = IsMilestone;
			this.Priority = Priority;
			this.TaskTime = TaskTime;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				LongDescription,
				Status,
				WorkMethod,
				IsMilestone,
				Priority,
				TaskTime,
				PredefinedType
			};
		}
		public virtual Global.IfcLabel? _Status
		{
			get
			{
				return Status;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Status = val;
				}
				else if(value == null)
				{
					Status = null;
				}
			}
		}
		public virtual Global.IfcLabel? _WorkMethod
		{
			get
			{
				return WorkMethod;
			}
			set
			{
				if(value is IfcLabel val)
				{
					WorkMethod = val;
				}
				else if(value == null)
				{
					WorkMethod = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _IsMilestone
		{
			get
			{
				return IsMilestone;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					IsMilestone = val;
				}
				else if(value == null)
				{
					IsMilestone = null;
				}
			}
		}
		public virtual Global.IfcInteger? _Priority
		{
			get
			{
				return Priority;
			}
			set
			{
				if(value is IfcInteger val)
				{
					Priority = val;
				}
				else if(value == null)
				{
					Priority = null;
				}
			}
		}
		public virtual Global.IfcTaskTime? _TaskTime
		{
			get
			{
				return TaskTime;
			}
			set
			{
				if(value is IfcTaskTime val)
				{
					TaskTime = val;
				}
				else if(value == null)
				{
					TaskTime = null;
				}
			}
		}
		public virtual Global.IfcTaskTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTaskTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTaskTime
	/// SUPERTYPE OF (ONEOF
	/// (IfcTaskTimeRecurring))
	/// SUBTYPE OF (IfcSchedulingTime);
	/// DurationType : OPTIONAL IfcTaskDurationEnum;
	/// ScheduleDuration : OPTIONAL IfcDuration;
	/// ScheduleStart : OPTIONAL IfcDateTime;
	/// ScheduleFinish : OPTIONAL IfcDateTime;
	/// EarlyStart : OPTIONAL IfcDateTime;
	/// EarlyFinish : OPTIONAL IfcDateTime;
	/// LateStart : OPTIONAL IfcDateTime;
	/// LateFinish : OPTIONAL IfcDateTime;
	/// FreeFloat : OPTIONAL IfcDuration;
	/// TotalFloat : OPTIONAL IfcDuration;
	/// IsCritical : OPTIONAL IfcBoolean;
	/// StatusTime : OPTIONAL IfcDateTime;
	/// ActualDuration : OPTIONAL IfcDuration;
	/// ActualStart : OPTIONAL IfcDateTime;
	/// ActualFinish : OPTIONAL IfcDateTime;
	/// RemainingTime : OPTIONAL IfcDuration;
	/// Completion : OPTIONAL IfcPositiveRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcTaskTime : IfcSchedulingTime, Global.IfcTaskTime
	{
		public virtual IfcTaskDurationEnum? DurationType { get; set; }
		public virtual IfcDuration? ScheduleDuration { get; set; }
		public virtual IfcDateTime? ScheduleStart { get; set; }
		public virtual IfcDateTime? ScheduleFinish { get; set; }
		public virtual IfcDateTime? EarlyStart { get; set; }
		public virtual IfcDateTime? EarlyFinish { get; set; }
		public virtual IfcDateTime? LateStart { get; set; }
		public virtual IfcDateTime? LateFinish { get; set; }
		public virtual IfcDuration? FreeFloat { get; set; }
		public virtual IfcDuration? TotalFloat { get; set; }
		public virtual IfcBoolean? IsCritical { get; set; }
		public virtual IfcDateTime? StatusTime { get; set; }
		public virtual IfcDuration? ActualDuration { get; set; }
		public virtual IfcDateTime? ActualStart { get; set; }
		public virtual IfcDateTime? ActualFinish { get; set; }
		public virtual IfcDuration? RemainingTime { get; set; }
		public virtual IfcPositiveRatioMeasure? Completion { get; set; }
		public IfcTaskTime() : base()
		{
		}
		public IfcTaskTime(IfcLabel? Name, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcTaskDurationEnum? DurationType, IfcDuration? ScheduleDuration, IfcDateTime? ScheduleStart, IfcDateTime? ScheduleFinish, IfcDateTime? EarlyStart, IfcDateTime? EarlyFinish, IfcDateTime? LateStart, IfcDateTime? LateFinish, IfcDuration? FreeFloat, IfcDuration? TotalFloat, IfcBoolean? IsCritical, IfcDateTime? StatusTime, IfcDuration? ActualDuration, IfcDateTime? ActualStart, IfcDateTime? ActualFinish, IfcDuration? RemainingTime, IfcPositiveRatioMeasure? Completion) : base (Name, DataOrigin, UserDefinedDataOrigin)
		{
			this.DurationType = DurationType;
			this.ScheduleDuration = ScheduleDuration;
			this.ScheduleStart = ScheduleStart;
			this.ScheduleFinish = ScheduleFinish;
			this.EarlyStart = EarlyStart;
			this.EarlyFinish = EarlyFinish;
			this.LateStart = LateStart;
			this.LateFinish = LateFinish;
			this.FreeFloat = FreeFloat;
			this.TotalFloat = TotalFloat;
			this.IsCritical = IsCritical;
			this.StatusTime = StatusTime;
			this.ActualDuration = ActualDuration;
			this.ActualStart = ActualStart;
			this.ActualFinish = ActualFinish;
			this.RemainingTime = RemainingTime;
			this.Completion = Completion;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DataOrigin,
				UserDefinedDataOrigin,
				DurationType,
				ScheduleDuration,
				ScheduleStart,
				ScheduleFinish,
				EarlyStart,
				EarlyFinish,
				LateStart,
				LateFinish,
				FreeFloat,
				TotalFloat,
				IsCritical,
				StatusTime,
				ActualDuration,
				ActualStart,
				ActualFinish,
				RemainingTime,
				Completion
			};
		}
		public virtual Global.IfcTaskDurationEnum? _DurationType
		{
			get
			{
				return DurationType;
			}
			set
			{
				if(value is IfcTaskDurationEnum val)
				{
					DurationType = val;
				}
				else if(value == null)
				{
					DurationType = null;
				}
			}
		}
		public virtual Global.IfcDuration? _ScheduleDuration
		{
			get
			{
				return ScheduleDuration;
			}
			set
			{
				if(value is IfcDuration val)
				{
					ScheduleDuration = val;
				}
				else if(value == null)
				{
					ScheduleDuration = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _ScheduleStart
		{
			get
			{
				return ScheduleStart;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					ScheduleStart = val;
				}
				else if(value == null)
				{
					ScheduleStart = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _ScheduleFinish
		{
			get
			{
				return ScheduleFinish;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					ScheduleFinish = val;
				}
				else if(value == null)
				{
					ScheduleFinish = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _EarlyStart
		{
			get
			{
				return EarlyStart;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					EarlyStart = val;
				}
				else if(value == null)
				{
					EarlyStart = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _EarlyFinish
		{
			get
			{
				return EarlyFinish;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					EarlyFinish = val;
				}
				else if(value == null)
				{
					EarlyFinish = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _LateStart
		{
			get
			{
				return LateStart;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					LateStart = val;
				}
				else if(value == null)
				{
					LateStart = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _LateFinish
		{
			get
			{
				return LateFinish;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					LateFinish = val;
				}
				else if(value == null)
				{
					LateFinish = null;
				}
			}
		}
		public virtual Global.IfcDuration? _FreeFloat
		{
			get
			{
				return FreeFloat;
			}
			set
			{
				if(value is IfcDuration val)
				{
					FreeFloat = val;
				}
				else if(value == null)
				{
					FreeFloat = null;
				}
			}
		}
		public virtual Global.IfcDuration? _TotalFloat
		{
			get
			{
				return TotalFloat;
			}
			set
			{
				if(value is IfcDuration val)
				{
					TotalFloat = val;
				}
				else if(value == null)
				{
					TotalFloat = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _IsCritical
		{
			get
			{
				return IsCritical;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					IsCritical = val;
				}
				else if(value == null)
				{
					IsCritical = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _StatusTime
		{
			get
			{
				return StatusTime;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					StatusTime = val;
				}
				else if(value == null)
				{
					StatusTime = null;
				}
			}
		}
		public virtual Global.IfcDuration? _ActualDuration
		{
			get
			{
				return ActualDuration;
			}
			set
			{
				if(value is IfcDuration val)
				{
					ActualDuration = val;
				}
				else if(value == null)
				{
					ActualDuration = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _ActualStart
		{
			get
			{
				return ActualStart;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					ActualStart = val;
				}
				else if(value == null)
				{
					ActualStart = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _ActualFinish
		{
			get
			{
				return ActualFinish;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					ActualFinish = val;
				}
				else if(value == null)
				{
					ActualFinish = null;
				}
			}
		}
		public virtual Global.IfcDuration? _RemainingTime
		{
			get
			{
				return RemainingTime;
			}
			set
			{
				if(value is IfcDuration val)
				{
					RemainingTime = val;
				}
				else if(value == null)
				{
					RemainingTime = null;
				}
			}
		}
		public virtual Global.IfcPositiveRatioMeasure? _Completion
		{
			get
			{
				return Completion;
			}
			set
			{
				if(value is IfcPositiveRatioMeasure val)
				{
					Completion = val;
				}
				else if(value == null)
				{
					Completion = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTaskTimeRecurring
	/// SUBTYPE OF (IfcTaskTime);
	/// Recurrence : IfcRecurrencePattern;
	/// END_ENTITY;
	/// <summary>
	public class IfcTaskTimeRecurring : IfcTaskTime, Global.IfcTaskTimeRecurring
	{
		public virtual IfcRecurrencePattern? Recurrence { get; set; }
		public IfcTaskTimeRecurring() : base()
		{
		}
		public IfcTaskTimeRecurring(IfcLabel? Name, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcTaskDurationEnum? DurationType, IfcDuration? ScheduleDuration, IfcDateTime? ScheduleStart, IfcDateTime? ScheduleFinish, IfcDateTime? EarlyStart, IfcDateTime? EarlyFinish, IfcDateTime? LateStart, IfcDateTime? LateFinish, IfcDuration? FreeFloat, IfcDuration? TotalFloat, IfcBoolean? IsCritical, IfcDateTime? StatusTime, IfcDuration? ActualDuration, IfcDateTime? ActualStart, IfcDateTime? ActualFinish, IfcDuration? RemainingTime, IfcPositiveRatioMeasure? Completion, IfcRecurrencePattern? Recurrence) : base (Name, DataOrigin, UserDefinedDataOrigin, DurationType, ScheduleDuration, ScheduleStart, ScheduleFinish, EarlyStart, EarlyFinish, LateStart, LateFinish, FreeFloat, TotalFloat, IsCritical, StatusTime, ActualDuration, ActualStart, ActualFinish, RemainingTime, Completion)
		{
			this.Recurrence = Recurrence;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DataOrigin,
				UserDefinedDataOrigin,
				DurationType,
				ScheduleDuration,
				ScheduleStart,
				ScheduleFinish,
				EarlyStart,
				EarlyFinish,
				LateStart,
				LateFinish,
				FreeFloat,
				TotalFloat,
				IsCritical,
				StatusTime,
				ActualDuration,
				ActualStart,
				ActualFinish,
				RemainingTime,
				Completion,
				Recurrence
			};
		}
		public virtual Global.IfcRecurrencePattern? _Recurrence
		{
			get
			{
				return Recurrence;
			}
			set
			{
				if(value is IfcRecurrencePattern val)
				{
					Recurrence = val;
				}
				else if(value == null)
				{
					Recurrence = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTaskType
	/// SUBTYPE OF (IfcTypeProcess);
	/// PredefinedType : IfcTaskTypeEnum;
	/// WorkMethod : OPTIONAL IfcLabel;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcTaskTypeEnum.USERDEFINED) OR ((PredefinedType = IfcTaskTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcTypeProcess.ProcessType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTaskType : IfcTypeProcess, Global.IfcTaskType
	{
		public virtual IfcTaskTypeEnum? PredefinedType { get; set; }
		public virtual IfcLabel? WorkMethod { get; set; }
		public IfcTaskType() : base()
		{
		}
		public IfcTaskType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ProcessType, IfcTaskTypeEnum? PredefinedType, IfcLabel? WorkMethod) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType)
		{
			this.PredefinedType = PredefinedType;
			this.WorkMethod = WorkMethod;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ProcessType,
				PredefinedType,
				WorkMethod
			};
		}
		public virtual Global.IfcTaskTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTaskTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _WorkMethod
		{
			get
			{
				return WorkMethod;
			}
			set
			{
				if(value is IfcLabel val)
				{
					WorkMethod = val;
				}
				else if(value == null)
				{
					WorkMethod = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTelecomAddress
	/// SUBTYPE OF (IfcAddress);
	/// TelephoneNumbers : OPTIONAL LIST [1:?] OF IfcLabel;
	/// FacsimileNumbers : OPTIONAL LIST [1:?] OF IfcLabel;
	/// PagerNumber : OPTIONAL IfcLabel;
	/// ElectronicMailAddresses : OPTIONAL LIST [1:?] OF IfcLabel;
	/// WWWHomePageURL : OPTIONAL IfcURIReference;
	/// MessagingIDs : OPTIONAL LIST [1:?] OF IfcURIReference;
	/// WHERE
	/// MinimumDataProvided : EXISTS (TelephoneNumbers) OR
	/// EXISTS (FacsimileNumbers) OR
	/// EXISTS (PagerNumber) OR
	/// EXISTS (ElectronicMailAddresses) OR
	/// EXISTS (WWWHomePageURL) OR
	/// EXISTS (MessagingIDs);
	/// END_ENTITY;
	/// <summary>
	public class IfcTelecomAddress : IfcAddress, Global.IfcTelecomAddress
	{
		public virtual List<IfcLabel>? TelephoneNumbers { get; set; }
		public virtual List<IfcLabel>? FacsimileNumbers { get; set; }
		public virtual IfcLabel? PagerNumber { get; set; }
		public virtual List<IfcLabel>? ElectronicMailAddresses { get; set; }
		public virtual IfcURIReference? WWWHomePageURL { get; set; }
		public virtual List<IfcURIReference>? MessagingIDs { get; set; }
		public IfcTelecomAddress() : base()
		{
		}
		public IfcTelecomAddress(IfcAddressTypeEnum? Purpose, IfcText? Description, IfcLabel? UserDefinedPurpose, List<IfcLabel>? TelephoneNumbers, List<IfcLabel>? FacsimileNumbers, IfcLabel? PagerNumber, List<IfcLabel>? ElectronicMailAddresses, IfcURIReference? WWWHomePageURL, List<IfcURIReference>? MessagingIDs) : base (Purpose, Description, UserDefinedPurpose)
		{
			this.TelephoneNumbers = TelephoneNumbers;
			this.FacsimileNumbers = FacsimileNumbers;
			this.PagerNumber = PagerNumber;
			this.ElectronicMailAddresses = ElectronicMailAddresses;
			this.WWWHomePageURL = WWWHomePageURL;
			this.MessagingIDs = MessagingIDs;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Purpose,
				Description,
				UserDefinedPurpose,
				TelephoneNumbers,
				FacsimileNumbers,
				PagerNumber,
				ElectronicMailAddresses,
				WWWHomePageURL,
				MessagingIDs
			};
		}
		public virtual List<Global.IfcLabel>? _TelephoneNumbers
		{
			get
			{
				if(TelephoneNumbers != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in TelephoneNumbers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					TelephoneNumbers = null;
				}
				else
				{
					TelephoneNumbers = new List<IfcLabel>();
					foreach(var val in value)
					{
						if(val is IfcLabel v)
						{
							TelephoneNumbers.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcLabel>? _FacsimileNumbers
		{
			get
			{
				if(FacsimileNumbers != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in FacsimileNumbers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					FacsimileNumbers = null;
				}
				else
				{
					FacsimileNumbers = new List<IfcLabel>();
					foreach(var val in value)
					{
						if(val is IfcLabel v)
						{
							FacsimileNumbers.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _PagerNumber
		{
			get
			{
				return PagerNumber;
			}
			set
			{
				if(value is IfcLabel val)
				{
					PagerNumber = val;
				}
				else if(value == null)
				{
					PagerNumber = null;
				}
			}
		}
		public virtual List<Global.IfcLabel>? _ElectronicMailAddresses
		{
			get
			{
				if(ElectronicMailAddresses != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in ElectronicMailAddresses)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ElectronicMailAddresses = null;
				}
				else
				{
					ElectronicMailAddresses = new List<IfcLabel>();
					foreach(var val in value)
					{
						if(val is IfcLabel v)
						{
							ElectronicMailAddresses.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcURIReference? _WWWHomePageURL
		{
			get
			{
				return WWWHomePageURL;
			}
			set
			{
				if(value is IfcURIReference val)
				{
					WWWHomePageURL = val;
				}
				else if(value == null)
				{
					WWWHomePageURL = null;
				}
			}
		}
		public virtual List<Global.IfcURIReference>? _MessagingIDs
		{
			get
			{
				if(MessagingIDs != null)
				{
					List<Global.IfcURIReference>? items = new List<Global.IfcURIReference>();
					foreach (IfcURIReference item in MessagingIDs)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					MessagingIDs = null;
				}
				else
				{
					MessagingIDs = new List<IfcURIReference>();
					foreach(var val in value)
					{
						if(val is IfcURIReference v)
						{
							MessagingIDs.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTendon
	/// SUBTYPE OF (IfcReinforcingElement);
	/// PredefinedType : OPTIONAL IfcTendonTypeEnum;
	/// NominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// CrossSectionArea : OPTIONAL IfcAreaMeasure;
	/// TensionForce : OPTIONAL IfcForceMeasure;
	/// PreStress : OPTIONAL IfcPressureMeasure;
	/// FrictionCoefficient : OPTIONAL IfcNormalisedRatioMeasure;
	/// AnchorageSlip : OPTIONAL IfcPositiveLengthMeasure;
	/// MinCurvatureRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcTendonTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTendonTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCTENDONTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTendon : IfcReinforcingElement, Global.IfcTendon
	{
		public virtual IfcTendonTypeEnum? PredefinedType { get; set; }
		public virtual IfcPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IfcAreaMeasure? CrossSectionArea { get; set; }
		public virtual IfcForceMeasure? TensionForce { get; set; }
		public virtual IfcPressureMeasure? PreStress { get; set; }
		public virtual IfcNormalisedRatioMeasure? FrictionCoefficient { get; set; }
		public virtual IfcPositiveLengthMeasure? AnchorageSlip { get; set; }
		public virtual IfcPositiveLengthMeasure? MinCurvatureRadius { get; set; }
		public IfcTendon() : base()
		{
		}
		public IfcTendon(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLabel? SteelGrade, IfcTendonTypeEnum? PredefinedType, IfcPositiveLengthMeasure? NominalDiameter, IfcAreaMeasure? CrossSectionArea, IfcForceMeasure? TensionForce, IfcPressureMeasure? PreStress, IfcNormalisedRatioMeasure? FrictionCoefficient, IfcPositiveLengthMeasure? AnchorageSlip, IfcPositiveLengthMeasure? MinCurvatureRadius) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.TensionForce = TensionForce;
			this.PreStress = PreStress;
			this.FrictionCoefficient = FrictionCoefficient;
			this.AnchorageSlip = AnchorageSlip;
			this.MinCurvatureRadius = MinCurvatureRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				SteelGrade,
				PredefinedType,
				NominalDiameter,
				CrossSectionArea,
				TensionForce,
				PreStress,
				FrictionCoefficient,
				AnchorageSlip,
				MinCurvatureRadius
			};
		}
		public virtual Global.IfcTendonTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTendonTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _NominalDiameter
		{
			get
			{
				return NominalDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					NominalDiameter = val;
				}
				else if(value == null)
				{
					NominalDiameter = null;
				}
			}
		}
		public virtual Global.IfcAreaMeasure? _CrossSectionArea
		{
			get
			{
				return CrossSectionArea;
			}
			set
			{
				if(value is IfcAreaMeasure val)
				{
					CrossSectionArea = val;
				}
				else if(value == null)
				{
					CrossSectionArea = null;
				}
			}
		}
		public virtual Global.IfcForceMeasure? _TensionForce
		{
			get
			{
				return TensionForce;
			}
			set
			{
				if(value is IfcForceMeasure val)
				{
					TensionForce = val;
				}
				else if(value == null)
				{
					TensionForce = null;
				}
			}
		}
		public virtual Global.IfcPressureMeasure? _PreStress
		{
			get
			{
				return PreStress;
			}
			set
			{
				if(value is IfcPressureMeasure val)
				{
					PreStress = val;
				}
				else if(value == null)
				{
					PreStress = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _FrictionCoefficient
		{
			get
			{
				return FrictionCoefficient;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					FrictionCoefficient = val;
				}
				else if(value == null)
				{
					FrictionCoefficient = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _AnchorageSlip
		{
			get
			{
				return AnchorageSlip;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					AnchorageSlip = val;
				}
				else if(value == null)
				{
					AnchorageSlip = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _MinCurvatureRadius
		{
			get
			{
				return MinCurvatureRadius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					MinCurvatureRadius = val;
				}
				else if(value == null)
				{
					MinCurvatureRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTendonAnchor
	/// SUBTYPE OF (IfcReinforcingElement);
	/// PredefinedType : OPTIONAL IfcTendonAnchorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcTendonAnchorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTendonAnchorTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCTENDONANCHORTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTendonAnchor : IfcReinforcingElement, Global.IfcTendonAnchor
	{
		public virtual IfcTendonAnchorTypeEnum? PredefinedType { get; set; }
		public IfcTendonAnchor() : base()
		{
		}
		public IfcTendonAnchor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLabel? SteelGrade, IfcTendonAnchorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				SteelGrade,
				PredefinedType
			};
		}
		public virtual Global.IfcTendonAnchorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTendonAnchorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTendonAnchorType
	/// SUBTYPE OF (IfcReinforcingElementType);
	/// PredefinedType : IfcTendonAnchorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcTendonAnchorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTendonAnchorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTendonAnchorType : IfcReinforcingElementType, Global.IfcTendonAnchorType
	{
		public virtual IfcTendonAnchorTypeEnum? PredefinedType { get; set; }
		public IfcTendonAnchorType() : base()
		{
		}
		public IfcTendonAnchorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcTendonAnchorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcTendonAnchorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTendonAnchorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTendonType
	/// SUBTYPE OF (IfcReinforcingElementType);
	/// PredefinedType : IfcTendonTypeEnum;
	/// NominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// CrossSectionArea : OPTIONAL IfcAreaMeasure;
	/// SheathDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcTendonTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTendonTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTendonType : IfcReinforcingElementType, Global.IfcTendonType
	{
		public virtual IfcTendonTypeEnum? PredefinedType { get; set; }
		public virtual IfcPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IfcAreaMeasure? CrossSectionArea { get; set; }
		public virtual IfcPositiveLengthMeasure? SheathDiameter { get; set; }
		public IfcTendonType() : base()
		{
		}
		public IfcTendonType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcTendonTypeEnum? PredefinedType, IfcPositiveLengthMeasure? NominalDiameter, IfcAreaMeasure? CrossSectionArea, IfcPositiveLengthMeasure? SheathDiameter) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.SheathDiameter = SheathDiameter;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType,
				NominalDiameter,
				CrossSectionArea,
				SheathDiameter
			};
		}
		public virtual Global.IfcTendonTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTendonTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _NominalDiameter
		{
			get
			{
				return NominalDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					NominalDiameter = val;
				}
				else if(value == null)
				{
					NominalDiameter = null;
				}
			}
		}
		public virtual Global.IfcAreaMeasure? _CrossSectionArea
		{
			get
			{
				return CrossSectionArea;
			}
			set
			{
				if(value is IfcAreaMeasure val)
				{
					CrossSectionArea = val;
				}
				else if(value == null)
				{
					CrossSectionArea = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _SheathDiameter
		{
			get
			{
				return SheathDiameter;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					SheathDiameter = val;
				}
				else if(value == null)
				{
					SheathDiameter = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTessellatedFaceSet
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPolygonalFaceSet
	/// ,IfcTriangulatedFaceSet))
	/// SUBTYPE OF (IfcTessellatedItem);
	/// Coordinates : IfcCartesianPointList3D;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// INVERSE
	/// HasColours : SET [0:1] OF IfcIndexedColourMap FOR MappedTo;
	/// HasTextures : SET [0:?] OF IfcIndexedTextureMap FOR MappedTo;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcTessellatedFaceSet : IfcTessellatedItem, IfcBooleanOperand, Global.IfcTessellatedFaceSet
	{
		public virtual IfcCartesianPointList3D? Coordinates { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public List<IfcIndexedColourMap>? HasColours {get{return Model?.GetItems<IfcIndexedColourMap>().Where(x => x.MappedTo != null && x.MappedTo == this).ToList();}}
		public List<IfcIndexedTextureMap>? HasTextures {get{return Model?.GetItems<IfcIndexedTextureMap>().Where(x => x.MappedTo != null && x.MappedTo == this).ToList();}}
		public IfcTessellatedFaceSet() : base()
		{
		}
		public IfcTessellatedFaceSet(IfcCartesianPointList3D? Coordinates) : base ()
		{
			this.Coordinates = Coordinates;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Coordinates
			};
		}
		public virtual Global.IfcCartesianPointList3D? _Coordinates
		{
			get
			{
				return Coordinates;
			}
			set
			{
				if(value is IfcCartesianPointList3D val)
				{
					Coordinates = val;
				}
				else if(value == null)
				{
					Coordinates = null;
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
		public virtual List<Global.IfcIndexedColourMap>? _HasColours
		{
			get
			{
				if(HasColours != null)
				{
					List<Global.IfcIndexedColourMap>? items = new List<Global.IfcIndexedColourMap>();
					foreach (IfcIndexedColourMap item in HasColours)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcIndexedTextureMap>? _HasTextures
		{
			get
			{
				if(HasTextures != null)
				{
					List<Global.IfcIndexedTextureMap>? items = new List<Global.IfcIndexedTextureMap>();
					foreach (IfcIndexedTextureMap item in HasTextures)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTessellatedItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcIndexedPolygonalFace
	/// ,IfcTessellatedFaceSet))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcTessellatedItem : IfcGeometricRepresentationItem, Global.IfcTessellatedItem
	{
		public IfcTessellatedItem() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcTextLiteral
	/// SUPERTYPE OF (ONEOF
	/// (IfcTextLiteralWithExtent))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Literal : IfcPresentableText;
	/// Placement : IfcAxis2Placement;
	/// Path : IfcTextPath;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextLiteral : IfcGeometricRepresentationItem, Global.IfcTextLiteral
	{
		public virtual IfcPresentableText? Literal { get; set; }
		public virtual IfcAxis2Placement? Placement { get; set; }
		public virtual IfcTextPath? Path { get; set; }
		public IfcTextLiteral() : base()
		{
		}
		public IfcTextLiteral(IfcPresentableText? Literal, IfcAxis2Placement? Placement, IfcTextPath? Path) : base ()
		{
			this.Literal = Literal;
			this.Placement = Placement;
			this.Path = Path;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Literal,
				Placement,
				Path
			};
		}
		public virtual Global.IfcPresentableText? _Literal
		{
			get
			{
				return Literal;
			}
			set
			{
				if(value is IfcPresentableText val)
				{
					Literal = val;
				}
				else if(value == null)
				{
					Literal = null;
				}
			}
		}
		public virtual Global.IfcAxis2Placement? _Placement
		{
			get
			{
				return Placement;
			}
			set
			{
				if(value is IfcAxis2Placement val)
				{
					Placement = val;
				}
				else if(value == null)
				{
					Placement = null;
				}
			}
		}
		public virtual Global.IfcTextPath? _Path
		{
			get
			{
				return Path;
			}
			set
			{
				if(value is IfcTextPath val)
				{
					Path = val;
				}
				else if(value == null)
				{
					Path = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextLiteralWithExtent
	/// SUBTYPE OF (IfcTextLiteral);
	/// Extent : IfcPlanarExtent;
	/// BoxAlignment : IfcBoxAlignment;
	/// WHERE
	/// WR31 : NOT('IFC4.IFCPLANARBOX' IN TYPEOF(Extent));
	/// END_ENTITY;
	/// <summary>
	public class IfcTextLiteralWithExtent : IfcTextLiteral, Global.IfcTextLiteralWithExtent
	{
		public virtual IfcPlanarExtent? Extent { get; set; }
		public virtual IfcBoxAlignment? BoxAlignment { get; set; }
		public IfcTextLiteralWithExtent() : base()
		{
		}
		public IfcTextLiteralWithExtent(IfcPresentableText? Literal, IfcAxis2Placement? Placement, IfcTextPath? Path, IfcPlanarExtent? Extent, IfcBoxAlignment? BoxAlignment) : base (Literal, Placement, Path)
		{
			this.Extent = Extent;
			this.BoxAlignment = BoxAlignment;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Literal,
				Placement,
				Path,
				Extent,
				BoxAlignment
			};
		}
		public virtual Global.IfcPlanarExtent? _Extent
		{
			get
			{
				return Extent;
			}
			set
			{
				if(value is IfcPlanarExtent val)
				{
					Extent = val;
				}
				else if(value == null)
				{
					Extent = null;
				}
			}
		}
		public virtual Global.IfcBoxAlignment? _BoxAlignment
		{
			get
			{
				return BoxAlignment;
			}
			set
			{
				if(value is IfcBoxAlignment val)
				{
					BoxAlignment = val;
				}
				else if(value == null)
				{
					BoxAlignment = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// TextCharacterAppearance : OPTIONAL IfcTextStyleForDefinedFont;
	/// TextStyle : OPTIONAL IfcTextStyleTextModel;
	/// TextFontStyle : IfcTextFontSelect;
	/// ModelOrDraughting : OPTIONAL IfcBoolean;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextStyle : IfcPresentationStyle, IfcPresentationStyleSelect, Global.IfcTextStyle
	{
		public virtual IfcTextStyleForDefinedFont? TextCharacterAppearance { get; set; }
		public virtual IfcTextStyleTextModel? TextStyle { get; set; }
		public virtual IfcTextFontSelect? TextFontStyle { get; set; }
		public virtual IfcBoolean? ModelOrDraughting { get; set; }
		public IfcTextStyle() : base()
		{
		}
		public IfcTextStyle(IfcLabel? Name, IfcTextStyleForDefinedFont? TextCharacterAppearance, IfcTextStyleTextModel? TextStyle, IfcTextFontSelect? TextFontStyle, IfcBoolean? ModelOrDraughting) : base (Name)
		{
			this.TextCharacterAppearance = TextCharacterAppearance;
			this.TextStyle = TextStyle;
			this.TextFontStyle = TextFontStyle;
			this.ModelOrDraughting = ModelOrDraughting;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				TextCharacterAppearance,
				TextStyle,
				TextFontStyle,
				ModelOrDraughting
			};
		}
		public virtual Global.IfcTextStyleForDefinedFont? _TextCharacterAppearance
		{
			get
			{
				return TextCharacterAppearance;
			}
			set
			{
				if(value is IfcTextStyleForDefinedFont val)
				{
					TextCharacterAppearance = val;
				}
				else if(value == null)
				{
					TextCharacterAppearance = null;
				}
			}
		}
		public virtual Global.IfcTextStyleTextModel? _TextStyle
		{
			get
			{
				return TextStyle;
			}
			set
			{
				if(value is IfcTextStyleTextModel val)
				{
					TextStyle = val;
				}
				else if(value == null)
				{
					TextStyle = null;
				}
			}
		}
		public virtual Global.IfcTextFontSelect? _TextFontStyle
		{
			get
			{
				return TextFontStyle;
			}
			set
			{
				if(value is IfcTextFontSelect val)
				{
					TextFontStyle = val;
				}
				else if(value == null)
				{
					TextFontStyle = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _ModelOrDraughting
		{
			get
			{
				return ModelOrDraughting;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					ModelOrDraughting = val;
				}
				else if(value == null)
				{
					ModelOrDraughting = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextStyleFontModel
	/// SUBTYPE OF (IfcPreDefinedTextFont);
	/// FontFamily : LIST [1:?] OF IfcTextFontName;
	/// FontStyle : OPTIONAL IfcFontStyle;
	/// FontVariant : OPTIONAL IfcFontVariant;
	/// FontWeight : OPTIONAL IfcFontWeight;
	/// FontSize : IfcSizeSelect;
	/// WHERE
	/// MeasureOfFontSize : ('IFC4.IFCLENGTHMEASURE' IN TYPEOF(SELF.FontSize)) AND
	/// (SELF.FontSize > 0.);
	/// END_ENTITY;
	/// <summary>
	public class IfcTextStyleFontModel : IfcPreDefinedTextFont, Global.IfcTextStyleFontModel
	{
		public virtual List<IfcTextFontName>? FontFamily { get; set; }
		public virtual IfcFontStyle? FontStyle { get; set; }
		public virtual IfcFontVariant? FontVariant { get; set; }
		public virtual IfcFontWeight? FontWeight { get; set; }
		public virtual IfcSizeSelect? FontSize { get; set; }
		public IfcTextStyleFontModel() : base()
		{
		}
		public IfcTextStyleFontModel(IfcLabel? Name, List<IfcTextFontName>? FontFamily, IfcFontStyle? FontStyle, IfcFontVariant? FontVariant, IfcFontWeight? FontWeight, IfcSizeSelect? FontSize) : base (Name)
		{
			this.FontFamily = FontFamily;
			this.FontStyle = FontStyle;
			this.FontVariant = FontVariant;
			this.FontWeight = FontWeight;
			this.FontSize = FontSize;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				FontFamily,
				FontStyle,
				FontVariant,
				FontWeight,
				FontSize
			};
		}
		public virtual List<Global.IfcTextFontName>? _FontFamily
		{
			get
			{
				if(FontFamily != null)
				{
					List<Global.IfcTextFontName>? items = new List<Global.IfcTextFontName>();
					foreach (IfcTextFontName item in FontFamily)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					FontFamily = null;
				}
				else
				{
					FontFamily = new List<IfcTextFontName>();
					foreach(var val in value)
					{
						if(val is IfcTextFontName v)
						{
							FontFamily.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcFontStyle? _FontStyle
		{
			get
			{
				return FontStyle;
			}
			set
			{
				if(value is IfcFontStyle val)
				{
					FontStyle = val;
				}
				else if(value == null)
				{
					FontStyle = null;
				}
			}
		}
		public virtual Global.IfcFontVariant? _FontVariant
		{
			get
			{
				return FontVariant;
			}
			set
			{
				if(value is IfcFontVariant val)
				{
					FontVariant = val;
				}
				else if(value == null)
				{
					FontVariant = null;
				}
			}
		}
		public virtual Global.IfcFontWeight? _FontWeight
		{
			get
			{
				return FontWeight;
			}
			set
			{
				if(value is IfcFontWeight val)
				{
					FontWeight = val;
				}
				else if(value == null)
				{
					FontWeight = null;
				}
			}
		}
		public virtual Global.IfcSizeSelect? _FontSize
		{
			get
			{
				return FontSize;
			}
			set
			{
				if(value is IfcSizeSelect val)
				{
					FontSize = val;
				}
				else if(value == null)
				{
					FontSize = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextStyleForDefinedFont
	/// SUBTYPE OF (IfcPresentationItem);
	/// Colour : IfcColour;
	/// BackgroundColour : OPTIONAL IfcColour;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextStyleForDefinedFont : IfcPresentationItem, Global.IfcTextStyleForDefinedFont
	{
		public virtual IfcColour? Colour { get; set; }
		public virtual IfcColour? BackgroundColour { get; set; }
		public IfcTextStyleForDefinedFont() : base()
		{
		}
		public IfcTextStyleForDefinedFont(IfcColour? Colour, IfcColour? BackgroundColour) : base ()
		{
			this.Colour = Colour;
			this.BackgroundColour = BackgroundColour;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Colour,
				BackgroundColour
			};
		}
		public virtual Global.IfcColour? _Colour
		{
			get
			{
				return Colour;
			}
			set
			{
				if(value is IfcColour val)
				{
					Colour = val;
				}
				else if(value == null)
				{
					Colour = null;
				}
			}
		}
		public virtual Global.IfcColour? _BackgroundColour
		{
			get
			{
				return BackgroundColour;
			}
			set
			{
				if(value is IfcColour val)
				{
					BackgroundColour = val;
				}
				else if(value == null)
				{
					BackgroundColour = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextStyleTextModel
	/// SUBTYPE OF (IfcPresentationItem);
	/// TextIndent : OPTIONAL IfcSizeSelect;
	/// TextAlign : OPTIONAL IfcTextAlignment;
	/// TextDecoration : OPTIONAL IfcTextDecoration;
	/// LetterSpacing : OPTIONAL IfcSizeSelect;
	/// WordSpacing : OPTIONAL IfcSizeSelect;
	/// TextTransform : OPTIONAL IfcTextTransformation;
	/// LineHeight : OPTIONAL IfcSizeSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextStyleTextModel : IfcPresentationItem, Global.IfcTextStyleTextModel
	{
		public virtual IfcSizeSelect? TextIndent { get; set; }
		public virtual IfcTextAlignment? TextAlign { get; set; }
		public virtual IfcTextDecoration? TextDecoration { get; set; }
		public virtual IfcSizeSelect? LetterSpacing { get; set; }
		public virtual IfcSizeSelect? WordSpacing { get; set; }
		public virtual IfcTextTransformation? TextTransform { get; set; }
		public virtual IfcSizeSelect? LineHeight { get; set; }
		public IfcTextStyleTextModel() : base()
		{
		}
		public IfcTextStyleTextModel(IfcSizeSelect? TextIndent, IfcTextAlignment? TextAlign, IfcTextDecoration? TextDecoration, IfcSizeSelect? LetterSpacing, IfcSizeSelect? WordSpacing, IfcTextTransformation? TextTransform, IfcSizeSelect? LineHeight) : base ()
		{
			this.TextIndent = TextIndent;
			this.TextAlign = TextAlign;
			this.TextDecoration = TextDecoration;
			this.LetterSpacing = LetterSpacing;
			this.WordSpacing = WordSpacing;
			this.TextTransform = TextTransform;
			this.LineHeight = LineHeight;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TextIndent,
				TextAlign,
				TextDecoration,
				LetterSpacing,
				WordSpacing,
				TextTransform,
				LineHeight
			};
		}
		public virtual Global.IfcSizeSelect? _TextIndent
		{
			get
			{
				return TextIndent;
			}
			set
			{
				if(value is IfcSizeSelect val)
				{
					TextIndent = val;
				}
				else if(value == null)
				{
					TextIndent = null;
				}
			}
		}
		public virtual Global.IfcTextAlignment? _TextAlign
		{
			get
			{
				return TextAlign;
			}
			set
			{
				if(value is IfcTextAlignment val)
				{
					TextAlign = val;
				}
				else if(value == null)
				{
					TextAlign = null;
				}
			}
		}
		public virtual Global.IfcTextDecoration? _TextDecoration
		{
			get
			{
				return TextDecoration;
			}
			set
			{
				if(value is IfcTextDecoration val)
				{
					TextDecoration = val;
				}
				else if(value == null)
				{
					TextDecoration = null;
				}
			}
		}
		public virtual Global.IfcSizeSelect? _LetterSpacing
		{
			get
			{
				return LetterSpacing;
			}
			set
			{
				if(value is IfcSizeSelect val)
				{
					LetterSpacing = val;
				}
				else if(value == null)
				{
					LetterSpacing = null;
				}
			}
		}
		public virtual Global.IfcSizeSelect? _WordSpacing
		{
			get
			{
				return WordSpacing;
			}
			set
			{
				if(value is IfcSizeSelect val)
				{
					WordSpacing = val;
				}
				else if(value == null)
				{
					WordSpacing = null;
				}
			}
		}
		public virtual Global.IfcTextTransformation? _TextTransform
		{
			get
			{
				return TextTransform;
			}
			set
			{
				if(value is IfcTextTransformation val)
				{
					TextTransform = val;
				}
				else if(value == null)
				{
					TextTransform = null;
				}
			}
		}
		public virtual Global.IfcSizeSelect? _LineHeight
		{
			get
			{
				return LineHeight;
			}
			set
			{
				if(value is IfcSizeSelect val)
				{
					LineHeight = val;
				}
				else if(value == null)
				{
					LineHeight = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureCoordinate
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcIndexedTextureMap
	/// ,IfcTextureCoordinateGenerator
	/// ,IfcTextureMap))
	/// SUBTYPE OF (IfcPresentationItem);
	/// Maps : LIST [1:?] OF IfcSurfaceTexture;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcTextureCoordinate : IfcPresentationItem, Global.IfcTextureCoordinate
	{
		public virtual List<IfcSurfaceTexture>? Maps { get; set; }
		public IfcTextureCoordinate() : base()
		{
		}
		public IfcTextureCoordinate(List<IfcSurfaceTexture>? Maps) : base ()
		{
			this.Maps = Maps;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Maps
			};
		}
		public virtual List<Global.IfcSurfaceTexture>? _Maps
		{
			get
			{
				if(Maps != null)
				{
					List<Global.IfcSurfaceTexture>? items = new List<Global.IfcSurfaceTexture>();
					foreach (IfcSurfaceTexture item in Maps)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Maps = null;
				}
				else
				{
					Maps = new List<IfcSurfaceTexture>();
					foreach(var val in value)
					{
						if(val is IfcSurfaceTexture v)
						{
							Maps.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureCoordinateGenerator
	/// SUBTYPE OF (IfcTextureCoordinate);
	/// Mode : IfcLabel;
	/// Parameter : OPTIONAL LIST [1:?] OF IfcReal;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextureCoordinateGenerator : IfcTextureCoordinate, Global.IfcTextureCoordinateGenerator
	{
		public virtual IfcLabel? Mode { get; set; }
		public virtual List<IfcReal>? Parameter { get; set; }
		public IfcTextureCoordinateGenerator() : base()
		{
		}
		public IfcTextureCoordinateGenerator(List<IfcSurfaceTexture>? Maps, IfcLabel? Mode, List<IfcReal>? Parameter) : base (Maps)
		{
			this.Mode = Mode;
			this.Parameter = Parameter;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Maps,
				Mode,
				Parameter
			};
		}
		public virtual Global.IfcLabel? _Mode
		{
			get
			{
				return Mode;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Mode = val;
				}
				else if(value == null)
				{
					Mode = null;
				}
			}
		}
		public virtual List<Global.IfcReal>? _Parameter
		{
			get
			{
				if(Parameter != null)
				{
					List<Global.IfcReal>? items = new List<Global.IfcReal>();
					foreach (IfcReal item in Parameter)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Parameter = null;
				}
				else
				{
					Parameter = new List<IfcReal>();
					foreach(var val in value)
					{
						if(val is IfcReal v)
						{
							Parameter.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureMap
	/// SUBTYPE OF (IfcTextureCoordinate);
	/// Vertices : LIST [3:?] OF IfcTextureVertex;
	/// MappedTo : IfcFace;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextureMap : IfcTextureCoordinate, Global.IfcTextureMap
	{
		public virtual List<IfcTextureVertex>? Vertices { get; set; }
		public virtual IfcFace? MappedTo { get; set; }
		public IfcTextureMap() : base()
		{
		}
		public IfcTextureMap(List<IfcSurfaceTexture>? Maps, List<IfcTextureVertex>? Vertices, IfcFace? MappedTo) : base (Maps)
		{
			this.Vertices = Vertices;
			this.MappedTo = MappedTo;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Maps,
				Vertices,
				MappedTo
			};
		}
		public virtual List<Global.IfcTextureVertex>? _Vertices
		{
			get
			{
				if(Vertices != null)
				{
					List<Global.IfcTextureVertex>? items = new List<Global.IfcTextureVertex>();
					foreach (IfcTextureVertex item in Vertices)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Vertices = null;
				}
				else
				{
					Vertices = new List<IfcTextureVertex>();
					foreach(var val in value)
					{
						if(val is IfcTextureVertex v)
						{
							Vertices.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcFace? _MappedTo
		{
			get
			{
				return MappedTo;
			}
			set
			{
				if(value is IfcFace val)
				{
					MappedTo = val;
				}
				else if(value == null)
				{
					MappedTo = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureVertex
	/// SUBTYPE OF (IfcPresentationItem);
	/// Coordinates : LIST [2:2] OF IfcParameterValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextureVertex : IfcPresentationItem, Global.IfcTextureVertex
	{
		public virtual List<IfcParameterValue>? Coordinates { get; set; }
		public IfcTextureVertex() : base()
		{
		}
		public IfcTextureVertex(List<IfcParameterValue>? Coordinates) : base ()
		{
			this.Coordinates = Coordinates;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Coordinates
			};
		}
		public virtual List<Global.IfcParameterValue>? _Coordinates
		{
			get
			{
				if(Coordinates != null)
				{
					List<Global.IfcParameterValue>? items = new List<Global.IfcParameterValue>();
					foreach (IfcParameterValue item in Coordinates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Coordinates = null;
				}
				else
				{
					Coordinates = new List<IfcParameterValue>();
					foreach(var val in value)
					{
						if(val is IfcParameterValue v)
						{
							Coordinates.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureVertexList
	/// SUBTYPE OF (IfcPresentationItem);
	/// TexCoordsList : LIST [1:?] OF LIST [2:2] OF IfcParameterValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextureVertexList : IfcPresentationItem, Global.IfcTextureVertexList
	{
		public virtual List<List<IfcParameterValue>>? TexCoordsList { get; set; }
		public IfcTextureVertexList() : base()
		{
		}
		public IfcTextureVertexList(List<List<IfcParameterValue>>? TexCoordsList) : base ()
		{
			this.TexCoordsList = TexCoordsList;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TexCoordsList
			};
		}
		public virtual List<List<Global.IfcParameterValue>>? _TexCoordsList
		{
			get
			{
				if(TexCoordsList != null)
				{
					List<List<Global.IfcParameterValue>>? items = new List<List<Global.IfcParameterValue>>();
					foreach (List<IfcParameterValue> item1s in TexCoordsList)
					{
						List<Global.IfcParameterValue>? resultItems = new List<Global.IfcParameterValue>();
						foreach (IfcParameterValue item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					TexCoordsList = null;
				}
				else
				{
					TexCoordsList = new List<List<IfcParameterValue>>();
					foreach(var vals in value)
					{
						if(vals != null)
						{
							List<IfcParameterValue> items = new List<IfcParameterValue>();
							foreach(var val in vals)
							{
								if(val is IfcParameterValue v)
								{
									items.Add(v);
								}
							}
							TexCoordsList.Add(items);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTimePeriod;
	/// StartTime : IfcTime;
	/// EndTime : IfcTime;
	/// END_ENTITY;
	/// <summary>
	public class IfcTimePeriod : Ifc_Entity, Global.IfcTimePeriod
	{
		public virtual IfcTime? StartTime { get; set; }
		public virtual IfcTime? EndTime { get; set; }
		public IfcTimePeriod() : base()
		{
		}
		public IfcTimePeriod(IfcTime? StartTime, IfcTime? EndTime) : base ()
		{
			this.StartTime = StartTime;
			this.EndTime = EndTime;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				StartTime,
				EndTime
			};
		}
		public virtual Global.IfcTime? _StartTime
		{
			get
			{
				return StartTime;
			}
			set
			{
				if(value is IfcTime val)
				{
					StartTime = val;
				}
				else if(value == null)
				{
					StartTime = null;
				}
			}
		}
		public virtual Global.IfcTime? _EndTime
		{
			get
			{
				return EndTime;
			}
			set
			{
				if(value is IfcTime val)
				{
					EndTime = val;
				}
				else if(value == null)
				{
					EndTime = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTimeSeries
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcIrregularTimeSeries
	/// ,IfcRegularTimeSeries));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// StartTime : IfcDateTime;
	/// EndTime : IfcDateTime;
	/// TimeSeriesDataType : IfcTimeSeriesDataTypeEnum;
	/// DataOrigin : IfcDataOriginEnum;
	/// UserDefinedDataOrigin : OPTIONAL IfcLabel;
	/// Unit : OPTIONAL IfcUnit;
	/// INVERSE
	/// HasExternalReference : SET [1:?] OF IfcExternalReferenceRelationship FOR RelatedResourceObjects;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcTimeSeries : Ifc_Entity, IfcMetricValueSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect, Global.IfcTimeSeries
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcDateTime? StartTime { get; set; }
		public virtual IfcDateTime? EndTime { get; set; }
		public virtual IfcTimeSeriesDataTypeEnum? TimeSeriesDataType { get; set; }
		public virtual IfcDataOriginEnum? DataOrigin { get; set; }
		public virtual IfcLabel? UserDefinedDataOrigin { get; set; }
		public virtual IfcUnit? Unit { get; set; }
		public List<IfcExternalReferenceRelationship>? HasExternalReference {get{return Model?.GetItems<IfcExternalReferenceRelationship>().Where(x => x.RelatedResourceObjects != null && x.RelatedResourceObjects.Contains(this)).ToList();}}
		public IfcTimeSeries() : base()
		{
		}
		public IfcTimeSeries(IfcLabel? Name, IfcText? Description, IfcDateTime? StartTime, IfcDateTime? EndTime, IfcTimeSeriesDataTypeEnum? TimeSeriesDataType, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcUnit? Unit) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.StartTime = StartTime;
			this.EndTime = EndTime;
			this.TimeSeriesDataType = TimeSeriesDataType;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.Unit = Unit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				StartTime,
				EndTime,
				TimeSeriesDataType,
				DataOrigin,
				UserDefinedDataOrigin,
				Unit
			};
		}
		public virtual Global.IfcLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IfcText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IfcText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _StartTime
		{
			get
			{
				return StartTime;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					StartTime = val;
				}
				else if(value == null)
				{
					StartTime = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _EndTime
		{
			get
			{
				return EndTime;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					EndTime = val;
				}
				else if(value == null)
				{
					EndTime = null;
				}
			}
		}
		public virtual Global.IfcTimeSeriesDataTypeEnum? _TimeSeriesDataType
		{
			get
			{
				return TimeSeriesDataType;
			}
			set
			{
				if(value is IfcTimeSeriesDataTypeEnum val)
				{
					TimeSeriesDataType = val;
				}
				else if(value == null)
				{
					TimeSeriesDataType = null;
				}
			}
		}
		public virtual Global.IfcDataOriginEnum? _DataOrigin
		{
			get
			{
				return DataOrigin;
			}
			set
			{
				if(value is IfcDataOriginEnum val)
				{
					DataOrigin = val;
				}
				else if(value == null)
				{
					DataOrigin = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedDataOrigin
		{
			get
			{
				return UserDefinedDataOrigin;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedDataOrigin = val;
				}
				else if(value == null)
				{
					UserDefinedDataOrigin = null;
				}
			}
		}
		public virtual Global.IfcUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IfcUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
		public virtual List<Global.IfcExternalReferenceRelationship>? _HasExternalReference
		{
			get
			{
				if(HasExternalReference != null)
				{
					List<Global.IfcExternalReferenceRelationship>? items = new List<Global.IfcExternalReferenceRelationship>();
					foreach (IfcExternalReferenceRelationship item in HasExternalReference)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTimeSeriesValue;
	/// ListValues : LIST [1:?] OF IfcValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcTimeSeriesValue : Ifc_Entity, Global.IfcTimeSeriesValue
	{
		public virtual List<IfcValue>? ListValues { get; set; }
		public IfcTimeSeriesValue() : base()
		{
		}
		public IfcTimeSeriesValue(List<IfcValue>? ListValues) : base ()
		{
			this.ListValues = ListValues;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ListValues
			};
		}
		public virtual List<Global.IfcValue>? _ListValues
		{
			get
			{
				if(ListValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in ListValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ListValues = null;
				}
				else
				{
					ListValues = new List<IfcValue>();
					foreach(var val in value)
					{
						if(val is IfcValue v)
						{
							ListValues.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTopologicalRepresentationItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConnectedFaceSet
	/// ,IfcEdge
	/// ,IfcFace
	/// ,IfcFaceBound
	/// ,IfcLoop
	/// ,IfcPath
	/// ,IfcVertex))
	/// SUBTYPE OF (IfcRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcTopologicalRepresentationItem : IfcRepresentationItem, Global.IfcTopologicalRepresentationItem
	{
		public IfcTopologicalRepresentationItem() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcTopologyRepresentation
	/// SUBTYPE OF (IfcShapeModel);
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* SELF\IfcRepresentation.Items |
	/// NOT('IFC4.IFCTOPOLOGICALREPRESENTATIONITEM' IN TYPEOF(temp))
	/// )) = 0;
	/// WR22 : EXISTS(SELF\IfcRepresentation.RepresentationType);
	/// WR23 : IfcTopologyRepresentationTypes(SELF\IfcRepresentation.RepresentationType, SELF\IfcRepresentation.Items);
	/// END_ENTITY;
	/// <summary>
	public class IfcTopologyRepresentation : IfcShapeModel, Global.IfcTopologyRepresentation
	{
		public IfcTopologyRepresentation() : base()
		{
		}
		public IfcTopologyRepresentation(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
	}
	/// <summary>
	/// ENTITY IfcToroidalSurface
	/// SUBTYPE OF (IfcElementarySurface);
	/// MajorRadius : IfcPositiveLengthMeasure;
	/// MinorRadius : IfcPositiveLengthMeasure;
	/// WHERE
	/// MajorLargerMinor : MinorRadius < MajorRadius;
	/// END_ENTITY;
	/// <summary>
	public class IfcToroidalSurface : IfcElementarySurface, Global.IfcToroidalSurface
	{
		public virtual IfcPositiveLengthMeasure? MajorRadius { get; set; }
		public virtual IfcPositiveLengthMeasure? MinorRadius { get; set; }
		public IfcToroidalSurface() : base()
		{
		}
		public IfcToroidalSurface(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? MajorRadius, IfcPositiveLengthMeasure? MinorRadius) : base (Position)
		{
			this.MajorRadius = MajorRadius;
			this.MinorRadius = MinorRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				MajorRadius,
				MinorRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _MajorRadius
		{
			get
			{
				return MajorRadius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					MajorRadius = val;
				}
				else if(value == null)
				{
					MajorRadius = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _MinorRadius
		{
			get
			{
				return MinorRadius;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					MinorRadius = val;
				}
				else if(value == null)
				{
					MinorRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTransformer
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcTransformerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcTransformerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTransformerTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCTRANFORMERTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTransformer : IfcEnergyConversionDevice, Global.IfcTransformer
	{
		public virtual IfcTransformerTypeEnum? PredefinedType { get; set; }
		public IfcTransformer() : base()
		{
		}
		public IfcTransformer(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcTransformerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcTransformerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTransformerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTransformerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcTransformerTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcTransformerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTransformerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTransformerType : IfcEnergyConversionDeviceType, Global.IfcTransformerType
	{
		public virtual IfcTransformerTypeEnum? PredefinedType { get; set; }
		public IfcTransformerType() : base()
		{
		}
		public IfcTransformerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcTransformerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcTransformerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTransformerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTransportElement
	/// SUBTYPE OF (IfcElement);
	/// PredefinedType : OPTIONAL IfcTransportElementTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcTransportElementTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTransportElementTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCTRANSPORTELEMENTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTransportElement : IfcElement, Global.IfcTransportElement
	{
		public virtual IfcTransportElementTypeEnum? PredefinedType { get; set; }
		public IfcTransportElement() : base()
		{
		}
		public IfcTransportElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcTransportElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcTransportElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTransportElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTransportElementType
	/// SUBTYPE OF (IfcElementType);
	/// PredefinedType : IfcTransportElementTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcTransportElementTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTransportElementTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTransportElementType : IfcElementType, Global.IfcTransportElementType
	{
		public virtual IfcTransportElementTypeEnum? PredefinedType { get; set; }
		public IfcTransportElementType() : base()
		{
		}
		public IfcTransportElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcTransportElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcTransportElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTransportElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTrapeziumProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// BottomXDim : IfcPositiveLengthMeasure;
	/// TopXDim : IfcPositiveLengthMeasure;
	/// YDim : IfcPositiveLengthMeasure;
	/// TopXOffset : IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcTrapeziumProfileDef : IfcParameterizedProfileDef, Global.IfcTrapeziumProfileDef
	{
		public virtual IfcPositiveLengthMeasure? BottomXDim { get; set; }
		public virtual IfcPositiveLengthMeasure? TopXDim { get; set; }
		public virtual IfcPositiveLengthMeasure? YDim { get; set; }
		public virtual IfcLengthMeasure? TopXOffset { get; set; }
		public IfcTrapeziumProfileDef() : base()
		{
		}
		public IfcTrapeziumProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? BottomXDim, IfcPositiveLengthMeasure? TopXDim, IfcPositiveLengthMeasure? YDim, IfcLengthMeasure? TopXOffset) : base (ProfileType, ProfileName, Position)
		{
			this.BottomXDim = BottomXDim;
			this.TopXDim = TopXDim;
			this.YDim = YDim;
			this.TopXOffset = TopXOffset;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				BottomXDim,
				TopXDim,
				YDim,
				TopXOffset
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _BottomXDim
		{
			get
			{
				return BottomXDim;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					BottomXDim = val;
				}
				else if(value == null)
				{
					BottomXDim = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _TopXDim
		{
			get
			{
				return TopXDim;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					TopXDim = val;
				}
				else if(value == null)
				{
					TopXDim = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _YDim
		{
			get
			{
				return YDim;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					YDim = val;
				}
				else if(value == null)
				{
					YDim = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _TopXOffset
		{
			get
			{
				return TopXOffset;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					TopXOffset = val;
				}
				else if(value == null)
				{
					TopXOffset = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTriangulatedFaceSet
	/// SUBTYPE OF (IfcTessellatedFaceSet);
	/// Normals : OPTIONAL LIST [1:?] OF LIST [3:3] OF IfcParameterValue;
	/// Closed : OPTIONAL IfcBoolean;
	/// CoordIndex : LIST [1:?] OF LIST [3:3] OF IfcPositiveInteger;
	/// PnIndex : OPTIONAL LIST [1:?] OF IfcPositiveInteger;
	/// DERIVE
	/// NumberOfTriangles : IfcInteger := SIZEOF(CoordIndex);
	/// END_ENTITY;
	/// <summary>
	public class IfcTriangulatedFaceSet : IfcTessellatedFaceSet, Global.IfcTriangulatedFaceSet
	{
		public virtual List<List<IfcParameterValue>>? Normals { get; set; }
		public virtual IfcBoolean? Closed { get; set; }
		public virtual List<List<IfcPositiveInteger>>? CoordIndex { get; set; }
		public virtual List<IfcPositiveInteger>? PnIndex { get; set; }
		//DERIVE
		public virtual IfcInteger? NumberOfTriangles {get {return null;}}
		public IfcTriangulatedFaceSet() : base()
		{
		}
		public IfcTriangulatedFaceSet(IfcCartesianPointList3D? Coordinates, List<List<IfcParameterValue>>? Normals, IfcBoolean? Closed, List<List<IfcPositiveInteger>>? CoordIndex, List<IfcPositiveInteger>? PnIndex) : base (Coordinates)
		{
			this.Normals = Normals;
			this.Closed = Closed;
			this.CoordIndex = CoordIndex;
			this.PnIndex = PnIndex;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Coordinates,
				Normals,
				Closed,
				CoordIndex,
				PnIndex
			};
		}
		public virtual List<List<Global.IfcParameterValue>>? _Normals
		{
			get
			{
				if(Normals != null)
				{
					List<List<Global.IfcParameterValue>>? items = new List<List<Global.IfcParameterValue>>();
					foreach (List<IfcParameterValue> item1s in Normals)
					{
						List<Global.IfcParameterValue>? resultItems = new List<Global.IfcParameterValue>();
						foreach (IfcParameterValue item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Normals = null;
				}
				else
				{
					Normals = new List<List<IfcParameterValue>>();
					foreach(var vals in value)
					{
						if(vals != null)
						{
							List<IfcParameterValue> items = new List<IfcParameterValue>();
							foreach(var val in vals)
							{
								if(val is IfcParameterValue v)
								{
									items.Add(v);
								}
							}
							Normals.Add(items);
						}
					}
				}
			}
		}
		public virtual Global.IfcBoolean? _Closed
		{
			get
			{
				return Closed;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					Closed = val;
				}
				else if(value == null)
				{
					Closed = null;
				}
			}
		}
		public virtual List<List<Global.IfcPositiveInteger>>? _CoordIndex
		{
			get
			{
				if(CoordIndex != null)
				{
					List<List<Global.IfcPositiveInteger>>? items = new List<List<Global.IfcPositiveInteger>>();
					foreach (List<IfcPositiveInteger> item1s in CoordIndex)
					{
						List<Global.IfcPositiveInteger>? resultItems = new List<Global.IfcPositiveInteger>();
						foreach (IfcPositiveInteger item in item1s)
						{
							resultItems.Add(item);
						}
						items.Add(resultItems);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CoordIndex = null;
				}
				else
				{
					CoordIndex = new List<List<IfcPositiveInteger>>();
					foreach(var vals in value)
					{
						if(vals != null)
						{
							List<IfcPositiveInteger> items = new List<IfcPositiveInteger>();
							foreach(var val in vals)
							{
								if(val is IfcPositiveInteger v)
								{
									items.Add(v);
								}
							}
							CoordIndex.Add(items);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcPositiveInteger>? _PnIndex
		{
			get
			{
				if(PnIndex != null)
				{
					List<Global.IfcPositiveInteger>? items = new List<Global.IfcPositiveInteger>();
					foreach (IfcPositiveInteger item in PnIndex)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					PnIndex = null;
				}
				else
				{
					PnIndex = new List<IfcPositiveInteger>();
					foreach(var val in value)
					{
						if(val is IfcPositiveInteger v)
						{
							PnIndex.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcInteger? _NumberOfTriangles
		{
			get
			{
				return NumberOfTriangles;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTrimmedCurve
	/// SUBTYPE OF (IfcBoundedCurve);
	/// BasisCurve : IfcCurve;
	/// Trim1 : SET [1:2] OF IfcTrimmingSelect;
	/// Trim2 : SET [1:2] OF IfcTrimmingSelect;
	/// SenseAgreement : IfcBoolean;
	/// MasterRepresentation : IfcTrimmingPreference;
	/// WHERE
	/// Trim1ValuesConsistent : (HIINDEX(Trim1) = 1) OR (TYPEOF(Trim1[1]) <> TYPEOF(Trim1[2]));
	/// Trim2ValuesConsistent : (HIINDEX(Trim2) = 1) OR (TYPEOF(Trim2[1]) <> TYPEOF(Trim2[2]));
	/// NoTrimOfBoundedCurves : NOT('IFC4.IFCBOUNDEDCURVE' IN TYPEOF(BasisCurve));
	/// END_ENTITY;
	/// <summary>
	public class IfcTrimmedCurve : IfcBoundedCurve, Global.IfcTrimmedCurve
	{
		public virtual IfcCurve? BasisCurve { get; set; }
		public virtual List<IfcTrimmingSelect>? Trim1 { get; set; }
		public virtual List<IfcTrimmingSelect>? Trim2 { get; set; }
		public virtual IfcBoolean? SenseAgreement { get; set; }
		public virtual IfcTrimmingPreference? MasterRepresentation { get; set; }
		public IfcTrimmedCurve() : base()
		{
		}
		public IfcTrimmedCurve(IfcCurve? BasisCurve, List<IfcTrimmingSelect>? Trim1, List<IfcTrimmingSelect>? Trim2, IfcBoolean? SenseAgreement, IfcTrimmingPreference? MasterRepresentation) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.Trim1 = Trim1;
			this.Trim2 = Trim2;
			this.SenseAgreement = SenseAgreement;
			this.MasterRepresentation = MasterRepresentation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisCurve,
				Trim1,
				Trim2,
				SenseAgreement,
				MasterRepresentation
			};
		}
		public virtual Global.IfcCurve? _BasisCurve
		{
			get
			{
				return BasisCurve;
			}
			set
			{
				if(value is IfcCurve val)
				{
					BasisCurve = val;
				}
				else if(value == null)
				{
					BasisCurve = null;
				}
			}
		}
		public virtual List<Global.IfcTrimmingSelect>? _Trim1
		{
			get
			{
				if(Trim1 != null)
				{
					List<Global.IfcTrimmingSelect>? items = new List<Global.IfcTrimmingSelect>();
					foreach (IfcTrimmingSelect item in Trim1)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Trim1 = null;
				}
				else
				{
					Trim1 = new List<IfcTrimmingSelect>();
					foreach(var val in value)
					{
						if(val is IfcTrimmingSelect v)
						{
							Trim1.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcTrimmingSelect>? _Trim2
		{
			get
			{
				if(Trim2 != null)
				{
					List<Global.IfcTrimmingSelect>? items = new List<Global.IfcTrimmingSelect>();
					foreach (IfcTrimmingSelect item in Trim2)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Trim2 = null;
				}
				else
				{
					Trim2 = new List<IfcTrimmingSelect>();
					foreach(var val in value)
					{
						if(val is IfcTrimmingSelect v)
						{
							Trim2.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcBoolean? _SenseAgreement
		{
			get
			{
				return SenseAgreement;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					SenseAgreement = val;
				}
				else if(value == null)
				{
					SenseAgreement = null;
				}
			}
		}
		public virtual Global.IfcTrimmingPreference? _MasterRepresentation
		{
			get
			{
				return MasterRepresentation;
			}
			set
			{
				if(value is IfcTrimmingPreference val)
				{
					MasterRepresentation = val;
				}
				else if(value == null)
				{
					MasterRepresentation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTubeBundle
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcTubeBundleTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcTubeBundleTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTubeBundleTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCTUBEBUNDLETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTubeBundle : IfcEnergyConversionDevice, Global.IfcTubeBundle
	{
		public virtual IfcTubeBundleTypeEnum? PredefinedType { get; set; }
		public IfcTubeBundle() : base()
		{
		}
		public IfcTubeBundle(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcTubeBundleTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcTubeBundleTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTubeBundleTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTubeBundleType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcTubeBundleTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcTubeBundleTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTubeBundleTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTubeBundleType : IfcEnergyConversionDeviceType, Global.IfcTubeBundleType
	{
		public virtual IfcTubeBundleTypeEnum? PredefinedType { get; set; }
		public IfcTubeBundleType() : base()
		{
		}
		public IfcTubeBundleType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcTubeBundleTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcTubeBundleTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcTubeBundleTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTypeObject
	/// SUPERTYPE OF (ONEOF
	/// (IfcTypeProcess
	/// ,IfcTypeProduct
	/// ,IfcTypeResource))
	/// SUBTYPE OF (IfcObjectDefinition);
	/// ApplicableOccurrence : OPTIONAL IfcIdentifier;
	/// HasPropertySets : OPTIONAL SET [1:?] OF IfcPropertySetDefinition;
	/// INVERSE
	/// Types : SET [0:1] OF IfcRelDefinesByType FOR RelatingType;
	/// WHERE
	/// NameRequired : EXISTS(SELF\IfcRoot.Name);
	/// UniquePropertySetNames : (NOT(EXISTS(HasPropertySets))) OR IfcUniquePropertySetNames(HasPropertySets);
	/// END_ENTITY;
	/// <summary>
	public class IfcTypeObject : IfcObjectDefinition, Global.IfcTypeObject
	{
		public virtual IfcIdentifier? ApplicableOccurrence { get; set; }
		public virtual List<IfcPropertySetDefinition>? HasPropertySets { get; set; }
		public List<IfcRelDefinesByType>? Types {get{return Model?.GetItems<IfcRelDefinesByType>().Where(x => x.RelatingType != null && x.RelatingType == this).ToList();}}
		public IfcTypeObject() : base()
		{
		}
		public IfcTypeObject(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets
			};
		}
		public virtual Global.IfcIdentifier? _ApplicableOccurrence
		{
			get
			{
				return ApplicableOccurrence;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					ApplicableOccurrence = val;
				}
				else if(value == null)
				{
					ApplicableOccurrence = null;
				}
			}
		}
		public virtual List<Global.IfcPropertySetDefinition>? _HasPropertySets
		{
			get
			{
				if(HasPropertySets != null)
				{
					List<Global.IfcPropertySetDefinition>? items = new List<Global.IfcPropertySetDefinition>();
					foreach (IfcPropertySetDefinition item in HasPropertySets)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasPropertySets = null;
				}
				else
				{
					HasPropertySets = new List<IfcPropertySetDefinition>();
					foreach(var val in value)
					{
						if(val is IfcPropertySetDefinition v)
						{
							HasPropertySets.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcRelDefinesByType>? _Types
		{
			get
			{
				if(Types != null)
				{
					List<Global.IfcRelDefinesByType>? items = new List<Global.IfcRelDefinesByType>();
					foreach (IfcRelDefinesByType item in Types)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTypeProcess
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcEventType
	/// ,IfcProcedureType
	/// ,IfcTaskType))
	/// SUBTYPE OF (IfcTypeObject);
	/// Identification : OPTIONAL IfcIdentifier;
	/// LongDescription : OPTIONAL IfcText;
	/// ProcessType : OPTIONAL IfcLabel;
	/// INVERSE
	/// OperatesOn : SET [0:?] OF IfcRelAssignsToProcess FOR RelatingProcess;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcTypeProcess : IfcTypeObject, IfcProcessSelect, Global.IfcTypeProcess
	{
		public virtual IfcIdentifier? Identification { get; set; }
		public virtual IfcText? LongDescription { get; set; }
		public virtual IfcLabel? ProcessType { get; set; }
		public List<IfcRelAssignsToProcess>? OperatesOn {get{return Model?.GetItems<IfcRelAssignsToProcess>().Where(x => x.RelatingProcess != null && x.RelatingProcess == this).ToList();}}
		public IfcTypeProcess() : base()
		{
		}
		public IfcTypeProcess(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ProcessType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets)
		{
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ProcessType = ProcessType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ProcessType
			};
		}
		public virtual Global.IfcIdentifier? _Identification
		{
			get
			{
				return Identification;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identification = val;
				}
				else if(value == null)
				{
					Identification = null;
				}
			}
		}
		public virtual Global.IfcText? _LongDescription
		{
			get
			{
				return LongDescription;
			}
			set
			{
				if(value is IfcText val)
				{
					LongDescription = val;
				}
				else if(value == null)
				{
					LongDescription = null;
				}
			}
		}
		public virtual Global.IfcLabel? _ProcessType
		{
			get
			{
				return ProcessType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ProcessType = val;
				}
				else if(value == null)
				{
					ProcessType = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssignsToProcess>? _OperatesOn
		{
			get
			{
				if(OperatesOn != null)
				{
					List<Global.IfcRelAssignsToProcess>? items = new List<Global.IfcRelAssignsToProcess>();
					foreach (IfcRelAssignsToProcess item in OperatesOn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTypeProduct
	/// SUPERTYPE OF (ONEOF
	/// (IfcDoorStyle
	/// ,IfcElementType
	/// ,IfcSpatialElementType
	/// ,IfcWindowStyle))
	/// SUBTYPE OF (IfcTypeObject);
	/// RepresentationMaps : OPTIONAL LIST [1:?] OF UNIQUE IfcRepresentationMap;
	/// Tag : OPTIONAL IfcLabel;
	/// INVERSE
	/// ReferencedBy : SET [0:?] OF IfcRelAssignsToProduct FOR RelatingProduct;
	/// WHERE
	/// ApplicableOccurrence : NOT(EXISTS(SELF\IfcTypeObject.Types[1])) OR
	/// (SIZEOF(QUERY(temp <* SELF\IfcTypeObject.Types[1].RelatedObjects |
	/// NOT('IFC4.IFCPRODUCT' IN TYPEOF(temp)))
	/// ) = 0);
	/// END_ENTITY;
	/// <summary>
	public class IfcTypeProduct : IfcTypeObject, IfcProductSelect, Global.IfcTypeProduct
	{
		public virtual List<IfcRepresentationMap>? RepresentationMaps { get; set; }
		public virtual IfcLabel? Tag { get; set; }
		public List<IfcRelAssignsToProduct>? ReferencedBy {get{return Model?.GetItems<IfcRelAssignsToProduct>().Where(x => x.RelatingProduct != null && x.RelatingProduct == this).ToList();}}
		public IfcTypeProduct() : base()
		{
		}
		public IfcTypeProduct(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets)
		{
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag
			};
		}
		public virtual List<Global.IfcRepresentationMap>? _RepresentationMaps
		{
			get
			{
				if(RepresentationMaps != null)
				{
					List<Global.IfcRepresentationMap>? items = new List<Global.IfcRepresentationMap>();
					foreach (IfcRepresentationMap item in RepresentationMaps)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RepresentationMaps = null;
				}
				else
				{
					RepresentationMaps = new List<IfcRepresentationMap>();
					foreach(var val in value)
					{
						if(val is IfcRepresentationMap v)
						{
							RepresentationMaps.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _Tag
		{
			get
			{
				return Tag;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Tag = val;
				}
				else if(value == null)
				{
					Tag = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssignsToProduct>? _ReferencedBy
		{
			get
			{
				if(ReferencedBy != null)
				{
					List<Global.IfcRelAssignsToProduct>? items = new List<Global.IfcRelAssignsToProduct>();
					foreach (IfcRelAssignsToProduct item in ReferencedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTypeResource
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConstructionResourceType))
	/// SUBTYPE OF (IfcTypeObject);
	/// Identification : OPTIONAL IfcIdentifier;
	/// LongDescription : OPTIONAL IfcText;
	/// ResourceType : OPTIONAL IfcLabel;
	/// INVERSE
	/// ResourceOf : SET [0:?] OF IfcRelAssignsToResource FOR RelatingResource;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcTypeResource : IfcTypeObject, IfcResourceSelect, Global.IfcTypeResource
	{
		public virtual IfcIdentifier? Identification { get; set; }
		public virtual IfcText? LongDescription { get; set; }
		public virtual IfcLabel? ResourceType { get; set; }
		public virtual List<IfcAppliedValue>? BaseCosts {get; set;}
		public virtual IfcPhysicalQuantity? BaseQuantity {get; set;}
		public List<IfcRelAssignsToResource>? ResourceOf {get{return Model?.GetItems<IfcRelAssignsToResource>().Where(x => x.RelatingResource != null && x.RelatingResource == this).ToList();}}
		public IfcTypeResource() : base()
		{
		}
		public IfcTypeResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, IfcIdentifier? Identification, IfcText? LongDescription, IfcLabel? ResourceType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets)
		{
			this.Identification = Identification;
			this.LongDescription = LongDescription;
			this.ResourceType = ResourceType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				Identification,
				LongDescription,
				ResourceType
			};
		}
		public virtual Global.IfcIdentifier? _Identification
		{
			get
			{
				return Identification;
			}
			set
			{
				if(value is IfcIdentifier val)
				{
					Identification = val;
				}
				else if(value == null)
				{
					Identification = null;
				}
			}
		}
		public virtual Global.IfcText? _LongDescription
		{
			get
			{
				return LongDescription;
			}
			set
			{
				if(value is IfcText val)
				{
					LongDescription = val;
				}
				else if(value == null)
				{
					LongDescription = null;
				}
			}
		}
		public virtual Global.IfcLabel? _ResourceType
		{
			get
			{
				return ResourceType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					ResourceType = val;
				}
				else if(value == null)
				{
					ResourceType = null;
				}
			}
		}
		public virtual List<Global.IfcAppliedValue>? _BaseCosts
		{
			get
			{
				if(BaseCosts != null)
				{
					List<Global.IfcAppliedValue>? items = new List<Global.IfcAppliedValue>();
					foreach (IfcAppliedValue item in BaseCosts)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					BaseCosts = null;
				}
				else
				{
					BaseCosts = new List<IfcAppliedValue>();
					foreach(var val in value)
					{
						if(val is IfcAppliedValue v)
						{
							BaseCosts.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcPhysicalQuantity? _BaseQuantity
		{
			get
			{
				return BaseQuantity;
			}
			set
			{
				if(value is IfcPhysicalQuantity val)
				{
					BaseQuantity = val;
				}
				else if(value == null)
				{
					BaseQuantity = null;
				}
			}
		}
		public virtual List<Global.IfcRelAssignsToResource>? _ResourceOf
		{
			get
			{
				if(ResourceOf != null)
				{
					List<Global.IfcRelAssignsToResource>? items = new List<Global.IfcRelAssignsToResource>();
					foreach (IfcRelAssignsToResource item in ResourceOf)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcUShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// FlangeWidth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// EdgeRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// FlangeSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// WHERE
	/// ValidFlangeThickness : FlangeThickness < (Depth / 2.);
	/// ValidWebThickness : WebThickness < FlangeWidth;
	/// END_ENTITY;
	/// <summary>
	public class IfcUShapeProfileDef : IfcParameterizedProfileDef, Global.IfcUShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IfcNonNegativeLengthMeasure? FilletRadius { get; set; }
		public virtual IfcNonNegativeLengthMeasure? EdgeRadius { get; set; }
		public virtual IfcPlaneAngleMeasure? FlangeSlope { get; set; }
		public IfcUShapeProfileDef() : base()
		{
		}
		public IfcUShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Depth, IfcPositiveLengthMeasure? FlangeWidth, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? FlangeThickness, IfcNonNegativeLengthMeasure? FilletRadius, IfcNonNegativeLengthMeasure? EdgeRadius, IfcPlaneAngleMeasure? FlangeSlope) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.FlangeSlope = FlangeSlope;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Depth,
				FlangeWidth,
				WebThickness,
				FlangeThickness,
				FilletRadius,
				EdgeRadius,
				FlangeSlope
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _FlangeWidth
		{
			get
			{
				return FlangeWidth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FlangeWidth = val;
				}
				else if(value == null)
				{
					FlangeWidth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _WebThickness
		{
			get
			{
				return WebThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					WebThickness = val;
				}
				else if(value == null)
				{
					WebThickness = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _FlangeThickness
		{
			get
			{
				return FlangeThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FlangeThickness = val;
				}
				else if(value == null)
				{
					FlangeThickness = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _FilletRadius
		{
			get
			{
				return FilletRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					FilletRadius = val;
				}
				else if(value == null)
				{
					FilletRadius = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _EdgeRadius
		{
			get
			{
				return EdgeRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					EdgeRadius = val;
				}
				else if(value == null)
				{
					EdgeRadius = null;
				}
			}
		}
		public virtual Global.IfcPlaneAngleMeasure? _FlangeSlope
		{
			get
			{
				return FlangeSlope;
			}
			set
			{
				if(value is IfcPlaneAngleMeasure val)
				{
					FlangeSlope = val;
				}
				else if(value == null)
				{
					FlangeSlope = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcUnitAssignment;
	/// Units : SET [1:?] OF IfcUnit;
	/// WHERE
	/// WR01 : IfcCorrectUnitAssignment(Units);
	/// END_ENTITY;
	/// <summary>
	public class IfcUnitAssignment : Ifc_Entity, Global.IfcUnitAssignment
	{
		public virtual List<IfcUnit>? Units { get; set; }
		public IfcUnitAssignment() : base()
		{
		}
		public IfcUnitAssignment(List<IfcUnit>? Units) : base ()
		{
			this.Units = Units;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Units
			};
		}
		public virtual List<Global.IfcUnit>? _Units
		{
			get
			{
				if(Units != null)
				{
					List<Global.IfcUnit>? items = new List<Global.IfcUnit>();
					foreach (IfcUnit item in Units)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Units = null;
				}
				else
				{
					Units = new List<IfcUnit>();
					foreach(var val in value)
					{
						if(val is IfcUnit v)
						{
							Units.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcUnitaryControlElement
	/// SUBTYPE OF (IfcDistributionControlElement);
	/// PredefinedType : OPTIONAL IfcUnitaryControlElementTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcUnitaryControlElementTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcUnitaryControlElementTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCUNITARYCONTROLELEMENTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcUnitaryControlElement : IfcDistributionControlElement, Global.IfcUnitaryControlElement
	{
		public virtual IfcUnitaryControlElementTypeEnum? PredefinedType { get; set; }
		public IfcUnitaryControlElement() : base()
		{
		}
		public IfcUnitaryControlElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcUnitaryControlElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcUnitaryControlElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcUnitaryControlElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcUnitaryControlElementType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcUnitaryControlElementTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcUnitaryControlElementTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcUnitaryControlElementTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcUnitaryControlElementType : IfcDistributionControlElementType, Global.IfcUnitaryControlElementType
	{
		public virtual IfcUnitaryControlElementTypeEnum? PredefinedType { get; set; }
		public IfcUnitaryControlElementType() : base()
		{
		}
		public IfcUnitaryControlElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcUnitaryControlElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcUnitaryControlElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcUnitaryControlElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcUnitaryEquipment
	/// SUBTYPE OF (IfcEnergyConversionDevice);
	/// PredefinedType : OPTIONAL IfcUnitaryEquipmentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcUnitaryEquipmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcUnitaryEquipmentTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCUNITARYEQUIPMENTTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcUnitaryEquipment : IfcEnergyConversionDevice, Global.IfcUnitaryEquipment
	{
		public virtual IfcUnitaryEquipmentTypeEnum? PredefinedType { get; set; }
		public IfcUnitaryEquipment() : base()
		{
		}
		public IfcUnitaryEquipment(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcUnitaryEquipmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcUnitaryEquipmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcUnitaryEquipmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcUnitaryEquipmentType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcUnitaryEquipmentTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcUnitaryEquipmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcUnitaryEquipmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcUnitaryEquipmentType : IfcEnergyConversionDeviceType, Global.IfcUnitaryEquipmentType
	{
		public virtual IfcUnitaryEquipmentTypeEnum? PredefinedType { get; set; }
		public IfcUnitaryEquipmentType() : base()
		{
		}
		public IfcUnitaryEquipmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcUnitaryEquipmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcUnitaryEquipmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcUnitaryEquipmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcValve
	/// SUBTYPE OF (IfcFlowController);
	/// PredefinedType : OPTIONAL IfcValveTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcValveTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcValveTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCVALVETYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcValve : IfcFlowController, Global.IfcValve
	{
		public virtual IfcValveTypeEnum? PredefinedType { get; set; }
		public IfcValve() : base()
		{
		}
		public IfcValve(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcValveTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcValveTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcValveTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcValveType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcValveTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcValveTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcValveTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcValveType : IfcFlowControllerType, Global.IfcValveType
	{
		public virtual IfcValveTypeEnum? PredefinedType { get; set; }
		public IfcValveType() : base()
		{
		}
		public IfcValveType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcValveTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcValveTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcValveTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVector
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Orientation : IfcDirection;
	/// Magnitude : IfcLengthMeasure;
	/// DERIVE
	/// Dim : IfcDimensionCount := Orientation.Dim;
	/// WHERE
	/// MagGreaterOrEqualZero : Magnitude >= 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IfcVector : IfcGeometricRepresentationItem, IfcHatchLineDistanceSelect, IfcVectorOrDirection, Global.IfcVector
	{
		public virtual IfcDirection? Orientation { get; set; }
		public virtual IfcLengthMeasure? Magnitude { get; set; }
		//DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcVector() : base()
		{
		}
		public IfcVector(IfcDirection? Orientation, IfcLengthMeasure? Magnitude) : base ()
		{
			this.Orientation = Orientation;
			this.Magnitude = Magnitude;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Orientation,
				Magnitude
			};
		}
		public virtual Global.IfcDirection? _Orientation
		{
			get
			{
				return Orientation;
			}
			set
			{
				if(value is IfcDirection val)
				{
					Orientation = val;
				}
				else if(value == null)
				{
					Orientation = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _Magnitude
		{
			get
			{
				return Magnitude;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					Magnitude = val;
				}
				else if(value == null)
				{
					Magnitude = null;
				}
			}
		}
		public virtual Global.IfcDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVertex
	/// SUPERTYPE OF (ONEOF
	/// (IfcVertexPoint))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public class IfcVertex : IfcTopologicalRepresentationItem, Global.IfcVertex
	{
		public IfcVertex() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcVertexLoop
	/// SUBTYPE OF (IfcLoop);
	/// LoopVertex : IfcVertex;
	/// END_ENTITY;
	/// <summary>
	public class IfcVertexLoop : IfcLoop, Global.IfcVertexLoop
	{
		public virtual IfcVertex? LoopVertex { get; set; }
		public IfcVertexLoop() : base()
		{
		}
		public IfcVertexLoop(IfcVertex? LoopVertex) : base ()
		{
			this.LoopVertex = LoopVertex;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				LoopVertex
			};
		}
		public virtual Global.IfcVertex? _LoopVertex
		{
			get
			{
				return LoopVertex;
			}
			set
			{
				if(value is IfcVertex val)
				{
					LoopVertex = val;
				}
				else if(value == null)
				{
					LoopVertex = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVertexPoint
	/// SUBTYPE OF (IfcVertex);
	/// VertexGeometry : IfcPoint;
	/// END_ENTITY;
	/// <summary>
	public class IfcVertexPoint : IfcVertex, IfcPointOrVertexPoint, Global.IfcVertexPoint
	{
		public virtual IfcPoint? VertexGeometry { get; set; }
		public IfcVertexPoint() : base()
		{
		}
		public IfcVertexPoint(IfcPoint? VertexGeometry) : base ()
		{
			this.VertexGeometry = VertexGeometry;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				VertexGeometry
			};
		}
		public virtual Global.IfcPoint? _VertexGeometry
		{
			get
			{
				return VertexGeometry;
			}
			set
			{
				if(value is IfcPoint val)
				{
					VertexGeometry = val;
				}
				else if(value == null)
				{
					VertexGeometry = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVibrationIsolator
	/// SUBTYPE OF (IfcElementComponent);
	/// PredefinedType : OPTIONAL IfcVibrationIsolatorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcVibrationIsolatorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcVibrationIsolatorTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCVIBRATIONISOLATORTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcVibrationIsolator : IfcElementComponent, Global.IfcVibrationIsolator
	{
		public virtual IfcVibrationIsolatorTypeEnum? PredefinedType { get; set; }
		public IfcVibrationIsolator() : base()
		{
		}
		public IfcVibrationIsolator(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcVibrationIsolatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcVibrationIsolatorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcVibrationIsolatorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVibrationIsolatorType
	/// SUBTYPE OF (IfcElementComponentType);
	/// PredefinedType : IfcVibrationIsolatorTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcVibrationIsolatorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcVibrationIsolatorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcVibrationIsolatorType : IfcElementComponentType, Global.IfcVibrationIsolatorType
	{
		public virtual IfcVibrationIsolatorTypeEnum? PredefinedType { get; set; }
		public IfcVibrationIsolatorType() : base()
		{
		}
		public IfcVibrationIsolatorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcVibrationIsolatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcVibrationIsolatorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcVibrationIsolatorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVirtualElement
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcVirtualElement : IfcElement, Global.IfcVirtualElement
	{
		public IfcVirtualElement() : base()
		{
		}
		public IfcVirtualElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcVirtualGridIntersection;
	/// IntersectingAxes : LIST [2:2] OF UNIQUE IfcGridAxis;
	/// OffsetDistances : LIST [2:3] OF IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcVirtualGridIntersection : Ifc_Entity, IfcGridPlacementDirectionSelect, Global.IfcVirtualGridIntersection
	{
		public virtual List<IfcGridAxis>? IntersectingAxes { get; set; }
		public virtual List<IfcLengthMeasure>? OffsetDistances { get; set; }
		public IfcVirtualGridIntersection() : base()
		{
		}
		public IfcVirtualGridIntersection(List<IfcGridAxis>? IntersectingAxes, List<IfcLengthMeasure>? OffsetDistances) : base ()
		{
			this.IntersectingAxes = IntersectingAxes;
			this.OffsetDistances = OffsetDistances;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				IntersectingAxes,
				OffsetDistances
			};
		}
		public virtual List<Global.IfcGridAxis>? _IntersectingAxes
		{
			get
			{
				if(IntersectingAxes != null)
				{
					List<Global.IfcGridAxis>? items = new List<Global.IfcGridAxis>();
					foreach (IfcGridAxis item in IntersectingAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					IntersectingAxes = null;
				}
				else
				{
					IntersectingAxes = new List<IfcGridAxis>();
					foreach(var val in value)
					{
						if(val is IfcGridAxis v)
						{
							IntersectingAxes.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcLengthMeasure>? _OffsetDistances
		{
			get
			{
				if(OffsetDistances != null)
				{
					List<Global.IfcLengthMeasure>? items = new List<Global.IfcLengthMeasure>();
					foreach (IfcLengthMeasure item in OffsetDistances)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					OffsetDistances = null;
				}
				else
				{
					OffsetDistances = new List<IfcLengthMeasure>();
					foreach(var val in value)
					{
						if(val is IfcLengthMeasure v)
						{
							OffsetDistances.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVoidingFeature
	/// SUBTYPE OF (IfcFeatureElementSubtraction);
	/// PredefinedType : OPTIONAL IfcVoidingFeatureTypeEnum;
	/// WHERE
	/// HasObjectType : NOT EXISTS(PredefinedType) OR (PredefinedType <> IfcVoidingFeatureTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcVoidingFeature : IfcFeatureElementSubtraction, Global.IfcVoidingFeature
	{
		public virtual IfcVoidingFeatureTypeEnum? PredefinedType { get; set; }
		public IfcVoidingFeature() : base()
		{
		}
		public IfcVoidingFeature(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcVoidingFeatureTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcVoidingFeatureTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcVoidingFeatureTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWall
	/// SUPERTYPE OF (ONEOF
	/// (IfcWallElementedCase
	/// ,IfcWallStandardCase))
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcWallTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcWallTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcWallTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCWALLTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcWall : IfcBuildingElement, Global.IfcWall
	{
		public virtual IfcWallTypeEnum? PredefinedType { get; set; }
		public IfcWall() : base()
		{
		}
		public IfcWall(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcWallTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcWallTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcWallTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWallElementedCase
	/// SUBTYPE OF (IfcWall);
	/// WHERE
	/// HasDecomposition : HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) > 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcWallElementedCase : IfcWall, Global.IfcWallElementedCase
	{
		public IfcWallElementedCase() : base()
		{
		}
		public IfcWallElementedCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcWallTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcWallStandardCase
	/// SUBTYPE OF (IfcWall);
	/// WHERE
	/// HasMaterialLayerSetUsage : SIZEOF (QUERY(temp <* USEDIN(SELF, 'IFC4.IFCRELASSOCIATES.RELATEDOBJECTS') |
	/// ('IFC4.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)) AND
	/// ('IFC4.IFCMATERIALLAYERSETUSAGE' IN TYPEOF(temp.RelatingMaterial))
	/// )) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcWallStandardCase : IfcWall, Global.IfcWallStandardCase
	{
		public IfcWallStandardCase() : base()
		{
		}
		public IfcWallStandardCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcWallTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcWallType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcWallTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcWallTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcWallTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcWallType : IfcBuildingElementType, Global.IfcWallType
	{
		public virtual IfcWallTypeEnum? PredefinedType { get; set; }
		public IfcWallType() : base()
		{
		}
		public IfcWallType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcWallTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcWallTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcWallTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWasteTerminal
	/// SUBTYPE OF (IfcFlowTerminal);
	/// PredefinedType : OPTIONAL IfcWasteTerminalTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcWasteTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcWasteTerminalTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// CorrectTypeAssigned : (SIZEOF(IsTypedBy) = 0) OR
	/// ('IFC4.IFCWASTETERMINALTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcWasteTerminal : IfcFlowTerminal, Global.IfcWasteTerminal
	{
		public virtual IfcWasteTerminalTypeEnum? PredefinedType { get; set; }
		public IfcWasteTerminal() : base()
		{
		}
		public IfcWasteTerminal(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcWasteTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcWasteTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcWasteTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWasteTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcWasteTerminalTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcWasteTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcWasteTerminalTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcWasteTerminalType : IfcFlowTerminalType, Global.IfcWasteTerminalType
	{
		public virtual IfcWasteTerminalTypeEnum? PredefinedType { get; set; }
		public IfcWasteTerminalType() : base()
		{
		}
		public IfcWasteTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcWasteTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcWasteTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcWasteTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWindow
	/// SUPERTYPE OF (ONEOF
	/// (IfcWindowStandardCase))
	/// SUBTYPE OF (IfcBuildingElement);
	/// OverallHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// OverallWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// PredefinedType : OPTIONAL IfcWindowTypeEnum;
	/// PartitioningType : OPTIONAL IfcWindowTypePartitioningEnum;
	/// UserDefinedPartitioningType : OPTIONAL IfcLabel;
	/// WHERE
	/// CorrectStyleAssigned : (SIZEOF(IsTypedBy) = 0)
	/// OR ('IFC4.IFCWINDOWTYPE' IN TYPEOF(SELF\IfcObject.IsTypedBy[1].RelatingType));
	/// END_ENTITY;
	/// <summary>
	public class IfcWindow : IfcBuildingElement, Global.IfcWindow
	{
		public virtual IfcPositiveLengthMeasure? OverallHeight { get; set; }
		public virtual IfcPositiveLengthMeasure? OverallWidth { get; set; }
		public virtual IfcWindowTypeEnum? PredefinedType { get; set; }
		public virtual IfcWindowTypePartitioningEnum? PartitioningType { get; set; }
		public virtual IfcLabel? UserDefinedPartitioningType { get; set; }
		public IfcWindow() : base()
		{
		}
		public IfcWindow(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPositiveLengthMeasure? OverallHeight, IfcPositiveLengthMeasure? OverallWidth, IfcWindowTypeEnum? PredefinedType, IfcWindowTypePartitioningEnum? PartitioningType, IfcLabel? UserDefinedPartitioningType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
			this.PredefinedType = PredefinedType;
			this.PartitioningType = PartitioningType;
			this.UserDefinedPartitioningType = UserDefinedPartitioningType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				OverallHeight,
				OverallWidth,
				PredefinedType,
				PartitioningType,
				UserDefinedPartitioningType
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallHeight
		{
			get
			{
				return OverallHeight;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					OverallHeight = val;
				}
				else if(value == null)
				{
					OverallHeight = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallWidth
		{
			get
			{
				return OverallWidth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					OverallWidth = val;
				}
				else if(value == null)
				{
					OverallWidth = null;
				}
			}
		}
		public virtual Global.IfcWindowTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcWindowTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcWindowTypePartitioningEnum? _PartitioningType
		{
			get
			{
				return PartitioningType;
			}
			set
			{
				if(value is IfcWindowTypePartitioningEnum val)
				{
					PartitioningType = val;
				}
				else if(value == null)
				{
					PartitioningType = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedPartitioningType
		{
			get
			{
				return UserDefinedPartitioningType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedPartitioningType = val;
				}
				else if(value == null)
				{
					UserDefinedPartitioningType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWindowLiningProperties
	/// SUBTYPE OF (IfcPreDefinedPropertySet);
	/// LiningDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// LiningThickness : OPTIONAL IfcNonNegativeLengthMeasure;
	/// TransomThickness : OPTIONAL IfcNonNegativeLengthMeasure;
	/// MullionThickness : OPTIONAL IfcNonNegativeLengthMeasure;
	/// FirstTransomOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// SecondTransomOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// FirstMullionOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// SecondMullionOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// LiningOffset : OPTIONAL IfcLengthMeasure;
	/// LiningToPanelOffsetX : OPTIONAL IfcLengthMeasure;
	/// LiningToPanelOffsetY : OPTIONAL IfcLengthMeasure;
	/// WHERE
	/// WR31 : NOT(EXISTS(LiningDepth) AND NOT(EXISTS(LiningThickness)));
	/// WR32 : NOT(NOT(EXISTS(FirstTransomOffset)) AND EXISTS(SecondTransomOffset));
	/// WR33 : NOT(NOT(EXISTS(FirstMullionOffset)) AND EXISTS(SecondMullionOffset));
	/// WR34 : (EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// AND
	/// (
	/// ('IFC4.IFCWINDOWTYPE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// OR
	/// ('IFC4.IFCWINDOWSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// );
	/// END_ENTITY;
	/// <summary>
	public class IfcWindowLiningProperties : IfcPreDefinedPropertySet, Global.IfcWindowLiningProperties
	{
		public virtual IfcPositiveLengthMeasure? LiningDepth { get; set; }
		public virtual IfcNonNegativeLengthMeasure? LiningThickness { get; set; }
		public virtual IfcNonNegativeLengthMeasure? TransomThickness { get; set; }
		public virtual IfcNonNegativeLengthMeasure? MullionThickness { get; set; }
		public virtual IfcNormalisedRatioMeasure? FirstTransomOffset { get; set; }
		public virtual IfcNormalisedRatioMeasure? SecondTransomOffset { get; set; }
		public virtual IfcNormalisedRatioMeasure? FirstMullionOffset { get; set; }
		public virtual IfcNormalisedRatioMeasure? SecondMullionOffset { get; set; }
		public virtual IfcShapeAspect? ShapeAspectStyle { get; set; }
		public virtual IfcLengthMeasure? LiningOffset { get; set; }
		public virtual IfcLengthMeasure? LiningToPanelOffsetX { get; set; }
		public virtual IfcLengthMeasure? LiningToPanelOffsetY { get; set; }
		public IfcWindowLiningProperties() : base()
		{
		}
		public IfcWindowLiningProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPositiveLengthMeasure? LiningDepth, IfcNonNegativeLengthMeasure? LiningThickness, IfcNonNegativeLengthMeasure? TransomThickness, IfcNonNegativeLengthMeasure? MullionThickness, IfcNormalisedRatioMeasure? FirstTransomOffset, IfcNormalisedRatioMeasure? SecondTransomOffset, IfcNormalisedRatioMeasure? FirstMullionOffset, IfcNormalisedRatioMeasure? SecondMullionOffset, IfcShapeAspect? ShapeAspectStyle, IfcLengthMeasure? LiningOffset, IfcLengthMeasure? LiningToPanelOffsetX, IfcLengthMeasure? LiningToPanelOffsetY) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.TransomThickness = TransomThickness;
			this.MullionThickness = MullionThickness;
			this.FirstTransomOffset = FirstTransomOffset;
			this.SecondTransomOffset = SecondTransomOffset;
			this.FirstMullionOffset = FirstMullionOffset;
			this.SecondMullionOffset = SecondMullionOffset;
			this.ShapeAspectStyle = ShapeAspectStyle;
			this.LiningOffset = LiningOffset;
			this.LiningToPanelOffsetX = LiningToPanelOffsetX;
			this.LiningToPanelOffsetY = LiningToPanelOffsetY;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				LiningDepth,
				LiningThickness,
				TransomThickness,
				MullionThickness,
				FirstTransomOffset,
				SecondTransomOffset,
				FirstMullionOffset,
				SecondMullionOffset,
				ShapeAspectStyle,
				LiningOffset,
				LiningToPanelOffsetX,
				LiningToPanelOffsetY
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _LiningDepth
		{
			get
			{
				return LiningDepth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					LiningDepth = val;
				}
				else if(value == null)
				{
					LiningDepth = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _LiningThickness
		{
			get
			{
				return LiningThickness;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					LiningThickness = val;
				}
				else if(value == null)
				{
					LiningThickness = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _TransomThickness
		{
			get
			{
				return TransomThickness;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					TransomThickness = val;
				}
				else if(value == null)
				{
					TransomThickness = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _MullionThickness
		{
			get
			{
				return MullionThickness;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					MullionThickness = val;
				}
				else if(value == null)
				{
					MullionThickness = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _FirstTransomOffset
		{
			get
			{
				return FirstTransomOffset;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					FirstTransomOffset = val;
				}
				else if(value == null)
				{
					FirstTransomOffset = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _SecondTransomOffset
		{
			get
			{
				return SecondTransomOffset;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					SecondTransomOffset = val;
				}
				else if(value == null)
				{
					SecondTransomOffset = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _FirstMullionOffset
		{
			get
			{
				return FirstMullionOffset;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					FirstMullionOffset = val;
				}
				else if(value == null)
				{
					FirstMullionOffset = null;
				}
			}
		}
		public virtual Global.IfcNormalisedRatioMeasure? _SecondMullionOffset
		{
			get
			{
				return SecondMullionOffset;
			}
			set
			{
				if(value is IfcNormalisedRatioMeasure val)
				{
					SecondMullionOffset = val;
				}
				else if(value == null)
				{
					SecondMullionOffset = null;
				}
			}
		}
		public virtual Global.IfcShapeAspect? _ShapeAspectStyle
		{
			get
			{
				return ShapeAspectStyle;
			}
			set
			{
				if(value is IfcShapeAspect val)
				{
					ShapeAspectStyle = val;
				}
				else if(value == null)
				{
					ShapeAspectStyle = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _LiningOffset
		{
			get
			{
				return LiningOffset;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					LiningOffset = val;
				}
				else if(value == null)
				{
					LiningOffset = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _LiningToPanelOffsetX
		{
			get
			{
				return LiningToPanelOffsetX;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					LiningToPanelOffsetX = val;
				}
				else if(value == null)
				{
					LiningToPanelOffsetX = null;
				}
			}
		}
		public virtual Global.IfcLengthMeasure? _LiningToPanelOffsetY
		{
			get
			{
				return LiningToPanelOffsetY;
			}
			set
			{
				if(value is IfcLengthMeasure val)
				{
					LiningToPanelOffsetY = val;
				}
				else if(value == null)
				{
					LiningToPanelOffsetY = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWindowPanelProperties
	/// SUBTYPE OF (IfcPreDefinedPropertySet);
	/// OperationType : IfcWindowPanelOperationEnum;
	/// PanelPosition : IfcWindowPanelPositionEnum;
	/// FrameDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// FrameThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// WHERE
	/// ApplicableToType : (EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// AND
	/// (
	/// ('IFC4.IFCWINDOWTYPE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// OR
	/// ('IFC4.IFCWINDOWSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]))
	/// );
	/// END_ENTITY;
	/// <summary>
	public class IfcWindowPanelProperties : IfcPreDefinedPropertySet, Global.IfcWindowPanelProperties
	{
		public virtual IfcWindowPanelOperationEnum? OperationType { get; set; }
		public virtual IfcWindowPanelPositionEnum? PanelPosition { get; set; }
		public virtual IfcPositiveLengthMeasure? FrameDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? FrameThickness { get; set; }
		public virtual IfcShapeAspect? ShapeAspectStyle { get; set; }
		public IfcWindowPanelProperties() : base()
		{
		}
		public IfcWindowPanelProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcWindowPanelOperationEnum? OperationType, IfcWindowPanelPositionEnum? PanelPosition, IfcPositiveLengthMeasure? FrameDepth, IfcPositiveLengthMeasure? FrameThickness, IfcShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				OperationType,
				PanelPosition,
				FrameDepth,
				FrameThickness,
				ShapeAspectStyle
			};
		}
		public virtual Global.IfcWindowPanelOperationEnum? _OperationType
		{
			get
			{
				return OperationType;
			}
			set
			{
				if(value is IfcWindowPanelOperationEnum val)
				{
					OperationType = val;
				}
				else if(value == null)
				{
					OperationType = null;
				}
			}
		}
		public virtual Global.IfcWindowPanelPositionEnum? _PanelPosition
		{
			get
			{
				return PanelPosition;
			}
			set
			{
				if(value is IfcWindowPanelPositionEnum val)
				{
					PanelPosition = val;
				}
				else if(value == null)
				{
					PanelPosition = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _FrameDepth
		{
			get
			{
				return FrameDepth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FrameDepth = val;
				}
				else if(value == null)
				{
					FrameDepth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _FrameThickness
		{
			get
			{
				return FrameThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FrameThickness = val;
				}
				else if(value == null)
				{
					FrameThickness = null;
				}
			}
		}
		public virtual Global.IfcShapeAspect? _ShapeAspectStyle
		{
			get
			{
				return ShapeAspectStyle;
			}
			set
			{
				if(value is IfcShapeAspect val)
				{
					ShapeAspectStyle = val;
				}
				else if(value == null)
				{
					ShapeAspectStyle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWindowStandardCase
	/// SUBTYPE OF (IfcWindow);
	/// END_ENTITY;
	/// <summary>
	public class IfcWindowStandardCase : IfcWindow, Global.IfcWindowStandardCase
	{
		public IfcWindowStandardCase() : base()
		{
		}
		public IfcWindowStandardCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPositiveLengthMeasure? OverallHeight, IfcPositiveLengthMeasure? OverallWidth, IfcWindowTypeEnum? PredefinedType, IfcWindowTypePartitioningEnum? PartitioningType, IfcLabel? UserDefinedPartitioningType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, PartitioningType, UserDefinedPartitioningType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				OverallHeight,
				OverallWidth,
				PredefinedType,
				PartitioningType,
				UserDefinedPartitioningType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcWindowStyle
	/// SUBTYPE OF (IfcTypeProduct);
	/// ConstructionType : IfcWindowStyleConstructionEnum;
	/// OperationType : IfcWindowStyleOperationEnum;
	/// ParameterTakesPrecedence : IfcBoolean;
	/// Sizeable : IfcBoolean;
	/// END_ENTITY;
	/// <summary>
	public class IfcWindowStyle : IfcTypeProduct, Global.IfcWindowStyle
	{
		public virtual IfcWindowStyleConstructionEnum? ConstructionType { get; set; }
		public virtual IfcWindowStyleOperationEnum? OperationType { get; set; }
		public virtual IfcBoolean? ParameterTakesPrecedence { get; set; }
		public virtual IfcBoolean? Sizeable { get; set; }
		public IfcWindowStyle() : base()
		{
		}
		public IfcWindowStyle(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcWindowStyleConstructionEnum? ConstructionType, IfcWindowStyleOperationEnum? OperationType, IfcBoolean? ParameterTakesPrecedence, IfcBoolean? Sizeable) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag)
		{
			this.ConstructionType = ConstructionType;
			this.OperationType = OperationType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ConstructionType,
				OperationType,
				ParameterTakesPrecedence,
				Sizeable
			};
		}
		public virtual Global.IfcWindowStyleConstructionEnum? _ConstructionType
		{
			get
			{
				return ConstructionType;
			}
			set
			{
				if(value is IfcWindowStyleConstructionEnum val)
				{
					ConstructionType = val;
				}
				else if(value == null)
				{
					ConstructionType = null;
				}
			}
		}
		public virtual Global.IfcWindowStyleOperationEnum? _OperationType
		{
			get
			{
				return OperationType;
			}
			set
			{
				if(value is IfcWindowStyleOperationEnum val)
				{
					OperationType = val;
				}
				else if(value == null)
				{
					OperationType = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _ParameterTakesPrecedence
		{
			get
			{
				return ParameterTakesPrecedence;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					ParameterTakesPrecedence = val;
				}
				else if(value == null)
				{
					ParameterTakesPrecedence = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _Sizeable
		{
			get
			{
				return Sizeable;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					Sizeable = val;
				}
				else if(value == null)
				{
					Sizeable = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWindowType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcWindowTypeEnum;
	/// PartitioningType : IfcWindowTypePartitioningEnum;
	/// ParameterTakesPrecedence : OPTIONAL IfcBoolean;
	/// UserDefinedPartitioningType : OPTIONAL IfcLabel;
	/// WHERE
	/// CorrectPredefinedType : (PredefinedType <> IfcWindowTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcWindowTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcWindowType : IfcBuildingElementType, Global.IfcWindowType
	{
		public virtual IfcWindowTypeEnum? PredefinedType { get; set; }
		public virtual IfcWindowTypePartitioningEnum? PartitioningType { get; set; }
		public virtual IfcBoolean? ParameterTakesPrecedence { get; set; }
		public virtual IfcLabel? UserDefinedPartitioningType { get; set; }
		public IfcWindowType() : base()
		{
		}
		public IfcWindowType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcIdentifier? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcWindowTypeEnum? PredefinedType, IfcWindowTypePartitioningEnum? PartitioningType, IfcBoolean? ParameterTakesPrecedence, IfcLabel? UserDefinedPartitioningType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
			this.PartitioningType = PartitioningType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.UserDefinedPartitioningType = UserDefinedPartitioningType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType,
				PartitioningType,
				ParameterTakesPrecedence,
				UserDefinedPartitioningType
			};
		}
		public virtual Global.IfcWindowTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcWindowTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IfcWindowTypePartitioningEnum? _PartitioningType
		{
			get
			{
				return PartitioningType;
			}
			set
			{
				if(value is IfcWindowTypePartitioningEnum val)
				{
					PartitioningType = val;
				}
				else if(value == null)
				{
					PartitioningType = null;
				}
			}
		}
		public virtual Global.IfcBoolean? _ParameterTakesPrecedence
		{
			get
			{
				return ParameterTakesPrecedence;
			}
			set
			{
				if(value is IfcBoolean val)
				{
					ParameterTakesPrecedence = val;
				}
				else if(value == null)
				{
					ParameterTakesPrecedence = null;
				}
			}
		}
		public virtual Global.IfcLabel? _UserDefinedPartitioningType
		{
			get
			{
				return UserDefinedPartitioningType;
			}
			set
			{
				if(value is IfcLabel val)
				{
					UserDefinedPartitioningType = val;
				}
				else if(value == null)
				{
					UserDefinedPartitioningType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWorkCalendar
	/// SUBTYPE OF (IfcControl);
	/// WorkingTimes : OPTIONAL SET [1:?] OF IfcWorkTime;
	/// ExceptionTimes : OPTIONAL SET [1:?] OF IfcWorkTime;
	/// PredefinedType : OPTIONAL IfcWorkCalendarTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR (PredefinedType <> IfcWorkCalendarTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcWorkCalendarTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcWorkCalendar : IfcControl, Global.IfcWorkCalendar
	{
		public virtual List<IfcWorkTime>? WorkingTimes { get; set; }
		public virtual List<IfcWorkTime>? ExceptionTimes { get; set; }
		public virtual IfcWorkCalendarTypeEnum? PredefinedType { get; set; }
		public IfcWorkCalendar() : base()
		{
		}
		public IfcWorkCalendar(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, List<IfcWorkTime>? WorkingTimes, List<IfcWorkTime>? ExceptionTimes, IfcWorkCalendarTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification)
		{
			this.WorkingTimes = WorkingTimes;
			this.ExceptionTimes = ExceptionTimes;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				WorkingTimes,
				ExceptionTimes,
				PredefinedType
			};
		}
		public virtual List<Global.IfcWorkTime>? _WorkingTimes
		{
			get
			{
				if(WorkingTimes != null)
				{
					List<Global.IfcWorkTime>? items = new List<Global.IfcWorkTime>();
					foreach (IfcWorkTime item in WorkingTimes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					WorkingTimes = null;
				}
				else
				{
					WorkingTimes = new List<IfcWorkTime>();
					foreach(var val in value)
					{
						if(val is IfcWorkTime v)
						{
							WorkingTimes.Add(v);
						}
					}
				}
			}
		}
		public virtual List<Global.IfcWorkTime>? _ExceptionTimes
		{
			get
			{
				if(ExceptionTimes != null)
				{
					List<Global.IfcWorkTime>? items = new List<Global.IfcWorkTime>();
					foreach (IfcWorkTime item in ExceptionTimes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ExceptionTimes = null;
				}
				else
				{
					ExceptionTimes = new List<IfcWorkTime>();
					foreach(var val in value)
					{
						if(val is IfcWorkTime v)
						{
							ExceptionTimes.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcWorkCalendarTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcWorkCalendarTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWorkControl
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcWorkPlan
	/// ,IfcWorkSchedule))
	/// SUBTYPE OF (IfcControl);
	/// CreationDate : IfcDateTime;
	/// Creators : OPTIONAL SET [1:?] OF IfcPerson;
	/// Purpose : OPTIONAL IfcLabel;
	/// Duration : OPTIONAL IfcDuration;
	/// TotalFloat : OPTIONAL IfcDuration;
	/// StartTime : IfcDateTime;
	/// FinishTime : OPTIONAL IfcDateTime;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcWorkControl : IfcControl, Global.IfcWorkControl
	{
		public virtual IfcDateTime? CreationDate { get; set; }
		public virtual List<IfcPerson>? Creators { get; set; }
		public virtual IfcLabel? Purpose { get; set; }
		public virtual IfcDuration? Duration { get; set; }
		public virtual IfcDuration? TotalFloat { get; set; }
		public virtual IfcDateTime? StartTime { get; set; }
		public virtual IfcDateTime? FinishTime { get; set; }
		public IfcWorkControl() : base()
		{
		}
		public IfcWorkControl(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcDateTime? CreationDate, List<IfcPerson>? Creators, IfcLabel? Purpose, IfcDuration? Duration, IfcDuration? TotalFloat, IfcDateTime? StartTime, IfcDateTime? FinishTime) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification)
		{
			this.CreationDate = CreationDate;
			this.Creators = Creators;
			this.Purpose = Purpose;
			this.Duration = Duration;
			this.TotalFloat = TotalFloat;
			this.StartTime = StartTime;
			this.FinishTime = FinishTime;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				CreationDate,
				Creators,
				Purpose,
				Duration,
				TotalFloat,
				StartTime,
				FinishTime
			};
		}
		public virtual Global.IfcDateTime? _CreationDate
		{
			get
			{
				return CreationDate;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					CreationDate = val;
				}
				else if(value == null)
				{
					CreationDate = null;
				}
			}
		}
		public virtual List<Global.IfcPerson>? _Creators
		{
			get
			{
				if(Creators != null)
				{
					List<Global.IfcPerson>? items = new List<Global.IfcPerson>();
					foreach (IfcPerson item in Creators)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Creators = null;
				}
				else
				{
					Creators = new List<IfcPerson>();
					foreach(var val in value)
					{
						if(val is IfcPerson v)
						{
							Creators.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IfcLabel? _Purpose
		{
			get
			{
				return Purpose;
			}
			set
			{
				if(value is IfcLabel val)
				{
					Purpose = val;
				}
				else if(value == null)
				{
					Purpose = null;
				}
			}
		}
		public virtual Global.IfcDuration? _Duration
		{
			get
			{
				return Duration;
			}
			set
			{
				if(value is IfcDuration val)
				{
					Duration = val;
				}
				else if(value == null)
				{
					Duration = null;
				}
			}
		}
		public virtual Global.IfcDuration? _TotalFloat
		{
			get
			{
				return TotalFloat;
			}
			set
			{
				if(value is IfcDuration val)
				{
					TotalFloat = val;
				}
				else if(value == null)
				{
					TotalFloat = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _StartTime
		{
			get
			{
				return StartTime;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					StartTime = val;
				}
				else if(value == null)
				{
					StartTime = null;
				}
			}
		}
		public virtual Global.IfcDateTime? _FinishTime
		{
			get
			{
				return FinishTime;
			}
			set
			{
				if(value is IfcDateTime val)
				{
					FinishTime = val;
				}
				else if(value == null)
				{
					FinishTime = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWorkPlan
	/// SUBTYPE OF (IfcWorkControl);
	/// PredefinedType : OPTIONAL IfcWorkPlanTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR (PredefinedType <> IfcWorkPlanTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcWorkPlanTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcWorkPlan : IfcWorkControl, Global.IfcWorkPlan
	{
		public virtual IfcWorkPlanTypeEnum? PredefinedType { get; set; }
		public IfcWorkPlan() : base()
		{
		}
		public IfcWorkPlan(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcDateTime? CreationDate, List<IfcPerson>? Creators, IfcLabel? Purpose, IfcDuration? Duration, IfcDuration? TotalFloat, IfcDateTime? StartTime, IfcDateTime? FinishTime, IfcWorkPlanTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				CreationDate,
				Creators,
				Purpose,
				Duration,
				TotalFloat,
				StartTime,
				FinishTime,
				PredefinedType
			};
		}
		public virtual Global.IfcWorkPlanTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcWorkPlanTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWorkSchedule
	/// SUBTYPE OF (IfcWorkControl);
	/// PredefinedType : OPTIONAL IfcWorkScheduleTypeEnum;
	/// WHERE
	/// CorrectPredefinedType : NOT(EXISTS(PredefinedType)) OR (PredefinedType <> IfcWorkScheduleTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcWorkScheduleTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcWorkSchedule : IfcWorkControl, Global.IfcWorkSchedule
	{
		public virtual IfcWorkScheduleTypeEnum? PredefinedType { get; set; }
		public IfcWorkSchedule() : base()
		{
		}
		public IfcWorkSchedule(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identification, IfcDateTime? CreationDate, List<IfcPerson>? Creators, IfcLabel? Purpose, IfcDuration? Duration, IfcDuration? TotalFloat, IfcDateTime? StartTime, IfcDateTime? FinishTime, IfcWorkScheduleTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identification,
				CreationDate,
				Creators,
				Purpose,
				Duration,
				TotalFloat,
				StartTime,
				FinishTime,
				PredefinedType
			};
		}
		public virtual Global.IfcWorkScheduleTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IfcWorkScheduleTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWorkTime
	/// SUBTYPE OF (IfcSchedulingTime);
	/// RecurrencePattern : OPTIONAL IfcRecurrencePattern;
	/// Start : OPTIONAL IfcDate;
	/// Finish : OPTIONAL IfcDate;
	/// END_ENTITY;
	/// <summary>
	public class IfcWorkTime : IfcSchedulingTime, Global.IfcWorkTime
	{
		public virtual IfcRecurrencePattern? RecurrencePattern { get; set; }
		public virtual IfcDate? Start { get; set; }
		public virtual IfcDate? Finish { get; set; }
		public IfcWorkTime() : base()
		{
		}
		public IfcWorkTime(IfcLabel? Name, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcRecurrencePattern? RecurrencePattern, IfcDate? Start, IfcDate? Finish) : base (Name, DataOrigin, UserDefinedDataOrigin)
		{
			this.RecurrencePattern = RecurrencePattern;
			this.Start = Start;
			this.Finish = Finish;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DataOrigin,
				UserDefinedDataOrigin,
				RecurrencePattern,
				Start,
				Finish
			};
		}
		public virtual Global.IfcRecurrencePattern? _RecurrencePattern
		{
			get
			{
				return RecurrencePattern;
			}
			set
			{
				if(value is IfcRecurrencePattern val)
				{
					RecurrencePattern = val;
				}
				else if(value == null)
				{
					RecurrencePattern = null;
				}
			}
		}
		public virtual Global.IfcDate? _Start
		{
			get
			{
				return Start;
			}
			set
			{
				if(value is IfcDate val)
				{
					Start = val;
				}
				else if(value == null)
				{
					Start = null;
				}
			}
		}
		public virtual Global.IfcDate? _Finish
		{
			get
			{
				return Finish;
			}
			set
			{
				if(value is IfcDate val)
				{
					Finish = val;
				}
				else if(value == null)
				{
					Finish = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcZShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// FlangeWidth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// EdgeRadius : OPTIONAL IfcNonNegativeLengthMeasure;
	/// WHERE
	/// ValidFlangeThickness : FlangeThickness < (Depth / 2.);
	/// END_ENTITY;
	/// <summary>
	public class IfcZShapeProfileDef : IfcParameterizedProfileDef, Global.IfcZShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IfcNonNegativeLengthMeasure? FilletRadius { get; set; }
		public virtual IfcNonNegativeLengthMeasure? EdgeRadius { get; set; }
		public IfcZShapeProfileDef() : base()
		{
		}
		public IfcZShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Depth, IfcPositiveLengthMeasure? FlangeWidth, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? FlangeThickness, IfcNonNegativeLengthMeasure? FilletRadius, IfcNonNegativeLengthMeasure? EdgeRadius) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Depth,
				FlangeWidth,
				WebThickness,
				FlangeThickness,
				FilletRadius,
				EdgeRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _FlangeWidth
		{
			get
			{
				return FlangeWidth;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FlangeWidth = val;
				}
				else if(value == null)
				{
					FlangeWidth = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _WebThickness
		{
			get
			{
				return WebThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					WebThickness = val;
				}
				else if(value == null)
				{
					WebThickness = null;
				}
			}
		}
		public virtual Global.IfcPositiveLengthMeasure? _FlangeThickness
		{
			get
			{
				return FlangeThickness;
			}
			set
			{
				if(value is IfcPositiveLengthMeasure val)
				{
					FlangeThickness = val;
				}
				else if(value == null)
				{
					FlangeThickness = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _FilletRadius
		{
			get
			{
				return FilletRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					FilletRadius = val;
				}
				else if(value == null)
				{
					FilletRadius = null;
				}
			}
		}
		public virtual Global.IfcNonNegativeLengthMeasure? _EdgeRadius
		{
			get
			{
				return EdgeRadius;
			}
			set
			{
				if(value is IfcNonNegativeLengthMeasure val)
				{
					EdgeRadius = val;
				}
				else if(value == null)
				{
					EdgeRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcZone
	/// SUBTYPE OF (IfcSystem);
	/// LongName : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : (SIZEOF(SELF\IfcGroup.IsGroupedBy) = 0) OR
	/// (SIZEOF (QUERY (temp <* SELF\IfcGroup.IsGroupedBy[1].RelatedObjects |
	/// NOT(('IFC4.IFCZONE' IN TYPEOF(temp)) OR
	/// ('IFC4.IFCSPACE' IN TYPEOF(temp)) OR
	/// ('IFC4.IFCSPATIALZONE' IN TYPEOF(temp))
	/// ))) = 0);
	/// END_ENTITY;
	/// <summary>
	public class IfcZone : IfcSystem, Global.IfcZone
	{
		public virtual IfcLabel? LongName { get; set; }
		public IfcZone() : base()
		{
		}
		public IfcZone(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcLabel? LongName) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.LongName = LongName;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				LongName
			};
		}
		public virtual Global.IfcLabel? _LongName
		{
			get
			{
				return LongName;
			}
			set
			{
				if(value is IfcLabel val)
				{
					LongName = val;
				}
				else if(value == null)
				{
					LongName = null;
				}
			}
		}
	}
}
