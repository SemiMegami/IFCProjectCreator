using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Reflection;
#pragma warning disable VSSpell001 // Spell Check
namespace CSiBKK.IFC
{
	public class IFC_MODEL
	{

        /// <summary>
        /// Version of this model
        /// </summary>
        protected IFC_VERSION Version;

        /// <summary>
        /// IFC Items
        /// </summary>
		public Dictionary<string, IFC_I_ENTITY> Items;

        /// <summary>
		/// Error Log generated during importing.
		/// </summary>
		public List<IFC_LOG> Logs { get; set; }



        /// <summary>
        /// Constructor
        /// </summary>
        public IFC_MODEL()
		{
			this.Version = IFC_VERSION.UNDEFINED;
            Items = new Dictionary<string, IFC_I_ENTITY>();
            Logs = new List<IFC_LOG>();
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public IFC_MODEL(string version) : this()
        {
            switch (version.ToUpper())
            {

				case "IFC2X3": this.Version = IFC_VERSION.IFC2X3; break;
				case "IFC4": this.Version = IFC_VERSION.IFC4; break;
				case "IFC4X1": this.Version = IFC_VERSION.IFC4X1; break;
				case "IFC4X2": this.Version = IFC_VERSION.IFC4X2; break;
				case "IFC4X3": this.Version = IFC_VERSION.IFC4X3; break;

            }
        }


        /// <summary>
        /// Return IFC Item with specified type
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        public List<T> GetItems<T>() where T : IFC_I_ENTITY
		{
			List<IFC_I_ENTITY> itemList = Items.Values.Where(x => x is T).ToList();
            List <T> results = new List<T>();
			foreach (var item in itemList)
			{
				results.Add((T)item);
			}
			return results;
        }

        void CheckAndAddItem(dynamic parameter)
        {
            if (parameter == null)
            {
                return;
            }
            if(parameter != null)
            {
                if (parameter is IFC_ENTITY entity)
                {
                    if (entity.Model != this)
                    {
                        AddItem(entity);
                    }
                }
                else if (parameter.GetType().GetInterface("IEnumerable") != null)
                {
                    for (int i = 0; i < parameter.Count; i++)
                    {
                        CheckAndAddItem(parameter[i]);
                    }
                }
            }
        }

        public static string GenerateID()
        {
            return Guid.NewGuid().ToString().Replace("-", "").Substring(0, 22);
        }

        public virtual void Clear()
        {
            Items.Clear();
        }

        public virtual void AddItem(IFC_ENTITY IFCBase)
        {

            List<IFC_BASE?> parameters = IFCBase.GetDirectAttributes().Values.ToList();

            foreach (var parameter in parameters)
            {
                if(parameter!= null)
                {
                    CheckAndAddItem(parameter);
                }
            }

            if (IFCBase.Model == this)
            {
                return;
            }

            string IFC_ID = "#" + (Items.Count + 1);
            IFCBase.IFC_ID = IFC_ID;
            Items.Add(IFC_ID, IFCBase);
            IFCBase.Model = this;

        }

        /// <summary>
        /// Export model to IFC
        /// </summary>
        /// <returns></returns>
        public virtual void ExportIFC(string path)
        {
            var now = DateTime.UtcNow.ToString();
            using (StreamWriter writer = new StreamWriter(path))
            {
                writer.WriteLine("ISO-10303-21;");
                writer.WriteLine("HEADER;");
                writer.WriteLine("FILE_DESCRIPTION(");
                writer.WriteLine("/* description */ ('ViewDefinition [PresentationView]', 'Comment [Cutouts,SDS/2 Detailed model]'),");
                writer.WriteLine("/* implementation_level */ '2;1');");
                writer.WriteLine("FILE_NAME(");
                writer.WriteLine("/* name */ '" + path + "',");
                writer.WriteLine("/* time_stamp */ '" + now + "',");
                writer.WriteLine("/* author */ ('Author Name'),");
                writer.WriteLine("/* organization */ ('Organization Name'),");
                writer.WriteLine("/* preprocessor_version */ 'Version Name',");
                writer.WriteLine("/* originating_system */ 'System Name',");
                writer.WriteLine("/* authorization */ 'None');");
                writer.WriteLine("FILE_SCHEMA (('" + Version.ToString().ToUpper() + "'));");
                writer.WriteLine("ENDSEC;");
                writer.WriteLine("DATA;");
                writer.WriteLine("");
                foreach (var item in Items.Values.ToList())
                {
                    if (item != null)
                    {
                        string text = item.GetIFCFullText();
                        writer.WriteLine(text);
                    }
                }
                writer.WriteLine("");
                writer.WriteLine("ENDSEC;");
                writer.WriteLine("END-ISO-10303-21;");
            }
        }

        private void ReadDataline(string ifcText)
        {

            string[] leftRight = ifcText.Split('=');
            if (leftRight.Length < 2)
            {
                return;
            }
            string key = leftRight[0].Replace(" ", "");

            string data = leftRight[1];
            while (data.Length > 0 && data.Substring(0, 1) == " ")
            {
                data = data.Substring(1);
            }
            int nameLenght = data.IndexOf('(');
            string name = data.Substring(0, nameLenght);
            string paraText = data.Substring(nameLenght + 1, data.Length - 3 - nameLenght);
            List<string> paramList = SplitParamText(paraText);


            var item = CreateItem(name);
            if (item != null)
            {
				if(item is IFC_I_ENTITY entity)
				{
                    entity.IFC_ID = key;
                    entity.AttributeTexts = paramList;
                    Items.Add(key, entity);
                }
            }
        }

        public List<string> SplitParamText(string paramText)
        {
            List<string> outputText = new List<string>();
            int bracketCount = 0;
            bool readingString = false;
            char[] chars = paramText.ToCharArray();
            int n = chars.Length;
            char c;
            string scanningText = "";
            for (int i = 0; i < n; i++)
            {
                c = chars[i];
                if (c == '\'')
                {
                    readingString = !readingString; // toggle 
                    scanningText += c;
                }
                else if (!readingString && c == '(')
                {
                    scanningText += c;
                    bracketCount++;
                }
                else if (!readingString && c == ')')
                {
                    bracketCount--;
                    scanningText += c;
                }
                else if (!readingString && c == ',' && bracketCount == 0)
                {

                }
                else
                {
                    scanningText += c;
                }

                if (i == n - 1 || (!readingString && c == ',' && bracketCount == 0))
                {
                    outputText.Add(scanningText);
                    scanningText = "";
                }
            }
            return outputText;
        }
 
        public void ImportIFC(string path)
        {
            using (var reader = new StreamReader(path))
            {
				if (reader != null)
				{
					while (reader!= null && !reader.EndOfStream)
					{
						if (reader != null)
						{
							string? text = reader.ReadLine();
							if (text != null)
							{
								if (text.Contains("FILE_SCHEMA"))
								{
									

									if (text.Contains("'IFC2X3'"))
									{
										Version = IFC_VERSION.IFC2X3;
										break;
									}
									if (text.Contains("'IFC4'"))
									{
										Version = IFC_VERSION.IFC4;
										break;
									}
									if (text.Contains("'IFC4X1'"))
									{
										Version = IFC_VERSION.IFC4X1;
										break;
									}
									if (text.Contains("'IFC4X2'"))
									{
										Version = IFC_VERSION.IFC4X2;
										break;
									}
									if (text.Contains("'IFC4X3'"))
									{
										Version = IFC_VERSION.IFC4X3;
										break;
									}


								}
							}
						}
					}
				}
            }

            string[] allTexts;
            // read ifc file
            using (StreamReader reader = new StreamReader(path))
            {
                allTexts = reader.ReadToEnd().Split("\r\n");
                reader.Close();
            }
            bool readingData = false;
            string ifcText;
            int nLines = allTexts.Length;
            for (int i = 0; i < nLines; i++)
            {
                ifcText = allTexts[i];
                if (ifcText == "DATA;")
                {
                    readingData = true;
                    continue;
                }
                if (readingData)
                {
                    if (ifcText == "") continue;

                    if (ifcText.Length > 1 && ifcText.Replace(" ", "").Substring(0, 2) == "/*")
                    {
                        continue;
                    }
                    if (ifcText == "ENDSEC;") break;
                    ReadDataline(ifcText);
                }
            }

            var its = Items.Values.ToList();

            foreach (var item in its)
            {
                if (item != null)
                {
                    item.Model = this;
                }
            }
            foreach (var item in its)
            {
                if (item != null)
                {
                    item.SetByAttributeTexts();
                }
            }
        }

		protected virtual IFC_BASE? CreateItem(string className)
		{
			switch (className)
			{
				case "REAL" : return new CSiBKK.IFC.IFC_REAL();
				case "INTEGER" : return new CSiBKK.IFC.IFC_INTEGER();
				case "NUMBER" : return new CSiBKK.IFC.IFC_NUMBER();
				case "LOGICAL" : return new CSiBKK.IFC.IFC_LOGICAL();
				case "BOOLEAN" : return new CSiBKK.IFC.IFC_BOOLEAN();
				case "BINARY" : return new CSiBKK.IFC.IFC_BINARY();
				case "STRING" : return new CSiBKK.IFC.IFC_STRING();
			}
			switch (Version)
			{
				case IFC_VERSION.IFC2X3:
					switch (className)
					{
						case "IFCABSORBEDDOSEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCAbsorbedDoseMeasure();
						case "IFCACCELERATIONMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCAccelerationMeasure();
						case "IFCAMOUNTOFSUBSTANCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCAmountOfSubstanceMeasure();
						case "IFCANGULARVELOCITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCAngularVelocityMeasure();
						case "IFCAREAMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCAreaMeasure();
						case "IFCBOOLEAN" : return new CSiBKK.IFC.IFC2X3.IFCBoolean();
						case "IFCBOXALIGNMENT" : return new CSiBKK.IFC.IFC2X3.IFCBoxAlignment();
						case "IFCCONTEXTDEPENDENTMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCContextDependentMeasure();
						case "IFCCOUNTMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCCountMeasure();
						case "IFCCURVATUREMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCCurvatureMeasure();
						case "IFCDAYINMONTHNUMBER" : return new CSiBKK.IFC.IFC2X3.IFCDayInMonthNumber();
						case "IFCDAYLIGHTSAVINGHOUR" : return new CSiBKK.IFC.IFC2X3.IFCDaylightSavingHour();
						case "IFCDESCRIPTIVEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCDescriptiveMeasure();
						case "IFCDIMENSIONCOUNT" : return new CSiBKK.IFC.IFC2X3.IFCDimensionCount();
						case "IFCDOSEEQUIVALENTMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCDoseEquivalentMeasure();
						case "IFCDYNAMICVISCOSITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCDynamicViscosityMeasure();
						case "IFCELECTRICCAPACITANCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCElectricCapacitanceMeasure();
						case "IFCELECTRICCHARGEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCElectricChargeMeasure();
						case "IFCELECTRICCONDUCTANCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCElectricConductanceMeasure();
						case "IFCELECTRICCURRENTMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCElectricCurrentMeasure();
						case "IFCELECTRICRESISTANCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCElectricResistanceMeasure();
						case "IFCELECTRICVOLTAGEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCElectricVoltageMeasure();
						case "IFCENERGYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCEnergyMeasure();
						case "IFCFONTSTYLE" : return new CSiBKK.IFC.IFC2X3.IFCFontStyle();
						case "IFCFONTVARIANT" : return new CSiBKK.IFC.IFC2X3.IFCFontVariant();
						case "IFCFONTWEIGHT" : return new CSiBKK.IFC.IFC2X3.IFCFontWeight();
						case "IFCFORCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCForceMeasure();
						case "IFCFREQUENCYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCFrequencyMeasure();
						case "IFCGLOBALLYUNIQUEID" : return new CSiBKK.IFC.IFC2X3.IFCGloballyUniqueId();
						case "IFCHEATFLUXDENSITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCHeatFluxDensityMeasure();
						case "IFCHEATINGVALUEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCHeatingValueMeasure();
						case "IFCHOURINDAY" : return new CSiBKK.IFC.IFC2X3.IFCHourInDay();
						case "IFCIDENTIFIER" : return new CSiBKK.IFC.IFC2X3.IFCIdentifier();
						case "IFCILLUMINANCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCIlluminanceMeasure();
						case "IFCINDUCTANCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCInductanceMeasure();
						case "IFCINTEGER" : return new CSiBKK.IFC.IFC2X3.IFCInteger();
						case "IFCINTEGERCOUNTRATEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCIntegerCountRateMeasure();
						case "IFCIONCONCENTRATIONMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCIonConcentrationMeasure();
						case "IFCISOTHERMALMOISTURECAPACITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCIsothermalMoistureCapacityMeasure();
						case "IFCKINEMATICVISCOSITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCKinematicViscosityMeasure();
						case "IFCLABEL" : return new CSiBKK.IFC.IFC2X3.IFCLabel();
						case "IFCLENGTHMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCLengthMeasure();
						case "IFCLINEARFORCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCLinearForceMeasure();
						case "IFCLINEARMOMENTMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCLinearMomentMeasure();
						case "IFCLINEARSTIFFNESSMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCLinearStiffnessMeasure();
						case "IFCLINEARVELOCITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCLinearVelocityMeasure();
						case "IFCLOGICAL" : return new CSiBKK.IFC.IFC2X3.IFCLogical();
						case "IFCLUMINOUSFLUXMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCLuminousFluxMeasure();
						case "IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCLuminousIntensityDistributionMeasure();
						case "IFCLUMINOUSINTENSITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCLuminousIntensityMeasure();
						case "IFCMAGNETICFLUXDENSITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCMagneticFluxDensityMeasure();
						case "IFCMAGNETICFLUXMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCMagneticFluxMeasure();
						case "IFCMASSDENSITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCMassDensityMeasure();
						case "IFCMASSFLOWRATEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCMassFlowRateMeasure();
						case "IFCMASSMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCMassMeasure();
						case "IFCMASSPERLENGTHMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCMassPerLengthMeasure();
						case "IFCMINUTEINHOUR" : return new CSiBKK.IFC.IFC2X3.IFCMinuteInHour();
						case "IFCMODULUSOFELASTICITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCModulusOfElasticityMeasure();
						case "IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCModulusOfLinearSubgradeReactionMeasure();
						case "IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCModulusOfRotationalSubgradeReactionMeasure();
						case "IFCMODULUSOFSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCModulusOfSubgradeReactionMeasure();
						case "IFCMOISTUREDIFFUSIVITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCMoistureDiffusivityMeasure();
						case "IFCMOLECULARWEIGHTMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCMolecularWeightMeasure();
						case "IFCMOMENTOFINERTIAMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCMomentOfInertiaMeasure();
						case "IFCMONETARYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCMonetaryMeasure();
						case "IFCMONTHINYEARNUMBER" : return new CSiBKK.IFC.IFC2X3.IFCMonthInYearNumber();
						case "IFCNORMALISEDRATIOMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCNormalisedRatioMeasure();
						case "IFCNUMERICMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCNumericMeasure();
						case "IFCPHMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCPHMeasure();
						case "IFCPARAMETERVALUE" : return new CSiBKK.IFC.IFC2X3.IFCParameterValue();
						case "IFCPLANARFORCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCPlanarForceMeasure();
						case "IFCPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCPlaneAngleMeasure();
						case "IFCPOSITIVELENGTHMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCPositiveLengthMeasure();
						case "IFCPOSITIVEPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCPositivePlaneAngleMeasure();
						case "IFCPOSITIVERATIOMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCPositiveRatioMeasure();
						case "IFCPOWERMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCPowerMeasure();
						case "IFCPRESENTABLETEXT" : return new CSiBKK.IFC.IFC2X3.IFCPresentableText();
						case "IFCPRESSUREMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCPressureMeasure();
						case "IFCRADIOACTIVITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCRadioActivityMeasure();
						case "IFCRATIOMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCRatioMeasure();
						case "IFCREAL" : return new CSiBKK.IFC.IFC2X3.IFCReal();
						case "IFCROTATIONALFREQUENCYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCRotationalFrequencyMeasure();
						case "IFCROTATIONALMASSMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCRotationalMassMeasure();
						case "IFCROTATIONALSTIFFNESSMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCRotationalStiffnessMeasure();
						case "IFCSECONDINMINUTE" : return new CSiBKK.IFC.IFC2X3.IFCSecondInMinute();
						case "IFCSECTIONMODULUSMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCSectionModulusMeasure();
						case "IFCSECTIONALAREAINTEGRALMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCSectionalAreaIntegralMeasure();
						case "IFCSHEARMODULUSMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCShearModulusMeasure();
						case "IFCSOLIDANGLEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCSolidAngleMeasure();
						case "IFCSOUNDPOWERMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCSoundPowerMeasure();
						case "IFCSOUNDPRESSUREMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCSoundPressureMeasure();
						case "IFCSPECIFICHEATCAPACITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCSpecificHeatCapacityMeasure();
						case "IFCSPECULAREXPONENT" : return new CSiBKK.IFC.IFC2X3.IFCSpecularExponent();
						case "IFCSPECULARROUGHNESS" : return new CSiBKK.IFC.IFC2X3.IFCSpecularRoughness();
						case "IFCTEMPERATUREGRADIENTMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCTemperatureGradientMeasure();
						case "IFCTEXT" : return new CSiBKK.IFC.IFC2X3.IFCText();
						case "IFCTEXTALIGNMENT" : return new CSiBKK.IFC.IFC2X3.IFCTextAlignment();
						case "IFCTEXTDECORATION" : return new CSiBKK.IFC.IFC2X3.IFCTextDecoration();
						case "IFCTEXTFONTNAME" : return new CSiBKK.IFC.IFC2X3.IFCTextFontName();
						case "IFCTEXTTRANSFORMATION" : return new CSiBKK.IFC.IFC2X3.IFCTextTransformation();
						case "IFCTHERMALADMITTANCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCThermalAdmittanceMeasure();
						case "IFCTHERMALCONDUCTIVITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCThermalConductivityMeasure();
						case "IFCTHERMALEXPANSIONCOEFFICIENTMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCThermalExpansionCoefficientMeasure();
						case "IFCTHERMALRESISTANCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCThermalResistanceMeasure();
						case "IFCTHERMALTRANSMITTANCEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCThermalTransmittanceMeasure();
						case "IFCTHERMODYNAMICTEMPERATUREMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCThermodynamicTemperatureMeasure();
						case "IFCTIMEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCTimeMeasure();
						case "IFCTIMESTAMP" : return new CSiBKK.IFC.IFC2X3.IFCTimeStamp();
						case "IFCTORQUEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCTorqueMeasure();
						case "IFCVAPORPERMEABILITYMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCVaporPermeabilityMeasure();
						case "IFCVOLUMEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCVolumeMeasure();
						case "IFCVOLUMETRICFLOWRATEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCVolumetricFlowRateMeasure();
						case "IFCWARPINGCONSTANTMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCWarpingConstantMeasure();
						case "IFCWARPINGMOMENTMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCWarpingMomentMeasure();
						case "IFCYEARNUMBER" : return new CSiBKK.IFC.IFC2X3.IFCYearNumber();
						case "IFCCOMPLEXNUMBER" : return new CSiBKK.IFC.IFC2X3.IFCComplexNumber();
						case "IFCCOMPOUNDPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC2X3.IFCCompoundPlaneAngleMeasure();
						case "IFCACTIONSOURCETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCActionSourceTypeEnum();
						case "IFCACTIONTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCActionTypeEnum();
						case "IFCACTUATORTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCActuatorTypeEnum();
						case "IFCADDRESSTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCAddressTypeEnum();
						case "IFCAHEADORBEHIND" : return new CSiBKK.IFC.IFC2X3.IFCAheadOrBehind();
						case "IFCAIRTERMINALBOXTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCAirTerminalBoxTypeEnum();
						case "IFCAIRTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCAirTerminalTypeEnum();
						case "IFCAIRTOAIRHEATRECOVERYTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCAirToAirHeatRecoveryTypeEnum();
						case "IFCALARMTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCAlarmTypeEnum();
						case "IFCANALYSISMODELTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCAnalysisModelTypeEnum();
						case "IFCANALYSISTHEORYTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCAnalysisTheoryTypeEnum();
						case "IFCARITHMETICOPERATORENUM" : return new CSiBKK.IFC.IFC2X3.IFCArithmeticOperatorEnum();
						case "IFCASSEMBLYPLACEENUM" : return new CSiBKK.IFC.IFC2X3.IFCAssemblyPlaceEnum();
						case "IFCBSPLINECURVEFORM" : return new CSiBKK.IFC.IFC2X3.IFCBSplineCurveForm();
						case "IFCBEAMTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCBeamTypeEnum();
						case "IFCBENCHMARKENUM" : return new CSiBKK.IFC.IFC2X3.IFCBenchmarkEnum();
						case "IFCBOILERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCBoilerTypeEnum();
						case "IFCBOOLEANOPERATOR" : return new CSiBKK.IFC.IFC2X3.IFCBooleanOperator();
						case "IFCBUILDINGELEMENTPROXYTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCBuildingElementProxyTypeEnum();
						case "IFCCABLECARRIERFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCCableCarrierFittingTypeEnum();
						case "IFCCABLECARRIERSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCCableCarrierSegmentTypeEnum();
						case "IFCCABLESEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCCableSegmentTypeEnum();
						case "IFCCHANGEACTIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCChangeActionEnum();
						case "IFCCHILLERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCChillerTypeEnum();
						case "IFCCOILTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCCoilTypeEnum();
						case "IFCCOLUMNTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCColumnTypeEnum();
						case "IFCCOMPRESSORTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCCompressorTypeEnum();
						case "IFCCONDENSERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCCondenserTypeEnum();
						case "IFCCONNECTIONTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCConnectionTypeEnum();
						case "IFCCONSTRAINTENUM" : return new CSiBKK.IFC.IFC2X3.IFCConstraintEnum();
						case "IFCCONTROLLERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCControllerTypeEnum();
						case "IFCCOOLEDBEAMTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCCooledBeamTypeEnum();
						case "IFCCOOLINGTOWERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCCoolingTowerTypeEnum();
						case "IFCCOSTSCHEDULETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCCostScheduleTypeEnum();
						case "IFCCOVERINGTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCCoveringTypeEnum();
						case "IFCCURRENCYENUM" : return new CSiBKK.IFC.IFC2X3.IFCCurrencyEnum();
						case "IFCCURTAINWALLTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCCurtainWallTypeEnum();
						case "IFCDAMPERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCDamperTypeEnum();
						case "IFCDATAORIGINENUM" : return new CSiBKK.IFC.IFC2X3.IFCDataOriginEnum();
						case "IFCDERIVEDUNITENUM" : return new CSiBKK.IFC.IFC2X3.IFCDerivedUnitEnum();
						case "IFCDIMENSIONEXTENTUSAGE" : return new CSiBKK.IFC.IFC2X3.IFCDimensionExtentUsage();
						case "IFCDIRECTIONSENSEENUM" : return new CSiBKK.IFC.IFC2X3.IFCDirectionSenseEnum();
						case "IFCDISTRIBUTIONCHAMBERELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCDistributionChamberElementTypeEnum();
						case "IFCDOCUMENTCONFIDENTIALITYENUM" : return new CSiBKK.IFC.IFC2X3.IFCDocumentConfidentialityEnum();
						case "IFCDOCUMENTSTATUSENUM" : return new CSiBKK.IFC.IFC2X3.IFCDocumentStatusEnum();
						case "IFCDOORPANELOPERATIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCDoorPanelOperationEnum();
						case "IFCDOORPANELPOSITIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCDoorPanelPositionEnum();
						case "IFCDOORSTYLECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCDoorStyleConstructionEnum();
						case "IFCDOORSTYLEOPERATIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCDoorStyleOperationEnum();
						case "IFCDUCTFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCDuctFittingTypeEnum();
						case "IFCDUCTSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCDuctSegmentTypeEnum();
						case "IFCDUCTSILENCERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCDuctSilencerTypeEnum();
						case "IFCELECTRICAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCElectricApplianceTypeEnum();
						case "IFCELECTRICCURRENTENUM" : return new CSiBKK.IFC.IFC2X3.IFCElectricCurrentEnum();
						case "IFCELECTRICDISTRIBUTIONPOINTFUNCTIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCElectricDistributionPointFunctionEnum();
						case "IFCELECTRICFLOWSTORAGEDEVICETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCElectricFlowStorageDeviceTypeEnum();
						case "IFCELECTRICGENERATORTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCElectricGeneratorTypeEnum();
						case "IFCELECTRICHEATERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCElectricHeaterTypeEnum();
						case "IFCELECTRICMOTORTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCElectricMotorTypeEnum();
						case "IFCELECTRICTIMECONTROLTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCElectricTimeControlTypeEnum();
						case "IFCELEMENTASSEMBLYTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCElementAssemblyTypeEnum();
						case "IFCELEMENTCOMPOSITIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCElementCompositionEnum();
						case "IFCENERGYSEQUENCEENUM" : return new CSiBKK.IFC.IFC2X3.IFCEnergySequenceEnum();
						case "IFCENVIRONMENTALIMPACTCATEGORYENUM" : return new CSiBKK.IFC.IFC2X3.IFCEnvironmentalImpactCategoryEnum();
						case "IFCEVAPORATIVECOOLERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCEvaporativeCoolerTypeEnum();
						case "IFCEVAPORATORTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCEvaporatorTypeEnum();
						case "IFCFANTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCFanTypeEnum();
						case "IFCFILTERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCFilterTypeEnum();
						case "IFCFIRESUPPRESSIONTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCFireSuppressionTerminalTypeEnum();
						case "IFCFLOWDIRECTIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCFlowDirectionEnum();
						case "IFCFLOWINSTRUMENTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCFlowInstrumentTypeEnum();
						case "IFCFLOWMETERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCFlowMeterTypeEnum();
						case "IFCFOOTINGTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCFootingTypeEnum();
						case "IFCGASTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCGasTerminalTypeEnum();
						case "IFCGEOMETRICPROJECTIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCGeometricProjectionEnum();
						case "IFCGLOBALORLOCALENUM" : return new CSiBKK.IFC.IFC2X3.IFCGlobalOrLocalEnum();
						case "IFCHEATEXCHANGERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCHeatExchangerTypeEnum();
						case "IFCHUMIDIFIERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCHumidifierTypeEnum();
						case "IFCINTERNALOREXTERNALENUM" : return new CSiBKK.IFC.IFC2X3.IFCInternalOrExternalEnum();
						case "IFCINVENTORYTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCInventoryTypeEnum();
						case "IFCJUNCTIONBOXTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCJunctionBoxTypeEnum();
						case "IFCLAMPTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCLampTypeEnum();
						case "IFCLAYERSETDIRECTIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCLayerSetDirectionEnum();
						case "IFCLIGHTDISTRIBUTIONCURVEENUM" : return new CSiBKK.IFC.IFC2X3.IFCLightDistributionCurveEnum();
						case "IFCLIGHTEMISSIONSOURCEENUM" : return new CSiBKK.IFC.IFC2X3.IFCLightEmissionSourceEnum();
						case "IFCLIGHTFIXTURETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCLightFixtureTypeEnum();
						case "IFCLOADGROUPTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCLoadGroupTypeEnum();
						case "IFCLOGICALOPERATORENUM" : return new CSiBKK.IFC.IFC2X3.IFCLogicalOperatorEnum();
						case "IFCMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCMemberTypeEnum();
						case "IFCMOTORCONNECTIONTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCMotorConnectionTypeEnum();
						case "IFCNULLSTYLE" : return new CSiBKK.IFC.IFC2X3.IFCNullStyle();
						case "IFCOBJECTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCObjectTypeEnum();
						case "IFCOBJECTIVEENUM" : return new CSiBKK.IFC.IFC2X3.IFCObjectiveEnum();
						case "IFCOCCUPANTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCOccupantTypeEnum();
						case "IFCOUTLETTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCOutletTypeEnum();
						case "IFCPERMEABLECOVERINGOPERATIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCPermeableCoveringOperationEnum();
						case "IFCPHYSICALORVIRTUALENUM" : return new CSiBKK.IFC.IFC2X3.IFCPhysicalOrVirtualEnum();
						case "IFCPILECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCPileConstructionEnum();
						case "IFCPILETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCPileTypeEnum();
						case "IFCPIPEFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCPipeFittingTypeEnum();
						case "IFCPIPESEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCPipeSegmentTypeEnum();
						case "IFCPLATETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCPlateTypeEnum();
						case "IFCPROCEDURETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCProcedureTypeEnum();
						case "IFCPROFILETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCProfileTypeEnum();
						case "IFCPROJECTORDERRECORDTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCProjectOrderRecordTypeEnum();
						case "IFCPROJECTORDERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCProjectOrderTypeEnum();
						case "IFCPROJECTEDORTRUELENGTHENUM" : return new CSiBKK.IFC.IFC2X3.IFCProjectedOrTrueLengthEnum();
						case "IFCPROPERTYSOURCEENUM" : return new CSiBKK.IFC.IFC2X3.IFCPropertySourceEnum();
						case "IFCPROTECTIVEDEVICETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCProtectiveDeviceTypeEnum();
						case "IFCPUMPTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCPumpTypeEnum();
						case "IFCRAILINGTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCRailingTypeEnum();
						case "IFCRAMPFLIGHTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCRampFlightTypeEnum();
						case "IFCRAMPTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCRampTypeEnum();
						case "IFCREFLECTANCEMETHODENUM" : return new CSiBKK.IFC.IFC2X3.IFCReflectanceMethodEnum();
						case "IFCREINFORCINGBARROLEENUM" : return new CSiBKK.IFC.IFC2X3.IFCReinforcingBarRoleEnum();
						case "IFCREINFORCINGBARSURFACEENUM" : return new CSiBKK.IFC.IFC2X3.IFCReinforcingBarSurfaceEnum();
						case "IFCRESOURCECONSUMPTIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCResourceConsumptionEnum();
						case "IFCRIBPLATEDIRECTIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCRibPlateDirectionEnum();
						case "IFCROLEENUM" : return new CSiBKK.IFC.IFC2X3.IFCRoleEnum();
						case "IFCROOFTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCRoofTypeEnum();
						case "IFCSIPREFIX" : return new CSiBKK.IFC.IFC2X3.IFCSIPrefix();
						case "IFCSIUNITNAME" : return new CSiBKK.IFC.IFC2X3.IFCSIUnitName();
						case "IFCSANITARYTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCSanitaryTerminalTypeEnum();
						case "IFCSECTIONTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCSectionTypeEnum();
						case "IFCSENSORTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCSensorTypeEnum();
						case "IFCSEQUENCEENUM" : return new CSiBKK.IFC.IFC2X3.IFCSequenceEnum();
						case "IFCSERVICELIFEFACTORTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCServiceLifeFactorTypeEnum();
						case "IFCSERVICELIFETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCServiceLifeTypeEnum();
						case "IFCSLABTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCSlabTypeEnum();
						case "IFCSOUNDSCALEENUM" : return new CSiBKK.IFC.IFC2X3.IFCSoundScaleEnum();
						case "IFCSPACEHEATERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCSpaceHeaterTypeEnum();
						case "IFCSPACETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCSpaceTypeEnum();
						case "IFCSTACKTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCStackTerminalTypeEnum();
						case "IFCSTAIRFLIGHTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCStairFlightTypeEnum();
						case "IFCSTAIRTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCStairTypeEnum();
						case "IFCSTATEENUM" : return new CSiBKK.IFC.IFC2X3.IFCStateEnum();
						case "IFCSTRUCTURALCURVETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCStructuralCurveTypeEnum();
						case "IFCSTRUCTURALSURFACETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCStructuralSurfaceTypeEnum();
						case "IFCSURFACESIDE" : return new CSiBKK.IFC.IFC2X3.IFCSurfaceSide();
						case "IFCSURFACETEXTUREENUM" : return new CSiBKK.IFC.IFC2X3.IFCSurfaceTextureEnum();
						case "IFCSWITCHINGDEVICETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCSwitchingDeviceTypeEnum();
						case "IFCTANKTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCTankTypeEnum();
						case "IFCTENDONTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCTendonTypeEnum();
						case "IFCTEXTPATH" : return new CSiBKK.IFC.IFC2X3.IFCTextPath();
						case "IFCTHERMALLOADSOURCEENUM" : return new CSiBKK.IFC.IFC2X3.IFCThermalLoadSourceEnum();
						case "IFCTHERMALLOADTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCThermalLoadTypeEnum();
						case "IFCTIMESERIESDATATYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCTimeSeriesDataTypeEnum();
						case "IFCTIMESERIESSCHEDULETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCTimeSeriesScheduleTypeEnum();
						case "IFCTRANSFORMERTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCTransformerTypeEnum();
						case "IFCTRANSITIONCODE" : return new CSiBKK.IFC.IFC2X3.IFCTransitionCode();
						case "IFCTRANSPORTELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCTransportElementTypeEnum();
						case "IFCTRIMMINGPREFERENCE" : return new CSiBKK.IFC.IFC2X3.IFCTrimmingPreference();
						case "IFCTUBEBUNDLETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCTubeBundleTypeEnum();
						case "IFCUNITENUM" : return new CSiBKK.IFC.IFC2X3.IFCUnitEnum();
						case "IFCUNITARYEQUIPMENTTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCUnitaryEquipmentTypeEnum();
						case "IFCVALVETYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCValveTypeEnum();
						case "IFCVIBRATIONISOLATORTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCVibrationIsolatorTypeEnum();
						case "IFCWALLTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCWallTypeEnum();
						case "IFCWASTETERMINALTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCWasteTerminalTypeEnum();
						case "IFCWINDOWPANELOPERATIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCWindowPanelOperationEnum();
						case "IFCWINDOWPANELPOSITIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCWindowPanelPositionEnum();
						case "IFCWINDOWSTYLECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCWindowStyleConstructionEnum();
						case "IFCWINDOWSTYLEOPERATIONENUM" : return new CSiBKK.IFC.IFC2X3.IFCWindowStyleOperationEnum();
						case "IFCWORKCONTROLTYPEENUM" : return new CSiBKK.IFC.IFC2X3.IFCWorkControlTypeEnum();
						case "IFC2DCOMPOSITECURVE" : return new CSiBKK.IFC.IFC2X3.IFC2DCompositeCurve();
						case "IFCACTIONREQUEST" : return new CSiBKK.IFC.IFC2X3.IFCActionRequest();
						case "IFCACTOR" : return new CSiBKK.IFC.IFC2X3.IFCActor();
						case "IFCACTORROLE" : return new CSiBKK.IFC.IFC2X3.IFCActorRole();
						case "IFCACTUATORTYPE" : return new CSiBKK.IFC.IFC2X3.IFCActuatorType();
						case "IFCAIRTERMINALBOXTYPE" : return new CSiBKK.IFC.IFC2X3.IFCAirTerminalBoxType();
						case "IFCAIRTERMINALTYPE" : return new CSiBKK.IFC.IFC2X3.IFCAirTerminalType();
						case "IFCAIRTOAIRHEATRECOVERYTYPE" : return new CSiBKK.IFC.IFC2X3.IFCAirToAirHeatRecoveryType();
						case "IFCALARMTYPE" : return new CSiBKK.IFC.IFC2X3.IFCAlarmType();
						case "IFCANGULARDIMENSION" : return new CSiBKK.IFC.IFC2X3.IFCAngularDimension();
						case "IFCANNOTATION" : return new CSiBKK.IFC.IFC2X3.IFCAnnotation();
						case "IFCANNOTATIONCURVEOCCURRENCE" : return new CSiBKK.IFC.IFC2X3.IFCAnnotationCurveOccurrence();
						case "IFCANNOTATIONFILLAREA" : return new CSiBKK.IFC.IFC2X3.IFCAnnotationFillArea();
						case "IFCANNOTATIONFILLAREAOCCURRENCE" : return new CSiBKK.IFC.IFC2X3.IFCAnnotationFillAreaOccurrence();
						case "IFCANNOTATIONSURFACE" : return new CSiBKK.IFC.IFC2X3.IFCAnnotationSurface();
						case "IFCANNOTATIONSURFACEOCCURRENCE" : return new CSiBKK.IFC.IFC2X3.IFCAnnotationSurfaceOccurrence();
						case "IFCANNOTATIONSYMBOLOCCURRENCE" : return new CSiBKK.IFC.IFC2X3.IFCAnnotationSymbolOccurrence();
						case "IFCANNOTATIONTEXTOCCURRENCE" : return new CSiBKK.IFC.IFC2X3.IFCAnnotationTextOccurrence();
						case "IFCAPPLICATION" : return new CSiBKK.IFC.IFC2X3.IFCApplication();
						case "IFCAPPLIEDVALUERELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCAppliedValueRelationship();
						case "IFCAPPROVAL" : return new CSiBKK.IFC.IFC2X3.IFCApproval();
						case "IFCAPPROVALACTORRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCApprovalActorRelationship();
						case "IFCAPPROVALPROPERTYRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCApprovalPropertyRelationship();
						case "IFCAPPROVALRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCApprovalRelationship();
						case "IFCARBITRARYCLOSEDPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCArbitraryClosedProfileDef();
						case "IFCARBITRARYOPENPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCArbitraryOpenProfileDef();
						case "IFCARBITRARYPROFILEDEFWITHVOIDS" : return new CSiBKK.IFC.IFC2X3.IFCArbitraryProfileDefWithVoids();
						case "IFCASSET" : return new CSiBKK.IFC.IFC2X3.IFCAsset();
						case "IFCASYMMETRICISHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCAsymmetricIShapeProfileDef();
						case "IFCAXIS1PLACEMENT" : return new CSiBKK.IFC.IFC2X3.IFCAxis1Placement();
						case "IFCAXIS2PLACEMENT2D" : return new CSiBKK.IFC.IFC2X3.IFCAxis2Placement2D();
						case "IFCAXIS2PLACEMENT3D" : return new CSiBKK.IFC.IFC2X3.IFCAxis2Placement3D();
						case "IFCBEAM" : return new CSiBKK.IFC.IFC2X3.IFCBeam();
						case "IFCBEAMTYPE" : return new CSiBKK.IFC.IFC2X3.IFCBeamType();
						case "IFCBEZIERCURVE" : return new CSiBKK.IFC.IFC2X3.IFCBezierCurve();
						case "IFCBLOBTEXTURE" : return new CSiBKK.IFC.IFC2X3.IFCBlobTexture();
						case "IFCBLOCK" : return new CSiBKK.IFC.IFC2X3.IFCBlock();
						case "IFCBOILERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCBoilerType();
						case "IFCBOOLEANCLIPPINGRESULT" : return new CSiBKK.IFC.IFC2X3.IFCBooleanClippingResult();
						case "IFCBOOLEANRESULT" : return new CSiBKK.IFC.IFC2X3.IFCBooleanResult();
						case "IFCBOUNDARYEDGECONDITION" : return new CSiBKK.IFC.IFC2X3.IFCBoundaryEdgeCondition();
						case "IFCBOUNDARYFACECONDITION" : return new CSiBKK.IFC.IFC2X3.IFCBoundaryFaceCondition();
						case "IFCBOUNDARYNODECONDITION" : return new CSiBKK.IFC.IFC2X3.IFCBoundaryNodeCondition();
						case "IFCBOUNDARYNODECONDITIONWARPING" : return new CSiBKK.IFC.IFC2X3.IFCBoundaryNodeConditionWarping();
						case "IFCBOUNDEDSURFACE" : return new CSiBKK.IFC.IFC2X3.IFCBoundedSurface();
						case "IFCBOUNDINGBOX" : return new CSiBKK.IFC.IFC2X3.IFCBoundingBox();
						case "IFCBOXEDHALFSPACE" : return new CSiBKK.IFC.IFC2X3.IFCBoxedHalfSpace();
						case "IFCBUILDING" : return new CSiBKK.IFC.IFC2X3.IFCBuilding();
						case "IFCBUILDINGELEMENTPART" : return new CSiBKK.IFC.IFC2X3.IFCBuildingElementPart();
						case "IFCBUILDINGELEMENTPROXY" : return new CSiBKK.IFC.IFC2X3.IFCBuildingElementProxy();
						case "IFCBUILDINGELEMENTPROXYTYPE" : return new CSiBKK.IFC.IFC2X3.IFCBuildingElementProxyType();
						case "IFCBUILDINGSTOREY" : return new CSiBKK.IFC.IFC2X3.IFCBuildingStorey();
						case "IFCCSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCCShapeProfileDef();
						case "IFCCABLECARRIERFITTINGTYPE" : return new CSiBKK.IFC.IFC2X3.IFCCableCarrierFittingType();
						case "IFCCABLECARRIERSEGMENTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCCableCarrierSegmentType();
						case "IFCCABLESEGMENTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCCableSegmentType();
						case "IFCCALENDARDATE" : return new CSiBKK.IFC.IFC2X3.IFCCalendarDate();
						case "IFCCARTESIANPOINT" : return new CSiBKK.IFC.IFC2X3.IFCCartesianPoint();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR2D" : return new CSiBKK.IFC.IFC2X3.IFCCartesianTransformationOperator2D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM" : return new CSiBKK.IFC.IFC2X3.IFCCartesianTransformationOperator2DnonUniform();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR3D" : return new CSiBKK.IFC.IFC2X3.IFCCartesianTransformationOperator3D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM" : return new CSiBKK.IFC.IFC2X3.IFCCartesianTransformationOperator3DnonUniform();
						case "IFCCENTERLINEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCCenterLineProfileDef();
						case "IFCCHAMFEREDGEFEATURE" : return new CSiBKK.IFC.IFC2X3.IFCChamferEdgeFeature();
						case "IFCCHILLERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCChillerType();
						case "IFCCIRCLE" : return new CSiBKK.IFC.IFC2X3.IFCCircle();
						case "IFCCIRCLEHOLLOWPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCCircleHollowProfileDef();
						case "IFCCIRCLEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCCircleProfileDef();
						case "IFCCLASSIFICATION" : return new CSiBKK.IFC.IFC2X3.IFCClassification();
						case "IFCCLASSIFICATIONITEM" : return new CSiBKK.IFC.IFC2X3.IFCClassificationItem();
						case "IFCCLASSIFICATIONITEMRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCClassificationItemRelationship();
						case "IFCCLASSIFICATIONNOTATION" : return new CSiBKK.IFC.IFC2X3.IFCClassificationNotation();
						case "IFCCLASSIFICATIONNOTATIONFACET" : return new CSiBKK.IFC.IFC2X3.IFCClassificationNotationFacet();
						case "IFCCLASSIFICATIONREFERENCE" : return new CSiBKK.IFC.IFC2X3.IFCClassificationReference();
						case "IFCCLOSEDSHELL" : return new CSiBKK.IFC.IFC2X3.IFCClosedShell();
						case "IFCCOILTYPE" : return new CSiBKK.IFC.IFC2X3.IFCCoilType();
						case "IFCCOLOURRGB" : return new CSiBKK.IFC.IFC2X3.IFCColourRgb();
						case "IFCCOLUMN" : return new CSiBKK.IFC.IFC2X3.IFCColumn();
						case "IFCCOLUMNTYPE" : return new CSiBKK.IFC.IFC2X3.IFCColumnType();
						case "IFCCOMPLEXPROPERTY" : return new CSiBKK.IFC.IFC2X3.IFCComplexProperty();
						case "IFCCOMPOSITECURVE" : return new CSiBKK.IFC.IFC2X3.IFCCompositeCurve();
						case "IFCCOMPOSITECURVESEGMENT" : return new CSiBKK.IFC.IFC2X3.IFCCompositeCurveSegment();
						case "IFCCOMPOSITEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCCompositeProfileDef();
						case "IFCCOMPRESSORTYPE" : return new CSiBKK.IFC.IFC2X3.IFCCompressorType();
						case "IFCCONDENSERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCCondenserType();
						case "IFCCONDITION" : return new CSiBKK.IFC.IFC2X3.IFCCondition();
						case "IFCCONDITIONCRITERION" : return new CSiBKK.IFC.IFC2X3.IFCConditionCriterion();
						case "IFCCONNECTEDFACESET" : return new CSiBKK.IFC.IFC2X3.IFCConnectedFaceSet();
						case "IFCCONNECTIONCURVEGEOMETRY" : return new CSiBKK.IFC.IFC2X3.IFCConnectionCurveGeometry();
						case "IFCCONNECTIONPOINTECCENTRICITY" : return new CSiBKK.IFC.IFC2X3.IFCConnectionPointEccentricity();
						case "IFCCONNECTIONPOINTGEOMETRY" : return new CSiBKK.IFC.IFC2X3.IFCConnectionPointGeometry();
						case "IFCCONNECTIONPORTGEOMETRY" : return new CSiBKK.IFC.IFC2X3.IFCConnectionPortGeometry();
						case "IFCCONNECTIONSURFACEGEOMETRY" : return new CSiBKK.IFC.IFC2X3.IFCConnectionSurfaceGeometry();
						case "IFCCONSTRAINTAGGREGATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCConstraintAggregationRelationship();
						case "IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCConstraintClassificationRelationship();
						case "IFCCONSTRAINTRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCConstraintRelationship();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCE" : return new CSiBKK.IFC.IFC2X3.IFCConstructionEquipmentResource();
						case "IFCCONSTRUCTIONMATERIALRESOURCE" : return new CSiBKK.IFC.IFC2X3.IFCConstructionMaterialResource();
						case "IFCCONSTRUCTIONPRODUCTRESOURCE" : return new CSiBKK.IFC.IFC2X3.IFCConstructionProductResource();
						case "IFCCONTEXTDEPENDENTUNIT" : return new CSiBKK.IFC.IFC2X3.IFCContextDependentUnit();
						case "IFCCONTROLLERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCControllerType();
						case "IFCCONVERSIONBASEDUNIT" : return new CSiBKK.IFC.IFC2X3.IFCConversionBasedUnit();
						case "IFCCOOLEDBEAMTYPE" : return new CSiBKK.IFC.IFC2X3.IFCCooledBeamType();
						case "IFCCOOLINGTOWERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCCoolingTowerType();
						case "IFCCOORDINATEDUNIVERSALTIMEOFFSET" : return new CSiBKK.IFC.IFC2X3.IFCCoordinatedUniversalTimeOffset();
						case "IFCCOSTITEM" : return new CSiBKK.IFC.IFC2X3.IFCCostItem();
						case "IFCCOSTSCHEDULE" : return new CSiBKK.IFC.IFC2X3.IFCCostSchedule();
						case "IFCCOSTVALUE" : return new CSiBKK.IFC.IFC2X3.IFCCostValue();
						case "IFCCOVERING" : return new CSiBKK.IFC.IFC2X3.IFCCovering();
						case "IFCCOVERINGTYPE" : return new CSiBKK.IFC.IFC2X3.IFCCoveringType();
						case "IFCCRANERAILASHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCCraneRailAShapeProfileDef();
						case "IFCCRANERAILFSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCCraneRailFShapeProfileDef();
						case "IFCCREWRESOURCE" : return new CSiBKK.IFC.IFC2X3.IFCCrewResource();
						case "IFCCSGSOLID" : return new CSiBKK.IFC.IFC2X3.IFCCsgSolid();
						case "IFCCURRENCYRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCCurrencyRelationship();
						case "IFCCURTAINWALL" : return new CSiBKK.IFC.IFC2X3.IFCCurtainWall();
						case "IFCCURTAINWALLTYPE" : return new CSiBKK.IFC.IFC2X3.IFCCurtainWallType();
						case "IFCCURVEBOUNDEDPLANE" : return new CSiBKK.IFC.IFC2X3.IFCCurveBoundedPlane();
						case "IFCCURVESTYLE" : return new CSiBKK.IFC.IFC2X3.IFCCurveStyle();
						case "IFCCURVESTYLEFONT" : return new CSiBKK.IFC.IFC2X3.IFCCurveStyleFont();
						case "IFCCURVESTYLEFONTANDSCALING" : return new CSiBKK.IFC.IFC2X3.IFCCurveStyleFontAndScaling();
						case "IFCCURVESTYLEFONTPATTERN" : return new CSiBKK.IFC.IFC2X3.IFCCurveStyleFontPattern();
						case "IFCDAMPERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCDamperType();
						case "IFCDATEANDTIME" : return new CSiBKK.IFC.IFC2X3.IFCDateAndTime();
						case "IFCDEFINEDSYMBOL" : return new CSiBKK.IFC.IFC2X3.IFCDefinedSymbol();
						case "IFCDERIVEDPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCDerivedProfileDef();
						case "IFCDERIVEDUNIT" : return new CSiBKK.IFC.IFC2X3.IFCDerivedUnit();
						case "IFCDERIVEDUNITELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCDerivedUnitElement();
						case "IFCDIAMETERDIMENSION" : return new CSiBKK.IFC.IFC2X3.IFCDiameterDimension();
						case "IFCDIMENSIONCALLOUTRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCDimensionCalloutRelationship();
						case "IFCDIMENSIONCURVE" : return new CSiBKK.IFC.IFC2X3.IFCDimensionCurve();
						case "IFCDIMENSIONCURVEDIRECTEDCALLOUT" : return new CSiBKK.IFC.IFC2X3.IFCDimensionCurveDirectedCallout();
						case "IFCDIMENSIONCURVETERMINATOR" : return new CSiBKK.IFC.IFC2X3.IFCDimensionCurveTerminator();
						case "IFCDIMENSIONPAIR" : return new CSiBKK.IFC.IFC2X3.IFCDimensionPair();
						case "IFCDIMENSIONALEXPONENTS" : return new CSiBKK.IFC.IFC2X3.IFCDimensionalExponents();
						case "IFCDIRECTION" : return new CSiBKK.IFC.IFC2X3.IFCDirection();
						case "IFCDISCRETEACCESSORY" : return new CSiBKK.IFC.IFC2X3.IFCDiscreteAccessory();
						case "IFCDISCRETEACCESSORYTYPE" : return new CSiBKK.IFC.IFC2X3.IFCDiscreteAccessoryType();
						case "IFCDISTRIBUTIONCHAMBERELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCDistributionChamberElement();
						case "IFCDISTRIBUTIONCHAMBERELEMENTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCDistributionChamberElementType();
						case "IFCDISTRIBUTIONCONTROLELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCDistributionControlElement();
						case "IFCDISTRIBUTIONELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCDistributionElement();
						case "IFCDISTRIBUTIONELEMENTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCDistributionElementType();
						case "IFCDISTRIBUTIONFLOWELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCDistributionFlowElement();
						case "IFCDISTRIBUTIONPORT" : return new CSiBKK.IFC.IFC2X3.IFCDistributionPort();
						case "IFCDOCUMENTELECTRONICFORMAT" : return new CSiBKK.IFC.IFC2X3.IFCDocumentElectronicFormat();
						case "IFCDOCUMENTINFORMATION" : return new CSiBKK.IFC.IFC2X3.IFCDocumentInformation();
						case "IFCDOCUMENTINFORMATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCDocumentInformationRelationship();
						case "IFCDOCUMENTREFERENCE" : return new CSiBKK.IFC.IFC2X3.IFCDocumentReference();
						case "IFCDOOR" : return new CSiBKK.IFC.IFC2X3.IFCDoor();
						case "IFCDOORLININGPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCDoorLiningProperties();
						case "IFCDOORPANELPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCDoorPanelProperties();
						case "IFCDOORSTYLE" : return new CSiBKK.IFC.IFC2X3.IFCDoorStyle();
						case "IFCDRAUGHTINGCALLOUT" : return new CSiBKK.IFC.IFC2X3.IFCDraughtingCallout();
						case "IFCDRAUGHTINGCALLOUTRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCDraughtingCalloutRelationship();
						case "IFCDRAUGHTINGPREDEFINEDCOLOUR" : return new CSiBKK.IFC.IFC2X3.IFCDraughtingPreDefinedColour();
						case "IFCDRAUGHTINGPREDEFINEDCURVEFONT" : return new CSiBKK.IFC.IFC2X3.IFCDraughtingPreDefinedCurveFont();
						case "IFCDRAUGHTINGPREDEFINEDTEXTFONT" : return new CSiBKK.IFC.IFC2X3.IFCDraughtingPreDefinedTextFont();
						case "IFCDUCTFITTINGTYPE" : return new CSiBKK.IFC.IFC2X3.IFCDuctFittingType();
						case "IFCDUCTSEGMENTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCDuctSegmentType();
						case "IFCDUCTSILENCERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCDuctSilencerType();
						case "IFCEDGE" : return new CSiBKK.IFC.IFC2X3.IFCEdge();
						case "IFCEDGECURVE" : return new CSiBKK.IFC.IFC2X3.IFCEdgeCurve();
						case "IFCEDGELOOP" : return new CSiBKK.IFC.IFC2X3.IFCEdgeLoop();
						case "IFCELECTRICAPPLIANCETYPE" : return new CSiBKK.IFC.IFC2X3.IFCElectricApplianceType();
						case "IFCELECTRICDISTRIBUTIONPOINT" : return new CSiBKK.IFC.IFC2X3.IFCElectricDistributionPoint();
						case "IFCELECTRICFLOWSTORAGEDEVICETYPE" : return new CSiBKK.IFC.IFC2X3.IFCElectricFlowStorageDeviceType();
						case "IFCELECTRICGENERATORTYPE" : return new CSiBKK.IFC.IFC2X3.IFCElectricGeneratorType();
						case "IFCELECTRICHEATERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCElectricHeaterType();
						case "IFCELECTRICMOTORTYPE" : return new CSiBKK.IFC.IFC2X3.IFCElectricMotorType();
						case "IFCELECTRICTIMECONTROLTYPE" : return new CSiBKK.IFC.IFC2X3.IFCElectricTimeControlType();
						case "IFCELECTRICALBASEPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCElectricalBaseProperties();
						case "IFCELECTRICALCIRCUIT" : return new CSiBKK.IFC.IFC2X3.IFCElectricalCircuit();
						case "IFCELECTRICALELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCElectricalElement();
						case "IFCELEMENTASSEMBLY" : return new CSiBKK.IFC.IFC2X3.IFCElementAssembly();
						case "IFCELEMENTQUANTITY" : return new CSiBKK.IFC.IFC2X3.IFCElementQuantity();
						case "IFCELLIPSE" : return new CSiBKK.IFC.IFC2X3.IFCEllipse();
						case "IFCELLIPSEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCEllipseProfileDef();
						case "IFCENERGYCONVERSIONDEVICE" : return new CSiBKK.IFC.IFC2X3.IFCEnergyConversionDevice();
						case "IFCENERGYPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCEnergyProperties();
						case "IFCENVIRONMENTALIMPACTVALUE" : return new CSiBKK.IFC.IFC2X3.IFCEnvironmentalImpactValue();
						case "IFCEQUIPMENTELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCEquipmentElement();
						case "IFCEQUIPMENTSTANDARD" : return new CSiBKK.IFC.IFC2X3.IFCEquipmentStandard();
						case "IFCEVAPORATIVECOOLERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCEvaporativeCoolerType();
						case "IFCEVAPORATORTYPE" : return new CSiBKK.IFC.IFC2X3.IFCEvaporatorType();
						case "IFCEXTENDEDMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCExtendedMaterialProperties();
						case "IFCEXTERNALLYDEFINEDHATCHSTYLE" : return new CSiBKK.IFC.IFC2X3.IFCExternallyDefinedHatchStyle();
						case "IFCEXTERNALLYDEFINEDSURFACESTYLE" : return new CSiBKK.IFC.IFC2X3.IFCExternallyDefinedSurfaceStyle();
						case "IFCEXTERNALLYDEFINEDSYMBOL" : return new CSiBKK.IFC.IFC2X3.IFCExternallyDefinedSymbol();
						case "IFCEXTERNALLYDEFINEDTEXTFONT" : return new CSiBKK.IFC.IFC2X3.IFCExternallyDefinedTextFont();
						case "IFCEXTRUDEDAREASOLID" : return new CSiBKK.IFC.IFC2X3.IFCExtrudedAreaSolid();
						case "IFCFACE" : return new CSiBKK.IFC.IFC2X3.IFCFace();
						case "IFCFACEBASEDSURFACEMODEL" : return new CSiBKK.IFC.IFC2X3.IFCFaceBasedSurfaceModel();
						case "IFCFACEBOUND" : return new CSiBKK.IFC.IFC2X3.IFCFaceBound();
						case "IFCFACEOUTERBOUND" : return new CSiBKK.IFC.IFC2X3.IFCFaceOuterBound();
						case "IFCFACESURFACE" : return new CSiBKK.IFC.IFC2X3.IFCFaceSurface();
						case "IFCFACETEDBREP" : return new CSiBKK.IFC.IFC2X3.IFCFacetedBrep();
						case "IFCFACETEDBREPWITHVOIDS" : return new CSiBKK.IFC.IFC2X3.IFCFacetedBrepWithVoids();
						case "IFCFAILURECONNECTIONCONDITION" : return new CSiBKK.IFC.IFC2X3.IFCFailureConnectionCondition();
						case "IFCFANTYPE" : return new CSiBKK.IFC.IFC2X3.IFCFanType();
						case "IFCFASTENER" : return new CSiBKK.IFC.IFC2X3.IFCFastener();
						case "IFCFASTENERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCFastenerType();
						case "IFCFILLAREASTYLE" : return new CSiBKK.IFC.IFC2X3.IFCFillAreaStyle();
						case "IFCFILLAREASTYLEHATCHING" : return new CSiBKK.IFC.IFC2X3.IFCFillAreaStyleHatching();
						case "IFCFILLAREASTYLETILESYMBOLWITHSTYLE" : return new CSiBKK.IFC.IFC2X3.IFCFillAreaStyleTileSymbolWithStyle();
						case "IFCFILLAREASTYLETILES" : return new CSiBKK.IFC.IFC2X3.IFCFillAreaStyleTiles();
						case "IFCFILTERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCFilterType();
						case "IFCFIRESUPPRESSIONTERMINALTYPE" : return new CSiBKK.IFC.IFC2X3.IFCFireSuppressionTerminalType();
						case "IFCFLOWCONTROLLER" : return new CSiBKK.IFC.IFC2X3.IFCFlowController();
						case "IFCFLOWFITTING" : return new CSiBKK.IFC.IFC2X3.IFCFlowFitting();
						case "IFCFLOWINSTRUMENTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCFlowInstrumentType();
						case "IFCFLOWMETERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCFlowMeterType();
						case "IFCFLOWMOVINGDEVICE" : return new CSiBKK.IFC.IFC2X3.IFCFlowMovingDevice();
						case "IFCFLOWSEGMENT" : return new CSiBKK.IFC.IFC2X3.IFCFlowSegment();
						case "IFCFLOWSTORAGEDEVICE" : return new CSiBKK.IFC.IFC2X3.IFCFlowStorageDevice();
						case "IFCFLOWTERMINAL" : return new CSiBKK.IFC.IFC2X3.IFCFlowTerminal();
						case "IFCFLOWTREATMENTDEVICE" : return new CSiBKK.IFC.IFC2X3.IFCFlowTreatmentDevice();
						case "IFCFLUIDFLOWPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCFluidFlowProperties();
						case "IFCFOOTING" : return new CSiBKK.IFC.IFC2X3.IFCFooting();
						case "IFCFUELPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCFuelProperties();
						case "IFCFURNISHINGELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCFurnishingElement();
						case "IFCFURNISHINGELEMENTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCFurnishingElementType();
						case "IFCFURNITURESTANDARD" : return new CSiBKK.IFC.IFC2X3.IFCFurnitureStandard();
						case "IFCFURNITURETYPE" : return new CSiBKK.IFC.IFC2X3.IFCFurnitureType();
						case "IFCGASTERMINALTYPE" : return new CSiBKK.IFC.IFC2X3.IFCGasTerminalType();
						case "IFCGENERALMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCGeneralMaterialProperties();
						case "IFCGENERALPROFILEPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCGeneralProfileProperties();
						case "IFCGEOMETRICCURVESET" : return new CSiBKK.IFC.IFC2X3.IFCGeometricCurveSet();
						case "IFCGEOMETRICREPRESENTATIONCONTEXT" : return new CSiBKK.IFC.IFC2X3.IFCGeometricRepresentationContext();
						case "IFCGEOMETRICREPRESENTATIONSUBCONTEXT" : return new CSiBKK.IFC.IFC2X3.IFCGeometricRepresentationSubContext();
						case "IFCGEOMETRICSET" : return new CSiBKK.IFC.IFC2X3.IFCGeometricSet();
						case "IFCGRID" : return new CSiBKK.IFC.IFC2X3.IFCGrid();
						case "IFCGRIDAXIS" : return new CSiBKK.IFC.IFC2X3.IFCGridAxis();
						case "IFCGRIDPLACEMENT" : return new CSiBKK.IFC.IFC2X3.IFCGridPlacement();
						case "IFCGROUP" : return new CSiBKK.IFC.IFC2X3.IFCGroup();
						case "IFCHALFSPACESOLID" : return new CSiBKK.IFC.IFC2X3.IFCHalfSpaceSolid();
						case "IFCHEATEXCHANGERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCHeatExchangerType();
						case "IFCHUMIDIFIERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCHumidifierType();
						case "IFCHYGROSCOPICMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCHygroscopicMaterialProperties();
						case "IFCISHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCIShapeProfileDef();
						case "IFCIMAGETEXTURE" : return new CSiBKK.IFC.IFC2X3.IFCImageTexture();
						case "IFCINVENTORY" : return new CSiBKK.IFC.IFC2X3.IFCInventory();
						case "IFCIRREGULARTIMESERIES" : return new CSiBKK.IFC.IFC2X3.IFCIrregularTimeSeries();
						case "IFCIRREGULARTIMESERIESVALUE" : return new CSiBKK.IFC.IFC2X3.IFCIrregularTimeSeriesValue();
						case "IFCJUNCTIONBOXTYPE" : return new CSiBKK.IFC.IFC2X3.IFCJunctionBoxType();
						case "IFCLSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCLShapeProfileDef();
						case "IFCLABORRESOURCE" : return new CSiBKK.IFC.IFC2X3.IFCLaborResource();
						case "IFCLAMPTYPE" : return new CSiBKK.IFC.IFC2X3.IFCLampType();
						case "IFCLIBRARYINFORMATION" : return new CSiBKK.IFC.IFC2X3.IFCLibraryInformation();
						case "IFCLIBRARYREFERENCE" : return new CSiBKK.IFC.IFC2X3.IFCLibraryReference();
						case "IFCLIGHTDISTRIBUTIONDATA" : return new CSiBKK.IFC.IFC2X3.IFCLightDistributionData();
						case "IFCLIGHTFIXTURETYPE" : return new CSiBKK.IFC.IFC2X3.IFCLightFixtureType();
						case "IFCLIGHTINTENSITYDISTRIBUTION" : return new CSiBKK.IFC.IFC2X3.IFCLightIntensityDistribution();
						case "IFCLIGHTSOURCEAMBIENT" : return new CSiBKK.IFC.IFC2X3.IFCLightSourceAmbient();
						case "IFCLIGHTSOURCEDIRECTIONAL" : return new CSiBKK.IFC.IFC2X3.IFCLightSourceDirectional();
						case "IFCLIGHTSOURCEGONIOMETRIC" : return new CSiBKK.IFC.IFC2X3.IFCLightSourceGoniometric();
						case "IFCLIGHTSOURCEPOSITIONAL" : return new CSiBKK.IFC.IFC2X3.IFCLightSourcePositional();
						case "IFCLIGHTSOURCESPOT" : return new CSiBKK.IFC.IFC2X3.IFCLightSourceSpot();
						case "IFCLINE" : return new CSiBKK.IFC.IFC2X3.IFCLine();
						case "IFCLINEARDIMENSION" : return new CSiBKK.IFC.IFC2X3.IFCLinearDimension();
						case "IFCLOCALPLACEMENT" : return new CSiBKK.IFC.IFC2X3.IFCLocalPlacement();
						case "IFCLOCALTIME" : return new CSiBKK.IFC.IFC2X3.IFCLocalTime();
						case "IFCLOOP" : return new CSiBKK.IFC.IFC2X3.IFCLoop();
						case "IFCMAPPEDITEM" : return new CSiBKK.IFC.IFC2X3.IFCMappedItem();
						case "IFCMATERIAL" : return new CSiBKK.IFC.IFC2X3.IFCMaterial();
						case "IFCMATERIALCLASSIFICATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCMaterialClassificationRelationship();
						case "IFCMATERIALDEFINITIONREPRESENTATION" : return new CSiBKK.IFC.IFC2X3.IFCMaterialDefinitionRepresentation();
						case "IFCMATERIALLAYER" : return new CSiBKK.IFC.IFC2X3.IFCMaterialLayer();
						case "IFCMATERIALLAYERSET" : return new CSiBKK.IFC.IFC2X3.IFCMaterialLayerSet();
						case "IFCMATERIALLAYERSETUSAGE" : return new CSiBKK.IFC.IFC2X3.IFCMaterialLayerSetUsage();
						case "IFCMATERIALLIST" : return new CSiBKK.IFC.IFC2X3.IFCMaterialList();
						case "IFCMEASUREWITHUNIT" : return new CSiBKK.IFC.IFC2X3.IFCMeasureWithUnit();
						case "IFCMECHANICALCONCRETEMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCMechanicalConcreteMaterialProperties();
						case "IFCMECHANICALFASTENER" : return new CSiBKK.IFC.IFC2X3.IFCMechanicalFastener();
						case "IFCMECHANICALFASTENERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCMechanicalFastenerType();
						case "IFCMECHANICALMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCMechanicalMaterialProperties();
						case "IFCMECHANICALSTEELMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCMechanicalSteelMaterialProperties();
						case "IFCMEMBER" : return new CSiBKK.IFC.IFC2X3.IFCMember();
						case "IFCMEMBERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCMemberType();
						case "IFCMETRIC" : return new CSiBKK.IFC.IFC2X3.IFCMetric();
						case "IFCMONETARYUNIT" : return new CSiBKK.IFC.IFC2X3.IFCMonetaryUnit();
						case "IFCMOTORCONNECTIONTYPE" : return new CSiBKK.IFC.IFC2X3.IFCMotorConnectionType();
						case "IFCMOVE" : return new CSiBKK.IFC.IFC2X3.IFCMove();
						case "IFCOBJECTIVE" : return new CSiBKK.IFC.IFC2X3.IFCObjective();
						case "IFCOCCUPANT" : return new CSiBKK.IFC.IFC2X3.IFCOccupant();
						case "IFCOFFSETCURVE2D" : return new CSiBKK.IFC.IFC2X3.IFCOffsetCurve2D();
						case "IFCOFFSETCURVE3D" : return new CSiBKK.IFC.IFC2X3.IFCOffsetCurve3D();
						case "IFCONEDIRECTIONREPEATFACTOR" : return new CSiBKK.IFC.IFC2X3.IFCOneDirectionRepeatFactor();
						case "IFCOPENSHELL" : return new CSiBKK.IFC.IFC2X3.IFCOpenShell();
						case "IFCOPENINGELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCOpeningElement();
						case "IFCOPTICALMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCOpticalMaterialProperties();
						case "IFCORDERACTION" : return new CSiBKK.IFC.IFC2X3.IFCOrderAction();
						case "IFCORGANIZATION" : return new CSiBKK.IFC.IFC2X3.IFCOrganization();
						case "IFCORGANIZATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCOrganizationRelationship();
						case "IFCORIENTEDEDGE" : return new CSiBKK.IFC.IFC2X3.IFCOrientedEdge();
						case "IFCOUTLETTYPE" : return new CSiBKK.IFC.IFC2X3.IFCOutletType();
						case "IFCOWNERHISTORY" : return new CSiBKK.IFC.IFC2X3.IFCOwnerHistory();
						case "IFCPATH" : return new CSiBKK.IFC.IFC2X3.IFCPath();
						case "IFCPERFORMANCEHISTORY" : return new CSiBKK.IFC.IFC2X3.IFCPerformanceHistory();
						case "IFCPERMEABLECOVERINGPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCPermeableCoveringProperties();
						case "IFCPERMIT" : return new CSiBKK.IFC.IFC2X3.IFCPermit();
						case "IFCPERSON" : return new CSiBKK.IFC.IFC2X3.IFCPerson();
						case "IFCPERSONANDORGANIZATION" : return new CSiBKK.IFC.IFC2X3.IFCPersonAndOrganization();
						case "IFCPHYSICALCOMPLEXQUANTITY" : return new CSiBKK.IFC.IFC2X3.IFCPhysicalComplexQuantity();
						case "IFCPILE" : return new CSiBKK.IFC.IFC2X3.IFCPile();
						case "IFCPIPEFITTINGTYPE" : return new CSiBKK.IFC.IFC2X3.IFCPipeFittingType();
						case "IFCPIPESEGMENTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCPipeSegmentType();
						case "IFCPIXELTEXTURE" : return new CSiBKK.IFC.IFC2X3.IFCPixelTexture();
						case "IFCPLANARBOX" : return new CSiBKK.IFC.IFC2X3.IFCPlanarBox();
						case "IFCPLANAREXTENT" : return new CSiBKK.IFC.IFC2X3.IFCPlanarExtent();
						case "IFCPLANE" : return new CSiBKK.IFC.IFC2X3.IFCPlane();
						case "IFCPLATE" : return new CSiBKK.IFC.IFC2X3.IFCPlate();
						case "IFCPLATETYPE" : return new CSiBKK.IFC.IFC2X3.IFCPlateType();
						case "IFCPOINTONCURVE" : return new CSiBKK.IFC.IFC2X3.IFCPointOnCurve();
						case "IFCPOINTONSURFACE" : return new CSiBKK.IFC.IFC2X3.IFCPointOnSurface();
						case "IFCPOLYLOOP" : return new CSiBKK.IFC.IFC2X3.IFCPolyLoop();
						case "IFCPOLYGONALBOUNDEDHALFSPACE" : return new CSiBKK.IFC.IFC2X3.IFCPolygonalBoundedHalfSpace();
						case "IFCPOLYLINE" : return new CSiBKK.IFC.IFC2X3.IFCPolyline();
						case "IFCPOSTALADDRESS" : return new CSiBKK.IFC.IFC2X3.IFCPostalAddress();
						case "IFCPREDEFINEDDIMENSIONSYMBOL" : return new CSiBKK.IFC.IFC2X3.IFCPreDefinedDimensionSymbol();
						case "IFCPREDEFINEDPOINTMARKERSYMBOL" : return new CSiBKK.IFC.IFC2X3.IFCPreDefinedPointMarkerSymbol();
						case "IFCPREDEFINEDTERMINATORSYMBOL" : return new CSiBKK.IFC.IFC2X3.IFCPreDefinedTerminatorSymbol();
						case "IFCPRESENTATIONLAYERASSIGNMENT" : return new CSiBKK.IFC.IFC2X3.IFCPresentationLayerAssignment();
						case "IFCPRESENTATIONLAYERWITHSTYLE" : return new CSiBKK.IFC.IFC2X3.IFCPresentationLayerWithStyle();
						case "IFCPRESENTATIONSTYLEASSIGNMENT" : return new CSiBKK.IFC.IFC2X3.IFCPresentationStyleAssignment();
						case "IFCPROCEDURE" : return new CSiBKK.IFC.IFC2X3.IFCProcedure();
						case "IFCPRODUCTDEFINITIONSHAPE" : return new CSiBKK.IFC.IFC2X3.IFCProductDefinitionShape();
						case "IFCPRODUCTREPRESENTATION" : return new CSiBKK.IFC.IFC2X3.IFCProductRepresentation();
						case "IFCPRODUCTSOFCOMBUSTIONPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCProductsOfCombustionProperties();
						case "IFCPROJECT" : return new CSiBKK.IFC.IFC2X3.IFCProject();
						case "IFCPROJECTORDER" : return new CSiBKK.IFC.IFC2X3.IFCProjectOrder();
						case "IFCPROJECTORDERRECORD" : return new CSiBKK.IFC.IFC2X3.IFCProjectOrderRecord();
						case "IFCPROJECTIONCURVE" : return new CSiBKK.IFC.IFC2X3.IFCProjectionCurve();
						case "IFCPROJECTIONELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCProjectionElement();
						case "IFCPROPERTYBOUNDEDVALUE" : return new CSiBKK.IFC.IFC2X3.IFCPropertyBoundedValue();
						case "IFCPROPERTYCONSTRAINTRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCPropertyConstraintRelationship();
						case "IFCPROPERTYDEPENDENCYRELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCPropertyDependencyRelationship();
						case "IFCPROPERTYENUMERATEDVALUE" : return new CSiBKK.IFC.IFC2X3.IFCPropertyEnumeratedValue();
						case "IFCPROPERTYENUMERATION" : return new CSiBKK.IFC.IFC2X3.IFCPropertyEnumeration();
						case "IFCPROPERTYLISTVALUE" : return new CSiBKK.IFC.IFC2X3.IFCPropertyListValue();
						case "IFCPROPERTYREFERENCEVALUE" : return new CSiBKK.IFC.IFC2X3.IFCPropertyReferenceValue();
						case "IFCPROPERTYSET" : return new CSiBKK.IFC.IFC2X3.IFCPropertySet();
						case "IFCPROPERTYSINGLEVALUE" : return new CSiBKK.IFC.IFC2X3.IFCPropertySingleValue();
						case "IFCPROPERTYTABLEVALUE" : return new CSiBKK.IFC.IFC2X3.IFCPropertyTableValue();
						case "IFCPROTECTIVEDEVICETYPE" : return new CSiBKK.IFC.IFC2X3.IFCProtectiveDeviceType();
						case "IFCPROXY" : return new CSiBKK.IFC.IFC2X3.IFCProxy();
						case "IFCPUMPTYPE" : return new CSiBKK.IFC.IFC2X3.IFCPumpType();
						case "IFCQUANTITYAREA" : return new CSiBKK.IFC.IFC2X3.IFCQuantityArea();
						case "IFCQUANTITYCOUNT" : return new CSiBKK.IFC.IFC2X3.IFCQuantityCount();
						case "IFCQUANTITYLENGTH" : return new CSiBKK.IFC.IFC2X3.IFCQuantityLength();
						case "IFCQUANTITYTIME" : return new CSiBKK.IFC.IFC2X3.IFCQuantityTime();
						case "IFCQUANTITYVOLUME" : return new CSiBKK.IFC.IFC2X3.IFCQuantityVolume();
						case "IFCQUANTITYWEIGHT" : return new CSiBKK.IFC.IFC2X3.IFCQuantityWeight();
						case "IFCRADIUSDIMENSION" : return new CSiBKK.IFC.IFC2X3.IFCRadiusDimension();
						case "IFCRAILING" : return new CSiBKK.IFC.IFC2X3.IFCRailing();
						case "IFCRAILINGTYPE" : return new CSiBKK.IFC.IFC2X3.IFCRailingType();
						case "IFCRAMP" : return new CSiBKK.IFC.IFC2X3.IFCRamp();
						case "IFCRAMPFLIGHT" : return new CSiBKK.IFC.IFC2X3.IFCRampFlight();
						case "IFCRAMPFLIGHTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCRampFlightType();
						case "IFCRATIONALBEZIERCURVE" : return new CSiBKK.IFC.IFC2X3.IFCRationalBezierCurve();
						case "IFCRECTANGLEHOLLOWPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCRectangleHollowProfileDef();
						case "IFCRECTANGLEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCRectangleProfileDef();
						case "IFCRECTANGULARPYRAMID" : return new CSiBKK.IFC.IFC2X3.IFCRectangularPyramid();
						case "IFCRECTANGULARTRIMMEDSURFACE" : return new CSiBKK.IFC.IFC2X3.IFCRectangularTrimmedSurface();
						case "IFCREFERENCESVALUEDOCUMENT" : return new CSiBKK.IFC.IFC2X3.IFCReferencesValueDocument();
						case "IFCREGULARTIMESERIES" : return new CSiBKK.IFC.IFC2X3.IFCRegularTimeSeries();
						case "IFCREINFORCEMENTBARPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCReinforcementBarProperties();
						case "IFCREINFORCEMENTDEFINITIONPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCReinforcementDefinitionProperties();
						case "IFCREINFORCINGBAR" : return new CSiBKK.IFC.IFC2X3.IFCReinforcingBar();
						case "IFCREINFORCINGMESH" : return new CSiBKK.IFC.IFC2X3.IFCReinforcingMesh();
						case "IFCRELAGGREGATES" : return new CSiBKK.IFC.IFC2X3.IFCRelAggregates();
						case "IFCRELASSIGNSTASKS" : return new CSiBKK.IFC.IFC2X3.IFCRelAssignsTasks();
						case "IFCRELASSIGNSTOACTOR" : return new CSiBKK.IFC.IFC2X3.IFCRelAssignsToActor();
						case "IFCRELASSIGNSTOCONTROL" : return new CSiBKK.IFC.IFC2X3.IFCRelAssignsToControl();
						case "IFCRELASSIGNSTOGROUP" : return new CSiBKK.IFC.IFC2X3.IFCRelAssignsToGroup();
						case "IFCRELASSIGNSTOPROCESS" : return new CSiBKK.IFC.IFC2X3.IFCRelAssignsToProcess();
						case "IFCRELASSIGNSTOPRODUCT" : return new CSiBKK.IFC.IFC2X3.IFCRelAssignsToProduct();
						case "IFCRELASSIGNSTOPROJECTORDER" : return new CSiBKK.IFC.IFC2X3.IFCRelAssignsToProjectOrder();
						case "IFCRELASSIGNSTORESOURCE" : return new CSiBKK.IFC.IFC2X3.IFCRelAssignsToResource();
						case "IFCRELASSOCIATES" : return new CSiBKK.IFC.IFC2X3.IFCRelAssociates();
						case "IFCRELASSOCIATESAPPLIEDVALUE" : return new CSiBKK.IFC.IFC2X3.IFCRelAssociatesAppliedValue();
						case "IFCRELASSOCIATESAPPROVAL" : return new CSiBKK.IFC.IFC2X3.IFCRelAssociatesApproval();
						case "IFCRELASSOCIATESCLASSIFICATION" : return new CSiBKK.IFC.IFC2X3.IFCRelAssociatesClassification();
						case "IFCRELASSOCIATESCONSTRAINT" : return new CSiBKK.IFC.IFC2X3.IFCRelAssociatesConstraint();
						case "IFCRELASSOCIATESDOCUMENT" : return new CSiBKK.IFC.IFC2X3.IFCRelAssociatesDocument();
						case "IFCRELASSOCIATESLIBRARY" : return new CSiBKK.IFC.IFC2X3.IFCRelAssociatesLibrary();
						case "IFCRELASSOCIATESMATERIAL" : return new CSiBKK.IFC.IFC2X3.IFCRelAssociatesMaterial();
						case "IFCRELASSOCIATESPROFILEPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCRelAssociatesProfileProperties();
						case "IFCRELCONNECTSELEMENTS" : return new CSiBKK.IFC.IFC2X3.IFCRelConnectsElements();
						case "IFCRELCONNECTSPATHELEMENTS" : return new CSiBKK.IFC.IFC2X3.IFCRelConnectsPathElements();
						case "IFCRELCONNECTSPORTTOELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCRelConnectsPortToElement();
						case "IFCRELCONNECTSPORTS" : return new CSiBKK.IFC.IFC2X3.IFCRelConnectsPorts();
						case "IFCRELCONNECTSSTRUCTURALACTIVITY" : return new CSiBKK.IFC.IFC2X3.IFCRelConnectsStructuralActivity();
						case "IFCRELCONNECTSSTRUCTURALELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCRelConnectsStructuralElement();
						case "IFCRELCONNECTSSTRUCTURALMEMBER" : return new CSiBKK.IFC.IFC2X3.IFCRelConnectsStructuralMember();
						case "IFCRELCONNECTSWITHECCENTRICITY" : return new CSiBKK.IFC.IFC2X3.IFCRelConnectsWithEccentricity();
						case "IFCRELCONNECTSWITHREALIZINGELEMENTS" : return new CSiBKK.IFC.IFC2X3.IFCRelConnectsWithRealizingElements();
						case "IFCRELCONTAINEDINSPATIALSTRUCTURE" : return new CSiBKK.IFC.IFC2X3.IFCRelContainedInSpatialStructure();
						case "IFCRELCOVERSBLDGELEMENTS" : return new CSiBKK.IFC.IFC2X3.IFCRelCoversBldgElements();
						case "IFCRELCOVERSSPACES" : return new CSiBKK.IFC.IFC2X3.IFCRelCoversSpaces();
						case "IFCRELDEFINESBYPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCRelDefinesByProperties();
						case "IFCRELDEFINESBYTYPE" : return new CSiBKK.IFC.IFC2X3.IFCRelDefinesByType();
						case "IFCRELFILLSELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCRelFillsElement();
						case "IFCRELFLOWCONTROLELEMENTS" : return new CSiBKK.IFC.IFC2X3.IFCRelFlowControlElements();
						case "IFCRELINTERACTIONREQUIREMENTS" : return new CSiBKK.IFC.IFC2X3.IFCRelInteractionRequirements();
						case "IFCRELNESTS" : return new CSiBKK.IFC.IFC2X3.IFCRelNests();
						case "IFCRELOCCUPIESSPACES" : return new CSiBKK.IFC.IFC2X3.IFCRelOccupiesSpaces();
						case "IFCRELOVERRIDESPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCRelOverridesProperties();
						case "IFCRELPROJECTSELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCRelProjectsElement();
						case "IFCRELREFERENCEDINSPATIALSTRUCTURE" : return new CSiBKK.IFC.IFC2X3.IFCRelReferencedInSpatialStructure();
						case "IFCRELSCHEDULESCOSTITEMS" : return new CSiBKK.IFC.IFC2X3.IFCRelSchedulesCostItems();
						case "IFCRELSEQUENCE" : return new CSiBKK.IFC.IFC2X3.IFCRelSequence();
						case "IFCRELSERVICESBUILDINGS" : return new CSiBKK.IFC.IFC2X3.IFCRelServicesBuildings();
						case "IFCRELSPACEBOUNDARY" : return new CSiBKK.IFC.IFC2X3.IFCRelSpaceBoundary();
						case "IFCRELVOIDSELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCRelVoidsElement();
						case "IFCRELAXATION" : return new CSiBKK.IFC.IFC2X3.IFCRelaxation();
						case "IFCREPRESENTATION" : return new CSiBKK.IFC.IFC2X3.IFCRepresentation();
						case "IFCREPRESENTATIONCONTEXT" : return new CSiBKK.IFC.IFC2X3.IFCRepresentationContext();
						case "IFCREPRESENTATIONMAP" : return new CSiBKK.IFC.IFC2X3.IFCRepresentationMap();
						case "IFCREVOLVEDAREASOLID" : return new CSiBKK.IFC.IFC2X3.IFCRevolvedAreaSolid();
						case "IFCRIBPLATEPROFILEPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCRibPlateProfileProperties();
						case "IFCRIGHTCIRCULARCONE" : return new CSiBKK.IFC.IFC2X3.IFCRightCircularCone();
						case "IFCRIGHTCIRCULARCYLINDER" : return new CSiBKK.IFC.IFC2X3.IFCRightCircularCylinder();
						case "IFCROOF" : return new CSiBKK.IFC.IFC2X3.IFCRoof();
						case "IFCROUNDEDEDGEFEATURE" : return new CSiBKK.IFC.IFC2X3.IFCRoundedEdgeFeature();
						case "IFCROUNDEDRECTANGLEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCRoundedRectangleProfileDef();
						case "IFCSIUNIT" : return new CSiBKK.IFC.IFC2X3.IFCSIUnit();
						case "IFCSANITARYTERMINALTYPE" : return new CSiBKK.IFC.IFC2X3.IFCSanitaryTerminalType();
						case "IFCSCHEDULETIMECONTROL" : return new CSiBKK.IFC.IFC2X3.IFCScheduleTimeControl();
						case "IFCSECTIONPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCSectionProperties();
						case "IFCSECTIONREINFORCEMENTPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCSectionReinforcementProperties();
						case "IFCSECTIONEDSPINE" : return new CSiBKK.IFC.IFC2X3.IFCSectionedSpine();
						case "IFCSENSORTYPE" : return new CSiBKK.IFC.IFC2X3.IFCSensorType();
						case "IFCSERVICELIFE" : return new CSiBKK.IFC.IFC2X3.IFCServiceLife();
						case "IFCSERVICELIFEFACTOR" : return new CSiBKK.IFC.IFC2X3.IFCServiceLifeFactor();
						case "IFCSHAPEASPECT" : return new CSiBKK.IFC.IFC2X3.IFCShapeAspect();
						case "IFCSHAPEREPRESENTATION" : return new CSiBKK.IFC.IFC2X3.IFCShapeRepresentation();
						case "IFCSHELLBASEDSURFACEMODEL" : return new CSiBKK.IFC.IFC2X3.IFCShellBasedSurfaceModel();
						case "IFCSITE" : return new CSiBKK.IFC.IFC2X3.IFCSite();
						case "IFCSLAB" : return new CSiBKK.IFC.IFC2X3.IFCSlab();
						case "IFCSLABTYPE" : return new CSiBKK.IFC.IFC2X3.IFCSlabType();
						case "IFCSLIPPAGECONNECTIONCONDITION" : return new CSiBKK.IFC.IFC2X3.IFCSlippageConnectionCondition();
						case "IFCSOUNDPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCSoundProperties();
						case "IFCSOUNDVALUE" : return new CSiBKK.IFC.IFC2X3.IFCSoundValue();
						case "IFCSPACE" : return new CSiBKK.IFC.IFC2X3.IFCSpace();
						case "IFCSPACEHEATERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCSpaceHeaterType();
						case "IFCSPACEPROGRAM" : return new CSiBKK.IFC.IFC2X3.IFCSpaceProgram();
						case "IFCSPACETHERMALLOADPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCSpaceThermalLoadProperties();
						case "IFCSPACETYPE" : return new CSiBKK.IFC.IFC2X3.IFCSpaceType();
						case "IFCSPHERE" : return new CSiBKK.IFC.IFC2X3.IFCSphere();
						case "IFCSTACKTERMINALTYPE" : return new CSiBKK.IFC.IFC2X3.IFCStackTerminalType();
						case "IFCSTAIR" : return new CSiBKK.IFC.IFC2X3.IFCStair();
						case "IFCSTAIRFLIGHT" : return new CSiBKK.IFC.IFC2X3.IFCStairFlight();
						case "IFCSTAIRFLIGHTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCStairFlightType();
						case "IFCSTRUCTURALANALYSISMODEL" : return new CSiBKK.IFC.IFC2X3.IFCStructuralAnalysisModel();
						case "IFCSTRUCTURALCURVECONNECTION" : return new CSiBKK.IFC.IFC2X3.IFCStructuralCurveConnection();
						case "IFCSTRUCTURALCURVEMEMBER" : return new CSiBKK.IFC.IFC2X3.IFCStructuralCurveMember();
						case "IFCSTRUCTURALCURVEMEMBERVARYING" : return new CSiBKK.IFC.IFC2X3.IFCStructuralCurveMemberVarying();
						case "IFCSTRUCTURALLINEARACTION" : return new CSiBKK.IFC.IFC2X3.IFCStructuralLinearAction();
						case "IFCSTRUCTURALLINEARACTIONVARYING" : return new CSiBKK.IFC.IFC2X3.IFCStructuralLinearActionVarying();
						case "IFCSTRUCTURALLOADGROUP" : return new CSiBKK.IFC.IFC2X3.IFCStructuralLoadGroup();
						case "IFCSTRUCTURALLOADLINEARFORCE" : return new CSiBKK.IFC.IFC2X3.IFCStructuralLoadLinearForce();
						case "IFCSTRUCTURALLOADPLANARFORCE" : return new CSiBKK.IFC.IFC2X3.IFCStructuralLoadPlanarForce();
						case "IFCSTRUCTURALLOADSINGLEDISPLACEMENT" : return new CSiBKK.IFC.IFC2X3.IFCStructuralLoadSingleDisplacement();
						case "IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION" : return new CSiBKK.IFC.IFC2X3.IFCStructuralLoadSingleDisplacementDistortion();
						case "IFCSTRUCTURALLOADSINGLEFORCE" : return new CSiBKK.IFC.IFC2X3.IFCStructuralLoadSingleForce();
						case "IFCSTRUCTURALLOADSINGLEFORCEWARPING" : return new CSiBKK.IFC.IFC2X3.IFCStructuralLoadSingleForceWarping();
						case "IFCSTRUCTURALLOADTEMPERATURE" : return new CSiBKK.IFC.IFC2X3.IFCStructuralLoadTemperature();
						case "IFCSTRUCTURALPLANARACTION" : return new CSiBKK.IFC.IFC2X3.IFCStructuralPlanarAction();
						case "IFCSTRUCTURALPLANARACTIONVARYING" : return new CSiBKK.IFC.IFC2X3.IFCStructuralPlanarActionVarying();
						case "IFCSTRUCTURALPOINTACTION" : return new CSiBKK.IFC.IFC2X3.IFCStructuralPointAction();
						case "IFCSTRUCTURALPOINTCONNECTION" : return new CSiBKK.IFC.IFC2X3.IFCStructuralPointConnection();
						case "IFCSTRUCTURALPOINTREACTION" : return new CSiBKK.IFC.IFC2X3.IFCStructuralPointReaction();
						case "IFCSTRUCTURALPROFILEPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCStructuralProfileProperties();
						case "IFCSTRUCTURALRESULTGROUP" : return new CSiBKK.IFC.IFC2X3.IFCStructuralResultGroup();
						case "IFCSTRUCTURALSTEELPROFILEPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCStructuralSteelProfileProperties();
						case "IFCSTRUCTURALSURFACECONNECTION" : return new CSiBKK.IFC.IFC2X3.IFCStructuralSurfaceConnection();
						case "IFCSTRUCTURALSURFACEMEMBER" : return new CSiBKK.IFC.IFC2X3.IFCStructuralSurfaceMember();
						case "IFCSTRUCTURALSURFACEMEMBERVARYING" : return new CSiBKK.IFC.IFC2X3.IFCStructuralSurfaceMemberVarying();
						case "IFCSTRUCTUREDDIMENSIONCALLOUT" : return new CSiBKK.IFC.IFC2X3.IFCStructuredDimensionCallout();
						case "IFCSTYLEDITEM" : return new CSiBKK.IFC.IFC2X3.IFCStyledItem();
						case "IFCSTYLEDREPRESENTATION" : return new CSiBKK.IFC.IFC2X3.IFCStyledRepresentation();
						case "IFCSUBCONTRACTRESOURCE" : return new CSiBKK.IFC.IFC2X3.IFCSubContractResource();
						case "IFCSUBEDGE" : return new CSiBKK.IFC.IFC2X3.IFCSubedge();
						case "IFCSURFACECURVESWEPTAREASOLID" : return new CSiBKK.IFC.IFC2X3.IFCSurfaceCurveSweptAreaSolid();
						case "IFCSURFACEOFLINEAREXTRUSION" : return new CSiBKK.IFC.IFC2X3.IFCSurfaceOfLinearExtrusion();
						case "IFCSURFACEOFREVOLUTION" : return new CSiBKK.IFC.IFC2X3.IFCSurfaceOfRevolution();
						case "IFCSURFACESTYLE" : return new CSiBKK.IFC.IFC2X3.IFCSurfaceStyle();
						case "IFCSURFACESTYLELIGHTING" : return new CSiBKK.IFC.IFC2X3.IFCSurfaceStyleLighting();
						case "IFCSURFACESTYLEREFRACTION" : return new CSiBKK.IFC.IFC2X3.IFCSurfaceStyleRefraction();
						case "IFCSURFACESTYLERENDERING" : return new CSiBKK.IFC.IFC2X3.IFCSurfaceStyleRendering();
						case "IFCSURFACESTYLESHADING" : return new CSiBKK.IFC.IFC2X3.IFCSurfaceStyleShading();
						case "IFCSURFACESTYLEWITHTEXTURES" : return new CSiBKK.IFC.IFC2X3.IFCSurfaceStyleWithTextures();
						case "IFCSWEPTDISKSOLID" : return new CSiBKK.IFC.IFC2X3.IFCSweptDiskSolid();
						case "IFCSWITCHINGDEVICETYPE" : return new CSiBKK.IFC.IFC2X3.IFCSwitchingDeviceType();
						case "IFCSYMBOLSTYLE" : return new CSiBKK.IFC.IFC2X3.IFCSymbolStyle();
						case "IFCSYSTEM" : return new CSiBKK.IFC.IFC2X3.IFCSystem();
						case "IFCSYSTEMFURNITUREELEMENTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCSystemFurnitureElementType();
						case "IFCTSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCTShapeProfileDef();
						case "IFCTABLE" : return new CSiBKK.IFC.IFC2X3.IFCTable();
						case "IFCTABLEROW" : return new CSiBKK.IFC.IFC2X3.IFCTableRow();
						case "IFCTANKTYPE" : return new CSiBKK.IFC.IFC2X3.IFCTankType();
						case "IFCTASK" : return new CSiBKK.IFC.IFC2X3.IFCTask();
						case "IFCTELECOMADDRESS" : return new CSiBKK.IFC.IFC2X3.IFCTelecomAddress();
						case "IFCTENDON" : return new CSiBKK.IFC.IFC2X3.IFCTendon();
						case "IFCTENDONANCHOR" : return new CSiBKK.IFC.IFC2X3.IFCTendonAnchor();
						case "IFCTERMINATORSYMBOL" : return new CSiBKK.IFC.IFC2X3.IFCTerminatorSymbol();
						case "IFCTEXTLITERAL" : return new CSiBKK.IFC.IFC2X3.IFCTextLiteral();
						case "IFCTEXTLITERALWITHEXTENT" : return new CSiBKK.IFC.IFC2X3.IFCTextLiteralWithExtent();
						case "IFCTEXTSTYLE" : return new CSiBKK.IFC.IFC2X3.IFCTextStyle();
						case "IFCTEXTSTYLEFONTMODEL" : return new CSiBKK.IFC.IFC2X3.IFCTextStyleFontModel();
						case "IFCTEXTSTYLEFORDEFINEDFONT" : return new CSiBKK.IFC.IFC2X3.IFCTextStyleForDefinedFont();
						case "IFCTEXTSTYLETEXTMODEL" : return new CSiBKK.IFC.IFC2X3.IFCTextStyleTextModel();
						case "IFCTEXTSTYLEWITHBOXCHARACTERISTICS" : return new CSiBKK.IFC.IFC2X3.IFCTextStyleWithBoxCharacteristics();
						case "IFCTEXTURECOORDINATEGENERATOR" : return new CSiBKK.IFC.IFC2X3.IFCTextureCoordinateGenerator();
						case "IFCTEXTUREMAP" : return new CSiBKK.IFC.IFC2X3.IFCTextureMap();
						case "IFCTEXTUREVERTEX" : return new CSiBKK.IFC.IFC2X3.IFCTextureVertex();
						case "IFCTHERMALMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCThermalMaterialProperties();
						case "IFCTIMESERIESREFERENCERELATIONSHIP" : return new CSiBKK.IFC.IFC2X3.IFCTimeSeriesReferenceRelationship();
						case "IFCTIMESERIESSCHEDULE" : return new CSiBKK.IFC.IFC2X3.IFCTimeSeriesSchedule();
						case "IFCTIMESERIESVALUE" : return new CSiBKK.IFC.IFC2X3.IFCTimeSeriesValue();
						case "IFCTOPOLOGYREPRESENTATION" : return new CSiBKK.IFC.IFC2X3.IFCTopologyRepresentation();
						case "IFCTRANSFORMERTYPE" : return new CSiBKK.IFC.IFC2X3.IFCTransformerType();
						case "IFCTRANSPORTELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCTransportElement();
						case "IFCTRANSPORTELEMENTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCTransportElementType();
						case "IFCTRAPEZIUMPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCTrapeziumProfileDef();
						case "IFCTRIMMEDCURVE" : return new CSiBKK.IFC.IFC2X3.IFCTrimmedCurve();
						case "IFCTUBEBUNDLETYPE" : return new CSiBKK.IFC.IFC2X3.IFCTubeBundleType();
						case "IFCTWODIRECTIONREPEATFACTOR" : return new CSiBKK.IFC.IFC2X3.IFCTwoDirectionRepeatFactor();
						case "IFCTYPEOBJECT" : return new CSiBKK.IFC.IFC2X3.IFCTypeObject();
						case "IFCTYPEPRODUCT" : return new CSiBKK.IFC.IFC2X3.IFCTypeProduct();
						case "IFCUSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCUShapeProfileDef();
						case "IFCUNITASSIGNMENT" : return new CSiBKK.IFC.IFC2X3.IFCUnitAssignment();
						case "IFCUNITARYEQUIPMENTTYPE" : return new CSiBKK.IFC.IFC2X3.IFCUnitaryEquipmentType();
						case "IFCVALVETYPE" : return new CSiBKK.IFC.IFC2X3.IFCValveType();
						case "IFCVECTOR" : return new CSiBKK.IFC.IFC2X3.IFCVector();
						case "IFCVERTEX" : return new CSiBKK.IFC.IFC2X3.IFCVertex();
						case "IFCVERTEXBASEDTEXTUREMAP" : return new CSiBKK.IFC.IFC2X3.IFCVertexBasedTextureMap();
						case "IFCVERTEXLOOP" : return new CSiBKK.IFC.IFC2X3.IFCVertexLoop();
						case "IFCVERTEXPOINT" : return new CSiBKK.IFC.IFC2X3.IFCVertexPoint();
						case "IFCVIBRATIONISOLATORTYPE" : return new CSiBKK.IFC.IFC2X3.IFCVibrationIsolatorType();
						case "IFCVIRTUALELEMENT" : return new CSiBKK.IFC.IFC2X3.IFCVirtualElement();
						case "IFCVIRTUALGRIDINTERSECTION" : return new CSiBKK.IFC.IFC2X3.IFCVirtualGridIntersection();
						case "IFCWALL" : return new CSiBKK.IFC.IFC2X3.IFCWall();
						case "IFCWALLSTANDARDCASE" : return new CSiBKK.IFC.IFC2X3.IFCWallStandardCase();
						case "IFCWALLTYPE" : return new CSiBKK.IFC.IFC2X3.IFCWallType();
						case "IFCWASTETERMINALTYPE" : return new CSiBKK.IFC.IFC2X3.IFCWasteTerminalType();
						case "IFCWATERPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCWaterProperties();
						case "IFCWINDOW" : return new CSiBKK.IFC.IFC2X3.IFCWindow();
						case "IFCWINDOWLININGPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCWindowLiningProperties();
						case "IFCWINDOWPANELPROPERTIES" : return new CSiBKK.IFC.IFC2X3.IFCWindowPanelProperties();
						case "IFCWINDOWSTYLE" : return new CSiBKK.IFC.IFC2X3.IFCWindowStyle();
						case "IFCWORKPLAN" : return new CSiBKK.IFC.IFC2X3.IFCWorkPlan();
						case "IFCWORKSCHEDULE" : return new CSiBKK.IFC.IFC2X3.IFCWorkSchedule();
						case "IFCZSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC2X3.IFCZShapeProfileDef();
						case "IFCZONE" : return new CSiBKK.IFC.IFC2X3.IFCZone();
					}
				break;
				case IFC_VERSION.IFC4:
					switch (className)
					{
						case "IFCABSORBEDDOSEMEASURE" : return new CSiBKK.IFC.IFC4.IFCAbsorbedDoseMeasure();
						case "IFCACCELERATIONMEASURE" : return new CSiBKK.IFC.IFC4.IFCAccelerationMeasure();
						case "IFCAMOUNTOFSUBSTANCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCAmountOfSubstanceMeasure();
						case "IFCANGULARVELOCITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCAngularVelocityMeasure();
						case "IFCAREADENSITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCAreaDensityMeasure();
						case "IFCAREAMEASURE" : return new CSiBKK.IFC.IFC4.IFCAreaMeasure();
						case "IFCBINARY" : return new CSiBKK.IFC.IFC4.IFCBinary();
						case "IFCBOOLEAN" : return new CSiBKK.IFC.IFC4.IFCBoolean();
						case "IFCBOXALIGNMENT" : return new CSiBKK.IFC.IFC4.IFCBoxAlignment();
						case "IFCCARDINALPOINTREFERENCE" : return new CSiBKK.IFC.IFC4.IFCCardinalPointReference();
						case "IFCCONTEXTDEPENDENTMEASURE" : return new CSiBKK.IFC.IFC4.IFCContextDependentMeasure();
						case "IFCCOUNTMEASURE" : return new CSiBKK.IFC.IFC4.IFCCountMeasure();
						case "IFCCURVATUREMEASURE" : return new CSiBKK.IFC.IFC4.IFCCurvatureMeasure();
						case "IFCDATE" : return new CSiBKK.IFC.IFC4.IFCDate();
						case "IFCDATETIME" : return new CSiBKK.IFC.IFC4.IFCDateTime();
						case "IFCDAYINMONTHNUMBER" : return new CSiBKK.IFC.IFC4.IFCDayInMonthNumber();
						case "IFCDAYINWEEKNUMBER" : return new CSiBKK.IFC.IFC4.IFCDayInWeekNumber();
						case "IFCDESCRIPTIVEMEASURE" : return new CSiBKK.IFC.IFC4.IFCDescriptiveMeasure();
						case "IFCDIMENSIONCOUNT" : return new CSiBKK.IFC.IFC4.IFCDimensionCount();
						case "IFCDOSEEQUIVALENTMEASURE" : return new CSiBKK.IFC.IFC4.IFCDoseEquivalentMeasure();
						case "IFCDURATION" : return new CSiBKK.IFC.IFC4.IFCDuration();
						case "IFCDYNAMICVISCOSITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCDynamicViscosityMeasure();
						case "IFCELECTRICCAPACITANCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCElectricCapacitanceMeasure();
						case "IFCELECTRICCHARGEMEASURE" : return new CSiBKK.IFC.IFC4.IFCElectricChargeMeasure();
						case "IFCELECTRICCONDUCTANCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCElectricConductanceMeasure();
						case "IFCELECTRICCURRENTMEASURE" : return new CSiBKK.IFC.IFC4.IFCElectricCurrentMeasure();
						case "IFCELECTRICRESISTANCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCElectricResistanceMeasure();
						case "IFCELECTRICVOLTAGEMEASURE" : return new CSiBKK.IFC.IFC4.IFCElectricVoltageMeasure();
						case "IFCENERGYMEASURE" : return new CSiBKK.IFC.IFC4.IFCEnergyMeasure();
						case "IFCFONTSTYLE" : return new CSiBKK.IFC.IFC4.IFCFontStyle();
						case "IFCFONTVARIANT" : return new CSiBKK.IFC.IFC4.IFCFontVariant();
						case "IFCFONTWEIGHT" : return new CSiBKK.IFC.IFC4.IFCFontWeight();
						case "IFCFORCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCForceMeasure();
						case "IFCFREQUENCYMEASURE" : return new CSiBKK.IFC.IFC4.IFCFrequencyMeasure();
						case "IFCGLOBALLYUNIQUEID" : return new CSiBKK.IFC.IFC4.IFCGloballyUniqueId();
						case "IFCHEATFLUXDENSITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCHeatFluxDensityMeasure();
						case "IFCHEATINGVALUEMEASURE" : return new CSiBKK.IFC.IFC4.IFCHeatingValueMeasure();
						case "IFCIDENTIFIER" : return new CSiBKK.IFC.IFC4.IFCIdentifier();
						case "IFCILLUMINANCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCIlluminanceMeasure();
						case "IFCINDUCTANCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCInductanceMeasure();
						case "IFCINTEGER" : return new CSiBKK.IFC.IFC4.IFCInteger();
						case "IFCINTEGERCOUNTRATEMEASURE" : return new CSiBKK.IFC.IFC4.IFCIntegerCountRateMeasure();
						case "IFCIONCONCENTRATIONMEASURE" : return new CSiBKK.IFC.IFC4.IFCIonConcentrationMeasure();
						case "IFCISOTHERMALMOISTURECAPACITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCIsothermalMoistureCapacityMeasure();
						case "IFCKINEMATICVISCOSITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCKinematicViscosityMeasure();
						case "IFCLABEL" : return new CSiBKK.IFC.IFC4.IFCLabel();
						case "IFCLANGUAGEID" : return new CSiBKK.IFC.IFC4.IFCLanguageId();
						case "IFCLENGTHMEASURE" : return new CSiBKK.IFC.IFC4.IFCLengthMeasure();
						case "IFCLINEARFORCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCLinearForceMeasure();
						case "IFCLINEARMOMENTMEASURE" : return new CSiBKK.IFC.IFC4.IFCLinearMomentMeasure();
						case "IFCLINEARSTIFFNESSMEASURE" : return new CSiBKK.IFC.IFC4.IFCLinearStiffnessMeasure();
						case "IFCLINEARVELOCITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCLinearVelocityMeasure();
						case "IFCLOGICAL" : return new CSiBKK.IFC.IFC4.IFCLogical();
						case "IFCLUMINOUSFLUXMEASURE" : return new CSiBKK.IFC.IFC4.IFCLuminousFluxMeasure();
						case "IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE" : return new CSiBKK.IFC.IFC4.IFCLuminousIntensityDistributionMeasure();
						case "IFCLUMINOUSINTENSITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCLuminousIntensityMeasure();
						case "IFCMAGNETICFLUXDENSITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCMagneticFluxDensityMeasure();
						case "IFCMAGNETICFLUXMEASURE" : return new CSiBKK.IFC.IFC4.IFCMagneticFluxMeasure();
						case "IFCMASSDENSITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCMassDensityMeasure();
						case "IFCMASSFLOWRATEMEASURE" : return new CSiBKK.IFC.IFC4.IFCMassFlowRateMeasure();
						case "IFCMASSMEASURE" : return new CSiBKK.IFC.IFC4.IFCMassMeasure();
						case "IFCMASSPERLENGTHMEASURE" : return new CSiBKK.IFC.IFC4.IFCMassPerLengthMeasure();
						case "IFCMODULUSOFELASTICITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCModulusOfElasticityMeasure();
						case "IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4.IFCModulusOfLinearSubgradeReactionMeasure();
						case "IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4.IFCModulusOfRotationalSubgradeReactionMeasure();
						case "IFCMODULUSOFSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4.IFCModulusOfSubgradeReactionMeasure();
						case "IFCMOISTUREDIFFUSIVITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCMoistureDiffusivityMeasure();
						case "IFCMOLECULARWEIGHTMEASURE" : return new CSiBKK.IFC.IFC4.IFCMolecularWeightMeasure();
						case "IFCMOMENTOFINERTIAMEASURE" : return new CSiBKK.IFC.IFC4.IFCMomentOfInertiaMeasure();
						case "IFCMONETARYMEASURE" : return new CSiBKK.IFC.IFC4.IFCMonetaryMeasure();
						case "IFCMONTHINYEARNUMBER" : return new CSiBKK.IFC.IFC4.IFCMonthInYearNumber();
						case "IFCNONNEGATIVELENGTHMEASURE" : return new CSiBKK.IFC.IFC4.IFCNonNegativeLengthMeasure();
						case "IFCNORMALISEDRATIOMEASURE" : return new CSiBKK.IFC.IFC4.IFCNormalisedRatioMeasure();
						case "IFCNUMERICMEASURE" : return new CSiBKK.IFC.IFC4.IFCNumericMeasure();
						case "IFCPHMEASURE" : return new CSiBKK.IFC.IFC4.IFCPHMeasure();
						case "IFCPARAMETERVALUE" : return new CSiBKK.IFC.IFC4.IFCParameterValue();
						case "IFCPLANARFORCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCPlanarForceMeasure();
						case "IFCPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4.IFCPlaneAngleMeasure();
						case "IFCPOSITIVEINTEGER" : return new CSiBKK.IFC.IFC4.IFCPositiveInteger();
						case "IFCPOSITIVELENGTHMEASURE" : return new CSiBKK.IFC.IFC4.IFCPositiveLengthMeasure();
						case "IFCPOSITIVEPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4.IFCPositivePlaneAngleMeasure();
						case "IFCPOSITIVERATIOMEASURE" : return new CSiBKK.IFC.IFC4.IFCPositiveRatioMeasure();
						case "IFCPOWERMEASURE" : return new CSiBKK.IFC.IFC4.IFCPowerMeasure();
						case "IFCPRESENTABLETEXT" : return new CSiBKK.IFC.IFC4.IFCPresentableText();
						case "IFCPRESSUREMEASURE" : return new CSiBKK.IFC.IFC4.IFCPressureMeasure();
						case "IFCRADIOACTIVITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCRadioActivityMeasure();
						case "IFCRATIOMEASURE" : return new CSiBKK.IFC.IFC4.IFCRatioMeasure();
						case "IFCREAL" : return new CSiBKK.IFC.IFC4.IFCReal();
						case "IFCROTATIONALFREQUENCYMEASURE" : return new CSiBKK.IFC.IFC4.IFCRotationalFrequencyMeasure();
						case "IFCROTATIONALMASSMEASURE" : return new CSiBKK.IFC.IFC4.IFCRotationalMassMeasure();
						case "IFCROTATIONALSTIFFNESSMEASURE" : return new CSiBKK.IFC.IFC4.IFCRotationalStiffnessMeasure();
						case "IFCSECTIONMODULUSMEASURE" : return new CSiBKK.IFC.IFC4.IFCSectionModulusMeasure();
						case "IFCSECTIONALAREAINTEGRALMEASURE" : return new CSiBKK.IFC.IFC4.IFCSectionalAreaIntegralMeasure();
						case "IFCSHEARMODULUSMEASURE" : return new CSiBKK.IFC.IFC4.IFCShearModulusMeasure();
						case "IFCSOLIDANGLEMEASURE" : return new CSiBKK.IFC.IFC4.IFCSolidAngleMeasure();
						case "IFCSOUNDPOWERLEVELMEASURE" : return new CSiBKK.IFC.IFC4.IFCSoundPowerLevelMeasure();
						case "IFCSOUNDPOWERMEASURE" : return new CSiBKK.IFC.IFC4.IFCSoundPowerMeasure();
						case "IFCSOUNDPRESSURELEVELMEASURE" : return new CSiBKK.IFC.IFC4.IFCSoundPressureLevelMeasure();
						case "IFCSOUNDPRESSUREMEASURE" : return new CSiBKK.IFC.IFC4.IFCSoundPressureMeasure();
						case "IFCSPECIFICHEATCAPACITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCSpecificHeatCapacityMeasure();
						case "IFCSPECULAREXPONENT" : return new CSiBKK.IFC.IFC4.IFCSpecularExponent();
						case "IFCSPECULARROUGHNESS" : return new CSiBKK.IFC.IFC4.IFCSpecularRoughness();
						case "IFCTEMPERATUREGRADIENTMEASURE" : return new CSiBKK.IFC.IFC4.IFCTemperatureGradientMeasure();
						case "IFCTEMPERATURERATEOFCHANGEMEASURE" : return new CSiBKK.IFC.IFC4.IFCTemperatureRateOfChangeMeasure();
						case "IFCTEXT" : return new CSiBKK.IFC.IFC4.IFCText();
						case "IFCTEXTALIGNMENT" : return new CSiBKK.IFC.IFC4.IFCTextAlignment();
						case "IFCTEXTDECORATION" : return new CSiBKK.IFC.IFC4.IFCTextDecoration();
						case "IFCTEXTFONTNAME" : return new CSiBKK.IFC.IFC4.IFCTextFontName();
						case "IFCTEXTTRANSFORMATION" : return new CSiBKK.IFC.IFC4.IFCTextTransformation();
						case "IFCTHERMALADMITTANCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCThermalAdmittanceMeasure();
						case "IFCTHERMALCONDUCTIVITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCThermalConductivityMeasure();
						case "IFCTHERMALEXPANSIONCOEFFICIENTMEASURE" : return new CSiBKK.IFC.IFC4.IFCThermalExpansionCoefficientMeasure();
						case "IFCTHERMALRESISTANCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCThermalResistanceMeasure();
						case "IFCTHERMALTRANSMITTANCEMEASURE" : return new CSiBKK.IFC.IFC4.IFCThermalTransmittanceMeasure();
						case "IFCTHERMODYNAMICTEMPERATUREMEASURE" : return new CSiBKK.IFC.IFC4.IFCThermodynamicTemperatureMeasure();
						case "IFCTIME" : return new CSiBKK.IFC.IFC4.IFCTime();
						case "IFCTIMEMEASURE" : return new CSiBKK.IFC.IFC4.IFCTimeMeasure();
						case "IFCTIMESTAMP" : return new CSiBKK.IFC.IFC4.IFCTimeStamp();
						case "IFCTORQUEMEASURE" : return new CSiBKK.IFC.IFC4.IFCTorqueMeasure();
						case "IFCURIREFERENCE" : return new CSiBKK.IFC.IFC4.IFCURIReference();
						case "IFCVAPORPERMEABILITYMEASURE" : return new CSiBKK.IFC.IFC4.IFCVaporPermeabilityMeasure();
						case "IFCVOLUMEMEASURE" : return new CSiBKK.IFC.IFC4.IFCVolumeMeasure();
						case "IFCVOLUMETRICFLOWRATEMEASURE" : return new CSiBKK.IFC.IFC4.IFCVolumetricFlowRateMeasure();
						case "IFCWARPINGCONSTANTMEASURE" : return new CSiBKK.IFC.IFC4.IFCWarpingConstantMeasure();
						case "IFCWARPINGMOMENTMEASURE" : return new CSiBKK.IFC.IFC4.IFCWarpingMomentMeasure();
						case "IFCARCINDEX" : return new CSiBKK.IFC.IFC4.IFCArcIndex();
						case "IFCCOMPLEXNUMBER" : return new CSiBKK.IFC.IFC4.IFCComplexNumber();
						case "IFCCOMPOUNDPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4.IFCCompoundPlaneAngleMeasure();
						case "IFCLINEINDEX" : return new CSiBKK.IFC.IFC4.IFCLineIndex();
						case "IFCPROPERTYSETDEFINITIONSET" : return new CSiBKK.IFC.IFC4.IFCPropertySetDefinitionSet();
						case "IFCACTIONREQUESTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCActionRequestTypeEnum();
						case "IFCACTIONSOURCETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCActionSourceTypeEnum();
						case "IFCACTIONTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCActionTypeEnum();
						case "IFCACTUATORTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCActuatorTypeEnum();
						case "IFCADDRESSTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCAddressTypeEnum();
						case "IFCAIRTERMINALBOXTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCAirTerminalBoxTypeEnum();
						case "IFCAIRTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCAirTerminalTypeEnum();
						case "IFCAIRTOAIRHEATRECOVERYTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCAirToAirHeatRecoveryTypeEnum();
						case "IFCALARMTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCAlarmTypeEnum();
						case "IFCANALYSISMODELTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCAnalysisModelTypeEnum();
						case "IFCANALYSISTHEORYTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCAnalysisTheoryTypeEnum();
						case "IFCARITHMETICOPERATORENUM" : return new CSiBKK.IFC.IFC4.IFCArithmeticOperatorEnum();
						case "IFCASSEMBLYPLACEENUM" : return new CSiBKK.IFC.IFC4.IFCAssemblyPlaceEnum();
						case "IFCAUDIOVISUALAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCAudioVisualApplianceTypeEnum();
						case "IFCBSPLINECURVEFORM" : return new CSiBKK.IFC.IFC4.IFCBSplineCurveForm();
						case "IFCBSPLINESURFACEFORM" : return new CSiBKK.IFC.IFC4.IFCBSplineSurfaceForm();
						case "IFCBEAMTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCBeamTypeEnum();
						case "IFCBENCHMARKENUM" : return new CSiBKK.IFC.IFC4.IFCBenchmarkEnum();
						case "IFCBOILERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCBoilerTypeEnum();
						case "IFCBOOLEANOPERATOR" : return new CSiBKK.IFC.IFC4.IFCBooleanOperator();
						case "IFCBUILDINGELEMENTPARTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCBuildingElementPartTypeEnum();
						case "IFCBUILDINGELEMENTPROXYTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCBuildingElementProxyTypeEnum();
						case "IFCBUILDINGSYSTEMTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCBuildingSystemTypeEnum();
						case "IFCBURNERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCBurnerTypeEnum();
						case "IFCCABLECARRIERFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCableCarrierFittingTypeEnum();
						case "IFCCABLECARRIERSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCableCarrierSegmentTypeEnum();
						case "IFCCABLEFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCableFittingTypeEnum();
						case "IFCCABLESEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCableSegmentTypeEnum();
						case "IFCCHANGEACTIONENUM" : return new CSiBKK.IFC.IFC4.IFCChangeActionEnum();
						case "IFCCHILLERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCChillerTypeEnum();
						case "IFCCHIMNEYTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCChimneyTypeEnum();
						case "IFCCOILTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCoilTypeEnum();
						case "IFCCOLUMNTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCColumnTypeEnum();
						case "IFCCOMMUNICATIONSAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCommunicationsApplianceTypeEnum();
						case "IFCCOMPLEXPROPERTYTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCComplexPropertyTemplateTypeEnum();
						case "IFCCOMPRESSORTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCompressorTypeEnum();
						case "IFCCONDENSERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCondenserTypeEnum();
						case "IFCCONNECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCConnectionTypeEnum();
						case "IFCCONSTRAINTENUM" : return new CSiBKK.IFC.IFC4.IFCConstraintEnum();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCConstructionEquipmentResourceTypeEnum();
						case "IFCCONSTRUCTIONMATERIALRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCConstructionMaterialResourceTypeEnum();
						case "IFCCONSTRUCTIONPRODUCTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCConstructionProductResourceTypeEnum();
						case "IFCCONTROLLERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCControllerTypeEnum();
						case "IFCCOOLEDBEAMTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCooledBeamTypeEnum();
						case "IFCCOOLINGTOWERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCoolingTowerTypeEnum();
						case "IFCCOSTITEMTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCostItemTypeEnum();
						case "IFCCOSTSCHEDULETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCostScheduleTypeEnum();
						case "IFCCOVERINGTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCoveringTypeEnum();
						case "IFCCREWRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCrewResourceTypeEnum();
						case "IFCCURTAINWALLTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCCurtainWallTypeEnum();
						case "IFCCURVEINTERPOLATIONENUM" : return new CSiBKK.IFC.IFC4.IFCCurveInterpolationEnum();
						case "IFCDAMPERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCDamperTypeEnum();
						case "IFCDATAORIGINENUM" : return new CSiBKK.IFC.IFC4.IFCDataOriginEnum();
						case "IFCDERIVEDUNITENUM" : return new CSiBKK.IFC.IFC4.IFCDerivedUnitEnum();
						case "IFCDIRECTIONSENSEENUM" : return new CSiBKK.IFC.IFC4.IFCDirectionSenseEnum();
						case "IFCDISCRETEACCESSORYTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCDiscreteAccessoryTypeEnum();
						case "IFCDISTRIBUTIONCHAMBERELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCDistributionChamberElementTypeEnum();
						case "IFCDISTRIBUTIONPORTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCDistributionPortTypeEnum();
						case "IFCDISTRIBUTIONSYSTEMENUM" : return new CSiBKK.IFC.IFC4.IFCDistributionSystemEnum();
						case "IFCDOCUMENTCONFIDENTIALITYENUM" : return new CSiBKK.IFC.IFC4.IFCDocumentConfidentialityEnum();
						case "IFCDOCUMENTSTATUSENUM" : return new CSiBKK.IFC.IFC4.IFCDocumentStatusEnum();
						case "IFCDOORPANELOPERATIONENUM" : return new CSiBKK.IFC.IFC4.IFCDoorPanelOperationEnum();
						case "IFCDOORPANELPOSITIONENUM" : return new CSiBKK.IFC.IFC4.IFCDoorPanelPositionEnum();
						case "IFCDOORSTYLECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC4.IFCDoorStyleConstructionEnum();
						case "IFCDOORSTYLEOPERATIONENUM" : return new CSiBKK.IFC.IFC4.IFCDoorStyleOperationEnum();
						case "IFCDOORTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCDoorTypeEnum();
						case "IFCDOORTYPEOPERATIONENUM" : return new CSiBKK.IFC.IFC4.IFCDoorTypeOperationEnum();
						case "IFCDUCTFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCDuctFittingTypeEnum();
						case "IFCDUCTSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCDuctSegmentTypeEnum();
						case "IFCDUCTSILENCERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCDuctSilencerTypeEnum();
						case "IFCELECTRICAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCElectricApplianceTypeEnum();
						case "IFCELECTRICDISTRIBUTIONBOARDTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCElectricDistributionBoardTypeEnum();
						case "IFCELECTRICFLOWSTORAGEDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCElectricFlowStorageDeviceTypeEnum();
						case "IFCELECTRICGENERATORTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCElectricGeneratorTypeEnum();
						case "IFCELECTRICMOTORTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCElectricMotorTypeEnum();
						case "IFCELECTRICTIMECONTROLTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCElectricTimeControlTypeEnum();
						case "IFCELEMENTASSEMBLYTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCElementAssemblyTypeEnum();
						case "IFCELEMENTCOMPOSITIONENUM" : return new CSiBKK.IFC.IFC4.IFCElementCompositionEnum();
						case "IFCENGINETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCEngineTypeEnum();
						case "IFCEVAPORATIVECOOLERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCEvaporativeCoolerTypeEnum();
						case "IFCEVAPORATORTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCEvaporatorTypeEnum();
						case "IFCEVENTTRIGGERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCEventTriggerTypeEnum();
						case "IFCEVENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCEventTypeEnum();
						case "IFCEXTERNALSPATIALELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCExternalSpatialElementTypeEnum();
						case "IFCFANTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCFanTypeEnum();
						case "IFCFASTENERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCFastenerTypeEnum();
						case "IFCFILTERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCFilterTypeEnum();
						case "IFCFIRESUPPRESSIONTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCFireSuppressionTerminalTypeEnum();
						case "IFCFLOWDIRECTIONENUM" : return new CSiBKK.IFC.IFC4.IFCFlowDirectionEnum();
						case "IFCFLOWINSTRUMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCFlowInstrumentTypeEnum();
						case "IFCFLOWMETERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCFlowMeterTypeEnum();
						case "IFCFOOTINGTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCFootingTypeEnum();
						case "IFCFURNITURETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCFurnitureTypeEnum();
						case "IFCGEOGRAPHICELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCGeographicElementTypeEnum();
						case "IFCGEOMETRICPROJECTIONENUM" : return new CSiBKK.IFC.IFC4.IFCGeometricProjectionEnum();
						case "IFCGLOBALORLOCALENUM" : return new CSiBKK.IFC.IFC4.IFCGlobalOrLocalEnum();
						case "IFCGRIDTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCGridTypeEnum();
						case "IFCHEATEXCHANGERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCHeatExchangerTypeEnum();
						case "IFCHUMIDIFIERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCHumidifierTypeEnum();
						case "IFCINTERCEPTORTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCInterceptorTypeEnum();
						case "IFCINTERNALOREXTERNALENUM" : return new CSiBKK.IFC.IFC4.IFCInternalOrExternalEnum();
						case "IFCINVENTORYTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCInventoryTypeEnum();
						case "IFCJUNCTIONBOXTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCJunctionBoxTypeEnum();
						case "IFCKNOTTYPE" : return new CSiBKK.IFC.IFC4.IFCKnotType();
						case "IFCLABORRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCLaborResourceTypeEnum();
						case "IFCLAMPTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCLampTypeEnum();
						case "IFCLAYERSETDIRECTIONENUM" : return new CSiBKK.IFC.IFC4.IFCLayerSetDirectionEnum();
						case "IFCLIGHTDISTRIBUTIONCURVEENUM" : return new CSiBKK.IFC.IFC4.IFCLightDistributionCurveEnum();
						case "IFCLIGHTEMISSIONSOURCEENUM" : return new CSiBKK.IFC.IFC4.IFCLightEmissionSourceEnum();
						case "IFCLIGHTFIXTURETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCLightFixtureTypeEnum();
						case "IFCLOADGROUPTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCLoadGroupTypeEnum();
						case "IFCLOGICALOPERATORENUM" : return new CSiBKK.IFC.IFC4.IFCLogicalOperatorEnum();
						case "IFCMECHANICALFASTENERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCMechanicalFastenerTypeEnum();
						case "IFCMEDICALDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCMedicalDeviceTypeEnum();
						case "IFCMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCMemberTypeEnum();
						case "IFCMOTORCONNECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCMotorConnectionTypeEnum();
						case "IFCNULLSTYLE" : return new CSiBKK.IFC.IFC4.IFCNullStyle();
						case "IFCOBJECTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCObjectTypeEnum();
						case "IFCOBJECTIVEENUM" : return new CSiBKK.IFC.IFC4.IFCObjectiveEnum();
						case "IFCOCCUPANTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCOccupantTypeEnum();
						case "IFCOPENINGELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCOpeningElementTypeEnum();
						case "IFCOUTLETTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCOutletTypeEnum();
						case "IFCPERFORMANCEHISTORYTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCPerformanceHistoryTypeEnum();
						case "IFCPERMEABLECOVERINGOPERATIONENUM" : return new CSiBKK.IFC.IFC4.IFCPermeableCoveringOperationEnum();
						case "IFCPERMITTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCPermitTypeEnum();
						case "IFCPHYSICALORVIRTUALENUM" : return new CSiBKK.IFC.IFC4.IFCPhysicalOrVirtualEnum();
						case "IFCPILECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC4.IFCPileConstructionEnum();
						case "IFCPILETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCPileTypeEnum();
						case "IFCPIPEFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCPipeFittingTypeEnum();
						case "IFCPIPESEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCPipeSegmentTypeEnum();
						case "IFCPLATETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCPlateTypeEnum();
						case "IFCPREFERREDSURFACECURVEREPRESENTATION" : return new CSiBKK.IFC.IFC4.IFCPreferredSurfaceCurveRepresentation();
						case "IFCPROCEDURETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCProcedureTypeEnum();
						case "IFCPROFILETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCProfileTypeEnum();
						case "IFCPROJECTORDERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCProjectOrderTypeEnum();
						case "IFCPROJECTEDORTRUELENGTHENUM" : return new CSiBKK.IFC.IFC4.IFCProjectedOrTrueLengthEnum();
						case "IFCPROJECTIONELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCProjectionElementTypeEnum();
						case "IFCPROPERTYSETTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCPropertySetTemplateTypeEnum();
						case "IFCPROTECTIVEDEVICETRIPPINGUNITTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCProtectiveDeviceTrippingUnitTypeEnum();
						case "IFCPROTECTIVEDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCProtectiveDeviceTypeEnum();
						case "IFCPUMPTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCPumpTypeEnum();
						case "IFCRAILINGTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCRailingTypeEnum();
						case "IFCRAMPFLIGHTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCRampFlightTypeEnum();
						case "IFCRAMPTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCRampTypeEnum();
						case "IFCRECURRENCETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCRecurrenceTypeEnum();
						case "IFCREFLECTANCEMETHODENUM" : return new CSiBKK.IFC.IFC4.IFCReflectanceMethodEnum();
						case "IFCREINFORCINGBARROLEENUM" : return new CSiBKK.IFC.IFC4.IFCReinforcingBarRoleEnum();
						case "IFCREINFORCINGBARSURFACEENUM" : return new CSiBKK.IFC.IFC4.IFCReinforcingBarSurfaceEnum();
						case "IFCREINFORCINGBARTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCReinforcingBarTypeEnum();
						case "IFCREINFORCINGMESHTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCReinforcingMeshTypeEnum();
						case "IFCROLEENUM" : return new CSiBKK.IFC.IFC4.IFCRoleEnum();
						case "IFCROOFTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCRoofTypeEnum();
						case "IFCSIPREFIX" : return new CSiBKK.IFC.IFC4.IFCSIPrefix();
						case "IFCSIUNITNAME" : return new CSiBKK.IFC.IFC4.IFCSIUnitName();
						case "IFCSANITARYTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSanitaryTerminalTypeEnum();
						case "IFCSECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSectionTypeEnum();
						case "IFCSENSORTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSensorTypeEnum();
						case "IFCSEQUENCEENUM" : return new CSiBKK.IFC.IFC4.IFCSequenceEnum();
						case "IFCSHADINGDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCShadingDeviceTypeEnum();
						case "IFCSIMPLEPROPERTYTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSimplePropertyTemplateTypeEnum();
						case "IFCSLABTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSlabTypeEnum();
						case "IFCSOLARDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSolarDeviceTypeEnum();
						case "IFCSPACEHEATERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSpaceHeaterTypeEnum();
						case "IFCSPACETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSpaceTypeEnum();
						case "IFCSPATIALZONETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSpatialZoneTypeEnum();
						case "IFCSTACKTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCStackTerminalTypeEnum();
						case "IFCSTAIRFLIGHTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCStairFlightTypeEnum();
						case "IFCSTAIRTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCStairTypeEnum();
						case "IFCSTATEENUM" : return new CSiBKK.IFC.IFC4.IFCStateEnum();
						case "IFCSTRUCTURALCURVEACTIVITYTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCStructuralCurveActivityTypeEnum();
						case "IFCSTRUCTURALCURVEMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCStructuralCurveMemberTypeEnum();
						case "IFCSTRUCTURALSURFACEACTIVITYTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCStructuralSurfaceActivityTypeEnum();
						case "IFCSTRUCTURALSURFACEMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCStructuralSurfaceMemberTypeEnum();
						case "IFCSUBCONTRACTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSubContractResourceTypeEnum();
						case "IFCSURFACEFEATURETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSurfaceFeatureTypeEnum();
						case "IFCSURFACESIDE" : return new CSiBKK.IFC.IFC4.IFCSurfaceSide();
						case "IFCSWITCHINGDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSwitchingDeviceTypeEnum();
						case "IFCSYSTEMFURNITUREELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCSystemFurnitureElementTypeEnum();
						case "IFCTANKTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCTankTypeEnum();
						case "IFCTASKDURATIONENUM" : return new CSiBKK.IFC.IFC4.IFCTaskDurationEnum();
						case "IFCTASKTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCTaskTypeEnum();
						case "IFCTENDONANCHORTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCTendonAnchorTypeEnum();
						case "IFCTENDONTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCTendonTypeEnum();
						case "IFCTEXTPATH" : return new CSiBKK.IFC.IFC4.IFCTextPath();
						case "IFCTIMESERIESDATATYPEENUM" : return new CSiBKK.IFC.IFC4.IFCTimeSeriesDataTypeEnum();
						case "IFCTRANSFORMERTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCTransformerTypeEnum();
						case "IFCTRANSITIONCODE" : return new CSiBKK.IFC.IFC4.IFCTransitionCode();
						case "IFCTRANSPORTELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCTransportElementTypeEnum();
						case "IFCTRIMMINGPREFERENCE" : return new CSiBKK.IFC.IFC4.IFCTrimmingPreference();
						case "IFCTUBEBUNDLETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCTubeBundleTypeEnum();
						case "IFCUNITENUM" : return new CSiBKK.IFC.IFC4.IFCUnitEnum();
						case "IFCUNITARYCONTROLELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCUnitaryControlElementTypeEnum();
						case "IFCUNITARYEQUIPMENTTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCUnitaryEquipmentTypeEnum();
						case "IFCVALVETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCValveTypeEnum();
						case "IFCVIBRATIONISOLATORTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCVibrationIsolatorTypeEnum();
						case "IFCVOIDINGFEATURETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCVoidingFeatureTypeEnum();
						case "IFCWALLTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCWallTypeEnum();
						case "IFCWASTETERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCWasteTerminalTypeEnum();
						case "IFCWINDOWPANELOPERATIONENUM" : return new CSiBKK.IFC.IFC4.IFCWindowPanelOperationEnum();
						case "IFCWINDOWPANELPOSITIONENUM" : return new CSiBKK.IFC.IFC4.IFCWindowPanelPositionEnum();
						case "IFCWINDOWSTYLECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC4.IFCWindowStyleConstructionEnum();
						case "IFCWINDOWSTYLEOPERATIONENUM" : return new CSiBKK.IFC.IFC4.IFCWindowStyleOperationEnum();
						case "IFCWINDOWTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCWindowTypeEnum();
						case "IFCWINDOWTYPEPARTITIONINGENUM" : return new CSiBKK.IFC.IFC4.IFCWindowTypePartitioningEnum();
						case "IFCWORKCALENDARTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCWorkCalendarTypeEnum();
						case "IFCWORKPLANTYPEENUM" : return new CSiBKK.IFC.IFC4.IFCWorkPlanTypeEnum();
						case "IFCWORKSCHEDULETYPEENUM" : return new CSiBKK.IFC.IFC4.IFCWorkScheduleTypeEnum();
						case "IFCACTIONREQUEST" : return new CSiBKK.IFC.IFC4.IFCActionRequest();
						case "IFCACTOR" : return new CSiBKK.IFC.IFC4.IFCActor();
						case "IFCACTORROLE" : return new CSiBKK.IFC.IFC4.IFCActorRole();
						case "IFCACTUATOR" : return new CSiBKK.IFC.IFC4.IFCActuator();
						case "IFCACTUATORTYPE" : return new CSiBKK.IFC.IFC4.IFCActuatorType();
						case "IFCADVANCEDBREP" : return new CSiBKK.IFC.IFC4.IFCAdvancedBrep();
						case "IFCADVANCEDBREPWITHVOIDS" : return new CSiBKK.IFC.IFC4.IFCAdvancedBrepWithVoids();
						case "IFCADVANCEDFACE" : return new CSiBKK.IFC.IFC4.IFCAdvancedFace();
						case "IFCAIRTERMINAL" : return new CSiBKK.IFC.IFC4.IFCAirTerminal();
						case "IFCAIRTERMINALBOX" : return new CSiBKK.IFC.IFC4.IFCAirTerminalBox();
						case "IFCAIRTERMINALBOXTYPE" : return new CSiBKK.IFC.IFC4.IFCAirTerminalBoxType();
						case "IFCAIRTERMINALTYPE" : return new CSiBKK.IFC.IFC4.IFCAirTerminalType();
						case "IFCAIRTOAIRHEATRECOVERY" : return new CSiBKK.IFC.IFC4.IFCAirToAirHeatRecovery();
						case "IFCAIRTOAIRHEATRECOVERYTYPE" : return new CSiBKK.IFC.IFC4.IFCAirToAirHeatRecoveryType();
						case "IFCALARM" : return new CSiBKK.IFC.IFC4.IFCAlarm();
						case "IFCALARMTYPE" : return new CSiBKK.IFC.IFC4.IFCAlarmType();
						case "IFCANNOTATION" : return new CSiBKK.IFC.IFC4.IFCAnnotation();
						case "IFCANNOTATIONFILLAREA" : return new CSiBKK.IFC.IFC4.IFCAnnotationFillArea();
						case "IFCAPPLICATION" : return new CSiBKK.IFC.IFC4.IFCApplication();
						case "IFCAPPLIEDVALUE" : return new CSiBKK.IFC.IFC4.IFCAppliedValue();
						case "IFCAPPROVAL" : return new CSiBKK.IFC.IFC4.IFCApproval();
						case "IFCAPPROVALRELATIONSHIP" : return new CSiBKK.IFC.IFC4.IFCApprovalRelationship();
						case "IFCARBITRARYCLOSEDPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCArbitraryClosedProfileDef();
						case "IFCARBITRARYOPENPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCArbitraryOpenProfileDef();
						case "IFCARBITRARYPROFILEDEFWITHVOIDS" : return new CSiBKK.IFC.IFC4.IFCArbitraryProfileDefWithVoids();
						case "IFCASSET" : return new CSiBKK.IFC.IFC4.IFCAsset();
						case "IFCASYMMETRICISHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCAsymmetricIShapeProfileDef();
						case "IFCAUDIOVISUALAPPLIANCE" : return new CSiBKK.IFC.IFC4.IFCAudioVisualAppliance();
						case "IFCAUDIOVISUALAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4.IFCAudioVisualApplianceType();
						case "IFCAXIS1PLACEMENT" : return new CSiBKK.IFC.IFC4.IFCAxis1Placement();
						case "IFCAXIS2PLACEMENT2D" : return new CSiBKK.IFC.IFC4.IFCAxis2Placement2D();
						case "IFCAXIS2PLACEMENT3D" : return new CSiBKK.IFC.IFC4.IFCAxis2Placement3D();
						case "IFCBSPLINECURVEWITHKNOTS" : return new CSiBKK.IFC.IFC4.IFCBSplineCurveWithKnots();
						case "IFCBSPLINESURFACEWITHKNOTS" : return new CSiBKK.IFC.IFC4.IFCBSplineSurfaceWithKnots();
						case "IFCBEAM" : return new CSiBKK.IFC.IFC4.IFCBeam();
						case "IFCBEAMSTANDARDCASE" : return new CSiBKK.IFC.IFC4.IFCBeamStandardCase();
						case "IFCBEAMTYPE" : return new CSiBKK.IFC.IFC4.IFCBeamType();
						case "IFCBLOBTEXTURE" : return new CSiBKK.IFC.IFC4.IFCBlobTexture();
						case "IFCBLOCK" : return new CSiBKK.IFC.IFC4.IFCBlock();
						case "IFCBOILER" : return new CSiBKK.IFC.IFC4.IFCBoiler();
						case "IFCBOILERTYPE" : return new CSiBKK.IFC.IFC4.IFCBoilerType();
						case "IFCBOOLEANCLIPPINGRESULT" : return new CSiBKK.IFC.IFC4.IFCBooleanClippingResult();
						case "IFCBOOLEANRESULT" : return new CSiBKK.IFC.IFC4.IFCBooleanResult();
						case "IFCBOUNDARYCURVE" : return new CSiBKK.IFC.IFC4.IFCBoundaryCurve();
						case "IFCBOUNDARYEDGECONDITION" : return new CSiBKK.IFC.IFC4.IFCBoundaryEdgeCondition();
						case "IFCBOUNDARYFACECONDITION" : return new CSiBKK.IFC.IFC4.IFCBoundaryFaceCondition();
						case "IFCBOUNDARYNODECONDITION" : return new CSiBKK.IFC.IFC4.IFCBoundaryNodeCondition();
						case "IFCBOUNDARYNODECONDITIONWARPING" : return new CSiBKK.IFC.IFC4.IFCBoundaryNodeConditionWarping();
						case "IFCBOUNDINGBOX" : return new CSiBKK.IFC.IFC4.IFCBoundingBox();
						case "IFCBOXEDHALFSPACE" : return new CSiBKK.IFC.IFC4.IFCBoxedHalfSpace();
						case "IFCBUILDING" : return new CSiBKK.IFC.IFC4.IFCBuilding();
						case "IFCBUILDINGELEMENTPART" : return new CSiBKK.IFC.IFC4.IFCBuildingElementPart();
						case "IFCBUILDINGELEMENTPARTTYPE" : return new CSiBKK.IFC.IFC4.IFCBuildingElementPartType();
						case "IFCBUILDINGELEMENTPROXY" : return new CSiBKK.IFC.IFC4.IFCBuildingElementProxy();
						case "IFCBUILDINGELEMENTPROXYTYPE" : return new CSiBKK.IFC.IFC4.IFCBuildingElementProxyType();
						case "IFCBUILDINGSTOREY" : return new CSiBKK.IFC.IFC4.IFCBuildingStorey();
						case "IFCBUILDINGSYSTEM" : return new CSiBKK.IFC.IFC4.IFCBuildingSystem();
						case "IFCBURNER" : return new CSiBKK.IFC.IFC4.IFCBurner();
						case "IFCBURNERTYPE" : return new CSiBKK.IFC.IFC4.IFCBurnerType();
						case "IFCCSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCCShapeProfileDef();
						case "IFCCABLECARRIERFITTING" : return new CSiBKK.IFC.IFC4.IFCCableCarrierFitting();
						case "IFCCABLECARRIERFITTINGTYPE" : return new CSiBKK.IFC.IFC4.IFCCableCarrierFittingType();
						case "IFCCABLECARRIERSEGMENT" : return new CSiBKK.IFC.IFC4.IFCCableCarrierSegment();
						case "IFCCABLECARRIERSEGMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCCableCarrierSegmentType();
						case "IFCCABLEFITTING" : return new CSiBKK.IFC.IFC4.IFCCableFitting();
						case "IFCCABLEFITTINGTYPE" : return new CSiBKK.IFC.IFC4.IFCCableFittingType();
						case "IFCCABLESEGMENT" : return new CSiBKK.IFC.IFC4.IFCCableSegment();
						case "IFCCABLESEGMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCCableSegmentType();
						case "IFCCARTESIANPOINT" : return new CSiBKK.IFC.IFC4.IFCCartesianPoint();
						case "IFCCARTESIANPOINTLIST2D" : return new CSiBKK.IFC.IFC4.IFCCartesianPointList2D();
						case "IFCCARTESIANPOINTLIST3D" : return new CSiBKK.IFC.IFC4.IFCCartesianPointList3D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR2D" : return new CSiBKK.IFC.IFC4.IFCCartesianTransformationOperator2D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM" : return new CSiBKK.IFC.IFC4.IFCCartesianTransformationOperator2DnonUniform();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR3D" : return new CSiBKK.IFC.IFC4.IFCCartesianTransformationOperator3D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM" : return new CSiBKK.IFC.IFC4.IFCCartesianTransformationOperator3DnonUniform();
						case "IFCCENTERLINEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCCenterLineProfileDef();
						case "IFCCHILLER" : return new CSiBKK.IFC.IFC4.IFCChiller();
						case "IFCCHILLERTYPE" : return new CSiBKK.IFC.IFC4.IFCChillerType();
						case "IFCCHIMNEY" : return new CSiBKK.IFC.IFC4.IFCChimney();
						case "IFCCHIMNEYTYPE" : return new CSiBKK.IFC.IFC4.IFCChimneyType();
						case "IFCCIRCLE" : return new CSiBKK.IFC.IFC4.IFCCircle();
						case "IFCCIRCLEHOLLOWPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCCircleHollowProfileDef();
						case "IFCCIRCLEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCCircleProfileDef();
						case "IFCCIVILELEMENT" : return new CSiBKK.IFC.IFC4.IFCCivilElement();
						case "IFCCIVILELEMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCCivilElementType();
						case "IFCCLASSIFICATION" : return new CSiBKK.IFC.IFC4.IFCClassification();
						case "IFCCLASSIFICATIONREFERENCE" : return new CSiBKK.IFC.IFC4.IFCClassificationReference();
						case "IFCCLOSEDSHELL" : return new CSiBKK.IFC.IFC4.IFCClosedShell();
						case "IFCCOIL" : return new CSiBKK.IFC.IFC4.IFCCoil();
						case "IFCCOILTYPE" : return new CSiBKK.IFC.IFC4.IFCCoilType();
						case "IFCCOLOURRGB" : return new CSiBKK.IFC.IFC4.IFCColourRgb();
						case "IFCCOLOURRGBLIST" : return new CSiBKK.IFC.IFC4.IFCColourRgbList();
						case "IFCCOLUMN" : return new CSiBKK.IFC.IFC4.IFCColumn();
						case "IFCCOLUMNSTANDARDCASE" : return new CSiBKK.IFC.IFC4.IFCColumnStandardCase();
						case "IFCCOLUMNTYPE" : return new CSiBKK.IFC.IFC4.IFCColumnType();
						case "IFCCOMMUNICATIONSAPPLIANCE" : return new CSiBKK.IFC.IFC4.IFCCommunicationsAppliance();
						case "IFCCOMMUNICATIONSAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4.IFCCommunicationsApplianceType();
						case "IFCCOMPLEXPROPERTY" : return new CSiBKK.IFC.IFC4.IFCComplexProperty();
						case "IFCCOMPLEXPROPERTYTEMPLATE" : return new CSiBKK.IFC.IFC4.IFCComplexPropertyTemplate();
						case "IFCCOMPOSITECURVE" : return new CSiBKK.IFC.IFC4.IFCCompositeCurve();
						case "IFCCOMPOSITECURVEONSURFACE" : return new CSiBKK.IFC.IFC4.IFCCompositeCurveOnSurface();
						case "IFCCOMPOSITECURVESEGMENT" : return new CSiBKK.IFC.IFC4.IFCCompositeCurveSegment();
						case "IFCCOMPOSITEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCCompositeProfileDef();
						case "IFCCOMPRESSOR" : return new CSiBKK.IFC.IFC4.IFCCompressor();
						case "IFCCOMPRESSORTYPE" : return new CSiBKK.IFC.IFC4.IFCCompressorType();
						case "IFCCONDENSER" : return new CSiBKK.IFC.IFC4.IFCCondenser();
						case "IFCCONDENSERTYPE" : return new CSiBKK.IFC.IFC4.IFCCondenserType();
						case "IFCCONNECTEDFACESET" : return new CSiBKK.IFC.IFC4.IFCConnectedFaceSet();
						case "IFCCONNECTIONCURVEGEOMETRY" : return new CSiBKK.IFC.IFC4.IFCConnectionCurveGeometry();
						case "IFCCONNECTIONPOINTECCENTRICITY" : return new CSiBKK.IFC.IFC4.IFCConnectionPointEccentricity();
						case "IFCCONNECTIONPOINTGEOMETRY" : return new CSiBKK.IFC.IFC4.IFCConnectionPointGeometry();
						case "IFCCONNECTIONSURFACEGEOMETRY" : return new CSiBKK.IFC.IFC4.IFCConnectionSurfaceGeometry();
						case "IFCCONNECTIONVOLUMEGEOMETRY" : return new CSiBKK.IFC.IFC4.IFCConnectionVolumeGeometry();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCE" : return new CSiBKK.IFC.IFC4.IFCConstructionEquipmentResource();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE" : return new CSiBKK.IFC.IFC4.IFCConstructionEquipmentResourceType();
						case "IFCCONSTRUCTIONMATERIALRESOURCE" : return new CSiBKK.IFC.IFC4.IFCConstructionMaterialResource();
						case "IFCCONSTRUCTIONMATERIALRESOURCETYPE" : return new CSiBKK.IFC.IFC4.IFCConstructionMaterialResourceType();
						case "IFCCONSTRUCTIONPRODUCTRESOURCE" : return new CSiBKK.IFC.IFC4.IFCConstructionProductResource();
						case "IFCCONSTRUCTIONPRODUCTRESOURCETYPE" : return new CSiBKK.IFC.IFC4.IFCConstructionProductResourceType();
						case "IFCCONTEXTDEPENDENTUNIT" : return new CSiBKK.IFC.IFC4.IFCContextDependentUnit();
						case "IFCCONTROLLER" : return new CSiBKK.IFC.IFC4.IFCController();
						case "IFCCONTROLLERTYPE" : return new CSiBKK.IFC.IFC4.IFCControllerType();
						case "IFCCONVERSIONBASEDUNIT" : return new CSiBKK.IFC.IFC4.IFCConversionBasedUnit();
						case "IFCCONVERSIONBASEDUNITWITHOFFSET" : return new CSiBKK.IFC.IFC4.IFCConversionBasedUnitWithOffset();
						case "IFCCOOLEDBEAM" : return new CSiBKK.IFC.IFC4.IFCCooledBeam();
						case "IFCCOOLEDBEAMTYPE" : return new CSiBKK.IFC.IFC4.IFCCooledBeamType();
						case "IFCCOOLINGTOWER" : return new CSiBKK.IFC.IFC4.IFCCoolingTower();
						case "IFCCOOLINGTOWERTYPE" : return new CSiBKK.IFC.IFC4.IFCCoolingTowerType();
						case "IFCCOSTITEM" : return new CSiBKK.IFC.IFC4.IFCCostItem();
						case "IFCCOSTSCHEDULE" : return new CSiBKK.IFC.IFC4.IFCCostSchedule();
						case "IFCCOSTVALUE" : return new CSiBKK.IFC.IFC4.IFCCostValue();
						case "IFCCOVERING" : return new CSiBKK.IFC.IFC4.IFCCovering();
						case "IFCCOVERINGTYPE" : return new CSiBKK.IFC.IFC4.IFCCoveringType();
						case "IFCCREWRESOURCE" : return new CSiBKK.IFC.IFC4.IFCCrewResource();
						case "IFCCREWRESOURCETYPE" : return new CSiBKK.IFC.IFC4.IFCCrewResourceType();
						case "IFCCSGSOLID" : return new CSiBKK.IFC.IFC4.IFCCsgSolid();
						case "IFCCURRENCYRELATIONSHIP" : return new CSiBKK.IFC.IFC4.IFCCurrencyRelationship();
						case "IFCCURTAINWALL" : return new CSiBKK.IFC.IFC4.IFCCurtainWall();
						case "IFCCURTAINWALLTYPE" : return new CSiBKK.IFC.IFC4.IFCCurtainWallType();
						case "IFCCURVEBOUNDEDPLANE" : return new CSiBKK.IFC.IFC4.IFCCurveBoundedPlane();
						case "IFCCURVEBOUNDEDSURFACE" : return new CSiBKK.IFC.IFC4.IFCCurveBoundedSurface();
						case "IFCCURVESTYLE" : return new CSiBKK.IFC.IFC4.IFCCurveStyle();
						case "IFCCURVESTYLEFONT" : return new CSiBKK.IFC.IFC4.IFCCurveStyleFont();
						case "IFCCURVESTYLEFONTANDSCALING" : return new CSiBKK.IFC.IFC4.IFCCurveStyleFontAndScaling();
						case "IFCCURVESTYLEFONTPATTERN" : return new CSiBKK.IFC.IFC4.IFCCurveStyleFontPattern();
						case "IFCCYLINDRICALSURFACE" : return new CSiBKK.IFC.IFC4.IFCCylindricalSurface();
						case "IFCDAMPER" : return new CSiBKK.IFC.IFC4.IFCDamper();
						case "IFCDAMPERTYPE" : return new CSiBKK.IFC.IFC4.IFCDamperType();
						case "IFCDERIVEDPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCDerivedProfileDef();
						case "IFCDERIVEDUNIT" : return new CSiBKK.IFC.IFC4.IFCDerivedUnit();
						case "IFCDERIVEDUNITELEMENT" : return new CSiBKK.IFC.IFC4.IFCDerivedUnitElement();
						case "IFCDIMENSIONALEXPONENTS" : return new CSiBKK.IFC.IFC4.IFCDimensionalExponents();
						case "IFCDIRECTION" : return new CSiBKK.IFC.IFC4.IFCDirection();
						case "IFCDISCRETEACCESSORY" : return new CSiBKK.IFC.IFC4.IFCDiscreteAccessory();
						case "IFCDISCRETEACCESSORYTYPE" : return new CSiBKK.IFC.IFC4.IFCDiscreteAccessoryType();
						case "IFCDISTRIBUTIONCHAMBERELEMENT" : return new CSiBKK.IFC.IFC4.IFCDistributionChamberElement();
						case "IFCDISTRIBUTIONCHAMBERELEMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCDistributionChamberElementType();
						case "IFCDISTRIBUTIONCIRCUIT" : return new CSiBKK.IFC.IFC4.IFCDistributionCircuit();
						case "IFCDISTRIBUTIONCONTROLELEMENT" : return new CSiBKK.IFC.IFC4.IFCDistributionControlElement();
						case "IFCDISTRIBUTIONELEMENT" : return new CSiBKK.IFC.IFC4.IFCDistributionElement();
						case "IFCDISTRIBUTIONELEMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCDistributionElementType();
						case "IFCDISTRIBUTIONFLOWELEMENT" : return new CSiBKK.IFC.IFC4.IFCDistributionFlowElement();
						case "IFCDISTRIBUTIONPORT" : return new CSiBKK.IFC.IFC4.IFCDistributionPort();
						case "IFCDISTRIBUTIONSYSTEM" : return new CSiBKK.IFC.IFC4.IFCDistributionSystem();
						case "IFCDOCUMENTINFORMATION" : return new CSiBKK.IFC.IFC4.IFCDocumentInformation();
						case "IFCDOCUMENTINFORMATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4.IFCDocumentInformationRelationship();
						case "IFCDOCUMENTREFERENCE" : return new CSiBKK.IFC.IFC4.IFCDocumentReference();
						case "IFCDOOR" : return new CSiBKK.IFC.IFC4.IFCDoor();
						case "IFCDOORLININGPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCDoorLiningProperties();
						case "IFCDOORPANELPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCDoorPanelProperties();
						case "IFCDOORSTANDARDCASE" : return new CSiBKK.IFC.IFC4.IFCDoorStandardCase();
						case "IFCDOORSTYLE" : return new CSiBKK.IFC.IFC4.IFCDoorStyle();
						case "IFCDOORTYPE" : return new CSiBKK.IFC.IFC4.IFCDoorType();
						case "IFCDRAUGHTINGPREDEFINEDCOLOUR" : return new CSiBKK.IFC.IFC4.IFCDraughtingPreDefinedColour();
						case "IFCDRAUGHTINGPREDEFINEDCURVEFONT" : return new CSiBKK.IFC.IFC4.IFCDraughtingPreDefinedCurveFont();
						case "IFCDUCTFITTING" : return new CSiBKK.IFC.IFC4.IFCDuctFitting();
						case "IFCDUCTFITTINGTYPE" : return new CSiBKK.IFC.IFC4.IFCDuctFittingType();
						case "IFCDUCTSEGMENT" : return new CSiBKK.IFC.IFC4.IFCDuctSegment();
						case "IFCDUCTSEGMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCDuctSegmentType();
						case "IFCDUCTSILENCER" : return new CSiBKK.IFC.IFC4.IFCDuctSilencer();
						case "IFCDUCTSILENCERTYPE" : return new CSiBKK.IFC.IFC4.IFCDuctSilencerType();
						case "IFCEDGE" : return new CSiBKK.IFC.IFC4.IFCEdge();
						case "IFCEDGECURVE" : return new CSiBKK.IFC.IFC4.IFCEdgeCurve();
						case "IFCEDGELOOP" : return new CSiBKK.IFC.IFC4.IFCEdgeLoop();
						case "IFCELECTRICAPPLIANCE" : return new CSiBKK.IFC.IFC4.IFCElectricAppliance();
						case "IFCELECTRICAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4.IFCElectricApplianceType();
						case "IFCELECTRICDISTRIBUTIONBOARD" : return new CSiBKK.IFC.IFC4.IFCElectricDistributionBoard();
						case "IFCELECTRICDISTRIBUTIONBOARDTYPE" : return new CSiBKK.IFC.IFC4.IFCElectricDistributionBoardType();
						case "IFCELECTRICFLOWSTORAGEDEVICE" : return new CSiBKK.IFC.IFC4.IFCElectricFlowStorageDevice();
						case "IFCELECTRICFLOWSTORAGEDEVICETYPE" : return new CSiBKK.IFC.IFC4.IFCElectricFlowStorageDeviceType();
						case "IFCELECTRICGENERATOR" : return new CSiBKK.IFC.IFC4.IFCElectricGenerator();
						case "IFCELECTRICGENERATORTYPE" : return new CSiBKK.IFC.IFC4.IFCElectricGeneratorType();
						case "IFCELECTRICMOTOR" : return new CSiBKK.IFC.IFC4.IFCElectricMotor();
						case "IFCELECTRICMOTORTYPE" : return new CSiBKK.IFC.IFC4.IFCElectricMotorType();
						case "IFCELECTRICTIMECONTROL" : return new CSiBKK.IFC.IFC4.IFCElectricTimeControl();
						case "IFCELECTRICTIMECONTROLTYPE" : return new CSiBKK.IFC.IFC4.IFCElectricTimeControlType();
						case "IFCELEMENTASSEMBLY" : return new CSiBKK.IFC.IFC4.IFCElementAssembly();
						case "IFCELEMENTASSEMBLYTYPE" : return new CSiBKK.IFC.IFC4.IFCElementAssemblyType();
						case "IFCELEMENTQUANTITY" : return new CSiBKK.IFC.IFC4.IFCElementQuantity();
						case "IFCELLIPSE" : return new CSiBKK.IFC.IFC4.IFCEllipse();
						case "IFCELLIPSEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCEllipseProfileDef();
						case "IFCENERGYCONVERSIONDEVICE" : return new CSiBKK.IFC.IFC4.IFCEnergyConversionDevice();
						case "IFCENGINE" : return new CSiBKK.IFC.IFC4.IFCEngine();
						case "IFCENGINETYPE" : return new CSiBKK.IFC.IFC4.IFCEngineType();
						case "IFCEVAPORATIVECOOLER" : return new CSiBKK.IFC.IFC4.IFCEvaporativeCooler();
						case "IFCEVAPORATIVECOOLERTYPE" : return new CSiBKK.IFC.IFC4.IFCEvaporativeCoolerType();
						case "IFCEVAPORATOR" : return new CSiBKK.IFC.IFC4.IFCEvaporator();
						case "IFCEVAPORATORTYPE" : return new CSiBKK.IFC.IFC4.IFCEvaporatorType();
						case "IFCEVENT" : return new CSiBKK.IFC.IFC4.IFCEvent();
						case "IFCEVENTTIME" : return new CSiBKK.IFC.IFC4.IFCEventTime();
						case "IFCEVENTTYPE" : return new CSiBKK.IFC.IFC4.IFCEventType();
						case "IFCEXTERNALREFERENCERELATIONSHIP" : return new CSiBKK.IFC.IFC4.IFCExternalReferenceRelationship();
						case "IFCEXTERNALSPATIALELEMENT" : return new CSiBKK.IFC.IFC4.IFCExternalSpatialElement();
						case "IFCEXTERNALLYDEFINEDHATCHSTYLE" : return new CSiBKK.IFC.IFC4.IFCExternallyDefinedHatchStyle();
						case "IFCEXTERNALLYDEFINEDSURFACESTYLE" : return new CSiBKK.IFC.IFC4.IFCExternallyDefinedSurfaceStyle();
						case "IFCEXTERNALLYDEFINEDTEXTFONT" : return new CSiBKK.IFC.IFC4.IFCExternallyDefinedTextFont();
						case "IFCEXTRUDEDAREASOLID" : return new CSiBKK.IFC.IFC4.IFCExtrudedAreaSolid();
						case "IFCEXTRUDEDAREASOLIDTAPERED" : return new CSiBKK.IFC.IFC4.IFCExtrudedAreaSolidTapered();
						case "IFCFACE" : return new CSiBKK.IFC.IFC4.IFCFace();
						case "IFCFACEBASEDSURFACEMODEL" : return new CSiBKK.IFC.IFC4.IFCFaceBasedSurfaceModel();
						case "IFCFACEBOUND" : return new CSiBKK.IFC.IFC4.IFCFaceBound();
						case "IFCFACEOUTERBOUND" : return new CSiBKK.IFC.IFC4.IFCFaceOuterBound();
						case "IFCFACESURFACE" : return new CSiBKK.IFC.IFC4.IFCFaceSurface();
						case "IFCFACETEDBREP" : return new CSiBKK.IFC.IFC4.IFCFacetedBrep();
						case "IFCFACETEDBREPWITHVOIDS" : return new CSiBKK.IFC.IFC4.IFCFacetedBrepWithVoids();
						case "IFCFAILURECONNECTIONCONDITION" : return new CSiBKK.IFC.IFC4.IFCFailureConnectionCondition();
						case "IFCFAN" : return new CSiBKK.IFC.IFC4.IFCFan();
						case "IFCFANTYPE" : return new CSiBKK.IFC.IFC4.IFCFanType();
						case "IFCFASTENER" : return new CSiBKK.IFC.IFC4.IFCFastener();
						case "IFCFASTENERTYPE" : return new CSiBKK.IFC.IFC4.IFCFastenerType();
						case "IFCFILLAREASTYLE" : return new CSiBKK.IFC.IFC4.IFCFillAreaStyle();
						case "IFCFILLAREASTYLEHATCHING" : return new CSiBKK.IFC.IFC4.IFCFillAreaStyleHatching();
						case "IFCFILLAREASTYLETILES" : return new CSiBKK.IFC.IFC4.IFCFillAreaStyleTiles();
						case "IFCFILTER" : return new CSiBKK.IFC.IFC4.IFCFilter();
						case "IFCFILTERTYPE" : return new CSiBKK.IFC.IFC4.IFCFilterType();
						case "IFCFIRESUPPRESSIONTERMINAL" : return new CSiBKK.IFC.IFC4.IFCFireSuppressionTerminal();
						case "IFCFIRESUPPRESSIONTERMINALTYPE" : return new CSiBKK.IFC.IFC4.IFCFireSuppressionTerminalType();
						case "IFCFIXEDREFERENCESWEPTAREASOLID" : return new CSiBKK.IFC.IFC4.IFCFixedReferenceSweptAreaSolid();
						case "IFCFLOWCONTROLLER" : return new CSiBKK.IFC.IFC4.IFCFlowController();
						case "IFCFLOWFITTING" : return new CSiBKK.IFC.IFC4.IFCFlowFitting();
						case "IFCFLOWINSTRUMENT" : return new CSiBKK.IFC.IFC4.IFCFlowInstrument();
						case "IFCFLOWINSTRUMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCFlowInstrumentType();
						case "IFCFLOWMETER" : return new CSiBKK.IFC.IFC4.IFCFlowMeter();
						case "IFCFLOWMETERTYPE" : return new CSiBKK.IFC.IFC4.IFCFlowMeterType();
						case "IFCFLOWMOVINGDEVICE" : return new CSiBKK.IFC.IFC4.IFCFlowMovingDevice();
						case "IFCFLOWSEGMENT" : return new CSiBKK.IFC.IFC4.IFCFlowSegment();
						case "IFCFLOWSTORAGEDEVICE" : return new CSiBKK.IFC.IFC4.IFCFlowStorageDevice();
						case "IFCFLOWTERMINAL" : return new CSiBKK.IFC.IFC4.IFCFlowTerminal();
						case "IFCFLOWTREATMENTDEVICE" : return new CSiBKK.IFC.IFC4.IFCFlowTreatmentDevice();
						case "IFCFOOTING" : return new CSiBKK.IFC.IFC4.IFCFooting();
						case "IFCFOOTINGTYPE" : return new CSiBKK.IFC.IFC4.IFCFootingType();
						case "IFCFURNISHINGELEMENT" : return new CSiBKK.IFC.IFC4.IFCFurnishingElement();
						case "IFCFURNISHINGELEMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCFurnishingElementType();
						case "IFCFURNITURE" : return new CSiBKK.IFC.IFC4.IFCFurniture();
						case "IFCFURNITURETYPE" : return new CSiBKK.IFC.IFC4.IFCFurnitureType();
						case "IFCGEOGRAPHICELEMENT" : return new CSiBKK.IFC.IFC4.IFCGeographicElement();
						case "IFCGEOGRAPHICELEMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCGeographicElementType();
						case "IFCGEOMETRICCURVESET" : return new CSiBKK.IFC.IFC4.IFCGeometricCurveSet();
						case "IFCGEOMETRICREPRESENTATIONCONTEXT" : return new CSiBKK.IFC.IFC4.IFCGeometricRepresentationContext();
						case "IFCGEOMETRICREPRESENTATIONSUBCONTEXT" : return new CSiBKK.IFC.IFC4.IFCGeometricRepresentationSubContext();
						case "IFCGEOMETRICSET" : return new CSiBKK.IFC.IFC4.IFCGeometricSet();
						case "IFCGRID" : return new CSiBKK.IFC.IFC4.IFCGrid();
						case "IFCGRIDAXIS" : return new CSiBKK.IFC.IFC4.IFCGridAxis();
						case "IFCGRIDPLACEMENT" : return new CSiBKK.IFC.IFC4.IFCGridPlacement();
						case "IFCGROUP" : return new CSiBKK.IFC.IFC4.IFCGroup();
						case "IFCHALFSPACESOLID" : return new CSiBKK.IFC.IFC4.IFCHalfSpaceSolid();
						case "IFCHEATEXCHANGER" : return new CSiBKK.IFC.IFC4.IFCHeatExchanger();
						case "IFCHEATEXCHANGERTYPE" : return new CSiBKK.IFC.IFC4.IFCHeatExchangerType();
						case "IFCHUMIDIFIER" : return new CSiBKK.IFC.IFC4.IFCHumidifier();
						case "IFCHUMIDIFIERTYPE" : return new CSiBKK.IFC.IFC4.IFCHumidifierType();
						case "IFCISHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCIShapeProfileDef();
						case "IFCIMAGETEXTURE" : return new CSiBKK.IFC.IFC4.IFCImageTexture();
						case "IFCINDEXEDCOLOURMAP" : return new CSiBKK.IFC.IFC4.IFCIndexedColourMap();
						case "IFCINDEXEDPOLYCURVE" : return new CSiBKK.IFC.IFC4.IFCIndexedPolyCurve();
						case "IFCINDEXEDPOLYGONALFACE" : return new CSiBKK.IFC.IFC4.IFCIndexedPolygonalFace();
						case "IFCINDEXEDPOLYGONALFACEWITHVOIDS" : return new CSiBKK.IFC.IFC4.IFCIndexedPolygonalFaceWithVoids();
						case "IFCINDEXEDTRIANGLETEXTUREMAP" : return new CSiBKK.IFC.IFC4.IFCIndexedTriangleTextureMap();
						case "IFCINTERCEPTOR" : return new CSiBKK.IFC.IFC4.IFCInterceptor();
						case "IFCINTERCEPTORTYPE" : return new CSiBKK.IFC.IFC4.IFCInterceptorType();
						case "IFCINTERSECTIONCURVE" : return new CSiBKK.IFC.IFC4.IFCIntersectionCurve();
						case "IFCINVENTORY" : return new CSiBKK.IFC.IFC4.IFCInventory();
						case "IFCIRREGULARTIMESERIES" : return new CSiBKK.IFC.IFC4.IFCIrregularTimeSeries();
						case "IFCIRREGULARTIMESERIESVALUE" : return new CSiBKK.IFC.IFC4.IFCIrregularTimeSeriesValue();
						case "IFCJUNCTIONBOX" : return new CSiBKK.IFC.IFC4.IFCJunctionBox();
						case "IFCJUNCTIONBOXTYPE" : return new CSiBKK.IFC.IFC4.IFCJunctionBoxType();
						case "IFCLSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCLShapeProfileDef();
						case "IFCLABORRESOURCE" : return new CSiBKK.IFC.IFC4.IFCLaborResource();
						case "IFCLABORRESOURCETYPE" : return new CSiBKK.IFC.IFC4.IFCLaborResourceType();
						case "IFCLAGTIME" : return new CSiBKK.IFC.IFC4.IFCLagTime();
						case "IFCLAMP" : return new CSiBKK.IFC.IFC4.IFCLamp();
						case "IFCLAMPTYPE" : return new CSiBKK.IFC.IFC4.IFCLampType();
						case "IFCLIBRARYINFORMATION" : return new CSiBKK.IFC.IFC4.IFCLibraryInformation();
						case "IFCLIBRARYREFERENCE" : return new CSiBKK.IFC.IFC4.IFCLibraryReference();
						case "IFCLIGHTDISTRIBUTIONDATA" : return new CSiBKK.IFC.IFC4.IFCLightDistributionData();
						case "IFCLIGHTFIXTURE" : return new CSiBKK.IFC.IFC4.IFCLightFixture();
						case "IFCLIGHTFIXTURETYPE" : return new CSiBKK.IFC.IFC4.IFCLightFixtureType();
						case "IFCLIGHTINTENSITYDISTRIBUTION" : return new CSiBKK.IFC.IFC4.IFCLightIntensityDistribution();
						case "IFCLIGHTSOURCEAMBIENT" : return new CSiBKK.IFC.IFC4.IFCLightSourceAmbient();
						case "IFCLIGHTSOURCEDIRECTIONAL" : return new CSiBKK.IFC.IFC4.IFCLightSourceDirectional();
						case "IFCLIGHTSOURCEGONIOMETRIC" : return new CSiBKK.IFC.IFC4.IFCLightSourceGoniometric();
						case "IFCLIGHTSOURCEPOSITIONAL" : return new CSiBKK.IFC.IFC4.IFCLightSourcePositional();
						case "IFCLIGHTSOURCESPOT" : return new CSiBKK.IFC.IFC4.IFCLightSourceSpot();
						case "IFCLINE" : return new CSiBKK.IFC.IFC4.IFCLine();
						case "IFCLOCALPLACEMENT" : return new CSiBKK.IFC.IFC4.IFCLocalPlacement();
						case "IFCLOOP" : return new CSiBKK.IFC.IFC4.IFCLoop();
						case "IFCMAPCONVERSION" : return new CSiBKK.IFC.IFC4.IFCMapConversion();
						case "IFCMAPPEDITEM" : return new CSiBKK.IFC.IFC4.IFCMappedItem();
						case "IFCMATERIAL" : return new CSiBKK.IFC.IFC4.IFCMaterial();
						case "IFCMATERIALCLASSIFICATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4.IFCMaterialClassificationRelationship();
						case "IFCMATERIALCONSTITUENT" : return new CSiBKK.IFC.IFC4.IFCMaterialConstituent();
						case "IFCMATERIALCONSTITUENTSET" : return new CSiBKK.IFC.IFC4.IFCMaterialConstituentSet();
						case "IFCMATERIALDEFINITIONREPRESENTATION" : return new CSiBKK.IFC.IFC4.IFCMaterialDefinitionRepresentation();
						case "IFCMATERIALLAYER" : return new CSiBKK.IFC.IFC4.IFCMaterialLayer();
						case "IFCMATERIALLAYERSET" : return new CSiBKK.IFC.IFC4.IFCMaterialLayerSet();
						case "IFCMATERIALLAYERSETUSAGE" : return new CSiBKK.IFC.IFC4.IFCMaterialLayerSetUsage();
						case "IFCMATERIALLAYERWITHOFFSETS" : return new CSiBKK.IFC.IFC4.IFCMaterialLayerWithOffsets();
						case "IFCMATERIALLIST" : return new CSiBKK.IFC.IFC4.IFCMaterialList();
						case "IFCMATERIALPROFILE" : return new CSiBKK.IFC.IFC4.IFCMaterialProfile();
						case "IFCMATERIALPROFILESET" : return new CSiBKK.IFC.IFC4.IFCMaterialProfileSet();
						case "IFCMATERIALPROFILESETUSAGE" : return new CSiBKK.IFC.IFC4.IFCMaterialProfileSetUsage();
						case "IFCMATERIALPROFILESETUSAGETAPERING" : return new CSiBKK.IFC.IFC4.IFCMaterialProfileSetUsageTapering();
						case "IFCMATERIALPROFILEWITHOFFSETS" : return new CSiBKK.IFC.IFC4.IFCMaterialProfileWithOffsets();
						case "IFCMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCMaterialProperties();
						case "IFCMATERIALRELATIONSHIP" : return new CSiBKK.IFC.IFC4.IFCMaterialRelationship();
						case "IFCMEASUREWITHUNIT" : return new CSiBKK.IFC.IFC4.IFCMeasureWithUnit();
						case "IFCMECHANICALFASTENER" : return new CSiBKK.IFC.IFC4.IFCMechanicalFastener();
						case "IFCMECHANICALFASTENERTYPE" : return new CSiBKK.IFC.IFC4.IFCMechanicalFastenerType();
						case "IFCMEDICALDEVICE" : return new CSiBKK.IFC.IFC4.IFCMedicalDevice();
						case "IFCMEDICALDEVICETYPE" : return new CSiBKK.IFC.IFC4.IFCMedicalDeviceType();
						case "IFCMEMBER" : return new CSiBKK.IFC.IFC4.IFCMember();
						case "IFCMEMBERSTANDARDCASE" : return new CSiBKK.IFC.IFC4.IFCMemberStandardCase();
						case "IFCMEMBERTYPE" : return new CSiBKK.IFC.IFC4.IFCMemberType();
						case "IFCMETRIC" : return new CSiBKK.IFC.IFC4.IFCMetric();
						case "IFCMIRROREDPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCMirroredProfileDef();
						case "IFCMONETARYUNIT" : return new CSiBKK.IFC.IFC4.IFCMonetaryUnit();
						case "IFCMOTORCONNECTION" : return new CSiBKK.IFC.IFC4.IFCMotorConnection();
						case "IFCMOTORCONNECTIONTYPE" : return new CSiBKK.IFC.IFC4.IFCMotorConnectionType();
						case "IFCOBJECTIVE" : return new CSiBKK.IFC.IFC4.IFCObjective();
						case "IFCOCCUPANT" : return new CSiBKK.IFC.IFC4.IFCOccupant();
						case "IFCOFFSETCURVE2D" : return new CSiBKK.IFC.IFC4.IFCOffsetCurve2D();
						case "IFCOFFSETCURVE3D" : return new CSiBKK.IFC.IFC4.IFCOffsetCurve3D();
						case "IFCOPENSHELL" : return new CSiBKK.IFC.IFC4.IFCOpenShell();
						case "IFCOPENINGELEMENT" : return new CSiBKK.IFC.IFC4.IFCOpeningElement();
						case "IFCOPENINGSTANDARDCASE" : return new CSiBKK.IFC.IFC4.IFCOpeningStandardCase();
						case "IFCORGANIZATION" : return new CSiBKK.IFC.IFC4.IFCOrganization();
						case "IFCORGANIZATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4.IFCOrganizationRelationship();
						case "IFCORIENTEDEDGE" : return new CSiBKK.IFC.IFC4.IFCOrientedEdge();
						case "IFCOUTERBOUNDARYCURVE" : return new CSiBKK.IFC.IFC4.IFCOuterBoundaryCurve();
						case "IFCOUTLET" : return new CSiBKK.IFC.IFC4.IFCOutlet();
						case "IFCOUTLETTYPE" : return new CSiBKK.IFC.IFC4.IFCOutletType();
						case "IFCOWNERHISTORY" : return new CSiBKK.IFC.IFC4.IFCOwnerHistory();
						case "IFCPATH" : return new CSiBKK.IFC.IFC4.IFCPath();
						case "IFCPCURVE" : return new CSiBKK.IFC.IFC4.IFCPcurve();
						case "IFCPERFORMANCEHISTORY" : return new CSiBKK.IFC.IFC4.IFCPerformanceHistory();
						case "IFCPERMEABLECOVERINGPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCPermeableCoveringProperties();
						case "IFCPERMIT" : return new CSiBKK.IFC.IFC4.IFCPermit();
						case "IFCPERSON" : return new CSiBKK.IFC.IFC4.IFCPerson();
						case "IFCPERSONANDORGANIZATION" : return new CSiBKK.IFC.IFC4.IFCPersonAndOrganization();
						case "IFCPHYSICALCOMPLEXQUANTITY" : return new CSiBKK.IFC.IFC4.IFCPhysicalComplexQuantity();
						case "IFCPILE" : return new CSiBKK.IFC.IFC4.IFCPile();
						case "IFCPILETYPE" : return new CSiBKK.IFC.IFC4.IFCPileType();
						case "IFCPIPEFITTING" : return new CSiBKK.IFC.IFC4.IFCPipeFitting();
						case "IFCPIPEFITTINGTYPE" : return new CSiBKK.IFC.IFC4.IFCPipeFittingType();
						case "IFCPIPESEGMENT" : return new CSiBKK.IFC.IFC4.IFCPipeSegment();
						case "IFCPIPESEGMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCPipeSegmentType();
						case "IFCPIXELTEXTURE" : return new CSiBKK.IFC.IFC4.IFCPixelTexture();
						case "IFCPLANARBOX" : return new CSiBKK.IFC.IFC4.IFCPlanarBox();
						case "IFCPLANAREXTENT" : return new CSiBKK.IFC.IFC4.IFCPlanarExtent();
						case "IFCPLANE" : return new CSiBKK.IFC.IFC4.IFCPlane();
						case "IFCPLATE" : return new CSiBKK.IFC.IFC4.IFCPlate();
						case "IFCPLATESTANDARDCASE" : return new CSiBKK.IFC.IFC4.IFCPlateStandardCase();
						case "IFCPLATETYPE" : return new CSiBKK.IFC.IFC4.IFCPlateType();
						case "IFCPOINTONCURVE" : return new CSiBKK.IFC.IFC4.IFCPointOnCurve();
						case "IFCPOINTONSURFACE" : return new CSiBKK.IFC.IFC4.IFCPointOnSurface();
						case "IFCPOLYLOOP" : return new CSiBKK.IFC.IFC4.IFCPolyLoop();
						case "IFCPOLYGONALBOUNDEDHALFSPACE" : return new CSiBKK.IFC.IFC4.IFCPolygonalBoundedHalfSpace();
						case "IFCPOLYGONALFACESET" : return new CSiBKK.IFC.IFC4.IFCPolygonalFaceSet();
						case "IFCPOLYLINE" : return new CSiBKK.IFC.IFC4.IFCPolyline();
						case "IFCPOSTALADDRESS" : return new CSiBKK.IFC.IFC4.IFCPostalAddress();
						case "IFCPRESENTATIONLAYERASSIGNMENT" : return new CSiBKK.IFC.IFC4.IFCPresentationLayerAssignment();
						case "IFCPRESENTATIONLAYERWITHSTYLE" : return new CSiBKK.IFC.IFC4.IFCPresentationLayerWithStyle();
						case "IFCPRESENTATIONSTYLEASSIGNMENT" : return new CSiBKK.IFC.IFC4.IFCPresentationStyleAssignment();
						case "IFCPROCEDURE" : return new CSiBKK.IFC.IFC4.IFCProcedure();
						case "IFCPROCEDURETYPE" : return new CSiBKK.IFC.IFC4.IFCProcedureType();
						case "IFCPRODUCTDEFINITIONSHAPE" : return new CSiBKK.IFC.IFC4.IFCProductDefinitionShape();
						case "IFCPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCProfileDef();
						case "IFCPROFILEPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCProfileProperties();
						case "IFCPROJECT" : return new CSiBKK.IFC.IFC4.IFCProject();
						case "IFCPROJECTLIBRARY" : return new CSiBKK.IFC.IFC4.IFCProjectLibrary();
						case "IFCPROJECTORDER" : return new CSiBKK.IFC.IFC4.IFCProjectOrder();
						case "IFCPROJECTEDCRS" : return new CSiBKK.IFC.IFC4.IFCProjectedCRS();
						case "IFCPROJECTIONELEMENT" : return new CSiBKK.IFC.IFC4.IFCProjectionElement();
						case "IFCPROPERTYBOUNDEDVALUE" : return new CSiBKK.IFC.IFC4.IFCPropertyBoundedValue();
						case "IFCPROPERTYDEPENDENCYRELATIONSHIP" : return new CSiBKK.IFC.IFC4.IFCPropertyDependencyRelationship();
						case "IFCPROPERTYENUMERATEDVALUE" : return new CSiBKK.IFC.IFC4.IFCPropertyEnumeratedValue();
						case "IFCPROPERTYENUMERATION" : return new CSiBKK.IFC.IFC4.IFCPropertyEnumeration();
						case "IFCPROPERTYLISTVALUE" : return new CSiBKK.IFC.IFC4.IFCPropertyListValue();
						case "IFCPROPERTYREFERENCEVALUE" : return new CSiBKK.IFC.IFC4.IFCPropertyReferenceValue();
						case "IFCPROPERTYSET" : return new CSiBKK.IFC.IFC4.IFCPropertySet();
						case "IFCPROPERTYSETTEMPLATE" : return new CSiBKK.IFC.IFC4.IFCPropertySetTemplate();
						case "IFCPROPERTYSINGLEVALUE" : return new CSiBKK.IFC.IFC4.IFCPropertySingleValue();
						case "IFCPROPERTYTABLEVALUE" : return new CSiBKK.IFC.IFC4.IFCPropertyTableValue();
						case "IFCPROTECTIVEDEVICE" : return new CSiBKK.IFC.IFC4.IFCProtectiveDevice();
						case "IFCPROTECTIVEDEVICETRIPPINGUNIT" : return new CSiBKK.IFC.IFC4.IFCProtectiveDeviceTrippingUnit();
						case "IFCPROTECTIVEDEVICETRIPPINGUNITTYPE" : return new CSiBKK.IFC.IFC4.IFCProtectiveDeviceTrippingUnitType();
						case "IFCPROTECTIVEDEVICETYPE" : return new CSiBKK.IFC.IFC4.IFCProtectiveDeviceType();
						case "IFCPROXY" : return new CSiBKK.IFC.IFC4.IFCProxy();
						case "IFCPUMP" : return new CSiBKK.IFC.IFC4.IFCPump();
						case "IFCPUMPTYPE" : return new CSiBKK.IFC.IFC4.IFCPumpType();
						case "IFCQUANTITYAREA" : return new CSiBKK.IFC.IFC4.IFCQuantityArea();
						case "IFCQUANTITYCOUNT" : return new CSiBKK.IFC.IFC4.IFCQuantityCount();
						case "IFCQUANTITYLENGTH" : return new CSiBKK.IFC.IFC4.IFCQuantityLength();
						case "IFCQUANTITYTIME" : return new CSiBKK.IFC.IFC4.IFCQuantityTime();
						case "IFCQUANTITYVOLUME" : return new CSiBKK.IFC.IFC4.IFCQuantityVolume();
						case "IFCQUANTITYWEIGHT" : return new CSiBKK.IFC.IFC4.IFCQuantityWeight();
						case "IFCRAILING" : return new CSiBKK.IFC.IFC4.IFCRailing();
						case "IFCRAILINGTYPE" : return new CSiBKK.IFC.IFC4.IFCRailingType();
						case "IFCRAMP" : return new CSiBKK.IFC.IFC4.IFCRamp();
						case "IFCRAMPFLIGHT" : return new CSiBKK.IFC.IFC4.IFCRampFlight();
						case "IFCRAMPFLIGHTTYPE" : return new CSiBKK.IFC.IFC4.IFCRampFlightType();
						case "IFCRAMPTYPE" : return new CSiBKK.IFC.IFC4.IFCRampType();
						case "IFCRATIONALBSPLINECURVEWITHKNOTS" : return new CSiBKK.IFC.IFC4.IFCRationalBSplineCurveWithKnots();
						case "IFCRATIONALBSPLINESURFACEWITHKNOTS" : return new CSiBKK.IFC.IFC4.IFCRationalBSplineSurfaceWithKnots();
						case "IFCRECTANGLEHOLLOWPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCRectangleHollowProfileDef();
						case "IFCRECTANGLEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCRectangleProfileDef();
						case "IFCRECTANGULARPYRAMID" : return new CSiBKK.IFC.IFC4.IFCRectangularPyramid();
						case "IFCRECTANGULARTRIMMEDSURFACE" : return new CSiBKK.IFC.IFC4.IFCRectangularTrimmedSurface();
						case "IFCRECURRENCEPATTERN" : return new CSiBKK.IFC.IFC4.IFCRecurrencePattern();
						case "IFCREFERENCE" : return new CSiBKK.IFC.IFC4.IFCReference();
						case "IFCREGULARTIMESERIES" : return new CSiBKK.IFC.IFC4.IFCRegularTimeSeries();
						case "IFCREINFORCEMENTBARPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCReinforcementBarProperties();
						case "IFCREINFORCEMENTDEFINITIONPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCReinforcementDefinitionProperties();
						case "IFCREINFORCINGBAR" : return new CSiBKK.IFC.IFC4.IFCReinforcingBar();
						case "IFCREINFORCINGBARTYPE" : return new CSiBKK.IFC.IFC4.IFCReinforcingBarType();
						case "IFCREINFORCINGMESH" : return new CSiBKK.IFC.IFC4.IFCReinforcingMesh();
						case "IFCREINFORCINGMESHTYPE" : return new CSiBKK.IFC.IFC4.IFCReinforcingMeshType();
						case "IFCRELAGGREGATES" : return new CSiBKK.IFC.IFC4.IFCRelAggregates();
						case "IFCRELASSIGNSTOACTOR" : return new CSiBKK.IFC.IFC4.IFCRelAssignsToActor();
						case "IFCRELASSIGNSTOCONTROL" : return new CSiBKK.IFC.IFC4.IFCRelAssignsToControl();
						case "IFCRELASSIGNSTOGROUP" : return new CSiBKK.IFC.IFC4.IFCRelAssignsToGroup();
						case "IFCRELASSIGNSTOGROUPBYFACTOR" : return new CSiBKK.IFC.IFC4.IFCRelAssignsToGroupByFactor();
						case "IFCRELASSIGNSTOPROCESS" : return new CSiBKK.IFC.IFC4.IFCRelAssignsToProcess();
						case "IFCRELASSIGNSTOPRODUCT" : return new CSiBKK.IFC.IFC4.IFCRelAssignsToProduct();
						case "IFCRELASSIGNSTORESOURCE" : return new CSiBKK.IFC.IFC4.IFCRelAssignsToResource();
						case "IFCRELASSOCIATESAPPROVAL" : return new CSiBKK.IFC.IFC4.IFCRelAssociatesApproval();
						case "IFCRELASSOCIATESCLASSIFICATION" : return new CSiBKK.IFC.IFC4.IFCRelAssociatesClassification();
						case "IFCRELASSOCIATESCONSTRAINT" : return new CSiBKK.IFC.IFC4.IFCRelAssociatesConstraint();
						case "IFCRELASSOCIATESDOCUMENT" : return new CSiBKK.IFC.IFC4.IFCRelAssociatesDocument();
						case "IFCRELASSOCIATESLIBRARY" : return new CSiBKK.IFC.IFC4.IFCRelAssociatesLibrary();
						case "IFCRELASSOCIATESMATERIAL" : return new CSiBKK.IFC.IFC4.IFCRelAssociatesMaterial();
						case "IFCRELCONNECTSELEMENTS" : return new CSiBKK.IFC.IFC4.IFCRelConnectsElements();
						case "IFCRELCONNECTSPATHELEMENTS" : return new CSiBKK.IFC.IFC4.IFCRelConnectsPathElements();
						case "IFCRELCONNECTSPORTTOELEMENT" : return new CSiBKK.IFC.IFC4.IFCRelConnectsPortToElement();
						case "IFCRELCONNECTSPORTS" : return new CSiBKK.IFC.IFC4.IFCRelConnectsPorts();
						case "IFCRELCONNECTSSTRUCTURALACTIVITY" : return new CSiBKK.IFC.IFC4.IFCRelConnectsStructuralActivity();
						case "IFCRELCONNECTSSTRUCTURALMEMBER" : return new CSiBKK.IFC.IFC4.IFCRelConnectsStructuralMember();
						case "IFCRELCONNECTSWITHECCENTRICITY" : return new CSiBKK.IFC.IFC4.IFCRelConnectsWithEccentricity();
						case "IFCRELCONNECTSWITHREALIZINGELEMENTS" : return new CSiBKK.IFC.IFC4.IFCRelConnectsWithRealizingElements();
						case "IFCRELCONTAINEDINSPATIALSTRUCTURE" : return new CSiBKK.IFC.IFC4.IFCRelContainedInSpatialStructure();
						case "IFCRELCOVERSBLDGELEMENTS" : return new CSiBKK.IFC.IFC4.IFCRelCoversBldgElements();
						case "IFCRELCOVERSSPACES" : return new CSiBKK.IFC.IFC4.IFCRelCoversSpaces();
						case "IFCRELDECLARES" : return new CSiBKK.IFC.IFC4.IFCRelDeclares();
						case "IFCRELDEFINESBYOBJECT" : return new CSiBKK.IFC.IFC4.IFCRelDefinesByObject();
						case "IFCRELDEFINESBYPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCRelDefinesByProperties();
						case "IFCRELDEFINESBYTEMPLATE" : return new CSiBKK.IFC.IFC4.IFCRelDefinesByTemplate();
						case "IFCRELDEFINESBYTYPE" : return new CSiBKK.IFC.IFC4.IFCRelDefinesByType();
						case "IFCRELFILLSELEMENT" : return new CSiBKK.IFC.IFC4.IFCRelFillsElement();
						case "IFCRELFLOWCONTROLELEMENTS" : return new CSiBKK.IFC.IFC4.IFCRelFlowControlElements();
						case "IFCRELINTERFERESELEMENTS" : return new CSiBKK.IFC.IFC4.IFCRelInterferesElements();
						case "IFCRELNESTS" : return new CSiBKK.IFC.IFC4.IFCRelNests();
						case "IFCRELPROJECTSELEMENT" : return new CSiBKK.IFC.IFC4.IFCRelProjectsElement();
						case "IFCRELREFERENCEDINSPATIALSTRUCTURE" : return new CSiBKK.IFC.IFC4.IFCRelReferencedInSpatialStructure();
						case "IFCRELSEQUENCE" : return new CSiBKK.IFC.IFC4.IFCRelSequence();
						case "IFCRELSERVICESBUILDINGS" : return new CSiBKK.IFC.IFC4.IFCRelServicesBuildings();
						case "IFCRELSPACEBOUNDARY" : return new CSiBKK.IFC.IFC4.IFCRelSpaceBoundary();
						case "IFCRELSPACEBOUNDARY1STLEVEL" : return new CSiBKK.IFC.IFC4.IFCRelSpaceBoundary1stLevel();
						case "IFCRELSPACEBOUNDARY2NDLEVEL" : return new CSiBKK.IFC.IFC4.IFCRelSpaceBoundary2ndLevel();
						case "IFCRELVOIDSELEMENT" : return new CSiBKK.IFC.IFC4.IFCRelVoidsElement();
						case "IFCREPARAMETRISEDCOMPOSITECURVESEGMENT" : return new CSiBKK.IFC.IFC4.IFCReparametrisedCompositeCurveSegment();
						case "IFCREPRESENTATIONMAP" : return new CSiBKK.IFC.IFC4.IFCRepresentationMap();
						case "IFCRESOURCEAPPROVALRELATIONSHIP" : return new CSiBKK.IFC.IFC4.IFCResourceApprovalRelationship();
						case "IFCRESOURCECONSTRAINTRELATIONSHIP" : return new CSiBKK.IFC.IFC4.IFCResourceConstraintRelationship();
						case "IFCRESOURCETIME" : return new CSiBKK.IFC.IFC4.IFCResourceTime();
						case "IFCREVOLVEDAREASOLID" : return new CSiBKK.IFC.IFC4.IFCRevolvedAreaSolid();
						case "IFCREVOLVEDAREASOLIDTAPERED" : return new CSiBKK.IFC.IFC4.IFCRevolvedAreaSolidTapered();
						case "IFCRIGHTCIRCULARCONE" : return new CSiBKK.IFC.IFC4.IFCRightCircularCone();
						case "IFCRIGHTCIRCULARCYLINDER" : return new CSiBKK.IFC.IFC4.IFCRightCircularCylinder();
						case "IFCROOF" : return new CSiBKK.IFC.IFC4.IFCRoof();
						case "IFCROOFTYPE" : return new CSiBKK.IFC.IFC4.IFCRoofType();
						case "IFCROUNDEDRECTANGLEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCRoundedRectangleProfileDef();
						case "IFCSIUNIT" : return new CSiBKK.IFC.IFC4.IFCSIUnit();
						case "IFCSANITARYTERMINAL" : return new CSiBKK.IFC.IFC4.IFCSanitaryTerminal();
						case "IFCSANITARYTERMINALTYPE" : return new CSiBKK.IFC.IFC4.IFCSanitaryTerminalType();
						case "IFCSEAMCURVE" : return new CSiBKK.IFC.IFC4.IFCSeamCurve();
						case "IFCSECTIONPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCSectionProperties();
						case "IFCSECTIONREINFORCEMENTPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCSectionReinforcementProperties();
						case "IFCSECTIONEDSPINE" : return new CSiBKK.IFC.IFC4.IFCSectionedSpine();
						case "IFCSENSOR" : return new CSiBKK.IFC.IFC4.IFCSensor();
						case "IFCSENSORTYPE" : return new CSiBKK.IFC.IFC4.IFCSensorType();
						case "IFCSHADINGDEVICE" : return new CSiBKK.IFC.IFC4.IFCShadingDevice();
						case "IFCSHADINGDEVICETYPE" : return new CSiBKK.IFC.IFC4.IFCShadingDeviceType();
						case "IFCSHAPEASPECT" : return new CSiBKK.IFC.IFC4.IFCShapeAspect();
						case "IFCSHAPEREPRESENTATION" : return new CSiBKK.IFC.IFC4.IFCShapeRepresentation();
						case "IFCSHELLBASEDSURFACEMODEL" : return new CSiBKK.IFC.IFC4.IFCShellBasedSurfaceModel();
						case "IFCSIMPLEPROPERTYTEMPLATE" : return new CSiBKK.IFC.IFC4.IFCSimplePropertyTemplate();
						case "IFCSITE" : return new CSiBKK.IFC.IFC4.IFCSite();
						case "IFCSLAB" : return new CSiBKK.IFC.IFC4.IFCSlab();
						case "IFCSLABELEMENTEDCASE" : return new CSiBKK.IFC.IFC4.IFCSlabElementedCase();
						case "IFCSLABSTANDARDCASE" : return new CSiBKK.IFC.IFC4.IFCSlabStandardCase();
						case "IFCSLABTYPE" : return new CSiBKK.IFC.IFC4.IFCSlabType();
						case "IFCSLIPPAGECONNECTIONCONDITION" : return new CSiBKK.IFC.IFC4.IFCSlippageConnectionCondition();
						case "IFCSOLARDEVICE" : return new CSiBKK.IFC.IFC4.IFCSolarDevice();
						case "IFCSOLARDEVICETYPE" : return new CSiBKK.IFC.IFC4.IFCSolarDeviceType();
						case "IFCSPACE" : return new CSiBKK.IFC.IFC4.IFCSpace();
						case "IFCSPACEHEATER" : return new CSiBKK.IFC.IFC4.IFCSpaceHeater();
						case "IFCSPACEHEATERTYPE" : return new CSiBKK.IFC.IFC4.IFCSpaceHeaterType();
						case "IFCSPACETYPE" : return new CSiBKK.IFC.IFC4.IFCSpaceType();
						case "IFCSPATIALZONE" : return new CSiBKK.IFC.IFC4.IFCSpatialZone();
						case "IFCSPATIALZONETYPE" : return new CSiBKK.IFC.IFC4.IFCSpatialZoneType();
						case "IFCSPHERE" : return new CSiBKK.IFC.IFC4.IFCSphere();
						case "IFCSPHERICALSURFACE" : return new CSiBKK.IFC.IFC4.IFCSphericalSurface();
						case "IFCSTACKTERMINAL" : return new CSiBKK.IFC.IFC4.IFCStackTerminal();
						case "IFCSTACKTERMINALTYPE" : return new CSiBKK.IFC.IFC4.IFCStackTerminalType();
						case "IFCSTAIR" : return new CSiBKK.IFC.IFC4.IFCStair();
						case "IFCSTAIRFLIGHT" : return new CSiBKK.IFC.IFC4.IFCStairFlight();
						case "IFCSTAIRFLIGHTTYPE" : return new CSiBKK.IFC.IFC4.IFCStairFlightType();
						case "IFCSTAIRTYPE" : return new CSiBKK.IFC.IFC4.IFCStairType();
						case "IFCSTRUCTURALANALYSISMODEL" : return new CSiBKK.IFC.IFC4.IFCStructuralAnalysisModel();
						case "IFCSTRUCTURALCURVEACTION" : return new CSiBKK.IFC.IFC4.IFCStructuralCurveAction();
						case "IFCSTRUCTURALCURVECONNECTION" : return new CSiBKK.IFC.IFC4.IFCStructuralCurveConnection();
						case "IFCSTRUCTURALCURVEMEMBER" : return new CSiBKK.IFC.IFC4.IFCStructuralCurveMember();
						case "IFCSTRUCTURALCURVEMEMBERVARYING" : return new CSiBKK.IFC.IFC4.IFCStructuralCurveMemberVarying();
						case "IFCSTRUCTURALCURVEREACTION" : return new CSiBKK.IFC.IFC4.IFCStructuralCurveReaction();
						case "IFCSTRUCTURALLINEARACTION" : return new CSiBKK.IFC.IFC4.IFCStructuralLinearAction();
						case "IFCSTRUCTURALLOADCASE" : return new CSiBKK.IFC.IFC4.IFCStructuralLoadCase();
						case "IFCSTRUCTURALLOADCONFIGURATION" : return new CSiBKK.IFC.IFC4.IFCStructuralLoadConfiguration();
						case "IFCSTRUCTURALLOADGROUP" : return new CSiBKK.IFC.IFC4.IFCStructuralLoadGroup();
						case "IFCSTRUCTURALLOADLINEARFORCE" : return new CSiBKK.IFC.IFC4.IFCStructuralLoadLinearForce();
						case "IFCSTRUCTURALLOADPLANARFORCE" : return new CSiBKK.IFC.IFC4.IFCStructuralLoadPlanarForce();
						case "IFCSTRUCTURALLOADSINGLEDISPLACEMENT" : return new CSiBKK.IFC.IFC4.IFCStructuralLoadSingleDisplacement();
						case "IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION" : return new CSiBKK.IFC.IFC4.IFCStructuralLoadSingleDisplacementDistortion();
						case "IFCSTRUCTURALLOADSINGLEFORCE" : return new CSiBKK.IFC.IFC4.IFCStructuralLoadSingleForce();
						case "IFCSTRUCTURALLOADSINGLEFORCEWARPING" : return new CSiBKK.IFC.IFC4.IFCStructuralLoadSingleForceWarping();
						case "IFCSTRUCTURALLOADTEMPERATURE" : return new CSiBKK.IFC.IFC4.IFCStructuralLoadTemperature();
						case "IFCSTRUCTURALPLANARACTION" : return new CSiBKK.IFC.IFC4.IFCStructuralPlanarAction();
						case "IFCSTRUCTURALPOINTACTION" : return new CSiBKK.IFC.IFC4.IFCStructuralPointAction();
						case "IFCSTRUCTURALPOINTCONNECTION" : return new CSiBKK.IFC.IFC4.IFCStructuralPointConnection();
						case "IFCSTRUCTURALPOINTREACTION" : return new CSiBKK.IFC.IFC4.IFCStructuralPointReaction();
						case "IFCSTRUCTURALRESULTGROUP" : return new CSiBKK.IFC.IFC4.IFCStructuralResultGroup();
						case "IFCSTRUCTURALSURFACEACTION" : return new CSiBKK.IFC.IFC4.IFCStructuralSurfaceAction();
						case "IFCSTRUCTURALSURFACECONNECTION" : return new CSiBKK.IFC.IFC4.IFCStructuralSurfaceConnection();
						case "IFCSTRUCTURALSURFACEMEMBER" : return new CSiBKK.IFC.IFC4.IFCStructuralSurfaceMember();
						case "IFCSTRUCTURALSURFACEMEMBERVARYING" : return new CSiBKK.IFC.IFC4.IFCStructuralSurfaceMemberVarying();
						case "IFCSTRUCTURALSURFACEREACTION" : return new CSiBKK.IFC.IFC4.IFCStructuralSurfaceReaction();
						case "IFCSTYLEDITEM" : return new CSiBKK.IFC.IFC4.IFCStyledItem();
						case "IFCSTYLEDREPRESENTATION" : return new CSiBKK.IFC.IFC4.IFCStyledRepresentation();
						case "IFCSUBCONTRACTRESOURCE" : return new CSiBKK.IFC.IFC4.IFCSubContractResource();
						case "IFCSUBCONTRACTRESOURCETYPE" : return new CSiBKK.IFC.IFC4.IFCSubContractResourceType();
						case "IFCSUBEDGE" : return new CSiBKK.IFC.IFC4.IFCSubedge();
						case "IFCSURFACECURVE" : return new CSiBKK.IFC.IFC4.IFCSurfaceCurve();
						case "IFCSURFACECURVESWEPTAREASOLID" : return new CSiBKK.IFC.IFC4.IFCSurfaceCurveSweptAreaSolid();
						case "IFCSURFACEFEATURE" : return new CSiBKK.IFC.IFC4.IFCSurfaceFeature();
						case "IFCSURFACEOFLINEAREXTRUSION" : return new CSiBKK.IFC.IFC4.IFCSurfaceOfLinearExtrusion();
						case "IFCSURFACEOFREVOLUTION" : return new CSiBKK.IFC.IFC4.IFCSurfaceOfRevolution();
						case "IFCSURFACEREINFORCEMENTAREA" : return new CSiBKK.IFC.IFC4.IFCSurfaceReinforcementArea();
						case "IFCSURFACESTYLE" : return new CSiBKK.IFC.IFC4.IFCSurfaceStyle();
						case "IFCSURFACESTYLELIGHTING" : return new CSiBKK.IFC.IFC4.IFCSurfaceStyleLighting();
						case "IFCSURFACESTYLEREFRACTION" : return new CSiBKK.IFC.IFC4.IFCSurfaceStyleRefraction();
						case "IFCSURFACESTYLERENDERING" : return new CSiBKK.IFC.IFC4.IFCSurfaceStyleRendering();
						case "IFCSURFACESTYLESHADING" : return new CSiBKK.IFC.IFC4.IFCSurfaceStyleShading();
						case "IFCSURFACESTYLEWITHTEXTURES" : return new CSiBKK.IFC.IFC4.IFCSurfaceStyleWithTextures();
						case "IFCSWEPTDISKSOLID" : return new CSiBKK.IFC.IFC4.IFCSweptDiskSolid();
						case "IFCSWEPTDISKSOLIDPOLYGONAL" : return new CSiBKK.IFC.IFC4.IFCSweptDiskSolidPolygonal();
						case "IFCSWITCHINGDEVICE" : return new CSiBKK.IFC.IFC4.IFCSwitchingDevice();
						case "IFCSWITCHINGDEVICETYPE" : return new CSiBKK.IFC.IFC4.IFCSwitchingDeviceType();
						case "IFCSYSTEM" : return new CSiBKK.IFC.IFC4.IFCSystem();
						case "IFCSYSTEMFURNITUREELEMENT" : return new CSiBKK.IFC.IFC4.IFCSystemFurnitureElement();
						case "IFCSYSTEMFURNITUREELEMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCSystemFurnitureElementType();
						case "IFCTSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCTShapeProfileDef();
						case "IFCTABLE" : return new CSiBKK.IFC.IFC4.IFCTable();
						case "IFCTABLECOLUMN" : return new CSiBKK.IFC.IFC4.IFCTableColumn();
						case "IFCTABLEROW" : return new CSiBKK.IFC.IFC4.IFCTableRow();
						case "IFCTANK" : return new CSiBKK.IFC.IFC4.IFCTank();
						case "IFCTANKTYPE" : return new CSiBKK.IFC.IFC4.IFCTankType();
						case "IFCTASK" : return new CSiBKK.IFC.IFC4.IFCTask();
						case "IFCTASKTIME" : return new CSiBKK.IFC.IFC4.IFCTaskTime();
						case "IFCTASKTIMERECURRING" : return new CSiBKK.IFC.IFC4.IFCTaskTimeRecurring();
						case "IFCTASKTYPE" : return new CSiBKK.IFC.IFC4.IFCTaskType();
						case "IFCTELECOMADDRESS" : return new CSiBKK.IFC.IFC4.IFCTelecomAddress();
						case "IFCTENDON" : return new CSiBKK.IFC.IFC4.IFCTendon();
						case "IFCTENDONANCHOR" : return new CSiBKK.IFC.IFC4.IFCTendonAnchor();
						case "IFCTENDONANCHORTYPE" : return new CSiBKK.IFC.IFC4.IFCTendonAnchorType();
						case "IFCTENDONTYPE" : return new CSiBKK.IFC.IFC4.IFCTendonType();
						case "IFCTEXTLITERAL" : return new CSiBKK.IFC.IFC4.IFCTextLiteral();
						case "IFCTEXTLITERALWITHEXTENT" : return new CSiBKK.IFC.IFC4.IFCTextLiteralWithExtent();
						case "IFCTEXTSTYLE" : return new CSiBKK.IFC.IFC4.IFCTextStyle();
						case "IFCTEXTSTYLEFONTMODEL" : return new CSiBKK.IFC.IFC4.IFCTextStyleFontModel();
						case "IFCTEXTSTYLEFORDEFINEDFONT" : return new CSiBKK.IFC.IFC4.IFCTextStyleForDefinedFont();
						case "IFCTEXTSTYLETEXTMODEL" : return new CSiBKK.IFC.IFC4.IFCTextStyleTextModel();
						case "IFCTEXTURECOORDINATEGENERATOR" : return new CSiBKK.IFC.IFC4.IFCTextureCoordinateGenerator();
						case "IFCTEXTUREMAP" : return new CSiBKK.IFC.IFC4.IFCTextureMap();
						case "IFCTEXTUREVERTEX" : return new CSiBKK.IFC.IFC4.IFCTextureVertex();
						case "IFCTEXTUREVERTEXLIST" : return new CSiBKK.IFC.IFC4.IFCTextureVertexList();
						case "IFCTIMEPERIOD" : return new CSiBKK.IFC.IFC4.IFCTimePeriod();
						case "IFCTIMESERIESVALUE" : return new CSiBKK.IFC.IFC4.IFCTimeSeriesValue();
						case "IFCTOPOLOGYREPRESENTATION" : return new CSiBKK.IFC.IFC4.IFCTopologyRepresentation();
						case "IFCTOROIDALSURFACE" : return new CSiBKK.IFC.IFC4.IFCToroidalSurface();
						case "IFCTRANSFORMER" : return new CSiBKK.IFC.IFC4.IFCTransformer();
						case "IFCTRANSFORMERTYPE" : return new CSiBKK.IFC.IFC4.IFCTransformerType();
						case "IFCTRANSPORTELEMENT" : return new CSiBKK.IFC.IFC4.IFCTransportElement();
						case "IFCTRANSPORTELEMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCTransportElementType();
						case "IFCTRAPEZIUMPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCTrapeziumProfileDef();
						case "IFCTRIANGULATEDFACESET" : return new CSiBKK.IFC.IFC4.IFCTriangulatedFaceSet();
						case "IFCTRIMMEDCURVE" : return new CSiBKK.IFC.IFC4.IFCTrimmedCurve();
						case "IFCTUBEBUNDLE" : return new CSiBKK.IFC.IFC4.IFCTubeBundle();
						case "IFCTUBEBUNDLETYPE" : return new CSiBKK.IFC.IFC4.IFCTubeBundleType();
						case "IFCTYPEOBJECT" : return new CSiBKK.IFC.IFC4.IFCTypeObject();
						case "IFCTYPEPRODUCT" : return new CSiBKK.IFC.IFC4.IFCTypeProduct();
						case "IFCUSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCUShapeProfileDef();
						case "IFCUNITASSIGNMENT" : return new CSiBKK.IFC.IFC4.IFCUnitAssignment();
						case "IFCUNITARYCONTROLELEMENT" : return new CSiBKK.IFC.IFC4.IFCUnitaryControlElement();
						case "IFCUNITARYCONTROLELEMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCUnitaryControlElementType();
						case "IFCUNITARYEQUIPMENT" : return new CSiBKK.IFC.IFC4.IFCUnitaryEquipment();
						case "IFCUNITARYEQUIPMENTTYPE" : return new CSiBKK.IFC.IFC4.IFCUnitaryEquipmentType();
						case "IFCVALVE" : return new CSiBKK.IFC.IFC4.IFCValve();
						case "IFCVALVETYPE" : return new CSiBKK.IFC.IFC4.IFCValveType();
						case "IFCVECTOR" : return new CSiBKK.IFC.IFC4.IFCVector();
						case "IFCVERTEX" : return new CSiBKK.IFC.IFC4.IFCVertex();
						case "IFCVERTEXLOOP" : return new CSiBKK.IFC.IFC4.IFCVertexLoop();
						case "IFCVERTEXPOINT" : return new CSiBKK.IFC.IFC4.IFCVertexPoint();
						case "IFCVIBRATIONISOLATOR" : return new CSiBKK.IFC.IFC4.IFCVibrationIsolator();
						case "IFCVIBRATIONISOLATORTYPE" : return new CSiBKK.IFC.IFC4.IFCVibrationIsolatorType();
						case "IFCVIRTUALELEMENT" : return new CSiBKK.IFC.IFC4.IFCVirtualElement();
						case "IFCVIRTUALGRIDINTERSECTION" : return new CSiBKK.IFC.IFC4.IFCVirtualGridIntersection();
						case "IFCVOIDINGFEATURE" : return new CSiBKK.IFC.IFC4.IFCVoidingFeature();
						case "IFCWALL" : return new CSiBKK.IFC.IFC4.IFCWall();
						case "IFCWALLELEMENTEDCASE" : return new CSiBKK.IFC.IFC4.IFCWallElementedCase();
						case "IFCWALLSTANDARDCASE" : return new CSiBKK.IFC.IFC4.IFCWallStandardCase();
						case "IFCWALLTYPE" : return new CSiBKK.IFC.IFC4.IFCWallType();
						case "IFCWASTETERMINAL" : return new CSiBKK.IFC.IFC4.IFCWasteTerminal();
						case "IFCWASTETERMINALTYPE" : return new CSiBKK.IFC.IFC4.IFCWasteTerminalType();
						case "IFCWINDOW" : return new CSiBKK.IFC.IFC4.IFCWindow();
						case "IFCWINDOWLININGPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCWindowLiningProperties();
						case "IFCWINDOWPANELPROPERTIES" : return new CSiBKK.IFC.IFC4.IFCWindowPanelProperties();
						case "IFCWINDOWSTANDARDCASE" : return new CSiBKK.IFC.IFC4.IFCWindowStandardCase();
						case "IFCWINDOWSTYLE" : return new CSiBKK.IFC.IFC4.IFCWindowStyle();
						case "IFCWINDOWTYPE" : return new CSiBKK.IFC.IFC4.IFCWindowType();
						case "IFCWORKCALENDAR" : return new CSiBKK.IFC.IFC4.IFCWorkCalendar();
						case "IFCWORKPLAN" : return new CSiBKK.IFC.IFC4.IFCWorkPlan();
						case "IFCWORKSCHEDULE" : return new CSiBKK.IFC.IFC4.IFCWorkSchedule();
						case "IFCWORKTIME" : return new CSiBKK.IFC.IFC4.IFCWorkTime();
						case "IFCZSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4.IFCZShapeProfileDef();
						case "IFCZONE" : return new CSiBKK.IFC.IFC4.IFCZone();
					}
				break;
				case IFC_VERSION.IFC4X1:
					switch (className)
					{
						case "IFCABSORBEDDOSEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCAbsorbedDoseMeasure();
						case "IFCACCELERATIONMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCAccelerationMeasure();
						case "IFCAMOUNTOFSUBSTANCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCAmountOfSubstanceMeasure();
						case "IFCANGULARVELOCITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCAngularVelocityMeasure();
						case "IFCAREADENSITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCAreaDensityMeasure();
						case "IFCAREAMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCAreaMeasure();
						case "IFCBINARY" : return new CSiBKK.IFC.IFC4X1.IFCBinary();
						case "IFCBOOLEAN" : return new CSiBKK.IFC.IFC4X1.IFCBoolean();
						case "IFCBOXALIGNMENT" : return new CSiBKK.IFC.IFC4X1.IFCBoxAlignment();
						case "IFCCARDINALPOINTREFERENCE" : return new CSiBKK.IFC.IFC4X1.IFCCardinalPointReference();
						case "IFCCONTEXTDEPENDENTMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCContextDependentMeasure();
						case "IFCCOUNTMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCCountMeasure();
						case "IFCCURVATUREMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCCurvatureMeasure();
						case "IFCDATE" : return new CSiBKK.IFC.IFC4X1.IFCDate();
						case "IFCDATETIME" : return new CSiBKK.IFC.IFC4X1.IFCDateTime();
						case "IFCDAYINMONTHNUMBER" : return new CSiBKK.IFC.IFC4X1.IFCDayInMonthNumber();
						case "IFCDAYINWEEKNUMBER" : return new CSiBKK.IFC.IFC4X1.IFCDayInWeekNumber();
						case "IFCDESCRIPTIVEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCDescriptiveMeasure();
						case "IFCDIMENSIONCOUNT" : return new CSiBKK.IFC.IFC4X1.IFCDimensionCount();
						case "IFCDOSEEQUIVALENTMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCDoseEquivalentMeasure();
						case "IFCDURATION" : return new CSiBKK.IFC.IFC4X1.IFCDuration();
						case "IFCDYNAMICVISCOSITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCDynamicViscosityMeasure();
						case "IFCELECTRICCAPACITANCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCElectricCapacitanceMeasure();
						case "IFCELECTRICCHARGEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCElectricChargeMeasure();
						case "IFCELECTRICCONDUCTANCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCElectricConductanceMeasure();
						case "IFCELECTRICCURRENTMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCElectricCurrentMeasure();
						case "IFCELECTRICRESISTANCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCElectricResistanceMeasure();
						case "IFCELECTRICVOLTAGEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCElectricVoltageMeasure();
						case "IFCENERGYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCEnergyMeasure();
						case "IFCFONTSTYLE" : return new CSiBKK.IFC.IFC4X1.IFCFontStyle();
						case "IFCFONTVARIANT" : return new CSiBKK.IFC.IFC4X1.IFCFontVariant();
						case "IFCFONTWEIGHT" : return new CSiBKK.IFC.IFC4X1.IFCFontWeight();
						case "IFCFORCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCForceMeasure();
						case "IFCFREQUENCYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCFrequencyMeasure();
						case "IFCGLOBALLYUNIQUEID" : return new CSiBKK.IFC.IFC4X1.IFCGloballyUniqueId();
						case "IFCHEATFLUXDENSITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCHeatFluxDensityMeasure();
						case "IFCHEATINGVALUEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCHeatingValueMeasure();
						case "IFCIDENTIFIER" : return new CSiBKK.IFC.IFC4X1.IFCIdentifier();
						case "IFCILLUMINANCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCIlluminanceMeasure();
						case "IFCINDUCTANCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCInductanceMeasure();
						case "IFCINTEGER" : return new CSiBKK.IFC.IFC4X1.IFCInteger();
						case "IFCINTEGERCOUNTRATEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCIntegerCountRateMeasure();
						case "IFCIONCONCENTRATIONMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCIonConcentrationMeasure();
						case "IFCISOTHERMALMOISTURECAPACITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCIsothermalMoistureCapacityMeasure();
						case "IFCKINEMATICVISCOSITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCKinematicViscosityMeasure();
						case "IFCLABEL" : return new CSiBKK.IFC.IFC4X1.IFCLabel();
						case "IFCLANGUAGEID" : return new CSiBKK.IFC.IFC4X1.IFCLanguageId();
						case "IFCLENGTHMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCLengthMeasure();
						case "IFCLINEARFORCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCLinearForceMeasure();
						case "IFCLINEARMOMENTMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCLinearMomentMeasure();
						case "IFCLINEARSTIFFNESSMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCLinearStiffnessMeasure();
						case "IFCLINEARVELOCITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCLinearVelocityMeasure();
						case "IFCLOGICAL" : return new CSiBKK.IFC.IFC4X1.IFCLogical();
						case "IFCLUMINOUSFLUXMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCLuminousFluxMeasure();
						case "IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCLuminousIntensityDistributionMeasure();
						case "IFCLUMINOUSINTENSITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCLuminousIntensityMeasure();
						case "IFCMAGNETICFLUXDENSITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCMagneticFluxDensityMeasure();
						case "IFCMAGNETICFLUXMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCMagneticFluxMeasure();
						case "IFCMASSDENSITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCMassDensityMeasure();
						case "IFCMASSFLOWRATEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCMassFlowRateMeasure();
						case "IFCMASSMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCMassMeasure();
						case "IFCMASSPERLENGTHMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCMassPerLengthMeasure();
						case "IFCMODULUSOFELASTICITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCModulusOfElasticityMeasure();
						case "IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCModulusOfLinearSubgradeReactionMeasure();
						case "IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCModulusOfRotationalSubgradeReactionMeasure();
						case "IFCMODULUSOFSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCModulusOfSubgradeReactionMeasure();
						case "IFCMOISTUREDIFFUSIVITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCMoistureDiffusivityMeasure();
						case "IFCMOLECULARWEIGHTMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCMolecularWeightMeasure();
						case "IFCMOMENTOFINERTIAMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCMomentOfInertiaMeasure();
						case "IFCMONETARYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCMonetaryMeasure();
						case "IFCMONTHINYEARNUMBER" : return new CSiBKK.IFC.IFC4X1.IFCMonthInYearNumber();
						case "IFCNONNEGATIVELENGTHMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCNonNegativeLengthMeasure();
						case "IFCNORMALISEDRATIOMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCNormalisedRatioMeasure();
						case "IFCNUMERICMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCNumericMeasure();
						case "IFCPHMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCPHMeasure();
						case "IFCPARAMETERVALUE" : return new CSiBKK.IFC.IFC4X1.IFCParameterValue();
						case "IFCPLANARFORCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCPlanarForceMeasure();
						case "IFCPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCPlaneAngleMeasure();
						case "IFCPOSITIVEINTEGER" : return new CSiBKK.IFC.IFC4X1.IFCPositiveInteger();
						case "IFCPOSITIVELENGTHMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCPositiveLengthMeasure();
						case "IFCPOSITIVEPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCPositivePlaneAngleMeasure();
						case "IFCPOSITIVERATIOMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCPositiveRatioMeasure();
						case "IFCPOWERMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCPowerMeasure();
						case "IFCPRESENTABLETEXT" : return new CSiBKK.IFC.IFC4X1.IFCPresentableText();
						case "IFCPRESSUREMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCPressureMeasure();
						case "IFCRADIOACTIVITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCRadioActivityMeasure();
						case "IFCRATIOMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCRatioMeasure();
						case "IFCREAL" : return new CSiBKK.IFC.IFC4X1.IFCReal();
						case "IFCROTATIONALFREQUENCYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCRotationalFrequencyMeasure();
						case "IFCROTATIONALMASSMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCRotationalMassMeasure();
						case "IFCROTATIONALSTIFFNESSMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCRotationalStiffnessMeasure();
						case "IFCSECTIONMODULUSMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCSectionModulusMeasure();
						case "IFCSECTIONALAREAINTEGRALMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCSectionalAreaIntegralMeasure();
						case "IFCSHEARMODULUSMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCShearModulusMeasure();
						case "IFCSOLIDANGLEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCSolidAngleMeasure();
						case "IFCSOUNDPOWERLEVELMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCSoundPowerLevelMeasure();
						case "IFCSOUNDPOWERMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCSoundPowerMeasure();
						case "IFCSOUNDPRESSURELEVELMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCSoundPressureLevelMeasure();
						case "IFCSOUNDPRESSUREMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCSoundPressureMeasure();
						case "IFCSPECIFICHEATCAPACITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCSpecificHeatCapacityMeasure();
						case "IFCSPECULAREXPONENT" : return new CSiBKK.IFC.IFC4X1.IFCSpecularExponent();
						case "IFCSPECULARROUGHNESS" : return new CSiBKK.IFC.IFC4X1.IFCSpecularRoughness();
						case "IFCTEMPERATUREGRADIENTMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCTemperatureGradientMeasure();
						case "IFCTEMPERATURERATEOFCHANGEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCTemperatureRateOfChangeMeasure();
						case "IFCTEXT" : return new CSiBKK.IFC.IFC4X1.IFCText();
						case "IFCTEXTALIGNMENT" : return new CSiBKK.IFC.IFC4X1.IFCTextAlignment();
						case "IFCTEXTDECORATION" : return new CSiBKK.IFC.IFC4X1.IFCTextDecoration();
						case "IFCTEXTFONTNAME" : return new CSiBKK.IFC.IFC4X1.IFCTextFontName();
						case "IFCTEXTTRANSFORMATION" : return new CSiBKK.IFC.IFC4X1.IFCTextTransformation();
						case "IFCTHERMALADMITTANCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCThermalAdmittanceMeasure();
						case "IFCTHERMALCONDUCTIVITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCThermalConductivityMeasure();
						case "IFCTHERMALEXPANSIONCOEFFICIENTMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCThermalExpansionCoefficientMeasure();
						case "IFCTHERMALRESISTANCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCThermalResistanceMeasure();
						case "IFCTHERMALTRANSMITTANCEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCThermalTransmittanceMeasure();
						case "IFCTHERMODYNAMICTEMPERATUREMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCThermodynamicTemperatureMeasure();
						case "IFCTIME" : return new CSiBKK.IFC.IFC4X1.IFCTime();
						case "IFCTIMEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCTimeMeasure();
						case "IFCTIMESTAMP" : return new CSiBKK.IFC.IFC4X1.IFCTimeStamp();
						case "IFCTORQUEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCTorqueMeasure();
						case "IFCURIREFERENCE" : return new CSiBKK.IFC.IFC4X1.IFCURIReference();
						case "IFCVAPORPERMEABILITYMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCVaporPermeabilityMeasure();
						case "IFCVOLUMEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCVolumeMeasure();
						case "IFCVOLUMETRICFLOWRATEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCVolumetricFlowRateMeasure();
						case "IFCWARPINGCONSTANTMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCWarpingConstantMeasure();
						case "IFCWARPINGMOMENTMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCWarpingMomentMeasure();
						case "IFCARCINDEX" : return new CSiBKK.IFC.IFC4X1.IFCArcIndex();
						case "IFCCOMPLEXNUMBER" : return new CSiBKK.IFC.IFC4X1.IFCComplexNumber();
						case "IFCCOMPOUNDPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4X1.IFCCompoundPlaneAngleMeasure();
						case "IFCLINEINDEX" : return new CSiBKK.IFC.IFC4X1.IFCLineIndex();
						case "IFCPROPERTYSETDEFINITIONSET" : return new CSiBKK.IFC.IFC4X1.IFCPropertySetDefinitionSet();
						case "IFCACTIONREQUESTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCActionRequestTypeEnum();
						case "IFCACTIONSOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCActionSourceTypeEnum();
						case "IFCACTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCActionTypeEnum();
						case "IFCACTUATORTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCActuatorTypeEnum();
						case "IFCADDRESSTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCAddressTypeEnum();
						case "IFCAIRTERMINALBOXTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCAirTerminalBoxTypeEnum();
						case "IFCAIRTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCAirTerminalTypeEnum();
						case "IFCAIRTOAIRHEATRECOVERYTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCAirToAirHeatRecoveryTypeEnum();
						case "IFCALARMTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCAlarmTypeEnum();
						case "IFCALIGNMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCAlignmentTypeEnum();
						case "IFCANALYSISMODELTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCAnalysisModelTypeEnum();
						case "IFCANALYSISTHEORYTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCAnalysisTheoryTypeEnum();
						case "IFCARITHMETICOPERATORENUM" : return new CSiBKK.IFC.IFC4X1.IFCArithmeticOperatorEnum();
						case "IFCASSEMBLYPLACEENUM" : return new CSiBKK.IFC.IFC4X1.IFCAssemblyPlaceEnum();
						case "IFCAUDIOVISUALAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCAudioVisualApplianceTypeEnum();
						case "IFCBSPLINECURVEFORM" : return new CSiBKK.IFC.IFC4X1.IFCBSplineCurveForm();
						case "IFCBSPLINESURFACEFORM" : return new CSiBKK.IFC.IFC4X1.IFCBSplineSurfaceForm();
						case "IFCBEAMTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCBeamTypeEnum();
						case "IFCBENCHMARKENUM" : return new CSiBKK.IFC.IFC4X1.IFCBenchmarkEnum();
						case "IFCBOILERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCBoilerTypeEnum();
						case "IFCBOOLEANOPERATOR" : return new CSiBKK.IFC.IFC4X1.IFCBooleanOperator();
						case "IFCBUILDINGELEMENTPARTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCBuildingElementPartTypeEnum();
						case "IFCBUILDINGELEMENTPROXYTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCBuildingElementProxyTypeEnum();
						case "IFCBUILDINGSYSTEMTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCBuildingSystemTypeEnum();
						case "IFCBURNERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCBurnerTypeEnum();
						case "IFCCABLECARRIERFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCableCarrierFittingTypeEnum();
						case "IFCCABLECARRIERSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCableCarrierSegmentTypeEnum();
						case "IFCCABLEFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCableFittingTypeEnum();
						case "IFCCABLESEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCableSegmentTypeEnum();
						case "IFCCHANGEACTIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCChangeActionEnum();
						case "IFCCHILLERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCChillerTypeEnum();
						case "IFCCHIMNEYTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCChimneyTypeEnum();
						case "IFCCOILTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCoilTypeEnum();
						case "IFCCOLUMNTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCColumnTypeEnum();
						case "IFCCOMMUNICATIONSAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCommunicationsApplianceTypeEnum();
						case "IFCCOMPLEXPROPERTYTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCComplexPropertyTemplateTypeEnum();
						case "IFCCOMPRESSORTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCompressorTypeEnum();
						case "IFCCONDENSERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCondenserTypeEnum();
						case "IFCCONNECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCConnectionTypeEnum();
						case "IFCCONSTRAINTENUM" : return new CSiBKK.IFC.IFC4X1.IFCConstraintEnum();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCConstructionEquipmentResourceTypeEnum();
						case "IFCCONSTRUCTIONMATERIALRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCConstructionMaterialResourceTypeEnum();
						case "IFCCONSTRUCTIONPRODUCTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCConstructionProductResourceTypeEnum();
						case "IFCCONTROLLERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCControllerTypeEnum();
						case "IFCCOOLEDBEAMTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCooledBeamTypeEnum();
						case "IFCCOOLINGTOWERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCoolingTowerTypeEnum();
						case "IFCCOSTITEMTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCostItemTypeEnum();
						case "IFCCOSTSCHEDULETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCostScheduleTypeEnum();
						case "IFCCOVERINGTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCoveringTypeEnum();
						case "IFCCREWRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCrewResourceTypeEnum();
						case "IFCCURTAINWALLTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCCurtainWallTypeEnum();
						case "IFCCURVEINTERPOLATIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCCurveInterpolationEnum();
						case "IFCDAMPERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCDamperTypeEnum();
						case "IFCDATAORIGINENUM" : return new CSiBKK.IFC.IFC4X1.IFCDataOriginEnum();
						case "IFCDERIVEDUNITENUM" : return new CSiBKK.IFC.IFC4X1.IFCDerivedUnitEnum();
						case "IFCDIRECTIONSENSEENUM" : return new CSiBKK.IFC.IFC4X1.IFCDirectionSenseEnum();
						case "IFCDISCRETEACCESSORYTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCDiscreteAccessoryTypeEnum();
						case "IFCDISTRIBUTIONCHAMBERELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCDistributionChamberElementTypeEnum();
						case "IFCDISTRIBUTIONPORTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCDistributionPortTypeEnum();
						case "IFCDISTRIBUTIONSYSTEMENUM" : return new CSiBKK.IFC.IFC4X1.IFCDistributionSystemEnum();
						case "IFCDOCUMENTCONFIDENTIALITYENUM" : return new CSiBKK.IFC.IFC4X1.IFCDocumentConfidentialityEnum();
						case "IFCDOCUMENTSTATUSENUM" : return new CSiBKK.IFC.IFC4X1.IFCDocumentStatusEnum();
						case "IFCDOORPANELOPERATIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCDoorPanelOperationEnum();
						case "IFCDOORPANELPOSITIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCDoorPanelPositionEnum();
						case "IFCDOORSTYLECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCDoorStyleConstructionEnum();
						case "IFCDOORSTYLEOPERATIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCDoorStyleOperationEnum();
						case "IFCDOORTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCDoorTypeEnum();
						case "IFCDOORTYPEOPERATIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCDoorTypeOperationEnum();
						case "IFCDUCTFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCDuctFittingTypeEnum();
						case "IFCDUCTSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCDuctSegmentTypeEnum();
						case "IFCDUCTSILENCERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCDuctSilencerTypeEnum();
						case "IFCELECTRICAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCElectricApplianceTypeEnum();
						case "IFCELECTRICDISTRIBUTIONBOARDTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCElectricDistributionBoardTypeEnum();
						case "IFCELECTRICFLOWSTORAGEDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCElectricFlowStorageDeviceTypeEnum();
						case "IFCELECTRICGENERATORTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCElectricGeneratorTypeEnum();
						case "IFCELECTRICMOTORTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCElectricMotorTypeEnum();
						case "IFCELECTRICTIMECONTROLTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCElectricTimeControlTypeEnum();
						case "IFCELEMENTASSEMBLYTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCElementAssemblyTypeEnum();
						case "IFCELEMENTCOMPOSITIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCElementCompositionEnum();
						case "IFCENGINETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCEngineTypeEnum();
						case "IFCEVAPORATIVECOOLERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCEvaporativeCoolerTypeEnum();
						case "IFCEVAPORATORTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCEvaporatorTypeEnum();
						case "IFCEVENTTRIGGERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCEventTriggerTypeEnum();
						case "IFCEVENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCEventTypeEnum();
						case "IFCEXTERNALSPATIALELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCExternalSpatialElementTypeEnum();
						case "IFCFANTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCFanTypeEnum();
						case "IFCFASTENERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCFastenerTypeEnum();
						case "IFCFILTERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCFilterTypeEnum();
						case "IFCFIRESUPPRESSIONTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCFireSuppressionTerminalTypeEnum();
						case "IFCFLOWDIRECTIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCFlowDirectionEnum();
						case "IFCFLOWINSTRUMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCFlowInstrumentTypeEnum();
						case "IFCFLOWMETERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCFlowMeterTypeEnum();
						case "IFCFOOTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCFootingTypeEnum();
						case "IFCFURNITURETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCFurnitureTypeEnum();
						case "IFCGEOGRAPHICELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCGeographicElementTypeEnum();
						case "IFCGEOMETRICPROJECTIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCGeometricProjectionEnum();
						case "IFCGLOBALORLOCALENUM" : return new CSiBKK.IFC.IFC4X1.IFCGlobalOrLocalEnum();
						case "IFCGRIDTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCGridTypeEnum();
						case "IFCHEATEXCHANGERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCHeatExchangerTypeEnum();
						case "IFCHUMIDIFIERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCHumidifierTypeEnum();
						case "IFCINTERCEPTORTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCInterceptorTypeEnum();
						case "IFCINTERNALOREXTERNALENUM" : return new CSiBKK.IFC.IFC4X1.IFCInternalOrExternalEnum();
						case "IFCINVENTORYTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCInventoryTypeEnum();
						case "IFCJUNCTIONBOXTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCJunctionBoxTypeEnum();
						case "IFCKNOTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCKnotType();
						case "IFCLABORRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCLaborResourceTypeEnum();
						case "IFCLAMPTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCLampTypeEnum();
						case "IFCLAYERSETDIRECTIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCLayerSetDirectionEnum();
						case "IFCLIGHTDISTRIBUTIONCURVEENUM" : return new CSiBKK.IFC.IFC4X1.IFCLightDistributionCurveEnum();
						case "IFCLIGHTEMISSIONSOURCEENUM" : return new CSiBKK.IFC.IFC4X1.IFCLightEmissionSourceEnum();
						case "IFCLIGHTFIXTURETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCLightFixtureTypeEnum();
						case "IFCLOADGROUPTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCLoadGroupTypeEnum();
						case "IFCLOGICALOPERATORENUM" : return new CSiBKK.IFC.IFC4X1.IFCLogicalOperatorEnum();
						case "IFCMECHANICALFASTENERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCMechanicalFastenerTypeEnum();
						case "IFCMEDICALDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCMedicalDeviceTypeEnum();
						case "IFCMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCMemberTypeEnum();
						case "IFCMOTORCONNECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCMotorConnectionTypeEnum();
						case "IFCNULLSTYLE" : return new CSiBKK.IFC.IFC4X1.IFCNullStyle();
						case "IFCOBJECTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCObjectTypeEnum();
						case "IFCOBJECTIVEENUM" : return new CSiBKK.IFC.IFC4X1.IFCObjectiveEnum();
						case "IFCOCCUPANTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCOccupantTypeEnum();
						case "IFCOPENINGELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCOpeningElementTypeEnum();
						case "IFCOUTLETTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCOutletTypeEnum();
						case "IFCPERFORMANCEHISTORYTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCPerformanceHistoryTypeEnum();
						case "IFCPERMEABLECOVERINGOPERATIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCPermeableCoveringOperationEnum();
						case "IFCPERMITTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCPermitTypeEnum();
						case "IFCPHYSICALORVIRTUALENUM" : return new CSiBKK.IFC.IFC4X1.IFCPhysicalOrVirtualEnum();
						case "IFCPILECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCPileConstructionEnum();
						case "IFCPILETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCPileTypeEnum();
						case "IFCPIPEFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCPipeFittingTypeEnum();
						case "IFCPIPESEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCPipeSegmentTypeEnum();
						case "IFCPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCPlateTypeEnum();
						case "IFCPREFERREDSURFACECURVEREPRESENTATION" : return new CSiBKK.IFC.IFC4X1.IFCPreferredSurfaceCurveRepresentation();
						case "IFCPROCEDURETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCProcedureTypeEnum();
						case "IFCPROFILETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCProfileTypeEnum();
						case "IFCPROJECTORDERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCProjectOrderTypeEnum();
						case "IFCPROJECTEDORTRUELENGTHENUM" : return new CSiBKK.IFC.IFC4X1.IFCProjectedOrTrueLengthEnum();
						case "IFCPROJECTIONELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCProjectionElementTypeEnum();
						case "IFCPROPERTYSETTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCPropertySetTemplateTypeEnum();
						case "IFCPROTECTIVEDEVICETRIPPINGUNITTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCProtectiveDeviceTrippingUnitTypeEnum();
						case "IFCPROTECTIVEDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCProtectiveDeviceTypeEnum();
						case "IFCPUMPTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCPumpTypeEnum();
						case "IFCRAILINGTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCRailingTypeEnum();
						case "IFCRAMPFLIGHTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCRampFlightTypeEnum();
						case "IFCRAMPTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCRampTypeEnum();
						case "IFCRECURRENCETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCRecurrenceTypeEnum();
						case "IFCREFERENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCReferentTypeEnum();
						case "IFCREFLECTANCEMETHODENUM" : return new CSiBKK.IFC.IFC4X1.IFCReflectanceMethodEnum();
						case "IFCREINFORCINGBARROLEENUM" : return new CSiBKK.IFC.IFC4X1.IFCReinforcingBarRoleEnum();
						case "IFCREINFORCINGBARSURFACEENUM" : return new CSiBKK.IFC.IFC4X1.IFCReinforcingBarSurfaceEnum();
						case "IFCREINFORCINGBARTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCReinforcingBarTypeEnum();
						case "IFCREINFORCINGMESHTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCReinforcingMeshTypeEnum();
						case "IFCROLEENUM" : return new CSiBKK.IFC.IFC4X1.IFCRoleEnum();
						case "IFCROOFTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCRoofTypeEnum();
						case "IFCSIPREFIX" : return new CSiBKK.IFC.IFC4X1.IFCSIPrefix();
						case "IFCSIUNITNAME" : return new CSiBKK.IFC.IFC4X1.IFCSIUnitName();
						case "IFCSANITARYTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSanitaryTerminalTypeEnum();
						case "IFCSECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSectionTypeEnum();
						case "IFCSENSORTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSensorTypeEnum();
						case "IFCSEQUENCEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSequenceEnum();
						case "IFCSHADINGDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCShadingDeviceTypeEnum();
						case "IFCSIMPLEPROPERTYTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSimplePropertyTemplateTypeEnum();
						case "IFCSLABTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSlabTypeEnum();
						case "IFCSOLARDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSolarDeviceTypeEnum();
						case "IFCSPACEHEATERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSpaceHeaterTypeEnum();
						case "IFCSPACETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSpaceTypeEnum();
						case "IFCSPATIALZONETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSpatialZoneTypeEnum();
						case "IFCSTACKTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCStackTerminalTypeEnum();
						case "IFCSTAIRFLIGHTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCStairFlightTypeEnum();
						case "IFCSTAIRTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCStairTypeEnum();
						case "IFCSTATEENUM" : return new CSiBKK.IFC.IFC4X1.IFCStateEnum();
						case "IFCSTRUCTURALCURVEACTIVITYTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCStructuralCurveActivityTypeEnum();
						case "IFCSTRUCTURALCURVEMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCStructuralCurveMemberTypeEnum();
						case "IFCSTRUCTURALSURFACEACTIVITYTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCStructuralSurfaceActivityTypeEnum();
						case "IFCSTRUCTURALSURFACEMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCStructuralSurfaceMemberTypeEnum();
						case "IFCSUBCONTRACTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSubContractResourceTypeEnum();
						case "IFCSURFACEFEATURETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceFeatureTypeEnum();
						case "IFCSURFACESIDE" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceSide();
						case "IFCSWITCHINGDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSwitchingDeviceTypeEnum();
						case "IFCSYSTEMFURNITUREELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCSystemFurnitureElementTypeEnum();
						case "IFCTANKTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCTankTypeEnum();
						case "IFCTASKDURATIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCTaskDurationEnum();
						case "IFCTASKTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCTaskTypeEnum();
						case "IFCTENDONANCHORTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCTendonAnchorTypeEnum();
						case "IFCTENDONTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCTendonTypeEnum();
						case "IFCTEXTPATH" : return new CSiBKK.IFC.IFC4X1.IFCTextPath();
						case "IFCTIMESERIESDATATYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCTimeSeriesDataTypeEnum();
						case "IFCTRANSFORMERTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCTransformerTypeEnum();
						case "IFCTRANSITIONCODE" : return new CSiBKK.IFC.IFC4X1.IFCTransitionCode();
						case "IFCTRANSITIONCURVETYPE" : return new CSiBKK.IFC.IFC4X1.IFCTransitionCurveType();
						case "IFCTRANSPORTELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCTransportElementTypeEnum();
						case "IFCTRIMMINGPREFERENCE" : return new CSiBKK.IFC.IFC4X1.IFCTrimmingPreference();
						case "IFCTUBEBUNDLETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCTubeBundleTypeEnum();
						case "IFCUNITENUM" : return new CSiBKK.IFC.IFC4X1.IFCUnitEnum();
						case "IFCUNITARYCONTROLELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCUnitaryControlElementTypeEnum();
						case "IFCUNITARYEQUIPMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCUnitaryEquipmentTypeEnum();
						case "IFCVALVETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCValveTypeEnum();
						case "IFCVIBRATIONISOLATORTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCVibrationIsolatorTypeEnum();
						case "IFCVOIDINGFEATURETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCVoidingFeatureTypeEnum();
						case "IFCWALLTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCWallTypeEnum();
						case "IFCWASTETERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCWasteTerminalTypeEnum();
						case "IFCWINDOWPANELOPERATIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCWindowPanelOperationEnum();
						case "IFCWINDOWPANELPOSITIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCWindowPanelPositionEnum();
						case "IFCWINDOWSTYLECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCWindowStyleConstructionEnum();
						case "IFCWINDOWSTYLEOPERATIONENUM" : return new CSiBKK.IFC.IFC4X1.IFCWindowStyleOperationEnum();
						case "IFCWINDOWTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCWindowTypeEnum();
						case "IFCWINDOWTYPEPARTITIONINGENUM" : return new CSiBKK.IFC.IFC4X1.IFCWindowTypePartitioningEnum();
						case "IFCWORKCALENDARTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCWorkCalendarTypeEnum();
						case "IFCWORKPLANTYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCWorkPlanTypeEnum();
						case "IFCWORKSCHEDULETYPEENUM" : return new CSiBKK.IFC.IFC4X1.IFCWorkScheduleTypeEnum();
						case "IFCACTIONREQUEST" : return new CSiBKK.IFC.IFC4X1.IFCActionRequest();
						case "IFCACTOR" : return new CSiBKK.IFC.IFC4X1.IFCActor();
						case "IFCACTORROLE" : return new CSiBKK.IFC.IFC4X1.IFCActorRole();
						case "IFCACTUATOR" : return new CSiBKK.IFC.IFC4X1.IFCActuator();
						case "IFCACTUATORTYPE" : return new CSiBKK.IFC.IFC4X1.IFCActuatorType();
						case "IFCADVANCEDBREP" : return new CSiBKK.IFC.IFC4X1.IFCAdvancedBrep();
						case "IFCADVANCEDBREPWITHVOIDS" : return new CSiBKK.IFC.IFC4X1.IFCAdvancedBrepWithVoids();
						case "IFCADVANCEDFACE" : return new CSiBKK.IFC.IFC4X1.IFCAdvancedFace();
						case "IFCAIRTERMINAL" : return new CSiBKK.IFC.IFC4X1.IFCAirTerminal();
						case "IFCAIRTERMINALBOX" : return new CSiBKK.IFC.IFC4X1.IFCAirTerminalBox();
						case "IFCAIRTERMINALBOXTYPE" : return new CSiBKK.IFC.IFC4X1.IFCAirTerminalBoxType();
						case "IFCAIRTERMINALTYPE" : return new CSiBKK.IFC.IFC4X1.IFCAirTerminalType();
						case "IFCAIRTOAIRHEATRECOVERY" : return new CSiBKK.IFC.IFC4X1.IFCAirToAirHeatRecovery();
						case "IFCAIRTOAIRHEATRECOVERYTYPE" : return new CSiBKK.IFC.IFC4X1.IFCAirToAirHeatRecoveryType();
						case "IFCALARM" : return new CSiBKK.IFC.IFC4X1.IFCAlarm();
						case "IFCALARMTYPE" : return new CSiBKK.IFC.IFC4X1.IFCAlarmType();
						case "IFCALIGNMENT" : return new CSiBKK.IFC.IFC4X1.IFCAlignment();
						case "IFCALIGNMENT2DHORIZONTAL" : return new CSiBKK.IFC.IFC4X1.IFCAlignment2DHorizontal();
						case "IFCALIGNMENT2DHORIZONTALSEGMENT" : return new CSiBKK.IFC.IFC4X1.IFCAlignment2DHorizontalSegment();
						case "IFCALIGNMENT2DVERSEGCIRCULARARC" : return new CSiBKK.IFC.IFC4X1.IFCAlignment2DVerSegCircularArc();
						case "IFCALIGNMENT2DVERSEGLINE" : return new CSiBKK.IFC.IFC4X1.IFCAlignment2DVerSegLine();
						case "IFCALIGNMENT2DVERSEGPARABOLICARC" : return new CSiBKK.IFC.IFC4X1.IFCAlignment2DVerSegParabolicArc();
						case "IFCALIGNMENT2DVERTICAL" : return new CSiBKK.IFC.IFC4X1.IFCAlignment2DVertical();
						case "IFCALIGNMENTCURVE" : return new CSiBKK.IFC.IFC4X1.IFCAlignmentCurve();
						case "IFCANNOTATION" : return new CSiBKK.IFC.IFC4X1.IFCAnnotation();
						case "IFCANNOTATIONFILLAREA" : return new CSiBKK.IFC.IFC4X1.IFCAnnotationFillArea();
						case "IFCAPPLICATION" : return new CSiBKK.IFC.IFC4X1.IFCApplication();
						case "IFCAPPLIEDVALUE" : return new CSiBKK.IFC.IFC4X1.IFCAppliedValue();
						case "IFCAPPROVAL" : return new CSiBKK.IFC.IFC4X1.IFCApproval();
						case "IFCAPPROVALRELATIONSHIP" : return new CSiBKK.IFC.IFC4X1.IFCApprovalRelationship();
						case "IFCARBITRARYCLOSEDPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCArbitraryClosedProfileDef();
						case "IFCARBITRARYOPENPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCArbitraryOpenProfileDef();
						case "IFCARBITRARYPROFILEDEFWITHVOIDS" : return new CSiBKK.IFC.IFC4X1.IFCArbitraryProfileDefWithVoids();
						case "IFCASSET" : return new CSiBKK.IFC.IFC4X1.IFCAsset();
						case "IFCASYMMETRICISHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCAsymmetricIShapeProfileDef();
						case "IFCAUDIOVISUALAPPLIANCE" : return new CSiBKK.IFC.IFC4X1.IFCAudioVisualAppliance();
						case "IFCAUDIOVISUALAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4X1.IFCAudioVisualApplianceType();
						case "IFCAXIS1PLACEMENT" : return new CSiBKK.IFC.IFC4X1.IFCAxis1Placement();
						case "IFCAXIS2PLACEMENT2D" : return new CSiBKK.IFC.IFC4X1.IFCAxis2Placement2D();
						case "IFCAXIS2PLACEMENT3D" : return new CSiBKK.IFC.IFC4X1.IFCAxis2Placement3D();
						case "IFCBSPLINECURVEWITHKNOTS" : return new CSiBKK.IFC.IFC4X1.IFCBSplineCurveWithKnots();
						case "IFCBSPLINESURFACEWITHKNOTS" : return new CSiBKK.IFC.IFC4X1.IFCBSplineSurfaceWithKnots();
						case "IFCBEAM" : return new CSiBKK.IFC.IFC4X1.IFCBeam();
						case "IFCBEAMSTANDARDCASE" : return new CSiBKK.IFC.IFC4X1.IFCBeamStandardCase();
						case "IFCBEAMTYPE" : return new CSiBKK.IFC.IFC4X1.IFCBeamType();
						case "IFCBLOBTEXTURE" : return new CSiBKK.IFC.IFC4X1.IFCBlobTexture();
						case "IFCBLOCK" : return new CSiBKK.IFC.IFC4X1.IFCBlock();
						case "IFCBOILER" : return new CSiBKK.IFC.IFC4X1.IFCBoiler();
						case "IFCBOILERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCBoilerType();
						case "IFCBOOLEANCLIPPINGRESULT" : return new CSiBKK.IFC.IFC4X1.IFCBooleanClippingResult();
						case "IFCBOOLEANRESULT" : return new CSiBKK.IFC.IFC4X1.IFCBooleanResult();
						case "IFCBOUNDARYCURVE" : return new CSiBKK.IFC.IFC4X1.IFCBoundaryCurve();
						case "IFCBOUNDARYEDGECONDITION" : return new CSiBKK.IFC.IFC4X1.IFCBoundaryEdgeCondition();
						case "IFCBOUNDARYFACECONDITION" : return new CSiBKK.IFC.IFC4X1.IFCBoundaryFaceCondition();
						case "IFCBOUNDARYNODECONDITION" : return new CSiBKK.IFC.IFC4X1.IFCBoundaryNodeCondition();
						case "IFCBOUNDARYNODECONDITIONWARPING" : return new CSiBKK.IFC.IFC4X1.IFCBoundaryNodeConditionWarping();
						case "IFCBOUNDINGBOX" : return new CSiBKK.IFC.IFC4X1.IFCBoundingBox();
						case "IFCBOXEDHALFSPACE" : return new CSiBKK.IFC.IFC4X1.IFCBoxedHalfSpace();
						case "IFCBUILDING" : return new CSiBKK.IFC.IFC4X1.IFCBuilding();
						case "IFCBUILDINGELEMENTPART" : return new CSiBKK.IFC.IFC4X1.IFCBuildingElementPart();
						case "IFCBUILDINGELEMENTPARTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCBuildingElementPartType();
						case "IFCBUILDINGELEMENTPROXY" : return new CSiBKK.IFC.IFC4X1.IFCBuildingElementProxy();
						case "IFCBUILDINGELEMENTPROXYTYPE" : return new CSiBKK.IFC.IFC4X1.IFCBuildingElementProxyType();
						case "IFCBUILDINGSTOREY" : return new CSiBKK.IFC.IFC4X1.IFCBuildingStorey();
						case "IFCBUILDINGSYSTEM" : return new CSiBKK.IFC.IFC4X1.IFCBuildingSystem();
						case "IFCBURNER" : return new CSiBKK.IFC.IFC4X1.IFCBurner();
						case "IFCBURNERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCBurnerType();
						case "IFCCSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCCShapeProfileDef();
						case "IFCCABLECARRIERFITTING" : return new CSiBKK.IFC.IFC4X1.IFCCableCarrierFitting();
						case "IFCCABLECARRIERFITTINGTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCableCarrierFittingType();
						case "IFCCABLECARRIERSEGMENT" : return new CSiBKK.IFC.IFC4X1.IFCCableCarrierSegment();
						case "IFCCABLECARRIERSEGMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCableCarrierSegmentType();
						case "IFCCABLEFITTING" : return new CSiBKK.IFC.IFC4X1.IFCCableFitting();
						case "IFCCABLEFITTINGTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCableFittingType();
						case "IFCCABLESEGMENT" : return new CSiBKK.IFC.IFC4X1.IFCCableSegment();
						case "IFCCABLESEGMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCableSegmentType();
						case "IFCCARTESIANPOINT" : return new CSiBKK.IFC.IFC4X1.IFCCartesianPoint();
						case "IFCCARTESIANPOINTLIST2D" : return new CSiBKK.IFC.IFC4X1.IFCCartesianPointList2D();
						case "IFCCARTESIANPOINTLIST3D" : return new CSiBKK.IFC.IFC4X1.IFCCartesianPointList3D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR2D" : return new CSiBKK.IFC.IFC4X1.IFCCartesianTransformationOperator2D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM" : return new CSiBKK.IFC.IFC4X1.IFCCartesianTransformationOperator2DnonUniform();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR3D" : return new CSiBKK.IFC.IFC4X1.IFCCartesianTransformationOperator3D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM" : return new CSiBKK.IFC.IFC4X1.IFCCartesianTransformationOperator3DnonUniform();
						case "IFCCENTERLINEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCCenterLineProfileDef();
						case "IFCCHILLER" : return new CSiBKK.IFC.IFC4X1.IFCChiller();
						case "IFCCHILLERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCChillerType();
						case "IFCCHIMNEY" : return new CSiBKK.IFC.IFC4X1.IFCChimney();
						case "IFCCHIMNEYTYPE" : return new CSiBKK.IFC.IFC4X1.IFCChimneyType();
						case "IFCCIRCLE" : return new CSiBKK.IFC.IFC4X1.IFCCircle();
						case "IFCCIRCLEHOLLOWPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCCircleHollowProfileDef();
						case "IFCCIRCLEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCCircleProfileDef();
						case "IFCCIRCULARARCSEGMENT2D" : return new CSiBKK.IFC.IFC4X1.IFCCircularArcSegment2D();
						case "IFCCIVILELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCCivilElement();
						case "IFCCIVILELEMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCivilElementType();
						case "IFCCLASSIFICATION" : return new CSiBKK.IFC.IFC4X1.IFCClassification();
						case "IFCCLASSIFICATIONREFERENCE" : return new CSiBKK.IFC.IFC4X1.IFCClassificationReference();
						case "IFCCLOSEDSHELL" : return new CSiBKK.IFC.IFC4X1.IFCClosedShell();
						case "IFCCOIL" : return new CSiBKK.IFC.IFC4X1.IFCCoil();
						case "IFCCOILTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCoilType();
						case "IFCCOLOURRGB" : return new CSiBKK.IFC.IFC4X1.IFCColourRgb();
						case "IFCCOLOURRGBLIST" : return new CSiBKK.IFC.IFC4X1.IFCColourRgbList();
						case "IFCCOLUMN" : return new CSiBKK.IFC.IFC4X1.IFCColumn();
						case "IFCCOLUMNSTANDARDCASE" : return new CSiBKK.IFC.IFC4X1.IFCColumnStandardCase();
						case "IFCCOLUMNTYPE" : return new CSiBKK.IFC.IFC4X1.IFCColumnType();
						case "IFCCOMMUNICATIONSAPPLIANCE" : return new CSiBKK.IFC.IFC4X1.IFCCommunicationsAppliance();
						case "IFCCOMMUNICATIONSAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4X1.IFCCommunicationsApplianceType();
						case "IFCCOMPLEXPROPERTY" : return new CSiBKK.IFC.IFC4X1.IFCComplexProperty();
						case "IFCCOMPLEXPROPERTYTEMPLATE" : return new CSiBKK.IFC.IFC4X1.IFCComplexPropertyTemplate();
						case "IFCCOMPOSITECURVE" : return new CSiBKK.IFC.IFC4X1.IFCCompositeCurve();
						case "IFCCOMPOSITECURVEONSURFACE" : return new CSiBKK.IFC.IFC4X1.IFCCompositeCurveOnSurface();
						case "IFCCOMPOSITECURVESEGMENT" : return new CSiBKK.IFC.IFC4X1.IFCCompositeCurveSegment();
						case "IFCCOMPOSITEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCCompositeProfileDef();
						case "IFCCOMPRESSOR" : return new CSiBKK.IFC.IFC4X1.IFCCompressor();
						case "IFCCOMPRESSORTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCompressorType();
						case "IFCCONDENSER" : return new CSiBKK.IFC.IFC4X1.IFCCondenser();
						case "IFCCONDENSERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCondenserType();
						case "IFCCONNECTEDFACESET" : return new CSiBKK.IFC.IFC4X1.IFCConnectedFaceSet();
						case "IFCCONNECTIONCURVEGEOMETRY" : return new CSiBKK.IFC.IFC4X1.IFCConnectionCurveGeometry();
						case "IFCCONNECTIONPOINTECCENTRICITY" : return new CSiBKK.IFC.IFC4X1.IFCConnectionPointEccentricity();
						case "IFCCONNECTIONPOINTGEOMETRY" : return new CSiBKK.IFC.IFC4X1.IFCConnectionPointGeometry();
						case "IFCCONNECTIONSURFACEGEOMETRY" : return new CSiBKK.IFC.IFC4X1.IFCConnectionSurfaceGeometry();
						case "IFCCONNECTIONVOLUMEGEOMETRY" : return new CSiBKK.IFC.IFC4X1.IFCConnectionVolumeGeometry();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCE" : return new CSiBKK.IFC.IFC4X1.IFCConstructionEquipmentResource();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE" : return new CSiBKK.IFC.IFC4X1.IFCConstructionEquipmentResourceType();
						case "IFCCONSTRUCTIONMATERIALRESOURCE" : return new CSiBKK.IFC.IFC4X1.IFCConstructionMaterialResource();
						case "IFCCONSTRUCTIONMATERIALRESOURCETYPE" : return new CSiBKK.IFC.IFC4X1.IFCConstructionMaterialResourceType();
						case "IFCCONSTRUCTIONPRODUCTRESOURCE" : return new CSiBKK.IFC.IFC4X1.IFCConstructionProductResource();
						case "IFCCONSTRUCTIONPRODUCTRESOURCETYPE" : return new CSiBKK.IFC.IFC4X1.IFCConstructionProductResourceType();
						case "IFCCONTEXTDEPENDENTUNIT" : return new CSiBKK.IFC.IFC4X1.IFCContextDependentUnit();
						case "IFCCONTROLLER" : return new CSiBKK.IFC.IFC4X1.IFCController();
						case "IFCCONTROLLERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCControllerType();
						case "IFCCONVERSIONBASEDUNIT" : return new CSiBKK.IFC.IFC4X1.IFCConversionBasedUnit();
						case "IFCCONVERSIONBASEDUNITWITHOFFSET" : return new CSiBKK.IFC.IFC4X1.IFCConversionBasedUnitWithOffset();
						case "IFCCOOLEDBEAM" : return new CSiBKK.IFC.IFC4X1.IFCCooledBeam();
						case "IFCCOOLEDBEAMTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCooledBeamType();
						case "IFCCOOLINGTOWER" : return new CSiBKK.IFC.IFC4X1.IFCCoolingTower();
						case "IFCCOOLINGTOWERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCoolingTowerType();
						case "IFCCOSTITEM" : return new CSiBKK.IFC.IFC4X1.IFCCostItem();
						case "IFCCOSTSCHEDULE" : return new CSiBKK.IFC.IFC4X1.IFCCostSchedule();
						case "IFCCOSTVALUE" : return new CSiBKK.IFC.IFC4X1.IFCCostValue();
						case "IFCCOVERING" : return new CSiBKK.IFC.IFC4X1.IFCCovering();
						case "IFCCOVERINGTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCoveringType();
						case "IFCCREWRESOURCE" : return new CSiBKK.IFC.IFC4X1.IFCCrewResource();
						case "IFCCREWRESOURCETYPE" : return new CSiBKK.IFC.IFC4X1.IFCCrewResourceType();
						case "IFCCSGSOLID" : return new CSiBKK.IFC.IFC4X1.IFCCsgSolid();
						case "IFCCURRENCYRELATIONSHIP" : return new CSiBKK.IFC.IFC4X1.IFCCurrencyRelationship();
						case "IFCCURTAINWALL" : return new CSiBKK.IFC.IFC4X1.IFCCurtainWall();
						case "IFCCURTAINWALLTYPE" : return new CSiBKK.IFC.IFC4X1.IFCCurtainWallType();
						case "IFCCURVEBOUNDEDPLANE" : return new CSiBKK.IFC.IFC4X1.IFCCurveBoundedPlane();
						case "IFCCURVEBOUNDEDSURFACE" : return new CSiBKK.IFC.IFC4X1.IFCCurveBoundedSurface();
						case "IFCCURVESTYLE" : return new CSiBKK.IFC.IFC4X1.IFCCurveStyle();
						case "IFCCURVESTYLEFONT" : return new CSiBKK.IFC.IFC4X1.IFCCurveStyleFont();
						case "IFCCURVESTYLEFONTANDSCALING" : return new CSiBKK.IFC.IFC4X1.IFCCurveStyleFontAndScaling();
						case "IFCCURVESTYLEFONTPATTERN" : return new CSiBKK.IFC.IFC4X1.IFCCurveStyleFontPattern();
						case "IFCCYLINDRICALSURFACE" : return new CSiBKK.IFC.IFC4X1.IFCCylindricalSurface();
						case "IFCDAMPER" : return new CSiBKK.IFC.IFC4X1.IFCDamper();
						case "IFCDAMPERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCDamperType();
						case "IFCDERIVEDPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCDerivedProfileDef();
						case "IFCDERIVEDUNIT" : return new CSiBKK.IFC.IFC4X1.IFCDerivedUnit();
						case "IFCDERIVEDUNITELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCDerivedUnitElement();
						case "IFCDIMENSIONALEXPONENTS" : return new CSiBKK.IFC.IFC4X1.IFCDimensionalExponents();
						case "IFCDIRECTION" : return new CSiBKK.IFC.IFC4X1.IFCDirection();
						case "IFCDISCRETEACCESSORY" : return new CSiBKK.IFC.IFC4X1.IFCDiscreteAccessory();
						case "IFCDISCRETEACCESSORYTYPE" : return new CSiBKK.IFC.IFC4X1.IFCDiscreteAccessoryType();
						case "IFCDISTANCEEXPRESSION" : return new CSiBKK.IFC.IFC4X1.IFCDistanceExpression();
						case "IFCDISTRIBUTIONCHAMBERELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCDistributionChamberElement();
						case "IFCDISTRIBUTIONCHAMBERELEMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCDistributionChamberElementType();
						case "IFCDISTRIBUTIONCIRCUIT" : return new CSiBKK.IFC.IFC4X1.IFCDistributionCircuit();
						case "IFCDISTRIBUTIONCONTROLELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCDistributionControlElement();
						case "IFCDISTRIBUTIONELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCDistributionElement();
						case "IFCDISTRIBUTIONELEMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCDistributionElementType();
						case "IFCDISTRIBUTIONFLOWELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCDistributionFlowElement();
						case "IFCDISTRIBUTIONPORT" : return new CSiBKK.IFC.IFC4X1.IFCDistributionPort();
						case "IFCDISTRIBUTIONSYSTEM" : return new CSiBKK.IFC.IFC4X1.IFCDistributionSystem();
						case "IFCDOCUMENTINFORMATION" : return new CSiBKK.IFC.IFC4X1.IFCDocumentInformation();
						case "IFCDOCUMENTINFORMATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4X1.IFCDocumentInformationRelationship();
						case "IFCDOCUMENTREFERENCE" : return new CSiBKK.IFC.IFC4X1.IFCDocumentReference();
						case "IFCDOOR" : return new CSiBKK.IFC.IFC4X1.IFCDoor();
						case "IFCDOORLININGPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCDoorLiningProperties();
						case "IFCDOORPANELPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCDoorPanelProperties();
						case "IFCDOORSTANDARDCASE" : return new CSiBKK.IFC.IFC4X1.IFCDoorStandardCase();
						case "IFCDOORSTYLE" : return new CSiBKK.IFC.IFC4X1.IFCDoorStyle();
						case "IFCDOORTYPE" : return new CSiBKK.IFC.IFC4X1.IFCDoorType();
						case "IFCDRAUGHTINGPREDEFINEDCOLOUR" : return new CSiBKK.IFC.IFC4X1.IFCDraughtingPreDefinedColour();
						case "IFCDRAUGHTINGPREDEFINEDCURVEFONT" : return new CSiBKK.IFC.IFC4X1.IFCDraughtingPreDefinedCurveFont();
						case "IFCDUCTFITTING" : return new CSiBKK.IFC.IFC4X1.IFCDuctFitting();
						case "IFCDUCTFITTINGTYPE" : return new CSiBKK.IFC.IFC4X1.IFCDuctFittingType();
						case "IFCDUCTSEGMENT" : return new CSiBKK.IFC.IFC4X1.IFCDuctSegment();
						case "IFCDUCTSEGMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCDuctSegmentType();
						case "IFCDUCTSILENCER" : return new CSiBKK.IFC.IFC4X1.IFCDuctSilencer();
						case "IFCDUCTSILENCERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCDuctSilencerType();
						case "IFCEDGE" : return new CSiBKK.IFC.IFC4X1.IFCEdge();
						case "IFCEDGECURVE" : return new CSiBKK.IFC.IFC4X1.IFCEdgeCurve();
						case "IFCEDGELOOP" : return new CSiBKK.IFC.IFC4X1.IFCEdgeLoop();
						case "IFCELECTRICAPPLIANCE" : return new CSiBKK.IFC.IFC4X1.IFCElectricAppliance();
						case "IFCELECTRICAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4X1.IFCElectricApplianceType();
						case "IFCELECTRICDISTRIBUTIONBOARD" : return new CSiBKK.IFC.IFC4X1.IFCElectricDistributionBoard();
						case "IFCELECTRICDISTRIBUTIONBOARDTYPE" : return new CSiBKK.IFC.IFC4X1.IFCElectricDistributionBoardType();
						case "IFCELECTRICFLOWSTORAGEDEVICE" : return new CSiBKK.IFC.IFC4X1.IFCElectricFlowStorageDevice();
						case "IFCELECTRICFLOWSTORAGEDEVICETYPE" : return new CSiBKK.IFC.IFC4X1.IFCElectricFlowStorageDeviceType();
						case "IFCELECTRICGENERATOR" : return new CSiBKK.IFC.IFC4X1.IFCElectricGenerator();
						case "IFCELECTRICGENERATORTYPE" : return new CSiBKK.IFC.IFC4X1.IFCElectricGeneratorType();
						case "IFCELECTRICMOTOR" : return new CSiBKK.IFC.IFC4X1.IFCElectricMotor();
						case "IFCELECTRICMOTORTYPE" : return new CSiBKK.IFC.IFC4X1.IFCElectricMotorType();
						case "IFCELECTRICTIMECONTROL" : return new CSiBKK.IFC.IFC4X1.IFCElectricTimeControl();
						case "IFCELECTRICTIMECONTROLTYPE" : return new CSiBKK.IFC.IFC4X1.IFCElectricTimeControlType();
						case "IFCELEMENTASSEMBLY" : return new CSiBKK.IFC.IFC4X1.IFCElementAssembly();
						case "IFCELEMENTASSEMBLYTYPE" : return new CSiBKK.IFC.IFC4X1.IFCElementAssemblyType();
						case "IFCELEMENTQUANTITY" : return new CSiBKK.IFC.IFC4X1.IFCElementQuantity();
						case "IFCELLIPSE" : return new CSiBKK.IFC.IFC4X1.IFCEllipse();
						case "IFCELLIPSEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCEllipseProfileDef();
						case "IFCENERGYCONVERSIONDEVICE" : return new CSiBKK.IFC.IFC4X1.IFCEnergyConversionDevice();
						case "IFCENGINE" : return new CSiBKK.IFC.IFC4X1.IFCEngine();
						case "IFCENGINETYPE" : return new CSiBKK.IFC.IFC4X1.IFCEngineType();
						case "IFCEVAPORATIVECOOLER" : return new CSiBKK.IFC.IFC4X1.IFCEvaporativeCooler();
						case "IFCEVAPORATIVECOOLERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCEvaporativeCoolerType();
						case "IFCEVAPORATOR" : return new CSiBKK.IFC.IFC4X1.IFCEvaporator();
						case "IFCEVAPORATORTYPE" : return new CSiBKK.IFC.IFC4X1.IFCEvaporatorType();
						case "IFCEVENT" : return new CSiBKK.IFC.IFC4X1.IFCEvent();
						case "IFCEVENTTIME" : return new CSiBKK.IFC.IFC4X1.IFCEventTime();
						case "IFCEVENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCEventType();
						case "IFCEXTERNALREFERENCERELATIONSHIP" : return new CSiBKK.IFC.IFC4X1.IFCExternalReferenceRelationship();
						case "IFCEXTERNALSPATIALELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCExternalSpatialElement();
						case "IFCEXTERNALLYDEFINEDHATCHSTYLE" : return new CSiBKK.IFC.IFC4X1.IFCExternallyDefinedHatchStyle();
						case "IFCEXTERNALLYDEFINEDSURFACESTYLE" : return new CSiBKK.IFC.IFC4X1.IFCExternallyDefinedSurfaceStyle();
						case "IFCEXTERNALLYDEFINEDTEXTFONT" : return new CSiBKK.IFC.IFC4X1.IFCExternallyDefinedTextFont();
						case "IFCEXTRUDEDAREASOLID" : return new CSiBKK.IFC.IFC4X1.IFCExtrudedAreaSolid();
						case "IFCEXTRUDEDAREASOLIDTAPERED" : return new CSiBKK.IFC.IFC4X1.IFCExtrudedAreaSolidTapered();
						case "IFCFACE" : return new CSiBKK.IFC.IFC4X1.IFCFace();
						case "IFCFACEBASEDSURFACEMODEL" : return new CSiBKK.IFC.IFC4X1.IFCFaceBasedSurfaceModel();
						case "IFCFACEBOUND" : return new CSiBKK.IFC.IFC4X1.IFCFaceBound();
						case "IFCFACEOUTERBOUND" : return new CSiBKK.IFC.IFC4X1.IFCFaceOuterBound();
						case "IFCFACESURFACE" : return new CSiBKK.IFC.IFC4X1.IFCFaceSurface();
						case "IFCFACETEDBREP" : return new CSiBKK.IFC.IFC4X1.IFCFacetedBrep();
						case "IFCFACETEDBREPWITHVOIDS" : return new CSiBKK.IFC.IFC4X1.IFCFacetedBrepWithVoids();
						case "IFCFAILURECONNECTIONCONDITION" : return new CSiBKK.IFC.IFC4X1.IFCFailureConnectionCondition();
						case "IFCFAN" : return new CSiBKK.IFC.IFC4X1.IFCFan();
						case "IFCFANTYPE" : return new CSiBKK.IFC.IFC4X1.IFCFanType();
						case "IFCFASTENER" : return new CSiBKK.IFC.IFC4X1.IFCFastener();
						case "IFCFASTENERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCFastenerType();
						case "IFCFILLAREASTYLE" : return new CSiBKK.IFC.IFC4X1.IFCFillAreaStyle();
						case "IFCFILLAREASTYLEHATCHING" : return new CSiBKK.IFC.IFC4X1.IFCFillAreaStyleHatching();
						case "IFCFILLAREASTYLETILES" : return new CSiBKK.IFC.IFC4X1.IFCFillAreaStyleTiles();
						case "IFCFILTER" : return new CSiBKK.IFC.IFC4X1.IFCFilter();
						case "IFCFILTERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCFilterType();
						case "IFCFIRESUPPRESSIONTERMINAL" : return new CSiBKK.IFC.IFC4X1.IFCFireSuppressionTerminal();
						case "IFCFIRESUPPRESSIONTERMINALTYPE" : return new CSiBKK.IFC.IFC4X1.IFCFireSuppressionTerminalType();
						case "IFCFIXEDREFERENCESWEPTAREASOLID" : return new CSiBKK.IFC.IFC4X1.IFCFixedReferenceSweptAreaSolid();
						case "IFCFLOWCONTROLLER" : return new CSiBKK.IFC.IFC4X1.IFCFlowController();
						case "IFCFLOWFITTING" : return new CSiBKK.IFC.IFC4X1.IFCFlowFitting();
						case "IFCFLOWINSTRUMENT" : return new CSiBKK.IFC.IFC4X1.IFCFlowInstrument();
						case "IFCFLOWINSTRUMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCFlowInstrumentType();
						case "IFCFLOWMETER" : return new CSiBKK.IFC.IFC4X1.IFCFlowMeter();
						case "IFCFLOWMETERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCFlowMeterType();
						case "IFCFLOWMOVINGDEVICE" : return new CSiBKK.IFC.IFC4X1.IFCFlowMovingDevice();
						case "IFCFLOWSEGMENT" : return new CSiBKK.IFC.IFC4X1.IFCFlowSegment();
						case "IFCFLOWSTORAGEDEVICE" : return new CSiBKK.IFC.IFC4X1.IFCFlowStorageDevice();
						case "IFCFLOWTERMINAL" : return new CSiBKK.IFC.IFC4X1.IFCFlowTerminal();
						case "IFCFLOWTREATMENTDEVICE" : return new CSiBKK.IFC.IFC4X1.IFCFlowTreatmentDevice();
						case "IFCFOOTING" : return new CSiBKK.IFC.IFC4X1.IFCFooting();
						case "IFCFOOTINGTYPE" : return new CSiBKK.IFC.IFC4X1.IFCFootingType();
						case "IFCFURNISHINGELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCFurnishingElement();
						case "IFCFURNISHINGELEMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCFurnishingElementType();
						case "IFCFURNITURE" : return new CSiBKK.IFC.IFC4X1.IFCFurniture();
						case "IFCFURNITURETYPE" : return new CSiBKK.IFC.IFC4X1.IFCFurnitureType();
						case "IFCGEOGRAPHICELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCGeographicElement();
						case "IFCGEOGRAPHICELEMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCGeographicElementType();
						case "IFCGEOMETRICCURVESET" : return new CSiBKK.IFC.IFC4X1.IFCGeometricCurveSet();
						case "IFCGEOMETRICREPRESENTATIONCONTEXT" : return new CSiBKK.IFC.IFC4X1.IFCGeometricRepresentationContext();
						case "IFCGEOMETRICREPRESENTATIONSUBCONTEXT" : return new CSiBKK.IFC.IFC4X1.IFCGeometricRepresentationSubContext();
						case "IFCGEOMETRICSET" : return new CSiBKK.IFC.IFC4X1.IFCGeometricSet();
						case "IFCGRID" : return new CSiBKK.IFC.IFC4X1.IFCGrid();
						case "IFCGRIDAXIS" : return new CSiBKK.IFC.IFC4X1.IFCGridAxis();
						case "IFCGRIDPLACEMENT" : return new CSiBKK.IFC.IFC4X1.IFCGridPlacement();
						case "IFCGROUP" : return new CSiBKK.IFC.IFC4X1.IFCGroup();
						case "IFCHALFSPACESOLID" : return new CSiBKK.IFC.IFC4X1.IFCHalfSpaceSolid();
						case "IFCHEATEXCHANGER" : return new CSiBKK.IFC.IFC4X1.IFCHeatExchanger();
						case "IFCHEATEXCHANGERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCHeatExchangerType();
						case "IFCHUMIDIFIER" : return new CSiBKK.IFC.IFC4X1.IFCHumidifier();
						case "IFCHUMIDIFIERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCHumidifierType();
						case "IFCISHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCIShapeProfileDef();
						case "IFCIMAGETEXTURE" : return new CSiBKK.IFC.IFC4X1.IFCImageTexture();
						case "IFCINDEXEDCOLOURMAP" : return new CSiBKK.IFC.IFC4X1.IFCIndexedColourMap();
						case "IFCINDEXEDPOLYCURVE" : return new CSiBKK.IFC.IFC4X1.IFCIndexedPolyCurve();
						case "IFCINDEXEDPOLYGONALFACE" : return new CSiBKK.IFC.IFC4X1.IFCIndexedPolygonalFace();
						case "IFCINDEXEDPOLYGONALFACEWITHVOIDS" : return new CSiBKK.IFC.IFC4X1.IFCIndexedPolygonalFaceWithVoids();
						case "IFCINDEXEDTRIANGLETEXTUREMAP" : return new CSiBKK.IFC.IFC4X1.IFCIndexedTriangleTextureMap();
						case "IFCINTERCEPTOR" : return new CSiBKK.IFC.IFC4X1.IFCInterceptor();
						case "IFCINTERCEPTORTYPE" : return new CSiBKK.IFC.IFC4X1.IFCInterceptorType();
						case "IFCINTERSECTIONCURVE" : return new CSiBKK.IFC.IFC4X1.IFCIntersectionCurve();
						case "IFCINVENTORY" : return new CSiBKK.IFC.IFC4X1.IFCInventory();
						case "IFCIRREGULARTIMESERIES" : return new CSiBKK.IFC.IFC4X1.IFCIrregularTimeSeries();
						case "IFCIRREGULARTIMESERIESVALUE" : return new CSiBKK.IFC.IFC4X1.IFCIrregularTimeSeriesValue();
						case "IFCJUNCTIONBOX" : return new CSiBKK.IFC.IFC4X1.IFCJunctionBox();
						case "IFCJUNCTIONBOXTYPE" : return new CSiBKK.IFC.IFC4X1.IFCJunctionBoxType();
						case "IFCLSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCLShapeProfileDef();
						case "IFCLABORRESOURCE" : return new CSiBKK.IFC.IFC4X1.IFCLaborResource();
						case "IFCLABORRESOURCETYPE" : return new CSiBKK.IFC.IFC4X1.IFCLaborResourceType();
						case "IFCLAGTIME" : return new CSiBKK.IFC.IFC4X1.IFCLagTime();
						case "IFCLAMP" : return new CSiBKK.IFC.IFC4X1.IFCLamp();
						case "IFCLAMPTYPE" : return new CSiBKK.IFC.IFC4X1.IFCLampType();
						case "IFCLIBRARYINFORMATION" : return new CSiBKK.IFC.IFC4X1.IFCLibraryInformation();
						case "IFCLIBRARYREFERENCE" : return new CSiBKK.IFC.IFC4X1.IFCLibraryReference();
						case "IFCLIGHTDISTRIBUTIONDATA" : return new CSiBKK.IFC.IFC4X1.IFCLightDistributionData();
						case "IFCLIGHTFIXTURE" : return new CSiBKK.IFC.IFC4X1.IFCLightFixture();
						case "IFCLIGHTFIXTURETYPE" : return new CSiBKK.IFC.IFC4X1.IFCLightFixtureType();
						case "IFCLIGHTINTENSITYDISTRIBUTION" : return new CSiBKK.IFC.IFC4X1.IFCLightIntensityDistribution();
						case "IFCLIGHTSOURCEAMBIENT" : return new CSiBKK.IFC.IFC4X1.IFCLightSourceAmbient();
						case "IFCLIGHTSOURCEDIRECTIONAL" : return new CSiBKK.IFC.IFC4X1.IFCLightSourceDirectional();
						case "IFCLIGHTSOURCEGONIOMETRIC" : return new CSiBKK.IFC.IFC4X1.IFCLightSourceGoniometric();
						case "IFCLIGHTSOURCEPOSITIONAL" : return new CSiBKK.IFC.IFC4X1.IFCLightSourcePositional();
						case "IFCLIGHTSOURCESPOT" : return new CSiBKK.IFC.IFC4X1.IFCLightSourceSpot();
						case "IFCLINE" : return new CSiBKK.IFC.IFC4X1.IFCLine();
						case "IFCLINESEGMENT2D" : return new CSiBKK.IFC.IFC4X1.IFCLineSegment2D();
						case "IFCLINEARPLACEMENT" : return new CSiBKK.IFC.IFC4X1.IFCLinearPlacement();
						case "IFCLOCALPLACEMENT" : return new CSiBKK.IFC.IFC4X1.IFCLocalPlacement();
						case "IFCLOOP" : return new CSiBKK.IFC.IFC4X1.IFCLoop();
						case "IFCMAPCONVERSION" : return new CSiBKK.IFC.IFC4X1.IFCMapConversion();
						case "IFCMAPPEDITEM" : return new CSiBKK.IFC.IFC4X1.IFCMappedItem();
						case "IFCMATERIAL" : return new CSiBKK.IFC.IFC4X1.IFCMaterial();
						case "IFCMATERIALCLASSIFICATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4X1.IFCMaterialClassificationRelationship();
						case "IFCMATERIALCONSTITUENT" : return new CSiBKK.IFC.IFC4X1.IFCMaterialConstituent();
						case "IFCMATERIALCONSTITUENTSET" : return new CSiBKK.IFC.IFC4X1.IFCMaterialConstituentSet();
						case "IFCMATERIALDEFINITIONREPRESENTATION" : return new CSiBKK.IFC.IFC4X1.IFCMaterialDefinitionRepresentation();
						case "IFCMATERIALLAYER" : return new CSiBKK.IFC.IFC4X1.IFCMaterialLayer();
						case "IFCMATERIALLAYERSET" : return new CSiBKK.IFC.IFC4X1.IFCMaterialLayerSet();
						case "IFCMATERIALLAYERSETUSAGE" : return new CSiBKK.IFC.IFC4X1.IFCMaterialLayerSetUsage();
						case "IFCMATERIALLAYERWITHOFFSETS" : return new CSiBKK.IFC.IFC4X1.IFCMaterialLayerWithOffsets();
						case "IFCMATERIALLIST" : return new CSiBKK.IFC.IFC4X1.IFCMaterialList();
						case "IFCMATERIALPROFILE" : return new CSiBKK.IFC.IFC4X1.IFCMaterialProfile();
						case "IFCMATERIALPROFILESET" : return new CSiBKK.IFC.IFC4X1.IFCMaterialProfileSet();
						case "IFCMATERIALPROFILESETUSAGE" : return new CSiBKK.IFC.IFC4X1.IFCMaterialProfileSetUsage();
						case "IFCMATERIALPROFILESETUSAGETAPERING" : return new CSiBKK.IFC.IFC4X1.IFCMaterialProfileSetUsageTapering();
						case "IFCMATERIALPROFILEWITHOFFSETS" : return new CSiBKK.IFC.IFC4X1.IFCMaterialProfileWithOffsets();
						case "IFCMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCMaterialProperties();
						case "IFCMATERIALRELATIONSHIP" : return new CSiBKK.IFC.IFC4X1.IFCMaterialRelationship();
						case "IFCMEASUREWITHUNIT" : return new CSiBKK.IFC.IFC4X1.IFCMeasureWithUnit();
						case "IFCMECHANICALFASTENER" : return new CSiBKK.IFC.IFC4X1.IFCMechanicalFastener();
						case "IFCMECHANICALFASTENERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCMechanicalFastenerType();
						case "IFCMEDICALDEVICE" : return new CSiBKK.IFC.IFC4X1.IFCMedicalDevice();
						case "IFCMEDICALDEVICETYPE" : return new CSiBKK.IFC.IFC4X1.IFCMedicalDeviceType();
						case "IFCMEMBER" : return new CSiBKK.IFC.IFC4X1.IFCMember();
						case "IFCMEMBERSTANDARDCASE" : return new CSiBKK.IFC.IFC4X1.IFCMemberStandardCase();
						case "IFCMEMBERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCMemberType();
						case "IFCMETRIC" : return new CSiBKK.IFC.IFC4X1.IFCMetric();
						case "IFCMIRROREDPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCMirroredProfileDef();
						case "IFCMONETARYUNIT" : return new CSiBKK.IFC.IFC4X1.IFCMonetaryUnit();
						case "IFCMOTORCONNECTION" : return new CSiBKK.IFC.IFC4X1.IFCMotorConnection();
						case "IFCMOTORCONNECTIONTYPE" : return new CSiBKK.IFC.IFC4X1.IFCMotorConnectionType();
						case "IFCOBJECTIVE" : return new CSiBKK.IFC.IFC4X1.IFCObjective();
						case "IFCOCCUPANT" : return new CSiBKK.IFC.IFC4X1.IFCOccupant();
						case "IFCOFFSETCURVE2D" : return new CSiBKK.IFC.IFC4X1.IFCOffsetCurve2D();
						case "IFCOFFSETCURVE3D" : return new CSiBKK.IFC.IFC4X1.IFCOffsetCurve3D();
						case "IFCOFFSETCURVEBYDISTANCES" : return new CSiBKK.IFC.IFC4X1.IFCOffsetCurveByDistances();
						case "IFCOPENSHELL" : return new CSiBKK.IFC.IFC4X1.IFCOpenShell();
						case "IFCOPENINGELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCOpeningElement();
						case "IFCOPENINGSTANDARDCASE" : return new CSiBKK.IFC.IFC4X1.IFCOpeningStandardCase();
						case "IFCORGANIZATION" : return new CSiBKK.IFC.IFC4X1.IFCOrganization();
						case "IFCORGANIZATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4X1.IFCOrganizationRelationship();
						case "IFCORIENTATIONEXPRESSION" : return new CSiBKK.IFC.IFC4X1.IFCOrientationExpression();
						case "IFCORIENTEDEDGE" : return new CSiBKK.IFC.IFC4X1.IFCOrientedEdge();
						case "IFCOUTERBOUNDARYCURVE" : return new CSiBKK.IFC.IFC4X1.IFCOuterBoundaryCurve();
						case "IFCOUTLET" : return new CSiBKK.IFC.IFC4X1.IFCOutlet();
						case "IFCOUTLETTYPE" : return new CSiBKK.IFC.IFC4X1.IFCOutletType();
						case "IFCOWNERHISTORY" : return new CSiBKK.IFC.IFC4X1.IFCOwnerHistory();
						case "IFCPATH" : return new CSiBKK.IFC.IFC4X1.IFCPath();
						case "IFCPCURVE" : return new CSiBKK.IFC.IFC4X1.IFCPcurve();
						case "IFCPERFORMANCEHISTORY" : return new CSiBKK.IFC.IFC4X1.IFCPerformanceHistory();
						case "IFCPERMEABLECOVERINGPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCPermeableCoveringProperties();
						case "IFCPERMIT" : return new CSiBKK.IFC.IFC4X1.IFCPermit();
						case "IFCPERSON" : return new CSiBKK.IFC.IFC4X1.IFCPerson();
						case "IFCPERSONANDORGANIZATION" : return new CSiBKK.IFC.IFC4X1.IFCPersonAndOrganization();
						case "IFCPHYSICALCOMPLEXQUANTITY" : return new CSiBKK.IFC.IFC4X1.IFCPhysicalComplexQuantity();
						case "IFCPILE" : return new CSiBKK.IFC.IFC4X1.IFCPile();
						case "IFCPILETYPE" : return new CSiBKK.IFC.IFC4X1.IFCPileType();
						case "IFCPIPEFITTING" : return new CSiBKK.IFC.IFC4X1.IFCPipeFitting();
						case "IFCPIPEFITTINGTYPE" : return new CSiBKK.IFC.IFC4X1.IFCPipeFittingType();
						case "IFCPIPESEGMENT" : return new CSiBKK.IFC.IFC4X1.IFCPipeSegment();
						case "IFCPIPESEGMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCPipeSegmentType();
						case "IFCPIXELTEXTURE" : return new CSiBKK.IFC.IFC4X1.IFCPixelTexture();
						case "IFCPLANARBOX" : return new CSiBKK.IFC.IFC4X1.IFCPlanarBox();
						case "IFCPLANAREXTENT" : return new CSiBKK.IFC.IFC4X1.IFCPlanarExtent();
						case "IFCPLANE" : return new CSiBKK.IFC.IFC4X1.IFCPlane();
						case "IFCPLATE" : return new CSiBKK.IFC.IFC4X1.IFCPlate();
						case "IFCPLATESTANDARDCASE" : return new CSiBKK.IFC.IFC4X1.IFCPlateStandardCase();
						case "IFCPLATETYPE" : return new CSiBKK.IFC.IFC4X1.IFCPlateType();
						case "IFCPOINTONCURVE" : return new CSiBKK.IFC.IFC4X1.IFCPointOnCurve();
						case "IFCPOINTONSURFACE" : return new CSiBKK.IFC.IFC4X1.IFCPointOnSurface();
						case "IFCPOLYLOOP" : return new CSiBKK.IFC.IFC4X1.IFCPolyLoop();
						case "IFCPOLYGONALBOUNDEDHALFSPACE" : return new CSiBKK.IFC.IFC4X1.IFCPolygonalBoundedHalfSpace();
						case "IFCPOLYGONALFACESET" : return new CSiBKK.IFC.IFC4X1.IFCPolygonalFaceSet();
						case "IFCPOLYLINE" : return new CSiBKK.IFC.IFC4X1.IFCPolyline();
						case "IFCPOSTALADDRESS" : return new CSiBKK.IFC.IFC4X1.IFCPostalAddress();
						case "IFCPRESENTATIONLAYERASSIGNMENT" : return new CSiBKK.IFC.IFC4X1.IFCPresentationLayerAssignment();
						case "IFCPRESENTATIONLAYERWITHSTYLE" : return new CSiBKK.IFC.IFC4X1.IFCPresentationLayerWithStyle();
						case "IFCPRESENTATIONSTYLEASSIGNMENT" : return new CSiBKK.IFC.IFC4X1.IFCPresentationStyleAssignment();
						case "IFCPROCEDURE" : return new CSiBKK.IFC.IFC4X1.IFCProcedure();
						case "IFCPROCEDURETYPE" : return new CSiBKK.IFC.IFC4X1.IFCProcedureType();
						case "IFCPRODUCTDEFINITIONSHAPE" : return new CSiBKK.IFC.IFC4X1.IFCProductDefinitionShape();
						case "IFCPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCProfileDef();
						case "IFCPROFILEPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCProfileProperties();
						case "IFCPROJECT" : return new CSiBKK.IFC.IFC4X1.IFCProject();
						case "IFCPROJECTLIBRARY" : return new CSiBKK.IFC.IFC4X1.IFCProjectLibrary();
						case "IFCPROJECTORDER" : return new CSiBKK.IFC.IFC4X1.IFCProjectOrder();
						case "IFCPROJECTEDCRS" : return new CSiBKK.IFC.IFC4X1.IFCProjectedCRS();
						case "IFCPROJECTIONELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCProjectionElement();
						case "IFCPROPERTYBOUNDEDVALUE" : return new CSiBKK.IFC.IFC4X1.IFCPropertyBoundedValue();
						case "IFCPROPERTYDEPENDENCYRELATIONSHIP" : return new CSiBKK.IFC.IFC4X1.IFCPropertyDependencyRelationship();
						case "IFCPROPERTYENUMERATEDVALUE" : return new CSiBKK.IFC.IFC4X1.IFCPropertyEnumeratedValue();
						case "IFCPROPERTYENUMERATION" : return new CSiBKK.IFC.IFC4X1.IFCPropertyEnumeration();
						case "IFCPROPERTYLISTVALUE" : return new CSiBKK.IFC.IFC4X1.IFCPropertyListValue();
						case "IFCPROPERTYREFERENCEVALUE" : return new CSiBKK.IFC.IFC4X1.IFCPropertyReferenceValue();
						case "IFCPROPERTYSET" : return new CSiBKK.IFC.IFC4X1.IFCPropertySet();
						case "IFCPROPERTYSETTEMPLATE" : return new CSiBKK.IFC.IFC4X1.IFCPropertySetTemplate();
						case "IFCPROPERTYSINGLEVALUE" : return new CSiBKK.IFC.IFC4X1.IFCPropertySingleValue();
						case "IFCPROPERTYTABLEVALUE" : return new CSiBKK.IFC.IFC4X1.IFCPropertyTableValue();
						case "IFCPROTECTIVEDEVICE" : return new CSiBKK.IFC.IFC4X1.IFCProtectiveDevice();
						case "IFCPROTECTIVEDEVICETRIPPINGUNIT" : return new CSiBKK.IFC.IFC4X1.IFCProtectiveDeviceTrippingUnit();
						case "IFCPROTECTIVEDEVICETRIPPINGUNITTYPE" : return new CSiBKK.IFC.IFC4X1.IFCProtectiveDeviceTrippingUnitType();
						case "IFCPROTECTIVEDEVICETYPE" : return new CSiBKK.IFC.IFC4X1.IFCProtectiveDeviceType();
						case "IFCPROXY" : return new CSiBKK.IFC.IFC4X1.IFCProxy();
						case "IFCPUMP" : return new CSiBKK.IFC.IFC4X1.IFCPump();
						case "IFCPUMPTYPE" : return new CSiBKK.IFC.IFC4X1.IFCPumpType();
						case "IFCQUANTITYAREA" : return new CSiBKK.IFC.IFC4X1.IFCQuantityArea();
						case "IFCQUANTITYCOUNT" : return new CSiBKK.IFC.IFC4X1.IFCQuantityCount();
						case "IFCQUANTITYLENGTH" : return new CSiBKK.IFC.IFC4X1.IFCQuantityLength();
						case "IFCQUANTITYTIME" : return new CSiBKK.IFC.IFC4X1.IFCQuantityTime();
						case "IFCQUANTITYVOLUME" : return new CSiBKK.IFC.IFC4X1.IFCQuantityVolume();
						case "IFCQUANTITYWEIGHT" : return new CSiBKK.IFC.IFC4X1.IFCQuantityWeight();
						case "IFCRAILING" : return new CSiBKK.IFC.IFC4X1.IFCRailing();
						case "IFCRAILINGTYPE" : return new CSiBKK.IFC.IFC4X1.IFCRailingType();
						case "IFCRAMP" : return new CSiBKK.IFC.IFC4X1.IFCRamp();
						case "IFCRAMPFLIGHT" : return new CSiBKK.IFC.IFC4X1.IFCRampFlight();
						case "IFCRAMPFLIGHTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCRampFlightType();
						case "IFCRAMPTYPE" : return new CSiBKK.IFC.IFC4X1.IFCRampType();
						case "IFCRATIONALBSPLINECURVEWITHKNOTS" : return new CSiBKK.IFC.IFC4X1.IFCRationalBSplineCurveWithKnots();
						case "IFCRATIONALBSPLINESURFACEWITHKNOTS" : return new CSiBKK.IFC.IFC4X1.IFCRationalBSplineSurfaceWithKnots();
						case "IFCRECTANGLEHOLLOWPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCRectangleHollowProfileDef();
						case "IFCRECTANGLEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCRectangleProfileDef();
						case "IFCRECTANGULARPYRAMID" : return new CSiBKK.IFC.IFC4X1.IFCRectangularPyramid();
						case "IFCRECTANGULARTRIMMEDSURFACE" : return new CSiBKK.IFC.IFC4X1.IFCRectangularTrimmedSurface();
						case "IFCRECURRENCEPATTERN" : return new CSiBKK.IFC.IFC4X1.IFCRecurrencePattern();
						case "IFCREFERENCE" : return new CSiBKK.IFC.IFC4X1.IFCReference();
						case "IFCREFERENT" : return new CSiBKK.IFC.IFC4X1.IFCReferent();
						case "IFCREGULARTIMESERIES" : return new CSiBKK.IFC.IFC4X1.IFCRegularTimeSeries();
						case "IFCREINFORCEMENTBARPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCReinforcementBarProperties();
						case "IFCREINFORCEMENTDEFINITIONPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCReinforcementDefinitionProperties();
						case "IFCREINFORCINGBAR" : return new CSiBKK.IFC.IFC4X1.IFCReinforcingBar();
						case "IFCREINFORCINGBARTYPE" : return new CSiBKK.IFC.IFC4X1.IFCReinforcingBarType();
						case "IFCREINFORCINGMESH" : return new CSiBKK.IFC.IFC4X1.IFCReinforcingMesh();
						case "IFCREINFORCINGMESHTYPE" : return new CSiBKK.IFC.IFC4X1.IFCReinforcingMeshType();
						case "IFCRELAGGREGATES" : return new CSiBKK.IFC.IFC4X1.IFCRelAggregates();
						case "IFCRELASSIGNSTOACTOR" : return new CSiBKK.IFC.IFC4X1.IFCRelAssignsToActor();
						case "IFCRELASSIGNSTOCONTROL" : return new CSiBKK.IFC.IFC4X1.IFCRelAssignsToControl();
						case "IFCRELASSIGNSTOGROUP" : return new CSiBKK.IFC.IFC4X1.IFCRelAssignsToGroup();
						case "IFCRELASSIGNSTOGROUPBYFACTOR" : return new CSiBKK.IFC.IFC4X1.IFCRelAssignsToGroupByFactor();
						case "IFCRELASSIGNSTOPROCESS" : return new CSiBKK.IFC.IFC4X1.IFCRelAssignsToProcess();
						case "IFCRELASSIGNSTOPRODUCT" : return new CSiBKK.IFC.IFC4X1.IFCRelAssignsToProduct();
						case "IFCRELASSIGNSTORESOURCE" : return new CSiBKK.IFC.IFC4X1.IFCRelAssignsToResource();
						case "IFCRELASSOCIATESAPPROVAL" : return new CSiBKK.IFC.IFC4X1.IFCRelAssociatesApproval();
						case "IFCRELASSOCIATESCLASSIFICATION" : return new CSiBKK.IFC.IFC4X1.IFCRelAssociatesClassification();
						case "IFCRELASSOCIATESCONSTRAINT" : return new CSiBKK.IFC.IFC4X1.IFCRelAssociatesConstraint();
						case "IFCRELASSOCIATESDOCUMENT" : return new CSiBKK.IFC.IFC4X1.IFCRelAssociatesDocument();
						case "IFCRELASSOCIATESLIBRARY" : return new CSiBKK.IFC.IFC4X1.IFCRelAssociatesLibrary();
						case "IFCRELASSOCIATESMATERIAL" : return new CSiBKK.IFC.IFC4X1.IFCRelAssociatesMaterial();
						case "IFCRELCONNECTSELEMENTS" : return new CSiBKK.IFC.IFC4X1.IFCRelConnectsElements();
						case "IFCRELCONNECTSPATHELEMENTS" : return new CSiBKK.IFC.IFC4X1.IFCRelConnectsPathElements();
						case "IFCRELCONNECTSPORTTOELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCRelConnectsPortToElement();
						case "IFCRELCONNECTSPORTS" : return new CSiBKK.IFC.IFC4X1.IFCRelConnectsPorts();
						case "IFCRELCONNECTSSTRUCTURALACTIVITY" : return new CSiBKK.IFC.IFC4X1.IFCRelConnectsStructuralActivity();
						case "IFCRELCONNECTSSTRUCTURALMEMBER" : return new CSiBKK.IFC.IFC4X1.IFCRelConnectsStructuralMember();
						case "IFCRELCONNECTSWITHECCENTRICITY" : return new CSiBKK.IFC.IFC4X1.IFCRelConnectsWithEccentricity();
						case "IFCRELCONNECTSWITHREALIZINGELEMENTS" : return new CSiBKK.IFC.IFC4X1.IFCRelConnectsWithRealizingElements();
						case "IFCRELCONTAINEDINSPATIALSTRUCTURE" : return new CSiBKK.IFC.IFC4X1.IFCRelContainedInSpatialStructure();
						case "IFCRELCOVERSBLDGELEMENTS" : return new CSiBKK.IFC.IFC4X1.IFCRelCoversBldgElements();
						case "IFCRELCOVERSSPACES" : return new CSiBKK.IFC.IFC4X1.IFCRelCoversSpaces();
						case "IFCRELDECLARES" : return new CSiBKK.IFC.IFC4X1.IFCRelDeclares();
						case "IFCRELDEFINESBYOBJECT" : return new CSiBKK.IFC.IFC4X1.IFCRelDefinesByObject();
						case "IFCRELDEFINESBYPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCRelDefinesByProperties();
						case "IFCRELDEFINESBYTEMPLATE" : return new CSiBKK.IFC.IFC4X1.IFCRelDefinesByTemplate();
						case "IFCRELDEFINESBYTYPE" : return new CSiBKK.IFC.IFC4X1.IFCRelDefinesByType();
						case "IFCRELFILLSELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCRelFillsElement();
						case "IFCRELFLOWCONTROLELEMENTS" : return new CSiBKK.IFC.IFC4X1.IFCRelFlowControlElements();
						case "IFCRELINTERFERESELEMENTS" : return new CSiBKK.IFC.IFC4X1.IFCRelInterferesElements();
						case "IFCRELNESTS" : return new CSiBKK.IFC.IFC4X1.IFCRelNests();
						case "IFCRELPROJECTSELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCRelProjectsElement();
						case "IFCRELREFERENCEDINSPATIALSTRUCTURE" : return new CSiBKK.IFC.IFC4X1.IFCRelReferencedInSpatialStructure();
						case "IFCRELSEQUENCE" : return new CSiBKK.IFC.IFC4X1.IFCRelSequence();
						case "IFCRELSERVICESBUILDINGS" : return new CSiBKK.IFC.IFC4X1.IFCRelServicesBuildings();
						case "IFCRELSPACEBOUNDARY" : return new CSiBKK.IFC.IFC4X1.IFCRelSpaceBoundary();
						case "IFCRELSPACEBOUNDARY1STLEVEL" : return new CSiBKK.IFC.IFC4X1.IFCRelSpaceBoundary1stLevel();
						case "IFCRELSPACEBOUNDARY2NDLEVEL" : return new CSiBKK.IFC.IFC4X1.IFCRelSpaceBoundary2ndLevel();
						case "IFCRELVOIDSELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCRelVoidsElement();
						case "IFCREPARAMETRISEDCOMPOSITECURVESEGMENT" : return new CSiBKK.IFC.IFC4X1.IFCReparametrisedCompositeCurveSegment();
						case "IFCREPRESENTATIONMAP" : return new CSiBKK.IFC.IFC4X1.IFCRepresentationMap();
						case "IFCRESOURCEAPPROVALRELATIONSHIP" : return new CSiBKK.IFC.IFC4X1.IFCResourceApprovalRelationship();
						case "IFCRESOURCECONSTRAINTRELATIONSHIP" : return new CSiBKK.IFC.IFC4X1.IFCResourceConstraintRelationship();
						case "IFCRESOURCETIME" : return new CSiBKK.IFC.IFC4X1.IFCResourceTime();
						case "IFCREVOLVEDAREASOLID" : return new CSiBKK.IFC.IFC4X1.IFCRevolvedAreaSolid();
						case "IFCREVOLVEDAREASOLIDTAPERED" : return new CSiBKK.IFC.IFC4X1.IFCRevolvedAreaSolidTapered();
						case "IFCRIGHTCIRCULARCONE" : return new CSiBKK.IFC.IFC4X1.IFCRightCircularCone();
						case "IFCRIGHTCIRCULARCYLINDER" : return new CSiBKK.IFC.IFC4X1.IFCRightCircularCylinder();
						case "IFCROOF" : return new CSiBKK.IFC.IFC4X1.IFCRoof();
						case "IFCROOFTYPE" : return new CSiBKK.IFC.IFC4X1.IFCRoofType();
						case "IFCROUNDEDRECTANGLEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCRoundedRectangleProfileDef();
						case "IFCSIUNIT" : return new CSiBKK.IFC.IFC4X1.IFCSIUnit();
						case "IFCSANITARYTERMINAL" : return new CSiBKK.IFC.IFC4X1.IFCSanitaryTerminal();
						case "IFCSANITARYTERMINALTYPE" : return new CSiBKK.IFC.IFC4X1.IFCSanitaryTerminalType();
						case "IFCSEAMCURVE" : return new CSiBKK.IFC.IFC4X1.IFCSeamCurve();
						case "IFCSECTIONPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCSectionProperties();
						case "IFCSECTIONREINFORCEMENTPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCSectionReinforcementProperties();
						case "IFCSECTIONEDSOLIDHORIZONTAL" : return new CSiBKK.IFC.IFC4X1.IFCSectionedSolidHorizontal();
						case "IFCSECTIONEDSPINE" : return new CSiBKK.IFC.IFC4X1.IFCSectionedSpine();
						case "IFCSENSOR" : return new CSiBKK.IFC.IFC4X1.IFCSensor();
						case "IFCSENSORTYPE" : return new CSiBKK.IFC.IFC4X1.IFCSensorType();
						case "IFCSHADINGDEVICE" : return new CSiBKK.IFC.IFC4X1.IFCShadingDevice();
						case "IFCSHADINGDEVICETYPE" : return new CSiBKK.IFC.IFC4X1.IFCShadingDeviceType();
						case "IFCSHAPEASPECT" : return new CSiBKK.IFC.IFC4X1.IFCShapeAspect();
						case "IFCSHAPEREPRESENTATION" : return new CSiBKK.IFC.IFC4X1.IFCShapeRepresentation();
						case "IFCSHELLBASEDSURFACEMODEL" : return new CSiBKK.IFC.IFC4X1.IFCShellBasedSurfaceModel();
						case "IFCSIMPLEPROPERTYTEMPLATE" : return new CSiBKK.IFC.IFC4X1.IFCSimplePropertyTemplate();
						case "IFCSITE" : return new CSiBKK.IFC.IFC4X1.IFCSite();
						case "IFCSLAB" : return new CSiBKK.IFC.IFC4X1.IFCSlab();
						case "IFCSLABELEMENTEDCASE" : return new CSiBKK.IFC.IFC4X1.IFCSlabElementedCase();
						case "IFCSLABSTANDARDCASE" : return new CSiBKK.IFC.IFC4X1.IFCSlabStandardCase();
						case "IFCSLABTYPE" : return new CSiBKK.IFC.IFC4X1.IFCSlabType();
						case "IFCSLIPPAGECONNECTIONCONDITION" : return new CSiBKK.IFC.IFC4X1.IFCSlippageConnectionCondition();
						case "IFCSOLARDEVICE" : return new CSiBKK.IFC.IFC4X1.IFCSolarDevice();
						case "IFCSOLARDEVICETYPE" : return new CSiBKK.IFC.IFC4X1.IFCSolarDeviceType();
						case "IFCSPACE" : return new CSiBKK.IFC.IFC4X1.IFCSpace();
						case "IFCSPACEHEATER" : return new CSiBKK.IFC.IFC4X1.IFCSpaceHeater();
						case "IFCSPACEHEATERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCSpaceHeaterType();
						case "IFCSPACETYPE" : return new CSiBKK.IFC.IFC4X1.IFCSpaceType();
						case "IFCSPATIALZONE" : return new CSiBKK.IFC.IFC4X1.IFCSpatialZone();
						case "IFCSPATIALZONETYPE" : return new CSiBKK.IFC.IFC4X1.IFCSpatialZoneType();
						case "IFCSPHERE" : return new CSiBKK.IFC.IFC4X1.IFCSphere();
						case "IFCSPHERICALSURFACE" : return new CSiBKK.IFC.IFC4X1.IFCSphericalSurface();
						case "IFCSTACKTERMINAL" : return new CSiBKK.IFC.IFC4X1.IFCStackTerminal();
						case "IFCSTACKTERMINALTYPE" : return new CSiBKK.IFC.IFC4X1.IFCStackTerminalType();
						case "IFCSTAIR" : return new CSiBKK.IFC.IFC4X1.IFCStair();
						case "IFCSTAIRFLIGHT" : return new CSiBKK.IFC.IFC4X1.IFCStairFlight();
						case "IFCSTAIRFLIGHTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCStairFlightType();
						case "IFCSTAIRTYPE" : return new CSiBKK.IFC.IFC4X1.IFCStairType();
						case "IFCSTRUCTURALANALYSISMODEL" : return new CSiBKK.IFC.IFC4X1.IFCStructuralAnalysisModel();
						case "IFCSTRUCTURALCURVEACTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralCurveAction();
						case "IFCSTRUCTURALCURVECONNECTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralCurveConnection();
						case "IFCSTRUCTURALCURVEMEMBER" : return new CSiBKK.IFC.IFC4X1.IFCStructuralCurveMember();
						case "IFCSTRUCTURALCURVEMEMBERVARYING" : return new CSiBKK.IFC.IFC4X1.IFCStructuralCurveMemberVarying();
						case "IFCSTRUCTURALCURVEREACTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralCurveReaction();
						case "IFCSTRUCTURALLINEARACTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralLinearAction();
						case "IFCSTRUCTURALLOADCASE" : return new CSiBKK.IFC.IFC4X1.IFCStructuralLoadCase();
						case "IFCSTRUCTURALLOADCONFIGURATION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralLoadConfiguration();
						case "IFCSTRUCTURALLOADGROUP" : return new CSiBKK.IFC.IFC4X1.IFCStructuralLoadGroup();
						case "IFCSTRUCTURALLOADLINEARFORCE" : return new CSiBKK.IFC.IFC4X1.IFCStructuralLoadLinearForce();
						case "IFCSTRUCTURALLOADPLANARFORCE" : return new CSiBKK.IFC.IFC4X1.IFCStructuralLoadPlanarForce();
						case "IFCSTRUCTURALLOADSINGLEDISPLACEMENT" : return new CSiBKK.IFC.IFC4X1.IFCStructuralLoadSingleDisplacement();
						case "IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralLoadSingleDisplacementDistortion();
						case "IFCSTRUCTURALLOADSINGLEFORCE" : return new CSiBKK.IFC.IFC4X1.IFCStructuralLoadSingleForce();
						case "IFCSTRUCTURALLOADSINGLEFORCEWARPING" : return new CSiBKK.IFC.IFC4X1.IFCStructuralLoadSingleForceWarping();
						case "IFCSTRUCTURALLOADTEMPERATURE" : return new CSiBKK.IFC.IFC4X1.IFCStructuralLoadTemperature();
						case "IFCSTRUCTURALPLANARACTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralPlanarAction();
						case "IFCSTRUCTURALPOINTACTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralPointAction();
						case "IFCSTRUCTURALPOINTCONNECTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralPointConnection();
						case "IFCSTRUCTURALPOINTREACTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralPointReaction();
						case "IFCSTRUCTURALRESULTGROUP" : return new CSiBKK.IFC.IFC4X1.IFCStructuralResultGroup();
						case "IFCSTRUCTURALSURFACEACTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralSurfaceAction();
						case "IFCSTRUCTURALSURFACECONNECTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralSurfaceConnection();
						case "IFCSTRUCTURALSURFACEMEMBER" : return new CSiBKK.IFC.IFC4X1.IFCStructuralSurfaceMember();
						case "IFCSTRUCTURALSURFACEMEMBERVARYING" : return new CSiBKK.IFC.IFC4X1.IFCStructuralSurfaceMemberVarying();
						case "IFCSTRUCTURALSURFACEREACTION" : return new CSiBKK.IFC.IFC4X1.IFCStructuralSurfaceReaction();
						case "IFCSTYLEDITEM" : return new CSiBKK.IFC.IFC4X1.IFCStyledItem();
						case "IFCSTYLEDREPRESENTATION" : return new CSiBKK.IFC.IFC4X1.IFCStyledRepresentation();
						case "IFCSUBCONTRACTRESOURCE" : return new CSiBKK.IFC.IFC4X1.IFCSubContractResource();
						case "IFCSUBCONTRACTRESOURCETYPE" : return new CSiBKK.IFC.IFC4X1.IFCSubContractResourceType();
						case "IFCSUBEDGE" : return new CSiBKK.IFC.IFC4X1.IFCSubedge();
						case "IFCSURFACECURVE" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceCurve();
						case "IFCSURFACECURVESWEPTAREASOLID" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceCurveSweptAreaSolid();
						case "IFCSURFACEFEATURE" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceFeature();
						case "IFCSURFACEOFLINEAREXTRUSION" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceOfLinearExtrusion();
						case "IFCSURFACEOFREVOLUTION" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceOfRevolution();
						case "IFCSURFACEREINFORCEMENTAREA" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceReinforcementArea();
						case "IFCSURFACESTYLE" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceStyle();
						case "IFCSURFACESTYLELIGHTING" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceStyleLighting();
						case "IFCSURFACESTYLEREFRACTION" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceStyleRefraction();
						case "IFCSURFACESTYLERENDERING" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceStyleRendering();
						case "IFCSURFACESTYLESHADING" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceStyleShading();
						case "IFCSURFACESTYLEWITHTEXTURES" : return new CSiBKK.IFC.IFC4X1.IFCSurfaceStyleWithTextures();
						case "IFCSWEPTDISKSOLID" : return new CSiBKK.IFC.IFC4X1.IFCSweptDiskSolid();
						case "IFCSWEPTDISKSOLIDPOLYGONAL" : return new CSiBKK.IFC.IFC4X1.IFCSweptDiskSolidPolygonal();
						case "IFCSWITCHINGDEVICE" : return new CSiBKK.IFC.IFC4X1.IFCSwitchingDevice();
						case "IFCSWITCHINGDEVICETYPE" : return new CSiBKK.IFC.IFC4X1.IFCSwitchingDeviceType();
						case "IFCSYSTEM" : return new CSiBKK.IFC.IFC4X1.IFCSystem();
						case "IFCSYSTEMFURNITUREELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCSystemFurnitureElement();
						case "IFCSYSTEMFURNITUREELEMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCSystemFurnitureElementType();
						case "IFCTSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCTShapeProfileDef();
						case "IFCTABLE" : return new CSiBKK.IFC.IFC4X1.IFCTable();
						case "IFCTABLECOLUMN" : return new CSiBKK.IFC.IFC4X1.IFCTableColumn();
						case "IFCTABLEROW" : return new CSiBKK.IFC.IFC4X1.IFCTableRow();
						case "IFCTANK" : return new CSiBKK.IFC.IFC4X1.IFCTank();
						case "IFCTANKTYPE" : return new CSiBKK.IFC.IFC4X1.IFCTankType();
						case "IFCTASK" : return new CSiBKK.IFC.IFC4X1.IFCTask();
						case "IFCTASKTIME" : return new CSiBKK.IFC.IFC4X1.IFCTaskTime();
						case "IFCTASKTIMERECURRING" : return new CSiBKK.IFC.IFC4X1.IFCTaskTimeRecurring();
						case "IFCTASKTYPE" : return new CSiBKK.IFC.IFC4X1.IFCTaskType();
						case "IFCTELECOMADDRESS" : return new CSiBKK.IFC.IFC4X1.IFCTelecomAddress();
						case "IFCTENDON" : return new CSiBKK.IFC.IFC4X1.IFCTendon();
						case "IFCTENDONANCHOR" : return new CSiBKK.IFC.IFC4X1.IFCTendonAnchor();
						case "IFCTENDONANCHORTYPE" : return new CSiBKK.IFC.IFC4X1.IFCTendonAnchorType();
						case "IFCTENDONTYPE" : return new CSiBKK.IFC.IFC4X1.IFCTendonType();
						case "IFCTEXTLITERAL" : return new CSiBKK.IFC.IFC4X1.IFCTextLiteral();
						case "IFCTEXTLITERALWITHEXTENT" : return new CSiBKK.IFC.IFC4X1.IFCTextLiteralWithExtent();
						case "IFCTEXTSTYLE" : return new CSiBKK.IFC.IFC4X1.IFCTextStyle();
						case "IFCTEXTSTYLEFONTMODEL" : return new CSiBKK.IFC.IFC4X1.IFCTextStyleFontModel();
						case "IFCTEXTSTYLEFORDEFINEDFONT" : return new CSiBKK.IFC.IFC4X1.IFCTextStyleForDefinedFont();
						case "IFCTEXTSTYLETEXTMODEL" : return new CSiBKK.IFC.IFC4X1.IFCTextStyleTextModel();
						case "IFCTEXTURECOORDINATEGENERATOR" : return new CSiBKK.IFC.IFC4X1.IFCTextureCoordinateGenerator();
						case "IFCTEXTUREMAP" : return new CSiBKK.IFC.IFC4X1.IFCTextureMap();
						case "IFCTEXTUREVERTEX" : return new CSiBKK.IFC.IFC4X1.IFCTextureVertex();
						case "IFCTEXTUREVERTEXLIST" : return new CSiBKK.IFC.IFC4X1.IFCTextureVertexList();
						case "IFCTIMEPERIOD" : return new CSiBKK.IFC.IFC4X1.IFCTimePeriod();
						case "IFCTIMESERIESVALUE" : return new CSiBKK.IFC.IFC4X1.IFCTimeSeriesValue();
						case "IFCTOPOLOGYREPRESENTATION" : return new CSiBKK.IFC.IFC4X1.IFCTopologyRepresentation();
						case "IFCTOROIDALSURFACE" : return new CSiBKK.IFC.IFC4X1.IFCToroidalSurface();
						case "IFCTRANSFORMER" : return new CSiBKK.IFC.IFC4X1.IFCTransformer();
						case "IFCTRANSFORMERTYPE" : return new CSiBKK.IFC.IFC4X1.IFCTransformerType();
						case "IFCTRANSITIONCURVESEGMENT2D" : return new CSiBKK.IFC.IFC4X1.IFCTransitionCurveSegment2D();
						case "IFCTRANSPORTELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCTransportElement();
						case "IFCTRANSPORTELEMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCTransportElementType();
						case "IFCTRAPEZIUMPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCTrapeziumProfileDef();
						case "IFCTRIANGULATEDFACESET" : return new CSiBKK.IFC.IFC4X1.IFCTriangulatedFaceSet();
						case "IFCTRIANGULATEDIRREGULARNETWORK" : return new CSiBKK.IFC.IFC4X1.IFCTriangulatedIrregularNetwork();
						case "IFCTRIMMEDCURVE" : return new CSiBKK.IFC.IFC4X1.IFCTrimmedCurve();
						case "IFCTUBEBUNDLE" : return new CSiBKK.IFC.IFC4X1.IFCTubeBundle();
						case "IFCTUBEBUNDLETYPE" : return new CSiBKK.IFC.IFC4X1.IFCTubeBundleType();
						case "IFCTYPEOBJECT" : return new CSiBKK.IFC.IFC4X1.IFCTypeObject();
						case "IFCTYPEPRODUCT" : return new CSiBKK.IFC.IFC4X1.IFCTypeProduct();
						case "IFCUSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCUShapeProfileDef();
						case "IFCUNITASSIGNMENT" : return new CSiBKK.IFC.IFC4X1.IFCUnitAssignment();
						case "IFCUNITARYCONTROLELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCUnitaryControlElement();
						case "IFCUNITARYCONTROLELEMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCUnitaryControlElementType();
						case "IFCUNITARYEQUIPMENT" : return new CSiBKK.IFC.IFC4X1.IFCUnitaryEquipment();
						case "IFCUNITARYEQUIPMENTTYPE" : return new CSiBKK.IFC.IFC4X1.IFCUnitaryEquipmentType();
						case "IFCVALVE" : return new CSiBKK.IFC.IFC4X1.IFCValve();
						case "IFCVALVETYPE" : return new CSiBKK.IFC.IFC4X1.IFCValveType();
						case "IFCVECTOR" : return new CSiBKK.IFC.IFC4X1.IFCVector();
						case "IFCVERTEX" : return new CSiBKK.IFC.IFC4X1.IFCVertex();
						case "IFCVERTEXLOOP" : return new CSiBKK.IFC.IFC4X1.IFCVertexLoop();
						case "IFCVERTEXPOINT" : return new CSiBKK.IFC.IFC4X1.IFCVertexPoint();
						case "IFCVIBRATIONISOLATOR" : return new CSiBKK.IFC.IFC4X1.IFCVibrationIsolator();
						case "IFCVIBRATIONISOLATORTYPE" : return new CSiBKK.IFC.IFC4X1.IFCVibrationIsolatorType();
						case "IFCVIRTUALELEMENT" : return new CSiBKK.IFC.IFC4X1.IFCVirtualElement();
						case "IFCVIRTUALGRIDINTERSECTION" : return new CSiBKK.IFC.IFC4X1.IFCVirtualGridIntersection();
						case "IFCVOIDINGFEATURE" : return new CSiBKK.IFC.IFC4X1.IFCVoidingFeature();
						case "IFCWALL" : return new CSiBKK.IFC.IFC4X1.IFCWall();
						case "IFCWALLELEMENTEDCASE" : return new CSiBKK.IFC.IFC4X1.IFCWallElementedCase();
						case "IFCWALLSTANDARDCASE" : return new CSiBKK.IFC.IFC4X1.IFCWallStandardCase();
						case "IFCWALLTYPE" : return new CSiBKK.IFC.IFC4X1.IFCWallType();
						case "IFCWASTETERMINAL" : return new CSiBKK.IFC.IFC4X1.IFCWasteTerminal();
						case "IFCWASTETERMINALTYPE" : return new CSiBKK.IFC.IFC4X1.IFCWasteTerminalType();
						case "IFCWINDOW" : return new CSiBKK.IFC.IFC4X1.IFCWindow();
						case "IFCWINDOWLININGPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCWindowLiningProperties();
						case "IFCWINDOWPANELPROPERTIES" : return new CSiBKK.IFC.IFC4X1.IFCWindowPanelProperties();
						case "IFCWINDOWSTANDARDCASE" : return new CSiBKK.IFC.IFC4X1.IFCWindowStandardCase();
						case "IFCWINDOWSTYLE" : return new CSiBKK.IFC.IFC4X1.IFCWindowStyle();
						case "IFCWINDOWTYPE" : return new CSiBKK.IFC.IFC4X1.IFCWindowType();
						case "IFCWORKCALENDAR" : return new CSiBKK.IFC.IFC4X1.IFCWorkCalendar();
						case "IFCWORKPLAN" : return new CSiBKK.IFC.IFC4X1.IFCWorkPlan();
						case "IFCWORKSCHEDULE" : return new CSiBKK.IFC.IFC4X1.IFCWorkSchedule();
						case "IFCWORKTIME" : return new CSiBKK.IFC.IFC4X1.IFCWorkTime();
						case "IFCZSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X1.IFCZShapeProfileDef();
						case "IFCZONE" : return new CSiBKK.IFC.IFC4X1.IFCZone();
					}
				break;
				case IFC_VERSION.IFC4X2:
					switch (className)
					{
						case "IFCABSORBEDDOSEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCAbsorbedDoseMeasure();
						case "IFCACCELERATIONMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCAccelerationMeasure();
						case "IFCAMOUNTOFSUBSTANCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCAmountOfSubstanceMeasure();
						case "IFCANGULARVELOCITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCAngularVelocityMeasure();
						case "IFCAREADENSITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCAreaDensityMeasure();
						case "IFCAREAMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCAreaMeasure();
						case "IFCBINARY" : return new CSiBKK.IFC.IFC4X2.IFCBinary();
						case "IFCBOOLEAN" : return new CSiBKK.IFC.IFC4X2.IFCBoolean();
						case "IFCBOXALIGNMENT" : return new CSiBKK.IFC.IFC4X2.IFCBoxAlignment();
						case "IFCCARDINALPOINTREFERENCE" : return new CSiBKK.IFC.IFC4X2.IFCCardinalPointReference();
						case "IFCCONTEXTDEPENDENTMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCContextDependentMeasure();
						case "IFCCOUNTMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCCountMeasure();
						case "IFCCURVATUREMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCCurvatureMeasure();
						case "IFCDATE" : return new CSiBKK.IFC.IFC4X2.IFCDate();
						case "IFCDATETIME" : return new CSiBKK.IFC.IFC4X2.IFCDateTime();
						case "IFCDAYINMONTHNUMBER" : return new CSiBKK.IFC.IFC4X2.IFCDayInMonthNumber();
						case "IFCDAYINWEEKNUMBER" : return new CSiBKK.IFC.IFC4X2.IFCDayInWeekNumber();
						case "IFCDESCRIPTIVEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCDescriptiveMeasure();
						case "IFCDIMENSIONCOUNT" : return new CSiBKK.IFC.IFC4X2.IFCDimensionCount();
						case "IFCDOSEEQUIVALENTMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCDoseEquivalentMeasure();
						case "IFCDURATION" : return new CSiBKK.IFC.IFC4X2.IFCDuration();
						case "IFCDYNAMICVISCOSITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCDynamicViscosityMeasure();
						case "IFCELECTRICCAPACITANCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCElectricCapacitanceMeasure();
						case "IFCELECTRICCHARGEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCElectricChargeMeasure();
						case "IFCELECTRICCONDUCTANCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCElectricConductanceMeasure();
						case "IFCELECTRICCURRENTMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCElectricCurrentMeasure();
						case "IFCELECTRICRESISTANCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCElectricResistanceMeasure();
						case "IFCELECTRICVOLTAGEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCElectricVoltageMeasure();
						case "IFCENERGYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCEnergyMeasure();
						case "IFCFONTSTYLE" : return new CSiBKK.IFC.IFC4X2.IFCFontStyle();
						case "IFCFONTVARIANT" : return new CSiBKK.IFC.IFC4X2.IFCFontVariant();
						case "IFCFONTWEIGHT" : return new CSiBKK.IFC.IFC4X2.IFCFontWeight();
						case "IFCFORCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCForceMeasure();
						case "IFCFREQUENCYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCFrequencyMeasure();
						case "IFCGLOBALLYUNIQUEID" : return new CSiBKK.IFC.IFC4X2.IFCGloballyUniqueId();
						case "IFCHEATFLUXDENSITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCHeatFluxDensityMeasure();
						case "IFCHEATINGVALUEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCHeatingValueMeasure();
						case "IFCIDENTIFIER" : return new CSiBKK.IFC.IFC4X2.IFCIdentifier();
						case "IFCILLUMINANCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCIlluminanceMeasure();
						case "IFCINDUCTANCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCInductanceMeasure();
						case "IFCINTEGER" : return new CSiBKK.IFC.IFC4X2.IFCInteger();
						case "IFCINTEGERCOUNTRATEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCIntegerCountRateMeasure();
						case "IFCIONCONCENTRATIONMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCIonConcentrationMeasure();
						case "IFCISOTHERMALMOISTURECAPACITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCIsothermalMoistureCapacityMeasure();
						case "IFCKINEMATICVISCOSITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCKinematicViscosityMeasure();
						case "IFCLABEL" : return new CSiBKK.IFC.IFC4X2.IFCLabel();
						case "IFCLANGUAGEID" : return new CSiBKK.IFC.IFC4X2.IFCLanguageId();
						case "IFCLENGTHMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCLengthMeasure();
						case "IFCLINEARFORCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCLinearForceMeasure();
						case "IFCLINEARMOMENTMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCLinearMomentMeasure();
						case "IFCLINEARSTIFFNESSMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCLinearStiffnessMeasure();
						case "IFCLINEARVELOCITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCLinearVelocityMeasure();
						case "IFCLOGICAL" : return new CSiBKK.IFC.IFC4X2.IFCLogical();
						case "IFCLUMINOUSFLUXMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCLuminousFluxMeasure();
						case "IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCLuminousIntensityDistributionMeasure();
						case "IFCLUMINOUSINTENSITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCLuminousIntensityMeasure();
						case "IFCMAGNETICFLUXDENSITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCMagneticFluxDensityMeasure();
						case "IFCMAGNETICFLUXMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCMagneticFluxMeasure();
						case "IFCMASSDENSITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCMassDensityMeasure();
						case "IFCMASSFLOWRATEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCMassFlowRateMeasure();
						case "IFCMASSMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCMassMeasure();
						case "IFCMASSPERLENGTHMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCMassPerLengthMeasure();
						case "IFCMODULUSOFELASTICITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCModulusOfElasticityMeasure();
						case "IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCModulusOfLinearSubgradeReactionMeasure();
						case "IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCModulusOfRotationalSubgradeReactionMeasure();
						case "IFCMODULUSOFSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCModulusOfSubgradeReactionMeasure();
						case "IFCMOISTUREDIFFUSIVITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCMoistureDiffusivityMeasure();
						case "IFCMOLECULARWEIGHTMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCMolecularWeightMeasure();
						case "IFCMOMENTOFINERTIAMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCMomentOfInertiaMeasure();
						case "IFCMONETARYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCMonetaryMeasure();
						case "IFCMONTHINYEARNUMBER" : return new CSiBKK.IFC.IFC4X2.IFCMonthInYearNumber();
						case "IFCNONNEGATIVELENGTHMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCNonNegativeLengthMeasure();
						case "IFCNORMALISEDRATIOMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCNormalisedRatioMeasure();
						case "IFCNUMERICMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCNumericMeasure();
						case "IFCPHMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCPHMeasure();
						case "IFCPARAMETERVALUE" : return new CSiBKK.IFC.IFC4X2.IFCParameterValue();
						case "IFCPLANARFORCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCPlanarForceMeasure();
						case "IFCPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCPlaneAngleMeasure();
						case "IFCPOSITIVEINTEGER" : return new CSiBKK.IFC.IFC4X2.IFCPositiveInteger();
						case "IFCPOSITIVELENGTHMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCPositiveLengthMeasure();
						case "IFCPOSITIVEPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCPositivePlaneAngleMeasure();
						case "IFCPOSITIVERATIOMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCPositiveRatioMeasure();
						case "IFCPOWERMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCPowerMeasure();
						case "IFCPRESENTABLETEXT" : return new CSiBKK.IFC.IFC4X2.IFCPresentableText();
						case "IFCPRESSUREMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCPressureMeasure();
						case "IFCRADIOACTIVITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCRadioActivityMeasure();
						case "IFCRATIOMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCRatioMeasure();
						case "IFCREAL" : return new CSiBKK.IFC.IFC4X2.IFCReal();
						case "IFCROTATIONALFREQUENCYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCRotationalFrequencyMeasure();
						case "IFCROTATIONALMASSMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCRotationalMassMeasure();
						case "IFCROTATIONALSTIFFNESSMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCRotationalStiffnessMeasure();
						case "IFCSECTIONMODULUSMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCSectionModulusMeasure();
						case "IFCSECTIONALAREAINTEGRALMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCSectionalAreaIntegralMeasure();
						case "IFCSHEARMODULUSMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCShearModulusMeasure();
						case "IFCSOLIDANGLEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCSolidAngleMeasure();
						case "IFCSOUNDPOWERLEVELMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCSoundPowerLevelMeasure();
						case "IFCSOUNDPOWERMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCSoundPowerMeasure();
						case "IFCSOUNDPRESSURELEVELMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCSoundPressureLevelMeasure();
						case "IFCSOUNDPRESSUREMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCSoundPressureMeasure();
						case "IFCSPECIFICHEATCAPACITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCSpecificHeatCapacityMeasure();
						case "IFCSPECULAREXPONENT" : return new CSiBKK.IFC.IFC4X2.IFCSpecularExponent();
						case "IFCSPECULARROUGHNESS" : return new CSiBKK.IFC.IFC4X2.IFCSpecularRoughness();
						case "IFCTEMPERATUREGRADIENTMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCTemperatureGradientMeasure();
						case "IFCTEMPERATURERATEOFCHANGEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCTemperatureRateOfChangeMeasure();
						case "IFCTEXT" : return new CSiBKK.IFC.IFC4X2.IFCText();
						case "IFCTEXTALIGNMENT" : return new CSiBKK.IFC.IFC4X2.IFCTextAlignment();
						case "IFCTEXTDECORATION" : return new CSiBKK.IFC.IFC4X2.IFCTextDecoration();
						case "IFCTEXTFONTNAME" : return new CSiBKK.IFC.IFC4X2.IFCTextFontName();
						case "IFCTEXTTRANSFORMATION" : return new CSiBKK.IFC.IFC4X2.IFCTextTransformation();
						case "IFCTHERMALADMITTANCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCThermalAdmittanceMeasure();
						case "IFCTHERMALCONDUCTIVITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCThermalConductivityMeasure();
						case "IFCTHERMALEXPANSIONCOEFFICIENTMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCThermalExpansionCoefficientMeasure();
						case "IFCTHERMALRESISTANCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCThermalResistanceMeasure();
						case "IFCTHERMALTRANSMITTANCEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCThermalTransmittanceMeasure();
						case "IFCTHERMODYNAMICTEMPERATUREMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCThermodynamicTemperatureMeasure();
						case "IFCTIME" : return new CSiBKK.IFC.IFC4X2.IFCTime();
						case "IFCTIMEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCTimeMeasure();
						case "IFCTIMESTAMP" : return new CSiBKK.IFC.IFC4X2.IFCTimeStamp();
						case "IFCTORQUEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCTorqueMeasure();
						case "IFCURIREFERENCE" : return new CSiBKK.IFC.IFC4X2.IFCURIReference();
						case "IFCVAPORPERMEABILITYMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCVaporPermeabilityMeasure();
						case "IFCVOLUMEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCVolumeMeasure();
						case "IFCVOLUMETRICFLOWRATEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCVolumetricFlowRateMeasure();
						case "IFCWARPINGCONSTANTMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCWarpingConstantMeasure();
						case "IFCWARPINGMOMENTMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCWarpingMomentMeasure();
						case "IFCARCINDEX" : return new CSiBKK.IFC.IFC4X2.IFCArcIndex();
						case "IFCCOMPLEXNUMBER" : return new CSiBKK.IFC.IFC4X2.IFCComplexNumber();
						case "IFCCOMPOUNDPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4X2.IFCCompoundPlaneAngleMeasure();
						case "IFCLINEINDEX" : return new CSiBKK.IFC.IFC4X2.IFCLineIndex();
						case "IFCPROPERTYSETDEFINITIONSET" : return new CSiBKK.IFC.IFC4X2.IFCPropertySetDefinitionSet();
						case "IFCACTIONREQUESTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCActionRequestTypeEnum();
						case "IFCACTIONSOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCActionSourceTypeEnum();
						case "IFCACTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCActionTypeEnum();
						case "IFCACTUATORTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCActuatorTypeEnum();
						case "IFCADDRESSTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCAddressTypeEnum();
						case "IFCAIRTERMINALBOXTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCAirTerminalBoxTypeEnum();
						case "IFCAIRTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCAirTerminalTypeEnum();
						case "IFCAIRTOAIRHEATRECOVERYTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCAirToAirHeatRecoveryTypeEnum();
						case "IFCALARMTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCAlarmTypeEnum();
						case "IFCALIGNMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCAlignmentTypeEnum();
						case "IFCANALYSISMODELTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCAnalysisModelTypeEnum();
						case "IFCANALYSISTHEORYTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCAnalysisTheoryTypeEnum();
						case "IFCARITHMETICOPERATORENUM" : return new CSiBKK.IFC.IFC4X2.IFCArithmeticOperatorEnum();
						case "IFCASSEMBLYPLACEENUM" : return new CSiBKK.IFC.IFC4X2.IFCAssemblyPlaceEnum();
						case "IFCAUDIOVISUALAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCAudioVisualApplianceTypeEnum();
						case "IFCBSPLINECURVEFORM" : return new CSiBKK.IFC.IFC4X2.IFCBSplineCurveForm();
						case "IFCBSPLINESURFACEFORM" : return new CSiBKK.IFC.IFC4X2.IFCBSplineSurfaceForm();
						case "IFCBEAMTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCBeamTypeEnum();
						case "IFCBEARINGTYPEDISPLACEMENTENUM" : return new CSiBKK.IFC.IFC4X2.IFCBearingTypeDisplacementEnum();
						case "IFCBEARINGTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCBearingTypeEnum();
						case "IFCBENCHMARKENUM" : return new CSiBKK.IFC.IFC4X2.IFCBenchmarkEnum();
						case "IFCBOILERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCBoilerTypeEnum();
						case "IFCBOOLEANOPERATOR" : return new CSiBKK.IFC.IFC4X2.IFCBooleanOperator();
						case "IFCBRIDGEPARTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCBridgePartTypeEnum();
						case "IFCBRIDGETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCBridgeTypeEnum();
						case "IFCBUILDINGELEMENTPARTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCBuildingElementPartTypeEnum();
						case "IFCBUILDINGELEMENTPROXYTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCBuildingElementProxyTypeEnum();
						case "IFCBUILDINGSYSTEMTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCBuildingSystemTypeEnum();
						case "IFCBURNERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCBurnerTypeEnum();
						case "IFCCABLECARRIERFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCableCarrierFittingTypeEnum();
						case "IFCCABLECARRIERSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCableCarrierSegmentTypeEnum();
						case "IFCCABLEFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCableFittingTypeEnum();
						case "IFCCABLESEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCableSegmentTypeEnum();
						case "IFCCAISSONFOUNDATIONTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCaissonFoundationTypeEnum();
						case "IFCCHANGEACTIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCChangeActionEnum();
						case "IFCCHILLERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCChillerTypeEnum();
						case "IFCCHIMNEYTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCChimneyTypeEnum();
						case "IFCCOILTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCoilTypeEnum();
						case "IFCCOLUMNTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCColumnTypeEnum();
						case "IFCCOMMUNICATIONSAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCommunicationsApplianceTypeEnum();
						case "IFCCOMPLEXPROPERTYTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCComplexPropertyTemplateTypeEnum();
						case "IFCCOMPRESSORTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCompressorTypeEnum();
						case "IFCCONDENSERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCondenserTypeEnum();
						case "IFCCONNECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCConnectionTypeEnum();
						case "IFCCONSTRAINTENUM" : return new CSiBKK.IFC.IFC4X2.IFCConstraintEnum();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCConstructionEquipmentResourceTypeEnum();
						case "IFCCONSTRUCTIONMATERIALRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCConstructionMaterialResourceTypeEnum();
						case "IFCCONSTRUCTIONPRODUCTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCConstructionProductResourceTypeEnum();
						case "IFCCONTROLLERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCControllerTypeEnum();
						case "IFCCOOLEDBEAMTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCooledBeamTypeEnum();
						case "IFCCOOLINGTOWERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCoolingTowerTypeEnum();
						case "IFCCOSTITEMTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCostItemTypeEnum();
						case "IFCCOSTSCHEDULETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCostScheduleTypeEnum();
						case "IFCCOVERINGTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCoveringTypeEnum();
						case "IFCCREWRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCrewResourceTypeEnum();
						case "IFCCURTAINWALLTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCCurtainWallTypeEnum();
						case "IFCCURVEINTERPOLATIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCCurveInterpolationEnum();
						case "IFCDAMPERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCDamperTypeEnum();
						case "IFCDATAORIGINENUM" : return new CSiBKK.IFC.IFC4X2.IFCDataOriginEnum();
						case "IFCDERIVEDUNITENUM" : return new CSiBKK.IFC.IFC4X2.IFCDerivedUnitEnum();
						case "IFCDIRECTIONSENSEENUM" : return new CSiBKK.IFC.IFC4X2.IFCDirectionSenseEnum();
						case "IFCDISCRETEACCESSORYTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCDiscreteAccessoryTypeEnum();
						case "IFCDISTRIBUTIONCHAMBERELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCDistributionChamberElementTypeEnum();
						case "IFCDISTRIBUTIONPORTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCDistributionPortTypeEnum();
						case "IFCDISTRIBUTIONSYSTEMENUM" : return new CSiBKK.IFC.IFC4X2.IFCDistributionSystemEnum();
						case "IFCDOCUMENTCONFIDENTIALITYENUM" : return new CSiBKK.IFC.IFC4X2.IFCDocumentConfidentialityEnum();
						case "IFCDOCUMENTSTATUSENUM" : return new CSiBKK.IFC.IFC4X2.IFCDocumentStatusEnum();
						case "IFCDOORPANELOPERATIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCDoorPanelOperationEnum();
						case "IFCDOORPANELPOSITIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCDoorPanelPositionEnum();
						case "IFCDOORSTYLECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCDoorStyleConstructionEnum();
						case "IFCDOORSTYLEOPERATIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCDoorStyleOperationEnum();
						case "IFCDOORTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCDoorTypeEnum();
						case "IFCDOORTYPEOPERATIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCDoorTypeOperationEnum();
						case "IFCDUCTFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCDuctFittingTypeEnum();
						case "IFCDUCTSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCDuctSegmentTypeEnum();
						case "IFCDUCTSILENCERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCDuctSilencerTypeEnum();
						case "IFCELECTRICAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCElectricApplianceTypeEnum();
						case "IFCELECTRICDISTRIBUTIONBOARDTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCElectricDistributionBoardTypeEnum();
						case "IFCELECTRICFLOWSTORAGEDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCElectricFlowStorageDeviceTypeEnum();
						case "IFCELECTRICGENERATORTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCElectricGeneratorTypeEnum();
						case "IFCELECTRICMOTORTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCElectricMotorTypeEnum();
						case "IFCELECTRICTIMECONTROLTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCElectricTimeControlTypeEnum();
						case "IFCELEMENTASSEMBLYTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCElementAssemblyTypeEnum();
						case "IFCELEMENTCOMPOSITIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCElementCompositionEnum();
						case "IFCENGINETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCEngineTypeEnum();
						case "IFCEVAPORATIVECOOLERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCEvaporativeCoolerTypeEnum();
						case "IFCEVAPORATORTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCEvaporatorTypeEnum();
						case "IFCEVENTTRIGGERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCEventTriggerTypeEnum();
						case "IFCEVENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCEventTypeEnum();
						case "IFCEXTERNALSPATIALELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCExternalSpatialElementTypeEnum();
						case "IFCFANTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCFanTypeEnum();
						case "IFCFASTENERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCFastenerTypeEnum();
						case "IFCFILTERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCFilterTypeEnum();
						case "IFCFIRESUPPRESSIONTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCFireSuppressionTerminalTypeEnum();
						case "IFCFLOWDIRECTIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCFlowDirectionEnum();
						case "IFCFLOWINSTRUMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCFlowInstrumentTypeEnum();
						case "IFCFLOWMETERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCFlowMeterTypeEnum();
						case "IFCFOOTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCFootingTypeEnum();
						case "IFCFURNITURETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCFurnitureTypeEnum();
						case "IFCGEOGRAPHICELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCGeographicElementTypeEnum();
						case "IFCGEOMETRICPROJECTIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCGeometricProjectionEnum();
						case "IFCGLOBALORLOCALENUM" : return new CSiBKK.IFC.IFC4X2.IFCGlobalOrLocalEnum();
						case "IFCGRIDTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCGridTypeEnum();
						case "IFCHEATEXCHANGERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCHeatExchangerTypeEnum();
						case "IFCHUMIDIFIERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCHumidifierTypeEnum();
						case "IFCINTERCEPTORTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCInterceptorTypeEnum();
						case "IFCINTERNALOREXTERNALENUM" : return new CSiBKK.IFC.IFC4X2.IFCInternalOrExternalEnum();
						case "IFCINVENTORYTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCInventoryTypeEnum();
						case "IFCJUNCTIONBOXTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCJunctionBoxTypeEnum();
						case "IFCKNOTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCKnotType();
						case "IFCLABORRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCLaborResourceTypeEnum();
						case "IFCLAMPTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCLampTypeEnum();
						case "IFCLAYERSETDIRECTIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCLayerSetDirectionEnum();
						case "IFCLIGHTDISTRIBUTIONCURVEENUM" : return new CSiBKK.IFC.IFC4X2.IFCLightDistributionCurveEnum();
						case "IFCLIGHTEMISSIONSOURCEENUM" : return new CSiBKK.IFC.IFC4X2.IFCLightEmissionSourceEnum();
						case "IFCLIGHTFIXTURETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCLightFixtureTypeEnum();
						case "IFCLOADGROUPTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCLoadGroupTypeEnum();
						case "IFCLOGICALOPERATORENUM" : return new CSiBKK.IFC.IFC4X2.IFCLogicalOperatorEnum();
						case "IFCMECHANICALFASTENERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCMechanicalFastenerTypeEnum();
						case "IFCMEDICALDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCMedicalDeviceTypeEnum();
						case "IFCMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCMemberTypeEnum();
						case "IFCMOTORCONNECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCMotorConnectionTypeEnum();
						case "IFCNULLSTYLE" : return new CSiBKK.IFC.IFC4X2.IFCNullStyle();
						case "IFCOBJECTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCObjectTypeEnum();
						case "IFCOBJECTIVEENUM" : return new CSiBKK.IFC.IFC4X2.IFCObjectiveEnum();
						case "IFCOCCUPANTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCOccupantTypeEnum();
						case "IFCOPENINGELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCOpeningElementTypeEnum();
						case "IFCOUTLETTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCOutletTypeEnum();
						case "IFCPERFORMANCEHISTORYTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCPerformanceHistoryTypeEnum();
						case "IFCPERMEABLECOVERINGOPERATIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCPermeableCoveringOperationEnum();
						case "IFCPERMITTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCPermitTypeEnum();
						case "IFCPHYSICALORVIRTUALENUM" : return new CSiBKK.IFC.IFC4X2.IFCPhysicalOrVirtualEnum();
						case "IFCPILECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCPileConstructionEnum();
						case "IFCPILETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCPileTypeEnum();
						case "IFCPIPEFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCPipeFittingTypeEnum();
						case "IFCPIPESEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCPipeSegmentTypeEnum();
						case "IFCPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCPlateTypeEnum();
						case "IFCPREFERREDSURFACECURVEREPRESENTATION" : return new CSiBKK.IFC.IFC4X2.IFCPreferredSurfaceCurveRepresentation();
						case "IFCPROCEDURETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCProcedureTypeEnum();
						case "IFCPROFILETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCProfileTypeEnum();
						case "IFCPROJECTORDERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCProjectOrderTypeEnum();
						case "IFCPROJECTEDORTRUELENGTHENUM" : return new CSiBKK.IFC.IFC4X2.IFCProjectedOrTrueLengthEnum();
						case "IFCPROJECTIONELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCProjectionElementTypeEnum();
						case "IFCPROPERTYSETTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCPropertySetTemplateTypeEnum();
						case "IFCPROTECTIVEDEVICETRIPPINGUNITTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCProtectiveDeviceTrippingUnitTypeEnum();
						case "IFCPROTECTIVEDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCProtectiveDeviceTypeEnum();
						case "IFCPUMPTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCPumpTypeEnum();
						case "IFCRAILINGTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCRailingTypeEnum();
						case "IFCRAMPFLIGHTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCRampFlightTypeEnum();
						case "IFCRAMPTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCRampTypeEnum();
						case "IFCRECURRENCETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCRecurrenceTypeEnum();
						case "IFCREFERENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCReferentTypeEnum();
						case "IFCREFLECTANCEMETHODENUM" : return new CSiBKK.IFC.IFC4X2.IFCReflectanceMethodEnum();
						case "IFCREINFORCINGBARROLEENUM" : return new CSiBKK.IFC.IFC4X2.IFCReinforcingBarRoleEnum();
						case "IFCREINFORCINGBARSURFACEENUM" : return new CSiBKK.IFC.IFC4X2.IFCReinforcingBarSurfaceEnum();
						case "IFCREINFORCINGBARTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCReinforcingBarTypeEnum();
						case "IFCREINFORCINGMESHTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCReinforcingMeshTypeEnum();
						case "IFCROLEENUM" : return new CSiBKK.IFC.IFC4X2.IFCRoleEnum();
						case "IFCROOFTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCRoofTypeEnum();
						case "IFCSIPREFIX" : return new CSiBKK.IFC.IFC4X2.IFCSIPrefix();
						case "IFCSIUNITNAME" : return new CSiBKK.IFC.IFC4X2.IFCSIUnitName();
						case "IFCSANITARYTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSanitaryTerminalTypeEnum();
						case "IFCSECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSectionTypeEnum();
						case "IFCSENSORTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSensorTypeEnum();
						case "IFCSEQUENCEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSequenceEnum();
						case "IFCSHADINGDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCShadingDeviceTypeEnum();
						case "IFCSIMPLEPROPERTYTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSimplePropertyTemplateTypeEnum();
						case "IFCSLABTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSlabTypeEnum();
						case "IFCSOLARDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSolarDeviceTypeEnum();
						case "IFCSPACEHEATERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSpaceHeaterTypeEnum();
						case "IFCSPACETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSpaceTypeEnum();
						case "IFCSPATIALZONETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSpatialZoneTypeEnum();
						case "IFCSTACKTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCStackTerminalTypeEnum();
						case "IFCSTAIRFLIGHTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCStairFlightTypeEnum();
						case "IFCSTAIRTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCStairTypeEnum();
						case "IFCSTATEENUM" : return new CSiBKK.IFC.IFC4X2.IFCStateEnum();
						case "IFCSTRUCTURALCURVEACTIVITYTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCStructuralCurveActivityTypeEnum();
						case "IFCSTRUCTURALCURVEMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCStructuralCurveMemberTypeEnum();
						case "IFCSTRUCTURALSURFACEACTIVITYTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCStructuralSurfaceActivityTypeEnum();
						case "IFCSTRUCTURALSURFACEMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCStructuralSurfaceMemberTypeEnum();
						case "IFCSUBCONTRACTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSubContractResourceTypeEnum();
						case "IFCSURFACEFEATURETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceFeatureTypeEnum();
						case "IFCSURFACESIDE" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceSide();
						case "IFCSWITCHINGDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSwitchingDeviceTypeEnum();
						case "IFCSYSTEMFURNITUREELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCSystemFurnitureElementTypeEnum();
						case "IFCTANKTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCTankTypeEnum();
						case "IFCTASKDURATIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCTaskDurationEnum();
						case "IFCTASKTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCTaskTypeEnum();
						case "IFCTENDONANCHORTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCTendonAnchorTypeEnum();
						case "IFCTENDONCONDUITTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCTendonConduitTypeEnum();
						case "IFCTENDONTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCTendonTypeEnum();
						case "IFCTEXTPATH" : return new CSiBKK.IFC.IFC4X2.IFCTextPath();
						case "IFCTIMESERIESDATATYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCTimeSeriesDataTypeEnum();
						case "IFCTRANSFORMERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCTransformerTypeEnum();
						case "IFCTRANSITIONCODE" : return new CSiBKK.IFC.IFC4X2.IFCTransitionCode();
						case "IFCTRANSITIONCURVETYPE" : return new CSiBKK.IFC.IFC4X2.IFCTransitionCurveType();
						case "IFCTRANSPORTELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCTransportElementTypeEnum();
						case "IFCTRIMMINGPREFERENCE" : return new CSiBKK.IFC.IFC4X2.IFCTrimmingPreference();
						case "IFCTUBEBUNDLETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCTubeBundleTypeEnum();
						case "IFCUNITENUM" : return new CSiBKK.IFC.IFC4X2.IFCUnitEnum();
						case "IFCUNITARYCONTROLELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCUnitaryControlElementTypeEnum();
						case "IFCUNITARYEQUIPMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCUnitaryEquipmentTypeEnum();
						case "IFCVALVETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCValveTypeEnum();
						case "IFCVIBRATIONDAMPERTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCVibrationDamperTypeEnum();
						case "IFCVIBRATIONISOLATORTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCVibrationIsolatorTypeEnum();
						case "IFCVOIDINGFEATURETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCVoidingFeatureTypeEnum();
						case "IFCWALLTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCWallTypeEnum();
						case "IFCWASTETERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCWasteTerminalTypeEnum();
						case "IFCWINDOWPANELOPERATIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCWindowPanelOperationEnum();
						case "IFCWINDOWPANELPOSITIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCWindowPanelPositionEnum();
						case "IFCWINDOWSTYLECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCWindowStyleConstructionEnum();
						case "IFCWINDOWSTYLEOPERATIONENUM" : return new CSiBKK.IFC.IFC4X2.IFCWindowStyleOperationEnum();
						case "IFCWINDOWTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCWindowTypeEnum();
						case "IFCWINDOWTYPEPARTITIONINGENUM" : return new CSiBKK.IFC.IFC4X2.IFCWindowTypePartitioningEnum();
						case "IFCWORKCALENDARTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCWorkCalendarTypeEnum();
						case "IFCWORKPLANTYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCWorkPlanTypeEnum();
						case "IFCWORKSCHEDULETYPEENUM" : return new CSiBKK.IFC.IFC4X2.IFCWorkScheduleTypeEnum();
						case "IFCACTIONREQUEST" : return new CSiBKK.IFC.IFC4X2.IFCActionRequest();
						case "IFCACTOR" : return new CSiBKK.IFC.IFC4X2.IFCActor();
						case "IFCACTORROLE" : return new CSiBKK.IFC.IFC4X2.IFCActorRole();
						case "IFCACTUATOR" : return new CSiBKK.IFC.IFC4X2.IFCActuator();
						case "IFCACTUATORTYPE" : return new CSiBKK.IFC.IFC4X2.IFCActuatorType();
						case "IFCADVANCEDBREP" : return new CSiBKK.IFC.IFC4X2.IFCAdvancedBrep();
						case "IFCADVANCEDBREPWITHVOIDS" : return new CSiBKK.IFC.IFC4X2.IFCAdvancedBrepWithVoids();
						case "IFCADVANCEDFACE" : return new CSiBKK.IFC.IFC4X2.IFCAdvancedFace();
						case "IFCAIRTERMINAL" : return new CSiBKK.IFC.IFC4X2.IFCAirTerminal();
						case "IFCAIRTERMINALBOX" : return new CSiBKK.IFC.IFC4X2.IFCAirTerminalBox();
						case "IFCAIRTERMINALBOXTYPE" : return new CSiBKK.IFC.IFC4X2.IFCAirTerminalBoxType();
						case "IFCAIRTERMINALTYPE" : return new CSiBKK.IFC.IFC4X2.IFCAirTerminalType();
						case "IFCAIRTOAIRHEATRECOVERY" : return new CSiBKK.IFC.IFC4X2.IFCAirToAirHeatRecovery();
						case "IFCAIRTOAIRHEATRECOVERYTYPE" : return new CSiBKK.IFC.IFC4X2.IFCAirToAirHeatRecoveryType();
						case "IFCALARM" : return new CSiBKK.IFC.IFC4X2.IFCAlarm();
						case "IFCALARMTYPE" : return new CSiBKK.IFC.IFC4X2.IFCAlarmType();
						case "IFCALIGNMENT" : return new CSiBKK.IFC.IFC4X2.IFCAlignment();
						case "IFCALIGNMENT2DHORIZONTAL" : return new CSiBKK.IFC.IFC4X2.IFCAlignment2DHorizontal();
						case "IFCALIGNMENT2DHORIZONTALSEGMENT" : return new CSiBKK.IFC.IFC4X2.IFCAlignment2DHorizontalSegment();
						case "IFCALIGNMENT2DVERSEGCIRCULARARC" : return new CSiBKK.IFC.IFC4X2.IFCAlignment2DVerSegCircularArc();
						case "IFCALIGNMENT2DVERSEGLINE" : return new CSiBKK.IFC.IFC4X2.IFCAlignment2DVerSegLine();
						case "IFCALIGNMENT2DVERSEGPARABOLICARC" : return new CSiBKK.IFC.IFC4X2.IFCAlignment2DVerSegParabolicArc();
						case "IFCALIGNMENT2DVERTICAL" : return new CSiBKK.IFC.IFC4X2.IFCAlignment2DVertical();
						case "IFCALIGNMENTCURVE" : return new CSiBKK.IFC.IFC4X2.IFCAlignmentCurve();
						case "IFCANNOTATION" : return new CSiBKK.IFC.IFC4X2.IFCAnnotation();
						case "IFCANNOTATIONFILLAREA" : return new CSiBKK.IFC.IFC4X2.IFCAnnotationFillArea();
						case "IFCAPPLICATION" : return new CSiBKK.IFC.IFC4X2.IFCApplication();
						case "IFCAPPLIEDVALUE" : return new CSiBKK.IFC.IFC4X2.IFCAppliedValue();
						case "IFCAPPROVAL" : return new CSiBKK.IFC.IFC4X2.IFCApproval();
						case "IFCAPPROVALRELATIONSHIP" : return new CSiBKK.IFC.IFC4X2.IFCApprovalRelationship();
						case "IFCARBITRARYCLOSEDPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCArbitraryClosedProfileDef();
						case "IFCARBITRARYOPENPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCArbitraryOpenProfileDef();
						case "IFCARBITRARYPROFILEDEFWITHVOIDS" : return new CSiBKK.IFC.IFC4X2.IFCArbitraryProfileDefWithVoids();
						case "IFCASSET" : return new CSiBKK.IFC.IFC4X2.IFCAsset();
						case "IFCASYMMETRICISHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCAsymmetricIShapeProfileDef();
						case "IFCAUDIOVISUALAPPLIANCE" : return new CSiBKK.IFC.IFC4X2.IFCAudioVisualAppliance();
						case "IFCAUDIOVISUALAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4X2.IFCAudioVisualApplianceType();
						case "IFCAXIS1PLACEMENT" : return new CSiBKK.IFC.IFC4X2.IFCAxis1Placement();
						case "IFCAXIS2PLACEMENT2D" : return new CSiBKK.IFC.IFC4X2.IFCAxis2Placement2D();
						case "IFCAXIS2PLACEMENT3D" : return new CSiBKK.IFC.IFC4X2.IFCAxis2Placement3D();
						case "IFCBSPLINECURVEWITHKNOTS" : return new CSiBKK.IFC.IFC4X2.IFCBSplineCurveWithKnots();
						case "IFCBSPLINESURFACEWITHKNOTS" : return new CSiBKK.IFC.IFC4X2.IFCBSplineSurfaceWithKnots();
						case "IFCBEAM" : return new CSiBKK.IFC.IFC4X2.IFCBeam();
						case "IFCBEAMSTANDARDCASE" : return new CSiBKK.IFC.IFC4X2.IFCBeamStandardCase();
						case "IFCBEAMTYPE" : return new CSiBKK.IFC.IFC4X2.IFCBeamType();
						case "IFCBEARING" : return new CSiBKK.IFC.IFC4X2.IFCBearing();
						case "IFCBEARINGTYPE" : return new CSiBKK.IFC.IFC4X2.IFCBearingType();
						case "IFCBLOBTEXTURE" : return new CSiBKK.IFC.IFC4X2.IFCBlobTexture();
						case "IFCBLOCK" : return new CSiBKK.IFC.IFC4X2.IFCBlock();
						case "IFCBOILER" : return new CSiBKK.IFC.IFC4X2.IFCBoiler();
						case "IFCBOILERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCBoilerType();
						case "IFCBOOLEANCLIPPINGRESULT" : return new CSiBKK.IFC.IFC4X2.IFCBooleanClippingResult();
						case "IFCBOOLEANRESULT" : return new CSiBKK.IFC.IFC4X2.IFCBooleanResult();
						case "IFCBOUNDARYCURVE" : return new CSiBKK.IFC.IFC4X2.IFCBoundaryCurve();
						case "IFCBOUNDARYEDGECONDITION" : return new CSiBKK.IFC.IFC4X2.IFCBoundaryEdgeCondition();
						case "IFCBOUNDARYFACECONDITION" : return new CSiBKK.IFC.IFC4X2.IFCBoundaryFaceCondition();
						case "IFCBOUNDARYNODECONDITION" : return new CSiBKK.IFC.IFC4X2.IFCBoundaryNodeCondition();
						case "IFCBOUNDARYNODECONDITIONWARPING" : return new CSiBKK.IFC.IFC4X2.IFCBoundaryNodeConditionWarping();
						case "IFCBOUNDINGBOX" : return new CSiBKK.IFC.IFC4X2.IFCBoundingBox();
						case "IFCBOXEDHALFSPACE" : return new CSiBKK.IFC.IFC4X2.IFCBoxedHalfSpace();
						case "IFCBRIDGE" : return new CSiBKK.IFC.IFC4X2.IFCBridge();
						case "IFCBRIDGEPART" : return new CSiBKK.IFC.IFC4X2.IFCBridgePart();
						case "IFCBUILDING" : return new CSiBKK.IFC.IFC4X2.IFCBuilding();
						case "IFCBUILDINGELEMENTPART" : return new CSiBKK.IFC.IFC4X2.IFCBuildingElementPart();
						case "IFCBUILDINGELEMENTPARTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCBuildingElementPartType();
						case "IFCBUILDINGELEMENTPROXY" : return new CSiBKK.IFC.IFC4X2.IFCBuildingElementProxy();
						case "IFCBUILDINGELEMENTPROXYTYPE" : return new CSiBKK.IFC.IFC4X2.IFCBuildingElementProxyType();
						case "IFCBUILDINGSTOREY" : return new CSiBKK.IFC.IFC4X2.IFCBuildingStorey();
						case "IFCBUILDINGSYSTEM" : return new CSiBKK.IFC.IFC4X2.IFCBuildingSystem();
						case "IFCBURNER" : return new CSiBKK.IFC.IFC4X2.IFCBurner();
						case "IFCBURNERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCBurnerType();
						case "IFCCSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCCShapeProfileDef();
						case "IFCCABLECARRIERFITTING" : return new CSiBKK.IFC.IFC4X2.IFCCableCarrierFitting();
						case "IFCCABLECARRIERFITTINGTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCableCarrierFittingType();
						case "IFCCABLECARRIERSEGMENT" : return new CSiBKK.IFC.IFC4X2.IFCCableCarrierSegment();
						case "IFCCABLECARRIERSEGMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCableCarrierSegmentType();
						case "IFCCABLEFITTING" : return new CSiBKK.IFC.IFC4X2.IFCCableFitting();
						case "IFCCABLEFITTINGTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCableFittingType();
						case "IFCCABLESEGMENT" : return new CSiBKK.IFC.IFC4X2.IFCCableSegment();
						case "IFCCABLESEGMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCableSegmentType();
						case "IFCCAISSONFOUNDATION" : return new CSiBKK.IFC.IFC4X2.IFCCaissonFoundation();
						case "IFCCAISSONFOUNDATIONTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCaissonFoundationType();
						case "IFCCARTESIANPOINT" : return new CSiBKK.IFC.IFC4X2.IFCCartesianPoint();
						case "IFCCARTESIANPOINTLIST2D" : return new CSiBKK.IFC.IFC4X2.IFCCartesianPointList2D();
						case "IFCCARTESIANPOINTLIST3D" : return new CSiBKK.IFC.IFC4X2.IFCCartesianPointList3D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR2D" : return new CSiBKK.IFC.IFC4X2.IFCCartesianTransformationOperator2D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM" : return new CSiBKK.IFC.IFC4X2.IFCCartesianTransformationOperator2DnonUniform();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR3D" : return new CSiBKK.IFC.IFC4X2.IFCCartesianTransformationOperator3D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM" : return new CSiBKK.IFC.IFC4X2.IFCCartesianTransformationOperator3DnonUniform();
						case "IFCCENTERLINEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCCenterLineProfileDef();
						case "IFCCHILLER" : return new CSiBKK.IFC.IFC4X2.IFCChiller();
						case "IFCCHILLERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCChillerType();
						case "IFCCHIMNEY" : return new CSiBKK.IFC.IFC4X2.IFCChimney();
						case "IFCCHIMNEYTYPE" : return new CSiBKK.IFC.IFC4X2.IFCChimneyType();
						case "IFCCIRCLE" : return new CSiBKK.IFC.IFC4X2.IFCCircle();
						case "IFCCIRCLEHOLLOWPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCCircleHollowProfileDef();
						case "IFCCIRCLEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCCircleProfileDef();
						case "IFCCIRCULARARCSEGMENT2D" : return new CSiBKK.IFC.IFC4X2.IFCCircularArcSegment2D();
						case "IFCCIVILELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCCivilElement();
						case "IFCCIVILELEMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCivilElementType();
						case "IFCCLASSIFICATION" : return new CSiBKK.IFC.IFC4X2.IFCClassification();
						case "IFCCLASSIFICATIONREFERENCE" : return new CSiBKK.IFC.IFC4X2.IFCClassificationReference();
						case "IFCCLOSEDSHELL" : return new CSiBKK.IFC.IFC4X2.IFCClosedShell();
						case "IFCCOIL" : return new CSiBKK.IFC.IFC4X2.IFCCoil();
						case "IFCCOILTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCoilType();
						case "IFCCOLOURRGB" : return new CSiBKK.IFC.IFC4X2.IFCColourRgb();
						case "IFCCOLOURRGBLIST" : return new CSiBKK.IFC.IFC4X2.IFCColourRgbList();
						case "IFCCOLUMN" : return new CSiBKK.IFC.IFC4X2.IFCColumn();
						case "IFCCOLUMNSTANDARDCASE" : return new CSiBKK.IFC.IFC4X2.IFCColumnStandardCase();
						case "IFCCOLUMNTYPE" : return new CSiBKK.IFC.IFC4X2.IFCColumnType();
						case "IFCCOMMUNICATIONSAPPLIANCE" : return new CSiBKK.IFC.IFC4X2.IFCCommunicationsAppliance();
						case "IFCCOMMUNICATIONSAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4X2.IFCCommunicationsApplianceType();
						case "IFCCOMPLEXPROPERTY" : return new CSiBKK.IFC.IFC4X2.IFCComplexProperty();
						case "IFCCOMPLEXPROPERTYTEMPLATE" : return new CSiBKK.IFC.IFC4X2.IFCComplexPropertyTemplate();
						case "IFCCOMPOSITECURVE" : return new CSiBKK.IFC.IFC4X2.IFCCompositeCurve();
						case "IFCCOMPOSITECURVEONSURFACE" : return new CSiBKK.IFC.IFC4X2.IFCCompositeCurveOnSurface();
						case "IFCCOMPOSITECURVESEGMENT" : return new CSiBKK.IFC.IFC4X2.IFCCompositeCurveSegment();
						case "IFCCOMPOSITEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCCompositeProfileDef();
						case "IFCCOMPRESSOR" : return new CSiBKK.IFC.IFC4X2.IFCCompressor();
						case "IFCCOMPRESSORTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCompressorType();
						case "IFCCONDENSER" : return new CSiBKK.IFC.IFC4X2.IFCCondenser();
						case "IFCCONDENSERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCondenserType();
						case "IFCCONNECTEDFACESET" : return new CSiBKK.IFC.IFC4X2.IFCConnectedFaceSet();
						case "IFCCONNECTIONCURVEGEOMETRY" : return new CSiBKK.IFC.IFC4X2.IFCConnectionCurveGeometry();
						case "IFCCONNECTIONPOINTECCENTRICITY" : return new CSiBKK.IFC.IFC4X2.IFCConnectionPointEccentricity();
						case "IFCCONNECTIONPOINTGEOMETRY" : return new CSiBKK.IFC.IFC4X2.IFCConnectionPointGeometry();
						case "IFCCONNECTIONSURFACEGEOMETRY" : return new CSiBKK.IFC.IFC4X2.IFCConnectionSurfaceGeometry();
						case "IFCCONNECTIONVOLUMEGEOMETRY" : return new CSiBKK.IFC.IFC4X2.IFCConnectionVolumeGeometry();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCE" : return new CSiBKK.IFC.IFC4X2.IFCConstructionEquipmentResource();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE" : return new CSiBKK.IFC.IFC4X2.IFCConstructionEquipmentResourceType();
						case "IFCCONSTRUCTIONMATERIALRESOURCE" : return new CSiBKK.IFC.IFC4X2.IFCConstructionMaterialResource();
						case "IFCCONSTRUCTIONMATERIALRESOURCETYPE" : return new CSiBKK.IFC.IFC4X2.IFCConstructionMaterialResourceType();
						case "IFCCONSTRUCTIONPRODUCTRESOURCE" : return new CSiBKK.IFC.IFC4X2.IFCConstructionProductResource();
						case "IFCCONSTRUCTIONPRODUCTRESOURCETYPE" : return new CSiBKK.IFC.IFC4X2.IFCConstructionProductResourceType();
						case "IFCCONTEXTDEPENDENTUNIT" : return new CSiBKK.IFC.IFC4X2.IFCContextDependentUnit();
						case "IFCCONTROLLER" : return new CSiBKK.IFC.IFC4X2.IFCController();
						case "IFCCONTROLLERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCControllerType();
						case "IFCCONVERSIONBASEDUNIT" : return new CSiBKK.IFC.IFC4X2.IFCConversionBasedUnit();
						case "IFCCONVERSIONBASEDUNITWITHOFFSET" : return new CSiBKK.IFC.IFC4X2.IFCConversionBasedUnitWithOffset();
						case "IFCCOOLEDBEAM" : return new CSiBKK.IFC.IFC4X2.IFCCooledBeam();
						case "IFCCOOLEDBEAMTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCooledBeamType();
						case "IFCCOOLINGTOWER" : return new CSiBKK.IFC.IFC4X2.IFCCoolingTower();
						case "IFCCOOLINGTOWERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCoolingTowerType();
						case "IFCCOSTITEM" : return new CSiBKK.IFC.IFC4X2.IFCCostItem();
						case "IFCCOSTSCHEDULE" : return new CSiBKK.IFC.IFC4X2.IFCCostSchedule();
						case "IFCCOSTVALUE" : return new CSiBKK.IFC.IFC4X2.IFCCostValue();
						case "IFCCOVERING" : return new CSiBKK.IFC.IFC4X2.IFCCovering();
						case "IFCCOVERINGTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCoveringType();
						case "IFCCREWRESOURCE" : return new CSiBKK.IFC.IFC4X2.IFCCrewResource();
						case "IFCCREWRESOURCETYPE" : return new CSiBKK.IFC.IFC4X2.IFCCrewResourceType();
						case "IFCCSGSOLID" : return new CSiBKK.IFC.IFC4X2.IFCCsgSolid();
						case "IFCCURRENCYRELATIONSHIP" : return new CSiBKK.IFC.IFC4X2.IFCCurrencyRelationship();
						case "IFCCURTAINWALL" : return new CSiBKK.IFC.IFC4X2.IFCCurtainWall();
						case "IFCCURTAINWALLTYPE" : return new CSiBKK.IFC.IFC4X2.IFCCurtainWallType();
						case "IFCCURVEBOUNDEDPLANE" : return new CSiBKK.IFC.IFC4X2.IFCCurveBoundedPlane();
						case "IFCCURVEBOUNDEDSURFACE" : return new CSiBKK.IFC.IFC4X2.IFCCurveBoundedSurface();
						case "IFCCURVESTYLE" : return new CSiBKK.IFC.IFC4X2.IFCCurveStyle();
						case "IFCCURVESTYLEFONT" : return new CSiBKK.IFC.IFC4X2.IFCCurveStyleFont();
						case "IFCCURVESTYLEFONTANDSCALING" : return new CSiBKK.IFC.IFC4X2.IFCCurveStyleFontAndScaling();
						case "IFCCURVESTYLEFONTPATTERN" : return new CSiBKK.IFC.IFC4X2.IFCCurveStyleFontPattern();
						case "IFCCYLINDRICALSURFACE" : return new CSiBKK.IFC.IFC4X2.IFCCylindricalSurface();
						case "IFCDAMPER" : return new CSiBKK.IFC.IFC4X2.IFCDamper();
						case "IFCDAMPERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCDamperType();
						case "IFCDEEPFOUNDATION" : return new CSiBKK.IFC.IFC4X2.IFCDeepFoundation();
						case "IFCDEEPFOUNDATIONTYPE" : return new CSiBKK.IFC.IFC4X2.IFCDeepFoundationType();
						case "IFCDERIVEDPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCDerivedProfileDef();
						case "IFCDERIVEDUNIT" : return new CSiBKK.IFC.IFC4X2.IFCDerivedUnit();
						case "IFCDERIVEDUNITELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCDerivedUnitElement();
						case "IFCDIMENSIONALEXPONENTS" : return new CSiBKK.IFC.IFC4X2.IFCDimensionalExponents();
						case "IFCDIRECTION" : return new CSiBKK.IFC.IFC4X2.IFCDirection();
						case "IFCDISCRETEACCESSORY" : return new CSiBKK.IFC.IFC4X2.IFCDiscreteAccessory();
						case "IFCDISCRETEACCESSORYTYPE" : return new CSiBKK.IFC.IFC4X2.IFCDiscreteAccessoryType();
						case "IFCDISTANCEEXPRESSION" : return new CSiBKK.IFC.IFC4X2.IFCDistanceExpression();
						case "IFCDISTRIBUTIONCHAMBERELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCDistributionChamberElement();
						case "IFCDISTRIBUTIONCHAMBERELEMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCDistributionChamberElementType();
						case "IFCDISTRIBUTIONCIRCUIT" : return new CSiBKK.IFC.IFC4X2.IFCDistributionCircuit();
						case "IFCDISTRIBUTIONCONTROLELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCDistributionControlElement();
						case "IFCDISTRIBUTIONELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCDistributionElement();
						case "IFCDISTRIBUTIONELEMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCDistributionElementType();
						case "IFCDISTRIBUTIONFLOWELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCDistributionFlowElement();
						case "IFCDISTRIBUTIONPORT" : return new CSiBKK.IFC.IFC4X2.IFCDistributionPort();
						case "IFCDISTRIBUTIONSYSTEM" : return new CSiBKK.IFC.IFC4X2.IFCDistributionSystem();
						case "IFCDOCUMENTINFORMATION" : return new CSiBKK.IFC.IFC4X2.IFCDocumentInformation();
						case "IFCDOCUMENTINFORMATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4X2.IFCDocumentInformationRelationship();
						case "IFCDOCUMENTREFERENCE" : return new CSiBKK.IFC.IFC4X2.IFCDocumentReference();
						case "IFCDOOR" : return new CSiBKK.IFC.IFC4X2.IFCDoor();
						case "IFCDOORLININGPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCDoorLiningProperties();
						case "IFCDOORPANELPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCDoorPanelProperties();
						case "IFCDOORSTANDARDCASE" : return new CSiBKK.IFC.IFC4X2.IFCDoorStandardCase();
						case "IFCDOORSTYLE" : return new CSiBKK.IFC.IFC4X2.IFCDoorStyle();
						case "IFCDOORTYPE" : return new CSiBKK.IFC.IFC4X2.IFCDoorType();
						case "IFCDRAUGHTINGPREDEFINEDCOLOUR" : return new CSiBKK.IFC.IFC4X2.IFCDraughtingPreDefinedColour();
						case "IFCDRAUGHTINGPREDEFINEDCURVEFONT" : return new CSiBKK.IFC.IFC4X2.IFCDraughtingPreDefinedCurveFont();
						case "IFCDUCTFITTING" : return new CSiBKK.IFC.IFC4X2.IFCDuctFitting();
						case "IFCDUCTFITTINGTYPE" : return new CSiBKK.IFC.IFC4X2.IFCDuctFittingType();
						case "IFCDUCTSEGMENT" : return new CSiBKK.IFC.IFC4X2.IFCDuctSegment();
						case "IFCDUCTSEGMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCDuctSegmentType();
						case "IFCDUCTSILENCER" : return new CSiBKK.IFC.IFC4X2.IFCDuctSilencer();
						case "IFCDUCTSILENCERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCDuctSilencerType();
						case "IFCEDGE" : return new CSiBKK.IFC.IFC4X2.IFCEdge();
						case "IFCEDGECURVE" : return new CSiBKK.IFC.IFC4X2.IFCEdgeCurve();
						case "IFCEDGELOOP" : return new CSiBKK.IFC.IFC4X2.IFCEdgeLoop();
						case "IFCELECTRICAPPLIANCE" : return new CSiBKK.IFC.IFC4X2.IFCElectricAppliance();
						case "IFCELECTRICAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4X2.IFCElectricApplianceType();
						case "IFCELECTRICDISTRIBUTIONBOARD" : return new CSiBKK.IFC.IFC4X2.IFCElectricDistributionBoard();
						case "IFCELECTRICDISTRIBUTIONBOARDTYPE" : return new CSiBKK.IFC.IFC4X2.IFCElectricDistributionBoardType();
						case "IFCELECTRICFLOWSTORAGEDEVICE" : return new CSiBKK.IFC.IFC4X2.IFCElectricFlowStorageDevice();
						case "IFCELECTRICFLOWSTORAGEDEVICETYPE" : return new CSiBKK.IFC.IFC4X2.IFCElectricFlowStorageDeviceType();
						case "IFCELECTRICGENERATOR" : return new CSiBKK.IFC.IFC4X2.IFCElectricGenerator();
						case "IFCELECTRICGENERATORTYPE" : return new CSiBKK.IFC.IFC4X2.IFCElectricGeneratorType();
						case "IFCELECTRICMOTOR" : return new CSiBKK.IFC.IFC4X2.IFCElectricMotor();
						case "IFCELECTRICMOTORTYPE" : return new CSiBKK.IFC.IFC4X2.IFCElectricMotorType();
						case "IFCELECTRICTIMECONTROL" : return new CSiBKK.IFC.IFC4X2.IFCElectricTimeControl();
						case "IFCELECTRICTIMECONTROLTYPE" : return new CSiBKK.IFC.IFC4X2.IFCElectricTimeControlType();
						case "IFCELEMENTASSEMBLY" : return new CSiBKK.IFC.IFC4X2.IFCElementAssembly();
						case "IFCELEMENTASSEMBLYTYPE" : return new CSiBKK.IFC.IFC4X2.IFCElementAssemblyType();
						case "IFCELEMENTQUANTITY" : return new CSiBKK.IFC.IFC4X2.IFCElementQuantity();
						case "IFCELLIPSE" : return new CSiBKK.IFC.IFC4X2.IFCEllipse();
						case "IFCELLIPSEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCEllipseProfileDef();
						case "IFCENERGYCONVERSIONDEVICE" : return new CSiBKK.IFC.IFC4X2.IFCEnergyConversionDevice();
						case "IFCENGINE" : return new CSiBKK.IFC.IFC4X2.IFCEngine();
						case "IFCENGINETYPE" : return new CSiBKK.IFC.IFC4X2.IFCEngineType();
						case "IFCEVAPORATIVECOOLER" : return new CSiBKK.IFC.IFC4X2.IFCEvaporativeCooler();
						case "IFCEVAPORATIVECOOLERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCEvaporativeCoolerType();
						case "IFCEVAPORATOR" : return new CSiBKK.IFC.IFC4X2.IFCEvaporator();
						case "IFCEVAPORATORTYPE" : return new CSiBKK.IFC.IFC4X2.IFCEvaporatorType();
						case "IFCEVENT" : return new CSiBKK.IFC.IFC4X2.IFCEvent();
						case "IFCEVENTTIME" : return new CSiBKK.IFC.IFC4X2.IFCEventTime();
						case "IFCEVENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCEventType();
						case "IFCEXTERNALREFERENCERELATIONSHIP" : return new CSiBKK.IFC.IFC4X2.IFCExternalReferenceRelationship();
						case "IFCEXTERNALSPATIALELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCExternalSpatialElement();
						case "IFCEXTERNALLYDEFINEDHATCHSTYLE" : return new CSiBKK.IFC.IFC4X2.IFCExternallyDefinedHatchStyle();
						case "IFCEXTERNALLYDEFINEDSURFACESTYLE" : return new CSiBKK.IFC.IFC4X2.IFCExternallyDefinedSurfaceStyle();
						case "IFCEXTERNALLYDEFINEDTEXTFONT" : return new CSiBKK.IFC.IFC4X2.IFCExternallyDefinedTextFont();
						case "IFCEXTRUDEDAREASOLID" : return new CSiBKK.IFC.IFC4X2.IFCExtrudedAreaSolid();
						case "IFCEXTRUDEDAREASOLIDTAPERED" : return new CSiBKK.IFC.IFC4X2.IFCExtrudedAreaSolidTapered();
						case "IFCFACE" : return new CSiBKK.IFC.IFC4X2.IFCFace();
						case "IFCFACEBASEDSURFACEMODEL" : return new CSiBKK.IFC.IFC4X2.IFCFaceBasedSurfaceModel();
						case "IFCFACEBOUND" : return new CSiBKK.IFC.IFC4X2.IFCFaceBound();
						case "IFCFACEOUTERBOUND" : return new CSiBKK.IFC.IFC4X2.IFCFaceOuterBound();
						case "IFCFACESURFACE" : return new CSiBKK.IFC.IFC4X2.IFCFaceSurface();
						case "IFCFACETEDBREP" : return new CSiBKK.IFC.IFC4X2.IFCFacetedBrep();
						case "IFCFACETEDBREPWITHVOIDS" : return new CSiBKK.IFC.IFC4X2.IFCFacetedBrepWithVoids();
						case "IFCFACILITY" : return new CSiBKK.IFC.IFC4X2.IFCFacility();
						case "IFCFACILITYPART" : return new CSiBKK.IFC.IFC4X2.IFCFacilityPart();
						case "IFCFAILURECONNECTIONCONDITION" : return new CSiBKK.IFC.IFC4X2.IFCFailureConnectionCondition();
						case "IFCFAN" : return new CSiBKK.IFC.IFC4X2.IFCFan();
						case "IFCFANTYPE" : return new CSiBKK.IFC.IFC4X2.IFCFanType();
						case "IFCFASTENER" : return new CSiBKK.IFC.IFC4X2.IFCFastener();
						case "IFCFASTENERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCFastenerType();
						case "IFCFILLAREASTYLE" : return new CSiBKK.IFC.IFC4X2.IFCFillAreaStyle();
						case "IFCFILLAREASTYLEHATCHING" : return new CSiBKK.IFC.IFC4X2.IFCFillAreaStyleHatching();
						case "IFCFILLAREASTYLETILES" : return new CSiBKK.IFC.IFC4X2.IFCFillAreaStyleTiles();
						case "IFCFILTER" : return new CSiBKK.IFC.IFC4X2.IFCFilter();
						case "IFCFILTERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCFilterType();
						case "IFCFIRESUPPRESSIONTERMINAL" : return new CSiBKK.IFC.IFC4X2.IFCFireSuppressionTerminal();
						case "IFCFIRESUPPRESSIONTERMINALTYPE" : return new CSiBKK.IFC.IFC4X2.IFCFireSuppressionTerminalType();
						case "IFCFIXEDREFERENCESWEPTAREASOLID" : return new CSiBKK.IFC.IFC4X2.IFCFixedReferenceSweptAreaSolid();
						case "IFCFLOWCONTROLLER" : return new CSiBKK.IFC.IFC4X2.IFCFlowController();
						case "IFCFLOWFITTING" : return new CSiBKK.IFC.IFC4X2.IFCFlowFitting();
						case "IFCFLOWINSTRUMENT" : return new CSiBKK.IFC.IFC4X2.IFCFlowInstrument();
						case "IFCFLOWINSTRUMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCFlowInstrumentType();
						case "IFCFLOWMETER" : return new CSiBKK.IFC.IFC4X2.IFCFlowMeter();
						case "IFCFLOWMETERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCFlowMeterType();
						case "IFCFLOWMOVINGDEVICE" : return new CSiBKK.IFC.IFC4X2.IFCFlowMovingDevice();
						case "IFCFLOWSEGMENT" : return new CSiBKK.IFC.IFC4X2.IFCFlowSegment();
						case "IFCFLOWSTORAGEDEVICE" : return new CSiBKK.IFC.IFC4X2.IFCFlowStorageDevice();
						case "IFCFLOWTERMINAL" : return new CSiBKK.IFC.IFC4X2.IFCFlowTerminal();
						case "IFCFLOWTREATMENTDEVICE" : return new CSiBKK.IFC.IFC4X2.IFCFlowTreatmentDevice();
						case "IFCFOOTING" : return new CSiBKK.IFC.IFC4X2.IFCFooting();
						case "IFCFOOTINGTYPE" : return new CSiBKK.IFC.IFC4X2.IFCFootingType();
						case "IFCFURNISHINGELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCFurnishingElement();
						case "IFCFURNISHINGELEMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCFurnishingElementType();
						case "IFCFURNITURE" : return new CSiBKK.IFC.IFC4X2.IFCFurniture();
						case "IFCFURNITURETYPE" : return new CSiBKK.IFC.IFC4X2.IFCFurnitureType();
						case "IFCGEOGRAPHICELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCGeographicElement();
						case "IFCGEOGRAPHICELEMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCGeographicElementType();
						case "IFCGEOMETRICCURVESET" : return new CSiBKK.IFC.IFC4X2.IFCGeometricCurveSet();
						case "IFCGEOMETRICREPRESENTATIONCONTEXT" : return new CSiBKK.IFC.IFC4X2.IFCGeometricRepresentationContext();
						case "IFCGEOMETRICREPRESENTATIONSUBCONTEXT" : return new CSiBKK.IFC.IFC4X2.IFCGeometricRepresentationSubContext();
						case "IFCGEOMETRICSET" : return new CSiBKK.IFC.IFC4X2.IFCGeometricSet();
						case "IFCGRID" : return new CSiBKK.IFC.IFC4X2.IFCGrid();
						case "IFCGRIDAXIS" : return new CSiBKK.IFC.IFC4X2.IFCGridAxis();
						case "IFCGRIDPLACEMENT" : return new CSiBKK.IFC.IFC4X2.IFCGridPlacement();
						case "IFCGROUP" : return new CSiBKK.IFC.IFC4X2.IFCGroup();
						case "IFCHALFSPACESOLID" : return new CSiBKK.IFC.IFC4X2.IFCHalfSpaceSolid();
						case "IFCHEATEXCHANGER" : return new CSiBKK.IFC.IFC4X2.IFCHeatExchanger();
						case "IFCHEATEXCHANGERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCHeatExchangerType();
						case "IFCHUMIDIFIER" : return new CSiBKK.IFC.IFC4X2.IFCHumidifier();
						case "IFCHUMIDIFIERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCHumidifierType();
						case "IFCISHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCIShapeProfileDef();
						case "IFCIMAGETEXTURE" : return new CSiBKK.IFC.IFC4X2.IFCImageTexture();
						case "IFCINDEXEDCOLOURMAP" : return new CSiBKK.IFC.IFC4X2.IFCIndexedColourMap();
						case "IFCINDEXEDPOLYCURVE" : return new CSiBKK.IFC.IFC4X2.IFCIndexedPolyCurve();
						case "IFCINDEXEDPOLYGONALFACE" : return new CSiBKK.IFC.IFC4X2.IFCIndexedPolygonalFace();
						case "IFCINDEXEDPOLYGONALFACEWITHVOIDS" : return new CSiBKK.IFC.IFC4X2.IFCIndexedPolygonalFaceWithVoids();
						case "IFCINDEXEDTRIANGLETEXTUREMAP" : return new CSiBKK.IFC.IFC4X2.IFCIndexedTriangleTextureMap();
						case "IFCINTERCEPTOR" : return new CSiBKK.IFC.IFC4X2.IFCInterceptor();
						case "IFCINTERCEPTORTYPE" : return new CSiBKK.IFC.IFC4X2.IFCInterceptorType();
						case "IFCINTERSECTIONCURVE" : return new CSiBKK.IFC.IFC4X2.IFCIntersectionCurve();
						case "IFCINVENTORY" : return new CSiBKK.IFC.IFC4X2.IFCInventory();
						case "IFCIRREGULARTIMESERIES" : return new CSiBKK.IFC.IFC4X2.IFCIrregularTimeSeries();
						case "IFCIRREGULARTIMESERIESVALUE" : return new CSiBKK.IFC.IFC4X2.IFCIrregularTimeSeriesValue();
						case "IFCJUNCTIONBOX" : return new CSiBKK.IFC.IFC4X2.IFCJunctionBox();
						case "IFCJUNCTIONBOXTYPE" : return new CSiBKK.IFC.IFC4X2.IFCJunctionBoxType();
						case "IFCLSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCLShapeProfileDef();
						case "IFCLABORRESOURCE" : return new CSiBKK.IFC.IFC4X2.IFCLaborResource();
						case "IFCLABORRESOURCETYPE" : return new CSiBKK.IFC.IFC4X2.IFCLaborResourceType();
						case "IFCLAGTIME" : return new CSiBKK.IFC.IFC4X2.IFCLagTime();
						case "IFCLAMP" : return new CSiBKK.IFC.IFC4X2.IFCLamp();
						case "IFCLAMPTYPE" : return new CSiBKK.IFC.IFC4X2.IFCLampType();
						case "IFCLIBRARYINFORMATION" : return new CSiBKK.IFC.IFC4X2.IFCLibraryInformation();
						case "IFCLIBRARYREFERENCE" : return new CSiBKK.IFC.IFC4X2.IFCLibraryReference();
						case "IFCLIGHTDISTRIBUTIONDATA" : return new CSiBKK.IFC.IFC4X2.IFCLightDistributionData();
						case "IFCLIGHTFIXTURE" : return new CSiBKK.IFC.IFC4X2.IFCLightFixture();
						case "IFCLIGHTFIXTURETYPE" : return new CSiBKK.IFC.IFC4X2.IFCLightFixtureType();
						case "IFCLIGHTINTENSITYDISTRIBUTION" : return new CSiBKK.IFC.IFC4X2.IFCLightIntensityDistribution();
						case "IFCLIGHTSOURCEAMBIENT" : return new CSiBKK.IFC.IFC4X2.IFCLightSourceAmbient();
						case "IFCLIGHTSOURCEDIRECTIONAL" : return new CSiBKK.IFC.IFC4X2.IFCLightSourceDirectional();
						case "IFCLIGHTSOURCEGONIOMETRIC" : return new CSiBKK.IFC.IFC4X2.IFCLightSourceGoniometric();
						case "IFCLIGHTSOURCEPOSITIONAL" : return new CSiBKK.IFC.IFC4X2.IFCLightSourcePositional();
						case "IFCLIGHTSOURCESPOT" : return new CSiBKK.IFC.IFC4X2.IFCLightSourceSpot();
						case "IFCLINE" : return new CSiBKK.IFC.IFC4X2.IFCLine();
						case "IFCLINESEGMENT2D" : return new CSiBKK.IFC.IFC4X2.IFCLineSegment2D();
						case "IFCLINEARPLACEMENT" : return new CSiBKK.IFC.IFC4X2.IFCLinearPlacement();
						case "IFCLINEARPOSITIONINGELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCLinearPositioningElement();
						case "IFCLOCALPLACEMENT" : return new CSiBKK.IFC.IFC4X2.IFCLocalPlacement();
						case "IFCLOOP" : return new CSiBKK.IFC.IFC4X2.IFCLoop();
						case "IFCMAPCONVERSION" : return new CSiBKK.IFC.IFC4X2.IFCMapConversion();
						case "IFCMAPPEDITEM" : return new CSiBKK.IFC.IFC4X2.IFCMappedItem();
						case "IFCMATERIAL" : return new CSiBKK.IFC.IFC4X2.IFCMaterial();
						case "IFCMATERIALCLASSIFICATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4X2.IFCMaterialClassificationRelationship();
						case "IFCMATERIALCONSTITUENT" : return new CSiBKK.IFC.IFC4X2.IFCMaterialConstituent();
						case "IFCMATERIALCONSTITUENTSET" : return new CSiBKK.IFC.IFC4X2.IFCMaterialConstituentSet();
						case "IFCMATERIALDEFINITIONREPRESENTATION" : return new CSiBKK.IFC.IFC4X2.IFCMaterialDefinitionRepresentation();
						case "IFCMATERIALLAYER" : return new CSiBKK.IFC.IFC4X2.IFCMaterialLayer();
						case "IFCMATERIALLAYERSET" : return new CSiBKK.IFC.IFC4X2.IFCMaterialLayerSet();
						case "IFCMATERIALLAYERSETUSAGE" : return new CSiBKK.IFC.IFC4X2.IFCMaterialLayerSetUsage();
						case "IFCMATERIALLAYERWITHOFFSETS" : return new CSiBKK.IFC.IFC4X2.IFCMaterialLayerWithOffsets();
						case "IFCMATERIALLIST" : return new CSiBKK.IFC.IFC4X2.IFCMaterialList();
						case "IFCMATERIALPROFILE" : return new CSiBKK.IFC.IFC4X2.IFCMaterialProfile();
						case "IFCMATERIALPROFILESET" : return new CSiBKK.IFC.IFC4X2.IFCMaterialProfileSet();
						case "IFCMATERIALPROFILESETUSAGE" : return new CSiBKK.IFC.IFC4X2.IFCMaterialProfileSetUsage();
						case "IFCMATERIALPROFILESETUSAGETAPERING" : return new CSiBKK.IFC.IFC4X2.IFCMaterialProfileSetUsageTapering();
						case "IFCMATERIALPROFILEWITHOFFSETS" : return new CSiBKK.IFC.IFC4X2.IFCMaterialProfileWithOffsets();
						case "IFCMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCMaterialProperties();
						case "IFCMATERIALRELATIONSHIP" : return new CSiBKK.IFC.IFC4X2.IFCMaterialRelationship();
						case "IFCMEASUREWITHUNIT" : return new CSiBKK.IFC.IFC4X2.IFCMeasureWithUnit();
						case "IFCMECHANICALFASTENER" : return new CSiBKK.IFC.IFC4X2.IFCMechanicalFastener();
						case "IFCMECHANICALFASTENERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCMechanicalFastenerType();
						case "IFCMEDICALDEVICE" : return new CSiBKK.IFC.IFC4X2.IFCMedicalDevice();
						case "IFCMEDICALDEVICETYPE" : return new CSiBKK.IFC.IFC4X2.IFCMedicalDeviceType();
						case "IFCMEMBER" : return new CSiBKK.IFC.IFC4X2.IFCMember();
						case "IFCMEMBERSTANDARDCASE" : return new CSiBKK.IFC.IFC4X2.IFCMemberStandardCase();
						case "IFCMEMBERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCMemberType();
						case "IFCMETRIC" : return new CSiBKK.IFC.IFC4X2.IFCMetric();
						case "IFCMIRROREDPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCMirroredProfileDef();
						case "IFCMONETARYUNIT" : return new CSiBKK.IFC.IFC4X2.IFCMonetaryUnit();
						case "IFCMOTORCONNECTION" : return new CSiBKK.IFC.IFC4X2.IFCMotorConnection();
						case "IFCMOTORCONNECTIONTYPE" : return new CSiBKK.IFC.IFC4X2.IFCMotorConnectionType();
						case "IFCOBJECTIVE" : return new CSiBKK.IFC.IFC4X2.IFCObjective();
						case "IFCOCCUPANT" : return new CSiBKK.IFC.IFC4X2.IFCOccupant();
						case "IFCOFFSETCURVE2D" : return new CSiBKK.IFC.IFC4X2.IFCOffsetCurve2D();
						case "IFCOFFSETCURVE3D" : return new CSiBKK.IFC.IFC4X2.IFCOffsetCurve3D();
						case "IFCOFFSETCURVEBYDISTANCES" : return new CSiBKK.IFC.IFC4X2.IFCOffsetCurveByDistances();
						case "IFCOPENSHELL" : return new CSiBKK.IFC.IFC4X2.IFCOpenShell();
						case "IFCOPENINGELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCOpeningElement();
						case "IFCOPENINGSTANDARDCASE" : return new CSiBKK.IFC.IFC4X2.IFCOpeningStandardCase();
						case "IFCORGANIZATION" : return new CSiBKK.IFC.IFC4X2.IFCOrganization();
						case "IFCORGANIZATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4X2.IFCOrganizationRelationship();
						case "IFCORIENTATIONEXPRESSION" : return new CSiBKK.IFC.IFC4X2.IFCOrientationExpression();
						case "IFCORIENTEDEDGE" : return new CSiBKK.IFC.IFC4X2.IFCOrientedEdge();
						case "IFCOUTERBOUNDARYCURVE" : return new CSiBKK.IFC.IFC4X2.IFCOuterBoundaryCurve();
						case "IFCOUTLET" : return new CSiBKK.IFC.IFC4X2.IFCOutlet();
						case "IFCOUTLETTYPE" : return new CSiBKK.IFC.IFC4X2.IFCOutletType();
						case "IFCOWNERHISTORY" : return new CSiBKK.IFC.IFC4X2.IFCOwnerHistory();
						case "IFCPATH" : return new CSiBKK.IFC.IFC4X2.IFCPath();
						case "IFCPCURVE" : return new CSiBKK.IFC.IFC4X2.IFCPcurve();
						case "IFCPERFORMANCEHISTORY" : return new CSiBKK.IFC.IFC4X2.IFCPerformanceHistory();
						case "IFCPERMEABLECOVERINGPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCPermeableCoveringProperties();
						case "IFCPERMIT" : return new CSiBKK.IFC.IFC4X2.IFCPermit();
						case "IFCPERSON" : return new CSiBKK.IFC.IFC4X2.IFCPerson();
						case "IFCPERSONANDORGANIZATION" : return new CSiBKK.IFC.IFC4X2.IFCPersonAndOrganization();
						case "IFCPHYSICALCOMPLEXQUANTITY" : return new CSiBKK.IFC.IFC4X2.IFCPhysicalComplexQuantity();
						case "IFCPILE" : return new CSiBKK.IFC.IFC4X2.IFCPile();
						case "IFCPILETYPE" : return new CSiBKK.IFC.IFC4X2.IFCPileType();
						case "IFCPIPEFITTING" : return new CSiBKK.IFC.IFC4X2.IFCPipeFitting();
						case "IFCPIPEFITTINGTYPE" : return new CSiBKK.IFC.IFC4X2.IFCPipeFittingType();
						case "IFCPIPESEGMENT" : return new CSiBKK.IFC.IFC4X2.IFCPipeSegment();
						case "IFCPIPESEGMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCPipeSegmentType();
						case "IFCPIXELTEXTURE" : return new CSiBKK.IFC.IFC4X2.IFCPixelTexture();
						case "IFCPLANARBOX" : return new CSiBKK.IFC.IFC4X2.IFCPlanarBox();
						case "IFCPLANAREXTENT" : return new CSiBKK.IFC.IFC4X2.IFCPlanarExtent();
						case "IFCPLANE" : return new CSiBKK.IFC.IFC4X2.IFCPlane();
						case "IFCPLATE" : return new CSiBKK.IFC.IFC4X2.IFCPlate();
						case "IFCPLATESTANDARDCASE" : return new CSiBKK.IFC.IFC4X2.IFCPlateStandardCase();
						case "IFCPLATETYPE" : return new CSiBKK.IFC.IFC4X2.IFCPlateType();
						case "IFCPOINTONCURVE" : return new CSiBKK.IFC.IFC4X2.IFCPointOnCurve();
						case "IFCPOINTONSURFACE" : return new CSiBKK.IFC.IFC4X2.IFCPointOnSurface();
						case "IFCPOLYLOOP" : return new CSiBKK.IFC.IFC4X2.IFCPolyLoop();
						case "IFCPOLYGONALBOUNDEDHALFSPACE" : return new CSiBKK.IFC.IFC4X2.IFCPolygonalBoundedHalfSpace();
						case "IFCPOLYGONALFACESET" : return new CSiBKK.IFC.IFC4X2.IFCPolygonalFaceSet();
						case "IFCPOLYLINE" : return new CSiBKK.IFC.IFC4X2.IFCPolyline();
						case "IFCPOSTALADDRESS" : return new CSiBKK.IFC.IFC4X2.IFCPostalAddress();
						case "IFCPRESENTATIONLAYERASSIGNMENT" : return new CSiBKK.IFC.IFC4X2.IFCPresentationLayerAssignment();
						case "IFCPRESENTATIONLAYERWITHSTYLE" : return new CSiBKK.IFC.IFC4X2.IFCPresentationLayerWithStyle();
						case "IFCPRESENTATIONSTYLEASSIGNMENT" : return new CSiBKK.IFC.IFC4X2.IFCPresentationStyleAssignment();
						case "IFCPROCEDURE" : return new CSiBKK.IFC.IFC4X2.IFCProcedure();
						case "IFCPROCEDURETYPE" : return new CSiBKK.IFC.IFC4X2.IFCProcedureType();
						case "IFCPRODUCTDEFINITIONSHAPE" : return new CSiBKK.IFC.IFC4X2.IFCProductDefinitionShape();
						case "IFCPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCProfileDef();
						case "IFCPROFILEPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCProfileProperties();
						case "IFCPROJECT" : return new CSiBKK.IFC.IFC4X2.IFCProject();
						case "IFCPROJECTLIBRARY" : return new CSiBKK.IFC.IFC4X2.IFCProjectLibrary();
						case "IFCPROJECTORDER" : return new CSiBKK.IFC.IFC4X2.IFCProjectOrder();
						case "IFCPROJECTEDCRS" : return new CSiBKK.IFC.IFC4X2.IFCProjectedCRS();
						case "IFCPROJECTIONELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCProjectionElement();
						case "IFCPROPERTYBOUNDEDVALUE" : return new CSiBKK.IFC.IFC4X2.IFCPropertyBoundedValue();
						case "IFCPROPERTYDEPENDENCYRELATIONSHIP" : return new CSiBKK.IFC.IFC4X2.IFCPropertyDependencyRelationship();
						case "IFCPROPERTYENUMERATEDVALUE" : return new CSiBKK.IFC.IFC4X2.IFCPropertyEnumeratedValue();
						case "IFCPROPERTYENUMERATION" : return new CSiBKK.IFC.IFC4X2.IFCPropertyEnumeration();
						case "IFCPROPERTYLISTVALUE" : return new CSiBKK.IFC.IFC4X2.IFCPropertyListValue();
						case "IFCPROPERTYREFERENCEVALUE" : return new CSiBKK.IFC.IFC4X2.IFCPropertyReferenceValue();
						case "IFCPROPERTYSET" : return new CSiBKK.IFC.IFC4X2.IFCPropertySet();
						case "IFCPROPERTYSETTEMPLATE" : return new CSiBKK.IFC.IFC4X2.IFCPropertySetTemplate();
						case "IFCPROPERTYSINGLEVALUE" : return new CSiBKK.IFC.IFC4X2.IFCPropertySingleValue();
						case "IFCPROPERTYTABLEVALUE" : return new CSiBKK.IFC.IFC4X2.IFCPropertyTableValue();
						case "IFCPROTECTIVEDEVICE" : return new CSiBKK.IFC.IFC4X2.IFCProtectiveDevice();
						case "IFCPROTECTIVEDEVICETRIPPINGUNIT" : return new CSiBKK.IFC.IFC4X2.IFCProtectiveDeviceTrippingUnit();
						case "IFCPROTECTIVEDEVICETRIPPINGUNITTYPE" : return new CSiBKK.IFC.IFC4X2.IFCProtectiveDeviceTrippingUnitType();
						case "IFCPROTECTIVEDEVICETYPE" : return new CSiBKK.IFC.IFC4X2.IFCProtectiveDeviceType();
						case "IFCPROXY" : return new CSiBKK.IFC.IFC4X2.IFCProxy();
						case "IFCPUMP" : return new CSiBKK.IFC.IFC4X2.IFCPump();
						case "IFCPUMPTYPE" : return new CSiBKK.IFC.IFC4X2.IFCPumpType();
						case "IFCQUANTITYAREA" : return new CSiBKK.IFC.IFC4X2.IFCQuantityArea();
						case "IFCQUANTITYCOUNT" : return new CSiBKK.IFC.IFC4X2.IFCQuantityCount();
						case "IFCQUANTITYLENGTH" : return new CSiBKK.IFC.IFC4X2.IFCQuantityLength();
						case "IFCQUANTITYTIME" : return new CSiBKK.IFC.IFC4X2.IFCQuantityTime();
						case "IFCQUANTITYVOLUME" : return new CSiBKK.IFC.IFC4X2.IFCQuantityVolume();
						case "IFCQUANTITYWEIGHT" : return new CSiBKK.IFC.IFC4X2.IFCQuantityWeight();
						case "IFCRAILING" : return new CSiBKK.IFC.IFC4X2.IFCRailing();
						case "IFCRAILINGTYPE" : return new CSiBKK.IFC.IFC4X2.IFCRailingType();
						case "IFCRAMP" : return new CSiBKK.IFC.IFC4X2.IFCRamp();
						case "IFCRAMPFLIGHT" : return new CSiBKK.IFC.IFC4X2.IFCRampFlight();
						case "IFCRAMPFLIGHTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCRampFlightType();
						case "IFCRAMPTYPE" : return new CSiBKK.IFC.IFC4X2.IFCRampType();
						case "IFCRATIONALBSPLINECURVEWITHKNOTS" : return new CSiBKK.IFC.IFC4X2.IFCRationalBSplineCurveWithKnots();
						case "IFCRATIONALBSPLINESURFACEWITHKNOTS" : return new CSiBKK.IFC.IFC4X2.IFCRationalBSplineSurfaceWithKnots();
						case "IFCRECTANGLEHOLLOWPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCRectangleHollowProfileDef();
						case "IFCRECTANGLEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCRectangleProfileDef();
						case "IFCRECTANGULARPYRAMID" : return new CSiBKK.IFC.IFC4X2.IFCRectangularPyramid();
						case "IFCRECTANGULARTRIMMEDSURFACE" : return new CSiBKK.IFC.IFC4X2.IFCRectangularTrimmedSurface();
						case "IFCRECURRENCEPATTERN" : return new CSiBKK.IFC.IFC4X2.IFCRecurrencePattern();
						case "IFCREFERENCE" : return new CSiBKK.IFC.IFC4X2.IFCReference();
						case "IFCREFERENT" : return new CSiBKK.IFC.IFC4X2.IFCReferent();
						case "IFCREGULARTIMESERIES" : return new CSiBKK.IFC.IFC4X2.IFCRegularTimeSeries();
						case "IFCREINFORCEMENTBARPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCReinforcementBarProperties();
						case "IFCREINFORCEMENTDEFINITIONPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCReinforcementDefinitionProperties();
						case "IFCREINFORCINGBAR" : return new CSiBKK.IFC.IFC4X2.IFCReinforcingBar();
						case "IFCREINFORCINGBARTYPE" : return new CSiBKK.IFC.IFC4X2.IFCReinforcingBarType();
						case "IFCREINFORCINGMESH" : return new CSiBKK.IFC.IFC4X2.IFCReinforcingMesh();
						case "IFCREINFORCINGMESHTYPE" : return new CSiBKK.IFC.IFC4X2.IFCReinforcingMeshType();
						case "IFCRELAGGREGATES" : return new CSiBKK.IFC.IFC4X2.IFCRelAggregates();
						case "IFCRELASSIGNSTOACTOR" : return new CSiBKK.IFC.IFC4X2.IFCRelAssignsToActor();
						case "IFCRELASSIGNSTOCONTROL" : return new CSiBKK.IFC.IFC4X2.IFCRelAssignsToControl();
						case "IFCRELASSIGNSTOGROUP" : return new CSiBKK.IFC.IFC4X2.IFCRelAssignsToGroup();
						case "IFCRELASSIGNSTOGROUPBYFACTOR" : return new CSiBKK.IFC.IFC4X2.IFCRelAssignsToGroupByFactor();
						case "IFCRELASSIGNSTOPROCESS" : return new CSiBKK.IFC.IFC4X2.IFCRelAssignsToProcess();
						case "IFCRELASSIGNSTOPRODUCT" : return new CSiBKK.IFC.IFC4X2.IFCRelAssignsToProduct();
						case "IFCRELASSIGNSTORESOURCE" : return new CSiBKK.IFC.IFC4X2.IFCRelAssignsToResource();
						case "IFCRELASSOCIATESAPPROVAL" : return new CSiBKK.IFC.IFC4X2.IFCRelAssociatesApproval();
						case "IFCRELASSOCIATESCLASSIFICATION" : return new CSiBKK.IFC.IFC4X2.IFCRelAssociatesClassification();
						case "IFCRELASSOCIATESCONSTRAINT" : return new CSiBKK.IFC.IFC4X2.IFCRelAssociatesConstraint();
						case "IFCRELASSOCIATESDOCUMENT" : return new CSiBKK.IFC.IFC4X2.IFCRelAssociatesDocument();
						case "IFCRELASSOCIATESLIBRARY" : return new CSiBKK.IFC.IFC4X2.IFCRelAssociatesLibrary();
						case "IFCRELASSOCIATESMATERIAL" : return new CSiBKK.IFC.IFC4X2.IFCRelAssociatesMaterial();
						case "IFCRELCONNECTSELEMENTS" : return new CSiBKK.IFC.IFC4X2.IFCRelConnectsElements();
						case "IFCRELCONNECTSPATHELEMENTS" : return new CSiBKK.IFC.IFC4X2.IFCRelConnectsPathElements();
						case "IFCRELCONNECTSPORTTOELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCRelConnectsPortToElement();
						case "IFCRELCONNECTSPORTS" : return new CSiBKK.IFC.IFC4X2.IFCRelConnectsPorts();
						case "IFCRELCONNECTSSTRUCTURALACTIVITY" : return new CSiBKK.IFC.IFC4X2.IFCRelConnectsStructuralActivity();
						case "IFCRELCONNECTSSTRUCTURALMEMBER" : return new CSiBKK.IFC.IFC4X2.IFCRelConnectsStructuralMember();
						case "IFCRELCONNECTSWITHECCENTRICITY" : return new CSiBKK.IFC.IFC4X2.IFCRelConnectsWithEccentricity();
						case "IFCRELCONNECTSWITHREALIZINGELEMENTS" : return new CSiBKK.IFC.IFC4X2.IFCRelConnectsWithRealizingElements();
						case "IFCRELCONTAINEDINSPATIALSTRUCTURE" : return new CSiBKK.IFC.IFC4X2.IFCRelContainedInSpatialStructure();
						case "IFCRELCOVERSBLDGELEMENTS" : return new CSiBKK.IFC.IFC4X2.IFCRelCoversBldgElements();
						case "IFCRELCOVERSSPACES" : return new CSiBKK.IFC.IFC4X2.IFCRelCoversSpaces();
						case "IFCRELDECLARES" : return new CSiBKK.IFC.IFC4X2.IFCRelDeclares();
						case "IFCRELDEFINESBYOBJECT" : return new CSiBKK.IFC.IFC4X2.IFCRelDefinesByObject();
						case "IFCRELDEFINESBYPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCRelDefinesByProperties();
						case "IFCRELDEFINESBYTEMPLATE" : return new CSiBKK.IFC.IFC4X2.IFCRelDefinesByTemplate();
						case "IFCRELDEFINESBYTYPE" : return new CSiBKK.IFC.IFC4X2.IFCRelDefinesByType();
						case "IFCRELFILLSELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCRelFillsElement();
						case "IFCRELFLOWCONTROLELEMENTS" : return new CSiBKK.IFC.IFC4X2.IFCRelFlowControlElements();
						case "IFCRELINTERFERESELEMENTS" : return new CSiBKK.IFC.IFC4X2.IFCRelInterferesElements();
						case "IFCRELNESTS" : return new CSiBKK.IFC.IFC4X2.IFCRelNests();
						case "IFCRELPOSITIONS" : return new CSiBKK.IFC.IFC4X2.IFCRelPositions();
						case "IFCRELPROJECTSELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCRelProjectsElement();
						case "IFCRELREFERENCEDINSPATIALSTRUCTURE" : return new CSiBKK.IFC.IFC4X2.IFCRelReferencedInSpatialStructure();
						case "IFCRELSEQUENCE" : return new CSiBKK.IFC.IFC4X2.IFCRelSequence();
						case "IFCRELSERVICESBUILDINGS" : return new CSiBKK.IFC.IFC4X2.IFCRelServicesBuildings();
						case "IFCRELSPACEBOUNDARY" : return new CSiBKK.IFC.IFC4X2.IFCRelSpaceBoundary();
						case "IFCRELSPACEBOUNDARY1STLEVEL" : return new CSiBKK.IFC.IFC4X2.IFCRelSpaceBoundary1stLevel();
						case "IFCRELSPACEBOUNDARY2NDLEVEL" : return new CSiBKK.IFC.IFC4X2.IFCRelSpaceBoundary2ndLevel();
						case "IFCRELVOIDSELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCRelVoidsElement();
						case "IFCREPARAMETRISEDCOMPOSITECURVESEGMENT" : return new CSiBKK.IFC.IFC4X2.IFCReparametrisedCompositeCurveSegment();
						case "IFCREPRESENTATIONMAP" : return new CSiBKK.IFC.IFC4X2.IFCRepresentationMap();
						case "IFCRESOURCEAPPROVALRELATIONSHIP" : return new CSiBKK.IFC.IFC4X2.IFCResourceApprovalRelationship();
						case "IFCRESOURCECONSTRAINTRELATIONSHIP" : return new CSiBKK.IFC.IFC4X2.IFCResourceConstraintRelationship();
						case "IFCRESOURCETIME" : return new CSiBKK.IFC.IFC4X2.IFCResourceTime();
						case "IFCREVOLVEDAREASOLID" : return new CSiBKK.IFC.IFC4X2.IFCRevolvedAreaSolid();
						case "IFCREVOLVEDAREASOLIDTAPERED" : return new CSiBKK.IFC.IFC4X2.IFCRevolvedAreaSolidTapered();
						case "IFCRIGHTCIRCULARCONE" : return new CSiBKK.IFC.IFC4X2.IFCRightCircularCone();
						case "IFCRIGHTCIRCULARCYLINDER" : return new CSiBKK.IFC.IFC4X2.IFCRightCircularCylinder();
						case "IFCROOF" : return new CSiBKK.IFC.IFC4X2.IFCRoof();
						case "IFCROOFTYPE" : return new CSiBKK.IFC.IFC4X2.IFCRoofType();
						case "IFCROUNDEDRECTANGLEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCRoundedRectangleProfileDef();
						case "IFCSIUNIT" : return new CSiBKK.IFC.IFC4X2.IFCSIUnit();
						case "IFCSANITARYTERMINAL" : return new CSiBKK.IFC.IFC4X2.IFCSanitaryTerminal();
						case "IFCSANITARYTERMINALTYPE" : return new CSiBKK.IFC.IFC4X2.IFCSanitaryTerminalType();
						case "IFCSEAMCURVE" : return new CSiBKK.IFC.IFC4X2.IFCSeamCurve();
						case "IFCSECTIONPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCSectionProperties();
						case "IFCSECTIONREINFORCEMENTPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCSectionReinforcementProperties();
						case "IFCSECTIONEDSOLIDHORIZONTAL" : return new CSiBKK.IFC.IFC4X2.IFCSectionedSolidHorizontal();
						case "IFCSECTIONEDSPINE" : return new CSiBKK.IFC.IFC4X2.IFCSectionedSpine();
						case "IFCSENSOR" : return new CSiBKK.IFC.IFC4X2.IFCSensor();
						case "IFCSENSORTYPE" : return new CSiBKK.IFC.IFC4X2.IFCSensorType();
						case "IFCSHADINGDEVICE" : return new CSiBKK.IFC.IFC4X2.IFCShadingDevice();
						case "IFCSHADINGDEVICETYPE" : return new CSiBKK.IFC.IFC4X2.IFCShadingDeviceType();
						case "IFCSHAPEASPECT" : return new CSiBKK.IFC.IFC4X2.IFCShapeAspect();
						case "IFCSHAPEREPRESENTATION" : return new CSiBKK.IFC.IFC4X2.IFCShapeRepresentation();
						case "IFCSHELLBASEDSURFACEMODEL" : return new CSiBKK.IFC.IFC4X2.IFCShellBasedSurfaceModel();
						case "IFCSIMPLEPROPERTYTEMPLATE" : return new CSiBKK.IFC.IFC4X2.IFCSimplePropertyTemplate();
						case "IFCSITE" : return new CSiBKK.IFC.IFC4X2.IFCSite();
						case "IFCSLAB" : return new CSiBKK.IFC.IFC4X2.IFCSlab();
						case "IFCSLABELEMENTEDCASE" : return new CSiBKK.IFC.IFC4X2.IFCSlabElementedCase();
						case "IFCSLABSTANDARDCASE" : return new CSiBKK.IFC.IFC4X2.IFCSlabStandardCase();
						case "IFCSLABTYPE" : return new CSiBKK.IFC.IFC4X2.IFCSlabType();
						case "IFCSLIPPAGECONNECTIONCONDITION" : return new CSiBKK.IFC.IFC4X2.IFCSlippageConnectionCondition();
						case "IFCSOLARDEVICE" : return new CSiBKK.IFC.IFC4X2.IFCSolarDevice();
						case "IFCSOLARDEVICETYPE" : return new CSiBKK.IFC.IFC4X2.IFCSolarDeviceType();
						case "IFCSPACE" : return new CSiBKK.IFC.IFC4X2.IFCSpace();
						case "IFCSPACEHEATER" : return new CSiBKK.IFC.IFC4X2.IFCSpaceHeater();
						case "IFCSPACEHEATERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCSpaceHeaterType();
						case "IFCSPACETYPE" : return new CSiBKK.IFC.IFC4X2.IFCSpaceType();
						case "IFCSPATIALZONE" : return new CSiBKK.IFC.IFC4X2.IFCSpatialZone();
						case "IFCSPATIALZONETYPE" : return new CSiBKK.IFC.IFC4X2.IFCSpatialZoneType();
						case "IFCSPHERE" : return new CSiBKK.IFC.IFC4X2.IFCSphere();
						case "IFCSPHERICALSURFACE" : return new CSiBKK.IFC.IFC4X2.IFCSphericalSurface();
						case "IFCSTACKTERMINAL" : return new CSiBKK.IFC.IFC4X2.IFCStackTerminal();
						case "IFCSTACKTERMINALTYPE" : return new CSiBKK.IFC.IFC4X2.IFCStackTerminalType();
						case "IFCSTAIR" : return new CSiBKK.IFC.IFC4X2.IFCStair();
						case "IFCSTAIRFLIGHT" : return new CSiBKK.IFC.IFC4X2.IFCStairFlight();
						case "IFCSTAIRFLIGHTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCStairFlightType();
						case "IFCSTAIRTYPE" : return new CSiBKK.IFC.IFC4X2.IFCStairType();
						case "IFCSTRUCTURALANALYSISMODEL" : return new CSiBKK.IFC.IFC4X2.IFCStructuralAnalysisModel();
						case "IFCSTRUCTURALCURVEACTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralCurveAction();
						case "IFCSTRUCTURALCURVECONNECTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralCurveConnection();
						case "IFCSTRUCTURALCURVEMEMBER" : return new CSiBKK.IFC.IFC4X2.IFCStructuralCurveMember();
						case "IFCSTRUCTURALCURVEMEMBERVARYING" : return new CSiBKK.IFC.IFC4X2.IFCStructuralCurveMemberVarying();
						case "IFCSTRUCTURALCURVEREACTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralCurveReaction();
						case "IFCSTRUCTURALLINEARACTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralLinearAction();
						case "IFCSTRUCTURALLOADCASE" : return new CSiBKK.IFC.IFC4X2.IFCStructuralLoadCase();
						case "IFCSTRUCTURALLOADCONFIGURATION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralLoadConfiguration();
						case "IFCSTRUCTURALLOADGROUP" : return new CSiBKK.IFC.IFC4X2.IFCStructuralLoadGroup();
						case "IFCSTRUCTURALLOADLINEARFORCE" : return new CSiBKK.IFC.IFC4X2.IFCStructuralLoadLinearForce();
						case "IFCSTRUCTURALLOADPLANARFORCE" : return new CSiBKK.IFC.IFC4X2.IFCStructuralLoadPlanarForce();
						case "IFCSTRUCTURALLOADSINGLEDISPLACEMENT" : return new CSiBKK.IFC.IFC4X2.IFCStructuralLoadSingleDisplacement();
						case "IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralLoadSingleDisplacementDistortion();
						case "IFCSTRUCTURALLOADSINGLEFORCE" : return new CSiBKK.IFC.IFC4X2.IFCStructuralLoadSingleForce();
						case "IFCSTRUCTURALLOADSINGLEFORCEWARPING" : return new CSiBKK.IFC.IFC4X2.IFCStructuralLoadSingleForceWarping();
						case "IFCSTRUCTURALLOADTEMPERATURE" : return new CSiBKK.IFC.IFC4X2.IFCStructuralLoadTemperature();
						case "IFCSTRUCTURALPLANARACTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralPlanarAction();
						case "IFCSTRUCTURALPOINTACTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralPointAction();
						case "IFCSTRUCTURALPOINTCONNECTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralPointConnection();
						case "IFCSTRUCTURALPOINTREACTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralPointReaction();
						case "IFCSTRUCTURALRESULTGROUP" : return new CSiBKK.IFC.IFC4X2.IFCStructuralResultGroup();
						case "IFCSTRUCTURALSURFACEACTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralSurfaceAction();
						case "IFCSTRUCTURALSURFACECONNECTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralSurfaceConnection();
						case "IFCSTRUCTURALSURFACEMEMBER" : return new CSiBKK.IFC.IFC4X2.IFCStructuralSurfaceMember();
						case "IFCSTRUCTURALSURFACEMEMBERVARYING" : return new CSiBKK.IFC.IFC4X2.IFCStructuralSurfaceMemberVarying();
						case "IFCSTRUCTURALSURFACEREACTION" : return new CSiBKK.IFC.IFC4X2.IFCStructuralSurfaceReaction();
						case "IFCSTYLEDITEM" : return new CSiBKK.IFC.IFC4X2.IFCStyledItem();
						case "IFCSTYLEDREPRESENTATION" : return new CSiBKK.IFC.IFC4X2.IFCStyledRepresentation();
						case "IFCSUBCONTRACTRESOURCE" : return new CSiBKK.IFC.IFC4X2.IFCSubContractResource();
						case "IFCSUBCONTRACTRESOURCETYPE" : return new CSiBKK.IFC.IFC4X2.IFCSubContractResourceType();
						case "IFCSUBEDGE" : return new CSiBKK.IFC.IFC4X2.IFCSubedge();
						case "IFCSURFACECURVE" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceCurve();
						case "IFCSURFACECURVESWEPTAREASOLID" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceCurveSweptAreaSolid();
						case "IFCSURFACEFEATURE" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceFeature();
						case "IFCSURFACEOFLINEAREXTRUSION" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceOfLinearExtrusion();
						case "IFCSURFACEOFREVOLUTION" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceOfRevolution();
						case "IFCSURFACEREINFORCEMENTAREA" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceReinforcementArea();
						case "IFCSURFACESTYLE" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceStyle();
						case "IFCSURFACESTYLELIGHTING" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceStyleLighting();
						case "IFCSURFACESTYLEREFRACTION" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceStyleRefraction();
						case "IFCSURFACESTYLERENDERING" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceStyleRendering();
						case "IFCSURFACESTYLESHADING" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceStyleShading();
						case "IFCSURFACESTYLEWITHTEXTURES" : return new CSiBKK.IFC.IFC4X2.IFCSurfaceStyleWithTextures();
						case "IFCSWEPTDISKSOLID" : return new CSiBKK.IFC.IFC4X2.IFCSweptDiskSolid();
						case "IFCSWEPTDISKSOLIDPOLYGONAL" : return new CSiBKK.IFC.IFC4X2.IFCSweptDiskSolidPolygonal();
						case "IFCSWITCHINGDEVICE" : return new CSiBKK.IFC.IFC4X2.IFCSwitchingDevice();
						case "IFCSWITCHINGDEVICETYPE" : return new CSiBKK.IFC.IFC4X2.IFCSwitchingDeviceType();
						case "IFCSYSTEM" : return new CSiBKK.IFC.IFC4X2.IFCSystem();
						case "IFCSYSTEMFURNITUREELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCSystemFurnitureElement();
						case "IFCSYSTEMFURNITUREELEMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCSystemFurnitureElementType();
						case "IFCTSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCTShapeProfileDef();
						case "IFCTABLE" : return new CSiBKK.IFC.IFC4X2.IFCTable();
						case "IFCTABLECOLUMN" : return new CSiBKK.IFC.IFC4X2.IFCTableColumn();
						case "IFCTABLEROW" : return new CSiBKK.IFC.IFC4X2.IFCTableRow();
						case "IFCTANK" : return new CSiBKK.IFC.IFC4X2.IFCTank();
						case "IFCTANKTYPE" : return new CSiBKK.IFC.IFC4X2.IFCTankType();
						case "IFCTASK" : return new CSiBKK.IFC.IFC4X2.IFCTask();
						case "IFCTASKTIME" : return new CSiBKK.IFC.IFC4X2.IFCTaskTime();
						case "IFCTASKTIMERECURRING" : return new CSiBKK.IFC.IFC4X2.IFCTaskTimeRecurring();
						case "IFCTASKTYPE" : return new CSiBKK.IFC.IFC4X2.IFCTaskType();
						case "IFCTELECOMADDRESS" : return new CSiBKK.IFC.IFC4X2.IFCTelecomAddress();
						case "IFCTENDON" : return new CSiBKK.IFC.IFC4X2.IFCTendon();
						case "IFCTENDONANCHOR" : return new CSiBKK.IFC.IFC4X2.IFCTendonAnchor();
						case "IFCTENDONANCHORTYPE" : return new CSiBKK.IFC.IFC4X2.IFCTendonAnchorType();
						case "IFCTENDONCONDUIT" : return new CSiBKK.IFC.IFC4X2.IFCTendonConduit();
						case "IFCTENDONCONDUITTYPE" : return new CSiBKK.IFC.IFC4X2.IFCTendonConduitType();
						case "IFCTENDONTYPE" : return new CSiBKK.IFC.IFC4X2.IFCTendonType();
						case "IFCTEXTLITERAL" : return new CSiBKK.IFC.IFC4X2.IFCTextLiteral();
						case "IFCTEXTLITERALWITHEXTENT" : return new CSiBKK.IFC.IFC4X2.IFCTextLiteralWithExtent();
						case "IFCTEXTSTYLE" : return new CSiBKK.IFC.IFC4X2.IFCTextStyle();
						case "IFCTEXTSTYLEFONTMODEL" : return new CSiBKK.IFC.IFC4X2.IFCTextStyleFontModel();
						case "IFCTEXTSTYLEFORDEFINEDFONT" : return new CSiBKK.IFC.IFC4X2.IFCTextStyleForDefinedFont();
						case "IFCTEXTSTYLETEXTMODEL" : return new CSiBKK.IFC.IFC4X2.IFCTextStyleTextModel();
						case "IFCTEXTURECOORDINATEGENERATOR" : return new CSiBKK.IFC.IFC4X2.IFCTextureCoordinateGenerator();
						case "IFCTEXTUREMAP" : return new CSiBKK.IFC.IFC4X2.IFCTextureMap();
						case "IFCTEXTUREVERTEX" : return new CSiBKK.IFC.IFC4X2.IFCTextureVertex();
						case "IFCTEXTUREVERTEXLIST" : return new CSiBKK.IFC.IFC4X2.IFCTextureVertexList();
						case "IFCTIMEPERIOD" : return new CSiBKK.IFC.IFC4X2.IFCTimePeriod();
						case "IFCTIMESERIESVALUE" : return new CSiBKK.IFC.IFC4X2.IFCTimeSeriesValue();
						case "IFCTOPOLOGYREPRESENTATION" : return new CSiBKK.IFC.IFC4X2.IFCTopologyRepresentation();
						case "IFCTOROIDALSURFACE" : return new CSiBKK.IFC.IFC4X2.IFCToroidalSurface();
						case "IFCTRANSFORMER" : return new CSiBKK.IFC.IFC4X2.IFCTransformer();
						case "IFCTRANSFORMERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCTransformerType();
						case "IFCTRANSITIONCURVESEGMENT2D" : return new CSiBKK.IFC.IFC4X2.IFCTransitionCurveSegment2D();
						case "IFCTRANSPORTELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCTransportElement();
						case "IFCTRANSPORTELEMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCTransportElementType();
						case "IFCTRAPEZIUMPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCTrapeziumProfileDef();
						case "IFCTRIANGULATEDFACESET" : return new CSiBKK.IFC.IFC4X2.IFCTriangulatedFaceSet();
						case "IFCTRIANGULATEDIRREGULARNETWORK" : return new CSiBKK.IFC.IFC4X2.IFCTriangulatedIrregularNetwork();
						case "IFCTRIMMEDCURVE" : return new CSiBKK.IFC.IFC4X2.IFCTrimmedCurve();
						case "IFCTUBEBUNDLE" : return new CSiBKK.IFC.IFC4X2.IFCTubeBundle();
						case "IFCTUBEBUNDLETYPE" : return new CSiBKK.IFC.IFC4X2.IFCTubeBundleType();
						case "IFCTYPEOBJECT" : return new CSiBKK.IFC.IFC4X2.IFCTypeObject();
						case "IFCTYPEPRODUCT" : return new CSiBKK.IFC.IFC4X2.IFCTypeProduct();
						case "IFCUSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCUShapeProfileDef();
						case "IFCUNITASSIGNMENT" : return new CSiBKK.IFC.IFC4X2.IFCUnitAssignment();
						case "IFCUNITARYCONTROLELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCUnitaryControlElement();
						case "IFCUNITARYCONTROLELEMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCUnitaryControlElementType();
						case "IFCUNITARYEQUIPMENT" : return new CSiBKK.IFC.IFC4X2.IFCUnitaryEquipment();
						case "IFCUNITARYEQUIPMENTTYPE" : return new CSiBKK.IFC.IFC4X2.IFCUnitaryEquipmentType();
						case "IFCVALVE" : return new CSiBKK.IFC.IFC4X2.IFCValve();
						case "IFCVALVETYPE" : return new CSiBKK.IFC.IFC4X2.IFCValveType();
						case "IFCVECTOR" : return new CSiBKK.IFC.IFC4X2.IFCVector();
						case "IFCVERTEX" : return new CSiBKK.IFC.IFC4X2.IFCVertex();
						case "IFCVERTEXLOOP" : return new CSiBKK.IFC.IFC4X2.IFCVertexLoop();
						case "IFCVERTEXPOINT" : return new CSiBKK.IFC.IFC4X2.IFCVertexPoint();
						case "IFCVIBRATIONDAMPER" : return new CSiBKK.IFC.IFC4X2.IFCVibrationDamper();
						case "IFCVIBRATIONDAMPERTYPE" : return new CSiBKK.IFC.IFC4X2.IFCVibrationDamperType();
						case "IFCVIBRATIONISOLATOR" : return new CSiBKK.IFC.IFC4X2.IFCVibrationIsolator();
						case "IFCVIBRATIONISOLATORTYPE" : return new CSiBKK.IFC.IFC4X2.IFCVibrationIsolatorType();
						case "IFCVIRTUALELEMENT" : return new CSiBKK.IFC.IFC4X2.IFCVirtualElement();
						case "IFCVIRTUALGRIDINTERSECTION" : return new CSiBKK.IFC.IFC4X2.IFCVirtualGridIntersection();
						case "IFCVOIDINGFEATURE" : return new CSiBKK.IFC.IFC4X2.IFCVoidingFeature();
						case "IFCWALL" : return new CSiBKK.IFC.IFC4X2.IFCWall();
						case "IFCWALLELEMENTEDCASE" : return new CSiBKK.IFC.IFC4X2.IFCWallElementedCase();
						case "IFCWALLSTANDARDCASE" : return new CSiBKK.IFC.IFC4X2.IFCWallStandardCase();
						case "IFCWALLTYPE" : return new CSiBKK.IFC.IFC4X2.IFCWallType();
						case "IFCWASTETERMINAL" : return new CSiBKK.IFC.IFC4X2.IFCWasteTerminal();
						case "IFCWASTETERMINALTYPE" : return new CSiBKK.IFC.IFC4X2.IFCWasteTerminalType();
						case "IFCWINDOW" : return new CSiBKK.IFC.IFC4X2.IFCWindow();
						case "IFCWINDOWLININGPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCWindowLiningProperties();
						case "IFCWINDOWPANELPROPERTIES" : return new CSiBKK.IFC.IFC4X2.IFCWindowPanelProperties();
						case "IFCWINDOWSTANDARDCASE" : return new CSiBKK.IFC.IFC4X2.IFCWindowStandardCase();
						case "IFCWINDOWSTYLE" : return new CSiBKK.IFC.IFC4X2.IFCWindowStyle();
						case "IFCWINDOWTYPE" : return new CSiBKK.IFC.IFC4X2.IFCWindowType();
						case "IFCWORKCALENDAR" : return new CSiBKK.IFC.IFC4X2.IFCWorkCalendar();
						case "IFCWORKPLAN" : return new CSiBKK.IFC.IFC4X2.IFCWorkPlan();
						case "IFCWORKSCHEDULE" : return new CSiBKK.IFC.IFC4X2.IFCWorkSchedule();
						case "IFCWORKTIME" : return new CSiBKK.IFC.IFC4X2.IFCWorkTime();
						case "IFCZSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X2.IFCZShapeProfileDef();
						case "IFCZONE" : return new CSiBKK.IFC.IFC4X2.IFCZone();
					}
				break;
				case IFC_VERSION.IFC4X3:
					switch (className)
					{
						case "IFCABSORBEDDOSEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCAbsorbedDoseMeasure();
						case "IFCACCELERATIONMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCAccelerationMeasure();
						case "IFCAMOUNTOFSUBSTANCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCAmountOfSubstanceMeasure();
						case "IFCANGULARVELOCITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCAngularVelocityMeasure();
						case "IFCAREADENSITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCAreaDensityMeasure();
						case "IFCAREAMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCAreaMeasure();
						case "IFCBINARY" : return new CSiBKK.IFC.IFC4X3.IFCBinary();
						case "IFCBOOLEAN" : return new CSiBKK.IFC.IFC4X3.IFCBoolean();
						case "IFCBOXALIGNMENT" : return new CSiBKK.IFC.IFC4X3.IFCBoxAlignment();
						case "IFCCARDINALPOINTREFERENCE" : return new CSiBKK.IFC.IFC4X3.IFCCardinalPointReference();
						case "IFCCONTEXTDEPENDENTMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCContextDependentMeasure();
						case "IFCCOUNTMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCCountMeasure();
						case "IFCCURVATUREMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCCurvatureMeasure();
						case "IFCDATE" : return new CSiBKK.IFC.IFC4X3.IFCDate();
						case "IFCDATETIME" : return new CSiBKK.IFC.IFC4X3.IFCDateTime();
						case "IFCDAYINMONTHNUMBER" : return new CSiBKK.IFC.IFC4X3.IFCDayInMonthNumber();
						case "IFCDAYINWEEKNUMBER" : return new CSiBKK.IFC.IFC4X3.IFCDayInWeekNumber();
						case "IFCDESCRIPTIVEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCDescriptiveMeasure();
						case "IFCDIMENSIONCOUNT" : return new CSiBKK.IFC.IFC4X3.IFCDimensionCount();
						case "IFCDOSEEQUIVALENTMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCDoseEquivalentMeasure();
						case "IFCDURATION" : return new CSiBKK.IFC.IFC4X3.IFCDuration();
						case "IFCDYNAMICVISCOSITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCDynamicViscosityMeasure();
						case "IFCELECTRICCAPACITANCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCElectricCapacitanceMeasure();
						case "IFCELECTRICCHARGEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCElectricChargeMeasure();
						case "IFCELECTRICCONDUCTANCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCElectricConductanceMeasure();
						case "IFCELECTRICCURRENTMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCElectricCurrentMeasure();
						case "IFCELECTRICRESISTANCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCElectricResistanceMeasure();
						case "IFCELECTRICVOLTAGEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCElectricVoltageMeasure();
						case "IFCENERGYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCEnergyMeasure();
						case "IFCFONTSTYLE" : return new CSiBKK.IFC.IFC4X3.IFCFontStyle();
						case "IFCFONTVARIANT" : return new CSiBKK.IFC.IFC4X3.IFCFontVariant();
						case "IFCFONTWEIGHT" : return new CSiBKK.IFC.IFC4X3.IFCFontWeight();
						case "IFCFORCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCForceMeasure();
						case "IFCFREQUENCYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCFrequencyMeasure();
						case "IFCGLOBALLYUNIQUEID" : return new CSiBKK.IFC.IFC4X3.IFCGloballyUniqueId();
						case "IFCHEATFLUXDENSITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCHeatFluxDensityMeasure();
						case "IFCHEATINGVALUEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCHeatingValueMeasure();
						case "IFCIDENTIFIER" : return new CSiBKK.IFC.IFC4X3.IFCIdentifier();
						case "IFCILLUMINANCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCIlluminanceMeasure();
						case "IFCINDUCTANCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCInductanceMeasure();
						case "IFCINTEGER" : return new CSiBKK.IFC.IFC4X3.IFCInteger();
						case "IFCINTEGERCOUNTRATEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCIntegerCountRateMeasure();
						case "IFCIONCONCENTRATIONMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCIonConcentrationMeasure();
						case "IFCISOTHERMALMOISTURECAPACITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCIsothermalMoistureCapacityMeasure();
						case "IFCKINEMATICVISCOSITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCKinematicViscosityMeasure();
						case "IFCLABEL" : return new CSiBKK.IFC.IFC4X3.IFCLabel();
						case "IFCLANGUAGEID" : return new CSiBKK.IFC.IFC4X3.IFCLanguageId();
						case "IFCLENGTHMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCLengthMeasure();
						case "IFCLINEARFORCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCLinearForceMeasure();
						case "IFCLINEARMOMENTMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCLinearMomentMeasure();
						case "IFCLINEARSTIFFNESSMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCLinearStiffnessMeasure();
						case "IFCLINEARVELOCITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCLinearVelocityMeasure();
						case "IFCLOGICAL" : return new CSiBKK.IFC.IFC4X3.IFCLogical();
						case "IFCLUMINOUSFLUXMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCLuminousFluxMeasure();
						case "IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCLuminousIntensityDistributionMeasure();
						case "IFCLUMINOUSINTENSITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCLuminousIntensityMeasure();
						case "IFCMAGNETICFLUXDENSITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCMagneticFluxDensityMeasure();
						case "IFCMAGNETICFLUXMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCMagneticFluxMeasure();
						case "IFCMASSDENSITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCMassDensityMeasure();
						case "IFCMASSFLOWRATEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCMassFlowRateMeasure();
						case "IFCMASSMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCMassMeasure();
						case "IFCMASSPERLENGTHMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCMassPerLengthMeasure();
						case "IFCMODULUSOFELASTICITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCModulusOfElasticityMeasure();
						case "IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCModulusOfLinearSubgradeReactionMeasure();
						case "IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCModulusOfRotationalSubgradeReactionMeasure();
						case "IFCMODULUSOFSUBGRADEREACTIONMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCModulusOfSubgradeReactionMeasure();
						case "IFCMOISTUREDIFFUSIVITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCMoistureDiffusivityMeasure();
						case "IFCMOLECULARWEIGHTMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCMolecularWeightMeasure();
						case "IFCMOMENTOFINERTIAMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCMomentOfInertiaMeasure();
						case "IFCMONETARYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCMonetaryMeasure();
						case "IFCMONTHINYEARNUMBER" : return new CSiBKK.IFC.IFC4X3.IFCMonthInYearNumber();
						case "IFCNONNEGATIVELENGTHMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCNonNegativeLengthMeasure();
						case "IFCNORMALISEDRATIOMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCNormalisedRatioMeasure();
						case "IFCNUMERICMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCNumericMeasure();
						case "IFCPHMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCPHMeasure();
						case "IFCPARAMETERVALUE" : return new CSiBKK.IFC.IFC4X3.IFCParameterValue();
						case "IFCPLANARFORCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCPlanarForceMeasure();
						case "IFCPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCPlaneAngleMeasure();
						case "IFCPOSITIVEINTEGER" : return new CSiBKK.IFC.IFC4X3.IFCPositiveInteger();
						case "IFCPOSITIVELENGTHMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCPositiveLengthMeasure();
						case "IFCPOSITIVEPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCPositivePlaneAngleMeasure();
						case "IFCPOSITIVERATIOMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCPositiveRatioMeasure();
						case "IFCPOWERMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCPowerMeasure();
						case "IFCPRESENTABLETEXT" : return new CSiBKK.IFC.IFC4X3.IFCPresentableText();
						case "IFCPRESSUREMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCPressureMeasure();
						case "IFCRADIOACTIVITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCRadioActivityMeasure();
						case "IFCRATIOMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCRatioMeasure();
						case "IFCREAL" : return new CSiBKK.IFC.IFC4X3.IFCReal();
						case "IFCROTATIONALFREQUENCYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCRotationalFrequencyMeasure();
						case "IFCROTATIONALMASSMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCRotationalMassMeasure();
						case "IFCROTATIONALSTIFFNESSMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCRotationalStiffnessMeasure();
						case "IFCSECTIONMODULUSMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCSectionModulusMeasure();
						case "IFCSECTIONALAREAINTEGRALMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCSectionalAreaIntegralMeasure();
						case "IFCSHEARMODULUSMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCShearModulusMeasure();
						case "IFCSOLIDANGLEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCSolidAngleMeasure();
						case "IFCSOUNDPOWERLEVELMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCSoundPowerLevelMeasure();
						case "IFCSOUNDPOWERMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCSoundPowerMeasure();
						case "IFCSOUNDPRESSURELEVELMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCSoundPressureLevelMeasure();
						case "IFCSOUNDPRESSUREMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCSoundPressureMeasure();
						case "IFCSPECIFICHEATCAPACITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCSpecificHeatCapacityMeasure();
						case "IFCSPECULAREXPONENT" : return new CSiBKK.IFC.IFC4X3.IFCSpecularExponent();
						case "IFCSPECULARROUGHNESS" : return new CSiBKK.IFC.IFC4X3.IFCSpecularRoughness();
						case "IFCSTRIPPEDOPTIONAL" : return new CSiBKK.IFC.IFC4X3.IFCStrippedOptional();
						case "IFCTEMPERATUREGRADIENTMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCTemperatureGradientMeasure();
						case "IFCTEMPERATURERATEOFCHANGEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCTemperatureRateOfChangeMeasure();
						case "IFCTEXT" : return new CSiBKK.IFC.IFC4X3.IFCText();
						case "IFCTEXTALIGNMENT" : return new CSiBKK.IFC.IFC4X3.IFCTextAlignment();
						case "IFCTEXTDECORATION" : return new CSiBKK.IFC.IFC4X3.IFCTextDecoration();
						case "IFCTEXTFONTNAME" : return new CSiBKK.IFC.IFC4X3.IFCTextFontName();
						case "IFCTEXTTRANSFORMATION" : return new CSiBKK.IFC.IFC4X3.IFCTextTransformation();
						case "IFCTHERMALADMITTANCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCThermalAdmittanceMeasure();
						case "IFCTHERMALCONDUCTIVITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCThermalConductivityMeasure();
						case "IFCTHERMALEXPANSIONCOEFFICIENTMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCThermalExpansionCoefficientMeasure();
						case "IFCTHERMALRESISTANCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCThermalResistanceMeasure();
						case "IFCTHERMALTRANSMITTANCEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCThermalTransmittanceMeasure();
						case "IFCTHERMODYNAMICTEMPERATUREMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCThermodynamicTemperatureMeasure();
						case "IFCTIME" : return new CSiBKK.IFC.IFC4X3.IFCTime();
						case "IFCTIMEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCTimeMeasure();
						case "IFCTIMESTAMP" : return new CSiBKK.IFC.IFC4X3.IFCTimeStamp();
						case "IFCTORQUEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCTorqueMeasure();
						case "IFCURIREFERENCE" : return new CSiBKK.IFC.IFC4X3.IFCURIReference();
						case "IFCVAPORPERMEABILITYMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCVaporPermeabilityMeasure();
						case "IFCVOLUMEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCVolumeMeasure();
						case "IFCVOLUMETRICFLOWRATEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCVolumetricFlowRateMeasure();
						case "IFCWARPINGCONSTANTMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCWarpingConstantMeasure();
						case "IFCWARPINGMOMENTMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCWarpingMomentMeasure();
						case "IFCWELLKNOWNTEXTLITERAL" : return new CSiBKK.IFC.IFC4X3.IFCWellKnownTextLiteral();
						case "IFCARCINDEX" : return new CSiBKK.IFC.IFC4X3.IFCArcIndex();
						case "IFCCOMPLEXNUMBER" : return new CSiBKK.IFC.IFC4X3.IFCComplexNumber();
						case "IFCCOMPOUNDPLANEANGLEMEASURE" : return new CSiBKK.IFC.IFC4X3.IFCCompoundPlaneAngleMeasure();
						case "IFCLINEINDEX" : return new CSiBKK.IFC.IFC4X3.IFCLineIndex();
						case "IFCPROPERTYSETDEFINITIONSET" : return new CSiBKK.IFC.IFC4X3.IFCPropertySetDefinitionSet();
						case "IFCACTIONREQUESTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCActionRequestTypeEnum();
						case "IFCACTIONSOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCActionSourceTypeEnum();
						case "IFCACTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCActionTypeEnum();
						case "IFCACTUATORTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCActuatorTypeEnum();
						case "IFCADDRESSTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAddressTypeEnum();
						case "IFCAIRTERMINALBOXTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAirTerminalBoxTypeEnum();
						case "IFCAIRTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAirTerminalTypeEnum();
						case "IFCAIRTOAIRHEATRECOVERYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAirToAirHeatRecoveryTypeEnum();
						case "IFCALARMTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAlarmTypeEnum();
						case "IFCALIGNMENTCANTSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAlignmentCantSegmentTypeEnum();
						case "IFCALIGNMENTHORIZONTALSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAlignmentHorizontalSegmentTypeEnum();
						case "IFCALIGNMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAlignmentTypeEnum();
						case "IFCALIGNMENTVERTICALSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAlignmentVerticalSegmentTypeEnum();
						case "IFCANALYSISMODELTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAnalysisModelTypeEnum();
						case "IFCANALYSISTHEORYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAnalysisTheoryTypeEnum();
						case "IFCANNOTATIONTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAnnotationTypeEnum();
						case "IFCARITHMETICOPERATORENUM" : return new CSiBKK.IFC.IFC4X3.IFCArithmeticOperatorEnum();
						case "IFCASSEMBLYPLACEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAssemblyPlaceEnum();
						case "IFCAUDIOVISUALAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCAudioVisualApplianceTypeEnum();
						case "IFCBSPLINECURVEFORM" : return new CSiBKK.IFC.IFC4X3.IFCBSplineCurveForm();
						case "IFCBSPLINESURFACEFORM" : return new CSiBKK.IFC.IFC4X3.IFCBSplineSurfaceForm();
						case "IFCBEAMTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCBeamTypeEnum();
						case "IFCBEARINGTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCBearingTypeEnum();
						case "IFCBENCHMARKENUM" : return new CSiBKK.IFC.IFC4X3.IFCBenchmarkEnum();
						case "IFCBOILERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCBoilerTypeEnum();
						case "IFCBOOLEANOPERATOR" : return new CSiBKK.IFC.IFC4X3.IFCBooleanOperator();
						case "IFCBRIDGEPARTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCBridgePartTypeEnum();
						case "IFCBRIDGETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCBridgeTypeEnum();
						case "IFCBUILDINGELEMENTPARTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCBuildingElementPartTypeEnum();
						case "IFCBUILDINGELEMENTPROXYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCBuildingElementProxyTypeEnum();
						case "IFCBUILDINGSYSTEMTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCBuildingSystemTypeEnum();
						case "IFCBUILTSYSTEMTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCBuiltSystemTypeEnum();
						case "IFCBURNERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCBurnerTypeEnum();
						case "IFCCABLECARRIERFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCableCarrierFittingTypeEnum();
						case "IFCCABLECARRIERSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCableCarrierSegmentTypeEnum();
						case "IFCCABLEFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCableFittingTypeEnum();
						case "IFCCABLESEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCableSegmentTypeEnum();
						case "IFCCAISSONFOUNDATIONTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCaissonFoundationTypeEnum();
						case "IFCCHANGEACTIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCChangeActionEnum();
						case "IFCCHILLERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCChillerTypeEnum();
						case "IFCCHIMNEYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCChimneyTypeEnum();
						case "IFCCOILTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCoilTypeEnum();
						case "IFCCOLUMNTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCColumnTypeEnum();
						case "IFCCOMMUNICATIONSAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCommunicationsApplianceTypeEnum();
						case "IFCCOMPLEXPROPERTYTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCComplexPropertyTemplateTypeEnum();
						case "IFCCOMPRESSORTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCompressorTypeEnum();
						case "IFCCONDENSERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCondenserTypeEnum();
						case "IFCCONNECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCConnectionTypeEnum();
						case "IFCCONSTRAINTENUM" : return new CSiBKK.IFC.IFC4X3.IFCConstraintEnum();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCConstructionEquipmentResourceTypeEnum();
						case "IFCCONSTRUCTIONMATERIALRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCConstructionMaterialResourceTypeEnum();
						case "IFCCONSTRUCTIONPRODUCTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCConstructionProductResourceTypeEnum();
						case "IFCCONTROLLERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCControllerTypeEnum();
						case "IFCCONVEYORSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCConveyorSegmentTypeEnum();
						case "IFCCOOLEDBEAMTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCooledBeamTypeEnum();
						case "IFCCOOLINGTOWERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCoolingTowerTypeEnum();
						case "IFCCOSTITEMTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCostItemTypeEnum();
						case "IFCCOSTSCHEDULETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCostScheduleTypeEnum();
						case "IFCCOURSETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCourseTypeEnum();
						case "IFCCOVERINGTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCoveringTypeEnum();
						case "IFCCREWRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCrewResourceTypeEnum();
						case "IFCCURTAINWALLTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCCurtainWallTypeEnum();
						case "IFCCURVEINTERPOLATIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCCurveInterpolationEnum();
						case "IFCDAMPERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCDamperTypeEnum();
						case "IFCDATAORIGINENUM" : return new CSiBKK.IFC.IFC4X3.IFCDataOriginEnum();
						case "IFCDERIVEDUNITENUM" : return new CSiBKK.IFC.IFC4X3.IFCDerivedUnitEnum();
						case "IFCDIRECTIONSENSEENUM" : return new CSiBKK.IFC.IFC4X3.IFCDirectionSenseEnum();
						case "IFCDISCRETEACCESSORYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCDiscreteAccessoryTypeEnum();
						case "IFCDISTRIBUTIONBOARDTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCDistributionBoardTypeEnum();
						case "IFCDISTRIBUTIONCHAMBERELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCDistributionChamberElementTypeEnum();
						case "IFCDISTRIBUTIONPORTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCDistributionPortTypeEnum();
						case "IFCDISTRIBUTIONSYSTEMENUM" : return new CSiBKK.IFC.IFC4X3.IFCDistributionSystemEnum();
						case "IFCDOCUMENTCONFIDENTIALITYENUM" : return new CSiBKK.IFC.IFC4X3.IFCDocumentConfidentialityEnum();
						case "IFCDOCUMENTSTATUSENUM" : return new CSiBKK.IFC.IFC4X3.IFCDocumentStatusEnum();
						case "IFCDOORPANELOPERATIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCDoorPanelOperationEnum();
						case "IFCDOORPANELPOSITIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCDoorPanelPositionEnum();
						case "IFCDOORTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCDoorTypeEnum();
						case "IFCDOORTYPEOPERATIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCDoorTypeOperationEnum();
						case "IFCDUCTFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCDuctFittingTypeEnum();
						case "IFCDUCTSEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCDuctSegmentTypeEnum();
						case "IFCDUCTSILENCERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCDuctSilencerTypeEnum();
						case "IFCEARTHWORKSCUTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCEarthworksCutTypeEnum();
						case "IFCEARTHWORKSFILLTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCEarthworksFillTypeEnum();
						case "IFCELECTRICAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCElectricApplianceTypeEnum();
						case "IFCELECTRICDISTRIBUTIONBOARDTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCElectricDistributionBoardTypeEnum();
						case "IFCELECTRICFLOWSTORAGEDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCElectricFlowStorageDeviceTypeEnum();
						case "IFCELECTRICFLOWTREATMENTDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCElectricFlowTreatmentDeviceTypeEnum();
						case "IFCELECTRICGENERATORTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCElectricGeneratorTypeEnum();
						case "IFCELECTRICMOTORTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCElectricMotorTypeEnum();
						case "IFCELECTRICTIMECONTROLTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCElectricTimeControlTypeEnum();
						case "IFCELEMENTASSEMBLYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCElementAssemblyTypeEnum();
						case "IFCELEMENTCOMPOSITIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCElementCompositionEnum();
						case "IFCENGINETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCEngineTypeEnum();
						case "IFCEVAPORATIVECOOLERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCEvaporativeCoolerTypeEnum();
						case "IFCEVAPORATORTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCEvaporatorTypeEnum();
						case "IFCEVENTTRIGGERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCEventTriggerTypeEnum();
						case "IFCEVENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCEventTypeEnum();
						case "IFCEXTERNALSPATIALELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCExternalSpatialElementTypeEnum();
						case "IFCFACILITYPARTCOMMONTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCFacilityPartCommonTypeEnum();
						case "IFCFACILITYUSAGEENUM" : return new CSiBKK.IFC.IFC4X3.IFCFacilityUsageEnum();
						case "IFCFANTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCFanTypeEnum();
						case "IFCFASTENERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCFastenerTypeEnum();
						case "IFCFILTERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCFilterTypeEnum();
						case "IFCFIRESUPPRESSIONTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCFireSuppressionTerminalTypeEnum();
						case "IFCFLOWDIRECTIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCFlowDirectionEnum();
						case "IFCFLOWINSTRUMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCFlowInstrumentTypeEnum();
						case "IFCFLOWMETERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCFlowMeterTypeEnum();
						case "IFCFOOTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCFootingTypeEnum();
						case "IFCFURNITURETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCFurnitureTypeEnum();
						case "IFCGEOGRAPHICELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCGeographicElementTypeEnum();
						case "IFCGEOMETRICPROJECTIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCGeometricProjectionEnum();
						case "IFCGEOTECHNICALSTRATUMTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCGeotechnicalStratumTypeEnum();
						case "IFCGLOBALORLOCALENUM" : return new CSiBKK.IFC.IFC4X3.IFCGlobalOrLocalEnum();
						case "IFCGRIDTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCGridTypeEnum();
						case "IFCHEATEXCHANGERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCHeatExchangerTypeEnum();
						case "IFCHUMIDIFIERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCHumidifierTypeEnum();
						case "IFCIMPACTPROTECTIONDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCImpactProtectionDeviceTypeEnum();
						case "IFCINTERCEPTORTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCInterceptorTypeEnum();
						case "IFCINTERNALOREXTERNALENUM" : return new CSiBKK.IFC.IFC4X3.IFCInternalOrExternalEnum();
						case "IFCINVENTORYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCInventoryTypeEnum();
						case "IFCJUNCTIONBOXTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCJunctionBoxTypeEnum();
						case "IFCKERBTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCKerbTypeEnum();
						case "IFCKNOTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCKnotType();
						case "IFCLABORRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCLaborResourceTypeEnum();
						case "IFCLAMPTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCLampTypeEnum();
						case "IFCLAYERSETDIRECTIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCLayerSetDirectionEnum();
						case "IFCLIGHTDISTRIBUTIONCURVEENUM" : return new CSiBKK.IFC.IFC4X3.IFCLightDistributionCurveEnum();
						case "IFCLIGHTEMISSIONSOURCEENUM" : return new CSiBKK.IFC.IFC4X3.IFCLightEmissionSourceEnum();
						case "IFCLIGHTFIXTURETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCLightFixtureTypeEnum();
						case "IFCLIQUIDTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCLiquidTerminalTypeEnum();
						case "IFCLOADGROUPTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCLoadGroupTypeEnum();
						case "IFCLOGICALOPERATORENUM" : return new CSiBKK.IFC.IFC4X3.IFCLogicalOperatorEnum();
						case "IFCMARINEFACILITYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCMarineFacilityTypeEnum();
						case "IFCMARINEPARTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCMarinePartTypeEnum();
						case "IFCMECHANICALFASTENERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCMechanicalFastenerTypeEnum();
						case "IFCMEDICALDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCMedicalDeviceTypeEnum();
						case "IFCMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCMemberTypeEnum();
						case "IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCMobileTelecommunicationsApplianceTypeEnum();
						case "IFCMOORINGDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCMooringDeviceTypeEnum();
						case "IFCMOTORCONNECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCMotorConnectionTypeEnum();
						case "IFCNAVIGATIONELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCNavigationElementTypeEnum();
						case "IFCOBJECTIVEENUM" : return new CSiBKK.IFC.IFC4X3.IFCObjectiveEnum();
						case "IFCOCCUPANTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCOccupantTypeEnum();
						case "IFCOPENINGELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCOpeningElementTypeEnum();
						case "IFCOUTLETTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCOutletTypeEnum();
						case "IFCPAVEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCPavementTypeEnum();
						case "IFCPERFORMANCEHISTORYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCPerformanceHistoryTypeEnum();
						case "IFCPERMEABLECOVERINGOPERATIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCPermeableCoveringOperationEnum();
						case "IFCPERMITTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCPermitTypeEnum();
						case "IFCPHYSICALORVIRTUALENUM" : return new CSiBKK.IFC.IFC4X3.IFCPhysicalOrVirtualEnum();
						case "IFCPILECONSTRUCTIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCPileConstructionEnum();
						case "IFCPILETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCPileTypeEnum();
						case "IFCPIPEFITTINGTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCPipeFittingTypeEnum();
						case "IFCPIPESEGMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCPipeSegmentTypeEnum();
						case "IFCPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCPlateTypeEnum();
						case "IFCPREFERREDSURFACECURVEREPRESENTATION" : return new CSiBKK.IFC.IFC4X3.IFCPreferredSurfaceCurveRepresentation();
						case "IFCPROCEDURETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCProcedureTypeEnum();
						case "IFCPROFILETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCProfileTypeEnum();
						case "IFCPROJECTORDERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCProjectOrderTypeEnum();
						case "IFCPROJECTEDORTRUELENGTHENUM" : return new CSiBKK.IFC.IFC4X3.IFCProjectedOrTrueLengthEnum();
						case "IFCPROJECTIONELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCProjectionElementTypeEnum();
						case "IFCPROPERTYSETTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCPropertySetTemplateTypeEnum();
						case "IFCPROTECTIVEDEVICETRIPPINGUNITTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCProtectiveDeviceTrippingUnitTypeEnum();
						case "IFCPROTECTIVEDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCProtectiveDeviceTypeEnum();
						case "IFCPUMPTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCPumpTypeEnum();
						case "IFCRAILTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCRailTypeEnum();
						case "IFCRAILINGTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCRailingTypeEnum();
						case "IFCRAILWAYPARTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCRailwayPartTypeEnum();
						case "IFCRAILWAYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCRailwayTypeEnum();
						case "IFCRAMPFLIGHTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCRampFlightTypeEnum();
						case "IFCRAMPTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCRampTypeEnum();
						case "IFCRECURRENCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCRecurrenceTypeEnum();
						case "IFCREFERENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCReferentTypeEnum();
						case "IFCREFLECTANCEMETHODENUM" : return new CSiBKK.IFC.IFC4X3.IFCReflectanceMethodEnum();
						case "IFCREINFORCEDSOILTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCReinforcedSoilTypeEnum();
						case "IFCREINFORCINGBARROLEENUM" : return new CSiBKK.IFC.IFC4X3.IFCReinforcingBarRoleEnum();
						case "IFCREINFORCINGBARSURFACEENUM" : return new CSiBKK.IFC.IFC4X3.IFCReinforcingBarSurfaceEnum();
						case "IFCREINFORCINGBARTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCReinforcingBarTypeEnum();
						case "IFCREINFORCINGMESHTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCReinforcingMeshTypeEnum();
						case "IFCROADPARTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCRoadPartTypeEnum();
						case "IFCROADTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCRoadTypeEnum();
						case "IFCROLEENUM" : return new CSiBKK.IFC.IFC4X3.IFCRoleEnum();
						case "IFCROOFTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCRoofTypeEnum();
						case "IFCSIPREFIX" : return new CSiBKK.IFC.IFC4X3.IFCSIPrefix();
						case "IFCSIUNITNAME" : return new CSiBKK.IFC.IFC4X3.IFCSIUnitName();
						case "IFCSANITARYTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSanitaryTerminalTypeEnum();
						case "IFCSECTIONTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSectionTypeEnum();
						case "IFCSENSORTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSensorTypeEnum();
						case "IFCSEQUENCEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSequenceEnum();
						case "IFCSHADINGDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCShadingDeviceTypeEnum();
						case "IFCSIGNTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSignTypeEnum();
						case "IFCSIGNALTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSignalTypeEnum();
						case "IFCSIMPLEPROPERTYTEMPLATETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSimplePropertyTemplateTypeEnum();
						case "IFCSLABTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSlabTypeEnum();
						case "IFCSOLARDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSolarDeviceTypeEnum();
						case "IFCSPACEHEATERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSpaceHeaterTypeEnum();
						case "IFCSPACETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSpaceTypeEnum();
						case "IFCSPATIALZONETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSpatialZoneTypeEnum();
						case "IFCSTACKTERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCStackTerminalTypeEnum();
						case "IFCSTAIRFLIGHTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCStairFlightTypeEnum();
						case "IFCSTAIRTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCStairTypeEnum();
						case "IFCSTATEENUM" : return new CSiBKK.IFC.IFC4X3.IFCStateEnum();
						case "IFCSTRUCTURALCURVEACTIVITYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCStructuralCurveActivityTypeEnum();
						case "IFCSTRUCTURALCURVEMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCStructuralCurveMemberTypeEnum();
						case "IFCSTRUCTURALSURFACEACTIVITYTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCStructuralSurfaceActivityTypeEnum();
						case "IFCSTRUCTURALSURFACEMEMBERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCStructuralSurfaceMemberTypeEnum();
						case "IFCSUBCONTRACTRESOURCETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSubContractResourceTypeEnum();
						case "IFCSURFACEFEATURETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceFeatureTypeEnum();
						case "IFCSURFACESIDE" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceSide();
						case "IFCSWITCHINGDEVICETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSwitchingDeviceTypeEnum();
						case "IFCSYSTEMFURNITUREELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCSystemFurnitureElementTypeEnum();
						case "IFCTANKTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCTankTypeEnum();
						case "IFCTASKDURATIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCTaskDurationEnum();
						case "IFCTASKTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCTaskTypeEnum();
						case "IFCTENDONANCHORTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCTendonAnchorTypeEnum();
						case "IFCTENDONCONDUITTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCTendonConduitTypeEnum();
						case "IFCTENDONTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCTendonTypeEnum();
						case "IFCTEXTPATH" : return new CSiBKK.IFC.IFC4X3.IFCTextPath();
						case "IFCTIMESERIESDATATYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCTimeSeriesDataTypeEnum();
						case "IFCTRACKELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCTrackElementTypeEnum();
						case "IFCTRANSFORMERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCTransformerTypeEnum();
						case "IFCTRANSITIONCODE" : return new CSiBKK.IFC.IFC4X3.IFCTransitionCode();
						case "IFCTRANSPORTELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCTransportElementTypeEnum();
						case "IFCTRIMMINGPREFERENCE" : return new CSiBKK.IFC.IFC4X3.IFCTrimmingPreference();
						case "IFCTUBEBUNDLETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCTubeBundleTypeEnum();
						case "IFCUNITENUM" : return new CSiBKK.IFC.IFC4X3.IFCUnitEnum();
						case "IFCUNITARYCONTROLELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCUnitaryControlElementTypeEnum();
						case "IFCUNITARYEQUIPMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCUnitaryEquipmentTypeEnum();
						case "IFCVALVETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCValveTypeEnum();
						case "IFCVEHICLETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCVehicleTypeEnum();
						case "IFCVIBRATIONDAMPERTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCVibrationDamperTypeEnum();
						case "IFCVIBRATIONISOLATORTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCVibrationIsolatorTypeEnum();
						case "IFCVIRTUALELEMENTTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCVirtualElementTypeEnum();
						case "IFCVOIDINGFEATURETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCVoidingFeatureTypeEnum();
						case "IFCWALLTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCWallTypeEnum();
						case "IFCWASTETERMINALTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCWasteTerminalTypeEnum();
						case "IFCWINDOWPANELOPERATIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCWindowPanelOperationEnum();
						case "IFCWINDOWPANELPOSITIONENUM" : return new CSiBKK.IFC.IFC4X3.IFCWindowPanelPositionEnum();
						case "IFCWINDOWTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCWindowTypeEnum();
						case "IFCWINDOWTYPEPARTITIONINGENUM" : return new CSiBKK.IFC.IFC4X3.IFCWindowTypePartitioningEnum();
						case "IFCWORKCALENDARTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCWorkCalendarTypeEnum();
						case "IFCWORKPLANTYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCWorkPlanTypeEnum();
						case "IFCWORKSCHEDULETYPEENUM" : return new CSiBKK.IFC.IFC4X3.IFCWorkScheduleTypeEnum();
						case "IFCACTIONREQUEST" : return new CSiBKK.IFC.IFC4X3.IFCActionRequest();
						case "IFCACTOR" : return new CSiBKK.IFC.IFC4X3.IFCActor();
						case "IFCACTORROLE" : return new CSiBKK.IFC.IFC4X3.IFCActorRole();
						case "IFCACTUATOR" : return new CSiBKK.IFC.IFC4X3.IFCActuator();
						case "IFCACTUATORTYPE" : return new CSiBKK.IFC.IFC4X3.IFCActuatorType();
						case "IFCADVANCEDBREP" : return new CSiBKK.IFC.IFC4X3.IFCAdvancedBrep();
						case "IFCADVANCEDBREPWITHVOIDS" : return new CSiBKK.IFC.IFC4X3.IFCAdvancedBrepWithVoids();
						case "IFCADVANCEDFACE" : return new CSiBKK.IFC.IFC4X3.IFCAdvancedFace();
						case "IFCAIRTERMINAL" : return new CSiBKK.IFC.IFC4X3.IFCAirTerminal();
						case "IFCAIRTERMINALBOX" : return new CSiBKK.IFC.IFC4X3.IFCAirTerminalBox();
						case "IFCAIRTERMINALBOXTYPE" : return new CSiBKK.IFC.IFC4X3.IFCAirTerminalBoxType();
						case "IFCAIRTERMINALTYPE" : return new CSiBKK.IFC.IFC4X3.IFCAirTerminalType();
						case "IFCAIRTOAIRHEATRECOVERY" : return new CSiBKK.IFC.IFC4X3.IFCAirToAirHeatRecovery();
						case "IFCAIRTOAIRHEATRECOVERYTYPE" : return new CSiBKK.IFC.IFC4X3.IFCAirToAirHeatRecoveryType();
						case "IFCALARM" : return new CSiBKK.IFC.IFC4X3.IFCAlarm();
						case "IFCALARMTYPE" : return new CSiBKK.IFC.IFC4X3.IFCAlarmType();
						case "IFCALIGNMENT" : return new CSiBKK.IFC.IFC4X3.IFCAlignment();
						case "IFCALIGNMENTCANT" : return new CSiBKK.IFC.IFC4X3.IFCAlignmentCant();
						case "IFCALIGNMENTCANTSEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCAlignmentCantSegment();
						case "IFCALIGNMENTHORIZONTAL" : return new CSiBKK.IFC.IFC4X3.IFCAlignmentHorizontal();
						case "IFCALIGNMENTHORIZONTALSEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCAlignmentHorizontalSegment();
						case "IFCALIGNMENTSEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCAlignmentSegment();
						case "IFCALIGNMENTVERTICAL" : return new CSiBKK.IFC.IFC4X3.IFCAlignmentVertical();
						case "IFCALIGNMENTVERTICALSEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCAlignmentVerticalSegment();
						case "IFCANNOTATION" : return new CSiBKK.IFC.IFC4X3.IFCAnnotation();
						case "IFCANNOTATIONFILLAREA" : return new CSiBKK.IFC.IFC4X3.IFCAnnotationFillArea();
						case "IFCAPPLICATION" : return new CSiBKK.IFC.IFC4X3.IFCApplication();
						case "IFCAPPLIEDVALUE" : return new CSiBKK.IFC.IFC4X3.IFCAppliedValue();
						case "IFCAPPROVAL" : return new CSiBKK.IFC.IFC4X3.IFCApproval();
						case "IFCAPPROVALRELATIONSHIP" : return new CSiBKK.IFC.IFC4X3.IFCApprovalRelationship();
						case "IFCARBITRARYCLOSEDPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCArbitraryClosedProfileDef();
						case "IFCARBITRARYOPENPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCArbitraryOpenProfileDef();
						case "IFCARBITRARYPROFILEDEFWITHVOIDS" : return new CSiBKK.IFC.IFC4X3.IFCArbitraryProfileDefWithVoids();
						case "IFCASSET" : return new CSiBKK.IFC.IFC4X3.IFCAsset();
						case "IFCASYMMETRICISHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCAsymmetricIShapeProfileDef();
						case "IFCAUDIOVISUALAPPLIANCE" : return new CSiBKK.IFC.IFC4X3.IFCAudioVisualAppliance();
						case "IFCAUDIOVISUALAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4X3.IFCAudioVisualApplianceType();
						case "IFCAXIS1PLACEMENT" : return new CSiBKK.IFC.IFC4X3.IFCAxis1Placement();
						case "IFCAXIS2PLACEMENT2D" : return new CSiBKK.IFC.IFC4X3.IFCAxis2Placement2D();
						case "IFCAXIS2PLACEMENT3D" : return new CSiBKK.IFC.IFC4X3.IFCAxis2Placement3D();
						case "IFCAXIS2PLACEMENTLINEAR" : return new CSiBKK.IFC.IFC4X3.IFCAxis2PlacementLinear();
						case "IFCBSPLINECURVEWITHKNOTS" : return new CSiBKK.IFC.IFC4X3.IFCBSplineCurveWithKnots();
						case "IFCBSPLINESURFACEWITHKNOTS" : return new CSiBKK.IFC.IFC4X3.IFCBSplineSurfaceWithKnots();
						case "IFCBEAM" : return new CSiBKK.IFC.IFC4X3.IFCBeam();
						case "IFCBEAMTYPE" : return new CSiBKK.IFC.IFC4X3.IFCBeamType();
						case "IFCBEARING" : return new CSiBKK.IFC.IFC4X3.IFCBearing();
						case "IFCBEARINGTYPE" : return new CSiBKK.IFC.IFC4X3.IFCBearingType();
						case "IFCBLOBTEXTURE" : return new CSiBKK.IFC.IFC4X3.IFCBlobTexture();
						case "IFCBLOCK" : return new CSiBKK.IFC.IFC4X3.IFCBlock();
						case "IFCBOILER" : return new CSiBKK.IFC.IFC4X3.IFCBoiler();
						case "IFCBOILERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCBoilerType();
						case "IFCBOOLEANCLIPPINGRESULT" : return new CSiBKK.IFC.IFC4X3.IFCBooleanClippingResult();
						case "IFCBOOLEANRESULT" : return new CSiBKK.IFC.IFC4X3.IFCBooleanResult();
						case "IFCBOREHOLE" : return new CSiBKK.IFC.IFC4X3.IFCBorehole();
						case "IFCBOUNDARYCURVE" : return new CSiBKK.IFC.IFC4X3.IFCBoundaryCurve();
						case "IFCBOUNDARYEDGECONDITION" : return new CSiBKK.IFC.IFC4X3.IFCBoundaryEdgeCondition();
						case "IFCBOUNDARYFACECONDITION" : return new CSiBKK.IFC.IFC4X3.IFCBoundaryFaceCondition();
						case "IFCBOUNDARYNODECONDITION" : return new CSiBKK.IFC.IFC4X3.IFCBoundaryNodeCondition();
						case "IFCBOUNDARYNODECONDITIONWARPING" : return new CSiBKK.IFC.IFC4X3.IFCBoundaryNodeConditionWarping();
						case "IFCBOUNDINGBOX" : return new CSiBKK.IFC.IFC4X3.IFCBoundingBox();
						case "IFCBOXEDHALFSPACE" : return new CSiBKK.IFC.IFC4X3.IFCBoxedHalfSpace();
						case "IFCBRIDGE" : return new CSiBKK.IFC.IFC4X3.IFCBridge();
						case "IFCBRIDGEPART" : return new CSiBKK.IFC.IFC4X3.IFCBridgePart();
						case "IFCBUILDING" : return new CSiBKK.IFC.IFC4X3.IFCBuilding();
						case "IFCBUILDINGELEMENTPART" : return new CSiBKK.IFC.IFC4X3.IFCBuildingElementPart();
						case "IFCBUILDINGELEMENTPARTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCBuildingElementPartType();
						case "IFCBUILDINGELEMENTPROXY" : return new CSiBKK.IFC.IFC4X3.IFCBuildingElementProxy();
						case "IFCBUILDINGELEMENTPROXYTYPE" : return new CSiBKK.IFC.IFC4X3.IFCBuildingElementProxyType();
						case "IFCBUILDINGSTOREY" : return new CSiBKK.IFC.IFC4X3.IFCBuildingStorey();
						case "IFCBUILDINGSYSTEM" : return new CSiBKK.IFC.IFC4X3.IFCBuildingSystem();
						case "IFCBUILTELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCBuiltElement();
						case "IFCBUILTELEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCBuiltElementType();
						case "IFCBUILTSYSTEM" : return new CSiBKK.IFC.IFC4X3.IFCBuiltSystem();
						case "IFCBURNER" : return new CSiBKK.IFC.IFC4X3.IFCBurner();
						case "IFCBURNERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCBurnerType();
						case "IFCCSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCCShapeProfileDef();
						case "IFCCABLECARRIERFITTING" : return new CSiBKK.IFC.IFC4X3.IFCCableCarrierFitting();
						case "IFCCABLECARRIERFITTINGTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCableCarrierFittingType();
						case "IFCCABLECARRIERSEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCCableCarrierSegment();
						case "IFCCABLECARRIERSEGMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCableCarrierSegmentType();
						case "IFCCABLEFITTING" : return new CSiBKK.IFC.IFC4X3.IFCCableFitting();
						case "IFCCABLEFITTINGTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCableFittingType();
						case "IFCCABLESEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCCableSegment();
						case "IFCCABLESEGMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCableSegmentType();
						case "IFCCAISSONFOUNDATION" : return new CSiBKK.IFC.IFC4X3.IFCCaissonFoundation();
						case "IFCCAISSONFOUNDATIONTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCaissonFoundationType();
						case "IFCCARTESIANPOINT" : return new CSiBKK.IFC.IFC4X3.IFCCartesianPoint();
						case "IFCCARTESIANPOINTLIST2D" : return new CSiBKK.IFC.IFC4X3.IFCCartesianPointList2D();
						case "IFCCARTESIANPOINTLIST3D" : return new CSiBKK.IFC.IFC4X3.IFCCartesianPointList3D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR2D" : return new CSiBKK.IFC.IFC4X3.IFCCartesianTransformationOperator2D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM" : return new CSiBKK.IFC.IFC4X3.IFCCartesianTransformationOperator2DnonUniform();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR3D" : return new CSiBKK.IFC.IFC4X3.IFCCartesianTransformationOperator3D();
						case "IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM" : return new CSiBKK.IFC.IFC4X3.IFCCartesianTransformationOperator3DnonUniform();
						case "IFCCENTERLINEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCCenterLineProfileDef();
						case "IFCCHILLER" : return new CSiBKK.IFC.IFC4X3.IFCChiller();
						case "IFCCHILLERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCChillerType();
						case "IFCCHIMNEY" : return new CSiBKK.IFC.IFC4X3.IFCChimney();
						case "IFCCHIMNEYTYPE" : return new CSiBKK.IFC.IFC4X3.IFCChimneyType();
						case "IFCCIRCLE" : return new CSiBKK.IFC.IFC4X3.IFCCircle();
						case "IFCCIRCLEHOLLOWPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCCircleHollowProfileDef();
						case "IFCCIRCLEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCCircleProfileDef();
						case "IFCCIVILELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCCivilElement();
						case "IFCCIVILELEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCivilElementType();
						case "IFCCLASSIFICATION" : return new CSiBKK.IFC.IFC4X3.IFCClassification();
						case "IFCCLASSIFICATIONREFERENCE" : return new CSiBKK.IFC.IFC4X3.IFCClassificationReference();
						case "IFCCLOSEDSHELL" : return new CSiBKK.IFC.IFC4X3.IFCClosedShell();
						case "IFCCLOTHOID" : return new CSiBKK.IFC.IFC4X3.IFCClothoid();
						case "IFCCOIL" : return new CSiBKK.IFC.IFC4X3.IFCCoil();
						case "IFCCOILTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCoilType();
						case "IFCCOLOURRGB" : return new CSiBKK.IFC.IFC4X3.IFCColourRgb();
						case "IFCCOLOURRGBLIST" : return new CSiBKK.IFC.IFC4X3.IFCColourRgbList();
						case "IFCCOLUMN" : return new CSiBKK.IFC.IFC4X3.IFCColumn();
						case "IFCCOLUMNTYPE" : return new CSiBKK.IFC.IFC4X3.IFCColumnType();
						case "IFCCOMMUNICATIONSAPPLIANCE" : return new CSiBKK.IFC.IFC4X3.IFCCommunicationsAppliance();
						case "IFCCOMMUNICATIONSAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4X3.IFCCommunicationsApplianceType();
						case "IFCCOMPLEXPROPERTY" : return new CSiBKK.IFC.IFC4X3.IFCComplexProperty();
						case "IFCCOMPLEXPROPERTYTEMPLATE" : return new CSiBKK.IFC.IFC4X3.IFCComplexPropertyTemplate();
						case "IFCCOMPOSITECURVE" : return new CSiBKK.IFC.IFC4X3.IFCCompositeCurve();
						case "IFCCOMPOSITECURVEONSURFACE" : return new CSiBKK.IFC.IFC4X3.IFCCompositeCurveOnSurface();
						case "IFCCOMPOSITECURVESEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCCompositeCurveSegment();
						case "IFCCOMPOSITEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCCompositeProfileDef();
						case "IFCCOMPRESSOR" : return new CSiBKK.IFC.IFC4X3.IFCCompressor();
						case "IFCCOMPRESSORTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCompressorType();
						case "IFCCONDENSER" : return new CSiBKK.IFC.IFC4X3.IFCCondenser();
						case "IFCCONDENSERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCondenserType();
						case "IFCCONNECTEDFACESET" : return new CSiBKK.IFC.IFC4X3.IFCConnectedFaceSet();
						case "IFCCONNECTIONCURVEGEOMETRY" : return new CSiBKK.IFC.IFC4X3.IFCConnectionCurveGeometry();
						case "IFCCONNECTIONPOINTECCENTRICITY" : return new CSiBKK.IFC.IFC4X3.IFCConnectionPointEccentricity();
						case "IFCCONNECTIONPOINTGEOMETRY" : return new CSiBKK.IFC.IFC4X3.IFCConnectionPointGeometry();
						case "IFCCONNECTIONSURFACEGEOMETRY" : return new CSiBKK.IFC.IFC4X3.IFCConnectionSurfaceGeometry();
						case "IFCCONNECTIONVOLUMEGEOMETRY" : return new CSiBKK.IFC.IFC4X3.IFCConnectionVolumeGeometry();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCE" : return new CSiBKK.IFC.IFC4X3.IFCConstructionEquipmentResource();
						case "IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE" : return new CSiBKK.IFC.IFC4X3.IFCConstructionEquipmentResourceType();
						case "IFCCONSTRUCTIONMATERIALRESOURCE" : return new CSiBKK.IFC.IFC4X3.IFCConstructionMaterialResource();
						case "IFCCONSTRUCTIONMATERIALRESOURCETYPE" : return new CSiBKK.IFC.IFC4X3.IFCConstructionMaterialResourceType();
						case "IFCCONSTRUCTIONPRODUCTRESOURCE" : return new CSiBKK.IFC.IFC4X3.IFCConstructionProductResource();
						case "IFCCONSTRUCTIONPRODUCTRESOURCETYPE" : return new CSiBKK.IFC.IFC4X3.IFCConstructionProductResourceType();
						case "IFCCONTEXTDEPENDENTUNIT" : return new CSiBKK.IFC.IFC4X3.IFCContextDependentUnit();
						case "IFCCONTROLLER" : return new CSiBKK.IFC.IFC4X3.IFCController();
						case "IFCCONTROLLERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCControllerType();
						case "IFCCONVERSIONBASEDUNIT" : return new CSiBKK.IFC.IFC4X3.IFCConversionBasedUnit();
						case "IFCCONVERSIONBASEDUNITWITHOFFSET" : return new CSiBKK.IFC.IFC4X3.IFCConversionBasedUnitWithOffset();
						case "IFCCONVEYORSEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCConveyorSegment();
						case "IFCCONVEYORSEGMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCConveyorSegmentType();
						case "IFCCOOLEDBEAM" : return new CSiBKK.IFC.IFC4X3.IFCCooledBeam();
						case "IFCCOOLEDBEAMTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCooledBeamType();
						case "IFCCOOLINGTOWER" : return new CSiBKK.IFC.IFC4X3.IFCCoolingTower();
						case "IFCCOOLINGTOWERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCoolingTowerType();
						case "IFCCOSINESPIRAL" : return new CSiBKK.IFC.IFC4X3.IFCCosineSpiral();
						case "IFCCOSTITEM" : return new CSiBKK.IFC.IFC4X3.IFCCostItem();
						case "IFCCOSTSCHEDULE" : return new CSiBKK.IFC.IFC4X3.IFCCostSchedule();
						case "IFCCOSTVALUE" : return new CSiBKK.IFC.IFC4X3.IFCCostValue();
						case "IFCCOURSE" : return new CSiBKK.IFC.IFC4X3.IFCCourse();
						case "IFCCOURSETYPE" : return new CSiBKK.IFC.IFC4X3.IFCCourseType();
						case "IFCCOVERING" : return new CSiBKK.IFC.IFC4X3.IFCCovering();
						case "IFCCOVERINGTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCoveringType();
						case "IFCCREWRESOURCE" : return new CSiBKK.IFC.IFC4X3.IFCCrewResource();
						case "IFCCREWRESOURCETYPE" : return new CSiBKK.IFC.IFC4X3.IFCCrewResourceType();
						case "IFCCSGSOLID" : return new CSiBKK.IFC.IFC4X3.IFCCsgSolid();
						case "IFCCURRENCYRELATIONSHIP" : return new CSiBKK.IFC.IFC4X3.IFCCurrencyRelationship();
						case "IFCCURTAINWALL" : return new CSiBKK.IFC.IFC4X3.IFCCurtainWall();
						case "IFCCURTAINWALLTYPE" : return new CSiBKK.IFC.IFC4X3.IFCCurtainWallType();
						case "IFCCURVEBOUNDEDPLANE" : return new CSiBKK.IFC.IFC4X3.IFCCurveBoundedPlane();
						case "IFCCURVEBOUNDEDSURFACE" : return new CSiBKK.IFC.IFC4X3.IFCCurveBoundedSurface();
						case "IFCCURVESEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCCurveSegment();
						case "IFCCURVESTYLE" : return new CSiBKK.IFC.IFC4X3.IFCCurveStyle();
						case "IFCCURVESTYLEFONT" : return new CSiBKK.IFC.IFC4X3.IFCCurveStyleFont();
						case "IFCCURVESTYLEFONTANDSCALING" : return new CSiBKK.IFC.IFC4X3.IFCCurveStyleFontAndScaling();
						case "IFCCURVESTYLEFONTPATTERN" : return new CSiBKK.IFC.IFC4X3.IFCCurveStyleFontPattern();
						case "IFCCYLINDRICALSURFACE" : return new CSiBKK.IFC.IFC4X3.IFCCylindricalSurface();
						case "IFCDAMPER" : return new CSiBKK.IFC.IFC4X3.IFCDamper();
						case "IFCDAMPERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCDamperType();
						case "IFCDEEPFOUNDATION" : return new CSiBKK.IFC.IFC4X3.IFCDeepFoundation();
						case "IFCDEEPFOUNDATIONTYPE" : return new CSiBKK.IFC.IFC4X3.IFCDeepFoundationType();
						case "IFCDERIVEDPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCDerivedProfileDef();
						case "IFCDERIVEDUNIT" : return new CSiBKK.IFC.IFC4X3.IFCDerivedUnit();
						case "IFCDERIVEDUNITELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCDerivedUnitElement();
						case "IFCDIMENSIONALEXPONENTS" : return new CSiBKK.IFC.IFC4X3.IFCDimensionalExponents();
						case "IFCDIRECTION" : return new CSiBKK.IFC.IFC4X3.IFCDirection();
						case "IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID" : return new CSiBKK.IFC.IFC4X3.IFCDirectrixDerivedReferenceSweptAreaSolid();
						case "IFCDISCRETEACCESSORY" : return new CSiBKK.IFC.IFC4X3.IFCDiscreteAccessory();
						case "IFCDISCRETEACCESSORYTYPE" : return new CSiBKK.IFC.IFC4X3.IFCDiscreteAccessoryType();
						case "IFCDISTRIBUTIONBOARD" : return new CSiBKK.IFC.IFC4X3.IFCDistributionBoard();
						case "IFCDISTRIBUTIONBOARDTYPE" : return new CSiBKK.IFC.IFC4X3.IFCDistributionBoardType();
						case "IFCDISTRIBUTIONCHAMBERELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCDistributionChamberElement();
						case "IFCDISTRIBUTIONCHAMBERELEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCDistributionChamberElementType();
						case "IFCDISTRIBUTIONCIRCUIT" : return new CSiBKK.IFC.IFC4X3.IFCDistributionCircuit();
						case "IFCDISTRIBUTIONCONTROLELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCDistributionControlElement();
						case "IFCDISTRIBUTIONELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCDistributionElement();
						case "IFCDISTRIBUTIONELEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCDistributionElementType();
						case "IFCDISTRIBUTIONFLOWELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCDistributionFlowElement();
						case "IFCDISTRIBUTIONPORT" : return new CSiBKK.IFC.IFC4X3.IFCDistributionPort();
						case "IFCDISTRIBUTIONSYSTEM" : return new CSiBKK.IFC.IFC4X3.IFCDistributionSystem();
						case "IFCDOCUMENTINFORMATION" : return new CSiBKK.IFC.IFC4X3.IFCDocumentInformation();
						case "IFCDOCUMENTINFORMATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4X3.IFCDocumentInformationRelationship();
						case "IFCDOCUMENTREFERENCE" : return new CSiBKK.IFC.IFC4X3.IFCDocumentReference();
						case "IFCDOOR" : return new CSiBKK.IFC.IFC4X3.IFCDoor();
						case "IFCDOORLININGPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCDoorLiningProperties();
						case "IFCDOORPANELPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCDoorPanelProperties();
						case "IFCDOORTYPE" : return new CSiBKK.IFC.IFC4X3.IFCDoorType();
						case "IFCDRAUGHTINGPREDEFINEDCOLOUR" : return new CSiBKK.IFC.IFC4X3.IFCDraughtingPreDefinedColour();
						case "IFCDRAUGHTINGPREDEFINEDCURVEFONT" : return new CSiBKK.IFC.IFC4X3.IFCDraughtingPreDefinedCurveFont();
						case "IFCDUCTFITTING" : return new CSiBKK.IFC.IFC4X3.IFCDuctFitting();
						case "IFCDUCTFITTINGTYPE" : return new CSiBKK.IFC.IFC4X3.IFCDuctFittingType();
						case "IFCDUCTSEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCDuctSegment();
						case "IFCDUCTSEGMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCDuctSegmentType();
						case "IFCDUCTSILENCER" : return new CSiBKK.IFC.IFC4X3.IFCDuctSilencer();
						case "IFCDUCTSILENCERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCDuctSilencerType();
						case "IFCEARTHWORKSCUT" : return new CSiBKK.IFC.IFC4X3.IFCEarthworksCut();
						case "IFCEARTHWORKSELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCEarthworksElement();
						case "IFCEARTHWORKSFILL" : return new CSiBKK.IFC.IFC4X3.IFCEarthworksFill();
						case "IFCEDGE" : return new CSiBKK.IFC.IFC4X3.IFCEdge();
						case "IFCEDGECURVE" : return new CSiBKK.IFC.IFC4X3.IFCEdgeCurve();
						case "IFCEDGELOOP" : return new CSiBKK.IFC.IFC4X3.IFCEdgeLoop();
						case "IFCELECTRICAPPLIANCE" : return new CSiBKK.IFC.IFC4X3.IFCElectricAppliance();
						case "IFCELECTRICAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4X3.IFCElectricApplianceType();
						case "IFCELECTRICDISTRIBUTIONBOARD" : return new CSiBKK.IFC.IFC4X3.IFCElectricDistributionBoard();
						case "IFCELECTRICDISTRIBUTIONBOARDTYPE" : return new CSiBKK.IFC.IFC4X3.IFCElectricDistributionBoardType();
						case "IFCELECTRICFLOWSTORAGEDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCElectricFlowStorageDevice();
						case "IFCELECTRICFLOWSTORAGEDEVICETYPE" : return new CSiBKK.IFC.IFC4X3.IFCElectricFlowStorageDeviceType();
						case "IFCELECTRICFLOWTREATMENTDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCElectricFlowTreatmentDevice();
						case "IFCELECTRICFLOWTREATMENTDEVICETYPE" : return new CSiBKK.IFC.IFC4X3.IFCElectricFlowTreatmentDeviceType();
						case "IFCELECTRICGENERATOR" : return new CSiBKK.IFC.IFC4X3.IFCElectricGenerator();
						case "IFCELECTRICGENERATORTYPE" : return new CSiBKK.IFC.IFC4X3.IFCElectricGeneratorType();
						case "IFCELECTRICMOTOR" : return new CSiBKK.IFC.IFC4X3.IFCElectricMotor();
						case "IFCELECTRICMOTORTYPE" : return new CSiBKK.IFC.IFC4X3.IFCElectricMotorType();
						case "IFCELECTRICTIMECONTROL" : return new CSiBKK.IFC.IFC4X3.IFCElectricTimeControl();
						case "IFCELECTRICTIMECONTROLTYPE" : return new CSiBKK.IFC.IFC4X3.IFCElectricTimeControlType();
						case "IFCELEMENTASSEMBLY" : return new CSiBKK.IFC.IFC4X3.IFCElementAssembly();
						case "IFCELEMENTASSEMBLYTYPE" : return new CSiBKK.IFC.IFC4X3.IFCElementAssemblyType();
						case "IFCELEMENTQUANTITY" : return new CSiBKK.IFC.IFC4X3.IFCElementQuantity();
						case "IFCELLIPSE" : return new CSiBKK.IFC.IFC4X3.IFCEllipse();
						case "IFCELLIPSEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCEllipseProfileDef();
						case "IFCENERGYCONVERSIONDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCEnergyConversionDevice();
						case "IFCENGINE" : return new CSiBKK.IFC.IFC4X3.IFCEngine();
						case "IFCENGINETYPE" : return new CSiBKK.IFC.IFC4X3.IFCEngineType();
						case "IFCEVAPORATIVECOOLER" : return new CSiBKK.IFC.IFC4X3.IFCEvaporativeCooler();
						case "IFCEVAPORATIVECOOLERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCEvaporativeCoolerType();
						case "IFCEVAPORATOR" : return new CSiBKK.IFC.IFC4X3.IFCEvaporator();
						case "IFCEVAPORATORTYPE" : return new CSiBKK.IFC.IFC4X3.IFCEvaporatorType();
						case "IFCEVENT" : return new CSiBKK.IFC.IFC4X3.IFCEvent();
						case "IFCEVENTTIME" : return new CSiBKK.IFC.IFC4X3.IFCEventTime();
						case "IFCEVENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCEventType();
						case "IFCEXTERNALREFERENCERELATIONSHIP" : return new CSiBKK.IFC.IFC4X3.IFCExternalReferenceRelationship();
						case "IFCEXTERNALSPATIALELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCExternalSpatialElement();
						case "IFCEXTERNALLYDEFINEDHATCHSTYLE" : return new CSiBKK.IFC.IFC4X3.IFCExternallyDefinedHatchStyle();
						case "IFCEXTERNALLYDEFINEDSURFACESTYLE" : return new CSiBKK.IFC.IFC4X3.IFCExternallyDefinedSurfaceStyle();
						case "IFCEXTERNALLYDEFINEDTEXTFONT" : return new CSiBKK.IFC.IFC4X3.IFCExternallyDefinedTextFont();
						case "IFCEXTRUDEDAREASOLID" : return new CSiBKK.IFC.IFC4X3.IFCExtrudedAreaSolid();
						case "IFCEXTRUDEDAREASOLIDTAPERED" : return new CSiBKK.IFC.IFC4X3.IFCExtrudedAreaSolidTapered();
						case "IFCFACE" : return new CSiBKK.IFC.IFC4X3.IFCFace();
						case "IFCFACEBASEDSURFACEMODEL" : return new CSiBKK.IFC.IFC4X3.IFCFaceBasedSurfaceModel();
						case "IFCFACEBOUND" : return new CSiBKK.IFC.IFC4X3.IFCFaceBound();
						case "IFCFACEOUTERBOUND" : return new CSiBKK.IFC.IFC4X3.IFCFaceOuterBound();
						case "IFCFACESURFACE" : return new CSiBKK.IFC.IFC4X3.IFCFaceSurface();
						case "IFCFACETEDBREP" : return new CSiBKK.IFC.IFC4X3.IFCFacetedBrep();
						case "IFCFACETEDBREPWITHVOIDS" : return new CSiBKK.IFC.IFC4X3.IFCFacetedBrepWithVoids();
						case "IFCFACILITY" : return new CSiBKK.IFC.IFC4X3.IFCFacility();
						case "IFCFACILITYPARTCOMMON" : return new CSiBKK.IFC.IFC4X3.IFCFacilityPartCommon();
						case "IFCFAILURECONNECTIONCONDITION" : return new CSiBKK.IFC.IFC4X3.IFCFailureConnectionCondition();
						case "IFCFAN" : return new CSiBKK.IFC.IFC4X3.IFCFan();
						case "IFCFANTYPE" : return new CSiBKK.IFC.IFC4X3.IFCFanType();
						case "IFCFASTENER" : return new CSiBKK.IFC.IFC4X3.IFCFastener();
						case "IFCFASTENERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCFastenerType();
						case "IFCFILLAREASTYLE" : return new CSiBKK.IFC.IFC4X3.IFCFillAreaStyle();
						case "IFCFILLAREASTYLEHATCHING" : return new CSiBKK.IFC.IFC4X3.IFCFillAreaStyleHatching();
						case "IFCFILLAREASTYLETILES" : return new CSiBKK.IFC.IFC4X3.IFCFillAreaStyleTiles();
						case "IFCFILTER" : return new CSiBKK.IFC.IFC4X3.IFCFilter();
						case "IFCFILTERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCFilterType();
						case "IFCFIRESUPPRESSIONTERMINAL" : return new CSiBKK.IFC.IFC4X3.IFCFireSuppressionTerminal();
						case "IFCFIRESUPPRESSIONTERMINALTYPE" : return new CSiBKK.IFC.IFC4X3.IFCFireSuppressionTerminalType();
						case "IFCFIXEDREFERENCESWEPTAREASOLID" : return new CSiBKK.IFC.IFC4X3.IFCFixedReferenceSweptAreaSolid();
						case "IFCFLOWCONTROLLER" : return new CSiBKK.IFC.IFC4X3.IFCFlowController();
						case "IFCFLOWFITTING" : return new CSiBKK.IFC.IFC4X3.IFCFlowFitting();
						case "IFCFLOWINSTRUMENT" : return new CSiBKK.IFC.IFC4X3.IFCFlowInstrument();
						case "IFCFLOWINSTRUMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCFlowInstrumentType();
						case "IFCFLOWMETER" : return new CSiBKK.IFC.IFC4X3.IFCFlowMeter();
						case "IFCFLOWMETERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCFlowMeterType();
						case "IFCFLOWMOVINGDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCFlowMovingDevice();
						case "IFCFLOWSEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCFlowSegment();
						case "IFCFLOWSTORAGEDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCFlowStorageDevice();
						case "IFCFLOWTERMINAL" : return new CSiBKK.IFC.IFC4X3.IFCFlowTerminal();
						case "IFCFLOWTREATMENTDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCFlowTreatmentDevice();
						case "IFCFOOTING" : return new CSiBKK.IFC.IFC4X3.IFCFooting();
						case "IFCFOOTINGTYPE" : return new CSiBKK.IFC.IFC4X3.IFCFootingType();
						case "IFCFURNISHINGELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCFurnishingElement();
						case "IFCFURNISHINGELEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCFurnishingElementType();
						case "IFCFURNITURE" : return new CSiBKK.IFC.IFC4X3.IFCFurniture();
						case "IFCFURNITURETYPE" : return new CSiBKK.IFC.IFC4X3.IFCFurnitureType();
						case "IFCGEOGRAPHICCRS" : return new CSiBKK.IFC.IFC4X3.IFCGeographicCRS();
						case "IFCGEOGRAPHICELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCGeographicElement();
						case "IFCGEOGRAPHICELEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCGeographicElementType();
						case "IFCGEOMETRICCURVESET" : return new CSiBKK.IFC.IFC4X3.IFCGeometricCurveSet();
						case "IFCGEOMETRICREPRESENTATIONCONTEXT" : return new CSiBKK.IFC.IFC4X3.IFCGeometricRepresentationContext();
						case "IFCGEOMETRICREPRESENTATIONSUBCONTEXT" : return new CSiBKK.IFC.IFC4X3.IFCGeometricRepresentationSubContext();
						case "IFCGEOMETRICSET" : return new CSiBKK.IFC.IFC4X3.IFCGeometricSet();
						case "IFCGEOMODEL" : return new CSiBKK.IFC.IFC4X3.IFCGeomodel();
						case "IFCGEOSLICE" : return new CSiBKK.IFC.IFC4X3.IFCGeoslice();
						case "IFCGEOTECHNICALSTRATUM" : return new CSiBKK.IFC.IFC4X3.IFCGeotechnicalStratum();
						case "IFCGRADIENTCURVE" : return new CSiBKK.IFC.IFC4X3.IFCGradientCurve();
						case "IFCGRID" : return new CSiBKK.IFC.IFC4X3.IFCGrid();
						case "IFCGRIDAXIS" : return new CSiBKK.IFC.IFC4X3.IFCGridAxis();
						case "IFCGRIDPLACEMENT" : return new CSiBKK.IFC.IFC4X3.IFCGridPlacement();
						case "IFCGROUP" : return new CSiBKK.IFC.IFC4X3.IFCGroup();
						case "IFCHALFSPACESOLID" : return new CSiBKK.IFC.IFC4X3.IFCHalfSpaceSolid();
						case "IFCHEATEXCHANGER" : return new CSiBKK.IFC.IFC4X3.IFCHeatExchanger();
						case "IFCHEATEXCHANGERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCHeatExchangerType();
						case "IFCHUMIDIFIER" : return new CSiBKK.IFC.IFC4X3.IFCHumidifier();
						case "IFCHUMIDIFIERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCHumidifierType();
						case "IFCISHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCIShapeProfileDef();
						case "IFCIMAGETEXTURE" : return new CSiBKK.IFC.IFC4X3.IFCImageTexture();
						case "IFCIMPACTPROTECTIONDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCImpactProtectionDevice();
						case "IFCIMPACTPROTECTIONDEVICETYPE" : return new CSiBKK.IFC.IFC4X3.IFCImpactProtectionDeviceType();
						case "IFCINDEXEDCOLOURMAP" : return new CSiBKK.IFC.IFC4X3.IFCIndexedColourMap();
						case "IFCINDEXEDPOLYCURVE" : return new CSiBKK.IFC.IFC4X3.IFCIndexedPolyCurve();
						case "IFCINDEXEDPOLYGONALFACE" : return new CSiBKK.IFC.IFC4X3.IFCIndexedPolygonalFace();
						case "IFCINDEXEDPOLYGONALFACEWITHVOIDS" : return new CSiBKK.IFC.IFC4X3.IFCIndexedPolygonalFaceWithVoids();
						case "IFCINDEXEDPOLYGONALTEXTUREMAP" : return new CSiBKK.IFC.IFC4X3.IFCIndexedPolygonalTextureMap();
						case "IFCINDEXEDTRIANGLETEXTUREMAP" : return new CSiBKK.IFC.IFC4X3.IFCIndexedTriangleTextureMap();
						case "IFCINTERCEPTOR" : return new CSiBKK.IFC.IFC4X3.IFCInterceptor();
						case "IFCINTERCEPTORTYPE" : return new CSiBKK.IFC.IFC4X3.IFCInterceptorType();
						case "IFCINTERSECTIONCURVE" : return new CSiBKK.IFC.IFC4X3.IFCIntersectionCurve();
						case "IFCINVENTORY" : return new CSiBKK.IFC.IFC4X3.IFCInventory();
						case "IFCIRREGULARTIMESERIES" : return new CSiBKK.IFC.IFC4X3.IFCIrregularTimeSeries();
						case "IFCIRREGULARTIMESERIESVALUE" : return new CSiBKK.IFC.IFC4X3.IFCIrregularTimeSeriesValue();
						case "IFCJUNCTIONBOX" : return new CSiBKK.IFC.IFC4X3.IFCJunctionBox();
						case "IFCJUNCTIONBOXTYPE" : return new CSiBKK.IFC.IFC4X3.IFCJunctionBoxType();
						case "IFCKERB" : return new CSiBKK.IFC.IFC4X3.IFCKerb();
						case "IFCKERBTYPE" : return new CSiBKK.IFC.IFC4X3.IFCKerbType();
						case "IFCLSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCLShapeProfileDef();
						case "IFCLABORRESOURCE" : return new CSiBKK.IFC.IFC4X3.IFCLaborResource();
						case "IFCLABORRESOURCETYPE" : return new CSiBKK.IFC.IFC4X3.IFCLaborResourceType();
						case "IFCLAGTIME" : return new CSiBKK.IFC.IFC4X3.IFCLagTime();
						case "IFCLAMP" : return new CSiBKK.IFC.IFC4X3.IFCLamp();
						case "IFCLAMPTYPE" : return new CSiBKK.IFC.IFC4X3.IFCLampType();
						case "IFCLIBRARYINFORMATION" : return new CSiBKK.IFC.IFC4X3.IFCLibraryInformation();
						case "IFCLIBRARYREFERENCE" : return new CSiBKK.IFC.IFC4X3.IFCLibraryReference();
						case "IFCLIGHTDISTRIBUTIONDATA" : return new CSiBKK.IFC.IFC4X3.IFCLightDistributionData();
						case "IFCLIGHTFIXTURE" : return new CSiBKK.IFC.IFC4X3.IFCLightFixture();
						case "IFCLIGHTFIXTURETYPE" : return new CSiBKK.IFC.IFC4X3.IFCLightFixtureType();
						case "IFCLIGHTINTENSITYDISTRIBUTION" : return new CSiBKK.IFC.IFC4X3.IFCLightIntensityDistribution();
						case "IFCLIGHTSOURCEAMBIENT" : return new CSiBKK.IFC.IFC4X3.IFCLightSourceAmbient();
						case "IFCLIGHTSOURCEDIRECTIONAL" : return new CSiBKK.IFC.IFC4X3.IFCLightSourceDirectional();
						case "IFCLIGHTSOURCEGONIOMETRIC" : return new CSiBKK.IFC.IFC4X3.IFCLightSourceGoniometric();
						case "IFCLIGHTSOURCEPOSITIONAL" : return new CSiBKK.IFC.IFC4X3.IFCLightSourcePositional();
						case "IFCLIGHTSOURCESPOT" : return new CSiBKK.IFC.IFC4X3.IFCLightSourceSpot();
						case "IFCLINE" : return new CSiBKK.IFC.IFC4X3.IFCLine();
						case "IFCLINEARELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCLinearElement();
						case "IFCLINEARPLACEMENT" : return new CSiBKK.IFC.IFC4X3.IFCLinearPlacement();
						case "IFCLINEARPOSITIONINGELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCLinearPositioningElement();
						case "IFCLIQUIDTERMINAL" : return new CSiBKK.IFC.IFC4X3.IFCLiquidTerminal();
						case "IFCLIQUIDTERMINALTYPE" : return new CSiBKK.IFC.IFC4X3.IFCLiquidTerminalType();
						case "IFCLOCALPLACEMENT" : return new CSiBKK.IFC.IFC4X3.IFCLocalPlacement();
						case "IFCLOOP" : return new CSiBKK.IFC.IFC4X3.IFCLoop();
						case "IFCMAPCONVERSION" : return new CSiBKK.IFC.IFC4X3.IFCMapConversion();
						case "IFCMAPCONVERSIONSCALED" : return new CSiBKK.IFC.IFC4X3.IFCMapConversionScaled();
						case "IFCMAPPEDITEM" : return new CSiBKK.IFC.IFC4X3.IFCMappedItem();
						case "IFCMARINEFACILITY" : return new CSiBKK.IFC.IFC4X3.IFCMarineFacility();
						case "IFCMARINEPART" : return new CSiBKK.IFC.IFC4X3.IFCMarinePart();
						case "IFCMATERIAL" : return new CSiBKK.IFC.IFC4X3.IFCMaterial();
						case "IFCMATERIALCLASSIFICATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4X3.IFCMaterialClassificationRelationship();
						case "IFCMATERIALCONSTITUENT" : return new CSiBKK.IFC.IFC4X3.IFCMaterialConstituent();
						case "IFCMATERIALCONSTITUENTSET" : return new CSiBKK.IFC.IFC4X3.IFCMaterialConstituentSet();
						case "IFCMATERIALDEFINITIONREPRESENTATION" : return new CSiBKK.IFC.IFC4X3.IFCMaterialDefinitionRepresentation();
						case "IFCMATERIALLAYER" : return new CSiBKK.IFC.IFC4X3.IFCMaterialLayer();
						case "IFCMATERIALLAYERSET" : return new CSiBKK.IFC.IFC4X3.IFCMaterialLayerSet();
						case "IFCMATERIALLAYERSETUSAGE" : return new CSiBKK.IFC.IFC4X3.IFCMaterialLayerSetUsage();
						case "IFCMATERIALLAYERWITHOFFSETS" : return new CSiBKK.IFC.IFC4X3.IFCMaterialLayerWithOffsets();
						case "IFCMATERIALLIST" : return new CSiBKK.IFC.IFC4X3.IFCMaterialList();
						case "IFCMATERIALPROFILE" : return new CSiBKK.IFC.IFC4X3.IFCMaterialProfile();
						case "IFCMATERIALPROFILESET" : return new CSiBKK.IFC.IFC4X3.IFCMaterialProfileSet();
						case "IFCMATERIALPROFILESETUSAGE" : return new CSiBKK.IFC.IFC4X3.IFCMaterialProfileSetUsage();
						case "IFCMATERIALPROFILESETUSAGETAPERING" : return new CSiBKK.IFC.IFC4X3.IFCMaterialProfileSetUsageTapering();
						case "IFCMATERIALPROFILEWITHOFFSETS" : return new CSiBKK.IFC.IFC4X3.IFCMaterialProfileWithOffsets();
						case "IFCMATERIALPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCMaterialProperties();
						case "IFCMATERIALRELATIONSHIP" : return new CSiBKK.IFC.IFC4X3.IFCMaterialRelationship();
						case "IFCMEASUREWITHUNIT" : return new CSiBKK.IFC.IFC4X3.IFCMeasureWithUnit();
						case "IFCMECHANICALFASTENER" : return new CSiBKK.IFC.IFC4X3.IFCMechanicalFastener();
						case "IFCMECHANICALFASTENERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCMechanicalFastenerType();
						case "IFCMEDICALDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCMedicalDevice();
						case "IFCMEDICALDEVICETYPE" : return new CSiBKK.IFC.IFC4X3.IFCMedicalDeviceType();
						case "IFCMEMBER" : return new CSiBKK.IFC.IFC4X3.IFCMember();
						case "IFCMEMBERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCMemberType();
						case "IFCMETRIC" : return new CSiBKK.IFC.IFC4X3.IFCMetric();
						case "IFCMIRROREDPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCMirroredProfileDef();
						case "IFCMOBILETELECOMMUNICATIONSAPPLIANCE" : return new CSiBKK.IFC.IFC4X3.IFCMobileTelecommunicationsAppliance();
						case "IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE" : return new CSiBKK.IFC.IFC4X3.IFCMobileTelecommunicationsApplianceType();
						case "IFCMONETARYUNIT" : return new CSiBKK.IFC.IFC4X3.IFCMonetaryUnit();
						case "IFCMOORINGDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCMooringDevice();
						case "IFCMOORINGDEVICETYPE" : return new CSiBKK.IFC.IFC4X3.IFCMooringDeviceType();
						case "IFCMOTORCONNECTION" : return new CSiBKK.IFC.IFC4X3.IFCMotorConnection();
						case "IFCMOTORCONNECTIONTYPE" : return new CSiBKK.IFC.IFC4X3.IFCMotorConnectionType();
						case "IFCNAVIGATIONELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCNavigationElement();
						case "IFCNAVIGATIONELEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCNavigationElementType();
						case "IFCOBJECTIVE" : return new CSiBKK.IFC.IFC4X3.IFCObjective();
						case "IFCOCCUPANT" : return new CSiBKK.IFC.IFC4X3.IFCOccupant();
						case "IFCOFFSETCURVE2D" : return new CSiBKK.IFC.IFC4X3.IFCOffsetCurve2D();
						case "IFCOFFSETCURVE3D" : return new CSiBKK.IFC.IFC4X3.IFCOffsetCurve3D();
						case "IFCOFFSETCURVEBYDISTANCES" : return new CSiBKK.IFC.IFC4X3.IFCOffsetCurveByDistances();
						case "IFCOPENCROSSPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCOpenCrossProfileDef();
						case "IFCOPENSHELL" : return new CSiBKK.IFC.IFC4X3.IFCOpenShell();
						case "IFCOPENINGELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCOpeningElement();
						case "IFCORGANIZATION" : return new CSiBKK.IFC.IFC4X3.IFCOrganization();
						case "IFCORGANIZATIONRELATIONSHIP" : return new CSiBKK.IFC.IFC4X3.IFCOrganizationRelationship();
						case "IFCORIENTEDEDGE" : return new CSiBKK.IFC.IFC4X3.IFCOrientedEdge();
						case "IFCOUTERBOUNDARYCURVE" : return new CSiBKK.IFC.IFC4X3.IFCOuterBoundaryCurve();
						case "IFCOUTLET" : return new CSiBKK.IFC.IFC4X3.IFCOutlet();
						case "IFCOUTLETTYPE" : return new CSiBKK.IFC.IFC4X3.IFCOutletType();
						case "IFCOWNERHISTORY" : return new CSiBKK.IFC.IFC4X3.IFCOwnerHistory();
						case "IFCPATH" : return new CSiBKK.IFC.IFC4X3.IFCPath();
						case "IFCPAVEMENT" : return new CSiBKK.IFC.IFC4X3.IFCPavement();
						case "IFCPAVEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCPavementType();
						case "IFCPCURVE" : return new CSiBKK.IFC.IFC4X3.IFCPcurve();
						case "IFCPERFORMANCEHISTORY" : return new CSiBKK.IFC.IFC4X3.IFCPerformanceHistory();
						case "IFCPERMEABLECOVERINGPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCPermeableCoveringProperties();
						case "IFCPERMIT" : return new CSiBKK.IFC.IFC4X3.IFCPermit();
						case "IFCPERSON" : return new CSiBKK.IFC.IFC4X3.IFCPerson();
						case "IFCPERSONANDORGANIZATION" : return new CSiBKK.IFC.IFC4X3.IFCPersonAndOrganization();
						case "IFCPHYSICALCOMPLEXQUANTITY" : return new CSiBKK.IFC.IFC4X3.IFCPhysicalComplexQuantity();
						case "IFCPILE" : return new CSiBKK.IFC.IFC4X3.IFCPile();
						case "IFCPILETYPE" : return new CSiBKK.IFC.IFC4X3.IFCPileType();
						case "IFCPIPEFITTING" : return new CSiBKK.IFC.IFC4X3.IFCPipeFitting();
						case "IFCPIPEFITTINGTYPE" : return new CSiBKK.IFC.IFC4X3.IFCPipeFittingType();
						case "IFCPIPESEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCPipeSegment();
						case "IFCPIPESEGMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCPipeSegmentType();
						case "IFCPIXELTEXTURE" : return new CSiBKK.IFC.IFC4X3.IFCPixelTexture();
						case "IFCPLANARBOX" : return new CSiBKK.IFC.IFC4X3.IFCPlanarBox();
						case "IFCPLANAREXTENT" : return new CSiBKK.IFC.IFC4X3.IFCPlanarExtent();
						case "IFCPLANE" : return new CSiBKK.IFC.IFC4X3.IFCPlane();
						case "IFCPLATE" : return new CSiBKK.IFC.IFC4X3.IFCPlate();
						case "IFCPLATETYPE" : return new CSiBKK.IFC.IFC4X3.IFCPlateType();
						case "IFCPOINTBYDISTANCEEXPRESSION" : return new CSiBKK.IFC.IFC4X3.IFCPointByDistanceExpression();
						case "IFCPOINTONCURVE" : return new CSiBKK.IFC.IFC4X3.IFCPointOnCurve();
						case "IFCPOINTONSURFACE" : return new CSiBKK.IFC.IFC4X3.IFCPointOnSurface();
						case "IFCPOLYLOOP" : return new CSiBKK.IFC.IFC4X3.IFCPolyLoop();
						case "IFCPOLYGONALBOUNDEDHALFSPACE" : return new CSiBKK.IFC.IFC4X3.IFCPolygonalBoundedHalfSpace();
						case "IFCPOLYGONALFACESET" : return new CSiBKK.IFC.IFC4X3.IFCPolygonalFaceSet();
						case "IFCPOLYLINE" : return new CSiBKK.IFC.IFC4X3.IFCPolyline();
						case "IFCPOLYNOMIALCURVE" : return new CSiBKK.IFC.IFC4X3.IFCPolynomialCurve();
						case "IFCPOSTALADDRESS" : return new CSiBKK.IFC.IFC4X3.IFCPostalAddress();
						case "IFCPRESENTATIONLAYERASSIGNMENT" : return new CSiBKK.IFC.IFC4X3.IFCPresentationLayerAssignment();
						case "IFCPRESENTATIONLAYERWITHSTYLE" : return new CSiBKK.IFC.IFC4X3.IFCPresentationLayerWithStyle();
						case "IFCPROCEDURE" : return new CSiBKK.IFC.IFC4X3.IFCProcedure();
						case "IFCPROCEDURETYPE" : return new CSiBKK.IFC.IFC4X3.IFCProcedureType();
						case "IFCPRODUCTDEFINITIONSHAPE" : return new CSiBKK.IFC.IFC4X3.IFCProductDefinitionShape();
						case "IFCPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCProfileDef();
						case "IFCPROFILEPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCProfileProperties();
						case "IFCPROJECT" : return new CSiBKK.IFC.IFC4X3.IFCProject();
						case "IFCPROJECTLIBRARY" : return new CSiBKK.IFC.IFC4X3.IFCProjectLibrary();
						case "IFCPROJECTORDER" : return new CSiBKK.IFC.IFC4X3.IFCProjectOrder();
						case "IFCPROJECTEDCRS" : return new CSiBKK.IFC.IFC4X3.IFCProjectedCRS();
						case "IFCPROJECTIONELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCProjectionElement();
						case "IFCPROPERTYBOUNDEDVALUE" : return new CSiBKK.IFC.IFC4X3.IFCPropertyBoundedValue();
						case "IFCPROPERTYDEPENDENCYRELATIONSHIP" : return new CSiBKK.IFC.IFC4X3.IFCPropertyDependencyRelationship();
						case "IFCPROPERTYENUMERATEDVALUE" : return new CSiBKK.IFC.IFC4X3.IFCPropertyEnumeratedValue();
						case "IFCPROPERTYENUMERATION" : return new CSiBKK.IFC.IFC4X3.IFCPropertyEnumeration();
						case "IFCPROPERTYLISTVALUE" : return new CSiBKK.IFC.IFC4X3.IFCPropertyListValue();
						case "IFCPROPERTYREFERENCEVALUE" : return new CSiBKK.IFC.IFC4X3.IFCPropertyReferenceValue();
						case "IFCPROPERTYSET" : return new CSiBKK.IFC.IFC4X3.IFCPropertySet();
						case "IFCPROPERTYSETTEMPLATE" : return new CSiBKK.IFC.IFC4X3.IFCPropertySetTemplate();
						case "IFCPROPERTYSINGLEVALUE" : return new CSiBKK.IFC.IFC4X3.IFCPropertySingleValue();
						case "IFCPROPERTYTABLEVALUE" : return new CSiBKK.IFC.IFC4X3.IFCPropertyTableValue();
						case "IFCPROTECTIVEDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCProtectiveDevice();
						case "IFCPROTECTIVEDEVICETRIPPINGUNIT" : return new CSiBKK.IFC.IFC4X3.IFCProtectiveDeviceTrippingUnit();
						case "IFCPROTECTIVEDEVICETRIPPINGUNITTYPE" : return new CSiBKK.IFC.IFC4X3.IFCProtectiveDeviceTrippingUnitType();
						case "IFCPROTECTIVEDEVICETYPE" : return new CSiBKK.IFC.IFC4X3.IFCProtectiveDeviceType();
						case "IFCPUMP" : return new CSiBKK.IFC.IFC4X3.IFCPump();
						case "IFCPUMPTYPE" : return new CSiBKK.IFC.IFC4X3.IFCPumpType();
						case "IFCQUANTITYAREA" : return new CSiBKK.IFC.IFC4X3.IFCQuantityArea();
						case "IFCQUANTITYCOUNT" : return new CSiBKK.IFC.IFC4X3.IFCQuantityCount();
						case "IFCQUANTITYLENGTH" : return new CSiBKK.IFC.IFC4X3.IFCQuantityLength();
						case "IFCQUANTITYNUMBER" : return new CSiBKK.IFC.IFC4X3.IFCQuantityNumber();
						case "IFCQUANTITYTIME" : return new CSiBKK.IFC.IFC4X3.IFCQuantityTime();
						case "IFCQUANTITYVOLUME" : return new CSiBKK.IFC.IFC4X3.IFCQuantityVolume();
						case "IFCQUANTITYWEIGHT" : return new CSiBKK.IFC.IFC4X3.IFCQuantityWeight();
						case "IFCRAIL" : return new CSiBKK.IFC.IFC4X3.IFCRail();
						case "IFCRAILTYPE" : return new CSiBKK.IFC.IFC4X3.IFCRailType();
						case "IFCRAILING" : return new CSiBKK.IFC.IFC4X3.IFCRailing();
						case "IFCRAILINGTYPE" : return new CSiBKK.IFC.IFC4X3.IFCRailingType();
						case "IFCRAILWAY" : return new CSiBKK.IFC.IFC4X3.IFCRailway();
						case "IFCRAILWAYPART" : return new CSiBKK.IFC.IFC4X3.IFCRailwayPart();
						case "IFCRAMP" : return new CSiBKK.IFC.IFC4X3.IFCRamp();
						case "IFCRAMPFLIGHT" : return new CSiBKK.IFC.IFC4X3.IFCRampFlight();
						case "IFCRAMPFLIGHTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCRampFlightType();
						case "IFCRAMPTYPE" : return new CSiBKK.IFC.IFC4X3.IFCRampType();
						case "IFCRATIONALBSPLINECURVEWITHKNOTS" : return new CSiBKK.IFC.IFC4X3.IFCRationalBSplineCurveWithKnots();
						case "IFCRATIONALBSPLINESURFACEWITHKNOTS" : return new CSiBKK.IFC.IFC4X3.IFCRationalBSplineSurfaceWithKnots();
						case "IFCRECTANGLEHOLLOWPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCRectangleHollowProfileDef();
						case "IFCRECTANGLEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCRectangleProfileDef();
						case "IFCRECTANGULARPYRAMID" : return new CSiBKK.IFC.IFC4X3.IFCRectangularPyramid();
						case "IFCRECTANGULARTRIMMEDSURFACE" : return new CSiBKK.IFC.IFC4X3.IFCRectangularTrimmedSurface();
						case "IFCRECURRENCEPATTERN" : return new CSiBKK.IFC.IFC4X3.IFCRecurrencePattern();
						case "IFCREFERENCE" : return new CSiBKK.IFC.IFC4X3.IFCReference();
						case "IFCREFERENT" : return new CSiBKK.IFC.IFC4X3.IFCReferent();
						case "IFCREGULARTIMESERIES" : return new CSiBKK.IFC.IFC4X3.IFCRegularTimeSeries();
						case "IFCREINFORCEDSOIL" : return new CSiBKK.IFC.IFC4X3.IFCReinforcedSoil();
						case "IFCREINFORCEMENTBARPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCReinforcementBarProperties();
						case "IFCREINFORCEMENTDEFINITIONPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCReinforcementDefinitionProperties();
						case "IFCREINFORCINGBAR" : return new CSiBKK.IFC.IFC4X3.IFCReinforcingBar();
						case "IFCREINFORCINGBARTYPE" : return new CSiBKK.IFC.IFC4X3.IFCReinforcingBarType();
						case "IFCREINFORCINGMESH" : return new CSiBKK.IFC.IFC4X3.IFCReinforcingMesh();
						case "IFCREINFORCINGMESHTYPE" : return new CSiBKK.IFC.IFC4X3.IFCReinforcingMeshType();
						case "IFCRELADHERESTOELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCRelAdheresToElement();
						case "IFCRELAGGREGATES" : return new CSiBKK.IFC.IFC4X3.IFCRelAggregates();
						case "IFCRELASSIGNSTOACTOR" : return new CSiBKK.IFC.IFC4X3.IFCRelAssignsToActor();
						case "IFCRELASSIGNSTOCONTROL" : return new CSiBKK.IFC.IFC4X3.IFCRelAssignsToControl();
						case "IFCRELASSIGNSTOGROUP" : return new CSiBKK.IFC.IFC4X3.IFCRelAssignsToGroup();
						case "IFCRELASSIGNSTOGROUPBYFACTOR" : return new CSiBKK.IFC.IFC4X3.IFCRelAssignsToGroupByFactor();
						case "IFCRELASSIGNSTOPROCESS" : return new CSiBKK.IFC.IFC4X3.IFCRelAssignsToProcess();
						case "IFCRELASSIGNSTOPRODUCT" : return new CSiBKK.IFC.IFC4X3.IFCRelAssignsToProduct();
						case "IFCRELASSIGNSTORESOURCE" : return new CSiBKK.IFC.IFC4X3.IFCRelAssignsToResource();
						case "IFCRELASSOCIATESAPPROVAL" : return new CSiBKK.IFC.IFC4X3.IFCRelAssociatesApproval();
						case "IFCRELASSOCIATESCLASSIFICATION" : return new CSiBKK.IFC.IFC4X3.IFCRelAssociatesClassification();
						case "IFCRELASSOCIATESCONSTRAINT" : return new CSiBKK.IFC.IFC4X3.IFCRelAssociatesConstraint();
						case "IFCRELASSOCIATESDOCUMENT" : return new CSiBKK.IFC.IFC4X3.IFCRelAssociatesDocument();
						case "IFCRELASSOCIATESLIBRARY" : return new CSiBKK.IFC.IFC4X3.IFCRelAssociatesLibrary();
						case "IFCRELASSOCIATESMATERIAL" : return new CSiBKK.IFC.IFC4X3.IFCRelAssociatesMaterial();
						case "IFCRELASSOCIATESPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCRelAssociatesProfileDef();
						case "IFCRELCONNECTSELEMENTS" : return new CSiBKK.IFC.IFC4X3.IFCRelConnectsElements();
						case "IFCRELCONNECTSPATHELEMENTS" : return new CSiBKK.IFC.IFC4X3.IFCRelConnectsPathElements();
						case "IFCRELCONNECTSPORTTOELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCRelConnectsPortToElement();
						case "IFCRELCONNECTSPORTS" : return new CSiBKK.IFC.IFC4X3.IFCRelConnectsPorts();
						case "IFCRELCONNECTSSTRUCTURALACTIVITY" : return new CSiBKK.IFC.IFC4X3.IFCRelConnectsStructuralActivity();
						case "IFCRELCONNECTSSTRUCTURALMEMBER" : return new CSiBKK.IFC.IFC4X3.IFCRelConnectsStructuralMember();
						case "IFCRELCONNECTSWITHECCENTRICITY" : return new CSiBKK.IFC.IFC4X3.IFCRelConnectsWithEccentricity();
						case "IFCRELCONNECTSWITHREALIZINGELEMENTS" : return new CSiBKK.IFC.IFC4X3.IFCRelConnectsWithRealizingElements();
						case "IFCRELCONTAINEDINSPATIALSTRUCTURE" : return new CSiBKK.IFC.IFC4X3.IFCRelContainedInSpatialStructure();
						case "IFCRELCOVERSBLDGELEMENTS" : return new CSiBKK.IFC.IFC4X3.IFCRelCoversBldgElements();
						case "IFCRELCOVERSSPACES" : return new CSiBKK.IFC.IFC4X3.IFCRelCoversSpaces();
						case "IFCRELDECLARES" : return new CSiBKK.IFC.IFC4X3.IFCRelDeclares();
						case "IFCRELDEFINESBYOBJECT" : return new CSiBKK.IFC.IFC4X3.IFCRelDefinesByObject();
						case "IFCRELDEFINESBYPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCRelDefinesByProperties();
						case "IFCRELDEFINESBYTEMPLATE" : return new CSiBKK.IFC.IFC4X3.IFCRelDefinesByTemplate();
						case "IFCRELDEFINESBYTYPE" : return new CSiBKK.IFC.IFC4X3.IFCRelDefinesByType();
						case "IFCRELFILLSELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCRelFillsElement();
						case "IFCRELFLOWCONTROLELEMENTS" : return new CSiBKK.IFC.IFC4X3.IFCRelFlowControlElements();
						case "IFCRELINTERFERESELEMENTS" : return new CSiBKK.IFC.IFC4X3.IFCRelInterferesElements();
						case "IFCRELNESTS" : return new CSiBKK.IFC.IFC4X3.IFCRelNests();
						case "IFCRELPOSITIONS" : return new CSiBKK.IFC.IFC4X3.IFCRelPositions();
						case "IFCRELPROJECTSELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCRelProjectsElement();
						case "IFCRELREFERENCEDINSPATIALSTRUCTURE" : return new CSiBKK.IFC.IFC4X3.IFCRelReferencedInSpatialStructure();
						case "IFCRELSEQUENCE" : return new CSiBKK.IFC.IFC4X3.IFCRelSequence();
						case "IFCRELSERVICESBUILDINGS" : return new CSiBKK.IFC.IFC4X3.IFCRelServicesBuildings();
						case "IFCRELSPACEBOUNDARY" : return new CSiBKK.IFC.IFC4X3.IFCRelSpaceBoundary();
						case "IFCRELSPACEBOUNDARY1STLEVEL" : return new CSiBKK.IFC.IFC4X3.IFCRelSpaceBoundary1stLevel();
						case "IFCRELSPACEBOUNDARY2NDLEVEL" : return new CSiBKK.IFC.IFC4X3.IFCRelSpaceBoundary2ndLevel();
						case "IFCRELVOIDSELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCRelVoidsElement();
						case "IFCREPARAMETRISEDCOMPOSITECURVESEGMENT" : return new CSiBKK.IFC.IFC4X3.IFCReparametrisedCompositeCurveSegment();
						case "IFCREPRESENTATIONMAP" : return new CSiBKK.IFC.IFC4X3.IFCRepresentationMap();
						case "IFCRESOURCEAPPROVALRELATIONSHIP" : return new CSiBKK.IFC.IFC4X3.IFCResourceApprovalRelationship();
						case "IFCRESOURCECONSTRAINTRELATIONSHIP" : return new CSiBKK.IFC.IFC4X3.IFCResourceConstraintRelationship();
						case "IFCRESOURCETIME" : return new CSiBKK.IFC.IFC4X3.IFCResourceTime();
						case "IFCREVOLVEDAREASOLID" : return new CSiBKK.IFC.IFC4X3.IFCRevolvedAreaSolid();
						case "IFCREVOLVEDAREASOLIDTAPERED" : return new CSiBKK.IFC.IFC4X3.IFCRevolvedAreaSolidTapered();
						case "IFCRIGHTCIRCULARCONE" : return new CSiBKK.IFC.IFC4X3.IFCRightCircularCone();
						case "IFCRIGHTCIRCULARCYLINDER" : return new CSiBKK.IFC.IFC4X3.IFCRightCircularCylinder();
						case "IFCRIGIDOPERATION" : return new CSiBKK.IFC.IFC4X3.IFCRigidOperation();
						case "IFCROAD" : return new CSiBKK.IFC.IFC4X3.IFCRoad();
						case "IFCROADPART" : return new CSiBKK.IFC.IFC4X3.IFCRoadPart();
						case "IFCROOF" : return new CSiBKK.IFC.IFC4X3.IFCRoof();
						case "IFCROOFTYPE" : return new CSiBKK.IFC.IFC4X3.IFCRoofType();
						case "IFCROUNDEDRECTANGLEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCRoundedRectangleProfileDef();
						case "IFCSIUNIT" : return new CSiBKK.IFC.IFC4X3.IFCSIUnit();
						case "IFCSANITARYTERMINAL" : return new CSiBKK.IFC.IFC4X3.IFCSanitaryTerminal();
						case "IFCSANITARYTERMINALTYPE" : return new CSiBKK.IFC.IFC4X3.IFCSanitaryTerminalType();
						case "IFCSEAMCURVE" : return new CSiBKK.IFC.IFC4X3.IFCSeamCurve();
						case "IFCSECONDORDERPOLYNOMIALSPIRAL" : return new CSiBKK.IFC.IFC4X3.IFCSecondOrderPolynomialSpiral();
						case "IFCSECTIONPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCSectionProperties();
						case "IFCSECTIONREINFORCEMENTPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCSectionReinforcementProperties();
						case "IFCSECTIONEDSOLIDHORIZONTAL" : return new CSiBKK.IFC.IFC4X3.IFCSectionedSolidHorizontal();
						case "IFCSECTIONEDSPINE" : return new CSiBKK.IFC.IFC4X3.IFCSectionedSpine();
						case "IFCSECTIONEDSURFACE" : return new CSiBKK.IFC.IFC4X3.IFCSectionedSurface();
						case "IFCSEGMENTEDREFERENCECURVE" : return new CSiBKK.IFC.IFC4X3.IFCSegmentedReferenceCurve();
						case "IFCSENSOR" : return new CSiBKK.IFC.IFC4X3.IFCSensor();
						case "IFCSENSORTYPE" : return new CSiBKK.IFC.IFC4X3.IFCSensorType();
						case "IFCSEVENTHORDERPOLYNOMIALSPIRAL" : return new CSiBKK.IFC.IFC4X3.IFCSeventhOrderPolynomialSpiral();
						case "IFCSHADINGDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCShadingDevice();
						case "IFCSHADINGDEVICETYPE" : return new CSiBKK.IFC.IFC4X3.IFCShadingDeviceType();
						case "IFCSHAPEASPECT" : return new CSiBKK.IFC.IFC4X3.IFCShapeAspect();
						case "IFCSHAPEREPRESENTATION" : return new CSiBKK.IFC.IFC4X3.IFCShapeRepresentation();
						case "IFCSHELLBASEDSURFACEMODEL" : return new CSiBKK.IFC.IFC4X3.IFCShellBasedSurfaceModel();
						case "IFCSIGN" : return new CSiBKK.IFC.IFC4X3.IFCSign();
						case "IFCSIGNTYPE" : return new CSiBKK.IFC.IFC4X3.IFCSignType();
						case "IFCSIGNAL" : return new CSiBKK.IFC.IFC4X3.IFCSignal();
						case "IFCSIGNALTYPE" : return new CSiBKK.IFC.IFC4X3.IFCSignalType();
						case "IFCSIMPLEPROPERTYTEMPLATE" : return new CSiBKK.IFC.IFC4X3.IFCSimplePropertyTemplate();
						case "IFCSINESPIRAL" : return new CSiBKK.IFC.IFC4X3.IFCSineSpiral();
						case "IFCSITE" : return new CSiBKK.IFC.IFC4X3.IFCSite();
						case "IFCSLAB" : return new CSiBKK.IFC.IFC4X3.IFCSlab();
						case "IFCSLABTYPE" : return new CSiBKK.IFC.IFC4X3.IFCSlabType();
						case "IFCSLIPPAGECONNECTIONCONDITION" : return new CSiBKK.IFC.IFC4X3.IFCSlippageConnectionCondition();
						case "IFCSOLARDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCSolarDevice();
						case "IFCSOLARDEVICETYPE" : return new CSiBKK.IFC.IFC4X3.IFCSolarDeviceType();
						case "IFCSPACE" : return new CSiBKK.IFC.IFC4X3.IFCSpace();
						case "IFCSPACEHEATER" : return new CSiBKK.IFC.IFC4X3.IFCSpaceHeater();
						case "IFCSPACEHEATERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCSpaceHeaterType();
						case "IFCSPACETYPE" : return new CSiBKK.IFC.IFC4X3.IFCSpaceType();
						case "IFCSPATIALZONE" : return new CSiBKK.IFC.IFC4X3.IFCSpatialZone();
						case "IFCSPATIALZONETYPE" : return new CSiBKK.IFC.IFC4X3.IFCSpatialZoneType();
						case "IFCSPHERE" : return new CSiBKK.IFC.IFC4X3.IFCSphere();
						case "IFCSPHERICALSURFACE" : return new CSiBKK.IFC.IFC4X3.IFCSphericalSurface();
						case "IFCSTACKTERMINAL" : return new CSiBKK.IFC.IFC4X3.IFCStackTerminal();
						case "IFCSTACKTERMINALTYPE" : return new CSiBKK.IFC.IFC4X3.IFCStackTerminalType();
						case "IFCSTAIR" : return new CSiBKK.IFC.IFC4X3.IFCStair();
						case "IFCSTAIRFLIGHT" : return new CSiBKK.IFC.IFC4X3.IFCStairFlight();
						case "IFCSTAIRFLIGHTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCStairFlightType();
						case "IFCSTAIRTYPE" : return new CSiBKK.IFC.IFC4X3.IFCStairType();
						case "IFCSTRUCTURALANALYSISMODEL" : return new CSiBKK.IFC.IFC4X3.IFCStructuralAnalysisModel();
						case "IFCSTRUCTURALCURVEACTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralCurveAction();
						case "IFCSTRUCTURALCURVECONNECTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralCurveConnection();
						case "IFCSTRUCTURALCURVEMEMBER" : return new CSiBKK.IFC.IFC4X3.IFCStructuralCurveMember();
						case "IFCSTRUCTURALCURVEMEMBERVARYING" : return new CSiBKK.IFC.IFC4X3.IFCStructuralCurveMemberVarying();
						case "IFCSTRUCTURALCURVEREACTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralCurveReaction();
						case "IFCSTRUCTURALLINEARACTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralLinearAction();
						case "IFCSTRUCTURALLOADCASE" : return new CSiBKK.IFC.IFC4X3.IFCStructuralLoadCase();
						case "IFCSTRUCTURALLOADCONFIGURATION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralLoadConfiguration();
						case "IFCSTRUCTURALLOADGROUP" : return new CSiBKK.IFC.IFC4X3.IFCStructuralLoadGroup();
						case "IFCSTRUCTURALLOADLINEARFORCE" : return new CSiBKK.IFC.IFC4X3.IFCStructuralLoadLinearForce();
						case "IFCSTRUCTURALLOADPLANARFORCE" : return new CSiBKK.IFC.IFC4X3.IFCStructuralLoadPlanarForce();
						case "IFCSTRUCTURALLOADSINGLEDISPLACEMENT" : return new CSiBKK.IFC.IFC4X3.IFCStructuralLoadSingleDisplacement();
						case "IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralLoadSingleDisplacementDistortion();
						case "IFCSTRUCTURALLOADSINGLEFORCE" : return new CSiBKK.IFC.IFC4X3.IFCStructuralLoadSingleForce();
						case "IFCSTRUCTURALLOADSINGLEFORCEWARPING" : return new CSiBKK.IFC.IFC4X3.IFCStructuralLoadSingleForceWarping();
						case "IFCSTRUCTURALLOADTEMPERATURE" : return new CSiBKK.IFC.IFC4X3.IFCStructuralLoadTemperature();
						case "IFCSTRUCTURALPLANARACTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralPlanarAction();
						case "IFCSTRUCTURALPOINTACTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralPointAction();
						case "IFCSTRUCTURALPOINTCONNECTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralPointConnection();
						case "IFCSTRUCTURALPOINTREACTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralPointReaction();
						case "IFCSTRUCTURALRESULTGROUP" : return new CSiBKK.IFC.IFC4X3.IFCStructuralResultGroup();
						case "IFCSTRUCTURALSURFACEACTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralSurfaceAction();
						case "IFCSTRUCTURALSURFACECONNECTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralSurfaceConnection();
						case "IFCSTRUCTURALSURFACEMEMBER" : return new CSiBKK.IFC.IFC4X3.IFCStructuralSurfaceMember();
						case "IFCSTRUCTURALSURFACEMEMBERVARYING" : return new CSiBKK.IFC.IFC4X3.IFCStructuralSurfaceMemberVarying();
						case "IFCSTRUCTURALSURFACEREACTION" : return new CSiBKK.IFC.IFC4X3.IFCStructuralSurfaceReaction();
						case "IFCSTYLEDITEM" : return new CSiBKK.IFC.IFC4X3.IFCStyledItem();
						case "IFCSTYLEDREPRESENTATION" : return new CSiBKK.IFC.IFC4X3.IFCStyledRepresentation();
						case "IFCSUBCONTRACTRESOURCE" : return new CSiBKK.IFC.IFC4X3.IFCSubContractResource();
						case "IFCSUBCONTRACTRESOURCETYPE" : return new CSiBKK.IFC.IFC4X3.IFCSubContractResourceType();
						case "IFCSUBEDGE" : return new CSiBKK.IFC.IFC4X3.IFCSubedge();
						case "IFCSURFACECURVE" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceCurve();
						case "IFCSURFACECURVESWEPTAREASOLID" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceCurveSweptAreaSolid();
						case "IFCSURFACEFEATURE" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceFeature();
						case "IFCSURFACEOFLINEAREXTRUSION" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceOfLinearExtrusion();
						case "IFCSURFACEOFREVOLUTION" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceOfRevolution();
						case "IFCSURFACEREINFORCEMENTAREA" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceReinforcementArea();
						case "IFCSURFACESTYLE" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceStyle();
						case "IFCSURFACESTYLELIGHTING" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceStyleLighting();
						case "IFCSURFACESTYLEREFRACTION" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceStyleRefraction();
						case "IFCSURFACESTYLERENDERING" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceStyleRendering();
						case "IFCSURFACESTYLESHADING" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceStyleShading();
						case "IFCSURFACESTYLEWITHTEXTURES" : return new CSiBKK.IFC.IFC4X3.IFCSurfaceStyleWithTextures();
						case "IFCSWEPTDISKSOLID" : return new CSiBKK.IFC.IFC4X3.IFCSweptDiskSolid();
						case "IFCSWEPTDISKSOLIDPOLYGONAL" : return new CSiBKK.IFC.IFC4X3.IFCSweptDiskSolidPolygonal();
						case "IFCSWITCHINGDEVICE" : return new CSiBKK.IFC.IFC4X3.IFCSwitchingDevice();
						case "IFCSWITCHINGDEVICETYPE" : return new CSiBKK.IFC.IFC4X3.IFCSwitchingDeviceType();
						case "IFCSYSTEM" : return new CSiBKK.IFC.IFC4X3.IFCSystem();
						case "IFCSYSTEMFURNITUREELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCSystemFurnitureElement();
						case "IFCSYSTEMFURNITUREELEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCSystemFurnitureElementType();
						case "IFCTSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCTShapeProfileDef();
						case "IFCTABLE" : return new CSiBKK.IFC.IFC4X3.IFCTable();
						case "IFCTABLECOLUMN" : return new CSiBKK.IFC.IFC4X3.IFCTableColumn();
						case "IFCTABLEROW" : return new CSiBKK.IFC.IFC4X3.IFCTableRow();
						case "IFCTANK" : return new CSiBKK.IFC.IFC4X3.IFCTank();
						case "IFCTANKTYPE" : return new CSiBKK.IFC.IFC4X3.IFCTankType();
						case "IFCTASK" : return new CSiBKK.IFC.IFC4X3.IFCTask();
						case "IFCTASKTIME" : return new CSiBKK.IFC.IFC4X3.IFCTaskTime();
						case "IFCTASKTIMERECURRING" : return new CSiBKK.IFC.IFC4X3.IFCTaskTimeRecurring();
						case "IFCTASKTYPE" : return new CSiBKK.IFC.IFC4X3.IFCTaskType();
						case "IFCTELECOMADDRESS" : return new CSiBKK.IFC.IFC4X3.IFCTelecomAddress();
						case "IFCTENDON" : return new CSiBKK.IFC.IFC4X3.IFCTendon();
						case "IFCTENDONANCHOR" : return new CSiBKK.IFC.IFC4X3.IFCTendonAnchor();
						case "IFCTENDONANCHORTYPE" : return new CSiBKK.IFC.IFC4X3.IFCTendonAnchorType();
						case "IFCTENDONCONDUIT" : return new CSiBKK.IFC.IFC4X3.IFCTendonConduit();
						case "IFCTENDONCONDUITTYPE" : return new CSiBKK.IFC.IFC4X3.IFCTendonConduitType();
						case "IFCTENDONTYPE" : return new CSiBKK.IFC.IFC4X3.IFCTendonType();
						case "IFCTEXTLITERAL" : return new CSiBKK.IFC.IFC4X3.IFCTextLiteral();
						case "IFCTEXTLITERALWITHEXTENT" : return new CSiBKK.IFC.IFC4X3.IFCTextLiteralWithExtent();
						case "IFCTEXTSTYLE" : return new CSiBKK.IFC.IFC4X3.IFCTextStyle();
						case "IFCTEXTSTYLEFONTMODEL" : return new CSiBKK.IFC.IFC4X3.IFCTextStyleFontModel();
						case "IFCTEXTSTYLEFORDEFINEDFONT" : return new CSiBKK.IFC.IFC4X3.IFCTextStyleForDefinedFont();
						case "IFCTEXTSTYLETEXTMODEL" : return new CSiBKK.IFC.IFC4X3.IFCTextStyleTextModel();
						case "IFCTEXTURECOORDINATEGENERATOR" : return new CSiBKK.IFC.IFC4X3.IFCTextureCoordinateGenerator();
						case "IFCTEXTURECOORDINATEINDICES" : return new CSiBKK.IFC.IFC4X3.IFCTextureCoordinateIndices();
						case "IFCTEXTURECOORDINATEINDICESWITHVOIDS" : return new CSiBKK.IFC.IFC4X3.IFCTextureCoordinateIndicesWithVoids();
						case "IFCTEXTUREMAP" : return new CSiBKK.IFC.IFC4X3.IFCTextureMap();
						case "IFCTEXTUREVERTEX" : return new CSiBKK.IFC.IFC4X3.IFCTextureVertex();
						case "IFCTEXTUREVERTEXLIST" : return new CSiBKK.IFC.IFC4X3.IFCTextureVertexList();
						case "IFCTHIRDORDERPOLYNOMIALSPIRAL" : return new CSiBKK.IFC.IFC4X3.IFCThirdOrderPolynomialSpiral();
						case "IFCTIMEPERIOD" : return new CSiBKK.IFC.IFC4X3.IFCTimePeriod();
						case "IFCTIMESERIESVALUE" : return new CSiBKK.IFC.IFC4X3.IFCTimeSeriesValue();
						case "IFCTOPOLOGYREPRESENTATION" : return new CSiBKK.IFC.IFC4X3.IFCTopologyRepresentation();
						case "IFCTOROIDALSURFACE" : return new CSiBKK.IFC.IFC4X3.IFCToroidalSurface();
						case "IFCTRACKELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCTrackElement();
						case "IFCTRACKELEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCTrackElementType();
						case "IFCTRANSFORMER" : return new CSiBKK.IFC.IFC4X3.IFCTransformer();
						case "IFCTRANSFORMERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCTransformerType();
						case "IFCTRANSPORTELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCTransportElement();
						case "IFCTRANSPORTELEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCTransportElementType();
						case "IFCTRAPEZIUMPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCTrapeziumProfileDef();
						case "IFCTRIANGULATEDFACESET" : return new CSiBKK.IFC.IFC4X3.IFCTriangulatedFaceSet();
						case "IFCTRIANGULATEDIRREGULARNETWORK" : return new CSiBKK.IFC.IFC4X3.IFCTriangulatedIrregularNetwork();
						case "IFCTRIMMEDCURVE" : return new CSiBKK.IFC.IFC4X3.IFCTrimmedCurve();
						case "IFCTUBEBUNDLE" : return new CSiBKK.IFC.IFC4X3.IFCTubeBundle();
						case "IFCTUBEBUNDLETYPE" : return new CSiBKK.IFC.IFC4X3.IFCTubeBundleType();
						case "IFCTYPEOBJECT" : return new CSiBKK.IFC.IFC4X3.IFCTypeObject();
						case "IFCTYPEPRODUCT" : return new CSiBKK.IFC.IFC4X3.IFCTypeProduct();
						case "IFCUSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCUShapeProfileDef();
						case "IFCUNITASSIGNMENT" : return new CSiBKK.IFC.IFC4X3.IFCUnitAssignment();
						case "IFCUNITARYCONTROLELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCUnitaryControlElement();
						case "IFCUNITARYCONTROLELEMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCUnitaryControlElementType();
						case "IFCUNITARYEQUIPMENT" : return new CSiBKK.IFC.IFC4X3.IFCUnitaryEquipment();
						case "IFCUNITARYEQUIPMENTTYPE" : return new CSiBKK.IFC.IFC4X3.IFCUnitaryEquipmentType();
						case "IFCVALVE" : return new CSiBKK.IFC.IFC4X3.IFCValve();
						case "IFCVALVETYPE" : return new CSiBKK.IFC.IFC4X3.IFCValveType();
						case "IFCVECTOR" : return new CSiBKK.IFC.IFC4X3.IFCVector();
						case "IFCVEHICLE" : return new CSiBKK.IFC.IFC4X3.IFCVehicle();
						case "IFCVEHICLETYPE" : return new CSiBKK.IFC.IFC4X3.IFCVehicleType();
						case "IFCVERTEX" : return new CSiBKK.IFC.IFC4X3.IFCVertex();
						case "IFCVERTEXLOOP" : return new CSiBKK.IFC.IFC4X3.IFCVertexLoop();
						case "IFCVERTEXPOINT" : return new CSiBKK.IFC.IFC4X3.IFCVertexPoint();
						case "IFCVIBRATIONDAMPER" : return new CSiBKK.IFC.IFC4X3.IFCVibrationDamper();
						case "IFCVIBRATIONDAMPERTYPE" : return new CSiBKK.IFC.IFC4X3.IFCVibrationDamperType();
						case "IFCVIBRATIONISOLATOR" : return new CSiBKK.IFC.IFC4X3.IFCVibrationIsolator();
						case "IFCVIBRATIONISOLATORTYPE" : return new CSiBKK.IFC.IFC4X3.IFCVibrationIsolatorType();
						case "IFCVIRTUALELEMENT" : return new CSiBKK.IFC.IFC4X3.IFCVirtualElement();
						case "IFCVIRTUALGRIDINTERSECTION" : return new CSiBKK.IFC.IFC4X3.IFCVirtualGridIntersection();
						case "IFCVOIDINGFEATURE" : return new CSiBKK.IFC.IFC4X3.IFCVoidingFeature();
						case "IFCWALL" : return new CSiBKK.IFC.IFC4X3.IFCWall();
						case "IFCWALLSTANDARDCASE" : return new CSiBKK.IFC.IFC4X3.IFCWallStandardCase();
						case "IFCWALLTYPE" : return new CSiBKK.IFC.IFC4X3.IFCWallType();
						case "IFCWASTETERMINAL" : return new CSiBKK.IFC.IFC4X3.IFCWasteTerminal();
						case "IFCWASTETERMINALTYPE" : return new CSiBKK.IFC.IFC4X3.IFCWasteTerminalType();
						case "IFCWELLKNOWNTEXT" : return new CSiBKK.IFC.IFC4X3.IFCWellKnownText();
						case "IFCWINDOW" : return new CSiBKK.IFC.IFC4X3.IFCWindow();
						case "IFCWINDOWLININGPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCWindowLiningProperties();
						case "IFCWINDOWPANELPROPERTIES" : return new CSiBKK.IFC.IFC4X3.IFCWindowPanelProperties();
						case "IFCWINDOWTYPE" : return new CSiBKK.IFC.IFC4X3.IFCWindowType();
						case "IFCWORKCALENDAR" : return new CSiBKK.IFC.IFC4X3.IFCWorkCalendar();
						case "IFCWORKPLAN" : return new CSiBKK.IFC.IFC4X3.IFCWorkPlan();
						case "IFCWORKSCHEDULE" : return new CSiBKK.IFC.IFC4X3.IFCWorkSchedule();
						case "IFCWORKTIME" : return new CSiBKK.IFC.IFC4X3.IFCWorkTime();
						case "IFCZSHAPEPROFILEDEF" : return new CSiBKK.IFC.IFC4X3.IFCZShapeProfileDef();
						case "IFCZONE" : return new CSiBKK.IFC.IFC4X3.IFCZone();
					}
				break;
			}
			return null;
		}
	}
	public enum IFC_VERSION
	{
		IFC2X3,
		IFC4,
		IFC4X1,
		IFC4X2,
		IFC4X3,
		UNDEFINED = 0
	}
}
