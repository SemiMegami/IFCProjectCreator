using System;
using System.Collections.Generic;
namespace IFC.IFC2x3
{
	/// <summary>
	/// TYPE IfcAbsorbedDoseMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcAbsorbedDoseMeasure : REAL, IfcDerivedMeasureValue, Global.IfcAbsorbedDoseMeasure
	{
		public IfcAbsorbedDoseMeasure() : base () { }
		public IfcAbsorbedDoseMeasure(double value) : base (value) { }
		public static implicit operator IfcAbsorbedDoseMeasure(double value) { return new IfcAbsorbedDoseMeasure(value);}
		public static implicit operator double(IfcAbsorbedDoseMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAccelerationMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcAccelerationMeasure : REAL, IfcDerivedMeasureValue, Global.IfcAccelerationMeasure
	{
		public IfcAccelerationMeasure() : base () { }
		public IfcAccelerationMeasure(double value) : base (value) { }
		public static implicit operator IfcAccelerationMeasure(double value) { return new IfcAccelerationMeasure(value);}
		public static implicit operator double(IfcAccelerationMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAmountOfSubstanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcAmountOfSubstanceMeasure : REAL, IfcMeasureValue, Global.IfcAmountOfSubstanceMeasure
	{
		public IfcAmountOfSubstanceMeasure() : base () { }
		public IfcAmountOfSubstanceMeasure(double value) : base (value) { }
		public static implicit operator IfcAmountOfSubstanceMeasure(double value) { return new IfcAmountOfSubstanceMeasure(value);}
		public static implicit operator double(IfcAmountOfSubstanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAngularVelocityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcAngularVelocityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcAngularVelocityMeasure
	{
		public IfcAngularVelocityMeasure() : base () { }
		public IfcAngularVelocityMeasure(double value) : base (value) { }
		public static implicit operator IfcAngularVelocityMeasure(double value) { return new IfcAngularVelocityMeasure(value);}
		public static implicit operator double(IfcAngularVelocityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAreaMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcAreaMeasure : REAL, IfcMeasureValue, Global.IfcAreaMeasure
	{
		public IfcAreaMeasure() : base () { }
		public IfcAreaMeasure(double value) : base (value) { }
		public static implicit operator IfcAreaMeasure(double value) { return new IfcAreaMeasure(value);}
		public static implicit operator double(IfcAreaMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBoolean = BOOLEAN;
	/// END_TYPE;
	/// <summary>
	public class IfcBoolean : BOOLEAN, IfcSimpleValue, Global.IfcBoolean
	{
		public IfcBoolean() : base () { }
		public IfcBoolean(bool value) : base (value) { }
		public static implicit operator IfcBoolean(bool value) { return new IfcBoolean(value);}
		public static implicit operator bool(IfcBoolean value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBoxAlignment = IfcLabel;
	/// WHERE
	/// WR1 : SELF IN ['top-left', 'top-middle', 'top-right', 'middle-left', 'center', 'middle-right', 'bottom-left', 'bottom-middle', 'bottom-right'];
	/// END_TYPE;
	/// <summary>
	public class IfcBoxAlignment : IfcLabel, Global.IfcBoxAlignment
	{
		public IfcBoxAlignment() : base () { }
		public IfcBoxAlignment(string value) : base (value) { }
		public static implicit operator IfcBoxAlignment(string value) { return new IfcBoxAlignment(value);}
		public static implicit operator string(IfcBoxAlignment value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcContextDependentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcContextDependentMeasure : REAL, IfcMeasureValue, Global.IfcContextDependentMeasure
	{
		public IfcContextDependentMeasure() : base () { }
		public IfcContextDependentMeasure(double value) : base (value) { }
		public static implicit operator IfcContextDependentMeasure(double value) { return new IfcContextDependentMeasure(value);}
		public static implicit operator double(IfcContextDependentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCountMeasure = NUMBER;
	/// END_TYPE;
	/// <summary>
	public class IfcCountMeasure : NUMBER, IfcMeasureValue, Global.IfcCountMeasure
	{
		public IfcCountMeasure() : base () { }
		public IfcCountMeasure(double value) : base (value) { }
		public static implicit operator IfcCountMeasure(double value) { return new IfcCountMeasure(value);}
		public static implicit operator double(IfcCountMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCurvatureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcCurvatureMeasure : REAL, IfcDerivedMeasureValue, Global.IfcCurvatureMeasure
	{
		public IfcCurvatureMeasure() : base () { }
		public IfcCurvatureMeasure(double value) : base (value) { }
		public static implicit operator IfcCurvatureMeasure(double value) { return new IfcCurvatureMeasure(value);}
		public static implicit operator double(IfcCurvatureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDayInMonthNumber = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IfcDayInMonthNumber : INTEGER, Global.IfcDayInMonthNumber
	{
		public IfcDayInMonthNumber() : base () { }
		public IfcDayInMonthNumber(int value) : base (value) { }
		public static implicit operator IfcDayInMonthNumber(int value) { return new IfcDayInMonthNumber(value);}
		public static implicit operator int(IfcDayInMonthNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDaylightSavingHour = INTEGER;
	/// WHERE
	/// WR1 : { 0 <= SELF <= 2 };
	/// END_TYPE;
	/// <summary>
	public class IfcDaylightSavingHour : INTEGER, Global.IfcDaylightSavingHour
	{
		public IfcDaylightSavingHour() : base () { }
		public IfcDaylightSavingHour(int value) : base (value) { }
		public static implicit operator IfcDaylightSavingHour(int value) { return new IfcDaylightSavingHour(value);}
		public static implicit operator int(IfcDaylightSavingHour value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDescriptiveMeasure = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcDescriptiveMeasure : STRING, IfcMeasureValue, IfcSizeSelect, Global.IfcDescriptiveMeasure
	{
		public IfcDescriptiveMeasure() : base () { }
		public IfcDescriptiveMeasure(string value) : base (value) { }
		public static implicit operator IfcDescriptiveMeasure(string value) { return new IfcDescriptiveMeasure(value);}
		public static implicit operator string(IfcDescriptiveMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDimensionCount = INTEGER;
	/// WHERE
	/// WR1 : { 0 < SELF <= 3 };
	/// END_TYPE;
	/// <summary>
	public class IfcDimensionCount : INTEGER, Global.IfcDimensionCount
	{
		public IfcDimensionCount() : base () { }
		public IfcDimensionCount(int value) : base (value) { }
		public static implicit operator IfcDimensionCount(int value) { return new IfcDimensionCount(value);}
		public static implicit operator int(IfcDimensionCount value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoseEquivalentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcDoseEquivalentMeasure : REAL, IfcDerivedMeasureValue, Global.IfcDoseEquivalentMeasure
	{
		public IfcDoseEquivalentMeasure() : base () { }
		public IfcDoseEquivalentMeasure(double value) : base (value) { }
		public static implicit operator IfcDoseEquivalentMeasure(double value) { return new IfcDoseEquivalentMeasure(value);}
		public static implicit operator double(IfcDoseEquivalentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDynamicViscosityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcDynamicViscosityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcDynamicViscosityMeasure
	{
		public IfcDynamicViscosityMeasure() : base () { }
		public IfcDynamicViscosityMeasure(double value) : base (value) { }
		public static implicit operator IfcDynamicViscosityMeasure(double value) { return new IfcDynamicViscosityMeasure(value);}
		public static implicit operator double(IfcDynamicViscosityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricCapacitanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricCapacitanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcElectricCapacitanceMeasure
	{
		public IfcElectricCapacitanceMeasure() : base () { }
		public IfcElectricCapacitanceMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricCapacitanceMeasure(double value) { return new IfcElectricCapacitanceMeasure(value);}
		public static implicit operator double(IfcElectricCapacitanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricChargeMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricChargeMeasure : REAL, IfcDerivedMeasureValue, Global.IfcElectricChargeMeasure
	{
		public IfcElectricChargeMeasure() : base () { }
		public IfcElectricChargeMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricChargeMeasure(double value) { return new IfcElectricChargeMeasure(value);}
		public static implicit operator double(IfcElectricChargeMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricConductanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricConductanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcElectricConductanceMeasure
	{
		public IfcElectricConductanceMeasure() : base () { }
		public IfcElectricConductanceMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricConductanceMeasure(double value) { return new IfcElectricConductanceMeasure(value);}
		public static implicit operator double(IfcElectricConductanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricCurrentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricCurrentMeasure : REAL, IfcMeasureValue, Global.IfcElectricCurrentMeasure
	{
		public IfcElectricCurrentMeasure() : base () { }
		public IfcElectricCurrentMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricCurrentMeasure(double value) { return new IfcElectricCurrentMeasure(value);}
		public static implicit operator double(IfcElectricCurrentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricResistanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricResistanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcElectricResistanceMeasure
	{
		public IfcElectricResistanceMeasure() : base () { }
		public IfcElectricResistanceMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricResistanceMeasure(double value) { return new IfcElectricResistanceMeasure(value);}
		public static implicit operator double(IfcElectricResistanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricVoltageMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcElectricVoltageMeasure : REAL, IfcDerivedMeasureValue, Global.IfcElectricVoltageMeasure
	{
		public IfcElectricVoltageMeasure() : base () { }
		public IfcElectricVoltageMeasure(double value) : base (value) { }
		public static implicit operator IfcElectricVoltageMeasure(double value) { return new IfcElectricVoltageMeasure(value);}
		public static implicit operator double(IfcElectricVoltageMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEnergyMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcEnergyMeasure : REAL, IfcDerivedMeasureValue, Global.IfcEnergyMeasure
	{
		public IfcEnergyMeasure() : base () { }
		public IfcEnergyMeasure(double value) : base (value) { }
		public static implicit operator IfcEnergyMeasure(double value) { return new IfcEnergyMeasure(value);}
		public static implicit operator double(IfcEnergyMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFontStyle = STRING;
	/// WHERE
	/// WR1 : SELF IN ['normal','italic','oblique'];
	/// END_TYPE;
	/// <summary>
	public class IfcFontStyle : STRING, Global.IfcFontStyle
	{
		public IfcFontStyle() : base () { }
		public IfcFontStyle(string value) : base (value) { }
		public static implicit operator IfcFontStyle(string value) { return new IfcFontStyle(value);}
		public static implicit operator string(IfcFontStyle value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFontVariant = STRING;
	/// WHERE
	/// WR1 : SELF IN ['normal','small-caps'];
	/// END_TYPE;
	/// <summary>
	public class IfcFontVariant : STRING, Global.IfcFontVariant
	{
		public IfcFontVariant() : base () { }
		public IfcFontVariant(string value) : base (value) { }
		public static implicit operator IfcFontVariant(string value) { return new IfcFontVariant(value);}
		public static implicit operator string(IfcFontVariant value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFontWeight = STRING;
	/// WHERE
	/// WR1 : SELF IN ['normal','small-caps','100','200','300','400','500','600','700','800','900'];
	/// END_TYPE;
	/// <summary>
	public class IfcFontWeight : STRING, Global.IfcFontWeight
	{
		public IfcFontWeight() : base () { }
		public IfcFontWeight(string value) : base (value) { }
		public static implicit operator IfcFontWeight(string value) { return new IfcFontWeight(value);}
		public static implicit operator string(IfcFontWeight value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcForceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcForceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcForceMeasure
	{
		public IfcForceMeasure() : base () { }
		public IfcForceMeasure(double value) : base (value) { }
		public static implicit operator IfcForceMeasure(double value) { return new IfcForceMeasure(value);}
		public static implicit operator double(IfcForceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFrequencyMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcFrequencyMeasure : REAL, IfcDerivedMeasureValue, Global.IfcFrequencyMeasure
	{
		public IfcFrequencyMeasure() : base () { }
		public IfcFrequencyMeasure(double value) : base (value) { }
		public static implicit operator IfcFrequencyMeasure(double value) { return new IfcFrequencyMeasure(value);}
		public static implicit operator double(IfcFrequencyMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGloballyUniqueId = STRING(22) FIXED;
	/// END_TYPE;
	/// <summary>
	public class IfcGloballyUniqueId : STRING, Global.IfcGloballyUniqueId
	{
		public IfcGloballyUniqueId() : base () { }
		public IfcGloballyUniqueId(string value) : base (value) { }
		public static implicit operator IfcGloballyUniqueId(string value) { return new IfcGloballyUniqueId(value);}
		public static implicit operator string(IfcGloballyUniqueId value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHeatFluxDensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcHeatFluxDensityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcHeatFluxDensityMeasure
	{
		public IfcHeatFluxDensityMeasure() : base () { }
		public IfcHeatFluxDensityMeasure(double value) : base (value) { }
		public static implicit operator IfcHeatFluxDensityMeasure(double value) { return new IfcHeatFluxDensityMeasure(value);}
		public static implicit operator double(IfcHeatFluxDensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHeatingValueMeasure = REAL;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IfcHeatingValueMeasure : REAL, IfcDerivedMeasureValue, Global.IfcHeatingValueMeasure
	{
		public IfcHeatingValueMeasure() : base () { }
		public IfcHeatingValueMeasure(double value) : base (value) { }
		public static implicit operator IfcHeatingValueMeasure(double value) { return new IfcHeatingValueMeasure(value);}
		public static implicit operator double(IfcHeatingValueMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHourInDay = INTEGER;
	/// WHERE
	/// WR1 : { 0 <= SELF < 24 };
	/// END_TYPE;
	/// <summary>
	public class IfcHourInDay : INTEGER, Global.IfcHourInDay
	{
		public IfcHourInDay() : base () { }
		public IfcHourInDay(int value) : base (value) { }
		public static implicit operator IfcHourInDay(int value) { return new IfcHourInDay(value);}
		public static implicit operator int(IfcHourInDay value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIdentifier = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcIdentifier : STRING, IfcSimpleValue, Global.IfcIdentifier
	{
		public IfcIdentifier() : base () { }
		public IfcIdentifier(string value) : base (value) { }
		public static implicit operator IfcIdentifier(string value) { return new IfcIdentifier(value);}
		public static implicit operator string(IfcIdentifier value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIlluminanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcIlluminanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcIlluminanceMeasure
	{
		public IfcIlluminanceMeasure() : base () { }
		public IfcIlluminanceMeasure(double value) : base (value) { }
		public static implicit operator IfcIlluminanceMeasure(double value) { return new IfcIlluminanceMeasure(value);}
		public static implicit operator double(IfcIlluminanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInductanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcInductanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcInductanceMeasure
	{
		public IfcInductanceMeasure() : base () { }
		public IfcInductanceMeasure(double value) : base (value) { }
		public static implicit operator IfcInductanceMeasure(double value) { return new IfcInductanceMeasure(value);}
		public static implicit operator double(IfcInductanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInteger = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IfcInteger : INTEGER, IfcSimpleValue, Global.IfcInteger
	{
		public IfcInteger() : base () { }
		public IfcInteger(int value) : base (value) { }
		public static implicit operator IfcInteger(int value) { return new IfcInteger(value);}
		public static implicit operator int(IfcInteger value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIntegerCountRateMeasure = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IfcIntegerCountRateMeasure : INTEGER, IfcDerivedMeasureValue, Global.IfcIntegerCountRateMeasure
	{
		public IfcIntegerCountRateMeasure() : base () { }
		public IfcIntegerCountRateMeasure(int value) : base (value) { }
		public static implicit operator IfcIntegerCountRateMeasure(int value) { return new IfcIntegerCountRateMeasure(value);}
		public static implicit operator int(IfcIntegerCountRateMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIonConcentrationMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcIonConcentrationMeasure : REAL, IfcDerivedMeasureValue, Global.IfcIonConcentrationMeasure
	{
		public IfcIonConcentrationMeasure() : base () { }
		public IfcIonConcentrationMeasure(double value) : base (value) { }
		public static implicit operator IfcIonConcentrationMeasure(double value) { return new IfcIonConcentrationMeasure(value);}
		public static implicit operator double(IfcIonConcentrationMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIsothermalMoistureCapacityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcIsothermalMoistureCapacityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcIsothermalMoistureCapacityMeasure
	{
		public IfcIsothermalMoistureCapacityMeasure() : base () { }
		public IfcIsothermalMoistureCapacityMeasure(double value) : base (value) { }
		public static implicit operator IfcIsothermalMoistureCapacityMeasure(double value) { return new IfcIsothermalMoistureCapacityMeasure(value);}
		public static implicit operator double(IfcIsothermalMoistureCapacityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcKinematicViscosityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcKinematicViscosityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcKinematicViscosityMeasure
	{
		public IfcKinematicViscosityMeasure() : base () { }
		public IfcKinematicViscosityMeasure(double value) : base (value) { }
		public static implicit operator IfcKinematicViscosityMeasure(double value) { return new IfcKinematicViscosityMeasure(value);}
		public static implicit operator double(IfcKinematicViscosityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLabel = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcLabel : STRING, IfcConditionCriterionSelect, IfcSimpleValue, Global.IfcLabel
	{
		public IfcLabel() : base () { }
		public IfcLabel(string value) : base (value) { }
		public static implicit operator IfcLabel(string value) { return new IfcLabel(value);}
		public static implicit operator string(IfcLabel value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLengthMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLengthMeasure : REAL, IfcMeasureValue, IfcSizeSelect, Global.IfcLengthMeasure
	{
		public IfcLengthMeasure() : base () { }
		public IfcLengthMeasure(double value) : base (value) { }
		public static implicit operator IfcLengthMeasure(double value) { return new IfcLengthMeasure(value);}
		public static implicit operator double(IfcLengthMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearForceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLinearForceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcLinearForceMeasure
	{
		public IfcLinearForceMeasure() : base () { }
		public IfcLinearForceMeasure(double value) : base (value) { }
		public static implicit operator IfcLinearForceMeasure(double value) { return new IfcLinearForceMeasure(value);}
		public static implicit operator double(IfcLinearForceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearMomentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLinearMomentMeasure : REAL, IfcDerivedMeasureValue, Global.IfcLinearMomentMeasure
	{
		public IfcLinearMomentMeasure() : base () { }
		public IfcLinearMomentMeasure(double value) : base (value) { }
		public static implicit operator IfcLinearMomentMeasure(double value) { return new IfcLinearMomentMeasure(value);}
		public static implicit operator double(IfcLinearMomentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearStiffnessMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLinearStiffnessMeasure : REAL, IfcDerivedMeasureValue, Global.IfcLinearStiffnessMeasure
	{
		public IfcLinearStiffnessMeasure() : base () { }
		public IfcLinearStiffnessMeasure(double value) : base (value) { }
		public static implicit operator IfcLinearStiffnessMeasure(double value) { return new IfcLinearStiffnessMeasure(value);}
		public static implicit operator double(IfcLinearStiffnessMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearVelocityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLinearVelocityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcLinearVelocityMeasure
	{
		public IfcLinearVelocityMeasure() : base () { }
		public IfcLinearVelocityMeasure(double value) : base (value) { }
		public static implicit operator IfcLinearVelocityMeasure(double value) { return new IfcLinearVelocityMeasure(value);}
		public static implicit operator double(IfcLinearVelocityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLogical = LOGICAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLogical : LOGICAL, IfcSimpleValue, Global.IfcLogical
	{
		public IfcLogical() : base () { }
		public IfcLogical(bool value) : base (value) { }
		public static implicit operator IfcLogical(bool value) { return new IfcLogical(value);}
		public static implicit operator bool(IfcLogical value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLuminousFluxMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLuminousFluxMeasure : REAL, IfcDerivedMeasureValue, Global.IfcLuminousFluxMeasure
	{
		public IfcLuminousFluxMeasure() : base () { }
		public IfcLuminousFluxMeasure(double value) : base (value) { }
		public static implicit operator IfcLuminousFluxMeasure(double value) { return new IfcLuminousFluxMeasure(value);}
		public static implicit operator double(IfcLuminousFluxMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLuminousIntensityDistributionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLuminousIntensityDistributionMeasure : REAL, IfcDerivedMeasureValue, Global.IfcLuminousIntensityDistributionMeasure
	{
		public IfcLuminousIntensityDistributionMeasure() : base () { }
		public IfcLuminousIntensityDistributionMeasure(double value) : base (value) { }
		public static implicit operator IfcLuminousIntensityDistributionMeasure(double value) { return new IfcLuminousIntensityDistributionMeasure(value);}
		public static implicit operator double(IfcLuminousIntensityDistributionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLuminousIntensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcLuminousIntensityMeasure : REAL, IfcMeasureValue, Global.IfcLuminousIntensityMeasure
	{
		public IfcLuminousIntensityMeasure() : base () { }
		public IfcLuminousIntensityMeasure(double value) : base (value) { }
		public static implicit operator IfcLuminousIntensityMeasure(double value) { return new IfcLuminousIntensityMeasure(value);}
		public static implicit operator double(IfcLuminousIntensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMagneticFluxDensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMagneticFluxDensityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMagneticFluxDensityMeasure
	{
		public IfcMagneticFluxDensityMeasure() : base () { }
		public IfcMagneticFluxDensityMeasure(double value) : base (value) { }
		public static implicit operator IfcMagneticFluxDensityMeasure(double value) { return new IfcMagneticFluxDensityMeasure(value);}
		public static implicit operator double(IfcMagneticFluxDensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMagneticFluxMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMagneticFluxMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMagneticFluxMeasure
	{
		public IfcMagneticFluxMeasure() : base () { }
		public IfcMagneticFluxMeasure(double value) : base (value) { }
		public static implicit operator IfcMagneticFluxMeasure(double value) { return new IfcMagneticFluxMeasure(value);}
		public static implicit operator double(IfcMagneticFluxMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassDensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMassDensityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMassDensityMeasure
	{
		public IfcMassDensityMeasure() : base () { }
		public IfcMassDensityMeasure(double value) : base (value) { }
		public static implicit operator IfcMassDensityMeasure(double value) { return new IfcMassDensityMeasure(value);}
		public static implicit operator double(IfcMassDensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassFlowRateMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMassFlowRateMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMassFlowRateMeasure
	{
		public IfcMassFlowRateMeasure() : base () { }
		public IfcMassFlowRateMeasure(double value) : base (value) { }
		public static implicit operator IfcMassFlowRateMeasure(double value) { return new IfcMassFlowRateMeasure(value);}
		public static implicit operator double(IfcMassFlowRateMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMassMeasure : REAL, IfcMeasureValue, Global.IfcMassMeasure
	{
		public IfcMassMeasure() : base () { }
		public IfcMassMeasure(double value) : base (value) { }
		public static implicit operator IfcMassMeasure(double value) { return new IfcMassMeasure(value);}
		public static implicit operator double(IfcMassMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassPerLengthMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMassPerLengthMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMassPerLengthMeasure
	{
		public IfcMassPerLengthMeasure() : base () { }
		public IfcMassPerLengthMeasure(double value) : base (value) { }
		public static implicit operator IfcMassPerLengthMeasure(double value) { return new IfcMassPerLengthMeasure(value);}
		public static implicit operator double(IfcMassPerLengthMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMinuteInHour = INTEGER;
	/// WHERE
	/// WR1 : {0 <= SELF <= 59 };
	/// END_TYPE;
	/// <summary>
	public class IfcMinuteInHour : INTEGER, Global.IfcMinuteInHour
	{
		public IfcMinuteInHour() : base () { }
		public IfcMinuteInHour(int value) : base (value) { }
		public static implicit operator IfcMinuteInHour(int value) { return new IfcMinuteInHour(value);}
		public static implicit operator int(IfcMinuteInHour value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfElasticityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcModulusOfElasticityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcModulusOfElasticityMeasure
	{
		public IfcModulusOfElasticityMeasure() : base () { }
		public IfcModulusOfElasticityMeasure(double value) : base (value) { }
		public static implicit operator IfcModulusOfElasticityMeasure(double value) { return new IfcModulusOfElasticityMeasure(value);}
		public static implicit operator double(IfcModulusOfElasticityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfLinearSubgradeReactionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcModulusOfLinearSubgradeReactionMeasure : REAL, IfcDerivedMeasureValue, Global.IfcModulusOfLinearSubgradeReactionMeasure
	{
		public IfcModulusOfLinearSubgradeReactionMeasure() : base () { }
		public IfcModulusOfLinearSubgradeReactionMeasure(double value) : base (value) { }
		public static implicit operator IfcModulusOfLinearSubgradeReactionMeasure(double value) { return new IfcModulusOfLinearSubgradeReactionMeasure(value);}
		public static implicit operator double(IfcModulusOfLinearSubgradeReactionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfRotationalSubgradeReactionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcModulusOfRotationalSubgradeReactionMeasure : REAL, IfcDerivedMeasureValue, Global.IfcModulusOfRotationalSubgradeReactionMeasure
	{
		public IfcModulusOfRotationalSubgradeReactionMeasure() : base () { }
		public IfcModulusOfRotationalSubgradeReactionMeasure(double value) : base (value) { }
		public static implicit operator IfcModulusOfRotationalSubgradeReactionMeasure(double value) { return new IfcModulusOfRotationalSubgradeReactionMeasure(value);}
		public static implicit operator double(IfcModulusOfRotationalSubgradeReactionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfSubgradeReactionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcModulusOfSubgradeReactionMeasure : REAL, IfcDerivedMeasureValue, Global.IfcModulusOfSubgradeReactionMeasure
	{
		public IfcModulusOfSubgradeReactionMeasure() : base () { }
		public IfcModulusOfSubgradeReactionMeasure(double value) : base (value) { }
		public static implicit operator IfcModulusOfSubgradeReactionMeasure(double value) { return new IfcModulusOfSubgradeReactionMeasure(value);}
		public static implicit operator double(IfcModulusOfSubgradeReactionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMoistureDiffusivityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMoistureDiffusivityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMoistureDiffusivityMeasure
	{
		public IfcMoistureDiffusivityMeasure() : base () { }
		public IfcMoistureDiffusivityMeasure(double value) : base (value) { }
		public static implicit operator IfcMoistureDiffusivityMeasure(double value) { return new IfcMoistureDiffusivityMeasure(value);}
		public static implicit operator double(IfcMoistureDiffusivityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMolecularWeightMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMolecularWeightMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMolecularWeightMeasure
	{
		public IfcMolecularWeightMeasure() : base () { }
		public IfcMolecularWeightMeasure(double value) : base (value) { }
		public static implicit operator IfcMolecularWeightMeasure(double value) { return new IfcMolecularWeightMeasure(value);}
		public static implicit operator double(IfcMolecularWeightMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMomentOfInertiaMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMomentOfInertiaMeasure : REAL, IfcDerivedMeasureValue, Global.IfcMomentOfInertiaMeasure
	{
		public IfcMomentOfInertiaMeasure() : base () { }
		public IfcMomentOfInertiaMeasure(double value) : base (value) { }
		public static implicit operator IfcMomentOfInertiaMeasure(double value) { return new IfcMomentOfInertiaMeasure(value);}
		public static implicit operator double(IfcMomentOfInertiaMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMonetaryMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcMonetaryMeasure : REAL, IfcAppliedValueSelect, IfcDerivedMeasureValue, Global.IfcMonetaryMeasure
	{
		public IfcMonetaryMeasure() : base () { }
		public IfcMonetaryMeasure(double value) : base (value) { }
		public static implicit operator IfcMonetaryMeasure(double value) { return new IfcMonetaryMeasure(value);}
		public static implicit operator double(IfcMonetaryMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMonthInYearNumber = INTEGER;
	/// WHERE
	/// WR1 : { 1<= SELF <= 12 };
	/// END_TYPE;
	/// <summary>
	public class IfcMonthInYearNumber : INTEGER, Global.IfcMonthInYearNumber
	{
		public IfcMonthInYearNumber() : base () { }
		public IfcMonthInYearNumber(int value) : base (value) { }
		public static implicit operator IfcMonthInYearNumber(int value) { return new IfcMonthInYearNumber(value);}
		public static implicit operator int(IfcMonthInYearNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcNormalisedRatioMeasure = IfcRatioMeasure;
	/// WHERE
	/// WR1 : {0.0 <= SELF <= 1.0};
	/// END_TYPE;
	/// <summary>
	public class IfcNormalisedRatioMeasure : IfcRatioMeasure, IfcColourOrFactor, IfcMeasureValue, IfcSizeSelect, Global.IfcNormalisedRatioMeasure
	{
		public IfcNormalisedRatioMeasure() : base () { }
		public IfcNormalisedRatioMeasure(double value) : base (value) { }
		public static implicit operator IfcNormalisedRatioMeasure(double value) { return new IfcNormalisedRatioMeasure(value);}
		public static implicit operator double(IfcNormalisedRatioMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcNumericMeasure = NUMBER;
	/// END_TYPE;
	/// <summary>
	public class IfcNumericMeasure : NUMBER, IfcMeasureValue, Global.IfcNumericMeasure
	{
		public IfcNumericMeasure() : base () { }
		public IfcNumericMeasure(double value) : base (value) { }
		public static implicit operator IfcNumericMeasure(double value) { return new IfcNumericMeasure(value);}
		public static implicit operator double(IfcNumericMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPHMeasure = REAL;
	/// WHERE
	/// WR21 : {0.0 <= SELF <= 14.0};
	/// END_TYPE;
	/// <summary>
	public class IfcPHMeasure : REAL, IfcDerivedMeasureValue, Global.IfcPHMeasure
	{
		public IfcPHMeasure() : base () { }
		public IfcPHMeasure(double value) : base (value) { }
		public static implicit operator IfcPHMeasure(double value) { return new IfcPHMeasure(value);}
		public static implicit operator double(IfcPHMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcParameterValue = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcParameterValue : REAL, IfcMeasureValue, IfcTrimmingSelect, Global.IfcParameterValue
	{
		public IfcParameterValue() : base () { }
		public IfcParameterValue(double value) : base (value) { }
		public static implicit operator IfcParameterValue(double value) { return new IfcParameterValue(value);}
		public static implicit operator double(IfcParameterValue value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPlanarForceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcPlanarForceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcPlanarForceMeasure
	{
		public IfcPlanarForceMeasure() : base () { }
		public IfcPlanarForceMeasure(double value) : base (value) { }
		public static implicit operator IfcPlanarForceMeasure(double value) { return new IfcPlanarForceMeasure(value);}
		public static implicit operator double(IfcPlanarForceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPlaneAngleMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcPlaneAngleMeasure : REAL, IfcMeasureValue, IfcOrientationSelect, Global.IfcPlaneAngleMeasure
	{
		public IfcPlaneAngleMeasure() : base () { }
		public IfcPlaneAngleMeasure(double value) : base (value) { }
		public static implicit operator IfcPlaneAngleMeasure(double value) { return new IfcPlaneAngleMeasure(value);}
		public static implicit operator double(IfcPlaneAngleMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPositiveLengthMeasure = IfcLengthMeasure;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IfcPositiveLengthMeasure : IfcLengthMeasure, IfcHatchLineDistanceSelect, IfcMeasureValue, IfcSizeSelect, Global.IfcPositiveLengthMeasure
	{
		public IfcPositiveLengthMeasure() : base () { }
		public IfcPositiveLengthMeasure(double value) : base (value) { }
		public static implicit operator IfcPositiveLengthMeasure(double value) { return new IfcPositiveLengthMeasure(value);}
		public static implicit operator double(IfcPositiveLengthMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPositivePlaneAngleMeasure = IfcPlaneAngleMeasure;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IfcPositivePlaneAngleMeasure : IfcPlaneAngleMeasure, IfcMeasureValue, Global.IfcPositivePlaneAngleMeasure
	{
		public IfcPositivePlaneAngleMeasure() : base () { }
		public IfcPositivePlaneAngleMeasure(double value) : base (value) { }
		public static implicit operator IfcPositivePlaneAngleMeasure(double value) { return new IfcPositivePlaneAngleMeasure(value);}
		public static implicit operator double(IfcPositivePlaneAngleMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPositiveRatioMeasure = IfcRatioMeasure;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IfcPositiveRatioMeasure : IfcRatioMeasure, IfcMeasureValue, IfcSizeSelect, Global.IfcPositiveRatioMeasure
	{
		public IfcPositiveRatioMeasure() : base () { }
		public IfcPositiveRatioMeasure(double value) : base (value) { }
		public static implicit operator IfcPositiveRatioMeasure(double value) { return new IfcPositiveRatioMeasure(value);}
		public static implicit operator double(IfcPositiveRatioMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPowerMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcPowerMeasure : REAL, IfcDerivedMeasureValue, Global.IfcPowerMeasure
	{
		public IfcPowerMeasure() : base () { }
		public IfcPowerMeasure(double value) : base (value) { }
		public static implicit operator IfcPowerMeasure(double value) { return new IfcPowerMeasure(value);}
		public static implicit operator double(IfcPowerMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPresentableText = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcPresentableText : STRING, Global.IfcPresentableText
	{
		public IfcPresentableText() : base () { }
		public IfcPresentableText(string value) : base (value) { }
		public static implicit operator IfcPresentableText(string value) { return new IfcPresentableText(value);}
		public static implicit operator string(IfcPresentableText value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPressureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcPressureMeasure : REAL, IfcDerivedMeasureValue, Global.IfcPressureMeasure
	{
		public IfcPressureMeasure() : base () { }
		public IfcPressureMeasure(double value) : base (value) { }
		public static implicit operator IfcPressureMeasure(double value) { return new IfcPressureMeasure(value);}
		public static implicit operator double(IfcPressureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRadioActivityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcRadioActivityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcRadioActivityMeasure
	{
		public IfcRadioActivityMeasure() : base () { }
		public IfcRadioActivityMeasure(double value) : base (value) { }
		public static implicit operator IfcRadioActivityMeasure(double value) { return new IfcRadioActivityMeasure(value);}
		public static implicit operator double(IfcRadioActivityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRatioMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcRatioMeasure : REAL, IfcAppliedValueSelect, IfcMeasureValue, IfcSizeSelect, Global.IfcRatioMeasure
	{
		public IfcRatioMeasure() : base () { }
		public IfcRatioMeasure(double value) : base (value) { }
		public static implicit operator IfcRatioMeasure(double value) { return new IfcRatioMeasure(value);}
		public static implicit operator double(IfcRatioMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReal = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcReal : REAL, IfcSimpleValue, Global.IfcReal
	{
		public IfcReal() : base () { }
		public IfcReal(double value) : base (value) { }
		public static implicit operator IfcReal(double value) { return new IfcReal(value);}
		public static implicit operator double(IfcReal value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRotationalFrequencyMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcRotationalFrequencyMeasure : REAL, IfcDerivedMeasureValue, Global.IfcRotationalFrequencyMeasure
	{
		public IfcRotationalFrequencyMeasure() : base () { }
		public IfcRotationalFrequencyMeasure(double value) : base (value) { }
		public static implicit operator IfcRotationalFrequencyMeasure(double value) { return new IfcRotationalFrequencyMeasure(value);}
		public static implicit operator double(IfcRotationalFrequencyMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRotationalMassMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcRotationalMassMeasure : REAL, IfcDerivedMeasureValue, Global.IfcRotationalMassMeasure
	{
		public IfcRotationalMassMeasure() : base () { }
		public IfcRotationalMassMeasure(double value) : base (value) { }
		public static implicit operator IfcRotationalMassMeasure(double value) { return new IfcRotationalMassMeasure(value);}
		public static implicit operator double(IfcRotationalMassMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRotationalStiffnessMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcRotationalStiffnessMeasure : REAL, IfcDerivedMeasureValue, Global.IfcRotationalStiffnessMeasure
	{
		public IfcRotationalStiffnessMeasure() : base () { }
		public IfcRotationalStiffnessMeasure(double value) : base (value) { }
		public static implicit operator IfcRotationalStiffnessMeasure(double value) { return new IfcRotationalStiffnessMeasure(value);}
		public static implicit operator double(IfcRotationalStiffnessMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSecondInMinute = REAL;
	/// WHERE
	/// WR1 : { 0. <= SELF < 60. };
	/// END_TYPE;
	/// <summary>
	public class IfcSecondInMinute : REAL, Global.IfcSecondInMinute
	{
		public IfcSecondInMinute() : base () { }
		public IfcSecondInMinute(double value) : base (value) { }
		public static implicit operator IfcSecondInMinute(double value) { return new IfcSecondInMinute(value);}
		public static implicit operator double(IfcSecondInMinute value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSectionModulusMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSectionModulusMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSectionModulusMeasure
	{
		public IfcSectionModulusMeasure() : base () { }
		public IfcSectionModulusMeasure(double value) : base (value) { }
		public static implicit operator IfcSectionModulusMeasure(double value) { return new IfcSectionModulusMeasure(value);}
		public static implicit operator double(IfcSectionModulusMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSectionalAreaIntegralMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSectionalAreaIntegralMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSectionalAreaIntegralMeasure
	{
		public IfcSectionalAreaIntegralMeasure() : base () { }
		public IfcSectionalAreaIntegralMeasure(double value) : base (value) { }
		public static implicit operator IfcSectionalAreaIntegralMeasure(double value) { return new IfcSectionalAreaIntegralMeasure(value);}
		public static implicit operator double(IfcSectionalAreaIntegralMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcShearModulusMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcShearModulusMeasure : REAL, IfcDerivedMeasureValue, Global.IfcShearModulusMeasure
	{
		public IfcShearModulusMeasure() : base () { }
		public IfcShearModulusMeasure(double value) : base (value) { }
		public static implicit operator IfcShearModulusMeasure(double value) { return new IfcShearModulusMeasure(value);}
		public static implicit operator double(IfcShearModulusMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSolidAngleMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSolidAngleMeasure : REAL, IfcMeasureValue, Global.IfcSolidAngleMeasure
	{
		public IfcSolidAngleMeasure() : base () { }
		public IfcSolidAngleMeasure(double value) : base (value) { }
		public static implicit operator IfcSolidAngleMeasure(double value) { return new IfcSolidAngleMeasure(value);}
		public static implicit operator double(IfcSolidAngleMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSoundPowerMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSoundPowerMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSoundPowerMeasure
	{
		public IfcSoundPowerMeasure() : base () { }
		public IfcSoundPowerMeasure(double value) : base (value) { }
		public static implicit operator IfcSoundPowerMeasure(double value) { return new IfcSoundPowerMeasure(value);}
		public static implicit operator double(IfcSoundPowerMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSoundPressureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSoundPressureMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSoundPressureMeasure
	{
		public IfcSoundPressureMeasure() : base () { }
		public IfcSoundPressureMeasure(double value) : base (value) { }
		public static implicit operator IfcSoundPressureMeasure(double value) { return new IfcSoundPressureMeasure(value);}
		public static implicit operator double(IfcSoundPressureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpecificHeatCapacityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSpecificHeatCapacityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcSpecificHeatCapacityMeasure
	{
		public IfcSpecificHeatCapacityMeasure() : base () { }
		public IfcSpecificHeatCapacityMeasure(double value) : base (value) { }
		public static implicit operator IfcSpecificHeatCapacityMeasure(double value) { return new IfcSpecificHeatCapacityMeasure(value);}
		public static implicit operator double(IfcSpecificHeatCapacityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpecularExponent = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcSpecularExponent : REAL, IfcSpecularHighlightSelect, Global.IfcSpecularExponent
	{
		public IfcSpecularExponent() : base () { }
		public IfcSpecularExponent(double value) : base (value) { }
		public static implicit operator IfcSpecularExponent(double value) { return new IfcSpecularExponent(value);}
		public static implicit operator double(IfcSpecularExponent value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpecularRoughness = REAL;
	/// WHERE
	/// WR1 : {0.0 <= SELF <= 1.0};
	/// END_TYPE;
	/// <summary>
	public class IfcSpecularRoughness : REAL, IfcSpecularHighlightSelect, Global.IfcSpecularRoughness
	{
		public IfcSpecularRoughness() : base () { }
		public IfcSpecularRoughness(double value) : base (value) { }
		public static implicit operator IfcSpecularRoughness(double value) { return new IfcSpecularRoughness(value);}
		public static implicit operator double(IfcSpecularRoughness value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTemperatureGradientMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcTemperatureGradientMeasure : REAL, IfcDerivedMeasureValue, Global.IfcTemperatureGradientMeasure
	{
		public IfcTemperatureGradientMeasure() : base () { }
		public IfcTemperatureGradientMeasure(double value) : base (value) { }
		public static implicit operator IfcTemperatureGradientMeasure(double value) { return new IfcTemperatureGradientMeasure(value);}
		public static implicit operator double(IfcTemperatureGradientMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcText = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcText : STRING, IfcMetricValueSelect, IfcSimpleValue, Global.IfcText
	{
		public IfcText() : base () { }
		public IfcText(string value) : base (value) { }
		public static implicit operator IfcText(string value) { return new IfcText(value);}
		public static implicit operator string(IfcText value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextAlignment = STRING;
	/// WHERE
	/// WR1 : SELF IN ['left', 'right', 'center', 'justify'];
	/// END_TYPE;
	/// <summary>
	public class IfcTextAlignment : STRING, Global.IfcTextAlignment
	{
		public IfcTextAlignment() : base () { }
		public IfcTextAlignment(string value) : base (value) { }
		public static implicit operator IfcTextAlignment(string value) { return new IfcTextAlignment(value);}
		public static implicit operator string(IfcTextAlignment value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextDecoration = STRING;
	/// WHERE
	/// WR1 : SELF IN ['none', 'underline', 'overline', 'line-through', 'blink'];
	/// END_TYPE;
	/// <summary>
	public class IfcTextDecoration : STRING, Global.IfcTextDecoration
	{
		public IfcTextDecoration() : base () { }
		public IfcTextDecoration(string value) : base (value) { }
		public static implicit operator IfcTextDecoration(string value) { return new IfcTextDecoration(value);}
		public static implicit operator string(IfcTextDecoration value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextFontName = STRING;
	/// END_TYPE;
	/// <summary>
	public class IfcTextFontName : STRING, Global.IfcTextFontName
	{
		public IfcTextFontName() : base () { }
		public IfcTextFontName(string value) : base (value) { }
		public static implicit operator IfcTextFontName(string value) { return new IfcTextFontName(value);}
		public static implicit operator string(IfcTextFontName value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextTransformation = STRING;
	/// WHERE
	/// WR1 : SELF IN ['capitalize', 'uppercase', 'lowercase', 'none'];
	/// END_TYPE;
	/// <summary>
	public class IfcTextTransformation : STRING, Global.IfcTextTransformation
	{
		public IfcTextTransformation() : base () { }
		public IfcTextTransformation(string value) : base (value) { }
		public static implicit operator IfcTextTransformation(string value) { return new IfcTextTransformation(value);}
		public static implicit operator string(IfcTextTransformation value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalAdmittanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermalAdmittanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcThermalAdmittanceMeasure
	{
		public IfcThermalAdmittanceMeasure() : base () { }
		public IfcThermalAdmittanceMeasure(double value) : base (value) { }
		public static implicit operator IfcThermalAdmittanceMeasure(double value) { return new IfcThermalAdmittanceMeasure(value);}
		public static implicit operator double(IfcThermalAdmittanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalConductivityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermalConductivityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcThermalConductivityMeasure
	{
		public IfcThermalConductivityMeasure() : base () { }
		public IfcThermalConductivityMeasure(double value) : base (value) { }
		public static implicit operator IfcThermalConductivityMeasure(double value) { return new IfcThermalConductivityMeasure(value);}
		public static implicit operator double(IfcThermalConductivityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalExpansionCoefficientMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermalExpansionCoefficientMeasure : REAL, IfcDerivedMeasureValue, Global.IfcThermalExpansionCoefficientMeasure
	{
		public IfcThermalExpansionCoefficientMeasure() : base () { }
		public IfcThermalExpansionCoefficientMeasure(double value) : base (value) { }
		public static implicit operator IfcThermalExpansionCoefficientMeasure(double value) { return new IfcThermalExpansionCoefficientMeasure(value);}
		public static implicit operator double(IfcThermalExpansionCoefficientMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalResistanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermalResistanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcThermalResistanceMeasure
	{
		public IfcThermalResistanceMeasure() : base () { }
		public IfcThermalResistanceMeasure(double value) : base (value) { }
		public static implicit operator IfcThermalResistanceMeasure(double value) { return new IfcThermalResistanceMeasure(value);}
		public static implicit operator double(IfcThermalResistanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalTransmittanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermalTransmittanceMeasure : REAL, IfcDerivedMeasureValue, Global.IfcThermalTransmittanceMeasure
	{
		public IfcThermalTransmittanceMeasure() : base () { }
		public IfcThermalTransmittanceMeasure(double value) : base (value) { }
		public static implicit operator IfcThermalTransmittanceMeasure(double value) { return new IfcThermalTransmittanceMeasure(value);}
		public static implicit operator double(IfcThermalTransmittanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermodynamicTemperatureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcThermodynamicTemperatureMeasure : REAL, IfcMeasureValue, Global.IfcThermodynamicTemperatureMeasure
	{
		public IfcThermodynamicTemperatureMeasure() : base () { }
		public IfcThermodynamicTemperatureMeasure(double value) : base (value) { }
		public static implicit operator IfcThermodynamicTemperatureMeasure(double value) { return new IfcThermodynamicTemperatureMeasure(value);}
		public static implicit operator double(IfcThermodynamicTemperatureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTimeMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcTimeMeasure : REAL, IfcMeasureValue, Global.IfcTimeMeasure
	{
		public IfcTimeMeasure() : base () { }
		public IfcTimeMeasure(double value) : base (value) { }
		public static implicit operator IfcTimeMeasure(double value) { return new IfcTimeMeasure(value);}
		public static implicit operator double(IfcTimeMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTimeStamp = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IfcTimeStamp : INTEGER, IfcDerivedMeasureValue, Global.IfcTimeStamp
	{
		public IfcTimeStamp() : base () { }
		public IfcTimeStamp(int value) : base (value) { }
		public static implicit operator IfcTimeStamp(int value) { return new IfcTimeStamp(value);}
		public static implicit operator int(IfcTimeStamp value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTorqueMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcTorqueMeasure : REAL, IfcDerivedMeasureValue, Global.IfcTorqueMeasure
	{
		public IfcTorqueMeasure() : base () { }
		public IfcTorqueMeasure(double value) : base (value) { }
		public static implicit operator IfcTorqueMeasure(double value) { return new IfcTorqueMeasure(value);}
		public static implicit operator double(IfcTorqueMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVaporPermeabilityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcVaporPermeabilityMeasure : REAL, IfcDerivedMeasureValue, Global.IfcVaporPermeabilityMeasure
	{
		public IfcVaporPermeabilityMeasure() : base () { }
		public IfcVaporPermeabilityMeasure(double value) : base (value) { }
		public static implicit operator IfcVaporPermeabilityMeasure(double value) { return new IfcVaporPermeabilityMeasure(value);}
		public static implicit operator double(IfcVaporPermeabilityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVolumeMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcVolumeMeasure : REAL, IfcMeasureValue, Global.IfcVolumeMeasure
	{
		public IfcVolumeMeasure() : base () { }
		public IfcVolumeMeasure(double value) : base (value) { }
		public static implicit operator IfcVolumeMeasure(double value) { return new IfcVolumeMeasure(value);}
		public static implicit operator double(IfcVolumeMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVolumetricFlowRateMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcVolumetricFlowRateMeasure : REAL, IfcDerivedMeasureValue, Global.IfcVolumetricFlowRateMeasure
	{
		public IfcVolumetricFlowRateMeasure() : base () { }
		public IfcVolumetricFlowRateMeasure(double value) : base (value) { }
		public static implicit operator IfcVolumetricFlowRateMeasure(double value) { return new IfcVolumetricFlowRateMeasure(value);}
		public static implicit operator double(IfcVolumetricFlowRateMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWarpingConstantMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcWarpingConstantMeasure : REAL, IfcDerivedMeasureValue, Global.IfcWarpingConstantMeasure
	{
		public IfcWarpingConstantMeasure() : base () { }
		public IfcWarpingConstantMeasure(double value) : base (value) { }
		public static implicit operator IfcWarpingConstantMeasure(double value) { return new IfcWarpingConstantMeasure(value);}
		public static implicit operator double(IfcWarpingConstantMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWarpingMomentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcWarpingMomentMeasure : REAL, IfcDerivedMeasureValue, Global.IfcWarpingMomentMeasure
	{
		public IfcWarpingMomentMeasure() : base () { }
		public IfcWarpingMomentMeasure(double value) : base (value) { }
		public static implicit operator IfcWarpingMomentMeasure(double value) { return new IfcWarpingMomentMeasure(value);}
		public static implicit operator double(IfcWarpingMomentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcYearNumber = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IfcYearNumber : INTEGER, Global.IfcYearNumber
	{
		public IfcYearNumber() : base () { }
		public IfcYearNumber(int value) : base (value) { }
		public static implicit operator IfcYearNumber(int value) { return new IfcYearNumber(value);}
		public static implicit operator int(IfcYearNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcComplexNumber = ARRAY [1:2] OF REAL;
	/// END_TYPE;
	/// <summary>
	public class IfcComplexNumber : List<REAL>, Global.IfcComplexNumber
	{
		public List<double> Value
		{
			get
			{
				List<double> values = new List<double> ();
				foreach(var value in this)
				{
					values.Add(value);
				}
				return values;
			}
		}
		public IfcComplexNumber() : base () { }
		public IfcComplexNumber(List<double> value)
		{
			foreach(var v in value)
			{
				Add(v);
			}
		}
		public static implicit operator IfcComplexNumber(List<double> value) { return new IfcComplexNumber(value);}
		public static implicit operator List<double>(IfcComplexNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCompoundPlaneAngleMeasure = LIST [3:4] OF INTEGER;
	/// WHERE
	/// WR1 : { -360 <= SELF[1] < 360 };
	/// WR2 : { -60 <= SELF[2] < 60 };
	/// WR3 : { -60 <= SELF[3] < 60 };
	/// WR4 : ((SELF[1] >= 0) AND (SELF[2] >= 0) AND (SELF[3] >= 0)) OR ((SELF[1] <= 0) AND (SELF[2] <= 0) AND (SELF[3] <= 0));
	/// END_TYPE;
	/// <summary>
	public class IfcCompoundPlaneAngleMeasure : List<INTEGER>, Global.IfcCompoundPlaneAngleMeasure
	{
		public List<int> Value
		{
			get
			{
				List<int> values = new List<int> ();
				foreach(var value in this)
				{
					values.Add(value);
				}
				return values;
			}
		}
		public IfcCompoundPlaneAngleMeasure() : base () { }
		public IfcCompoundPlaneAngleMeasure(List<int> value)
		{
			foreach(var v in value)
			{
				Add(v);
			}
		}
		public static implicit operator IfcCompoundPlaneAngleMeasure(List<int> value) { return new IfcCompoundPlaneAngleMeasure(value);}
		public static implicit operator List<int>(IfcCompoundPlaneAngleMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcActionSourceTypeEnum = ENUMERATION OF
	/// (DEAD_LOAD_G
	/// ,COMPLETION_G1
	/// ,LIVE_LOAD_Q
	/// ,SNOW_S
	/// ,WIND_W
	/// ,PRESTRESSING_P
	/// ,SETTLEMENT_U
	/// ,TEMPERATURE_T
	/// ,EARTHQUAKE_E
	/// ,FIRE
	/// ,IMPULSE
	/// ,IMPACT
	/// ,TRANSPORT
	/// ,ERECTION
	/// ,PROPPING
	/// ,SYSTEM_IMPERFECTION
	/// ,SHRINKAGE
	/// ,CREEP
	/// ,LACK_OF_FIT
	/// ,BUOYANCY
	/// ,ICE
	/// ,CURRENT
	/// ,WAVE
	/// ,RAIN
	/// ,BRAKES
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcActionSourceTypeEnum: Global.IfcActionSourceTypeEnum
	{
		public static string DEAD_LOAD_G { get { return ".DEAD_LOAD_G."; } private set { } }
		public static string COMPLETION_G1 { get { return ".COMPLETION_G1."; } private set { } }
		public static string LIVE_LOAD_Q { get { return ".LIVE_LOAD_Q."; } private set { } }
		public static string SNOW_S { get { return ".SNOW_S."; } private set { } }
		public static string WIND_W { get { return ".WIND_W."; } private set { } }
		public static string PRESTRESSING_P { get { return ".PRESTRESSING_P."; } private set { } }
		public static string SETTLEMENT_U { get { return ".SETTLEMENT_U."; } private set { } }
		public static string TEMPERATURE_T { get { return ".TEMPERATURE_T."; } private set { } }
		public static string EARTHQUAKE_E { get { return ".EARTHQUAKE_E."; } private set { } }
		public static string FIRE { get { return ".FIRE."; } private set { } }
		public static string IMPULSE { get { return ".IMPULSE."; } private set { } }
		public static string IMPACT { get { return ".IMPACT."; } private set { } }
		public static string TRANSPORT { get { return ".TRANSPORT."; } private set { } }
		public static string ERECTION { get { return ".ERECTION."; } private set { } }
		public static string PROPPING { get { return ".PROPPING."; } private set { } }
		public static string SYSTEM_IMPERFECTION { get { return ".SYSTEM_IMPERFECTION."; } private set { } }
		public static string SHRINKAGE { get { return ".SHRINKAGE."; } private set { } }
		public static string CREEP { get { return ".CREEP."; } private set { } }
		public static string LACK_OF_FIT { get { return ".LACK_OF_FIT."; } private set { } }
		public static string BUOYANCY { get { return ".BUOYANCY."; } private set { } }
		public static string ICE { get { return ".ICE."; } private set { } }
		public static string CURRENT { get { return ".CURRENT."; } private set { } }
		public static string WAVE { get { return ".WAVE."; } private set { } }
		public static string RAIN { get { return ".RAIN."; } private set { } }
		public static string BRAKES { get { return ".BRAKES."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcActionSourceTypeEnum() { Value = ".DEAD_LOAD_G.";}
		public IfcActionSourceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcActionSourceTypeEnum(string value) { return new IfcActionSourceTypeEnum(value);}
		public static implicit operator string(IfcActionSourceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcActionTypeEnum = ENUMERATION OF
	/// (PERMANENT_G
	/// ,VARIABLE_Q
	/// ,EXTRAORDINARY_A
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcActionTypeEnum: Global.IfcActionTypeEnum
	{
		public static string PERMANENT_G { get { return ".PERMANENT_G."; } private set { } }
		public static string VARIABLE_Q { get { return ".VARIABLE_Q."; } private set { } }
		public static string EXTRAORDINARY_A { get { return ".EXTRAORDINARY_A."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcActionTypeEnum() { Value = ".PERMANENT_G.";}
		public IfcActionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcActionTypeEnum(string value) { return new IfcActionTypeEnum(value);}
		public static implicit operator string(IfcActionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcActuatorTypeEnum = ENUMERATION OF
	/// (ELECTRICACTUATOR
	/// ,HANDOPERATEDACTUATOR
	/// ,HYDRAULICACTUATOR
	/// ,PNEUMATICACTUATOR
	/// ,THERMOSTATICACTUATOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcActuatorTypeEnum: Global.IfcActuatorTypeEnum
	{
		public static string ELECTRICACTUATOR { get { return ".ELECTRICACTUATOR."; } private set { } }
		public static string HANDOPERATEDACTUATOR { get { return ".HANDOPERATEDACTUATOR."; } private set { } }
		public static string HYDRAULICACTUATOR { get { return ".HYDRAULICACTUATOR."; } private set { } }
		public static string PNEUMATICACTUATOR { get { return ".PNEUMATICACTUATOR."; } private set { } }
		public static string THERMOSTATICACTUATOR { get { return ".THERMOSTATICACTUATOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcActuatorTypeEnum() { Value = ".ELECTRICACTUATOR.";}
		public IfcActuatorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcActuatorTypeEnum(string value) { return new IfcActuatorTypeEnum(value);}
		public static implicit operator string(IfcActuatorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAddressTypeEnum = ENUMERATION OF
	/// (OFFICE
	/// ,SITE
	/// ,HOME
	/// ,DISTRIBUTIONPOINT
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAddressTypeEnum: Global.IfcAddressTypeEnum
	{
		public static string OFFICE { get { return ".OFFICE."; } private set { } }
		public static string SITE { get { return ".SITE."; } private set { } }
		public static string HOME { get { return ".HOME."; } private set { } }
		public static string DISTRIBUTIONPOINT { get { return ".DISTRIBUTIONPOINT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAddressTypeEnum() { Value = ".OFFICE.";}
		public IfcAddressTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAddressTypeEnum(string value) { return new IfcAddressTypeEnum(value);}
		public static implicit operator string(IfcAddressTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAheadOrBehind = ENUMERATION OF
	/// (AHEAD
	/// ,BEHIND);
	/// END_TYPE;
	/// <summary>
	public class IfcAheadOrBehind: Global.IfcAheadOrBehind
	{
		public static string AHEAD { get { return ".AHEAD."; } private set { } }
		public static string BEHIND { get { return ".BEHIND."; } private set { } }
		public string Value {get; set;}
		public IfcAheadOrBehind() { Value = ".AHEAD.";}
		public IfcAheadOrBehind(string value) { Value = value; }
		public static implicit operator IfcAheadOrBehind(string value) { return new IfcAheadOrBehind(value);}
		public static implicit operator string(IfcAheadOrBehind value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAirTerminalBoxTypeEnum = ENUMERATION OF
	/// (CONSTANTFLOW
	/// ,VARIABLEFLOWPRESSUREDEPENDANT
	/// ,VARIABLEFLOWPRESSUREINDEPENDANT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAirTerminalBoxTypeEnum: Global.IfcAirTerminalBoxTypeEnum
	{
		public static string CONSTANTFLOW { get { return ".CONSTANTFLOW."; } private set { } }
		public static string VARIABLEFLOWPRESSUREDEPENDANT { get { return ".VARIABLEFLOWPRESSUREDEPENDANT."; } private set { } }
		public static string VARIABLEFLOWPRESSUREINDEPENDANT { get { return ".VARIABLEFLOWPRESSUREINDEPENDANT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAirTerminalBoxTypeEnum() { Value = ".CONSTANTFLOW.";}
		public IfcAirTerminalBoxTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAirTerminalBoxTypeEnum(string value) { return new IfcAirTerminalBoxTypeEnum(value);}
		public static implicit operator string(IfcAirTerminalBoxTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAirTerminalTypeEnum = ENUMERATION OF
	/// (GRILLE
	/// ,REGISTER
	/// ,DIFFUSER
	/// ,EYEBALL
	/// ,IRIS
	/// ,LINEARGRILLE
	/// ,LINEARDIFFUSER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAirTerminalTypeEnum: Global.IfcAirTerminalTypeEnum
	{
		public static string GRILLE { get { return ".GRILLE."; } private set { } }
		public static string REGISTER { get { return ".REGISTER."; } private set { } }
		public static string DIFFUSER { get { return ".DIFFUSER."; } private set { } }
		public static string EYEBALL { get { return ".EYEBALL."; } private set { } }
		public static string IRIS { get { return ".IRIS."; } private set { } }
		public static string LINEARGRILLE { get { return ".LINEARGRILLE."; } private set { } }
		public static string LINEARDIFFUSER { get { return ".LINEARDIFFUSER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAirTerminalTypeEnum() { Value = ".GRILLE.";}
		public IfcAirTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAirTerminalTypeEnum(string value) { return new IfcAirTerminalTypeEnum(value);}
		public static implicit operator string(IfcAirTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAirToAirHeatRecoveryTypeEnum = ENUMERATION OF
	/// (FIXEDPLATECOUNTERFLOWEXCHANGER
	/// ,FIXEDPLATECROSSFLOWEXCHANGER
	/// ,FIXEDPLATEPARALLELFLOWEXCHANGER
	/// ,ROTARYWHEEL
	/// ,RUNAROUNDCOILLOOP
	/// ,HEATPIPE
	/// ,TWINTOWERENTHALPYRECOVERYLOOPS
	/// ,THERMOSIPHONSEALEDTUBEHEATEXCHANGERS
	/// ,THERMOSIPHONCOILTYPEHEATEXCHANGERS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAirToAirHeatRecoveryTypeEnum: Global.IfcAirToAirHeatRecoveryTypeEnum
	{
		public static string FIXEDPLATECOUNTERFLOWEXCHANGER { get { return ".FIXEDPLATECOUNTERFLOWEXCHANGER."; } private set { } }
		public static string FIXEDPLATECROSSFLOWEXCHANGER { get { return ".FIXEDPLATECROSSFLOWEXCHANGER."; } private set { } }
		public static string FIXEDPLATEPARALLELFLOWEXCHANGER { get { return ".FIXEDPLATEPARALLELFLOWEXCHANGER."; } private set { } }
		public static string ROTARYWHEEL { get { return ".ROTARYWHEEL."; } private set { } }
		public static string RUNAROUNDCOILLOOP { get { return ".RUNAROUNDCOILLOOP."; } private set { } }
		public static string HEATPIPE { get { return ".HEATPIPE."; } private set { } }
		public static string TWINTOWERENTHALPYRECOVERYLOOPS { get { return ".TWINTOWERENTHALPYRECOVERYLOOPS."; } private set { } }
		public static string THERMOSIPHONSEALEDTUBEHEATEXCHANGERS { get { return ".THERMOSIPHONSEALEDTUBEHEATEXCHANGERS."; } private set { } }
		public static string THERMOSIPHONCOILTYPEHEATEXCHANGERS { get { return ".THERMOSIPHONCOILTYPEHEATEXCHANGERS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAirToAirHeatRecoveryTypeEnum() { Value = ".FIXEDPLATECOUNTERFLOWEXCHANGER.";}
		public IfcAirToAirHeatRecoveryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAirToAirHeatRecoveryTypeEnum(string value) { return new IfcAirToAirHeatRecoveryTypeEnum(value);}
		public static implicit operator string(IfcAirToAirHeatRecoveryTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAlarmTypeEnum = ENUMERATION OF
	/// (BELL
	/// ,BREAKGLASSBUTTON
	/// ,LIGHT
	/// ,MANUALPULLBOX
	/// ,SIREN
	/// ,WHISTLE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAlarmTypeEnum: Global.IfcAlarmTypeEnum
	{
		public static string BELL { get { return ".BELL."; } private set { } }
		public static string BREAKGLASSBUTTON { get { return ".BREAKGLASSBUTTON."; } private set { } }
		public static string LIGHT { get { return ".LIGHT."; } private set { } }
		public static string MANUALPULLBOX { get { return ".MANUALPULLBOX."; } private set { } }
		public static string SIREN { get { return ".SIREN."; } private set { } }
		public static string WHISTLE { get { return ".WHISTLE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAlarmTypeEnum() { Value = ".BELL.";}
		public IfcAlarmTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAlarmTypeEnum(string value) { return new IfcAlarmTypeEnum(value);}
		public static implicit operator string(IfcAlarmTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAnalysisModelTypeEnum = ENUMERATION OF
	/// (IN_PLANE_LOADING_2D
	/// ,OUT_PLANE_LOADING_2D
	/// ,LOADING_3D
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAnalysisModelTypeEnum: Global.IfcAnalysisModelTypeEnum
	{
		public static string IN_PLANE_LOADING_2D { get { return ".IN_PLANE_LOADING_2D."; } private set { } }
		public static string OUT_PLANE_LOADING_2D { get { return ".OUT_PLANE_LOADING_2D."; } private set { } }
		public static string LOADING_3D { get { return ".LOADING_3D."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAnalysisModelTypeEnum() { Value = ".IN_PLANE_LOADING_2D.";}
		public IfcAnalysisModelTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAnalysisModelTypeEnum(string value) { return new IfcAnalysisModelTypeEnum(value);}
		public static implicit operator string(IfcAnalysisModelTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAnalysisTheoryTypeEnum = ENUMERATION OF
	/// (FIRST_ORDER_THEORY
	/// ,SECOND_ORDER_THEORY
	/// ,THIRD_ORDER_THEORY
	/// ,FULL_NONLINEAR_THEORY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAnalysisTheoryTypeEnum: Global.IfcAnalysisTheoryTypeEnum
	{
		public static string FIRST_ORDER_THEORY { get { return ".FIRST_ORDER_THEORY."; } private set { } }
		public static string SECOND_ORDER_THEORY { get { return ".SECOND_ORDER_THEORY."; } private set { } }
		public static string THIRD_ORDER_THEORY { get { return ".THIRD_ORDER_THEORY."; } private set { } }
		public static string FULL_NONLINEAR_THEORY { get { return ".FULL_NONLINEAR_THEORY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAnalysisTheoryTypeEnum() { Value = ".FIRST_ORDER_THEORY.";}
		public IfcAnalysisTheoryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcAnalysisTheoryTypeEnum(string value) { return new IfcAnalysisTheoryTypeEnum(value);}
		public static implicit operator string(IfcAnalysisTheoryTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcArithmeticOperatorEnum = ENUMERATION OF
	/// (ADD
	/// ,DIVIDE
	/// ,MULTIPLY
	/// ,SUBTRACT);
	/// END_TYPE;
	/// <summary>
	public class IfcArithmeticOperatorEnum: Global.IfcArithmeticOperatorEnum
	{
		public static string ADD { get { return ".ADD."; } private set { } }
		public static string DIVIDE { get { return ".DIVIDE."; } private set { } }
		public static string MULTIPLY { get { return ".MULTIPLY."; } private set { } }
		public static string SUBTRACT { get { return ".SUBTRACT."; } private set { } }
		public string Value {get; set;}
		public IfcArithmeticOperatorEnum() { Value = ".ADD.";}
		public IfcArithmeticOperatorEnum(string value) { Value = value; }
		public static implicit operator IfcArithmeticOperatorEnum(string value) { return new IfcArithmeticOperatorEnum(value);}
		public static implicit operator string(IfcArithmeticOperatorEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAssemblyPlaceEnum = ENUMERATION OF
	/// (SITE
	/// ,FACTORY
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcAssemblyPlaceEnum: Global.IfcAssemblyPlaceEnum
	{
		public static string SITE { get { return ".SITE."; } private set { } }
		public static string FACTORY { get { return ".FACTORY."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcAssemblyPlaceEnum() { Value = ".SITE.";}
		public IfcAssemblyPlaceEnum(string value) { Value = value; }
		public static implicit operator IfcAssemblyPlaceEnum(string value) { return new IfcAssemblyPlaceEnum(value);}
		public static implicit operator string(IfcAssemblyPlaceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBSplineCurveForm = ENUMERATION OF
	/// (POLYLINE_FORM
	/// ,CIRCULAR_ARC
	/// ,ELLIPTIC_ARC
	/// ,PARABOLIC_ARC
	/// ,HYPERBOLIC_ARC
	/// ,UNSPECIFIED);
	/// END_TYPE;
	/// <summary>
	public class IfcBSplineCurveForm: Global.IfcBSplineCurveForm
	{
		public static string POLYLINE_FORM { get { return ".POLYLINE_FORM."; } private set { } }
		public static string CIRCULAR_ARC { get { return ".CIRCULAR_ARC."; } private set { } }
		public static string ELLIPTIC_ARC { get { return ".ELLIPTIC_ARC."; } private set { } }
		public static string PARABOLIC_ARC { get { return ".PARABOLIC_ARC."; } private set { } }
		public static string HYPERBOLIC_ARC { get { return ".HYPERBOLIC_ARC."; } private set { } }
		public static string UNSPECIFIED { get { return ".UNSPECIFIED."; } private set { } }
		public string Value {get; set;}
		public IfcBSplineCurveForm() { Value = ".POLYLINE_FORM.";}
		public IfcBSplineCurveForm(string value) { Value = value; }
		public static implicit operator IfcBSplineCurveForm(string value) { return new IfcBSplineCurveForm(value);}
		public static implicit operator string(IfcBSplineCurveForm value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBeamTypeEnum = ENUMERATION OF
	/// (BEAM
	/// ,JOIST
	/// ,LINTEL
	/// ,T_BEAM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcBeamTypeEnum: Global.IfcBeamTypeEnum
	{
		public static string BEAM { get { return ".BEAM."; } private set { } }
		public static string JOIST { get { return ".JOIST."; } private set { } }
		public static string LINTEL { get { return ".LINTEL."; } private set { } }
		public static string T_BEAM { get { return ".T_BEAM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcBeamTypeEnum() { Value = ".BEAM.";}
		public IfcBeamTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBeamTypeEnum(string value) { return new IfcBeamTypeEnum(value);}
		public static implicit operator string(IfcBeamTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBenchmarkEnum = ENUMERATION OF
	/// (GREATERTHAN
	/// ,GREATERTHANOREQUALTO
	/// ,LESSTHAN
	/// ,LESSTHANOREQUALTO
	/// ,EQUALTO
	/// ,NOTEQUALTO);
	/// END_TYPE;
	/// <summary>
	public class IfcBenchmarkEnum: Global.IfcBenchmarkEnum
	{
		public static string GREATERTHAN { get { return ".GREATERTHAN."; } private set { } }
		public static string GREATERTHANOREQUALTO { get { return ".GREATERTHANOREQUALTO."; } private set { } }
		public static string LESSTHAN { get { return ".LESSTHAN."; } private set { } }
		public static string LESSTHANOREQUALTO { get { return ".LESSTHANOREQUALTO."; } private set { } }
		public static string EQUALTO { get { return ".EQUALTO."; } private set { } }
		public static string NOTEQUALTO { get { return ".NOTEQUALTO."; } private set { } }
		public string Value {get; set;}
		public IfcBenchmarkEnum() { Value = ".GREATERTHAN.";}
		public IfcBenchmarkEnum(string value) { Value = value; }
		public static implicit operator IfcBenchmarkEnum(string value) { return new IfcBenchmarkEnum(value);}
		public static implicit operator string(IfcBenchmarkEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBoilerTypeEnum = ENUMERATION OF
	/// (WATER
	/// ,STEAM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcBoilerTypeEnum: Global.IfcBoilerTypeEnum
	{
		public static string WATER { get { return ".WATER."; } private set { } }
		public static string STEAM { get { return ".STEAM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcBoilerTypeEnum() { Value = ".WATER.";}
		public IfcBoilerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBoilerTypeEnum(string value) { return new IfcBoilerTypeEnum(value);}
		public static implicit operator string(IfcBoilerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBooleanOperator = ENUMERATION OF
	/// (UNION
	/// ,INTERSECTION
	/// ,DIFFERENCE);
	/// END_TYPE;
	/// <summary>
	public class IfcBooleanOperator: Global.IfcBooleanOperator
	{
		public static string UNION { get { return ".UNION."; } private set { } }
		public static string INTERSECTION { get { return ".INTERSECTION."; } private set { } }
		public static string DIFFERENCE { get { return ".DIFFERENCE."; } private set { } }
		public string Value {get; set;}
		public IfcBooleanOperator() { Value = ".UNION.";}
		public IfcBooleanOperator(string value) { Value = value; }
		public static implicit operator IfcBooleanOperator(string value) { return new IfcBooleanOperator(value);}
		public static implicit operator string(IfcBooleanOperator value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBuildingElementProxyTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcBuildingElementProxyTypeEnum: Global.IfcBuildingElementProxyTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcBuildingElementProxyTypeEnum() { Value = ".USERDEFINED.";}
		public IfcBuildingElementProxyTypeEnum(string value) { Value = value; }
		public static implicit operator IfcBuildingElementProxyTypeEnum(string value) { return new IfcBuildingElementProxyTypeEnum(value);}
		public static implicit operator string(IfcBuildingElementProxyTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCableCarrierFittingTypeEnum = ENUMERATION OF
	/// (BEND
	/// ,CROSS
	/// ,REDUCER
	/// ,TEE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCableCarrierFittingTypeEnum: Global.IfcCableCarrierFittingTypeEnum
	{
		public static string BEND { get { return ".BEND."; } private set { } }
		public static string CROSS { get { return ".CROSS."; } private set { } }
		public static string REDUCER { get { return ".REDUCER."; } private set { } }
		public static string TEE { get { return ".TEE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCableCarrierFittingTypeEnum() { Value = ".BEND.";}
		public IfcCableCarrierFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCableCarrierFittingTypeEnum(string value) { return new IfcCableCarrierFittingTypeEnum(value);}
		public static implicit operator string(IfcCableCarrierFittingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCableCarrierSegmentTypeEnum = ENUMERATION OF
	/// (CABLELADDERSEGMENT
	/// ,CABLETRAYSEGMENT
	/// ,CABLETRUNKINGSEGMENT
	/// ,CONDUITSEGMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCableCarrierSegmentTypeEnum: Global.IfcCableCarrierSegmentTypeEnum
	{
		public static string CABLELADDERSEGMENT { get { return ".CABLELADDERSEGMENT."; } private set { } }
		public static string CABLETRAYSEGMENT { get { return ".CABLETRAYSEGMENT."; } private set { } }
		public static string CABLETRUNKINGSEGMENT { get { return ".CABLETRUNKINGSEGMENT."; } private set { } }
		public static string CONDUITSEGMENT { get { return ".CONDUITSEGMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCableCarrierSegmentTypeEnum() { Value = ".CABLELADDERSEGMENT.";}
		public IfcCableCarrierSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCableCarrierSegmentTypeEnum(string value) { return new IfcCableCarrierSegmentTypeEnum(value);}
		public static implicit operator string(IfcCableCarrierSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCableSegmentTypeEnum = ENUMERATION OF
	/// (CABLESEGMENT
	/// ,CONDUCTORSEGMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCableSegmentTypeEnum: Global.IfcCableSegmentTypeEnum
	{
		public static string CABLESEGMENT { get { return ".CABLESEGMENT."; } private set { } }
		public static string CONDUCTORSEGMENT { get { return ".CONDUCTORSEGMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCableSegmentTypeEnum() { Value = ".CABLESEGMENT.";}
		public IfcCableSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCableSegmentTypeEnum(string value) { return new IfcCableSegmentTypeEnum(value);}
		public static implicit operator string(IfcCableSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcChangeActionEnum = ENUMERATION OF
	/// (NOCHANGE
	/// ,MODIFIED
	/// ,ADDED
	/// ,DELETED
	/// ,MODIFIEDADDED
	/// ,MODIFIEDDELETED);
	/// END_TYPE;
	/// <summary>
	public class IfcChangeActionEnum: Global.IfcChangeActionEnum
	{
		public static string NOCHANGE { get { return ".NOCHANGE."; } private set { } }
		public static string MODIFIED { get { return ".MODIFIED."; } private set { } }
		public static string ADDED { get { return ".ADDED."; } private set { } }
		public static string DELETED { get { return ".DELETED."; } private set { } }
		public static string MODIFIEDADDED { get { return ".MODIFIEDADDED."; } private set { } }
		public static string MODIFIEDDELETED { get { return ".MODIFIEDDELETED."; } private set { } }
		public string Value {get; set;}
		public IfcChangeActionEnum() { Value = ".NOCHANGE.";}
		public IfcChangeActionEnum(string value) { Value = value; }
		public static implicit operator IfcChangeActionEnum(string value) { return new IfcChangeActionEnum(value);}
		public static implicit operator string(IfcChangeActionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcChillerTypeEnum = ENUMERATION OF
	/// (AIRCOOLED
	/// ,WATERCOOLED
	/// ,HEATRECOVERY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcChillerTypeEnum: Global.IfcChillerTypeEnum
	{
		public static string AIRCOOLED { get { return ".AIRCOOLED."; } private set { } }
		public static string WATERCOOLED { get { return ".WATERCOOLED."; } private set { } }
		public static string HEATRECOVERY { get { return ".HEATRECOVERY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcChillerTypeEnum() { Value = ".AIRCOOLED.";}
		public IfcChillerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcChillerTypeEnum(string value) { return new IfcChillerTypeEnum(value);}
		public static implicit operator string(IfcChillerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCoilTypeEnum = ENUMERATION OF
	/// (DXCOOLINGCOIL
	/// ,WATERCOOLINGCOIL
	/// ,STEAMHEATINGCOIL
	/// ,WATERHEATINGCOIL
	/// ,ELECTRICHEATINGCOIL
	/// ,GASHEATINGCOIL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCoilTypeEnum: Global.IfcCoilTypeEnum
	{
		public static string DXCOOLINGCOIL { get { return ".DXCOOLINGCOIL."; } private set { } }
		public static string WATERCOOLINGCOIL { get { return ".WATERCOOLINGCOIL."; } private set { } }
		public static string STEAMHEATINGCOIL { get { return ".STEAMHEATINGCOIL."; } private set { } }
		public static string WATERHEATINGCOIL { get { return ".WATERHEATINGCOIL."; } private set { } }
		public static string ELECTRICHEATINGCOIL { get { return ".ELECTRICHEATINGCOIL."; } private set { } }
		public static string GASHEATINGCOIL { get { return ".GASHEATINGCOIL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCoilTypeEnum() { Value = ".DXCOOLINGCOIL.";}
		public IfcCoilTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCoilTypeEnum(string value) { return new IfcCoilTypeEnum(value);}
		public static implicit operator string(IfcCoilTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcColumnTypeEnum = ENUMERATION OF
	/// (COLUMN
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcColumnTypeEnum: Global.IfcColumnTypeEnum
	{
		public static string COLUMN { get { return ".COLUMN."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcColumnTypeEnum() { Value = ".COLUMN.";}
		public IfcColumnTypeEnum(string value) { Value = value; }
		public static implicit operator IfcColumnTypeEnum(string value) { return new IfcColumnTypeEnum(value);}
		public static implicit operator string(IfcColumnTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCompressorTypeEnum = ENUMERATION OF
	/// (DYNAMIC
	/// ,RECIPROCATING
	/// ,ROTARY
	/// ,SCROLL
	/// ,TROCHOIDAL
	/// ,SINGLESTAGE
	/// ,BOOSTER
	/// ,OPENTYPE
	/// ,HERMETIC
	/// ,SEMIHERMETIC
	/// ,WELDEDSHELLHERMETIC
	/// ,ROLLINGPISTON
	/// ,ROTARYVANE
	/// ,SINGLESCREW
	/// ,TWINSCREW
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCompressorTypeEnum: Global.IfcCompressorTypeEnum
	{
		public static string DYNAMIC { get { return ".DYNAMIC."; } private set { } }
		public static string RECIPROCATING { get { return ".RECIPROCATING."; } private set { } }
		public static string ROTARY { get { return ".ROTARY."; } private set { } }
		public static string SCROLL { get { return ".SCROLL."; } private set { } }
		public static string TROCHOIDAL { get { return ".TROCHOIDAL."; } private set { } }
		public static string SINGLESTAGE { get { return ".SINGLESTAGE."; } private set { } }
		public static string BOOSTER { get { return ".BOOSTER."; } private set { } }
		public static string OPENTYPE { get { return ".OPENTYPE."; } private set { } }
		public static string HERMETIC { get { return ".HERMETIC."; } private set { } }
		public static string SEMIHERMETIC { get { return ".SEMIHERMETIC."; } private set { } }
		public static string WELDEDSHELLHERMETIC { get { return ".WELDEDSHELLHERMETIC."; } private set { } }
		public static string ROLLINGPISTON { get { return ".ROLLINGPISTON."; } private set { } }
		public static string ROTARYVANE { get { return ".ROTARYVANE."; } private set { } }
		public static string SINGLESCREW { get { return ".SINGLESCREW."; } private set { } }
		public static string TWINSCREW { get { return ".TWINSCREW."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCompressorTypeEnum() { Value = ".DYNAMIC.";}
		public IfcCompressorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCompressorTypeEnum(string value) { return new IfcCompressorTypeEnum(value);}
		public static implicit operator string(IfcCompressorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCondenserTypeEnum = ENUMERATION OF
	/// (WATERCOOLEDSHELLTUBE
	/// ,WATERCOOLEDSHELLCOIL
	/// ,WATERCOOLEDTUBEINTUBE
	/// ,WATERCOOLEDBRAZEDPLATE
	/// ,AIRCOOLED
	/// ,EVAPORATIVECOOLED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCondenserTypeEnum: Global.IfcCondenserTypeEnum
	{
		public static string WATERCOOLEDSHELLTUBE { get { return ".WATERCOOLEDSHELLTUBE."; } private set { } }
		public static string WATERCOOLEDSHELLCOIL { get { return ".WATERCOOLEDSHELLCOIL."; } private set { } }
		public static string WATERCOOLEDTUBEINTUBE { get { return ".WATERCOOLEDTUBEINTUBE."; } private set { } }
		public static string WATERCOOLEDBRAZEDPLATE { get { return ".WATERCOOLEDBRAZEDPLATE."; } private set { } }
		public static string AIRCOOLED { get { return ".AIRCOOLED."; } private set { } }
		public static string EVAPORATIVECOOLED { get { return ".EVAPORATIVECOOLED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCondenserTypeEnum() { Value = ".WATERCOOLEDSHELLTUBE.";}
		public IfcCondenserTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCondenserTypeEnum(string value) { return new IfcCondenserTypeEnum(value);}
		public static implicit operator string(IfcCondenserTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcConnectionTypeEnum = ENUMERATION OF
	/// (ATPATH
	/// ,ATSTART
	/// ,ATEND
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcConnectionTypeEnum: Global.IfcConnectionTypeEnum
	{
		public static string ATPATH { get { return ".ATPATH."; } private set { } }
		public static string ATSTART { get { return ".ATSTART."; } private set { } }
		public static string ATEND { get { return ".ATEND."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcConnectionTypeEnum() { Value = ".ATPATH.";}
		public IfcConnectionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcConnectionTypeEnum(string value) { return new IfcConnectionTypeEnum(value);}
		public static implicit operator string(IfcConnectionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcConstraintEnum = ENUMERATION OF
	/// (HARD
	/// ,SOFT
	/// ,ADVISORY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcConstraintEnum: Global.IfcConstraintEnum
	{
		public static string HARD { get { return ".HARD."; } private set { } }
		public static string SOFT { get { return ".SOFT."; } private set { } }
		public static string ADVISORY { get { return ".ADVISORY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcConstraintEnum() { Value = ".HARD.";}
		public IfcConstraintEnum(string value) { Value = value; }
		public static implicit operator IfcConstraintEnum(string value) { return new IfcConstraintEnum(value);}
		public static implicit operator string(IfcConstraintEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcControllerTypeEnum = ENUMERATION OF
	/// (FLOATING
	/// ,PROPORTIONAL
	/// ,PROPORTIONALINTEGRAL
	/// ,PROPORTIONALINTEGRALDERIVATIVE
	/// ,TIMEDTWOPOSITION
	/// ,TWOPOSITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcControllerTypeEnum: Global.IfcControllerTypeEnum
	{
		public static string FLOATING { get { return ".FLOATING."; } private set { } }
		public static string PROPORTIONAL { get { return ".PROPORTIONAL."; } private set { } }
		public static string PROPORTIONALINTEGRAL { get { return ".PROPORTIONALINTEGRAL."; } private set { } }
		public static string PROPORTIONALINTEGRALDERIVATIVE { get { return ".PROPORTIONALINTEGRALDERIVATIVE."; } private set { } }
		public static string TIMEDTWOPOSITION { get { return ".TIMEDTWOPOSITION."; } private set { } }
		public static string TWOPOSITION { get { return ".TWOPOSITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcControllerTypeEnum() { Value = ".FLOATING.";}
		public IfcControllerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcControllerTypeEnum(string value) { return new IfcControllerTypeEnum(value);}
		public static implicit operator string(IfcControllerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCooledBeamTypeEnum = ENUMERATION OF
	/// (ACTIVE
	/// ,PASSIVE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCooledBeamTypeEnum: Global.IfcCooledBeamTypeEnum
	{
		public static string ACTIVE { get { return ".ACTIVE."; } private set { } }
		public static string PASSIVE { get { return ".PASSIVE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCooledBeamTypeEnum() { Value = ".ACTIVE.";}
		public IfcCooledBeamTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCooledBeamTypeEnum(string value) { return new IfcCooledBeamTypeEnum(value);}
		public static implicit operator string(IfcCooledBeamTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCoolingTowerTypeEnum = ENUMERATION OF
	/// (NATURALDRAFT
	/// ,MECHANICALINDUCEDDRAFT
	/// ,MECHANICALFORCEDDRAFT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCoolingTowerTypeEnum: Global.IfcCoolingTowerTypeEnum
	{
		public static string NATURALDRAFT { get { return ".NATURALDRAFT."; } private set { } }
		public static string MECHANICALINDUCEDDRAFT { get { return ".MECHANICALINDUCEDDRAFT."; } private set { } }
		public static string MECHANICALFORCEDDRAFT { get { return ".MECHANICALFORCEDDRAFT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCoolingTowerTypeEnum() { Value = ".NATURALDRAFT.";}
		public IfcCoolingTowerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCoolingTowerTypeEnum(string value) { return new IfcCoolingTowerTypeEnum(value);}
		public static implicit operator string(IfcCoolingTowerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCostScheduleTypeEnum = ENUMERATION OF
	/// (BUDGET
	/// ,COSTPLAN
	/// ,ESTIMATE
	/// ,TENDER
	/// ,PRICEDBILLOFQUANTITIES
	/// ,UNPRICEDBILLOFQUANTITIES
	/// ,SCHEDULEOFRATES
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCostScheduleTypeEnum: Global.IfcCostScheduleTypeEnum
	{
		public static string BUDGET { get { return ".BUDGET."; } private set { } }
		public static string COSTPLAN { get { return ".COSTPLAN."; } private set { } }
		public static string ESTIMATE { get { return ".ESTIMATE."; } private set { } }
		public static string TENDER { get { return ".TENDER."; } private set { } }
		public static string PRICEDBILLOFQUANTITIES { get { return ".PRICEDBILLOFQUANTITIES."; } private set { } }
		public static string UNPRICEDBILLOFQUANTITIES { get { return ".UNPRICEDBILLOFQUANTITIES."; } private set { } }
		public static string SCHEDULEOFRATES { get { return ".SCHEDULEOFRATES."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCostScheduleTypeEnum() { Value = ".BUDGET.";}
		public IfcCostScheduleTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCostScheduleTypeEnum(string value) { return new IfcCostScheduleTypeEnum(value);}
		public static implicit operator string(IfcCostScheduleTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCoveringTypeEnum = ENUMERATION OF
	/// (CEILING
	/// ,FLOORING
	/// ,CLADDING
	/// ,ROOFING
	/// ,INSULATION
	/// ,MEMBRANE
	/// ,SLEEVING
	/// ,WRAPPING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCoveringTypeEnum: Global.IfcCoveringTypeEnum
	{
		public static string CEILING { get { return ".CEILING."; } private set { } }
		public static string FLOORING { get { return ".FLOORING."; } private set { } }
		public static string CLADDING { get { return ".CLADDING."; } private set { } }
		public static string ROOFING { get { return ".ROOFING."; } private set { } }
		public static string INSULATION { get { return ".INSULATION."; } private set { } }
		public static string MEMBRANE { get { return ".MEMBRANE."; } private set { } }
		public static string SLEEVING { get { return ".SLEEVING."; } private set { } }
		public static string WRAPPING { get { return ".WRAPPING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCoveringTypeEnum() { Value = ".CEILING.";}
		public IfcCoveringTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCoveringTypeEnum(string value) { return new IfcCoveringTypeEnum(value);}
		public static implicit operator string(IfcCoveringTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCurrencyEnum = ENUMERATION OF
	/// (AED
	/// ,AES
	/// ,ATS
	/// ,AUD
	/// ,BBD
	/// ,BEG
	/// ,BGL
	/// ,BHD
	/// ,BMD
	/// ,BND
	/// ,BRL
	/// ,BSD
	/// ,BWP
	/// ,BZD
	/// ,CAD
	/// ,CBD
	/// ,CHF
	/// ,CLP
	/// ,CNY
	/// ,CYS
	/// ,CZK
	/// ,DDP
	/// ,DEM
	/// ,DKK
	/// ,EGL
	/// ,EST
	/// ,EUR
	/// ,FAK
	/// ,FIM
	/// ,FJD
	/// ,FKP
	/// ,FRF
	/// ,GBP
	/// ,GIP
	/// ,GMD
	/// ,GRX
	/// ,HKD
	/// ,HUF
	/// ,ICK
	/// ,IDR
	/// ,ILS
	/// ,INR
	/// ,IRP
	/// ,ITL
	/// ,JMD
	/// ,JOD
	/// ,JPY
	/// ,KES
	/// ,KRW
	/// ,KWD
	/// ,KYD
	/// ,LKR
	/// ,LUF
	/// ,MTL
	/// ,MUR
	/// ,MXN
	/// ,MYR
	/// ,NLG
	/// ,NZD
	/// ,OMR
	/// ,PGK
	/// ,PHP
	/// ,PKR
	/// ,PLN
	/// ,PTN
	/// ,QAR
	/// ,RUR
	/// ,SAR
	/// ,SCR
	/// ,SEK
	/// ,SGD
	/// ,SKP
	/// ,THB
	/// ,TRL
	/// ,TTD
	/// ,TWD
	/// ,USD
	/// ,VEB
	/// ,VND
	/// ,XEU
	/// ,ZAR
	/// ,ZWD
	/// ,NOK);
	/// END_TYPE;
	/// <summary>
	public class IfcCurrencyEnum: Global.IfcCurrencyEnum
	{
		public static string AED { get { return ".AED."; } private set { } }
		public static string AES { get { return ".AES."; } private set { } }
		public static string ATS { get { return ".ATS."; } private set { } }
		public static string AUD { get { return ".AUD."; } private set { } }
		public static string BBD { get { return ".BBD."; } private set { } }
		public static string BEG { get { return ".BEG."; } private set { } }
		public static string BGL { get { return ".BGL."; } private set { } }
		public static string BHD { get { return ".BHD."; } private set { } }
		public static string BMD { get { return ".BMD."; } private set { } }
		public static string BND { get { return ".BND."; } private set { } }
		public static string BRL { get { return ".BRL."; } private set { } }
		public static string BSD { get { return ".BSD."; } private set { } }
		public static string BWP { get { return ".BWP."; } private set { } }
		public static string BZD { get { return ".BZD."; } private set { } }
		public static string CAD { get { return ".CAD."; } private set { } }
		public static string CBD { get { return ".CBD."; } private set { } }
		public static string CHF { get { return ".CHF."; } private set { } }
		public static string CLP { get { return ".CLP."; } private set { } }
		public static string CNY { get { return ".CNY."; } private set { } }
		public static string CYS { get { return ".CYS."; } private set { } }
		public static string CZK { get { return ".CZK."; } private set { } }
		public static string DDP { get { return ".DDP."; } private set { } }
		public static string DEM { get { return ".DEM."; } private set { } }
		public static string DKK { get { return ".DKK."; } private set { } }
		public static string EGL { get { return ".EGL."; } private set { } }
		public static string EST { get { return ".EST."; } private set { } }
		public static string EUR { get { return ".EUR."; } private set { } }
		public static string FAK { get { return ".FAK."; } private set { } }
		public static string FIM { get { return ".FIM."; } private set { } }
		public static string FJD { get { return ".FJD."; } private set { } }
		public static string FKP { get { return ".FKP."; } private set { } }
		public static string FRF { get { return ".FRF."; } private set { } }
		public static string GBP { get { return ".GBP."; } private set { } }
		public static string GIP { get { return ".GIP."; } private set { } }
		public static string GMD { get { return ".GMD."; } private set { } }
		public static string GRX { get { return ".GRX."; } private set { } }
		public static string HKD { get { return ".HKD."; } private set { } }
		public static string HUF { get { return ".HUF."; } private set { } }
		public static string ICK { get { return ".ICK."; } private set { } }
		public static string IDR { get { return ".IDR."; } private set { } }
		public static string ILS { get { return ".ILS."; } private set { } }
		public static string INR { get { return ".INR."; } private set { } }
		public static string IRP { get { return ".IRP."; } private set { } }
		public static string ITL { get { return ".ITL."; } private set { } }
		public static string JMD { get { return ".JMD."; } private set { } }
		public static string JOD { get { return ".JOD."; } private set { } }
		public static string JPY { get { return ".JPY."; } private set { } }
		public static string KES { get { return ".KES."; } private set { } }
		public static string KRW { get { return ".KRW."; } private set { } }
		public static string KWD { get { return ".KWD."; } private set { } }
		public static string KYD { get { return ".KYD."; } private set { } }
		public static string LKR { get { return ".LKR."; } private set { } }
		public static string LUF { get { return ".LUF."; } private set { } }
		public static string MTL { get { return ".MTL."; } private set { } }
		public static string MUR { get { return ".MUR."; } private set { } }
		public static string MXN { get { return ".MXN."; } private set { } }
		public static string MYR { get { return ".MYR."; } private set { } }
		public static string NLG { get { return ".NLG."; } private set { } }
		public static string NZD { get { return ".NZD."; } private set { } }
		public static string OMR { get { return ".OMR."; } private set { } }
		public static string PGK { get { return ".PGK."; } private set { } }
		public static string PHP { get { return ".PHP."; } private set { } }
		public static string PKR { get { return ".PKR."; } private set { } }
		public static string PLN { get { return ".PLN."; } private set { } }
		public static string PTN { get { return ".PTN."; } private set { } }
		public static string QAR { get { return ".QAR."; } private set { } }
		public static string RUR { get { return ".RUR."; } private set { } }
		public static string SAR { get { return ".SAR."; } private set { } }
		public static string SCR { get { return ".SCR."; } private set { } }
		public static string SEK { get { return ".SEK."; } private set { } }
		public static string SGD { get { return ".SGD."; } private set { } }
		public static string SKP { get { return ".SKP."; } private set { } }
		public static string THB { get { return ".THB."; } private set { } }
		public static string TRL { get { return ".TRL."; } private set { } }
		public static string TTD { get { return ".TTD."; } private set { } }
		public static string TWD { get { return ".TWD."; } private set { } }
		public static string USD { get { return ".USD."; } private set { } }
		public static string VEB { get { return ".VEB."; } private set { } }
		public static string VND { get { return ".VND."; } private set { } }
		public static string XEU { get { return ".XEU."; } private set { } }
		public static string ZAR { get { return ".ZAR."; } private set { } }
		public static string ZWD { get { return ".ZWD."; } private set { } }
		public static string NOK { get { return ".NOK."; } private set { } }
		public string Value {get; set;}
		public IfcCurrencyEnum() { Value = ".AED.";}
		public IfcCurrencyEnum(string value) { Value = value; }
		public static implicit operator IfcCurrencyEnum(string value) { return new IfcCurrencyEnum(value);}
		public static implicit operator string(IfcCurrencyEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCurtainWallTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcCurtainWallTypeEnum: Global.IfcCurtainWallTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcCurtainWallTypeEnum() { Value = ".USERDEFINED.";}
		public IfcCurtainWallTypeEnum(string value) { Value = value; }
		public static implicit operator IfcCurtainWallTypeEnum(string value) { return new IfcCurtainWallTypeEnum(value);}
		public static implicit operator string(IfcCurtainWallTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDamperTypeEnum = ENUMERATION OF
	/// (CONTROLDAMPER
	/// ,FIREDAMPER
	/// ,SMOKEDAMPER
	/// ,FIRESMOKEDAMPER
	/// ,BACKDRAFTDAMPER
	/// ,RELIEFDAMPER
	/// ,BLASTDAMPER
	/// ,GRAVITYDAMPER
	/// ,GRAVITYRELIEFDAMPER
	/// ,BALANCINGDAMPER
	/// ,FUMEHOODEXHAUST
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDamperTypeEnum: Global.IfcDamperTypeEnum
	{
		public static string CONTROLDAMPER { get { return ".CONTROLDAMPER."; } private set { } }
		public static string FIREDAMPER { get { return ".FIREDAMPER."; } private set { } }
		public static string SMOKEDAMPER { get { return ".SMOKEDAMPER."; } private set { } }
		public static string FIRESMOKEDAMPER { get { return ".FIRESMOKEDAMPER."; } private set { } }
		public static string BACKDRAFTDAMPER { get { return ".BACKDRAFTDAMPER."; } private set { } }
		public static string RELIEFDAMPER { get { return ".RELIEFDAMPER."; } private set { } }
		public static string BLASTDAMPER { get { return ".BLASTDAMPER."; } private set { } }
		public static string GRAVITYDAMPER { get { return ".GRAVITYDAMPER."; } private set { } }
		public static string GRAVITYRELIEFDAMPER { get { return ".GRAVITYRELIEFDAMPER."; } private set { } }
		public static string BALANCINGDAMPER { get { return ".BALANCINGDAMPER."; } private set { } }
		public static string FUMEHOODEXHAUST { get { return ".FUMEHOODEXHAUST."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDamperTypeEnum() { Value = ".CONTROLDAMPER.";}
		public IfcDamperTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDamperTypeEnum(string value) { return new IfcDamperTypeEnum(value);}
		public static implicit operator string(IfcDamperTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDataOriginEnum = ENUMERATION OF
	/// (MEASURED
	/// ,PREDICTED
	/// ,SIMULATED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDataOriginEnum: Global.IfcDataOriginEnum
	{
		public static string MEASURED { get { return ".MEASURED."; } private set { } }
		public static string PREDICTED { get { return ".PREDICTED."; } private set { } }
		public static string SIMULATED { get { return ".SIMULATED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDataOriginEnum() { Value = ".MEASURED.";}
		public IfcDataOriginEnum(string value) { Value = value; }
		public static implicit operator IfcDataOriginEnum(string value) { return new IfcDataOriginEnum(value);}
		public static implicit operator string(IfcDataOriginEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDerivedUnitEnum = ENUMERATION OF
	/// (ANGULARVELOCITYUNIT
	/// ,COMPOUNDPLANEANGLEUNIT
	/// ,DYNAMICVISCOSITYUNIT
	/// ,HEATFLUXDENSITYUNIT
	/// ,INTEGERCOUNTRATEUNIT
	/// ,ISOTHERMALMOISTURECAPACITYUNIT
	/// ,KINEMATICVISCOSITYUNIT
	/// ,LINEARVELOCITYUNIT
	/// ,MASSDENSITYUNIT
	/// ,MASSFLOWRATEUNIT
	/// ,MOISTUREDIFFUSIVITYUNIT
	/// ,MOLECULARWEIGHTUNIT
	/// ,SPECIFICHEATCAPACITYUNIT
	/// ,THERMALADMITTANCEUNIT
	/// ,THERMALCONDUCTANCEUNIT
	/// ,THERMALRESISTANCEUNIT
	/// ,THERMALTRANSMITTANCEUNIT
	/// ,VAPORPERMEABILITYUNIT
	/// ,VOLUMETRICFLOWRATEUNIT
	/// ,ROTATIONALFREQUENCYUNIT
	/// ,TORQUEUNIT
	/// ,MOMENTOFINERTIAUNIT
	/// ,LINEARMOMENTUNIT
	/// ,LINEARFORCEUNIT
	/// ,PLANARFORCEUNIT
	/// ,MODULUSOFELASTICITYUNIT
	/// ,SHEARMODULUSUNIT
	/// ,LINEARSTIFFNESSUNIT
	/// ,ROTATIONALSTIFFNESSUNIT
	/// ,MODULUSOFSUBGRADEREACTIONUNIT
	/// ,ACCELERATIONUNIT
	/// ,CURVATUREUNIT
	/// ,HEATINGVALUEUNIT
	/// ,IONCONCENTRATIONUNIT
	/// ,LUMINOUSINTENSITYDISTRIBUTIONUNIT
	/// ,MASSPERLENGTHUNIT
	/// ,MODULUSOFLINEARSUBGRADEREACTIONUNIT
	/// ,MODULUSOFROTATIONALSUBGRADEREACTIONUNIT
	/// ,PHUNIT
	/// ,ROTATIONALMASSUNIT
	/// ,SECTIONAREAINTEGRALUNIT
	/// ,SECTIONMODULUSUNIT
	/// ,SOUNDPOWERUNIT
	/// ,SOUNDPRESSUREUNIT
	/// ,TEMPERATUREGRADIENTUNIT
	/// ,THERMALEXPANSIONCOEFFICIENTUNIT
	/// ,WARPINGCONSTANTUNIT
	/// ,WARPINGMOMENTUNIT
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDerivedUnitEnum: Global.IfcDerivedUnitEnum
	{
		public static string ANGULARVELOCITYUNIT { get { return ".ANGULARVELOCITYUNIT."; } private set { } }
		public static string COMPOUNDPLANEANGLEUNIT { get { return ".COMPOUNDPLANEANGLEUNIT."; } private set { } }
		public static string DYNAMICVISCOSITYUNIT { get { return ".DYNAMICVISCOSITYUNIT."; } private set { } }
		public static string HEATFLUXDENSITYUNIT { get { return ".HEATFLUXDENSITYUNIT."; } private set { } }
		public static string INTEGERCOUNTRATEUNIT { get { return ".INTEGERCOUNTRATEUNIT."; } private set { } }
		public static string ISOTHERMALMOISTURECAPACITYUNIT { get { return ".ISOTHERMALMOISTURECAPACITYUNIT."; } private set { } }
		public static string KINEMATICVISCOSITYUNIT { get { return ".KINEMATICVISCOSITYUNIT."; } private set { } }
		public static string LINEARVELOCITYUNIT { get { return ".LINEARVELOCITYUNIT."; } private set { } }
		public static string MASSDENSITYUNIT { get { return ".MASSDENSITYUNIT."; } private set { } }
		public static string MASSFLOWRATEUNIT { get { return ".MASSFLOWRATEUNIT."; } private set { } }
		public static string MOISTUREDIFFUSIVITYUNIT { get { return ".MOISTUREDIFFUSIVITYUNIT."; } private set { } }
		public static string MOLECULARWEIGHTUNIT { get { return ".MOLECULARWEIGHTUNIT."; } private set { } }
		public static string SPECIFICHEATCAPACITYUNIT { get { return ".SPECIFICHEATCAPACITYUNIT."; } private set { } }
		public static string THERMALADMITTANCEUNIT { get { return ".THERMALADMITTANCEUNIT."; } private set { } }
		public static string THERMALCONDUCTANCEUNIT { get { return ".THERMALCONDUCTANCEUNIT."; } private set { } }
		public static string THERMALRESISTANCEUNIT { get { return ".THERMALRESISTANCEUNIT."; } private set { } }
		public static string THERMALTRANSMITTANCEUNIT { get { return ".THERMALTRANSMITTANCEUNIT."; } private set { } }
		public static string VAPORPERMEABILITYUNIT { get { return ".VAPORPERMEABILITYUNIT."; } private set { } }
		public static string VOLUMETRICFLOWRATEUNIT { get { return ".VOLUMETRICFLOWRATEUNIT."; } private set { } }
		public static string ROTATIONALFREQUENCYUNIT { get { return ".ROTATIONALFREQUENCYUNIT."; } private set { } }
		public static string TORQUEUNIT { get { return ".TORQUEUNIT."; } private set { } }
		public static string MOMENTOFINERTIAUNIT { get { return ".MOMENTOFINERTIAUNIT."; } private set { } }
		public static string LINEARMOMENTUNIT { get { return ".LINEARMOMENTUNIT."; } private set { } }
		public static string LINEARFORCEUNIT { get { return ".LINEARFORCEUNIT."; } private set { } }
		public static string PLANARFORCEUNIT { get { return ".PLANARFORCEUNIT."; } private set { } }
		public static string MODULUSOFELASTICITYUNIT { get { return ".MODULUSOFELASTICITYUNIT."; } private set { } }
		public static string SHEARMODULUSUNIT { get { return ".SHEARMODULUSUNIT."; } private set { } }
		public static string LINEARSTIFFNESSUNIT { get { return ".LINEARSTIFFNESSUNIT."; } private set { } }
		public static string ROTATIONALSTIFFNESSUNIT { get { return ".ROTATIONALSTIFFNESSUNIT."; } private set { } }
		public static string MODULUSOFSUBGRADEREACTIONUNIT { get { return ".MODULUSOFSUBGRADEREACTIONUNIT."; } private set { } }
		public static string ACCELERATIONUNIT { get { return ".ACCELERATIONUNIT."; } private set { } }
		public static string CURVATUREUNIT { get { return ".CURVATUREUNIT."; } private set { } }
		public static string HEATINGVALUEUNIT { get { return ".HEATINGVALUEUNIT."; } private set { } }
		public static string IONCONCENTRATIONUNIT { get { return ".IONCONCENTRATIONUNIT."; } private set { } }
		public static string LUMINOUSINTENSITYDISTRIBUTIONUNIT { get { return ".LUMINOUSINTENSITYDISTRIBUTIONUNIT."; } private set { } }
		public static string MASSPERLENGTHUNIT { get { return ".MASSPERLENGTHUNIT."; } private set { } }
		public static string MODULUSOFLINEARSUBGRADEREACTIONUNIT { get { return ".MODULUSOFLINEARSUBGRADEREACTIONUNIT."; } private set { } }
		public static string MODULUSOFROTATIONALSUBGRADEREACTIONUNIT { get { return ".MODULUSOFROTATIONALSUBGRADEREACTIONUNIT."; } private set { } }
		public static string PHUNIT { get { return ".PHUNIT."; } private set { } }
		public static string ROTATIONALMASSUNIT { get { return ".ROTATIONALMASSUNIT."; } private set { } }
		public static string SECTIONAREAINTEGRALUNIT { get { return ".SECTIONAREAINTEGRALUNIT."; } private set { } }
		public static string SECTIONMODULUSUNIT { get { return ".SECTIONMODULUSUNIT."; } private set { } }
		public static string SOUNDPOWERUNIT { get { return ".SOUNDPOWERUNIT."; } private set { } }
		public static string SOUNDPRESSUREUNIT { get { return ".SOUNDPRESSUREUNIT."; } private set { } }
		public static string TEMPERATUREGRADIENTUNIT { get { return ".TEMPERATUREGRADIENTUNIT."; } private set { } }
		public static string THERMALEXPANSIONCOEFFICIENTUNIT { get { return ".THERMALEXPANSIONCOEFFICIENTUNIT."; } private set { } }
		public static string WARPINGCONSTANTUNIT { get { return ".WARPINGCONSTANTUNIT."; } private set { } }
		public static string WARPINGMOMENTUNIT { get { return ".WARPINGMOMENTUNIT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDerivedUnitEnum() { Value = ".ANGULARVELOCITYUNIT.";}
		public IfcDerivedUnitEnum(string value) { Value = value; }
		public static implicit operator IfcDerivedUnitEnum(string value) { return new IfcDerivedUnitEnum(value);}
		public static implicit operator string(IfcDerivedUnitEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDimensionExtentUsage = ENUMERATION OF
	/// (ORIGIN
	/// ,TARGET);
	/// END_TYPE;
	/// <summary>
	public class IfcDimensionExtentUsage: Global.IfcDimensionExtentUsage
	{
		public static string ORIGIN { get { return ".ORIGIN."; } private set { } }
		public static string TARGET { get { return ".TARGET."; } private set { } }
		public string Value {get; set;}
		public IfcDimensionExtentUsage() { Value = ".ORIGIN.";}
		public IfcDimensionExtentUsage(string value) { Value = value; }
		public static implicit operator IfcDimensionExtentUsage(string value) { return new IfcDimensionExtentUsage(value);}
		public static implicit operator string(IfcDimensionExtentUsage value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDirectionSenseEnum = ENUMERATION OF
	/// (POSITIVE
	/// ,NEGATIVE);
	/// END_TYPE;
	/// <summary>
	public class IfcDirectionSenseEnum: Global.IfcDirectionSenseEnum
	{
		public static string POSITIVE { get { return ".POSITIVE."; } private set { } }
		public static string NEGATIVE { get { return ".NEGATIVE."; } private set { } }
		public string Value {get; set;}
		public IfcDirectionSenseEnum() { Value = ".POSITIVE.";}
		public IfcDirectionSenseEnum(string value) { Value = value; }
		public static implicit operator IfcDirectionSenseEnum(string value) { return new IfcDirectionSenseEnum(value);}
		public static implicit operator string(IfcDirectionSenseEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDistributionChamberElementTypeEnum = ENUMERATION OF
	/// (FORMEDDUCT
	/// ,INSPECTIONCHAMBER
	/// ,INSPECTIONPIT
	/// ,MANHOLE
	/// ,METERCHAMBER
	/// ,SUMP
	/// ,TRENCH
	/// ,VALVECHAMBER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDistributionChamberElementTypeEnum: Global.IfcDistributionChamberElementTypeEnum
	{
		public static string FORMEDDUCT { get { return ".FORMEDDUCT."; } private set { } }
		public static string INSPECTIONCHAMBER { get { return ".INSPECTIONCHAMBER."; } private set { } }
		public static string INSPECTIONPIT { get { return ".INSPECTIONPIT."; } private set { } }
		public static string MANHOLE { get { return ".MANHOLE."; } private set { } }
		public static string METERCHAMBER { get { return ".METERCHAMBER."; } private set { } }
		public static string SUMP { get { return ".SUMP."; } private set { } }
		public static string TRENCH { get { return ".TRENCH."; } private set { } }
		public static string VALVECHAMBER { get { return ".VALVECHAMBER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDistributionChamberElementTypeEnum() { Value = ".FORMEDDUCT.";}
		public IfcDistributionChamberElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDistributionChamberElementTypeEnum(string value) { return new IfcDistributionChamberElementTypeEnum(value);}
		public static implicit operator string(IfcDistributionChamberElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDocumentConfidentialityEnum = ENUMERATION OF
	/// (PUBLIC
	/// ,RESTRICTED
	/// ,CONFIDENTIAL
	/// ,PERSONAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDocumentConfidentialityEnum: Global.IfcDocumentConfidentialityEnum
	{
		public static string PUBLIC { get { return ".PUBLIC."; } private set { } }
		public static string RESTRICTED { get { return ".RESTRICTED."; } private set { } }
		public static string CONFIDENTIAL { get { return ".CONFIDENTIAL."; } private set { } }
		public static string PERSONAL { get { return ".PERSONAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDocumentConfidentialityEnum() { Value = ".PUBLIC.";}
		public IfcDocumentConfidentialityEnum(string value) { Value = value; }
		public static implicit operator IfcDocumentConfidentialityEnum(string value) { return new IfcDocumentConfidentialityEnum(value);}
		public static implicit operator string(IfcDocumentConfidentialityEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDocumentStatusEnum = ENUMERATION OF
	/// (DRAFT
	/// ,FINALDRAFT
	/// ,FINAL
	/// ,REVISION
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDocumentStatusEnum: Global.IfcDocumentStatusEnum
	{
		public static string DRAFT { get { return ".DRAFT."; } private set { } }
		public static string FINALDRAFT { get { return ".FINALDRAFT."; } private set { } }
		public static string FINAL { get { return ".FINAL."; } private set { } }
		public static string REVISION { get { return ".REVISION."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDocumentStatusEnum() { Value = ".DRAFT.";}
		public IfcDocumentStatusEnum(string value) { Value = value; }
		public static implicit operator IfcDocumentStatusEnum(string value) { return new IfcDocumentStatusEnum(value);}
		public static implicit operator string(IfcDocumentStatusEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorPanelOperationEnum = ENUMERATION OF
	/// (SWINGING
	/// ,DOUBLE_ACTING
	/// ,SLIDING
	/// ,FOLDING
	/// ,REVOLVING
	/// ,ROLLINGUP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDoorPanelOperationEnum: Global.IfcDoorPanelOperationEnum
	{
		public static string SWINGING { get { return ".SWINGING."; } private set { } }
		public static string DOUBLE_ACTING { get { return ".DOUBLE_ACTING."; } private set { } }
		public static string SLIDING { get { return ".SLIDING."; } private set { } }
		public static string FOLDING { get { return ".FOLDING."; } private set { } }
		public static string REVOLVING { get { return ".REVOLVING."; } private set { } }
		public static string ROLLINGUP { get { return ".ROLLINGUP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDoorPanelOperationEnum() { Value = ".SWINGING.";}
		public IfcDoorPanelOperationEnum(string value) { Value = value; }
		public static implicit operator IfcDoorPanelOperationEnum(string value) { return new IfcDoorPanelOperationEnum(value);}
		public static implicit operator string(IfcDoorPanelOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorPanelPositionEnum = ENUMERATION OF
	/// (LEFT
	/// ,MIDDLE
	/// ,RIGHT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDoorPanelPositionEnum: Global.IfcDoorPanelPositionEnum
	{
		public static string LEFT { get { return ".LEFT."; } private set { } }
		public static string MIDDLE { get { return ".MIDDLE."; } private set { } }
		public static string RIGHT { get { return ".RIGHT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDoorPanelPositionEnum() { Value = ".LEFT.";}
		public IfcDoorPanelPositionEnum(string value) { Value = value; }
		public static implicit operator IfcDoorPanelPositionEnum(string value) { return new IfcDoorPanelPositionEnum(value);}
		public static implicit operator string(IfcDoorPanelPositionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorStyleConstructionEnum = ENUMERATION OF
	/// (ALUMINIUM
	/// ,HIGH_GRADE_STEEL
	/// ,STEEL
	/// ,WOOD
	/// ,ALUMINIUM_WOOD
	/// ,ALUMINIUM_PLASTIC
	/// ,PLASTIC
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDoorStyleConstructionEnum: Global.IfcDoorStyleConstructionEnum
	{
		public static string ALUMINIUM { get { return ".ALUMINIUM."; } private set { } }
		public static string HIGH_GRADE_STEEL { get { return ".HIGH_GRADE_STEEL."; } private set { } }
		public static string STEEL { get { return ".STEEL."; } private set { } }
		public static string WOOD { get { return ".WOOD."; } private set { } }
		public static string ALUMINIUM_WOOD { get { return ".ALUMINIUM_WOOD."; } private set { } }
		public static string ALUMINIUM_PLASTIC { get { return ".ALUMINIUM_PLASTIC."; } private set { } }
		public static string PLASTIC { get { return ".PLASTIC."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDoorStyleConstructionEnum() { Value = ".ALUMINIUM.";}
		public IfcDoorStyleConstructionEnum(string value) { Value = value; }
		public static implicit operator IfcDoorStyleConstructionEnum(string value) { return new IfcDoorStyleConstructionEnum(value);}
		public static implicit operator string(IfcDoorStyleConstructionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorStyleOperationEnum = ENUMERATION OF
	/// (SINGLE_SWING_LEFT
	/// ,SINGLE_SWING_RIGHT
	/// ,DOUBLE_DOOR_SINGLE_SWING
	/// ,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT
	/// ,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT
	/// ,DOUBLE_SWING_LEFT
	/// ,DOUBLE_SWING_RIGHT
	/// ,DOUBLE_DOOR_DOUBLE_SWING
	/// ,SLIDING_TO_LEFT
	/// ,SLIDING_TO_RIGHT
	/// ,DOUBLE_DOOR_SLIDING
	/// ,FOLDING_TO_LEFT
	/// ,FOLDING_TO_RIGHT
	/// ,DOUBLE_DOOR_FOLDING
	/// ,REVOLVING
	/// ,ROLLINGUP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDoorStyleOperationEnum: Global.IfcDoorStyleOperationEnum
	{
		public static string SINGLE_SWING_LEFT { get { return ".SINGLE_SWING_LEFT."; } private set { } }
		public static string SINGLE_SWING_RIGHT { get { return ".SINGLE_SWING_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING { get { return ".DOUBLE_DOOR_SINGLE_SWING."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT { get { return ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT { get { return ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT."; } private set { } }
		public static string DOUBLE_SWING_LEFT { get { return ".DOUBLE_SWING_LEFT."; } private set { } }
		public static string DOUBLE_SWING_RIGHT { get { return ".DOUBLE_SWING_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_DOUBLE_SWING { get { return ".DOUBLE_DOOR_DOUBLE_SWING."; } private set { } }
		public static string SLIDING_TO_LEFT { get { return ".SLIDING_TO_LEFT."; } private set { } }
		public static string SLIDING_TO_RIGHT { get { return ".SLIDING_TO_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_SLIDING { get { return ".DOUBLE_DOOR_SLIDING."; } private set { } }
		public static string FOLDING_TO_LEFT { get { return ".FOLDING_TO_LEFT."; } private set { } }
		public static string FOLDING_TO_RIGHT { get { return ".FOLDING_TO_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_FOLDING { get { return ".DOUBLE_DOOR_FOLDING."; } private set { } }
		public static string REVOLVING { get { return ".REVOLVING."; } private set { } }
		public static string ROLLINGUP { get { return ".ROLLINGUP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDoorStyleOperationEnum() { Value = ".SINGLE_SWING_LEFT.";}
		public IfcDoorStyleOperationEnum(string value) { Value = value; }
		public static implicit operator IfcDoorStyleOperationEnum(string value) { return new IfcDoorStyleOperationEnum(value);}
		public static implicit operator string(IfcDoorStyleOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDuctFittingTypeEnum = ENUMERATION OF
	/// (BEND
	/// ,CONNECTOR
	/// ,ENTRY
	/// ,EXIT
	/// ,JUNCTION
	/// ,OBSTRUCTION
	/// ,TRANSITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDuctFittingTypeEnum: Global.IfcDuctFittingTypeEnum
	{
		public static string BEND { get { return ".BEND."; } private set { } }
		public static string CONNECTOR { get { return ".CONNECTOR."; } private set { } }
		public static string ENTRY { get { return ".ENTRY."; } private set { } }
		public static string EXIT { get { return ".EXIT."; } private set { } }
		public static string JUNCTION { get { return ".JUNCTION."; } private set { } }
		public static string OBSTRUCTION { get { return ".OBSTRUCTION."; } private set { } }
		public static string TRANSITION { get { return ".TRANSITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDuctFittingTypeEnum() { Value = ".BEND.";}
		public IfcDuctFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDuctFittingTypeEnum(string value) { return new IfcDuctFittingTypeEnum(value);}
		public static implicit operator string(IfcDuctFittingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDuctSegmentTypeEnum = ENUMERATION OF
	/// (RIGIDSEGMENT
	/// ,FLEXIBLESEGMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDuctSegmentTypeEnum: Global.IfcDuctSegmentTypeEnum
	{
		public static string RIGIDSEGMENT { get { return ".RIGIDSEGMENT."; } private set { } }
		public static string FLEXIBLESEGMENT { get { return ".FLEXIBLESEGMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDuctSegmentTypeEnum() { Value = ".RIGIDSEGMENT.";}
		public IfcDuctSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDuctSegmentTypeEnum(string value) { return new IfcDuctSegmentTypeEnum(value);}
		public static implicit operator string(IfcDuctSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDuctSilencerTypeEnum = ENUMERATION OF
	/// (FLATOVAL
	/// ,RECTANGULAR
	/// ,ROUND
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcDuctSilencerTypeEnum: Global.IfcDuctSilencerTypeEnum
	{
		public static string FLATOVAL { get { return ".FLATOVAL."; } private set { } }
		public static string RECTANGULAR { get { return ".RECTANGULAR."; } private set { } }
		public static string ROUND { get { return ".ROUND."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcDuctSilencerTypeEnum() { Value = ".FLATOVAL.";}
		public IfcDuctSilencerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcDuctSilencerTypeEnum(string value) { return new IfcDuctSilencerTypeEnum(value);}
		public static implicit operator string(IfcDuctSilencerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricApplianceTypeEnum = ENUMERATION OF
	/// (COMPUTER
	/// ,DIRECTWATERHEATER
	/// ,DISHWASHER
	/// ,ELECTRICCOOKER
	/// ,ELECTRICHEATER
	/// ,FACSIMILE
	/// ,FREESTANDINGFAN
	/// ,FREEZER
	/// ,FRIDGE_FREEZER
	/// ,HANDDRYER
	/// ,INDIRECTWATERHEATER
	/// ,MICROWAVE
	/// ,PHOTOCOPIER
	/// ,PRINTER
	/// ,REFRIGERATOR
	/// ,RADIANTHEATER
	/// ,SCANNER
	/// ,TELEPHONE
	/// ,TUMBLEDRYER
	/// ,TV
	/// ,VENDINGMACHINE
	/// ,WASHINGMACHINE
	/// ,WATERHEATER
	/// ,WATERCOOLER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricApplianceTypeEnum: Global.IfcElectricApplianceTypeEnum
	{
		public static string COMPUTER { get { return ".COMPUTER."; } private set { } }
		public static string DIRECTWATERHEATER { get { return ".DIRECTWATERHEATER."; } private set { } }
		public static string DISHWASHER { get { return ".DISHWASHER."; } private set { } }
		public static string ELECTRICCOOKER { get { return ".ELECTRICCOOKER."; } private set { } }
		public static string ELECTRICHEATER { get { return ".ELECTRICHEATER."; } private set { } }
		public static string FACSIMILE { get { return ".FACSIMILE."; } private set { } }
		public static string FREESTANDINGFAN { get { return ".FREESTANDINGFAN."; } private set { } }
		public static string FREEZER { get { return ".FREEZER."; } private set { } }
		public static string FRIDGE_FREEZER { get { return ".FRIDGE_FREEZER."; } private set { } }
		public static string HANDDRYER { get { return ".HANDDRYER."; } private set { } }
		public static string INDIRECTWATERHEATER { get { return ".INDIRECTWATERHEATER."; } private set { } }
		public static string MICROWAVE { get { return ".MICROWAVE."; } private set { } }
		public static string PHOTOCOPIER { get { return ".PHOTOCOPIER."; } private set { } }
		public static string PRINTER { get { return ".PRINTER."; } private set { } }
		public static string REFRIGERATOR { get { return ".REFRIGERATOR."; } private set { } }
		public static string RADIANTHEATER { get { return ".RADIANTHEATER."; } private set { } }
		public static string SCANNER { get { return ".SCANNER."; } private set { } }
		public static string TELEPHONE { get { return ".TELEPHONE."; } private set { } }
		public static string TUMBLEDRYER { get { return ".TUMBLEDRYER."; } private set { } }
		public static string TV { get { return ".TV."; } private set { } }
		public static string VENDINGMACHINE { get { return ".VENDINGMACHINE."; } private set { } }
		public static string WASHINGMACHINE { get { return ".WASHINGMACHINE."; } private set { } }
		public static string WATERHEATER { get { return ".WATERHEATER."; } private set { } }
		public static string WATERCOOLER { get { return ".WATERCOOLER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricApplianceTypeEnum() { Value = ".COMPUTER.";}
		public IfcElectricApplianceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricApplianceTypeEnum(string value) { return new IfcElectricApplianceTypeEnum(value);}
		public static implicit operator string(IfcElectricApplianceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricCurrentEnum = ENUMERATION OF
	/// (ALTERNATING
	/// ,DIRECT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricCurrentEnum: Global.IfcElectricCurrentEnum
	{
		public static string ALTERNATING { get { return ".ALTERNATING."; } private set { } }
		public static string DIRECT { get { return ".DIRECT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricCurrentEnum() { Value = ".ALTERNATING.";}
		public IfcElectricCurrentEnum(string value) { Value = value; }
		public static implicit operator IfcElectricCurrentEnum(string value) { return new IfcElectricCurrentEnum(value);}
		public static implicit operator string(IfcElectricCurrentEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricDistributionPointFunctionEnum = ENUMERATION OF
	/// (ALARMPANEL
	/// ,CONSUMERUNIT
	/// ,CONTROLPANEL
	/// ,DISTRIBUTIONBOARD
	/// ,GASDETECTORPANEL
	/// ,INDICATORPANEL
	/// ,MIMICPANEL
	/// ,MOTORCONTROLCENTRE
	/// ,SWITCHBOARD
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricDistributionPointFunctionEnum: Global.IfcElectricDistributionPointFunctionEnum
	{
		public static string ALARMPANEL { get { return ".ALARMPANEL."; } private set { } }
		public static string CONSUMERUNIT { get { return ".CONSUMERUNIT."; } private set { } }
		public static string CONTROLPANEL { get { return ".CONTROLPANEL."; } private set { } }
		public static string DISTRIBUTIONBOARD { get { return ".DISTRIBUTIONBOARD."; } private set { } }
		public static string GASDETECTORPANEL { get { return ".GASDETECTORPANEL."; } private set { } }
		public static string INDICATORPANEL { get { return ".INDICATORPANEL."; } private set { } }
		public static string MIMICPANEL { get { return ".MIMICPANEL."; } private set { } }
		public static string MOTORCONTROLCENTRE { get { return ".MOTORCONTROLCENTRE."; } private set { } }
		public static string SWITCHBOARD { get { return ".SWITCHBOARD."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricDistributionPointFunctionEnum() { Value = ".ALARMPANEL.";}
		public IfcElectricDistributionPointFunctionEnum(string value) { Value = value; }
		public static implicit operator IfcElectricDistributionPointFunctionEnum(string value) { return new IfcElectricDistributionPointFunctionEnum(value);}
		public static implicit operator string(IfcElectricDistributionPointFunctionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricFlowStorageDeviceTypeEnum = ENUMERATION OF
	/// (BATTERY
	/// ,CAPACITORBANK
	/// ,HARMONICFILTER
	/// ,INDUCTORBANK
	/// ,UPS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricFlowStorageDeviceTypeEnum: Global.IfcElectricFlowStorageDeviceTypeEnum
	{
		public static string BATTERY { get { return ".BATTERY."; } private set { } }
		public static string CAPACITORBANK { get { return ".CAPACITORBANK."; } private set { } }
		public static string HARMONICFILTER { get { return ".HARMONICFILTER."; } private set { } }
		public static string INDUCTORBANK { get { return ".INDUCTORBANK."; } private set { } }
		public static string UPS { get { return ".UPS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricFlowStorageDeviceTypeEnum() { Value = ".BATTERY.";}
		public IfcElectricFlowStorageDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricFlowStorageDeviceTypeEnum(string value) { return new IfcElectricFlowStorageDeviceTypeEnum(value);}
		public static implicit operator string(IfcElectricFlowStorageDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricGeneratorTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricGeneratorTypeEnum: Global.IfcElectricGeneratorTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricGeneratorTypeEnum() { Value = ".USERDEFINED.";}
		public IfcElectricGeneratorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricGeneratorTypeEnum(string value) { return new IfcElectricGeneratorTypeEnum(value);}
		public static implicit operator string(IfcElectricGeneratorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricHeaterTypeEnum = ENUMERATION OF
	/// (ELECTRICPOINTHEATER
	/// ,ELECTRICCABLEHEATER
	/// ,ELECTRICMATHEATER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricHeaterTypeEnum: Global.IfcElectricHeaterTypeEnum
	{
		public static string ELECTRICPOINTHEATER { get { return ".ELECTRICPOINTHEATER."; } private set { } }
		public static string ELECTRICCABLEHEATER { get { return ".ELECTRICCABLEHEATER."; } private set { } }
		public static string ELECTRICMATHEATER { get { return ".ELECTRICMATHEATER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricHeaterTypeEnum() { Value = ".ELECTRICPOINTHEATER.";}
		public IfcElectricHeaterTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricHeaterTypeEnum(string value) { return new IfcElectricHeaterTypeEnum(value);}
		public static implicit operator string(IfcElectricHeaterTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricMotorTypeEnum = ENUMERATION OF
	/// (DC
	/// ,INDUCTION
	/// ,POLYPHASE
	/// ,RELUCTANCESYNCHRONOUS
	/// ,SYNCHRONOUS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricMotorTypeEnum: Global.IfcElectricMotorTypeEnum
	{
		public static string DC { get { return ".DC."; } private set { } }
		public static string INDUCTION { get { return ".INDUCTION."; } private set { } }
		public static string POLYPHASE { get { return ".POLYPHASE."; } private set { } }
		public static string RELUCTANCESYNCHRONOUS { get { return ".RELUCTANCESYNCHRONOUS."; } private set { } }
		public static string SYNCHRONOUS { get { return ".SYNCHRONOUS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricMotorTypeEnum() { Value = ".DC.";}
		public IfcElectricMotorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricMotorTypeEnum(string value) { return new IfcElectricMotorTypeEnum(value);}
		public static implicit operator string(IfcElectricMotorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricTimeControlTypeEnum = ENUMERATION OF
	/// (TIMECLOCK
	/// ,TIMEDELAY
	/// ,RELAY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElectricTimeControlTypeEnum: Global.IfcElectricTimeControlTypeEnum
	{
		public static string TIMECLOCK { get { return ".TIMECLOCK."; } private set { } }
		public static string TIMEDELAY { get { return ".TIMEDELAY."; } private set { } }
		public static string RELAY { get { return ".RELAY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElectricTimeControlTypeEnum() { Value = ".TIMECLOCK.";}
		public IfcElectricTimeControlTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElectricTimeControlTypeEnum(string value) { return new IfcElectricTimeControlTypeEnum(value);}
		public static implicit operator string(IfcElectricTimeControlTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElementAssemblyTypeEnum = ENUMERATION OF
	/// (ACCESSORY_ASSEMBLY
	/// ,ARCH
	/// ,BEAM_GRID
	/// ,BRACED_FRAME
	/// ,GIRDER
	/// ,REINFORCEMENT_UNIT
	/// ,RIGID_FRAME
	/// ,SLAB_FIELD
	/// ,TRUSS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcElementAssemblyTypeEnum: Global.IfcElementAssemblyTypeEnum
	{
		public static string ACCESSORY_ASSEMBLY { get { return ".ACCESSORY_ASSEMBLY."; } private set { } }
		public static string ARCH { get { return ".ARCH."; } private set { } }
		public static string BEAM_GRID { get { return ".BEAM_GRID."; } private set { } }
		public static string BRACED_FRAME { get { return ".BRACED_FRAME."; } private set { } }
		public static string GIRDER { get { return ".GIRDER."; } private set { } }
		public static string REINFORCEMENT_UNIT { get { return ".REINFORCEMENT_UNIT."; } private set { } }
		public static string RIGID_FRAME { get { return ".RIGID_FRAME."; } private set { } }
		public static string SLAB_FIELD { get { return ".SLAB_FIELD."; } private set { } }
		public static string TRUSS { get { return ".TRUSS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcElementAssemblyTypeEnum() { Value = ".ACCESSORY_ASSEMBLY.";}
		public IfcElementAssemblyTypeEnum(string value) { Value = value; }
		public static implicit operator IfcElementAssemblyTypeEnum(string value) { return new IfcElementAssemblyTypeEnum(value);}
		public static implicit operator string(IfcElementAssemblyTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElementCompositionEnum = ENUMERATION OF
	/// (COMPLEX
	/// ,ELEMENT
	/// ,PARTIAL);
	/// END_TYPE;
	/// <summary>
	public class IfcElementCompositionEnum: Global.IfcElementCompositionEnum
	{
		public static string COMPLEX { get { return ".COMPLEX."; } private set { } }
		public static string ELEMENT { get { return ".ELEMENT."; } private set { } }
		public static string PARTIAL { get { return ".PARTIAL."; } private set { } }
		public string Value {get; set;}
		public IfcElementCompositionEnum() { Value = ".COMPLEX.";}
		public IfcElementCompositionEnum(string value) { Value = value; }
		public static implicit operator IfcElementCompositionEnum(string value) { return new IfcElementCompositionEnum(value);}
		public static implicit operator string(IfcElementCompositionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEnergySequenceEnum = ENUMERATION OF
	/// (PRIMARY
	/// ,SECONDARY
	/// ,TERTIARY
	/// ,AUXILIARY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcEnergySequenceEnum: Global.IfcEnergySequenceEnum
	{
		public static string PRIMARY { get { return ".PRIMARY."; } private set { } }
		public static string SECONDARY { get { return ".SECONDARY."; } private set { } }
		public static string TERTIARY { get { return ".TERTIARY."; } private set { } }
		public static string AUXILIARY { get { return ".AUXILIARY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcEnergySequenceEnum() { Value = ".PRIMARY.";}
		public IfcEnergySequenceEnum(string value) { Value = value; }
		public static implicit operator IfcEnergySequenceEnum(string value) { return new IfcEnergySequenceEnum(value);}
		public static implicit operator string(IfcEnergySequenceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEnvironmentalImpactCategoryEnum = ENUMERATION OF
	/// (COMBINEDVALUE
	/// ,DISPOSAL
	/// ,EXTRACTION
	/// ,INSTALLATION
	/// ,MANUFACTURE
	/// ,TRANSPORTATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcEnvironmentalImpactCategoryEnum: Global.IfcEnvironmentalImpactCategoryEnum
	{
		public static string COMBINEDVALUE { get { return ".COMBINEDVALUE."; } private set { } }
		public static string DISPOSAL { get { return ".DISPOSAL."; } private set { } }
		public static string EXTRACTION { get { return ".EXTRACTION."; } private set { } }
		public static string INSTALLATION { get { return ".INSTALLATION."; } private set { } }
		public static string MANUFACTURE { get { return ".MANUFACTURE."; } private set { } }
		public static string TRANSPORTATION { get { return ".TRANSPORTATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcEnvironmentalImpactCategoryEnum() { Value = ".COMBINEDVALUE.";}
		public IfcEnvironmentalImpactCategoryEnum(string value) { Value = value; }
		public static implicit operator IfcEnvironmentalImpactCategoryEnum(string value) { return new IfcEnvironmentalImpactCategoryEnum(value);}
		public static implicit operator string(IfcEnvironmentalImpactCategoryEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEvaporativeCoolerTypeEnum = ENUMERATION OF
	/// (DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER
	/// ,DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER
	/// ,DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER
	/// ,DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER
	/// ,DIRECTEVAPORATIVEAIRWASHER
	/// ,INDIRECTEVAPORATIVEPACKAGEAIRCOOLER
	/// ,INDIRECTEVAPORATIVEWETCOIL
	/// ,INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER
	/// ,INDIRECTDIRECTCOMBINATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcEvaporativeCoolerTypeEnum: Global.IfcEvaporativeCoolerTypeEnum
	{
		public static string DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER { get { return ".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER { get { return ".DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER { get { return ".DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER { get { return ".DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVEAIRWASHER { get { return ".DIRECTEVAPORATIVEAIRWASHER."; } private set { } }
		public static string INDIRECTEVAPORATIVEPACKAGEAIRCOOLER { get { return ".INDIRECTEVAPORATIVEPACKAGEAIRCOOLER."; } private set { } }
		public static string INDIRECTEVAPORATIVEWETCOIL { get { return ".INDIRECTEVAPORATIVEWETCOIL."; } private set { } }
		public static string INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER { get { return ".INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER."; } private set { } }
		public static string INDIRECTDIRECTCOMBINATION { get { return ".INDIRECTDIRECTCOMBINATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcEvaporativeCoolerTypeEnum() { Value = ".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER.";}
		public IfcEvaporativeCoolerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEvaporativeCoolerTypeEnum(string value) { return new IfcEvaporativeCoolerTypeEnum(value);}
		public static implicit operator string(IfcEvaporativeCoolerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEvaporatorTypeEnum = ENUMERATION OF
	/// (DIRECTEXPANSIONSHELLANDTUBE
	/// ,DIRECTEXPANSIONTUBEINTUBE
	/// ,DIRECTEXPANSIONBRAZEDPLATE
	/// ,FLOODEDSHELLANDTUBE
	/// ,SHELLANDCOIL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcEvaporatorTypeEnum: Global.IfcEvaporatorTypeEnum
	{
		public static string DIRECTEXPANSIONSHELLANDTUBE { get { return ".DIRECTEXPANSIONSHELLANDTUBE."; } private set { } }
		public static string DIRECTEXPANSIONTUBEINTUBE { get { return ".DIRECTEXPANSIONTUBEINTUBE."; } private set { } }
		public static string DIRECTEXPANSIONBRAZEDPLATE { get { return ".DIRECTEXPANSIONBRAZEDPLATE."; } private set { } }
		public static string FLOODEDSHELLANDTUBE { get { return ".FLOODEDSHELLANDTUBE."; } private set { } }
		public static string SHELLANDCOIL { get { return ".SHELLANDCOIL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcEvaporatorTypeEnum() { Value = ".DIRECTEXPANSIONSHELLANDTUBE.";}
		public IfcEvaporatorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcEvaporatorTypeEnum(string value) { return new IfcEvaporatorTypeEnum(value);}
		public static implicit operator string(IfcEvaporatorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFanTypeEnum = ENUMERATION OF
	/// (CENTRIFUGALFORWARDCURVED
	/// ,CENTRIFUGALRADIAL
	/// ,CENTRIFUGALBACKWARDINCLINEDCURVED
	/// ,CENTRIFUGALAIRFOIL
	/// ,TUBEAXIAL
	/// ,VANEAXIAL
	/// ,PROPELLORAXIAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFanTypeEnum: Global.IfcFanTypeEnum
	{
		public static string CENTRIFUGALFORWARDCURVED { get { return ".CENTRIFUGALFORWARDCURVED."; } private set { } }
		public static string CENTRIFUGALRADIAL { get { return ".CENTRIFUGALRADIAL."; } private set { } }
		public static string CENTRIFUGALBACKWARDINCLINEDCURVED { get { return ".CENTRIFUGALBACKWARDINCLINEDCURVED."; } private set { } }
		public static string CENTRIFUGALAIRFOIL { get { return ".CENTRIFUGALAIRFOIL."; } private set { } }
		public static string TUBEAXIAL { get { return ".TUBEAXIAL."; } private set { } }
		public static string VANEAXIAL { get { return ".VANEAXIAL."; } private set { } }
		public static string PROPELLORAXIAL { get { return ".PROPELLORAXIAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFanTypeEnum() { Value = ".CENTRIFUGALFORWARDCURVED.";}
		public IfcFanTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFanTypeEnum(string value) { return new IfcFanTypeEnum(value);}
		public static implicit operator string(IfcFanTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFilterTypeEnum = ENUMERATION OF
	/// (AIRPARTICLEFILTER
	/// ,ODORFILTER
	/// ,OILFILTER
	/// ,STRAINER
	/// ,WATERFILTER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFilterTypeEnum: Global.IfcFilterTypeEnum
	{
		public static string AIRPARTICLEFILTER { get { return ".AIRPARTICLEFILTER."; } private set { } }
		public static string ODORFILTER { get { return ".ODORFILTER."; } private set { } }
		public static string OILFILTER { get { return ".OILFILTER."; } private set { } }
		public static string STRAINER { get { return ".STRAINER."; } private set { } }
		public static string WATERFILTER { get { return ".WATERFILTER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFilterTypeEnum() { Value = ".AIRPARTICLEFILTER.";}
		public IfcFilterTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFilterTypeEnum(string value) { return new IfcFilterTypeEnum(value);}
		public static implicit operator string(IfcFilterTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFireSuppressionTerminalTypeEnum = ENUMERATION OF
	/// (BREECHINGINLET
	/// ,FIREHYDRANT
	/// ,HOSEREEL
	/// ,SPRINKLER
	/// ,SPRINKLERDEFLECTOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFireSuppressionTerminalTypeEnum: Global.IfcFireSuppressionTerminalTypeEnum
	{
		public static string BREECHINGINLET { get { return ".BREECHINGINLET."; } private set { } }
		public static string FIREHYDRANT { get { return ".FIREHYDRANT."; } private set { } }
		public static string HOSEREEL { get { return ".HOSEREEL."; } private set { } }
		public static string SPRINKLER { get { return ".SPRINKLER."; } private set { } }
		public static string SPRINKLERDEFLECTOR { get { return ".SPRINKLERDEFLECTOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFireSuppressionTerminalTypeEnum() { Value = ".BREECHINGINLET.";}
		public IfcFireSuppressionTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFireSuppressionTerminalTypeEnum(string value) { return new IfcFireSuppressionTerminalTypeEnum(value);}
		public static implicit operator string(IfcFireSuppressionTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFlowDirectionEnum = ENUMERATION OF
	/// (SOURCE
	/// ,SINK
	/// ,SOURCEANDSINK
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFlowDirectionEnum: Global.IfcFlowDirectionEnum
	{
		public static string SOURCE { get { return ".SOURCE."; } private set { } }
		public static string SINK { get { return ".SINK."; } private set { } }
		public static string SOURCEANDSINK { get { return ".SOURCEANDSINK."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFlowDirectionEnum() { Value = ".SOURCE.";}
		public IfcFlowDirectionEnum(string value) { Value = value; }
		public static implicit operator IfcFlowDirectionEnum(string value) { return new IfcFlowDirectionEnum(value);}
		public static implicit operator string(IfcFlowDirectionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFlowInstrumentTypeEnum = ENUMERATION OF
	/// (PRESSUREGAUGE
	/// ,THERMOMETER
	/// ,AMMETER
	/// ,FREQUENCYMETER
	/// ,POWERFACTORMETER
	/// ,PHASEANGLEMETER
	/// ,VOLTMETER_PEAK
	/// ,VOLTMETER_RMS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFlowInstrumentTypeEnum: Global.IfcFlowInstrumentTypeEnum
	{
		public static string PRESSUREGAUGE { get { return ".PRESSUREGAUGE."; } private set { } }
		public static string THERMOMETER { get { return ".THERMOMETER."; } private set { } }
		public static string AMMETER { get { return ".AMMETER."; } private set { } }
		public static string FREQUENCYMETER { get { return ".FREQUENCYMETER."; } private set { } }
		public static string POWERFACTORMETER { get { return ".POWERFACTORMETER."; } private set { } }
		public static string PHASEANGLEMETER { get { return ".PHASEANGLEMETER."; } private set { } }
		public static string VOLTMETER_PEAK { get { return ".VOLTMETER_PEAK."; } private set { } }
		public static string VOLTMETER_RMS { get { return ".VOLTMETER_RMS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFlowInstrumentTypeEnum() { Value = ".PRESSUREGAUGE.";}
		public IfcFlowInstrumentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFlowInstrumentTypeEnum(string value) { return new IfcFlowInstrumentTypeEnum(value);}
		public static implicit operator string(IfcFlowInstrumentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFlowMeterTypeEnum = ENUMERATION OF
	/// (ELECTRICMETER
	/// ,ENERGYMETER
	/// ,FLOWMETER
	/// ,GASMETER
	/// ,OILMETER
	/// ,WATERMETER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFlowMeterTypeEnum: Global.IfcFlowMeterTypeEnum
	{
		public static string ELECTRICMETER { get { return ".ELECTRICMETER."; } private set { } }
		public static string ENERGYMETER { get { return ".ENERGYMETER."; } private set { } }
		public static string FLOWMETER { get { return ".FLOWMETER."; } private set { } }
		public static string GASMETER { get { return ".GASMETER."; } private set { } }
		public static string OILMETER { get { return ".OILMETER."; } private set { } }
		public static string WATERMETER { get { return ".WATERMETER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFlowMeterTypeEnum() { Value = ".ELECTRICMETER.";}
		public IfcFlowMeterTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFlowMeterTypeEnum(string value) { return new IfcFlowMeterTypeEnum(value);}
		public static implicit operator string(IfcFlowMeterTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFootingTypeEnum = ENUMERATION OF
	/// (FOOTING_BEAM
	/// ,PAD_FOOTING
	/// ,PILE_CAP
	/// ,STRIP_FOOTING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcFootingTypeEnum: Global.IfcFootingTypeEnum
	{
		public static string FOOTING_BEAM { get { return ".FOOTING_BEAM."; } private set { } }
		public static string PAD_FOOTING { get { return ".PAD_FOOTING."; } private set { } }
		public static string PILE_CAP { get { return ".PILE_CAP."; } private set { } }
		public static string STRIP_FOOTING { get { return ".STRIP_FOOTING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcFootingTypeEnum() { Value = ".FOOTING_BEAM.";}
		public IfcFootingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcFootingTypeEnum(string value) { return new IfcFootingTypeEnum(value);}
		public static implicit operator string(IfcFootingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGasTerminalTypeEnum = ENUMERATION OF
	/// (GASAPPLIANCE
	/// ,GASBOOSTER
	/// ,GASBURNER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcGasTerminalTypeEnum: Global.IfcGasTerminalTypeEnum
	{
		public static string GASAPPLIANCE { get { return ".GASAPPLIANCE."; } private set { } }
		public static string GASBOOSTER { get { return ".GASBOOSTER."; } private set { } }
		public static string GASBURNER { get { return ".GASBURNER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcGasTerminalTypeEnum() { Value = ".GASAPPLIANCE.";}
		public IfcGasTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcGasTerminalTypeEnum(string value) { return new IfcGasTerminalTypeEnum(value);}
		public static implicit operator string(IfcGasTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGeometricProjectionEnum = ENUMERATION OF
	/// (GRAPH_VIEW
	/// ,SKETCH_VIEW
	/// ,MODEL_VIEW
	/// ,PLAN_VIEW
	/// ,REFLECTED_PLAN_VIEW
	/// ,SECTION_VIEW
	/// ,ELEVATION_VIEW
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcGeometricProjectionEnum: Global.IfcGeometricProjectionEnum
	{
		public static string GRAPH_VIEW { get { return ".GRAPH_VIEW."; } private set { } }
		public static string SKETCH_VIEW { get { return ".SKETCH_VIEW."; } private set { } }
		public static string MODEL_VIEW { get { return ".MODEL_VIEW."; } private set { } }
		public static string PLAN_VIEW { get { return ".PLAN_VIEW."; } private set { } }
		public static string REFLECTED_PLAN_VIEW { get { return ".REFLECTED_PLAN_VIEW."; } private set { } }
		public static string SECTION_VIEW { get { return ".SECTION_VIEW."; } private set { } }
		public static string ELEVATION_VIEW { get { return ".ELEVATION_VIEW."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcGeometricProjectionEnum() { Value = ".GRAPH_VIEW.";}
		public IfcGeometricProjectionEnum(string value) { Value = value; }
		public static implicit operator IfcGeometricProjectionEnum(string value) { return new IfcGeometricProjectionEnum(value);}
		public static implicit operator string(IfcGeometricProjectionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGlobalOrLocalEnum = ENUMERATION OF
	/// (GLOBAL_COORDS
	/// ,LOCAL_COORDS);
	/// END_TYPE;
	/// <summary>
	public class IfcGlobalOrLocalEnum: Global.IfcGlobalOrLocalEnum
	{
		public static string GLOBAL_COORDS { get { return ".GLOBAL_COORDS."; } private set { } }
		public static string LOCAL_COORDS { get { return ".LOCAL_COORDS."; } private set { } }
		public string Value {get; set;}
		public IfcGlobalOrLocalEnum() { Value = ".GLOBAL_COORDS.";}
		public IfcGlobalOrLocalEnum(string value) { Value = value; }
		public static implicit operator IfcGlobalOrLocalEnum(string value) { return new IfcGlobalOrLocalEnum(value);}
		public static implicit operator string(IfcGlobalOrLocalEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHeatExchangerTypeEnum = ENUMERATION OF
	/// (PLATE
	/// ,SHELLANDTUBE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcHeatExchangerTypeEnum: Global.IfcHeatExchangerTypeEnum
	{
		public static string PLATE { get { return ".PLATE."; } private set { } }
		public static string SHELLANDTUBE { get { return ".SHELLANDTUBE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcHeatExchangerTypeEnum() { Value = ".PLATE.";}
		public IfcHeatExchangerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcHeatExchangerTypeEnum(string value) { return new IfcHeatExchangerTypeEnum(value);}
		public static implicit operator string(IfcHeatExchangerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHumidifierTypeEnum = ENUMERATION OF
	/// (STEAMINJECTION
	/// ,ADIABATICAIRWASHER
	/// ,ADIABATICPAN
	/// ,ADIABATICWETTEDELEMENT
	/// ,ADIABATICATOMIZING
	/// ,ADIABATICULTRASONIC
	/// ,ADIABATICRIGIDMEDIA
	/// ,ADIABATICCOMPRESSEDAIRNOZZLE
	/// ,ASSISTEDELECTRIC
	/// ,ASSISTEDNATURALGAS
	/// ,ASSISTEDPROPANE
	/// ,ASSISTEDBUTANE
	/// ,ASSISTEDSTEAM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcHumidifierTypeEnum: Global.IfcHumidifierTypeEnum
	{
		public static string STEAMINJECTION { get { return ".STEAMINJECTION."; } private set { } }
		public static string ADIABATICAIRWASHER { get { return ".ADIABATICAIRWASHER."; } private set { } }
		public static string ADIABATICPAN { get { return ".ADIABATICPAN."; } private set { } }
		public static string ADIABATICWETTEDELEMENT { get { return ".ADIABATICWETTEDELEMENT."; } private set { } }
		public static string ADIABATICATOMIZING { get { return ".ADIABATICATOMIZING."; } private set { } }
		public static string ADIABATICULTRASONIC { get { return ".ADIABATICULTRASONIC."; } private set { } }
		public static string ADIABATICRIGIDMEDIA { get { return ".ADIABATICRIGIDMEDIA."; } private set { } }
		public static string ADIABATICCOMPRESSEDAIRNOZZLE { get { return ".ADIABATICCOMPRESSEDAIRNOZZLE."; } private set { } }
		public static string ASSISTEDELECTRIC { get { return ".ASSISTEDELECTRIC."; } private set { } }
		public static string ASSISTEDNATURALGAS { get { return ".ASSISTEDNATURALGAS."; } private set { } }
		public static string ASSISTEDPROPANE { get { return ".ASSISTEDPROPANE."; } private set { } }
		public static string ASSISTEDBUTANE { get { return ".ASSISTEDBUTANE."; } private set { } }
		public static string ASSISTEDSTEAM { get { return ".ASSISTEDSTEAM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcHumidifierTypeEnum() { Value = ".STEAMINJECTION.";}
		public IfcHumidifierTypeEnum(string value) { Value = value; }
		public static implicit operator IfcHumidifierTypeEnum(string value) { return new IfcHumidifierTypeEnum(value);}
		public static implicit operator string(IfcHumidifierTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInternalOrExternalEnum = ENUMERATION OF
	/// (INTERNAL
	/// ,EXTERNAL
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcInternalOrExternalEnum: Global.IfcInternalOrExternalEnum
	{
		public static string INTERNAL { get { return ".INTERNAL."; } private set { } }
		public static string EXTERNAL { get { return ".EXTERNAL."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcInternalOrExternalEnum() { Value = ".INTERNAL.";}
		public IfcInternalOrExternalEnum(string value) { Value = value; }
		public static implicit operator IfcInternalOrExternalEnum(string value) { return new IfcInternalOrExternalEnum(value);}
		public static implicit operator string(IfcInternalOrExternalEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInventoryTypeEnum = ENUMERATION OF
	/// (ASSETINVENTORY
	/// ,SPACEINVENTORY
	/// ,FURNITUREINVENTORY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcInventoryTypeEnum: Global.IfcInventoryTypeEnum
	{
		public static string ASSETINVENTORY { get { return ".ASSETINVENTORY."; } private set { } }
		public static string SPACEINVENTORY { get { return ".SPACEINVENTORY."; } private set { } }
		public static string FURNITUREINVENTORY { get { return ".FURNITUREINVENTORY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcInventoryTypeEnum() { Value = ".ASSETINVENTORY.";}
		public IfcInventoryTypeEnum(string value) { Value = value; }
		public static implicit operator IfcInventoryTypeEnum(string value) { return new IfcInventoryTypeEnum(value);}
		public static implicit operator string(IfcInventoryTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcJunctionBoxTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcJunctionBoxTypeEnum: Global.IfcJunctionBoxTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcJunctionBoxTypeEnum() { Value = ".USERDEFINED.";}
		public IfcJunctionBoxTypeEnum(string value) { Value = value; }
		public static implicit operator IfcJunctionBoxTypeEnum(string value) { return new IfcJunctionBoxTypeEnum(value);}
		public static implicit operator string(IfcJunctionBoxTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLampTypeEnum = ENUMERATION OF
	/// (COMPACTFLUORESCENT
	/// ,FLUORESCENT
	/// ,HIGHPRESSUREMERCURY
	/// ,HIGHPRESSURESODIUM
	/// ,METALHALIDE
	/// ,TUNGSTENFILAMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcLampTypeEnum: Global.IfcLampTypeEnum
	{
		public static string COMPACTFLUORESCENT { get { return ".COMPACTFLUORESCENT."; } private set { } }
		public static string FLUORESCENT { get { return ".FLUORESCENT."; } private set { } }
		public static string HIGHPRESSUREMERCURY { get { return ".HIGHPRESSUREMERCURY."; } private set { } }
		public static string HIGHPRESSURESODIUM { get { return ".HIGHPRESSURESODIUM."; } private set { } }
		public static string METALHALIDE { get { return ".METALHALIDE."; } private set { } }
		public static string TUNGSTENFILAMENT { get { return ".TUNGSTENFILAMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcLampTypeEnum() { Value = ".COMPACTFLUORESCENT.";}
		public IfcLampTypeEnum(string value) { Value = value; }
		public static implicit operator IfcLampTypeEnum(string value) { return new IfcLampTypeEnum(value);}
		public static implicit operator string(IfcLampTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLayerSetDirectionEnum = ENUMERATION OF
	/// (AXIS1
	/// ,AXIS2
	/// ,AXIS3);
	/// END_TYPE;
	/// <summary>
	public class IfcLayerSetDirectionEnum: Global.IfcLayerSetDirectionEnum
	{
		public static string AXIS1 { get { return ".AXIS1."; } private set { } }
		public static string AXIS2 { get { return ".AXIS2."; } private set { } }
		public static string AXIS3 { get { return ".AXIS3."; } private set { } }
		public string Value {get; set;}
		public IfcLayerSetDirectionEnum() { Value = ".AXIS1.";}
		public IfcLayerSetDirectionEnum(string value) { Value = value; }
		public static implicit operator IfcLayerSetDirectionEnum(string value) { return new IfcLayerSetDirectionEnum(value);}
		public static implicit operator string(IfcLayerSetDirectionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLightDistributionCurveEnum = ENUMERATION OF
	/// (TYPE_A
	/// ,TYPE_B
	/// ,TYPE_C
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcLightDistributionCurveEnum: Global.IfcLightDistributionCurveEnum
	{
		public static string TYPE_A { get { return ".TYPE_A."; } private set { } }
		public static string TYPE_B { get { return ".TYPE_B."; } private set { } }
		public static string TYPE_C { get { return ".TYPE_C."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcLightDistributionCurveEnum() { Value = ".TYPE_A.";}
		public IfcLightDistributionCurveEnum(string value) { Value = value; }
		public static implicit operator IfcLightDistributionCurveEnum(string value) { return new IfcLightDistributionCurveEnum(value);}
		public static implicit operator string(IfcLightDistributionCurveEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLightEmissionSourceEnum = ENUMERATION OF
	/// (COMPACTFLUORESCENT
	/// ,FLUORESCENT
	/// ,HIGHPRESSUREMERCURY
	/// ,HIGHPRESSURESODIUM
	/// ,LIGHTEMITTINGDIODE
	/// ,LOWPRESSURESODIUM
	/// ,LOWVOLTAGEHALOGEN
	/// ,MAINVOLTAGEHALOGEN
	/// ,METALHALIDE
	/// ,TUNGSTENFILAMENT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcLightEmissionSourceEnum: Global.IfcLightEmissionSourceEnum
	{
		public static string COMPACTFLUORESCENT { get { return ".COMPACTFLUORESCENT."; } private set { } }
		public static string FLUORESCENT { get { return ".FLUORESCENT."; } private set { } }
		public static string HIGHPRESSUREMERCURY { get { return ".HIGHPRESSUREMERCURY."; } private set { } }
		public static string HIGHPRESSURESODIUM { get { return ".HIGHPRESSURESODIUM."; } private set { } }
		public static string LIGHTEMITTINGDIODE { get { return ".LIGHTEMITTINGDIODE."; } private set { } }
		public static string LOWPRESSURESODIUM { get { return ".LOWPRESSURESODIUM."; } private set { } }
		public static string LOWVOLTAGEHALOGEN { get { return ".LOWVOLTAGEHALOGEN."; } private set { } }
		public static string MAINVOLTAGEHALOGEN { get { return ".MAINVOLTAGEHALOGEN."; } private set { } }
		public static string METALHALIDE { get { return ".METALHALIDE."; } private set { } }
		public static string TUNGSTENFILAMENT { get { return ".TUNGSTENFILAMENT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcLightEmissionSourceEnum() { Value = ".COMPACTFLUORESCENT.";}
		public IfcLightEmissionSourceEnum(string value) { Value = value; }
		public static implicit operator IfcLightEmissionSourceEnum(string value) { return new IfcLightEmissionSourceEnum(value);}
		public static implicit operator string(IfcLightEmissionSourceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLightFixtureTypeEnum = ENUMERATION OF
	/// (POINTSOURCE
	/// ,DIRECTIONSOURCE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcLightFixtureTypeEnum: Global.IfcLightFixtureTypeEnum
	{
		public static string POINTSOURCE { get { return ".POINTSOURCE."; } private set { } }
		public static string DIRECTIONSOURCE { get { return ".DIRECTIONSOURCE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcLightFixtureTypeEnum() { Value = ".POINTSOURCE.";}
		public IfcLightFixtureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcLightFixtureTypeEnum(string value) { return new IfcLightFixtureTypeEnum(value);}
		public static implicit operator string(IfcLightFixtureTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLoadGroupTypeEnum = ENUMERATION OF
	/// (LOAD_GROUP
	/// ,LOAD_CASE
	/// ,LOAD_COMBINATION_GROUP
	/// ,LOAD_COMBINATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcLoadGroupTypeEnum: Global.IfcLoadGroupTypeEnum
	{
		public static string LOAD_GROUP { get { return ".LOAD_GROUP."; } private set { } }
		public static string LOAD_CASE { get { return ".LOAD_CASE."; } private set { } }
		public static string LOAD_COMBINATION_GROUP { get { return ".LOAD_COMBINATION_GROUP."; } private set { } }
		public static string LOAD_COMBINATION { get { return ".LOAD_COMBINATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcLoadGroupTypeEnum() { Value = ".LOAD_GROUP.";}
		public IfcLoadGroupTypeEnum(string value) { Value = value; }
		public static implicit operator IfcLoadGroupTypeEnum(string value) { return new IfcLoadGroupTypeEnum(value);}
		public static implicit operator string(IfcLoadGroupTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLogicalOperatorEnum = ENUMERATION OF
	/// (LOGICALAND
	/// ,LOGICALOR);
	/// END_TYPE;
	/// <summary>
	public class IfcLogicalOperatorEnum: Global.IfcLogicalOperatorEnum
	{
		public static string LOGICALAND { get { return ".LOGICALAND."; } private set { } }
		public static string LOGICALOR { get { return ".LOGICALOR."; } private set { } }
		public string Value {get; set;}
		public IfcLogicalOperatorEnum() { Value = ".LOGICALAND.";}
		public IfcLogicalOperatorEnum(string value) { Value = value; }
		public static implicit operator IfcLogicalOperatorEnum(string value) { return new IfcLogicalOperatorEnum(value);}
		public static implicit operator string(IfcLogicalOperatorEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMemberTypeEnum = ENUMERATION OF
	/// (BRACE
	/// ,CHORD
	/// ,COLLAR
	/// ,MEMBER
	/// ,MULLION
	/// ,PLATE
	/// ,POST
	/// ,PURLIN
	/// ,RAFTER
	/// ,STRINGER
	/// ,STRUT
	/// ,STUD
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcMemberTypeEnum: Global.IfcMemberTypeEnum
	{
		public static string BRACE { get { return ".BRACE."; } private set { } }
		public static string CHORD { get { return ".CHORD."; } private set { } }
		public static string COLLAR { get { return ".COLLAR."; } private set { } }
		public static string MEMBER { get { return ".MEMBER."; } private set { } }
		public static string MULLION { get { return ".MULLION."; } private set { } }
		public static string PLATE { get { return ".PLATE."; } private set { } }
		public static string POST { get { return ".POST."; } private set { } }
		public static string PURLIN { get { return ".PURLIN."; } private set { } }
		public static string RAFTER { get { return ".RAFTER."; } private set { } }
		public static string STRINGER { get { return ".STRINGER."; } private set { } }
		public static string STRUT { get { return ".STRUT."; } private set { } }
		public static string STUD { get { return ".STUD."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcMemberTypeEnum() { Value = ".BRACE.";}
		public IfcMemberTypeEnum(string value) { Value = value; }
		public static implicit operator IfcMemberTypeEnum(string value) { return new IfcMemberTypeEnum(value);}
		public static implicit operator string(IfcMemberTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMotorConnectionTypeEnum = ENUMERATION OF
	/// (BELTDRIVE
	/// ,COUPLING
	/// ,DIRECTDRIVE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcMotorConnectionTypeEnum: Global.IfcMotorConnectionTypeEnum
	{
		public static string BELTDRIVE { get { return ".BELTDRIVE."; } private set { } }
		public static string COUPLING { get { return ".COUPLING."; } private set { } }
		public static string DIRECTDRIVE { get { return ".DIRECTDRIVE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcMotorConnectionTypeEnum() { Value = ".BELTDRIVE.";}
		public IfcMotorConnectionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcMotorConnectionTypeEnum(string value) { return new IfcMotorConnectionTypeEnum(value);}
		public static implicit operator string(IfcMotorConnectionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcNullStyle = ENUMERATION OF
	/// (NULL);
	/// END_TYPE;
	/// <summary>
	public class IfcNullStyle: IfcPresentationStyleSelect, Global.IfcNullStyle
	{
		public static string NULL { get { return ".NULL."; } private set { } }
		public virtual IfcLabel? Name { get; set;  }
		public string Value {get; set;}
		public IfcNullStyle() { Value = ".NULL.";}
		public IfcNullStyle(string value) { Value = value; }
		public static implicit operator IfcNullStyle(string value) { return new IfcNullStyle(value);}
		public static implicit operator string(IfcNullStyle value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcObjectTypeEnum = ENUMERATION OF
	/// (PRODUCT
	/// ,PROCESS
	/// ,CONTROL
	/// ,RESOURCE
	/// ,ACTOR
	/// ,GROUP
	/// ,PROJECT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcObjectTypeEnum: Global.IfcObjectTypeEnum
	{
		public static string PRODUCT { get { return ".PRODUCT."; } private set { } }
		public static string PROCESS { get { return ".PROCESS."; } private set { } }
		public static string CONTROL { get { return ".CONTROL."; } private set { } }
		public static string RESOURCE { get { return ".RESOURCE."; } private set { } }
		public static string ACTOR { get { return ".ACTOR."; } private set { } }
		public static string GROUP { get { return ".GROUP."; } private set { } }
		public static string PROJECT { get { return ".PROJECT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcObjectTypeEnum() { Value = ".PRODUCT.";}
		public IfcObjectTypeEnum(string value) { Value = value; }
		public static implicit operator IfcObjectTypeEnum(string value) { return new IfcObjectTypeEnum(value);}
		public static implicit operator string(IfcObjectTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcObjectiveEnum = ENUMERATION OF
	/// (CODECOMPLIANCE
	/// ,DESIGNINTENT
	/// ,HEALTHANDSAFETY
	/// ,REQUIREMENT
	/// ,SPECIFICATION
	/// ,TRIGGERCONDITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcObjectiveEnum: Global.IfcObjectiveEnum
	{
		public static string CODECOMPLIANCE { get { return ".CODECOMPLIANCE."; } private set { } }
		public static string DESIGNINTENT { get { return ".DESIGNINTENT."; } private set { } }
		public static string HEALTHANDSAFETY { get { return ".HEALTHANDSAFETY."; } private set { } }
		public static string REQUIREMENT { get { return ".REQUIREMENT."; } private set { } }
		public static string SPECIFICATION { get { return ".SPECIFICATION."; } private set { } }
		public static string TRIGGERCONDITION { get { return ".TRIGGERCONDITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcObjectiveEnum() { Value = ".CODECOMPLIANCE.";}
		public IfcObjectiveEnum(string value) { Value = value; }
		public static implicit operator IfcObjectiveEnum(string value) { return new IfcObjectiveEnum(value);}
		public static implicit operator string(IfcObjectiveEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcOccupantTypeEnum = ENUMERATION OF
	/// (ASSIGNEE
	/// ,ASSIGNOR
	/// ,LESSEE
	/// ,LESSOR
	/// ,LETTINGAGENT
	/// ,OWNER
	/// ,TENANT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcOccupantTypeEnum: Global.IfcOccupantTypeEnum
	{
		public static string ASSIGNEE { get { return ".ASSIGNEE."; } private set { } }
		public static string ASSIGNOR { get { return ".ASSIGNOR."; } private set { } }
		public static string LESSEE { get { return ".LESSEE."; } private set { } }
		public static string LESSOR { get { return ".LESSOR."; } private set { } }
		public static string LETTINGAGENT { get { return ".LETTINGAGENT."; } private set { } }
		public static string OWNER { get { return ".OWNER."; } private set { } }
		public static string TENANT { get { return ".TENANT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcOccupantTypeEnum() { Value = ".ASSIGNEE.";}
		public IfcOccupantTypeEnum(string value) { Value = value; }
		public static implicit operator IfcOccupantTypeEnum(string value) { return new IfcOccupantTypeEnum(value);}
		public static implicit operator string(IfcOccupantTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcOutletTypeEnum = ENUMERATION OF
	/// (AUDIOVISUALOUTLET
	/// ,COMMUNICATIONSOUTLET
	/// ,POWEROUTLET
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcOutletTypeEnum: Global.IfcOutletTypeEnum
	{
		public static string AUDIOVISUALOUTLET { get { return ".AUDIOVISUALOUTLET."; } private set { } }
		public static string COMMUNICATIONSOUTLET { get { return ".COMMUNICATIONSOUTLET."; } private set { } }
		public static string POWEROUTLET { get { return ".POWEROUTLET."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcOutletTypeEnum() { Value = ".AUDIOVISUALOUTLET.";}
		public IfcOutletTypeEnum(string value) { Value = value; }
		public static implicit operator IfcOutletTypeEnum(string value) { return new IfcOutletTypeEnum(value);}
		public static implicit operator string(IfcOutletTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPermeableCoveringOperationEnum = ENUMERATION OF
	/// (GRILL
	/// ,LOUVER
	/// ,SCREEN
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPermeableCoveringOperationEnum: Global.IfcPermeableCoveringOperationEnum
	{
		public static string GRILL { get { return ".GRILL."; } private set { } }
		public static string LOUVER { get { return ".LOUVER."; } private set { } }
		public static string SCREEN { get { return ".SCREEN."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPermeableCoveringOperationEnum() { Value = ".GRILL.";}
		public IfcPermeableCoveringOperationEnum(string value) { Value = value; }
		public static implicit operator IfcPermeableCoveringOperationEnum(string value) { return new IfcPermeableCoveringOperationEnum(value);}
		public static implicit operator string(IfcPermeableCoveringOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPhysicalOrVirtualEnum = ENUMERATION OF
	/// (PHYSICAL
	/// ,VIRTUAL
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPhysicalOrVirtualEnum: Global.IfcPhysicalOrVirtualEnum
	{
		public static string PHYSICAL { get { return ".PHYSICAL."; } private set { } }
		public static string VIRTUAL { get { return ".VIRTUAL."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPhysicalOrVirtualEnum() { Value = ".PHYSICAL.";}
		public IfcPhysicalOrVirtualEnum(string value) { Value = value; }
		public static implicit operator IfcPhysicalOrVirtualEnum(string value) { return new IfcPhysicalOrVirtualEnum(value);}
		public static implicit operator string(IfcPhysicalOrVirtualEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPileConstructionEnum = ENUMERATION OF
	/// (CAST_IN_PLACE
	/// ,COMPOSITE
	/// ,PRECAST_CONCRETE
	/// ,PREFAB_STEEL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPileConstructionEnum: Global.IfcPileConstructionEnum
	{
		public static string CAST_IN_PLACE { get { return ".CAST_IN_PLACE."; } private set { } }
		public static string COMPOSITE { get { return ".COMPOSITE."; } private set { } }
		public static string PRECAST_CONCRETE { get { return ".PRECAST_CONCRETE."; } private set { } }
		public static string PREFAB_STEEL { get { return ".PREFAB_STEEL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPileConstructionEnum() { Value = ".CAST_IN_PLACE.";}
		public IfcPileConstructionEnum(string value) { Value = value; }
		public static implicit operator IfcPileConstructionEnum(string value) { return new IfcPileConstructionEnum(value);}
		public static implicit operator string(IfcPileConstructionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPileTypeEnum = ENUMERATION OF
	/// (COHESION
	/// ,FRICTION
	/// ,SUPPORT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPileTypeEnum: Global.IfcPileTypeEnum
	{
		public static string COHESION { get { return ".COHESION."; } private set { } }
		public static string FRICTION { get { return ".FRICTION."; } private set { } }
		public static string SUPPORT { get { return ".SUPPORT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPileTypeEnum() { Value = ".COHESION.";}
		public IfcPileTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPileTypeEnum(string value) { return new IfcPileTypeEnum(value);}
		public static implicit operator string(IfcPileTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPipeFittingTypeEnum = ENUMERATION OF
	/// (BEND
	/// ,CONNECTOR
	/// ,ENTRY
	/// ,EXIT
	/// ,JUNCTION
	/// ,OBSTRUCTION
	/// ,TRANSITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPipeFittingTypeEnum: Global.IfcPipeFittingTypeEnum
	{
		public static string BEND { get { return ".BEND."; } private set { } }
		public static string CONNECTOR { get { return ".CONNECTOR."; } private set { } }
		public static string ENTRY { get { return ".ENTRY."; } private set { } }
		public static string EXIT { get { return ".EXIT."; } private set { } }
		public static string JUNCTION { get { return ".JUNCTION."; } private set { } }
		public static string OBSTRUCTION { get { return ".OBSTRUCTION."; } private set { } }
		public static string TRANSITION { get { return ".TRANSITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPipeFittingTypeEnum() { Value = ".BEND.";}
		public IfcPipeFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPipeFittingTypeEnum(string value) { return new IfcPipeFittingTypeEnum(value);}
		public static implicit operator string(IfcPipeFittingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPipeSegmentTypeEnum = ENUMERATION OF
	/// (FLEXIBLESEGMENT
	/// ,RIGIDSEGMENT
	/// ,GUTTER
	/// ,SPOOL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPipeSegmentTypeEnum: Global.IfcPipeSegmentTypeEnum
	{
		public static string FLEXIBLESEGMENT { get { return ".FLEXIBLESEGMENT."; } private set { } }
		public static string RIGIDSEGMENT { get { return ".RIGIDSEGMENT."; } private set { } }
		public static string GUTTER { get { return ".GUTTER."; } private set { } }
		public static string SPOOL { get { return ".SPOOL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPipeSegmentTypeEnum() { Value = ".FLEXIBLESEGMENT.";}
		public IfcPipeSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPipeSegmentTypeEnum(string value) { return new IfcPipeSegmentTypeEnum(value);}
		public static implicit operator string(IfcPipeSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPlateTypeEnum = ENUMERATION OF
	/// (CURTAIN_PANEL
	/// ,SHEET
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPlateTypeEnum: Global.IfcPlateTypeEnum
	{
		public static string CURTAIN_PANEL { get { return ".CURTAIN_PANEL."; } private set { } }
		public static string SHEET { get { return ".SHEET."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPlateTypeEnum() { Value = ".CURTAIN_PANEL.";}
		public IfcPlateTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPlateTypeEnum(string value) { return new IfcPlateTypeEnum(value);}
		public static implicit operator string(IfcPlateTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProcedureTypeEnum = ENUMERATION OF
	/// (ADVICE_CAUTION
	/// ,ADVICE_NOTE
	/// ,ADVICE_WARNING
	/// ,CALIBRATION
	/// ,DIAGNOSTIC
	/// ,SHUTDOWN
	/// ,STARTUP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcProcedureTypeEnum: Global.IfcProcedureTypeEnum
	{
		public static string ADVICE_CAUTION { get { return ".ADVICE_CAUTION."; } private set { } }
		public static string ADVICE_NOTE { get { return ".ADVICE_NOTE."; } private set { } }
		public static string ADVICE_WARNING { get { return ".ADVICE_WARNING."; } private set { } }
		public static string CALIBRATION { get { return ".CALIBRATION."; } private set { } }
		public static string DIAGNOSTIC { get { return ".DIAGNOSTIC."; } private set { } }
		public static string SHUTDOWN { get { return ".SHUTDOWN."; } private set { } }
		public static string STARTUP { get { return ".STARTUP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcProcedureTypeEnum() { Value = ".ADVICE_CAUTION.";}
		public IfcProcedureTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProcedureTypeEnum(string value) { return new IfcProcedureTypeEnum(value);}
		public static implicit operator string(IfcProcedureTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProfileTypeEnum = ENUMERATION OF
	/// (CURVE
	/// ,AREA);
	/// END_TYPE;
	/// <summary>
	public class IfcProfileTypeEnum: Global.IfcProfileTypeEnum
	{
		public static string CURVE { get { return ".CURVE."; } private set { } }
		public static string AREA { get { return ".AREA."; } private set { } }
		public string Value {get; set;}
		public IfcProfileTypeEnum() { Value = ".CURVE.";}
		public IfcProfileTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProfileTypeEnum(string value) { return new IfcProfileTypeEnum(value);}
		public static implicit operator string(IfcProfileTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProjectOrderRecordTypeEnum = ENUMERATION OF
	/// (CHANGE
	/// ,MAINTENANCE
	/// ,MOVE
	/// ,PURCHASE
	/// ,WORK
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcProjectOrderRecordTypeEnum: Global.IfcProjectOrderRecordTypeEnum
	{
		public static string CHANGE { get { return ".CHANGE."; } private set { } }
		public static string MAINTENANCE { get { return ".MAINTENANCE."; } private set { } }
		public static string MOVE { get { return ".MOVE."; } private set { } }
		public static string PURCHASE { get { return ".PURCHASE."; } private set { } }
		public static string WORK { get { return ".WORK."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcProjectOrderRecordTypeEnum() { Value = ".CHANGE.";}
		public IfcProjectOrderRecordTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProjectOrderRecordTypeEnum(string value) { return new IfcProjectOrderRecordTypeEnum(value);}
		public static implicit operator string(IfcProjectOrderRecordTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProjectOrderTypeEnum = ENUMERATION OF
	/// (CHANGEORDER
	/// ,MAINTENANCEWORKORDER
	/// ,MOVEORDER
	/// ,PURCHASEORDER
	/// ,WORKORDER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcProjectOrderTypeEnum: Global.IfcProjectOrderTypeEnum
	{
		public static string CHANGEORDER { get { return ".CHANGEORDER."; } private set { } }
		public static string MAINTENANCEWORKORDER { get { return ".MAINTENANCEWORKORDER."; } private set { } }
		public static string MOVEORDER { get { return ".MOVEORDER."; } private set { } }
		public static string PURCHASEORDER { get { return ".PURCHASEORDER."; } private set { } }
		public static string WORKORDER { get { return ".WORKORDER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcProjectOrderTypeEnum() { Value = ".CHANGEORDER.";}
		public IfcProjectOrderTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProjectOrderTypeEnum(string value) { return new IfcProjectOrderTypeEnum(value);}
		public static implicit operator string(IfcProjectOrderTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProjectedOrTrueLengthEnum = ENUMERATION OF
	/// (PROJECTED_LENGTH
	/// ,TRUE_LENGTH);
	/// END_TYPE;
	/// <summary>
	public class IfcProjectedOrTrueLengthEnum: Global.IfcProjectedOrTrueLengthEnum
	{
		public static string PROJECTED_LENGTH { get { return ".PROJECTED_LENGTH."; } private set { } }
		public static string TRUE_LENGTH { get { return ".TRUE_LENGTH."; } private set { } }
		public string Value {get; set;}
		public IfcProjectedOrTrueLengthEnum() { Value = ".PROJECTED_LENGTH.";}
		public IfcProjectedOrTrueLengthEnum(string value) { Value = value; }
		public static implicit operator IfcProjectedOrTrueLengthEnum(string value) { return new IfcProjectedOrTrueLengthEnum(value);}
		public static implicit operator string(IfcProjectedOrTrueLengthEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPropertySourceEnum = ENUMERATION OF
	/// (DESIGN
	/// ,DESIGNMAXIMUM
	/// ,DESIGNMINIMUM
	/// ,SIMULATED
	/// ,ASBUILT
	/// ,COMMISSIONING
	/// ,MEASURED
	/// ,USERDEFINED
	/// ,NOTKNOWN);
	/// END_TYPE;
	/// <summary>
	public class IfcPropertySourceEnum: Global.IfcPropertySourceEnum
	{
		public static string DESIGN { get { return ".DESIGN."; } private set { } }
		public static string DESIGNMAXIMUM { get { return ".DESIGNMAXIMUM."; } private set { } }
		public static string DESIGNMINIMUM { get { return ".DESIGNMINIMUM."; } private set { } }
		public static string SIMULATED { get { return ".SIMULATED."; } private set { } }
		public static string ASBUILT { get { return ".ASBUILT."; } private set { } }
		public static string COMMISSIONING { get { return ".COMMISSIONING."; } private set { } }
		public static string MEASURED { get { return ".MEASURED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTKNOWN { get { return ".NOTKNOWN."; } private set { } }
		public string Value {get; set;}
		public IfcPropertySourceEnum() { Value = ".DESIGN.";}
		public IfcPropertySourceEnum(string value) { Value = value; }
		public static implicit operator IfcPropertySourceEnum(string value) { return new IfcPropertySourceEnum(value);}
		public static implicit operator string(IfcPropertySourceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProtectiveDeviceTypeEnum = ENUMERATION OF
	/// (FUSEDISCONNECTOR
	/// ,CIRCUITBREAKER
	/// ,EARTHFAILUREDEVICE
	/// ,RESIDUALCURRENTCIRCUITBREAKER
	/// ,RESIDUALCURRENTSWITCH
	/// ,VARISTOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcProtectiveDeviceTypeEnum: Global.IfcProtectiveDeviceTypeEnum
	{
		public static string FUSEDISCONNECTOR { get { return ".FUSEDISCONNECTOR."; } private set { } }
		public static string CIRCUITBREAKER { get { return ".CIRCUITBREAKER."; } private set { } }
		public static string EARTHFAILUREDEVICE { get { return ".EARTHFAILUREDEVICE."; } private set { } }
		public static string RESIDUALCURRENTCIRCUITBREAKER { get { return ".RESIDUALCURRENTCIRCUITBREAKER."; } private set { } }
		public static string RESIDUALCURRENTSWITCH { get { return ".RESIDUALCURRENTSWITCH."; } private set { } }
		public static string VARISTOR { get { return ".VARISTOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcProtectiveDeviceTypeEnum() { Value = ".FUSEDISCONNECTOR.";}
		public IfcProtectiveDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcProtectiveDeviceTypeEnum(string value) { return new IfcProtectiveDeviceTypeEnum(value);}
		public static implicit operator string(IfcProtectiveDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPumpTypeEnum = ENUMERATION OF
	/// (CIRCULATOR
	/// ,ENDSUCTION
	/// ,SPLITCASE
	/// ,VERTICALINLINE
	/// ,VERTICALTURBINE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcPumpTypeEnum: Global.IfcPumpTypeEnum
	{
		public static string CIRCULATOR { get { return ".CIRCULATOR."; } private set { } }
		public static string ENDSUCTION { get { return ".ENDSUCTION."; } private set { } }
		public static string SPLITCASE { get { return ".SPLITCASE."; } private set { } }
		public static string VERTICALINLINE { get { return ".VERTICALINLINE."; } private set { } }
		public static string VERTICALTURBINE { get { return ".VERTICALTURBINE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcPumpTypeEnum() { Value = ".CIRCULATOR.";}
		public IfcPumpTypeEnum(string value) { Value = value; }
		public static implicit operator IfcPumpTypeEnum(string value) { return new IfcPumpTypeEnum(value);}
		public static implicit operator string(IfcPumpTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRailingTypeEnum = ENUMERATION OF
	/// (HANDRAIL
	/// ,GUARDRAIL
	/// ,BALUSTRADE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcRailingTypeEnum: Global.IfcRailingTypeEnum
	{
		public static string HANDRAIL { get { return ".HANDRAIL."; } private set { } }
		public static string GUARDRAIL { get { return ".GUARDRAIL."; } private set { } }
		public static string BALUSTRADE { get { return ".BALUSTRADE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcRailingTypeEnum() { Value = ".HANDRAIL.";}
		public IfcRailingTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRailingTypeEnum(string value) { return new IfcRailingTypeEnum(value);}
		public static implicit operator string(IfcRailingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRampFlightTypeEnum = ENUMERATION OF
	/// (STRAIGHT
	/// ,SPIRAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcRampFlightTypeEnum: Global.IfcRampFlightTypeEnum
	{
		public static string STRAIGHT { get { return ".STRAIGHT."; } private set { } }
		public static string SPIRAL { get { return ".SPIRAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcRampFlightTypeEnum() { Value = ".STRAIGHT.";}
		public IfcRampFlightTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRampFlightTypeEnum(string value) { return new IfcRampFlightTypeEnum(value);}
		public static implicit operator string(IfcRampFlightTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRampTypeEnum = ENUMERATION OF
	/// (STRAIGHT_RUN_RAMP
	/// ,TWO_STRAIGHT_RUN_RAMP
	/// ,QUARTER_TURN_RAMP
	/// ,TWO_QUARTER_TURN_RAMP
	/// ,HALF_TURN_RAMP
	/// ,SPIRAL_RAMP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcRampTypeEnum: Global.IfcRampTypeEnum
	{
		public static string STRAIGHT_RUN_RAMP { get { return ".STRAIGHT_RUN_RAMP."; } private set { } }
		public static string TWO_STRAIGHT_RUN_RAMP { get { return ".TWO_STRAIGHT_RUN_RAMP."; } private set { } }
		public static string QUARTER_TURN_RAMP { get { return ".QUARTER_TURN_RAMP."; } private set { } }
		public static string TWO_QUARTER_TURN_RAMP { get { return ".TWO_QUARTER_TURN_RAMP."; } private set { } }
		public static string HALF_TURN_RAMP { get { return ".HALF_TURN_RAMP."; } private set { } }
		public static string SPIRAL_RAMP { get { return ".SPIRAL_RAMP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcRampTypeEnum() { Value = ".STRAIGHT_RUN_RAMP.";}
		public IfcRampTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRampTypeEnum(string value) { return new IfcRampTypeEnum(value);}
		public static implicit operator string(IfcRampTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReflectanceMethodEnum = ENUMERATION OF
	/// (BLINN
	/// ,FLAT
	/// ,GLASS
	/// ,MATT
	/// ,METAL
	/// ,MIRROR
	/// ,PHONG
	/// ,PLASTIC
	/// ,STRAUSS
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcReflectanceMethodEnum: Global.IfcReflectanceMethodEnum
	{
		public static string BLINN { get { return ".BLINN."; } private set { } }
		public static string FLAT { get { return ".FLAT."; } private set { } }
		public static string GLASS { get { return ".GLASS."; } private set { } }
		public static string MATT { get { return ".MATT."; } private set { } }
		public static string METAL { get { return ".METAL."; } private set { } }
		public static string MIRROR { get { return ".MIRROR."; } private set { } }
		public static string PHONG { get { return ".PHONG."; } private set { } }
		public static string PLASTIC { get { return ".PLASTIC."; } private set { } }
		public static string STRAUSS { get { return ".STRAUSS."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcReflectanceMethodEnum() { Value = ".BLINN.";}
		public IfcReflectanceMethodEnum(string value) { Value = value; }
		public static implicit operator IfcReflectanceMethodEnum(string value) { return new IfcReflectanceMethodEnum(value);}
		public static implicit operator string(IfcReflectanceMethodEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReinforcingBarRoleEnum = ENUMERATION OF
	/// (MAIN
	/// ,SHEAR
	/// ,LIGATURE
	/// ,STUD
	/// ,PUNCHING
	/// ,EDGE
	/// ,RING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcReinforcingBarRoleEnum: Global.IfcReinforcingBarRoleEnum
	{
		public static string MAIN { get { return ".MAIN."; } private set { } }
		public static string SHEAR { get { return ".SHEAR."; } private set { } }
		public static string LIGATURE { get { return ".LIGATURE."; } private set { } }
		public static string STUD { get { return ".STUD."; } private set { } }
		public static string PUNCHING { get { return ".PUNCHING."; } private set { } }
		public static string EDGE { get { return ".EDGE."; } private set { } }
		public static string RING { get { return ".RING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcReinforcingBarRoleEnum() { Value = ".MAIN.";}
		public IfcReinforcingBarRoleEnum(string value) { Value = value; }
		public static implicit operator IfcReinforcingBarRoleEnum(string value) { return new IfcReinforcingBarRoleEnum(value);}
		public static implicit operator string(IfcReinforcingBarRoleEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReinforcingBarSurfaceEnum = ENUMERATION OF
	/// (PLAIN
	/// ,TEXTURED);
	/// END_TYPE;
	/// <summary>
	public class IfcReinforcingBarSurfaceEnum: Global.IfcReinforcingBarSurfaceEnum
	{
		public static string PLAIN { get { return ".PLAIN."; } private set { } }
		public static string TEXTURED { get { return ".TEXTURED."; } private set { } }
		public string Value {get; set;}
		public IfcReinforcingBarSurfaceEnum() { Value = ".PLAIN.";}
		public IfcReinforcingBarSurfaceEnum(string value) { Value = value; }
		public static implicit operator IfcReinforcingBarSurfaceEnum(string value) { return new IfcReinforcingBarSurfaceEnum(value);}
		public static implicit operator string(IfcReinforcingBarSurfaceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcResourceConsumptionEnum = ENUMERATION OF
	/// (CONSUMED
	/// ,PARTIALLYCONSUMED
	/// ,NOTCONSUMED
	/// ,OCCUPIED
	/// ,PARTIALLYOCCUPIED
	/// ,NOTOCCUPIED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcResourceConsumptionEnum: Global.IfcResourceConsumptionEnum
	{
		public static string CONSUMED { get { return ".CONSUMED."; } private set { } }
		public static string PARTIALLYCONSUMED { get { return ".PARTIALLYCONSUMED."; } private set { } }
		public static string NOTCONSUMED { get { return ".NOTCONSUMED."; } private set { } }
		public static string OCCUPIED { get { return ".OCCUPIED."; } private set { } }
		public static string PARTIALLYOCCUPIED { get { return ".PARTIALLYOCCUPIED."; } private set { } }
		public static string NOTOCCUPIED { get { return ".NOTOCCUPIED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcResourceConsumptionEnum() { Value = ".CONSUMED.";}
		public IfcResourceConsumptionEnum(string value) { Value = value; }
		public static implicit operator IfcResourceConsumptionEnum(string value) { return new IfcResourceConsumptionEnum(value);}
		public static implicit operator string(IfcResourceConsumptionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRibPlateDirectionEnum = ENUMERATION OF
	/// (DIRECTION_X
	/// ,DIRECTION_Y);
	/// END_TYPE;
	/// <summary>
	public class IfcRibPlateDirectionEnum: Global.IfcRibPlateDirectionEnum
	{
		public static string DIRECTION_X { get { return ".DIRECTION_X."; } private set { } }
		public static string DIRECTION_Y { get { return ".DIRECTION_Y."; } private set { } }
		public string Value {get; set;}
		public IfcRibPlateDirectionEnum() { Value = ".DIRECTION_X.";}
		public IfcRibPlateDirectionEnum(string value) { Value = value; }
		public static implicit operator IfcRibPlateDirectionEnum(string value) { return new IfcRibPlateDirectionEnum(value);}
		public static implicit operator string(IfcRibPlateDirectionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRoleEnum = ENUMERATION OF
	/// (SUPPLIER
	/// ,MANUFACTURER
	/// ,CONTRACTOR
	/// ,SUBCONTRACTOR
	/// ,ARCHITECT
	/// ,STRUCTURALENGINEER
	/// ,COSTENGINEER
	/// ,CLIENT
	/// ,BUILDINGOWNER
	/// ,BUILDINGOPERATOR
	/// ,MECHANICALENGINEER
	/// ,ELECTRICALENGINEER
	/// ,PROJECTMANAGER
	/// ,FACILITIESMANAGER
	/// ,CIVILENGINEER
	/// ,COMISSIONINGENGINEER
	/// ,ENGINEER
	/// ,OWNER
	/// ,CONSULTANT
	/// ,CONSTRUCTIONMANAGER
	/// ,FIELDCONSTRUCTIONMANAGER
	/// ,RESELLER
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcRoleEnum: Global.IfcRoleEnum
	{
		public static string SUPPLIER { get { return ".SUPPLIER."; } private set { } }
		public static string MANUFACTURER { get { return ".MANUFACTURER."; } private set { } }
		public static string CONTRACTOR { get { return ".CONTRACTOR."; } private set { } }
		public static string SUBCONTRACTOR { get { return ".SUBCONTRACTOR."; } private set { } }
		public static string ARCHITECT { get { return ".ARCHITECT."; } private set { } }
		public static string STRUCTURALENGINEER { get { return ".STRUCTURALENGINEER."; } private set { } }
		public static string COSTENGINEER { get { return ".COSTENGINEER."; } private set { } }
		public static string CLIENT { get { return ".CLIENT."; } private set { } }
		public static string BUILDINGOWNER { get { return ".BUILDINGOWNER."; } private set { } }
		public static string BUILDINGOPERATOR { get { return ".BUILDINGOPERATOR."; } private set { } }
		public static string MECHANICALENGINEER { get { return ".MECHANICALENGINEER."; } private set { } }
		public static string ELECTRICALENGINEER { get { return ".ELECTRICALENGINEER."; } private set { } }
		public static string PROJECTMANAGER { get { return ".PROJECTMANAGER."; } private set { } }
		public static string FACILITIESMANAGER { get { return ".FACILITIESMANAGER."; } private set { } }
		public static string CIVILENGINEER { get { return ".CIVILENGINEER."; } private set { } }
		public static string COMISSIONINGENGINEER { get { return ".COMISSIONINGENGINEER."; } private set { } }
		public static string ENGINEER { get { return ".ENGINEER."; } private set { } }
		public static string OWNER { get { return ".OWNER."; } private set { } }
		public static string CONSULTANT { get { return ".CONSULTANT."; } private set { } }
		public static string CONSTRUCTIONMANAGER { get { return ".CONSTRUCTIONMANAGER."; } private set { } }
		public static string FIELDCONSTRUCTIONMANAGER { get { return ".FIELDCONSTRUCTIONMANAGER."; } private set { } }
		public static string RESELLER { get { return ".RESELLER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcRoleEnum() { Value = ".SUPPLIER.";}
		public IfcRoleEnum(string value) { Value = value; }
		public static implicit operator IfcRoleEnum(string value) { return new IfcRoleEnum(value);}
		public static implicit operator string(IfcRoleEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRoofTypeEnum = ENUMERATION OF
	/// (FLAT_ROOF
	/// ,SHED_ROOF
	/// ,GABLE_ROOF
	/// ,HIP_ROOF
	/// ,HIPPED_GABLE_ROOF
	/// ,GAMBREL_ROOF
	/// ,MANSARD_ROOF
	/// ,BARREL_ROOF
	/// ,RAINBOW_ROOF
	/// ,BUTTERFLY_ROOF
	/// ,PAVILION_ROOF
	/// ,DOME_ROOF
	/// ,FREEFORM
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcRoofTypeEnum: Global.IfcRoofTypeEnum
	{
		public static string FLAT_ROOF { get { return ".FLAT_ROOF."; } private set { } }
		public static string SHED_ROOF { get { return ".SHED_ROOF."; } private set { } }
		public static string GABLE_ROOF { get { return ".GABLE_ROOF."; } private set { } }
		public static string HIP_ROOF { get { return ".HIP_ROOF."; } private set { } }
		public static string HIPPED_GABLE_ROOF { get { return ".HIPPED_GABLE_ROOF."; } private set { } }
		public static string GAMBREL_ROOF { get { return ".GAMBREL_ROOF."; } private set { } }
		public static string MANSARD_ROOF { get { return ".MANSARD_ROOF."; } private set { } }
		public static string BARREL_ROOF { get { return ".BARREL_ROOF."; } private set { } }
		public static string RAINBOW_ROOF { get { return ".RAINBOW_ROOF."; } private set { } }
		public static string BUTTERFLY_ROOF { get { return ".BUTTERFLY_ROOF."; } private set { } }
		public static string PAVILION_ROOF { get { return ".PAVILION_ROOF."; } private set { } }
		public static string DOME_ROOF { get { return ".DOME_ROOF."; } private set { } }
		public static string FREEFORM { get { return ".FREEFORM."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcRoofTypeEnum() { Value = ".FLAT_ROOF.";}
		public IfcRoofTypeEnum(string value) { Value = value; }
		public static implicit operator IfcRoofTypeEnum(string value) { return new IfcRoofTypeEnum(value);}
		public static implicit operator string(IfcRoofTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSIPrefix = ENUMERATION OF
	/// (EXA
	/// ,PETA
	/// ,TERA
	/// ,GIGA
	/// ,MEGA
	/// ,KILO
	/// ,HECTO
	/// ,DECA
	/// ,DECI
	/// ,CENTI
	/// ,MILLI
	/// ,MICRO
	/// ,NANO
	/// ,PICO
	/// ,FEMTO
	/// ,ATTO);
	/// END_TYPE;
	/// <summary>
	public class IfcSIPrefix: Global.IfcSIPrefix
	{
		public static string EXA { get { return ".EXA."; } private set { } }
		public static string PETA { get { return ".PETA."; } private set { } }
		public static string TERA { get { return ".TERA."; } private set { } }
		public static string GIGA { get { return ".GIGA."; } private set { } }
		public static string MEGA { get { return ".MEGA."; } private set { } }
		public static string KILO { get { return ".KILO."; } private set { } }
		public static string HECTO { get { return ".HECTO."; } private set { } }
		public static string DECA { get { return ".DECA."; } private set { } }
		public static string DECI { get { return ".DECI."; } private set { } }
		public static string CENTI { get { return ".CENTI."; } private set { } }
		public static string MILLI { get { return ".MILLI."; } private set { } }
		public static string MICRO { get { return ".MICRO."; } private set { } }
		public static string NANO { get { return ".NANO."; } private set { } }
		public static string PICO { get { return ".PICO."; } private set { } }
		public static string FEMTO { get { return ".FEMTO."; } private set { } }
		public static string ATTO { get { return ".ATTO."; } private set { } }
		public string Value {get; set;}
		public IfcSIPrefix() { Value = ".EXA.";}
		public IfcSIPrefix(string value) { Value = value; }
		public static implicit operator IfcSIPrefix(string value) { return new IfcSIPrefix(value);}
		public static implicit operator string(IfcSIPrefix value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSIUnitName = ENUMERATION OF
	/// (AMPERE
	/// ,BECQUEREL
	/// ,CANDELA
	/// ,COULOMB
	/// ,CUBIC_METRE
	/// ,DEGREE_CELSIUS
	/// ,FARAD
	/// ,GRAM
	/// ,GRAY
	/// ,HENRY
	/// ,HERTZ
	/// ,JOULE
	/// ,KELVIN
	/// ,LUMEN
	/// ,LUX
	/// ,METRE
	/// ,MOLE
	/// ,NEWTON
	/// ,OHM
	/// ,PASCAL
	/// ,RADIAN
	/// ,SECOND
	/// ,SIEMENS
	/// ,SIEVERT
	/// ,SQUARE_METRE
	/// ,STERADIAN
	/// ,TESLA
	/// ,VOLT
	/// ,WATT
	/// ,WEBER);
	/// END_TYPE;
	/// <summary>
	public class IfcSIUnitName: Global.IfcSIUnitName
	{
		public static string AMPERE { get { return ".AMPERE."; } private set { } }
		public static string BECQUEREL { get { return ".BECQUEREL."; } private set { } }
		public static string CANDELA { get { return ".CANDELA."; } private set { } }
		public static string COULOMB { get { return ".COULOMB."; } private set { } }
		public static string CUBIC_METRE { get { return ".CUBIC_METRE."; } private set { } }
		public static string DEGREE_CELSIUS { get { return ".DEGREE_CELSIUS."; } private set { } }
		public static string FARAD { get { return ".FARAD."; } private set { } }
		public static string GRAM { get { return ".GRAM."; } private set { } }
		public static string GRAY { get { return ".GRAY."; } private set { } }
		public static string HENRY { get { return ".HENRY."; } private set { } }
		public static string HERTZ { get { return ".HERTZ."; } private set { } }
		public static string JOULE { get { return ".JOULE."; } private set { } }
		public static string KELVIN { get { return ".KELVIN."; } private set { } }
		public static string LUMEN { get { return ".LUMEN."; } private set { } }
		public static string LUX { get { return ".LUX."; } private set { } }
		public static string METRE { get { return ".METRE."; } private set { } }
		public static string MOLE { get { return ".MOLE."; } private set { } }
		public static string NEWTON { get { return ".NEWTON."; } private set { } }
		public static string OHM { get { return ".OHM."; } private set { } }
		public static string PASCAL { get { return ".PASCAL."; } private set { } }
		public static string RADIAN { get { return ".RADIAN."; } private set { } }
		public static string SECOND { get { return ".SECOND."; } private set { } }
		public static string SIEMENS { get { return ".SIEMENS."; } private set { } }
		public static string SIEVERT { get { return ".SIEVERT."; } private set { } }
		public static string SQUARE_METRE { get { return ".SQUARE_METRE."; } private set { } }
		public static string STERADIAN { get { return ".STERADIAN."; } private set { } }
		public static string TESLA { get { return ".TESLA."; } private set { } }
		public static string VOLT { get { return ".VOLT."; } private set { } }
		public static string WATT { get { return ".WATT."; } private set { } }
		public static string WEBER { get { return ".WEBER."; } private set { } }
		public string Value {get; set;}
		public IfcSIUnitName() { Value = ".AMPERE.";}
		public IfcSIUnitName(string value) { Value = value; }
		public static implicit operator IfcSIUnitName(string value) { return new IfcSIUnitName(value);}
		public static implicit operator string(IfcSIUnitName value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSanitaryTerminalTypeEnum = ENUMERATION OF
	/// (BATH
	/// ,BIDET
	/// ,CISTERN
	/// ,SHOWER
	/// ,SINK
	/// ,SANITARYFOUNTAIN
	/// ,TOILETPAN
	/// ,URINAL
	/// ,WASHHANDBASIN
	/// ,WCSEAT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSanitaryTerminalTypeEnum: Global.IfcSanitaryTerminalTypeEnum
	{
		public static string BATH { get { return ".BATH."; } private set { } }
		public static string BIDET { get { return ".BIDET."; } private set { } }
		public static string CISTERN { get { return ".CISTERN."; } private set { } }
		public static string SHOWER { get { return ".SHOWER."; } private set { } }
		public static string SINK { get { return ".SINK."; } private set { } }
		public static string SANITARYFOUNTAIN { get { return ".SANITARYFOUNTAIN."; } private set { } }
		public static string TOILETPAN { get { return ".TOILETPAN."; } private set { } }
		public static string URINAL { get { return ".URINAL."; } private set { } }
		public static string WASHHANDBASIN { get { return ".WASHHANDBASIN."; } private set { } }
		public static string WCSEAT { get { return ".WCSEAT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSanitaryTerminalTypeEnum() { Value = ".BATH.";}
		public IfcSanitaryTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSanitaryTerminalTypeEnum(string value) { return new IfcSanitaryTerminalTypeEnum(value);}
		public static implicit operator string(IfcSanitaryTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSectionTypeEnum = ENUMERATION OF
	/// (UNIFORM
	/// ,TAPERED);
	/// END_TYPE;
	/// <summary>
	public class IfcSectionTypeEnum: Global.IfcSectionTypeEnum
	{
		public static string UNIFORM { get { return ".UNIFORM."; } private set { } }
		public static string TAPERED { get { return ".TAPERED."; } private set { } }
		public string Value {get; set;}
		public IfcSectionTypeEnum() { Value = ".UNIFORM.";}
		public IfcSectionTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSectionTypeEnum(string value) { return new IfcSectionTypeEnum(value);}
		public static implicit operator string(IfcSectionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSensorTypeEnum = ENUMERATION OF
	/// (CO2SENSOR
	/// ,FIRESENSOR
	/// ,FLOWSENSOR
	/// ,GASSENSOR
	/// ,HEATSENSOR
	/// ,HUMIDITYSENSOR
	/// ,LIGHTSENSOR
	/// ,MOISTURESENSOR
	/// ,MOVEMENTSENSOR
	/// ,PRESSURESENSOR
	/// ,SMOKESENSOR
	/// ,SOUNDSENSOR
	/// ,TEMPERATURESENSOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSensorTypeEnum: Global.IfcSensorTypeEnum
	{
		public static string CO2SENSOR { get { return ".CO2SENSOR."; } private set { } }
		public static string FIRESENSOR { get { return ".FIRESENSOR."; } private set { } }
		public static string FLOWSENSOR { get { return ".FLOWSENSOR."; } private set { } }
		public static string GASSENSOR { get { return ".GASSENSOR."; } private set { } }
		public static string HEATSENSOR { get { return ".HEATSENSOR."; } private set { } }
		public static string HUMIDITYSENSOR { get { return ".HUMIDITYSENSOR."; } private set { } }
		public static string LIGHTSENSOR { get { return ".LIGHTSENSOR."; } private set { } }
		public static string MOISTURESENSOR { get { return ".MOISTURESENSOR."; } private set { } }
		public static string MOVEMENTSENSOR { get { return ".MOVEMENTSENSOR."; } private set { } }
		public static string PRESSURESENSOR { get { return ".PRESSURESENSOR."; } private set { } }
		public static string SMOKESENSOR { get { return ".SMOKESENSOR."; } private set { } }
		public static string SOUNDSENSOR { get { return ".SOUNDSENSOR."; } private set { } }
		public static string TEMPERATURESENSOR { get { return ".TEMPERATURESENSOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSensorTypeEnum() { Value = ".CO2SENSOR.";}
		public IfcSensorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSensorTypeEnum(string value) { return new IfcSensorTypeEnum(value);}
		public static implicit operator string(IfcSensorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSequenceEnum = ENUMERATION OF
	/// (START_START
	/// ,START_FINISH
	/// ,FINISH_START
	/// ,FINISH_FINISH
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSequenceEnum: Global.IfcSequenceEnum
	{
		public static string START_START { get { return ".START_START."; } private set { } }
		public static string START_FINISH { get { return ".START_FINISH."; } private set { } }
		public static string FINISH_START { get { return ".FINISH_START."; } private set { } }
		public static string FINISH_FINISH { get { return ".FINISH_FINISH."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSequenceEnum() { Value = ".START_START.";}
		public IfcSequenceEnum(string value) { Value = value; }
		public static implicit operator IfcSequenceEnum(string value) { return new IfcSequenceEnum(value);}
		public static implicit operator string(IfcSequenceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcServiceLifeFactorTypeEnum = ENUMERATION OF
	/// (A_QUALITYOFCOMPONENTS
	/// ,B_DESIGNLEVEL
	/// ,C_WORKEXECUTIONLEVEL
	/// ,D_INDOORENVIRONMENT
	/// ,E_OUTDOORENVIRONMENT
	/// ,F_INUSECONDITIONS
	/// ,G_MAINTENANCELEVEL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcServiceLifeFactorTypeEnum: Global.IfcServiceLifeFactorTypeEnum
	{
		public static string A_QUALITYOFCOMPONENTS { get { return ".A_QUALITYOFCOMPONENTS."; } private set { } }
		public static string B_DESIGNLEVEL { get { return ".B_DESIGNLEVEL."; } private set { } }
		public static string C_WORKEXECUTIONLEVEL { get { return ".C_WORKEXECUTIONLEVEL."; } private set { } }
		public static string D_INDOORENVIRONMENT { get { return ".D_INDOORENVIRONMENT."; } private set { } }
		public static string E_OUTDOORENVIRONMENT { get { return ".E_OUTDOORENVIRONMENT."; } private set { } }
		public static string F_INUSECONDITIONS { get { return ".F_INUSECONDITIONS."; } private set { } }
		public static string G_MAINTENANCELEVEL { get { return ".G_MAINTENANCELEVEL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcServiceLifeFactorTypeEnum() { Value = ".A_QUALITYOFCOMPONENTS.";}
		public IfcServiceLifeFactorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcServiceLifeFactorTypeEnum(string value) { return new IfcServiceLifeFactorTypeEnum(value);}
		public static implicit operator string(IfcServiceLifeFactorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcServiceLifeTypeEnum = ENUMERATION OF
	/// (ACTUALSERVICELIFE
	/// ,EXPECTEDSERVICELIFE
	/// ,OPTIMISTICREFERENCESERVICELIFE
	/// ,PESSIMISTICREFERENCESERVICELIFE
	/// ,REFERENCESERVICELIFE);
	/// END_TYPE;
	/// <summary>
	public class IfcServiceLifeTypeEnum: Global.IfcServiceLifeTypeEnum
	{
		public static string ACTUALSERVICELIFE { get { return ".ACTUALSERVICELIFE."; } private set { } }
		public static string EXPECTEDSERVICELIFE { get { return ".EXPECTEDSERVICELIFE."; } private set { } }
		public static string OPTIMISTICREFERENCESERVICELIFE { get { return ".OPTIMISTICREFERENCESERVICELIFE."; } private set { } }
		public static string PESSIMISTICREFERENCESERVICELIFE { get { return ".PESSIMISTICREFERENCESERVICELIFE."; } private set { } }
		public static string REFERENCESERVICELIFE { get { return ".REFERENCESERVICELIFE."; } private set { } }
		public string Value {get; set;}
		public IfcServiceLifeTypeEnum() { Value = ".ACTUALSERVICELIFE.";}
		public IfcServiceLifeTypeEnum(string value) { Value = value; }
		public static implicit operator IfcServiceLifeTypeEnum(string value) { return new IfcServiceLifeTypeEnum(value);}
		public static implicit operator string(IfcServiceLifeTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSlabTypeEnum = ENUMERATION OF
	/// (FLOOR
	/// ,ROOF
	/// ,LANDING
	/// ,BASESLAB
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSlabTypeEnum: Global.IfcSlabTypeEnum
	{
		public static string FLOOR { get { return ".FLOOR."; } private set { } }
		public static string ROOF { get { return ".ROOF."; } private set { } }
		public static string LANDING { get { return ".LANDING."; } private set { } }
		public static string BASESLAB { get { return ".BASESLAB."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSlabTypeEnum() { Value = ".FLOOR.";}
		public IfcSlabTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSlabTypeEnum(string value) { return new IfcSlabTypeEnum(value);}
		public static implicit operator string(IfcSlabTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSoundScaleEnum = ENUMERATION OF
	/// (DBA
	/// ,DBB
	/// ,DBC
	/// ,NC
	/// ,NR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSoundScaleEnum: Global.IfcSoundScaleEnum
	{
		public static string DBA { get { return ".DBA."; } private set { } }
		public static string DBB { get { return ".DBB."; } private set { } }
		public static string DBC { get { return ".DBC."; } private set { } }
		public static string NC { get { return ".NC."; } private set { } }
		public static string NR { get { return ".NR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSoundScaleEnum() { Value = ".DBA.";}
		public IfcSoundScaleEnum(string value) { Value = value; }
		public static implicit operator IfcSoundScaleEnum(string value) { return new IfcSoundScaleEnum(value);}
		public static implicit operator string(IfcSoundScaleEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpaceHeaterTypeEnum = ENUMERATION OF
	/// (SECTIONALRADIATOR
	/// ,PANELRADIATOR
	/// ,TUBULARRADIATOR
	/// ,CONVECTOR
	/// ,BASEBOARDHEATER
	/// ,FINNEDTUBEUNIT
	/// ,UNITHEATER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSpaceHeaterTypeEnum: Global.IfcSpaceHeaterTypeEnum
	{
		public static string SECTIONALRADIATOR { get { return ".SECTIONALRADIATOR."; } private set { } }
		public static string PANELRADIATOR { get { return ".PANELRADIATOR."; } private set { } }
		public static string TUBULARRADIATOR { get { return ".TUBULARRADIATOR."; } private set { } }
		public static string CONVECTOR { get { return ".CONVECTOR."; } private set { } }
		public static string BASEBOARDHEATER { get { return ".BASEBOARDHEATER."; } private set { } }
		public static string FINNEDTUBEUNIT { get { return ".FINNEDTUBEUNIT."; } private set { } }
		public static string UNITHEATER { get { return ".UNITHEATER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSpaceHeaterTypeEnum() { Value = ".SECTIONALRADIATOR.";}
		public IfcSpaceHeaterTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSpaceHeaterTypeEnum(string value) { return new IfcSpaceHeaterTypeEnum(value);}
		public static implicit operator string(IfcSpaceHeaterTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpaceTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSpaceTypeEnum: Global.IfcSpaceTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSpaceTypeEnum() { Value = ".USERDEFINED.";}
		public IfcSpaceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSpaceTypeEnum(string value) { return new IfcSpaceTypeEnum(value);}
		public static implicit operator string(IfcSpaceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStackTerminalTypeEnum = ENUMERATION OF
	/// (BIRDCAGE
	/// ,COWL
	/// ,RAINWATERHOPPER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStackTerminalTypeEnum: Global.IfcStackTerminalTypeEnum
	{
		public static string BIRDCAGE { get { return ".BIRDCAGE."; } private set { } }
		public static string COWL { get { return ".COWL."; } private set { } }
		public static string RAINWATERHOPPER { get { return ".RAINWATERHOPPER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStackTerminalTypeEnum() { Value = ".BIRDCAGE.";}
		public IfcStackTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStackTerminalTypeEnum(string value) { return new IfcStackTerminalTypeEnum(value);}
		public static implicit operator string(IfcStackTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStairFlightTypeEnum = ENUMERATION OF
	/// (STRAIGHT
	/// ,WINDER
	/// ,SPIRAL
	/// ,CURVED
	/// ,FREEFORM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStairFlightTypeEnum: Global.IfcStairFlightTypeEnum
	{
		public static string STRAIGHT { get { return ".STRAIGHT."; } private set { } }
		public static string WINDER { get { return ".WINDER."; } private set { } }
		public static string SPIRAL { get { return ".SPIRAL."; } private set { } }
		public static string CURVED { get { return ".CURVED."; } private set { } }
		public static string FREEFORM { get { return ".FREEFORM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStairFlightTypeEnum() { Value = ".STRAIGHT.";}
		public IfcStairFlightTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStairFlightTypeEnum(string value) { return new IfcStairFlightTypeEnum(value);}
		public static implicit operator string(IfcStairFlightTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStairTypeEnum = ENUMERATION OF
	/// (STRAIGHT_RUN_STAIR
	/// ,TWO_STRAIGHT_RUN_STAIR
	/// ,QUARTER_WINDING_STAIR
	/// ,QUARTER_TURN_STAIR
	/// ,HALF_WINDING_STAIR
	/// ,HALF_TURN_STAIR
	/// ,TWO_QUARTER_WINDING_STAIR
	/// ,TWO_QUARTER_TURN_STAIR
	/// ,THREE_QUARTER_WINDING_STAIR
	/// ,THREE_QUARTER_TURN_STAIR
	/// ,SPIRAL_STAIR
	/// ,DOUBLE_RETURN_STAIR
	/// ,CURVED_RUN_STAIR
	/// ,TWO_CURVED_RUN_STAIR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStairTypeEnum: Global.IfcStairTypeEnum
	{
		public static string STRAIGHT_RUN_STAIR { get { return ".STRAIGHT_RUN_STAIR."; } private set { } }
		public static string TWO_STRAIGHT_RUN_STAIR { get { return ".TWO_STRAIGHT_RUN_STAIR."; } private set { } }
		public static string QUARTER_WINDING_STAIR { get { return ".QUARTER_WINDING_STAIR."; } private set { } }
		public static string QUARTER_TURN_STAIR { get { return ".QUARTER_TURN_STAIR."; } private set { } }
		public static string HALF_WINDING_STAIR { get { return ".HALF_WINDING_STAIR."; } private set { } }
		public static string HALF_TURN_STAIR { get { return ".HALF_TURN_STAIR."; } private set { } }
		public static string TWO_QUARTER_WINDING_STAIR { get { return ".TWO_QUARTER_WINDING_STAIR."; } private set { } }
		public static string TWO_QUARTER_TURN_STAIR { get { return ".TWO_QUARTER_TURN_STAIR."; } private set { } }
		public static string THREE_QUARTER_WINDING_STAIR { get { return ".THREE_QUARTER_WINDING_STAIR."; } private set { } }
		public static string THREE_QUARTER_TURN_STAIR { get { return ".THREE_QUARTER_TURN_STAIR."; } private set { } }
		public static string SPIRAL_STAIR { get { return ".SPIRAL_STAIR."; } private set { } }
		public static string DOUBLE_RETURN_STAIR { get { return ".DOUBLE_RETURN_STAIR."; } private set { } }
		public static string CURVED_RUN_STAIR { get { return ".CURVED_RUN_STAIR."; } private set { } }
		public static string TWO_CURVED_RUN_STAIR { get { return ".TWO_CURVED_RUN_STAIR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStairTypeEnum() { Value = ".STRAIGHT_RUN_STAIR.";}
		public IfcStairTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStairTypeEnum(string value) { return new IfcStairTypeEnum(value);}
		public static implicit operator string(IfcStairTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStateEnum = ENUMERATION OF
	/// (READWRITE
	/// ,READONLY
	/// ,LOCKED
	/// ,READWRITELOCKED
	/// ,READONLYLOCKED);
	/// END_TYPE;
	/// <summary>
	public class IfcStateEnum: Global.IfcStateEnum
	{
		public static string READWRITE { get { return ".READWRITE."; } private set { } }
		public static string READONLY { get { return ".READONLY."; } private set { } }
		public static string LOCKED { get { return ".LOCKED."; } private set { } }
		public static string READWRITELOCKED { get { return ".READWRITELOCKED."; } private set { } }
		public static string READONLYLOCKED { get { return ".READONLYLOCKED."; } private set { } }
		public string Value {get; set;}
		public IfcStateEnum() { Value = ".READWRITE.";}
		public IfcStateEnum(string value) { Value = value; }
		public static implicit operator IfcStateEnum(string value) { return new IfcStateEnum(value);}
		public static implicit operator string(IfcStateEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStructuralCurveTypeEnum = ENUMERATION OF
	/// (RIGID_JOINED_MEMBER
	/// ,PIN_JOINED_MEMBER
	/// ,CABLE
	/// ,TENSION_MEMBER
	/// ,COMPRESSION_MEMBER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStructuralCurveTypeEnum: Global.IfcStructuralCurveTypeEnum
	{
		public static string RIGID_JOINED_MEMBER { get { return ".RIGID_JOINED_MEMBER."; } private set { } }
		public static string PIN_JOINED_MEMBER { get { return ".PIN_JOINED_MEMBER."; } private set { } }
		public static string CABLE { get { return ".CABLE."; } private set { } }
		public static string TENSION_MEMBER { get { return ".TENSION_MEMBER."; } private set { } }
		public static string COMPRESSION_MEMBER { get { return ".COMPRESSION_MEMBER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStructuralCurveTypeEnum() { Value = ".RIGID_JOINED_MEMBER.";}
		public IfcStructuralCurveTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStructuralCurveTypeEnum(string value) { return new IfcStructuralCurveTypeEnum(value);}
		public static implicit operator string(IfcStructuralCurveTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStructuralSurfaceTypeEnum = ENUMERATION OF
	/// (BENDING_ELEMENT
	/// ,MEMBRANE_ELEMENT
	/// ,SHELL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcStructuralSurfaceTypeEnum: Global.IfcStructuralSurfaceTypeEnum
	{
		public static string BENDING_ELEMENT { get { return ".BENDING_ELEMENT."; } private set { } }
		public static string MEMBRANE_ELEMENT { get { return ".MEMBRANE_ELEMENT."; } private set { } }
		public static string SHELL { get { return ".SHELL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcStructuralSurfaceTypeEnum() { Value = ".BENDING_ELEMENT.";}
		public IfcStructuralSurfaceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcStructuralSurfaceTypeEnum(string value) { return new IfcStructuralSurfaceTypeEnum(value);}
		public static implicit operator string(IfcStructuralSurfaceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSurfaceSide = ENUMERATION OF
	/// (POSITIVE
	/// ,NEGATIVE
	/// ,BOTH);
	/// END_TYPE;
	/// <summary>
	public class IfcSurfaceSide: Global.IfcSurfaceSide
	{
		public static string POSITIVE { get { return ".POSITIVE."; } private set { } }
		public static string NEGATIVE { get { return ".NEGATIVE."; } private set { } }
		public static string BOTH { get { return ".BOTH."; } private set { } }
		public string Value {get; set;}
		public IfcSurfaceSide() { Value = ".POSITIVE.";}
		public IfcSurfaceSide(string value) { Value = value; }
		public static implicit operator IfcSurfaceSide(string value) { return new IfcSurfaceSide(value);}
		public static implicit operator string(IfcSurfaceSide value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSurfaceTextureEnum = ENUMERATION OF
	/// (BUMP
	/// ,OPACITY
	/// ,REFLECTION
	/// ,SELFILLUMINATION
	/// ,SHININESS
	/// ,SPECULAR
	/// ,TEXTURE
	/// ,TRANSPARENCYMAP
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSurfaceTextureEnum: Global.IfcSurfaceTextureEnum
	{
		public static string BUMP { get { return ".BUMP."; } private set { } }
		public static string OPACITY { get { return ".OPACITY."; } private set { } }
		public static string REFLECTION { get { return ".REFLECTION."; } private set { } }
		public static string SELFILLUMINATION { get { return ".SELFILLUMINATION."; } private set { } }
		public static string SHININESS { get { return ".SHININESS."; } private set { } }
		public static string SPECULAR { get { return ".SPECULAR."; } private set { } }
		public static string TEXTURE { get { return ".TEXTURE."; } private set { } }
		public static string TRANSPARENCYMAP { get { return ".TRANSPARENCYMAP."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSurfaceTextureEnum() { Value = ".BUMP.";}
		public IfcSurfaceTextureEnum(string value) { Value = value; }
		public static implicit operator IfcSurfaceTextureEnum(string value) { return new IfcSurfaceTextureEnum(value);}
		public static implicit operator string(IfcSurfaceTextureEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSwitchingDeviceTypeEnum = ENUMERATION OF
	/// (CONTACTOR
	/// ,EMERGENCYSTOP
	/// ,STARTER
	/// ,SWITCHDISCONNECTOR
	/// ,TOGGLESWITCH
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcSwitchingDeviceTypeEnum: Global.IfcSwitchingDeviceTypeEnum
	{
		public static string CONTACTOR { get { return ".CONTACTOR."; } private set { } }
		public static string EMERGENCYSTOP { get { return ".EMERGENCYSTOP."; } private set { } }
		public static string STARTER { get { return ".STARTER."; } private set { } }
		public static string SWITCHDISCONNECTOR { get { return ".SWITCHDISCONNECTOR."; } private set { } }
		public static string TOGGLESWITCH { get { return ".TOGGLESWITCH."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcSwitchingDeviceTypeEnum() { Value = ".CONTACTOR.";}
		public IfcSwitchingDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IfcSwitchingDeviceTypeEnum(string value) { return new IfcSwitchingDeviceTypeEnum(value);}
		public static implicit operator string(IfcSwitchingDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTankTypeEnum = ENUMERATION OF
	/// (PREFORMED
	/// ,SECTIONAL
	/// ,EXPANSION
	/// ,PRESSUREVESSEL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTankTypeEnum: Global.IfcTankTypeEnum
	{
		public static string PREFORMED { get { return ".PREFORMED."; } private set { } }
		public static string SECTIONAL { get { return ".SECTIONAL."; } private set { } }
		public static string EXPANSION { get { return ".EXPANSION."; } private set { } }
		public static string PRESSUREVESSEL { get { return ".PRESSUREVESSEL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTankTypeEnum() { Value = ".PREFORMED.";}
		public IfcTankTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTankTypeEnum(string value) { return new IfcTankTypeEnum(value);}
		public static implicit operator string(IfcTankTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTendonTypeEnum = ENUMERATION OF
	/// (STRAND
	/// ,WIRE
	/// ,BAR
	/// ,COATED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTendonTypeEnum: Global.IfcTendonTypeEnum
	{
		public static string STRAND { get { return ".STRAND."; } private set { } }
		public static string WIRE { get { return ".WIRE."; } private set { } }
		public static string BAR { get { return ".BAR."; } private set { } }
		public static string COATED { get { return ".COATED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTendonTypeEnum() { Value = ".STRAND.";}
		public IfcTendonTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTendonTypeEnum(string value) { return new IfcTendonTypeEnum(value);}
		public static implicit operator string(IfcTendonTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextPath = ENUMERATION OF
	/// (LEFT
	/// ,RIGHT
	/// ,UP
	/// ,DOWN);
	/// END_TYPE;
	/// <summary>
	public class IfcTextPath: Global.IfcTextPath
	{
		public static string LEFT { get { return ".LEFT."; } private set { } }
		public static string RIGHT { get { return ".RIGHT."; } private set { } }
		public static string UP { get { return ".UP."; } private set { } }
		public static string DOWN { get { return ".DOWN."; } private set { } }
		public string Value {get; set;}
		public IfcTextPath() { Value = ".LEFT.";}
		public IfcTextPath(string value) { Value = value; }
		public static implicit operator IfcTextPath(string value) { return new IfcTextPath(value);}
		public static implicit operator string(IfcTextPath value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalLoadSourceEnum = ENUMERATION OF
	/// (PEOPLE
	/// ,LIGHTING
	/// ,EQUIPMENT
	/// ,VENTILATIONINDOORAIR
	/// ,VENTILATIONOUTSIDEAIR
	/// ,RECIRCULATEDAIR
	/// ,EXHAUSTAIR
	/// ,AIREXCHANGERATE
	/// ,DRYBULBTEMPERATURE
	/// ,RELATIVEHUMIDITY
	/// ,INFILTRATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcThermalLoadSourceEnum: Global.IfcThermalLoadSourceEnum
	{
		public static string PEOPLE { get { return ".PEOPLE."; } private set { } }
		public static string LIGHTING { get { return ".LIGHTING."; } private set { } }
		public static string EQUIPMENT { get { return ".EQUIPMENT."; } private set { } }
		public static string VENTILATIONINDOORAIR { get { return ".VENTILATIONINDOORAIR."; } private set { } }
		public static string VENTILATIONOUTSIDEAIR { get { return ".VENTILATIONOUTSIDEAIR."; } private set { } }
		public static string RECIRCULATEDAIR { get { return ".RECIRCULATEDAIR."; } private set { } }
		public static string EXHAUSTAIR { get { return ".EXHAUSTAIR."; } private set { } }
		public static string AIREXCHANGERATE { get { return ".AIREXCHANGERATE."; } private set { } }
		public static string DRYBULBTEMPERATURE { get { return ".DRYBULBTEMPERATURE."; } private set { } }
		public static string RELATIVEHUMIDITY { get { return ".RELATIVEHUMIDITY."; } private set { } }
		public static string INFILTRATION { get { return ".INFILTRATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcThermalLoadSourceEnum() { Value = ".PEOPLE.";}
		public IfcThermalLoadSourceEnum(string value) { Value = value; }
		public static implicit operator IfcThermalLoadSourceEnum(string value) { return new IfcThermalLoadSourceEnum(value);}
		public static implicit operator string(IfcThermalLoadSourceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalLoadTypeEnum = ENUMERATION OF
	/// (SENSIBLE
	/// ,LATENT
	/// ,RADIANT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcThermalLoadTypeEnum: Global.IfcThermalLoadTypeEnum
	{
		public static string SENSIBLE { get { return ".SENSIBLE."; } private set { } }
		public static string LATENT { get { return ".LATENT."; } private set { } }
		public static string RADIANT { get { return ".RADIANT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcThermalLoadTypeEnum() { Value = ".SENSIBLE.";}
		public IfcThermalLoadTypeEnum(string value) { Value = value; }
		public static implicit operator IfcThermalLoadTypeEnum(string value) { return new IfcThermalLoadTypeEnum(value);}
		public static implicit operator string(IfcThermalLoadTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTimeSeriesDataTypeEnum = ENUMERATION OF
	/// (CONTINUOUS
	/// ,DISCRETE
	/// ,DISCRETEBINARY
	/// ,PIECEWISEBINARY
	/// ,PIECEWISECONSTANT
	/// ,PIECEWISECONTINUOUS
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTimeSeriesDataTypeEnum: Global.IfcTimeSeriesDataTypeEnum
	{
		public static string CONTINUOUS { get { return ".CONTINUOUS."; } private set { } }
		public static string DISCRETE { get { return ".DISCRETE."; } private set { } }
		public static string DISCRETEBINARY { get { return ".DISCRETEBINARY."; } private set { } }
		public static string PIECEWISEBINARY { get { return ".PIECEWISEBINARY."; } private set { } }
		public static string PIECEWISECONSTANT { get { return ".PIECEWISECONSTANT."; } private set { } }
		public static string PIECEWISECONTINUOUS { get { return ".PIECEWISECONTINUOUS."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTimeSeriesDataTypeEnum() { Value = ".CONTINUOUS.";}
		public IfcTimeSeriesDataTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTimeSeriesDataTypeEnum(string value) { return new IfcTimeSeriesDataTypeEnum(value);}
		public static implicit operator string(IfcTimeSeriesDataTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTimeSeriesScheduleTypeEnum = ENUMERATION OF
	/// (ANNUAL
	/// ,MONTHLY
	/// ,WEEKLY
	/// ,DAILY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTimeSeriesScheduleTypeEnum: Global.IfcTimeSeriesScheduleTypeEnum
	{
		public static string ANNUAL { get { return ".ANNUAL."; } private set { } }
		public static string MONTHLY { get { return ".MONTHLY."; } private set { } }
		public static string WEEKLY { get { return ".WEEKLY."; } private set { } }
		public static string DAILY { get { return ".DAILY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTimeSeriesScheduleTypeEnum() { Value = ".ANNUAL.";}
		public IfcTimeSeriesScheduleTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTimeSeriesScheduleTypeEnum(string value) { return new IfcTimeSeriesScheduleTypeEnum(value);}
		public static implicit operator string(IfcTimeSeriesScheduleTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTransformerTypeEnum = ENUMERATION OF
	/// (CURRENT
	/// ,FREQUENCY
	/// ,VOLTAGE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTransformerTypeEnum: Global.IfcTransformerTypeEnum
	{
		public static string CURRENT { get { return ".CURRENT."; } private set { } }
		public static string FREQUENCY { get { return ".FREQUENCY."; } private set { } }
		public static string VOLTAGE { get { return ".VOLTAGE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTransformerTypeEnum() { Value = ".CURRENT.";}
		public IfcTransformerTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTransformerTypeEnum(string value) { return new IfcTransformerTypeEnum(value);}
		public static implicit operator string(IfcTransformerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTransitionCode = ENUMERATION OF
	/// (DISCONTINUOUS
	/// ,CONTINUOUS
	/// ,CONTSAMEGRADIENT
	/// ,CONTSAMEGRADIENTSAMECURVATURE);
	/// END_TYPE;
	/// <summary>
	public class IfcTransitionCode: Global.IfcTransitionCode
	{
		public static string DISCONTINUOUS { get { return ".DISCONTINUOUS."; } private set { } }
		public static string CONTINUOUS { get { return ".CONTINUOUS."; } private set { } }
		public static string CONTSAMEGRADIENT { get { return ".CONTSAMEGRADIENT."; } private set { } }
		public static string CONTSAMEGRADIENTSAMECURVATURE { get { return ".CONTSAMEGRADIENTSAMECURVATURE."; } private set { } }
		public string Value {get; set;}
		public IfcTransitionCode() { Value = ".DISCONTINUOUS.";}
		public IfcTransitionCode(string value) { Value = value; }
		public static implicit operator IfcTransitionCode(string value) { return new IfcTransitionCode(value);}
		public static implicit operator string(IfcTransitionCode value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTransportElementTypeEnum = ENUMERATION OF
	/// (ELEVATOR
	/// ,ESCALATOR
	/// ,MOVINGWALKWAY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTransportElementTypeEnum: Global.IfcTransportElementTypeEnum
	{
		public static string ELEVATOR { get { return ".ELEVATOR."; } private set { } }
		public static string ESCALATOR { get { return ".ESCALATOR."; } private set { } }
		public static string MOVINGWALKWAY { get { return ".MOVINGWALKWAY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTransportElementTypeEnum() { Value = ".ELEVATOR.";}
		public IfcTransportElementTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTransportElementTypeEnum(string value) { return new IfcTransportElementTypeEnum(value);}
		public static implicit operator string(IfcTransportElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTrimmingPreference = ENUMERATION OF
	/// (CARTESIAN
	/// ,PARAMETER
	/// ,UNSPECIFIED);
	/// END_TYPE;
	/// <summary>
	public class IfcTrimmingPreference: Global.IfcTrimmingPreference
	{
		public static string CARTESIAN { get { return ".CARTESIAN."; } private set { } }
		public static string PARAMETER { get { return ".PARAMETER."; } private set { } }
		public static string UNSPECIFIED { get { return ".UNSPECIFIED."; } private set { } }
		public string Value {get; set;}
		public IfcTrimmingPreference() { Value = ".CARTESIAN.";}
		public IfcTrimmingPreference(string value) { Value = value; }
		public static implicit operator IfcTrimmingPreference(string value) { return new IfcTrimmingPreference(value);}
		public static implicit operator string(IfcTrimmingPreference value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTubeBundleTypeEnum = ENUMERATION OF
	/// (FINNED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcTubeBundleTypeEnum: Global.IfcTubeBundleTypeEnum
	{
		public static string FINNED { get { return ".FINNED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcTubeBundleTypeEnum() { Value = ".FINNED.";}
		public IfcTubeBundleTypeEnum(string value) { Value = value; }
		public static implicit operator IfcTubeBundleTypeEnum(string value) { return new IfcTubeBundleTypeEnum(value);}
		public static implicit operator string(IfcTubeBundleTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcUnitEnum = ENUMERATION OF
	/// (ABSORBEDDOSEUNIT
	/// ,AMOUNTOFSUBSTANCEUNIT
	/// ,AREAUNIT
	/// ,DOSEEQUIVALENTUNIT
	/// ,ELECTRICCAPACITANCEUNIT
	/// ,ELECTRICCHARGEUNIT
	/// ,ELECTRICCONDUCTANCEUNIT
	/// ,ELECTRICCURRENTUNIT
	/// ,ELECTRICRESISTANCEUNIT
	/// ,ELECTRICVOLTAGEUNIT
	/// ,ENERGYUNIT
	/// ,FORCEUNIT
	/// ,FREQUENCYUNIT
	/// ,ILLUMINANCEUNIT
	/// ,INDUCTANCEUNIT
	/// ,LENGTHUNIT
	/// ,LUMINOUSFLUXUNIT
	/// ,LUMINOUSINTENSITYUNIT
	/// ,MAGNETICFLUXDENSITYUNIT
	/// ,MAGNETICFLUXUNIT
	/// ,MASSUNIT
	/// ,PLANEANGLEUNIT
	/// ,POWERUNIT
	/// ,PRESSUREUNIT
	/// ,RADIOACTIVITYUNIT
	/// ,SOLIDANGLEUNIT
	/// ,THERMODYNAMICTEMPERATUREUNIT
	/// ,TIMEUNIT
	/// ,VOLUMEUNIT
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcUnitEnum: Global.IfcUnitEnum
	{
		public static string ABSORBEDDOSEUNIT { get { return ".ABSORBEDDOSEUNIT."; } private set { } }
		public static string AMOUNTOFSUBSTANCEUNIT { get { return ".AMOUNTOFSUBSTANCEUNIT."; } private set { } }
		public static string AREAUNIT { get { return ".AREAUNIT."; } private set { } }
		public static string DOSEEQUIVALENTUNIT { get { return ".DOSEEQUIVALENTUNIT."; } private set { } }
		public static string ELECTRICCAPACITANCEUNIT { get { return ".ELECTRICCAPACITANCEUNIT."; } private set { } }
		public static string ELECTRICCHARGEUNIT { get { return ".ELECTRICCHARGEUNIT."; } private set { } }
		public static string ELECTRICCONDUCTANCEUNIT { get { return ".ELECTRICCONDUCTANCEUNIT."; } private set { } }
		public static string ELECTRICCURRENTUNIT { get { return ".ELECTRICCURRENTUNIT."; } private set { } }
		public static string ELECTRICRESISTANCEUNIT { get { return ".ELECTRICRESISTANCEUNIT."; } private set { } }
		public static string ELECTRICVOLTAGEUNIT { get { return ".ELECTRICVOLTAGEUNIT."; } private set { } }
		public static string ENERGYUNIT { get { return ".ENERGYUNIT."; } private set { } }
		public static string FORCEUNIT { get { return ".FORCEUNIT."; } private set { } }
		public static string FREQUENCYUNIT { get { return ".FREQUENCYUNIT."; } private set { } }
		public static string ILLUMINANCEUNIT { get { return ".ILLUMINANCEUNIT."; } private set { } }
		public static string INDUCTANCEUNIT { get { return ".INDUCTANCEUNIT."; } private set { } }
		public static string LENGTHUNIT { get { return ".LENGTHUNIT."; } private set { } }
		public static string LUMINOUSFLUXUNIT { get { return ".LUMINOUSFLUXUNIT."; } private set { } }
		public static string LUMINOUSINTENSITYUNIT { get { return ".LUMINOUSINTENSITYUNIT."; } private set { } }
		public static string MAGNETICFLUXDENSITYUNIT { get { return ".MAGNETICFLUXDENSITYUNIT."; } private set { } }
		public static string MAGNETICFLUXUNIT { get { return ".MAGNETICFLUXUNIT."; } private set { } }
		public static string MASSUNIT { get { return ".MASSUNIT."; } private set { } }
		public static string PLANEANGLEUNIT { get { return ".PLANEANGLEUNIT."; } private set { } }
		public static string POWERUNIT { get { return ".POWERUNIT."; } private set { } }
		public static string PRESSUREUNIT { get { return ".PRESSUREUNIT."; } private set { } }
		public static string RADIOACTIVITYUNIT { get { return ".RADIOACTIVITYUNIT."; } private set { } }
		public static string SOLIDANGLEUNIT { get { return ".SOLIDANGLEUNIT."; } private set { } }
		public static string THERMODYNAMICTEMPERATUREUNIT { get { return ".THERMODYNAMICTEMPERATUREUNIT."; } private set { } }
		public static string TIMEUNIT { get { return ".TIMEUNIT."; } private set { } }
		public static string VOLUMEUNIT { get { return ".VOLUMEUNIT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcUnitEnum() { Value = ".ABSORBEDDOSEUNIT.";}
		public IfcUnitEnum(string value) { Value = value; }
		public static implicit operator IfcUnitEnum(string value) { return new IfcUnitEnum(value);}
		public static implicit operator string(IfcUnitEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcUnitaryEquipmentTypeEnum = ENUMERATION OF
	/// (AIRHANDLER
	/// ,AIRCONDITIONINGUNIT
	/// ,SPLITSYSTEM
	/// ,ROOFTOPUNIT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcUnitaryEquipmentTypeEnum: Global.IfcUnitaryEquipmentTypeEnum
	{
		public static string AIRHANDLER { get { return ".AIRHANDLER."; } private set { } }
		public static string AIRCONDITIONINGUNIT { get { return ".AIRCONDITIONINGUNIT."; } private set { } }
		public static string SPLITSYSTEM { get { return ".SPLITSYSTEM."; } private set { } }
		public static string ROOFTOPUNIT { get { return ".ROOFTOPUNIT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcUnitaryEquipmentTypeEnum() { Value = ".AIRHANDLER.";}
		public IfcUnitaryEquipmentTypeEnum(string value) { Value = value; }
		public static implicit operator IfcUnitaryEquipmentTypeEnum(string value) { return new IfcUnitaryEquipmentTypeEnum(value);}
		public static implicit operator string(IfcUnitaryEquipmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcValveTypeEnum = ENUMERATION OF
	/// (AIRRELEASE
	/// ,ANTIVACUUM
	/// ,CHANGEOVER
	/// ,CHECK
	/// ,COMMISSIONING
	/// ,DIVERTING
	/// ,DRAWOFFCOCK
	/// ,DOUBLECHECK
	/// ,DOUBLEREGULATING
	/// ,FAUCET
	/// ,FLUSHING
	/// ,GASCOCK
	/// ,GASTAP
	/// ,ISOLATING
	/// ,MIXING
	/// ,PRESSUREREDUCING
	/// ,PRESSURERELIEF
	/// ,REGULATING
	/// ,SAFETYCUTOFF
	/// ,STEAMTRAP
	/// ,STOPCOCK
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcValveTypeEnum: Global.IfcValveTypeEnum
	{
		public static string AIRRELEASE { get { return ".AIRRELEASE."; } private set { } }
		public static string ANTIVACUUM { get { return ".ANTIVACUUM."; } private set { } }
		public static string CHANGEOVER { get { return ".CHANGEOVER."; } private set { } }
		public static string CHECK { get { return ".CHECK."; } private set { } }
		public static string COMMISSIONING { get { return ".COMMISSIONING."; } private set { } }
		public static string DIVERTING { get { return ".DIVERTING."; } private set { } }
		public static string DRAWOFFCOCK { get { return ".DRAWOFFCOCK."; } private set { } }
		public static string DOUBLECHECK { get { return ".DOUBLECHECK."; } private set { } }
		public static string DOUBLEREGULATING { get { return ".DOUBLEREGULATING."; } private set { } }
		public static string FAUCET { get { return ".FAUCET."; } private set { } }
		public static string FLUSHING { get { return ".FLUSHING."; } private set { } }
		public static string GASCOCK { get { return ".GASCOCK."; } private set { } }
		public static string GASTAP { get { return ".GASTAP."; } private set { } }
		public static string ISOLATING { get { return ".ISOLATING."; } private set { } }
		public static string MIXING { get { return ".MIXING."; } private set { } }
		public static string PRESSUREREDUCING { get { return ".PRESSUREREDUCING."; } private set { } }
		public static string PRESSURERELIEF { get { return ".PRESSURERELIEF."; } private set { } }
		public static string REGULATING { get { return ".REGULATING."; } private set { } }
		public static string SAFETYCUTOFF { get { return ".SAFETYCUTOFF."; } private set { } }
		public static string STEAMTRAP { get { return ".STEAMTRAP."; } private set { } }
		public static string STOPCOCK { get { return ".STOPCOCK."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcValveTypeEnum() { Value = ".AIRRELEASE.";}
		public IfcValveTypeEnum(string value) { Value = value; }
		public static implicit operator IfcValveTypeEnum(string value) { return new IfcValveTypeEnum(value);}
		public static implicit operator string(IfcValveTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVibrationIsolatorTypeEnum = ENUMERATION OF
	/// (COMPRESSION
	/// ,SPRING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcVibrationIsolatorTypeEnum: Global.IfcVibrationIsolatorTypeEnum
	{
		public static string COMPRESSION { get { return ".COMPRESSION."; } private set { } }
		public static string SPRING { get { return ".SPRING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcVibrationIsolatorTypeEnum() { Value = ".COMPRESSION.";}
		public IfcVibrationIsolatorTypeEnum(string value) { Value = value; }
		public static implicit operator IfcVibrationIsolatorTypeEnum(string value) { return new IfcVibrationIsolatorTypeEnum(value);}
		public static implicit operator string(IfcVibrationIsolatorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWallTypeEnum = ENUMERATION OF
	/// (STANDARD
	/// ,POLYGONAL
	/// ,SHEAR
	/// ,ELEMENTEDWALL
	/// ,PLUMBINGWALL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWallTypeEnum: Global.IfcWallTypeEnum
	{
		public static string STANDARD { get { return ".STANDARD."; } private set { } }
		public static string POLYGONAL { get { return ".POLYGONAL."; } private set { } }
		public static string SHEAR { get { return ".SHEAR."; } private set { } }
		public static string ELEMENTEDWALL { get { return ".ELEMENTEDWALL."; } private set { } }
		public static string PLUMBINGWALL { get { return ".PLUMBINGWALL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWallTypeEnum() { Value = ".STANDARD.";}
		public IfcWallTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWallTypeEnum(string value) { return new IfcWallTypeEnum(value);}
		public static implicit operator string(IfcWallTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWasteTerminalTypeEnum = ENUMERATION OF
	/// (FLOORTRAP
	/// ,FLOORWASTE
	/// ,GULLYSUMP
	/// ,GULLYTRAP
	/// ,GREASEINTERCEPTOR
	/// ,OILINTERCEPTOR
	/// ,PETROLINTERCEPTOR
	/// ,ROOFDRAIN
	/// ,WASTEDISPOSALUNIT
	/// ,WASTETRAP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWasteTerminalTypeEnum: Global.IfcWasteTerminalTypeEnum
	{
		public static string FLOORTRAP { get { return ".FLOORTRAP."; } private set { } }
		public static string FLOORWASTE { get { return ".FLOORWASTE."; } private set { } }
		public static string GULLYSUMP { get { return ".GULLYSUMP."; } private set { } }
		public static string GULLYTRAP { get { return ".GULLYTRAP."; } private set { } }
		public static string GREASEINTERCEPTOR { get { return ".GREASEINTERCEPTOR."; } private set { } }
		public static string OILINTERCEPTOR { get { return ".OILINTERCEPTOR."; } private set { } }
		public static string PETROLINTERCEPTOR { get { return ".PETROLINTERCEPTOR."; } private set { } }
		public static string ROOFDRAIN { get { return ".ROOFDRAIN."; } private set { } }
		public static string WASTEDISPOSALUNIT { get { return ".WASTEDISPOSALUNIT."; } private set { } }
		public static string WASTETRAP { get { return ".WASTETRAP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWasteTerminalTypeEnum() { Value = ".FLOORTRAP.";}
		public IfcWasteTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWasteTerminalTypeEnum(string value) { return new IfcWasteTerminalTypeEnum(value);}
		public static implicit operator string(IfcWasteTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowPanelOperationEnum = ENUMERATION OF
	/// (SIDEHUNGRIGHTHAND
	/// ,SIDEHUNGLEFTHAND
	/// ,TILTANDTURNRIGHTHAND
	/// ,TILTANDTURNLEFTHAND
	/// ,TOPHUNG
	/// ,BOTTOMHUNG
	/// ,PIVOTHORIZONTAL
	/// ,PIVOTVERTICAL
	/// ,SLIDINGHORIZONTAL
	/// ,SLIDINGVERTICAL
	/// ,REMOVABLECASEMENT
	/// ,FIXEDCASEMENT
	/// ,OTHEROPERATION
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWindowPanelOperationEnum: Global.IfcWindowPanelOperationEnum
	{
		public static string SIDEHUNGRIGHTHAND { get { return ".SIDEHUNGRIGHTHAND."; } private set { } }
		public static string SIDEHUNGLEFTHAND { get { return ".SIDEHUNGLEFTHAND."; } private set { } }
		public static string TILTANDTURNRIGHTHAND { get { return ".TILTANDTURNRIGHTHAND."; } private set { } }
		public static string TILTANDTURNLEFTHAND { get { return ".TILTANDTURNLEFTHAND."; } private set { } }
		public static string TOPHUNG { get { return ".TOPHUNG."; } private set { } }
		public static string BOTTOMHUNG { get { return ".BOTTOMHUNG."; } private set { } }
		public static string PIVOTHORIZONTAL { get { return ".PIVOTHORIZONTAL."; } private set { } }
		public static string PIVOTVERTICAL { get { return ".PIVOTVERTICAL."; } private set { } }
		public static string SLIDINGHORIZONTAL { get { return ".SLIDINGHORIZONTAL."; } private set { } }
		public static string SLIDINGVERTICAL { get { return ".SLIDINGVERTICAL."; } private set { } }
		public static string REMOVABLECASEMENT { get { return ".REMOVABLECASEMENT."; } private set { } }
		public static string FIXEDCASEMENT { get { return ".FIXEDCASEMENT."; } private set { } }
		public static string OTHEROPERATION { get { return ".OTHEROPERATION."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWindowPanelOperationEnum() { Value = ".SIDEHUNGRIGHTHAND.";}
		public IfcWindowPanelOperationEnum(string value) { Value = value; }
		public static implicit operator IfcWindowPanelOperationEnum(string value) { return new IfcWindowPanelOperationEnum(value);}
		public static implicit operator string(IfcWindowPanelOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowPanelPositionEnum = ENUMERATION OF
	/// (LEFT
	/// ,MIDDLE
	/// ,RIGHT
	/// ,BOTTOM
	/// ,TOP
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWindowPanelPositionEnum: Global.IfcWindowPanelPositionEnum
	{
		public static string LEFT { get { return ".LEFT."; } private set { } }
		public static string MIDDLE { get { return ".MIDDLE."; } private set { } }
		public static string RIGHT { get { return ".RIGHT."; } private set { } }
		public static string BOTTOM { get { return ".BOTTOM."; } private set { } }
		public static string TOP { get { return ".TOP."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWindowPanelPositionEnum() { Value = ".LEFT.";}
		public IfcWindowPanelPositionEnum(string value) { Value = value; }
		public static implicit operator IfcWindowPanelPositionEnum(string value) { return new IfcWindowPanelPositionEnum(value);}
		public static implicit operator string(IfcWindowPanelPositionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowStyleConstructionEnum = ENUMERATION OF
	/// (ALUMINIUM
	/// ,HIGH_GRADE_STEEL
	/// ,STEEL
	/// ,WOOD
	/// ,ALUMINIUM_WOOD
	/// ,PLASTIC
	/// ,OTHER_CONSTRUCTION
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWindowStyleConstructionEnum: Global.IfcWindowStyleConstructionEnum
	{
		public static string ALUMINIUM { get { return ".ALUMINIUM."; } private set { } }
		public static string HIGH_GRADE_STEEL { get { return ".HIGH_GRADE_STEEL."; } private set { } }
		public static string STEEL { get { return ".STEEL."; } private set { } }
		public static string WOOD { get { return ".WOOD."; } private set { } }
		public static string ALUMINIUM_WOOD { get { return ".ALUMINIUM_WOOD."; } private set { } }
		public static string PLASTIC { get { return ".PLASTIC."; } private set { } }
		public static string OTHER_CONSTRUCTION { get { return ".OTHER_CONSTRUCTION."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWindowStyleConstructionEnum() { Value = ".ALUMINIUM.";}
		public IfcWindowStyleConstructionEnum(string value) { Value = value; }
		public static implicit operator IfcWindowStyleConstructionEnum(string value) { return new IfcWindowStyleConstructionEnum(value);}
		public static implicit operator string(IfcWindowStyleConstructionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowStyleOperationEnum = ENUMERATION OF
	/// (SINGLE_PANEL
	/// ,DOUBLE_PANEL_VERTICAL
	/// ,DOUBLE_PANEL_HORIZONTAL
	/// ,TRIPLE_PANEL_VERTICAL
	/// ,TRIPLE_PANEL_BOTTOM
	/// ,TRIPLE_PANEL_TOP
	/// ,TRIPLE_PANEL_LEFT
	/// ,TRIPLE_PANEL_RIGHT
	/// ,TRIPLE_PANEL_HORIZONTAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWindowStyleOperationEnum: Global.IfcWindowStyleOperationEnum
	{
		public static string SINGLE_PANEL { get { return ".SINGLE_PANEL."; } private set { } }
		public static string DOUBLE_PANEL_VERTICAL { get { return ".DOUBLE_PANEL_VERTICAL."; } private set { } }
		public static string DOUBLE_PANEL_HORIZONTAL { get { return ".DOUBLE_PANEL_HORIZONTAL."; } private set { } }
		public static string TRIPLE_PANEL_VERTICAL { get { return ".TRIPLE_PANEL_VERTICAL."; } private set { } }
		public static string TRIPLE_PANEL_BOTTOM { get { return ".TRIPLE_PANEL_BOTTOM."; } private set { } }
		public static string TRIPLE_PANEL_TOP { get { return ".TRIPLE_PANEL_TOP."; } private set { } }
		public static string TRIPLE_PANEL_LEFT { get { return ".TRIPLE_PANEL_LEFT."; } private set { } }
		public static string TRIPLE_PANEL_RIGHT { get { return ".TRIPLE_PANEL_RIGHT."; } private set { } }
		public static string TRIPLE_PANEL_HORIZONTAL { get { return ".TRIPLE_PANEL_HORIZONTAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWindowStyleOperationEnum() { Value = ".SINGLE_PANEL.";}
		public IfcWindowStyleOperationEnum(string value) { Value = value; }
		public static implicit operator IfcWindowStyleOperationEnum(string value) { return new IfcWindowStyleOperationEnum(value);}
		public static implicit operator string(IfcWindowStyleOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWorkControlTypeEnum = ENUMERATION OF
	/// (ACTUAL
	/// ,BASELINE
	/// ,PLANNED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IfcWorkControlTypeEnum: Global.IfcWorkControlTypeEnum
	{
		public static string ACTUAL { get { return ".ACTUAL."; } private set { } }
		public static string BASELINE { get { return ".BASELINE."; } private set { } }
		public static string PLANNED { get { return ".PLANNED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IfcWorkControlTypeEnum() { Value = ".ACTUAL.";}
		public IfcWorkControlTypeEnum(string value) { Value = value; }
		public static implicit operator IfcWorkControlTypeEnum(string value) { return new IfcWorkControlTypeEnum(value);}
		public static implicit operator string(IfcWorkControlTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcActorSelect = SELECT
	/// (IfcOrganization
	/// ,IfcPerson
	/// ,IfcPersonAndOrganization);
	/// END_TYPE;
	/// <summary>
	public interface IfcActorSelect: Global.IfcActorSelect
	{
		public List<IfcActorRole>? Roles { get;  }
	}
	/// <summary>
	/// TYPE IfcAppliedValueSelect = SELECT
	/// (IfcRatioMeasure
	/// ,IfcMeasureWithUnit
	/// ,IfcMonetaryMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcAppliedValueSelect: Global.IfcAppliedValueSelect
	{
	}
	/// <summary>
	/// TYPE IfcAxis2Placement = SELECT
	/// (IfcAxis2Placement2D
	/// ,IfcAxis2Placement3D);
	/// END_TYPE;
	/// <summary>
	public interface IfcAxis2Placement: Global.IfcAxis2Placement
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
		public List<IfcStyledItem>? StyledByItem { get;  }
		public IfcCartesianPoint? Location { get;  }
		public IfcDimensionCount? Dim { get;  }
		public IfcDirection? RefDirection { get;  }
		public List<IfcDirection>? P { get;  }
	}
	/// <summary>
	/// TYPE IfcBooleanOperand = SELECT
	/// (IfcSolidModel
	/// ,IfcHalfSpaceSolid
	/// ,IfcBooleanResult
	/// ,IfcCsgPrimitive3D);
	/// END_TYPE;
	/// <summary>
	public interface IfcBooleanOperand: Global.IfcBooleanOperand
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
		public List<IfcStyledItem>? StyledByItem { get;  }
		public IfcDimensionCount? Dim { get;  }
	}
	/// <summary>
	/// TYPE IfcCharacterStyleSelect = SELECT
	/// (IfcTextStyleForDefinedFont);
	/// END_TYPE;
	/// <summary>
	public interface IfcCharacterStyleSelect: Global.IfcCharacterStyleSelect
	{
		public IfcColour? Colour { get;  }
		public IfcColour? BackgroundColour { get;  }
	}
	/// <summary>
	/// TYPE IfcClassificationNotationSelect = SELECT
	/// (IfcClassificationNotation
	/// ,IfcClassificationReference);
	/// END_TYPE;
	/// <summary>
	public interface IfcClassificationNotationSelect: Global.IfcClassificationNotationSelect
	{
	}
	/// <summary>
	/// TYPE IfcColour = SELECT
	/// (IfcColourSpecification
	/// ,IfcPreDefinedColour);
	/// END_TYPE;
	/// <summary>
	public interface IfcColour: IfcFillStyleSelect, IfcSymbolStyleSelect, Global.IfcColour
	{
	}
	/// <summary>
	/// TYPE IfcColourOrFactor = SELECT
	/// (IfcColourRgb
	/// ,IfcNormalisedRatioMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcColourOrFactor: Global.IfcColourOrFactor
	{
	}
	/// <summary>
	/// TYPE IfcConditionCriterionSelect = SELECT
	/// (IfcLabel
	/// ,IfcMeasureWithUnit);
	/// END_TYPE;
	/// <summary>
	public interface IfcConditionCriterionSelect: Global.IfcConditionCriterionSelect
	{
	}
	/// <summary>
	/// TYPE IfcCsgSelect = SELECT
	/// (IfcBooleanResult
	/// ,IfcCsgPrimitive3D);
	/// END_TYPE;
	/// <summary>
	public interface IfcCsgSelect: Global.IfcCsgSelect
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
		public List<IfcStyledItem>? StyledByItem { get;  }
		public IfcDimensionCount? Dim { get;  }
	}
	/// <summary>
	/// TYPE IfcCurveFontOrScaledCurveFontSelect = SELECT
	/// (IfcCurveStyleFontSelect
	/// ,IfcCurveStyleFontAndScaling);
	/// END_TYPE;
	/// <summary>
	public interface IfcCurveFontOrScaledCurveFontSelect: Global.IfcCurveFontOrScaledCurveFontSelect
	{
		public IfcLabel? Name { get;  }
	}
	/// <summary>
	/// TYPE IfcCurveOrEdgeCurve = SELECT
	/// (IfcBoundedCurve
	/// ,IfcEdgeCurve);
	/// END_TYPE;
	/// <summary>
	public interface IfcCurveOrEdgeCurve: Global.IfcCurveOrEdgeCurve
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
		public List<IfcStyledItem>? StyledByItem { get;  }
	}
	/// <summary>
	/// TYPE IfcCurveStyleFontSelect = SELECT
	/// (IfcPreDefinedCurveFont
	/// ,IfcCurveStyleFont);
	/// END_TYPE;
	/// <summary>
	public interface IfcCurveStyleFontSelect: IfcCurveFontOrScaledCurveFontSelect, Global.IfcCurveStyleFontSelect
	{
	}
	/// <summary>
	/// TYPE IfcDateTimeSelect = SELECT
	/// (IfcCalendarDate
	/// ,IfcLocalTime
	/// ,IfcDateAndTime);
	/// END_TYPE;
	/// <summary>
	public interface IfcDateTimeSelect: IfcMetricValueSelect, Global.IfcDateTimeSelect
	{
	}
	/// <summary>
	/// TYPE IfcDefinedSymbolSelect = SELECT
	/// (IfcPreDefinedSymbol
	/// ,IfcExternallyDefinedSymbol);
	/// END_TYPE;
	/// <summary>
	public interface IfcDefinedSymbolSelect: Global.IfcDefinedSymbolSelect
	{
		public IfcLabel? Name { get;  }
	}
	/// <summary>
	/// TYPE IfcDerivedMeasureValue = SELECT
	/// (IfcVolumetricFlowRateMeasure
	/// ,IfcTimeStamp
	/// ,IfcThermalTransmittanceMeasure
	/// ,IfcThermalResistanceMeasure
	/// ,IfcThermalAdmittanceMeasure
	/// ,IfcPressureMeasure
	/// ,IfcPowerMeasure
	/// ,IfcMassFlowRateMeasure
	/// ,IfcMassDensityMeasure
	/// ,IfcLinearVelocityMeasure
	/// ,IfcKinematicViscosityMeasure
	/// ,IfcIntegerCountRateMeasure
	/// ,IfcHeatFluxDensityMeasure
	/// ,IfcFrequencyMeasure
	/// ,IfcEnergyMeasure
	/// ,IfcElectricVoltageMeasure
	/// ,IfcDynamicViscosityMeasure
	/// ,IfcCompoundPlaneAngleMeasure
	/// ,IfcAngularVelocityMeasure
	/// ,IfcThermalConductivityMeasure
	/// ,IfcMolecularWeightMeasure
	/// ,IfcVaporPermeabilityMeasure
	/// ,IfcMoistureDiffusivityMeasure
	/// ,IfcIsothermalMoistureCapacityMeasure
	/// ,IfcSpecificHeatCapacityMeasure
	/// ,IfcMonetaryMeasure
	/// ,IfcMagneticFluxDensityMeasure
	/// ,IfcMagneticFluxMeasure
	/// ,IfcLuminousFluxMeasure
	/// ,IfcForceMeasure
	/// ,IfcInductanceMeasure
	/// ,IfcIlluminanceMeasure
	/// ,IfcElectricResistanceMeasure
	/// ,IfcElectricConductanceMeasure
	/// ,IfcElectricChargeMeasure
	/// ,IfcDoseEquivalentMeasure
	/// ,IfcElectricCapacitanceMeasure
	/// ,IfcAbsorbedDoseMeasure
	/// ,IfcRadioActivityMeasure
	/// ,IfcRotationalFrequencyMeasure
	/// ,IfcTorqueMeasure
	/// ,IfcAccelerationMeasure
	/// ,IfcLinearForceMeasure
	/// ,IfcLinearStiffnessMeasure
	/// ,IfcModulusOfSubgradeReactionMeasure
	/// ,IfcModulusOfElasticityMeasure
	/// ,IfcMomentOfInertiaMeasure
	/// ,IfcPlanarForceMeasure
	/// ,IfcRotationalStiffnessMeasure
	/// ,IfcShearModulusMeasure
	/// ,IfcLinearMomentMeasure
	/// ,IfcLuminousIntensityDistributionMeasure
	/// ,IfcCurvatureMeasure
	/// ,IfcMassPerLengthMeasure
	/// ,IfcModulusOfLinearSubgradeReactionMeasure
	/// ,IfcModulusOfRotationalSubgradeReactionMeasure
	/// ,IfcRotationalMassMeasure
	/// ,IfcSectionalAreaIntegralMeasure
	/// ,IfcSectionModulusMeasure
	/// ,IfcTemperatureGradientMeasure
	/// ,IfcThermalExpansionCoefficientMeasure
	/// ,IfcWarpingConstantMeasure
	/// ,IfcWarpingMomentMeasure
	/// ,IfcSoundPowerMeasure
	/// ,IfcSoundPressureMeasure
	/// ,IfcHeatingValueMeasure
	/// ,IfcPHMeasure
	/// ,IfcIonConcentrationMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcDerivedMeasureValue: IfcValue, Global.IfcDerivedMeasureValue
	{
	}
	/// <summary>
	/// TYPE IfcDocumentSelect = SELECT
	/// (IfcDocumentReference
	/// ,IfcDocumentInformation);
	/// END_TYPE;
	/// <summary>
	public interface IfcDocumentSelect: Global.IfcDocumentSelect
	{
		public IfcLabel? Name { get;  }
	}
	/// <summary>
	/// TYPE IfcDraughtingCalloutElement = SELECT
	/// (IfcAnnotationCurveOccurrence
	/// ,IfcAnnotationTextOccurrence
	/// ,IfcAnnotationSymbolOccurrence);
	/// END_TYPE;
	/// <summary>
	public interface IfcDraughtingCalloutElement: Global.IfcDraughtingCalloutElement
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
		public List<IfcStyledItem>? StyledByItem { get;  }
		public IfcRepresentationItem? Item { get;  }
		public List<IfcPresentationStyleAssignment>? Styles { get;  }
		public IfcLabel? Name { get;  }
	}
	/// <summary>
	/// TYPE IfcFillAreaStyleTileShapeSelect = SELECT
	/// (IfcFillAreaStyleTileSymbolWithStyle);
	/// END_TYPE;
	/// <summary>
	public interface IfcFillAreaStyleTileShapeSelect: Global.IfcFillAreaStyleTileShapeSelect
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
		public List<IfcStyledItem>? StyledByItem { get;  }
		public IfcAnnotationSymbolOccurrence? Symbol { get;  }
	}
	/// <summary>
	/// TYPE IfcFillStyleSelect = SELECT
	/// (IfcFillAreaStyleHatching
	/// ,IfcFillAreaStyleTiles
	/// ,IfcColour
	/// ,IfcExternallyDefinedHatchStyle);
	/// END_TYPE;
	/// <summary>
	public interface IfcFillStyleSelect: Global.IfcFillStyleSelect
	{
	}
	/// <summary>
	/// TYPE IfcGeometricSetSelect = SELECT
	/// (IfcPoint
	/// ,IfcCurve
	/// ,IfcSurface);
	/// END_TYPE;
	/// <summary>
	public interface IfcGeometricSetSelect: Global.IfcGeometricSetSelect
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
		public List<IfcStyledItem>? StyledByItem { get;  }
		public IfcDimensionCount? Dim { get;  }
	}
	/// <summary>
	/// TYPE IfcHatchLineDistanceSelect = SELECT
	/// (IfcOneDirectionRepeatFactor
	/// ,IfcPositiveLengthMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcHatchLineDistanceSelect: Global.IfcHatchLineDistanceSelect
	{
	}
	/// <summary>
	/// TYPE IfcLayeredItem = SELECT
	/// (IfcRepresentationItem
	/// ,IfcRepresentation);
	/// END_TYPE;
	/// <summary>
	public interface IfcLayeredItem: Global.IfcLayeredItem
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
	}
	/// <summary>
	/// TYPE IfcLibrarySelect = SELECT
	/// (IfcLibraryReference
	/// ,IfcLibraryInformation);
	/// END_TYPE;
	/// <summary>
	public interface IfcLibrarySelect: Global.IfcLibrarySelect
	{
		public IfcLabel? Name { get;  }
	}
	/// <summary>
	/// TYPE IfcLightDistributionDataSourceSelect = SELECT
	/// (IfcExternalReference
	/// ,IfcLightIntensityDistribution);
	/// END_TYPE;
	/// <summary>
	public interface IfcLightDistributionDataSourceSelect: Global.IfcLightDistributionDataSourceSelect
	{
	}
	/// <summary>
	/// TYPE IfcMaterialSelect = SELECT
	/// (IfcMaterial
	/// ,IfcMaterialList
	/// ,IfcMaterialLayerSetUsage
	/// ,IfcMaterialLayerSet
	/// ,IfcMaterialLayer);
	/// END_TYPE;
	/// <summary>
	public interface IfcMaterialSelect: Global.IfcMaterialSelect
	{
	}
	/// <summary>
	/// TYPE IfcMeasureValue = SELECT
	/// (IfcVolumeMeasure
	/// ,IfcTimeMeasure
	/// ,IfcThermodynamicTemperatureMeasure
	/// ,IfcSolidAngleMeasure
	/// ,IfcPositiveRatioMeasure
	/// ,IfcRatioMeasure
	/// ,IfcPositivePlaneAngleMeasure
	/// ,IfcPlaneAngleMeasure
	/// ,IfcParameterValue
	/// ,IfcNumericMeasure
	/// ,IfcMassMeasure
	/// ,IfcPositiveLengthMeasure
	/// ,IfcLengthMeasure
	/// ,IfcElectricCurrentMeasure
	/// ,IfcDescriptiveMeasure
	/// ,IfcCountMeasure
	/// ,IfcContextDependentMeasure
	/// ,IfcAreaMeasure
	/// ,IfcAmountOfSubstanceMeasure
	/// ,IfcLuminousIntensityMeasure
	/// ,IfcNormalisedRatioMeasure
	/// ,IfcComplexNumber);
	/// END_TYPE;
	/// <summary>
	public interface IfcMeasureValue: IfcValue, Global.IfcMeasureValue
	{
	}
	/// <summary>
	/// TYPE IfcMetricValueSelect = SELECT
	/// (IfcDateTimeSelect
	/// ,IfcMeasureWithUnit
	/// ,IfcTable
	/// ,IfcText
	/// ,IfcTimeSeries
	/// ,IfcCostValue);
	/// END_TYPE;
	/// <summary>
	public interface IfcMetricValueSelect: Global.IfcMetricValueSelect
	{
	}
	/// <summary>
	/// TYPE IfcObjectReferenceSelect = SELECT
	/// (IfcMaterial
	/// ,IfcPerson
	/// ,IfcDateAndTime
	/// ,IfcMaterialList
	/// ,IfcOrganization
	/// ,IfcCalendarDate
	/// ,IfcLocalTime
	/// ,IfcPersonAndOrganization
	/// ,IfcMaterialLayer
	/// ,IfcExternalReference
	/// ,IfcTimeSeries
	/// ,IfcAddress
	/// ,IfcAppliedValue);
	/// END_TYPE;
	/// <summary>
	public interface IfcObjectReferenceSelect: Global.IfcObjectReferenceSelect
	{
	}
	/// <summary>
	/// TYPE IfcOrientationSelect = SELECT
	/// (IfcPlaneAngleMeasure
	/// ,IfcDirection);
	/// END_TYPE;
	/// <summary>
	public interface IfcOrientationSelect: Global.IfcOrientationSelect
	{
	}
	/// <summary>
	/// TYPE IfcPointOrVertexPoint = SELECT
	/// (IfcPoint
	/// ,IfcVertexPoint);
	/// END_TYPE;
	/// <summary>
	public interface IfcPointOrVertexPoint: Global.IfcPointOrVertexPoint
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
		public List<IfcStyledItem>? StyledByItem { get;  }
	}
	/// <summary>
	/// TYPE IfcPresentationStyleSelect = SELECT
	/// (IfcNullStyle
	/// ,IfcCurveStyle
	/// ,IfcSymbolStyle
	/// ,IfcFillAreaStyle
	/// ,IfcTextStyle
	/// ,IfcSurfaceStyle);
	/// END_TYPE;
	/// <summary>
	public interface IfcPresentationStyleSelect: Global.IfcPresentationStyleSelect
	{
		public IfcLabel? Name { get;  }
	}
	/// <summary>
	/// TYPE IfcShell = SELECT
	/// (IfcClosedShell
	/// ,IfcOpenShell);
	/// END_TYPE;
	/// <summary>
	public interface IfcShell: Global.IfcShell
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
		public List<IfcStyledItem>? StyledByItem { get;  }
		public List<IfcFace>? CfsFaces { get;  }
	}
	/// <summary>
	/// TYPE IfcSimpleValue = SELECT
	/// (IfcInteger
	/// ,IfcReal
	/// ,IfcBoolean
	/// ,IfcIdentifier
	/// ,IfcText
	/// ,IfcLabel
	/// ,IfcLogical);
	/// END_TYPE;
	/// <summary>
	public interface IfcSimpleValue: IfcValue, Global.IfcSimpleValue
	{
	}
	/// <summary>
	/// TYPE IfcSizeSelect = SELECT
	/// (IfcRatioMeasure
	/// ,IfcLengthMeasure
	/// ,IfcDescriptiveMeasure
	/// ,IfcPositiveLengthMeasure
	/// ,IfcNormalisedRatioMeasure
	/// ,IfcPositiveRatioMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IfcSizeSelect: Global.IfcSizeSelect
	{
	}
	/// <summary>
	/// TYPE IfcSpecularHighlightSelect = SELECT
	/// (IfcSpecularExponent
	/// ,IfcSpecularRoughness);
	/// END_TYPE;
	/// <summary>
	public interface IfcSpecularHighlightSelect: Global.IfcSpecularHighlightSelect
	{
	}
	/// <summary>
	/// TYPE IfcStructuralActivityAssignmentSelect = SELECT
	/// (IfcStructuralItem
	/// ,IfcElement);
	/// END_TYPE;
	/// <summary>
	public interface IfcStructuralActivityAssignmentSelect: Global.IfcStructuralActivityAssignmentSelect
	{
		public IfcGloballyUniqueId? GlobalId { get;  }
		public IfcOwnerHistory? OwnerHistory { get;  }
		public IfcLabel? Name { get;  }
		public IfcText? Description { get;  }
		public List<IfcRelAssigns>? HasAssignments { get;  }
		public List<IfcRelDecomposes>? IsDecomposedBy { get;  }
		public List<IfcRelDecomposes>? Decomposes { get;  }
		public List<IfcRelAssociates>? HasAssociations { get;  }
		public IfcLabel? ObjectType { get;  }
		public List<IfcRelDefines>? IsDefinedBy { get;  }
		public IfcObjectPlacement? ObjectPlacement { get;  }
		public IfcProductRepresentation? Representation { get;  }
		public List<IfcRelAssignsToProduct>? ReferencedBy { get;  }
	}
	/// <summary>
	/// TYPE IfcSurfaceOrFaceSurface = SELECT
	/// (IfcSurface
	/// ,IfcFaceSurface
	/// ,IfcFaceBasedSurfaceModel);
	/// END_TYPE;
	/// <summary>
	public interface IfcSurfaceOrFaceSurface: Global.IfcSurfaceOrFaceSurface
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
		public List<IfcStyledItem>? StyledByItem { get;  }
	}
	/// <summary>
	/// TYPE IfcSurfaceStyleElementSelect = SELECT
	/// (IfcSurfaceStyleShading
	/// ,IfcSurfaceStyleLighting
	/// ,IfcSurfaceStyleWithTextures
	/// ,IfcExternallyDefinedSurfaceStyle
	/// ,IfcSurfaceStyleRefraction);
	/// END_TYPE;
	/// <summary>
	public interface IfcSurfaceStyleElementSelect: Global.IfcSurfaceStyleElementSelect
	{
	}
	/// <summary>
	/// TYPE IfcSymbolStyleSelect = SELECT
	/// (IfcColour);
	/// END_TYPE;
	/// <summary>
	public interface IfcSymbolStyleSelect: Global.IfcSymbolStyleSelect
	{
		public IfcLabel? Name { get;  }
	}
	/// <summary>
	/// TYPE IfcTextFontSelect = SELECT
	/// (IfcPreDefinedTextFont
	/// ,IfcExternallyDefinedTextFont);
	/// END_TYPE;
	/// <summary>
	public interface IfcTextFontSelect: Global.IfcTextFontSelect
	{
		public IfcLabel? Name { get;  }
	}
	/// <summary>
	/// TYPE IfcTextStyleSelect = SELECT
	/// (IfcTextStyleWithBoxCharacteristics
	/// ,IfcTextStyleTextModel);
	/// END_TYPE;
	/// <summary>
	public interface IfcTextStyleSelect: Global.IfcTextStyleSelect
	{
	}
	/// <summary>
	/// TYPE IfcTrimmingSelect = SELECT
	/// (IfcCartesianPoint
	/// ,IfcParameterValue);
	/// END_TYPE;
	/// <summary>
	public interface IfcTrimmingSelect: Global.IfcTrimmingSelect
	{
	}
	/// <summary>
	/// TYPE IfcUnit = SELECT
	/// (IfcDerivedUnit
	/// ,IfcNamedUnit
	/// ,IfcMonetaryUnit);
	/// END_TYPE;
	/// <summary>
	public interface IfcUnit: Global.IfcUnit
	{
	}
	/// <summary>
	/// TYPE IfcValue = SELECT
	/// (IfcMeasureValue
	/// ,IfcSimpleValue
	/// ,IfcDerivedMeasureValue);
	/// END_TYPE;
	/// <summary>
	public interface IfcValue: Global.IfcValue
	{
	}
	/// <summary>
	/// TYPE IfcVectorOrDirection = SELECT
	/// (IfcDirection
	/// ,IfcVector);
	/// END_TYPE;
	/// <summary>
	public interface IfcVectorOrDirection: Global.IfcVectorOrDirection
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments { get;  }
		public List<IfcStyledItem>? StyledByItem { get;  }
		public IfcDimensionCount? Dim { get;  }
	}
	/// <summary>
	/// ENTITY Ifc2DCompositeCurve
	/// SUBTYPE OF (IfcCompositeCurve);
	/// WHERE
	/// WR1 : SELF\IfcCompositeCurve.ClosedCurve;
	/// WR2 : SELF\IfcCurve.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class Ifc2DCompositeCurve : IfcCompositeCurve, Global.Ifc2DCompositeCurve
	{
		public Ifc2DCompositeCurve() : base()
		{
		}
		public Ifc2DCompositeCurve(List<IfcCompositeCurveSegment>? Segments, LOGICAL? SelfIntersect) : base (Segments, SelfIntersect)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Segments,
				SelfIntersect
			};
		}
	}
	/// <summary>
	/// ENTITY IfcActionRequest
	/// SUBTYPE OF (IfcControl);
	/// RequestID : IfcIdentifier;
	/// UNIQUE
	/// UR2 : RequestID;
	/// END_ENTITY;
	/// <summary>
	public class IfcActionRequest : IfcControl, Global.IfcActionRequest
	{
		public virtual IfcIdentifier? RequestID { get; set; }
		public IfcActionRequest() : base()
		{
		}
		public IfcActionRequest(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? RequestID) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.RequestID = RequestID;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				RequestID
			};
		}
		public virtual Global.IfcIdentifier? _RequestID { get { return RequestID; } set { } }
	}
	/// <summary>
	/// ENTITY IfcActor
	/// SUPERTYPE OF (ONEOF
	/// (IfcOccupant))
	/// SUBTYPE OF (IfcObject);
	/// TheActor : IfcActorSelect;
	/// INVERSE
	/// IsActingUpon : SET [0:?] OF IfcRelAssignsToActor FOR RelatingActor;
	/// END_ENTITY;
	/// <summary>
	public class IfcActor : IfcObject, Global.IfcActor
	{
		public virtual IfcActorSelect? TheActor { get; set; }
		public List<IfcRelAssignsToActor>? IsActingUpon => Model?.GetItems<IfcRelAssignsToActor>().Where(x => x.RelatingActor != null && x.RelatingActor == this).ToList();
		public IfcActor() : base()
		{
		}
		public IfcActor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcActorSelect? TheActor) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.TheActor = TheActor;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				TheActor
			};
		}
		public virtual Global.IfcActorSelect? _TheActor { get { return TheActor; } set { } }
		public virtual List<Global.IfcRelAssignsToActor>? _IsActingUpon
		{
			get
			{
				if(IsActingUpon != null)
				{
					List<Global.IfcRelAssignsToActor>? items = new List<Global.IfcRelAssignsToActor>();
					foreach (IfcRelAssignsToActor item in IsActingUpon)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcActorRole;
	/// Role : IfcRoleEnum;
	/// UserDefinedRole : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// WHERE
	/// WR1 : (Role <> IfcRoleEnum.USERDEFINED) OR
	/// ((Role = IfcRoleEnum.USERDEFINED) AND
	/// EXISTS(SELF.UserDefinedRole));
	/// END_ENTITY;
	/// <summary>
	public class IfcActorRole : Ifc_Entity, Global.IfcActorRole
	{
		public virtual IfcRoleEnum? Role { get; set; }
		public virtual IfcLabel? UserDefinedRole { get; set; }
		public virtual IfcText? Description { get; set; }
		public IfcActorRole() : base()
		{
		}
		public IfcActorRole(IfcRoleEnum? Role, IfcLabel? UserDefinedRole, IfcText? Description) : base ()
		{
			this.Role = Role;
			this.UserDefinedRole = UserDefinedRole;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Role,
				UserDefinedRole,
				Description
			};
		}
		public virtual Global.IfcRoleEnum? _Role { get { return Role; } set { } }
		public virtual Global.IfcLabel? _UserDefinedRole { get { return UserDefinedRole; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
	}
	/// <summary>
	/// ENTITY IfcActuatorType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcActuatorTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcActuatorType : IfcDistributionControlElementType, Global.IfcActuatorType
	{
		public virtual IfcActuatorTypeEnum? PredefinedType { get; set; }
		public IfcActuatorType() : base()
		{
		}
		public IfcActuatorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcActuatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcActuatorTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcAddress
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPostalAddress
	/// ,IfcTelecomAddress));
	/// Purpose : OPTIONAL IfcAddressTypeEnum;
	/// Description : OPTIONAL IfcText;
	/// UserDefinedPurpose : OPTIONAL IfcLabel;
	/// INVERSE
	/// OfPerson : SET [0:?] OF IfcPerson FOR Addresses;
	/// OfOrganization : SET [0:?] OF IfcOrganization FOR Addresses;
	/// WHERE
	/// WR1 : (NOT(EXISTS(Purpose))) OR
	/// ((Purpose <> IfcAddressTypeEnum.USERDEFINED) OR
	/// ((Purpose = IfcAddressTypeEnum.USERDEFINED) AND
	/// EXISTS(SELF.UserDefinedPurpose)));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcAddress : Ifc_Entity, IfcObjectReferenceSelect, Global.IfcAddress
	{
		public virtual IfcAddressTypeEnum? Purpose { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcLabel? UserDefinedPurpose { get; set; }
		public List<IfcPerson>? OfPerson => Model?.GetItems<IfcPerson>().Where(x => x.Addresses != null && x.Addresses.Contains(this)).ToList();
		public List<IfcOrganization>? OfOrganization => Model?.GetItems<IfcOrganization>().Where(x => x.Addresses != null && x.Addresses.Contains(this)).ToList();
		public IfcAddress() : base()
		{
		}
		public IfcAddress(IfcAddressTypeEnum? Purpose, IfcText? Description, IfcLabel? UserDefinedPurpose) : base ()
		{
			this.Purpose = Purpose;
			this.Description = Description;
			this.UserDefinedPurpose = UserDefinedPurpose;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Purpose,
				Description,
				UserDefinedPurpose
			};
		}
		public virtual Global.IfcAddressTypeEnum? _Purpose { get { return Purpose; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcLabel? _UserDefinedPurpose { get { return UserDefinedPurpose; } set { } }
		public virtual List<Global.IfcPerson>? _OfPerson
		{
			get
			{
				if(OfPerson != null)
				{
					List<Global.IfcPerson>? items = new List<Global.IfcPerson>();
					foreach (IfcPerson item in OfPerson)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcOrganization>? _OfOrganization
		{
			get
			{
				if(OfOrganization != null)
				{
					List<Global.IfcOrganization>? items = new List<Global.IfcOrganization>();
					foreach (IfcOrganization item in OfOrganization)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAirTerminalBoxType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcAirTerminalBoxTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcAirTerminalBoxTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirTerminalBoxTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAirTerminalBoxType : IfcFlowControllerType, Global.IfcAirTerminalBoxType
	{
		public virtual IfcAirTerminalBoxTypeEnum? PredefinedType { get; set; }
		public IfcAirTerminalBoxType() : base()
		{
		}
		public IfcAirTerminalBoxType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcAirTerminalBoxTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcAirTerminalBoxTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcAirTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcAirTerminalTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcAirTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirTerminalTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAirTerminalType : IfcFlowTerminalType, Global.IfcAirTerminalType
	{
		public virtual IfcAirTerminalTypeEnum? PredefinedType { get; set; }
		public IfcAirTerminalType() : base()
		{
		}
		public IfcAirTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcAirTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcAirTerminalTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcAirToAirHeatRecoveryType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcAirToAirHeatRecoveryTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcAirToAirHeatRecoveryTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirToAirHeatRecoveryTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcAirToAirHeatRecoveryType : IfcEnergyConversionDeviceType, Global.IfcAirToAirHeatRecoveryType
	{
		public virtual IfcAirToAirHeatRecoveryTypeEnum? PredefinedType { get; set; }
		public IfcAirToAirHeatRecoveryType() : base()
		{
		}
		public IfcAirToAirHeatRecoveryType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcAirToAirHeatRecoveryTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcAirToAirHeatRecoveryTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcAlarmType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcAlarmTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcAlarmType : IfcDistributionControlElementType, Global.IfcAlarmType
	{
		public virtual IfcAlarmTypeEnum? PredefinedType { get; set; }
		public IfcAlarmType() : base()
		{
		}
		public IfcAlarmType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcAlarmTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcAlarmTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcAngularDimension
	/// SUBTYPE OF (IfcDimensionCurveDirectedCallout);
	/// END_ENTITY;
	/// <summary>
	public class IfcAngularDimension : IfcDimensionCurveDirectedCallout, Global.IfcAngularDimension
	{
		public IfcAngularDimension() : base()
		{
		}
		public IfcAngularDimension(List<IfcDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Contents
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotation
	/// SUBTYPE OF (IfcProduct);
	/// INVERSE
	/// ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
	/// END_ENTITY;
	/// <summary>
	public class IfcAnnotation : IfcProduct, Global.IfcAnnotation
	{
		public List<IfcRelContainedInSpatialStructure>? ContainedInStructure => Model?.GetItems<IfcRelContainedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList();
		public IfcAnnotation() : base()
		{
		}
		public IfcAnnotation(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation
			};
		}
		public virtual List<Global.IfcRelContainedInSpatialStructure>? _ContainedInStructure
		{
			get
			{
				if(ContainedInStructure != null)
				{
					List<Global.IfcRelContainedInSpatialStructure>? items = new List<Global.IfcRelContainedInSpatialStructure>();
					foreach (IfcRelContainedInSpatialStructure item in ContainedInStructure)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationCurveOccurrence
	/// SUPERTYPE OF (ONEOF
	/// (IfcDimensionCurve
	/// ,IfcProjectionCurve))
	/// SUBTYPE OF (IfcAnnotationOccurrence);
	/// WHERE
	/// WR31 : NOT(EXISTS(SELF\IfcStyledItem.Item)) OR
	/// ('IFC2X3.IFCCURVE' IN TYPEOF (SELF\IfcStyledItem.Item));
	/// END_ENTITY;
	/// <summary>
	public class IfcAnnotationCurveOccurrence : IfcAnnotationOccurrence, IfcDraughtingCalloutElement, Global.IfcAnnotationCurveOccurrence
	{
		public IfcAnnotationCurveOccurrence() : base()
		{
		}
		public IfcAnnotationCurveOccurrence(IfcRepresentationItem? Item, List<IfcPresentationStyleAssignment>? Styles, IfcLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationFillArea
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// OuterBoundary : IfcCurve;
	/// InnerBoundaries : OPTIONAL SET [1:?] OF IfcCurve;
	/// END_ENTITY;
	/// <summary>
	public class IfcAnnotationFillArea : IfcGeometricRepresentationItem, Global.IfcAnnotationFillArea
	{
		public virtual IfcCurve? OuterBoundary { get; set; }
		public virtual List<IfcCurve>? InnerBoundaries { get; set; }
		public IfcAnnotationFillArea() : base()
		{
		}
		public IfcAnnotationFillArea(IfcCurve? OuterBoundary, List<IfcCurve>? InnerBoundaries) : base ()
		{
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				OuterBoundary,
				InnerBoundaries
			};
		}
		public virtual Global.IfcCurve? _OuterBoundary { get { return OuterBoundary; } set { } }
		public virtual List<Global.IfcCurve>? _InnerBoundaries
		{
			get
			{
				if(InnerBoundaries != null)
				{
					List<Global.IfcCurve>? items = new List<Global.IfcCurve>();
					foreach (IfcCurve item in InnerBoundaries)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationFillAreaOccurrence
	/// SUBTYPE OF (IfcAnnotationOccurrence);
	/// FillStyleTarget : OPTIONAL IfcPoint;
	/// GlobalOrLocal : OPTIONAL IfcGlobalOrLocalEnum;
	/// WHERE
	/// WR31 : NOT(EXISTS(SELF\IfcStyledItem.Item)) OR
	/// ('IFC2X3.IFCANNOTATIONFILLAREA' IN TYPEOF (SELF\IfcStyledItem.Item));
	/// END_ENTITY;
	/// <summary>
	public class IfcAnnotationFillAreaOccurrence : IfcAnnotationOccurrence, Global.IfcAnnotationFillAreaOccurrence
	{
		public virtual IfcPoint? FillStyleTarget { get; set; }
		public virtual IfcGlobalOrLocalEnum? GlobalOrLocal { get; set; }
		public IfcAnnotationFillAreaOccurrence() : base()
		{
		}
		public IfcAnnotationFillAreaOccurrence(IfcRepresentationItem? Item, List<IfcPresentationStyleAssignment>? Styles, IfcLabel? Name, IfcPoint? FillStyleTarget, IfcGlobalOrLocalEnum? GlobalOrLocal) : base (Item, Styles, Name)
		{
			this.FillStyleTarget = FillStyleTarget;
			this.GlobalOrLocal = GlobalOrLocal;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name,
				FillStyleTarget,
				GlobalOrLocal
			};
		}
		public virtual Global.IfcPoint? _FillStyleTarget { get { return FillStyleTarget; } set { } }
		public virtual Global.IfcGlobalOrLocalEnum? _GlobalOrLocal { get { return GlobalOrLocal; } set { } }
	}
	/// <summary>
	/// ENTITY IfcAnnotationOccurrence
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAnnotationCurveOccurrence
	/// ,IfcAnnotationFillAreaOccurrence
	/// ,IfcAnnotationSurfaceOccurrence
	/// ,IfcAnnotationSymbolOccurrence
	/// ,IfcAnnotationTextOccurrence))
	/// SUBTYPE OF (IfcStyledItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcAnnotationOccurrence : IfcStyledItem, Global.IfcAnnotationOccurrence
	{
		public IfcAnnotationOccurrence() : base()
		{
		}
		public IfcAnnotationOccurrence(IfcRepresentationItem? Item, List<IfcPresentationStyleAssignment>? Styles, IfcLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationSurface
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Item : IfcGeometricRepresentationItem;
	/// TextureCoordinates : OPTIONAL IfcTextureCoordinate;
	/// WHERE
	/// WR01 : SIZEOF([
	/// 'IFC2X3.IFCSURFACE',
	/// 'IFC2X3.IFCSHELLBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCFACEBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCSOLIDMODEL',
	/// 'IFC2X3.IFCBOOLEANRESULT',
	/// 'IFC2X3.IFCCSGPRIMITIVE3D']
	/// * TYPEOF(Item)
	/// ) >= 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcAnnotationSurface : IfcGeometricRepresentationItem, Global.IfcAnnotationSurface
	{
		public virtual IfcGeometricRepresentationItem? Item { get; set; }
		public virtual IfcTextureCoordinate? TextureCoordinates { get; set; }
		public IfcAnnotationSurface() : base()
		{
		}
		public IfcAnnotationSurface(IfcGeometricRepresentationItem? Item, IfcTextureCoordinate? TextureCoordinates) : base ()
		{
			this.Item = Item;
			this.TextureCoordinates = TextureCoordinates;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				TextureCoordinates
			};
		}
		public virtual Global.IfcGeometricRepresentationItem? _Item { get { return Item; } set { } }
		public virtual Global.IfcTextureCoordinate? _TextureCoordinates { get { return TextureCoordinates; } set { } }
	}
	/// <summary>
	/// ENTITY IfcAnnotationSurfaceOccurrence
	/// SUBTYPE OF (IfcAnnotationOccurrence);
	/// WHERE
	/// WR31 : NOT(EXISTS(SELF\IfcStyledItem.Item)) OR
	/// (SIZEOF(
	/// ['IFC2X3.IFCSURFACE',
	/// 'IFC2X3.IFCFACEBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCSHELLBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCSOLIDMODEL'] *
	/// TYPEOF(SELF\IfcStyledItem.Item)) > 0);
	/// END_ENTITY;
	/// <summary>
	public class IfcAnnotationSurfaceOccurrence : IfcAnnotationOccurrence, Global.IfcAnnotationSurfaceOccurrence
	{
		public IfcAnnotationSurfaceOccurrence() : base()
		{
		}
		public IfcAnnotationSurfaceOccurrence(IfcRepresentationItem? Item, List<IfcPresentationStyleAssignment>? Styles, IfcLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationSymbolOccurrence
	/// SUPERTYPE OF (ONEOF
	/// (IfcTerminatorSymbol))
	/// SUBTYPE OF (IfcAnnotationOccurrence);
	/// WHERE
	/// WR31 : NOT(EXISTS(SELF\IfcStyledItem.Item)) OR
	/// ('IFC2X3.IFCDEFINEDSYMBOL' IN TYPEOF (SELF\IfcStyledItem.Item));
	/// END_ENTITY;
	/// <summary>
	public class IfcAnnotationSymbolOccurrence : IfcAnnotationOccurrence, IfcDraughtingCalloutElement, Global.IfcAnnotationSymbolOccurrence
	{
		public IfcAnnotationSymbolOccurrence() : base()
		{
		}
		public IfcAnnotationSymbolOccurrence(IfcRepresentationItem? Item, List<IfcPresentationStyleAssignment>? Styles, IfcLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationTextOccurrence
	/// SUBTYPE OF (IfcAnnotationOccurrence);
	/// WHERE
	/// WR31 : NOT(EXISTS(SELF\IfcStyledItem.Item)) OR
	/// ('IFC2X3.IFCTEXTLITERAL' IN TYPEOF (SELF\IfcStyledItem.Item));
	/// END_ENTITY;
	/// <summary>
	public class IfcAnnotationTextOccurrence : IfcAnnotationOccurrence, IfcDraughtingCalloutElement, Global.IfcAnnotationTextOccurrence
	{
		public IfcAnnotationTextOccurrence() : base()
		{
		}
		public IfcAnnotationTextOccurrence(IfcRepresentationItem? Item, List<IfcPresentationStyleAssignment>? Styles, IfcLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcApplication;
	/// ApplicationDeveloper : IfcOrganization;
	/// Version : IfcLabel;
	/// ApplicationFullName : IfcLabel;
	/// ApplicationIdentifier : IfcIdentifier;
	/// UNIQUE
	/// UR1 : ApplicationIdentifier;
	/// UR2 : ApplicationFullName, Version;
	/// END_ENTITY;
	/// <summary>
	public class IfcApplication : Ifc_Entity, Global.IfcApplication
	{
		public virtual IfcOrganization? ApplicationDeveloper { get; set; }
		public virtual IfcLabel? Version { get; set; }
		public virtual IfcLabel? ApplicationFullName { get; set; }
		public virtual IfcIdentifier? ApplicationIdentifier { get; set; }
		public IfcApplication() : base()
		{
		}
		public IfcApplication(IfcOrganization? ApplicationDeveloper, IfcLabel? Version, IfcLabel? ApplicationFullName, IfcIdentifier? ApplicationIdentifier) : base ()
		{
			this.ApplicationDeveloper = ApplicationDeveloper;
			this.Version = Version;
			this.ApplicationFullName = ApplicationFullName;
			this.ApplicationIdentifier = ApplicationIdentifier;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ApplicationDeveloper,
				Version,
				ApplicationFullName,
				ApplicationIdentifier
			};
		}
		public virtual Global.IfcOrganization? _ApplicationDeveloper { get { return ApplicationDeveloper; } set { } }
		public virtual Global.IfcLabel? _Version { get { return Version; } set { } }
		public virtual Global.IfcLabel? _ApplicationFullName { get { return ApplicationFullName; } set { } }
		public virtual Global.IfcIdentifier? _ApplicationIdentifier { get { return ApplicationIdentifier; } set { } }
	}
	/// <summary>
	/// ENTITY IfcAppliedValue
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCostValue
	/// ,IfcEnvironmentalImpactValue));
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// AppliedValue : OPTIONAL IfcAppliedValueSelect;
	/// UnitBasis : OPTIONAL IfcMeasureWithUnit;
	/// ApplicableDate : OPTIONAL IfcDateTimeSelect;
	/// FixedUntilDate : OPTIONAL IfcDateTimeSelect;
	/// INVERSE
	/// ValuesReferenced : SET [0:?] OF IfcReferencesValueDocument FOR ReferencingValues;
	/// ValueOfComponents : SET [0:?] OF IfcAppliedValueRelationship FOR ComponentOfTotal;
	/// IsComponentIn : SET [0:?] OF IfcAppliedValueRelationship FOR Components;
	/// WHERE
	/// WR1 : EXISTS (AppliedValue) OR
	/// EXISTS (ValueOfComponents);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcAppliedValue : Ifc_Entity, IfcObjectReferenceSelect, Global.IfcAppliedValue
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcAppliedValueSelect? AppliedValue { get; set; }
		public virtual IfcMeasureWithUnit? UnitBasis { get; set; }
		public virtual IfcDateTimeSelect? ApplicableDate { get; set; }
		public virtual IfcDateTimeSelect? FixedUntilDate { get; set; }
		public List<IfcReferencesValueDocument>? ValuesReferenced => Model?.GetItems<IfcReferencesValueDocument>().Where(x => x.ReferencingValues != null && x.ReferencingValues.Contains(this)).ToList();
		public List<IfcAppliedValueRelationship>? ValueOfComponents => Model?.GetItems<IfcAppliedValueRelationship>().Where(x => x.ComponentOfTotal != null && x.ComponentOfTotal == this).ToList();
		public List<IfcAppliedValueRelationship>? IsComponentIn => Model?.GetItems<IfcAppliedValueRelationship>().Where(x => x.Components != null && x.Components.Contains(this)).ToList();
		public IfcAppliedValue() : base()
		{
		}
		public IfcAppliedValue(IfcLabel? Name, IfcText? Description, IfcAppliedValueSelect? AppliedValue, IfcMeasureWithUnit? UnitBasis, IfcDateTimeSelect? ApplicableDate, IfcDateTimeSelect? FixedUntilDate) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.AppliedValue = AppliedValue;
			this.UnitBasis = UnitBasis;
			this.ApplicableDate = ApplicableDate;
			this.FixedUntilDate = FixedUntilDate;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				AppliedValue,
				UnitBasis,
				ApplicableDate,
				FixedUntilDate
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcAppliedValueSelect? _AppliedValue { get { return AppliedValue; } set { } }
		public virtual Global.IfcMeasureWithUnit? _UnitBasis { get { return UnitBasis; } set { } }
		public virtual Global.IfcDateTimeSelect? _ApplicableDate { get { return ApplicableDate; } set { } }
		public virtual Global.IfcDateTimeSelect? _FixedUntilDate { get { return FixedUntilDate; } set { } }
		public virtual List<Global.IfcReferencesValueDocument>? _ValuesReferenced
		{
			get
			{
				if(ValuesReferenced != null)
				{
					List<Global.IfcReferencesValueDocument>? items = new List<Global.IfcReferencesValueDocument>();
					foreach (IfcReferencesValueDocument item in ValuesReferenced)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcAppliedValueRelationship>? _ValueOfComponents
		{
			get
			{
				if(ValueOfComponents != null)
				{
					List<Global.IfcAppliedValueRelationship>? items = new List<Global.IfcAppliedValueRelationship>();
					foreach (IfcAppliedValueRelationship item in ValueOfComponents)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcAppliedValueRelationship>? _IsComponentIn
		{
			get
			{
				if(IsComponentIn != null)
				{
					List<Global.IfcAppliedValueRelationship>? items = new List<Global.IfcAppliedValueRelationship>();
					foreach (IfcAppliedValueRelationship item in IsComponentIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAppliedValueRelationship;
	/// ComponentOfTotal : IfcAppliedValue;
	/// Components : SET [1:?] OF IfcAppliedValue;
	/// ArithmeticOperator : IfcArithmeticOperatorEnum;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IfcAppliedValueRelationship : Ifc_Entity, Global.IfcAppliedValueRelationship
	{
		public virtual IfcAppliedValue? ComponentOfTotal { get; set; }
		public virtual List<IfcAppliedValue>? Components { get; set; }
		public virtual IfcArithmeticOperatorEnum? ArithmeticOperator { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public IfcAppliedValueRelationship() : base()
		{
		}
		public IfcAppliedValueRelationship(IfcAppliedValue? ComponentOfTotal, List<IfcAppliedValue>? Components, IfcArithmeticOperatorEnum? ArithmeticOperator, IfcLabel? Name, IfcText? Description) : base ()
		{
			this.ComponentOfTotal = ComponentOfTotal;
			this.Components = Components;
			this.ArithmeticOperator = ArithmeticOperator;
			this.Name = Name;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ComponentOfTotal,
				Components,
				ArithmeticOperator,
				Name,
				Description
			};
		}
		public virtual Global.IfcAppliedValue? _ComponentOfTotal { get { return ComponentOfTotal; } set { } }
		public virtual List<Global.IfcAppliedValue>? _Components
		{
			get
			{
				if(Components != null)
				{
					List<Global.IfcAppliedValue>? items = new List<Global.IfcAppliedValue>();
					foreach (IfcAppliedValue item in Components)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcArithmeticOperatorEnum? _ArithmeticOperator { get { return ArithmeticOperator; } set { } }
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
	}
	/// <summary>
	/// ENTITY IfcApproval;
	/// Description : OPTIONAL IfcText;
	/// ApprovalDateTime : IfcDateTimeSelect;
	/// ApprovalStatus : OPTIONAL IfcLabel;
	/// ApprovalLevel : OPTIONAL IfcLabel;
	/// ApprovalQualifier : OPTIONAL IfcText;
	/// Name : IfcLabel;
	/// Identifier : IfcIdentifier;
	/// INVERSE
	/// Actors : SET [0:?] OF IfcApprovalActorRelationship FOR Approval;
	/// IsRelatedWith : SET [0:?] OF IfcApprovalRelationship FOR RelatedApproval;
	/// Relates : SET [0:?] OF IfcApprovalRelationship FOR RelatingApproval;
	/// END_ENTITY;
	/// <summary>
	public class IfcApproval : Ifc_Entity, Global.IfcApproval
	{
		public virtual IfcText? Description { get; set; }
		public virtual IfcDateTimeSelect? ApprovalDateTime { get; set; }
		public virtual IfcLabel? ApprovalStatus { get; set; }
		public virtual IfcLabel? ApprovalLevel { get; set; }
		public virtual IfcText? ApprovalQualifier { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcIdentifier? Identifier { get; set; }
		public List<IfcApprovalActorRelationship>? Actors => Model?.GetItems<IfcApprovalActorRelationship>().Where(x => x.Approval != null && x.Approval == this).ToList();
		public List<IfcApprovalRelationship>? IsRelatedWith => Model?.GetItems<IfcApprovalRelationship>().Where(x => x.RelatedApproval != null && x.RelatedApproval == this).ToList();
		public List<IfcApprovalRelationship>? Relates => Model?.GetItems<IfcApprovalRelationship>().Where(x => x.RelatingApproval != null && x.RelatingApproval == this).ToList();
		public IfcApproval() : base()
		{
		}
		public IfcApproval(IfcText? Description, IfcDateTimeSelect? ApprovalDateTime, IfcLabel? ApprovalStatus, IfcLabel? ApprovalLevel, IfcText? ApprovalQualifier, IfcLabel? Name, IfcIdentifier? Identifier) : base ()
		{
			this.Description = Description;
			this.ApprovalDateTime = ApprovalDateTime;
			this.ApprovalStatus = ApprovalStatus;
			this.ApprovalLevel = ApprovalLevel;
			this.ApprovalQualifier = ApprovalQualifier;
			this.Name = Name;
			this.Identifier = Identifier;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Description,
				ApprovalDateTime,
				ApprovalStatus,
				ApprovalLevel,
				ApprovalQualifier,
				Name,
				Identifier
			};
		}
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcDateTimeSelect? _ApprovalDateTime { get { return ApprovalDateTime; } set { } }
		public virtual Global.IfcLabel? _ApprovalStatus { get { return ApprovalStatus; } set { } }
		public virtual Global.IfcLabel? _ApprovalLevel { get { return ApprovalLevel; } set { } }
		public virtual Global.IfcText? _ApprovalQualifier { get { return ApprovalQualifier; } set { } }
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcIdentifier? _Identifier { get { return Identifier; } set { } }
		public virtual List<Global.IfcApprovalActorRelationship>? _Actors
		{
			get
			{
				if(Actors != null)
				{
					List<Global.IfcApprovalActorRelationship>? items = new List<Global.IfcApprovalActorRelationship>();
					foreach (IfcApprovalActorRelationship item in Actors)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcApprovalRelationship>? _IsRelatedWith
		{
			get
			{
				if(IsRelatedWith != null)
				{
					List<Global.IfcApprovalRelationship>? items = new List<Global.IfcApprovalRelationship>();
					foreach (IfcApprovalRelationship item in IsRelatedWith)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcApprovalRelationship>? _Relates
		{
			get
			{
				if(Relates != null)
				{
					List<Global.IfcApprovalRelationship>? items = new List<Global.IfcApprovalRelationship>();
					foreach (IfcApprovalRelationship item in Relates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcApprovalActorRelationship;
	/// Actor : IfcActorSelect;
	/// Approval : IfcApproval;
	/// Role : IfcActorRole;
	/// END_ENTITY;
	/// <summary>
	public class IfcApprovalActorRelationship : Ifc_Entity, Global.IfcApprovalActorRelationship
	{
		public virtual IfcActorSelect? Actor { get; set; }
		public virtual IfcApproval? Approval { get; set; }
		public virtual IfcActorRole? Role { get; set; }
		public IfcApprovalActorRelationship() : base()
		{
		}
		public IfcApprovalActorRelationship(IfcActorSelect? Actor, IfcApproval? Approval, IfcActorRole? Role) : base ()
		{
			this.Actor = Actor;
			this.Approval = Approval;
			this.Role = Role;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Actor,
				Approval,
				Role
			};
		}
		public virtual Global.IfcActorSelect? _Actor { get { return Actor; } set { } }
		public virtual Global.IfcApproval? _Approval { get { return Approval; } set { } }
		public virtual Global.IfcActorRole? _Role { get { return Role; } set { } }
	}
	/// <summary>
	/// ENTITY IfcApprovalPropertyRelationship;
	/// ApprovedProperties : SET [1:?] OF IfcProperty;
	/// Approval : IfcApproval;
	/// END_ENTITY;
	/// <summary>
	public class IfcApprovalPropertyRelationship : Ifc_Entity, Global.IfcApprovalPropertyRelationship
	{
		public virtual List<IfcProperty>? ApprovedProperties { get; set; }
		public virtual IfcApproval? Approval { get; set; }
		public IfcApprovalPropertyRelationship() : base()
		{
		}
		public IfcApprovalPropertyRelationship(List<IfcProperty>? ApprovedProperties, IfcApproval? Approval) : base ()
		{
			this.ApprovedProperties = ApprovedProperties;
			this.Approval = Approval;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ApprovedProperties,
				Approval
			};
		}
		public virtual List<Global.IfcProperty>? _ApprovedProperties
		{
			get
			{
				if(ApprovedProperties != null)
				{
					List<Global.IfcProperty>? items = new List<Global.IfcProperty>();
					foreach (IfcProperty item in ApprovedProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcApproval? _Approval { get { return Approval; } set { } }
	}
	/// <summary>
	/// ENTITY IfcApprovalRelationship;
	/// RelatedApproval : IfcApproval;
	/// RelatingApproval : IfcApproval;
	/// Description : OPTIONAL IfcText;
	/// Name : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcApprovalRelationship : Ifc_Entity, Global.IfcApprovalRelationship
	{
		public virtual IfcApproval? RelatedApproval { get; set; }
		public virtual IfcApproval? RelatingApproval { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public IfcApprovalRelationship() : base()
		{
		}
		public IfcApprovalRelationship(IfcApproval? RelatedApproval, IfcApproval? RelatingApproval, IfcText? Description, IfcLabel? Name) : base ()
		{
			this.RelatedApproval = RelatedApproval;
			this.RelatingApproval = RelatingApproval;
			this.Description = Description;
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RelatedApproval,
				RelatingApproval,
				Description,
				Name
			};
		}
		public virtual Global.IfcApproval? _RelatedApproval { get { return RelatedApproval; } set { } }
		public virtual Global.IfcApproval? _RelatingApproval { get { return RelatingApproval; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
	}
	/// <summary>
	/// ENTITY IfcArbitraryClosedProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcArbitraryProfileDefWithVoids))
	/// SUBTYPE OF (IfcProfileDef);
	/// OuterCurve : IfcCurve;
	/// WHERE
	/// WR1 : OuterCurve.Dim = 2;
	/// WR2 : NOT('IFC2X3.IFCLINE' IN TYPEOF(OuterCurve));
	/// WR3 : NOT('IFC2X3.IFCOFFSETCURVE2D' IN TYPEOF(OuterCurve));
	/// END_ENTITY;
	/// <summary>
	public class IfcArbitraryClosedProfileDef : IfcProfileDef, Global.IfcArbitraryClosedProfileDef
	{
		public virtual IfcCurve? OuterCurve { get; set; }
		public IfcArbitraryClosedProfileDef() : base()
		{
		}
		public IfcArbitraryClosedProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcCurve? OuterCurve) : base (ProfileType, ProfileName)
		{
			this.OuterCurve = OuterCurve;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				OuterCurve
			};
		}
		public virtual Global.IfcCurve? _OuterCurve { get { return OuterCurve; } set { } }
	}
	/// <summary>
	/// ENTITY IfcArbitraryOpenProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcCenterLineProfileDef))
	/// SUBTYPE OF (IfcProfileDef);
	/// Curve : IfcBoundedCurve;
	/// WHERE
	/// WR11 : ('IFC2X3.IFCCENTERLINEPROFILEDEF' IN TYPEOF(SELF)) OR
	/// (SELF\IfcProfileDef.ProfileType = IfcProfileTypeEnum.CURVE);
	/// WR12 : Curve.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class IfcArbitraryOpenProfileDef : IfcProfileDef, Global.IfcArbitraryOpenProfileDef
	{
		public virtual IfcBoundedCurve? Curve { get; set; }
		public IfcArbitraryOpenProfileDef() : base()
		{
		}
		public IfcArbitraryOpenProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcBoundedCurve? Curve) : base (ProfileType, ProfileName)
		{
			this.Curve = Curve;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Curve
			};
		}
		public virtual Global.IfcBoundedCurve? _Curve { get { return Curve; } set { } }
	}
	/// <summary>
	/// ENTITY IfcArbitraryProfileDefWithVoids
	/// SUBTYPE OF (IfcArbitraryClosedProfileDef);
	/// InnerCurves : SET [1:?] OF IfcCurve;
	/// WHERE
	/// WR1 : SELF\IfcProfileDef.ProfileType = AREA;
	/// WR2 : SIZEOF(QUERY(temp <* InnerCurves | temp.Dim <> 2)) = 0;
	/// WR3 : SIZEOF(QUERY(temp <* InnerCurves | 'IFC2X3.IFCLINE' IN TYPEOF(temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcArbitraryProfileDefWithVoids : IfcArbitraryClosedProfileDef, Global.IfcArbitraryProfileDefWithVoids
	{
		public virtual List<IfcCurve>? InnerCurves { get; set; }
		public IfcArbitraryProfileDefWithVoids() : base()
		{
		}
		public IfcArbitraryProfileDefWithVoids(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcCurve? OuterCurve, List<IfcCurve>? InnerCurves) : base (ProfileType, ProfileName, OuterCurve)
		{
			this.InnerCurves = InnerCurves;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				OuterCurve,
				InnerCurves
			};
		}
		public virtual List<Global.IfcCurve>? _InnerCurves
		{
			get
			{
				if(InnerCurves != null)
				{
					List<Global.IfcCurve>? items = new List<Global.IfcCurve>();
					foreach (IfcCurve item in InnerCurves)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAsset
	/// SUBTYPE OF (IfcGroup);
	/// AssetID : IfcIdentifier;
	/// OriginalValue : IfcCostValue;
	/// CurrentValue : IfcCostValue;
	/// TotalReplacementCost : IfcCostValue;
	/// Owner : IfcActorSelect;
	/// User : IfcActorSelect;
	/// ResponsiblePerson : IfcPerson;
	/// IncorporationDate : IfcCalendarDate;
	/// DepreciatedValue : IfcCostValue;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects | NOT('IFC2X3.IFCELEMENT' IN TYPEOF(Temp)))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcAsset : IfcGroup, Global.IfcAsset
	{
		public virtual IfcIdentifier? AssetID { get; set; }
		public virtual IfcCostValue? OriginalValue { get; set; }
		public virtual IfcCostValue? CurrentValue { get; set; }
		public virtual IfcCostValue? TotalReplacementCost { get; set; }
		public virtual IfcActorSelect? Owner { get; set; }
		public virtual IfcActorSelect? User { get; set; }
		public virtual IfcPerson? ResponsiblePerson { get; set; }
		public virtual IfcCalendarDate? IncorporationDate { get; set; }
		public virtual IfcCostValue? DepreciatedValue { get; set; }
		public IfcAsset() : base()
		{
		}
		public IfcAsset(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? AssetID, IfcCostValue? OriginalValue, IfcCostValue? CurrentValue, IfcCostValue? TotalReplacementCost, IfcActorSelect? Owner, IfcActorSelect? User, IfcPerson? ResponsiblePerson, IfcCalendarDate? IncorporationDate, IfcCostValue? DepreciatedValue) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.AssetID = AssetID;
			this.OriginalValue = OriginalValue;
			this.CurrentValue = CurrentValue;
			this.TotalReplacementCost = TotalReplacementCost;
			this.Owner = Owner;
			this.User = User;
			this.ResponsiblePerson = ResponsiblePerson;
			this.IncorporationDate = IncorporationDate;
			this.DepreciatedValue = DepreciatedValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				AssetID,
				OriginalValue,
				CurrentValue,
				TotalReplacementCost,
				Owner,
				User,
				ResponsiblePerson,
				IncorporationDate,
				DepreciatedValue
			};
		}
		public virtual Global.IfcIdentifier? _AssetID { get { return AssetID; } set { } }
		public virtual Global.IfcCostValue? _OriginalValue { get { return OriginalValue; } set { } }
		public virtual Global.IfcCostValue? _CurrentValue { get { return CurrentValue; } set { } }
		public virtual Global.IfcCostValue? _TotalReplacementCost { get { return TotalReplacementCost; } set { } }
		public virtual Global.IfcActorSelect? _Owner { get { return Owner; } set { } }
		public virtual Global.IfcActorSelect? _User { get { return User; } set { } }
		public virtual Global.IfcPerson? _ResponsiblePerson { get { return ResponsiblePerson; } set { } }
		public virtual Global.IfcCalendarDate? _IncorporationDate { get { return IncorporationDate; } set { } }
		public virtual Global.IfcCostValue? _DepreciatedValue { get { return DepreciatedValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcAsymmetricIShapeProfileDef
	/// SUBTYPE OF (IfcIShapeProfileDef);
	/// TopFlangeWidth : IfcPositiveLengthMeasure;
	/// TopFlangeThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// TopFlangeFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcAsymmetricIShapeProfileDef : IfcIShapeProfileDef, Global.IfcAsymmetricIShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? TopFlangeWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? TopFlangeThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? TopFlangeFilletRadius { get; set; }
		public virtual IfcPositiveLengthMeasure? CentreOfGravityInY { get; set; }
		public IfcAsymmetricIShapeProfileDef() : base()
		{
		}
		public IfcAsymmetricIShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? OverallWidth, IfcPositiveLengthMeasure? OverallDepth, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? FlangeThickness, IfcPositiveLengthMeasure? FilletRadius, IfcPositiveLengthMeasure? TopFlangeWidth, IfcPositiveLengthMeasure? TopFlangeThickness, IfcPositiveLengthMeasure? TopFlangeFilletRadius, IfcPositiveLengthMeasure? CentreOfGravityInY) : base (ProfileType, ProfileName, Position, OverallWidth, OverallDepth, WebThickness, FlangeThickness, FilletRadius)
		{
			this.TopFlangeWidth = TopFlangeWidth;
			this.TopFlangeThickness = TopFlangeThickness;
			this.TopFlangeFilletRadius = TopFlangeFilletRadius;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				OverallWidth,
				OverallDepth,
				WebThickness,
				FlangeThickness,
				FilletRadius,
				TopFlangeWidth,
				TopFlangeThickness,
				TopFlangeFilletRadius,
				CentreOfGravityInY
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _TopFlangeWidth { get { return TopFlangeWidth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _TopFlangeThickness { get { return TopFlangeThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _TopFlangeFilletRadius { get { return TopFlangeFilletRadius; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _CentreOfGravityInY { get { return CentreOfGravityInY; } set { } }
	}
	/// <summary>
	/// ENTITY IfcAxis1Placement
	/// SUBTYPE OF (IfcPlacement);
	/// Axis : OPTIONAL IfcDirection;
	/// DERIVE
	/// Z : IfcDirection := NVL (IfcNormalise(Axis), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
	/// WHERE
	/// WR1 : (NOT (EXISTS (Axis))) OR (Axis.Dim = 3);
	/// WR2 : SELF\IfcPlacement.Location.Dim = 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcAxis1Placement : IfcPlacement, Global.IfcAxis1Placement
	{
		public virtual IfcDirection? Axis { get; set; }
		//TODO DERIVE
		public virtual IfcDirection? Z {get {return null;}}
		public IfcAxis1Placement() : base()
		{
		}
		public IfcAxis1Placement(IfcCartesianPoint? Location, IfcDirection? Axis) : base (Location)
		{
			this.Axis = Axis;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				Axis
			};
		}
		public virtual Global.IfcDirection? _Axis { get { return Axis; } set { } }
		public virtual Global.IfcDirection? _Z { get { return Z; } set { } }
	}
	/// <summary>
	/// ENTITY IfcAxis2Placement2D
	/// SUBTYPE OF (IfcPlacement);
	/// RefDirection : OPTIONAL IfcDirection;
	/// DERIVE
	/// P : LIST [2:2] OF IfcDirection := IfcBuild2Axes(RefDirection);
	/// WHERE
	/// WR1 : (NOT (EXISTS (RefDirection))) OR (RefDirection.Dim = 2);
	/// WR2 : SELF\IfcPlacement.Location.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class IfcAxis2Placement2D : IfcPlacement, IfcAxis2Placement, Global.IfcAxis2Placement2D
	{
		public virtual IfcDirection? RefDirection { get; set; }
		//TODO DERIVE
		public virtual List<IfcDirection>? P {get {return null;}}
		public IfcAxis2Placement2D() : base()
		{
		}
		public IfcAxis2Placement2D(IfcCartesianPoint? Location, IfcDirection? RefDirection) : base (Location)
		{
			this.RefDirection = RefDirection;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				RefDirection
			};
		}
		public virtual Global.IfcDirection? _RefDirection { get { return RefDirection; } set { } }
		public virtual List<Global.IfcDirection>? _P
		{
			get
			{
				if(P != null)
				{
					List<Global.IfcDirection>? items = new List<Global.IfcDirection>();
					foreach (IfcDirection item in P)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAxis2Placement3D
	/// SUBTYPE OF (IfcPlacement);
	/// Axis : OPTIONAL IfcDirection;
	/// RefDirection : OPTIONAL IfcDirection;
	/// DERIVE
	/// P : LIST [3:3] OF IfcDirection := IfcBuildAxes(Axis, RefDirection);
	/// WHERE
	/// WR1 : SELF\IfcPlacement.Location.Dim = 3;
	/// WR2 : (NOT (EXISTS (Axis))) OR (Axis.Dim = 3);
	/// WR3 : (NOT (EXISTS (RefDirection))) OR (RefDirection.Dim = 3);
	/// WR4 : (NOT (EXISTS (Axis))) OR (NOT (EXISTS (RefDirection))) OR (IfcCrossProduct(Axis,RefDirection).Magnitude > 0.0);
	/// WR5 : NOT ((EXISTS (Axis)) XOR (EXISTS (RefDirection)));
	/// END_ENTITY;
	/// <summary>
	public class IfcAxis2Placement3D : IfcPlacement, IfcAxis2Placement, Global.IfcAxis2Placement3D
	{
		public virtual IfcDirection? Axis { get; set; }
		public virtual IfcDirection? RefDirection { get; set; }
		//TODO DERIVE
		public virtual List<IfcDirection>? P {get {return null;}}
		public IfcAxis2Placement3D() : base()
		{
		}
		public IfcAxis2Placement3D(IfcCartesianPoint? Location, IfcDirection? Axis, IfcDirection? RefDirection) : base (Location)
		{
			this.Axis = Axis;
			this.RefDirection = RefDirection;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				Axis,
				RefDirection
			};
		}
		public virtual Global.IfcDirection? _Axis { get { return Axis; } set { } }
		public virtual Global.IfcDirection? _RefDirection { get { return RefDirection; } set { } }
		public virtual List<Global.IfcDirection>? _P
		{
			get
			{
				if(P != null)
				{
					List<Global.IfcDirection>? items = new List<Global.IfcDirection>();
					foreach (IfcDirection item in P)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBSplineCurve
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBezierCurve))
	/// SUBTYPE OF (IfcBoundedCurve);
	/// Degree : INTEGER;
	/// ControlPointsList : LIST [2:?] OF IfcCartesianPoint;
	/// CurveForm : IfcBSplineCurveForm;
	/// ClosedCurve : LOGICAL;
	/// SelfIntersect : LOGICAL;
	/// DERIVE
	/// ControlPoints : ARRAY [0:255] OF IfcCartesianPoint := IfcListToArray(ControlPointsList,0,UpperIndexOnControlPoints);
	/// UpperIndexOnControlPoints : INTEGER := (SIZEOF(ControlPointsList) - 1);
	/// WHERE
	/// WR41 : SIZEOF(QUERY(Temp <* ControlPointsList |
	/// Temp.Dim <> ControlPointsList[1].Dim))
	/// = 0;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBSplineCurve : IfcBoundedCurve, Global.IfcBSplineCurve
	{
		public virtual INTEGER? Degree { get; set; }
		public virtual List<IfcCartesianPoint>? ControlPointsList { get; set; }
		public virtual IfcBSplineCurveForm? CurveForm { get; set; }
		public virtual LOGICAL? ClosedCurve { get; set; }
		public virtual LOGICAL? SelfIntersect { get; set; }
		//TODO DERIVE
		public virtual List<IfcCartesianPoint>? ControlPoints {get {return null;}}
		//TODO DERIVE
		public virtual INTEGER? UpperIndexOnControlPoints {get {return null;}}
		public IfcBSplineCurve() : base()
		{
		}
		public IfcBSplineCurve(INTEGER? Degree, List<IfcCartesianPoint>? ControlPointsList, IfcBSplineCurveForm? CurveForm, LOGICAL? ClosedCurve, LOGICAL? SelfIntersect) : base ()
		{
			this.Degree = Degree;
			this.ControlPointsList = ControlPointsList;
			this.CurveForm = CurveForm;
			this.ClosedCurve = ClosedCurve;
			this.SelfIntersect = SelfIntersect;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Degree,
				ControlPointsList,
				CurveForm,
				ClosedCurve,
				SelfIntersect
			};
		}
		public virtual INTEGER? _Degree { get { return Degree; } set { } }
		public virtual List<Global.IfcCartesianPoint>? _ControlPointsList
		{
			get
			{
				if(ControlPointsList != null)
				{
					List<Global.IfcCartesianPoint>? items = new List<Global.IfcCartesianPoint>();
					foreach (IfcCartesianPoint item in ControlPointsList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcBSplineCurveForm? _CurveForm { get { return CurveForm; } set { } }
		public virtual LOGICAL? _ClosedCurve { get { return ClosedCurve; } set { } }
		public virtual LOGICAL? _SelfIntersect { get { return SelfIntersect; } set { } }
		public virtual List<Global.IfcCartesianPoint>? _ControlPoints
		{
			get
			{
				if(ControlPoints != null)
				{
					List<Global.IfcCartesianPoint>? items = new List<Global.IfcCartesianPoint>();
					foreach (IfcCartesianPoint item in ControlPoints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual INTEGER? _UpperIndexOnControlPoints { get { return UpperIndexOnControlPoints; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBeam
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcBeam : IfcBuildingElement, Global.IfcBeam
	{
		public IfcBeam() : base()
		{
		}
		public IfcBeam(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBeamType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcBeamTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcBeamType : IfcBuildingElementType, Global.IfcBeamType
	{
		public virtual IfcBeamTypeEnum? PredefinedType { get; set; }
		public IfcBeamType() : base()
		{
		}
		public IfcBeamType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcBeamTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcBeamTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBezierCurve
	/// SUPERTYPE OF (ONEOF
	/// (IfcRationalBezierCurve))
	/// SUBTYPE OF (IfcBSplineCurve);
	/// END_ENTITY;
	/// <summary>
	public class IfcBezierCurve : IfcBSplineCurve, Global.IfcBezierCurve
	{
		public IfcBezierCurve() : base()
		{
		}
		public IfcBezierCurve(INTEGER? Degree, List<IfcCartesianPoint>? ControlPointsList, IfcBSplineCurveForm? CurveForm, LOGICAL? ClosedCurve, LOGICAL? SelfIntersect) : base (Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Degree,
				ControlPointsList,
				CurveForm,
				ClosedCurve,
				SelfIntersect
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBlobTexture
	/// SUBTYPE OF (IfcSurfaceTexture);
	/// RasterFormat : IfcIdentifier;
	/// RasterCode : BOOLEAN;
	/// WHERE
	/// WR11 : SELF.RasterFormat IN ['BMP', 'JPG', 'GIF', 'PNG'];
	/// END_ENTITY;
	/// <summary>
	public class IfcBlobTexture : IfcSurfaceTexture, Global.IfcBlobTexture
	{
		public virtual IfcIdentifier? RasterFormat { get; set; }
		public virtual BOOLEAN? RasterCode { get; set; }
		public IfcBlobTexture() : base()
		{
		}
		public IfcBlobTexture(BOOLEAN? RepeatS, BOOLEAN? RepeatT, IfcSurfaceTextureEnum? TextureType, IfcCartesianTransformationOperator2D? TextureTransform, IfcIdentifier? RasterFormat, BOOLEAN? RasterCode) : base (RepeatS, RepeatT, TextureType, TextureTransform)
		{
			this.RasterFormat = RasterFormat;
			this.RasterCode = RasterCode;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RepeatS,
				RepeatT,
				TextureType,
				TextureTransform,
				RasterFormat,
				RasterCode
			};
		}
		public virtual Global.IfcIdentifier? _RasterFormat { get { return RasterFormat; } set { } }
		public virtual BOOLEAN? _RasterCode { get { return RasterCode; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBlock
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// XLength : IfcPositiveLengthMeasure;
	/// YLength : IfcPositiveLengthMeasure;
	/// ZLength : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcBlock : IfcCsgPrimitive3D, Global.IfcBlock
	{
		public virtual IfcPositiveLengthMeasure? XLength { get; set; }
		public virtual IfcPositiveLengthMeasure? YLength { get; set; }
		public virtual IfcPositiveLengthMeasure? ZLength { get; set; }
		public IfcBlock() : base()
		{
		}
		public IfcBlock(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? XLength, IfcPositiveLengthMeasure? YLength, IfcPositiveLengthMeasure? ZLength) : base (Position)
		{
			this.XLength = XLength;
			this.YLength = YLength;
			this.ZLength = ZLength;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				XLength,
				YLength,
				ZLength
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _XLength { get { return XLength; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _YLength { get { return YLength; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _ZLength { get { return ZLength; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBoilerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcBoilerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcBoilerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBoilerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcBoilerType : IfcEnergyConversionDeviceType, Global.IfcBoilerType
	{
		public virtual IfcBoilerTypeEnum? PredefinedType { get; set; }
		public IfcBoilerType() : base()
		{
		}
		public IfcBoilerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcBoilerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcBoilerTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBooleanClippingResult
	/// SUBTYPE OF (IfcBooleanResult);
	/// WHERE
	/// WR1 : ('IFC2X3.IFCSWEPTAREASOLID' IN TYPEOF(FirstOperand)) OR ('IFC2X3.IFCBOOLEANCLIPPINGRESULT' IN TYPEOF(FirstOperand));
	/// WR2 : ('IFC2X3.IFCHALFSPACESOLID' IN TYPEOF(SecondOperand));
	/// WR3 : Operator = DIFFERENCE;
	/// END_ENTITY;
	/// <summary>
	public class IfcBooleanClippingResult : IfcBooleanResult, Global.IfcBooleanClippingResult
	{
		public IfcBooleanClippingResult() : base()
		{
		}
		public IfcBooleanClippingResult(IfcBooleanOperator? Operator, IfcBooleanOperand? FirstOperand, IfcBooleanOperand? SecondOperand) : base (Operator, FirstOperand, SecondOperand)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Operator,
				FirstOperand,
				SecondOperand
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBooleanResult
	/// SUPERTYPE OF (ONEOF
	/// (IfcBooleanClippingResult))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Operator : IfcBooleanOperator;
	/// FirstOperand : IfcBooleanOperand;
	/// SecondOperand : IfcBooleanOperand;
	/// DERIVE
	/// Dim : IfcDimensionCount := FirstOperand.Dim;
	/// WHERE
	/// WR1 : FirstOperand.Dim = SecondOperand.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IfcBooleanResult : IfcGeometricRepresentationItem, IfcBooleanOperand, IfcCsgSelect, Global.IfcBooleanResult
	{
		public virtual IfcBooleanOperator? Operator { get; set; }
		public virtual IfcBooleanOperand? FirstOperand { get; set; }
		public virtual IfcBooleanOperand? SecondOperand { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcBooleanResult() : base()
		{
		}
		public IfcBooleanResult(IfcBooleanOperator? Operator, IfcBooleanOperand? FirstOperand, IfcBooleanOperand? SecondOperand) : base ()
		{
			this.Operator = Operator;
			this.FirstOperand = FirstOperand;
			this.SecondOperand = SecondOperand;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Operator,
				FirstOperand,
				SecondOperand
			};
		}
		public virtual Global.IfcBooleanOperator? _Operator { get { return Operator; } set { } }
		public virtual Global.IfcBooleanOperand? _FirstOperand { get { return FirstOperand; } set { } }
		public virtual Global.IfcBooleanOperand? _SecondOperand { get { return SecondOperand; } set { } }
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBoundaryCondition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBoundaryEdgeCondition
	/// ,IfcBoundaryFaceCondition
	/// ,IfcBoundaryNodeCondition));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBoundaryCondition : Ifc_Entity, Global.IfcBoundaryCondition
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcBoundaryCondition() : base()
		{
		}
		public IfcBoundaryCondition(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBoundaryEdgeCondition
	/// SUBTYPE OF (IfcBoundaryCondition);
	/// LinearStiffnessByLengthX : OPTIONAL IfcModulusOfLinearSubgradeReactionMeasure;
	/// LinearStiffnessByLengthY : OPTIONAL IfcModulusOfLinearSubgradeReactionMeasure;
	/// LinearStiffnessByLengthZ : OPTIONAL IfcModulusOfLinearSubgradeReactionMeasure;
	/// RotationalStiffnessByLengthX : OPTIONAL IfcModulusOfRotationalSubgradeReactionMeasure;
	/// RotationalStiffnessByLengthY : OPTIONAL IfcModulusOfRotationalSubgradeReactionMeasure;
	/// RotationalStiffnessByLengthZ : OPTIONAL IfcModulusOfRotationalSubgradeReactionMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundaryEdgeCondition : IfcBoundaryCondition, Global.IfcBoundaryEdgeCondition
	{
		public virtual IfcModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthX { get; set; }
		public virtual IfcModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthY { get; set; }
		public virtual IfcModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthZ { get; set; }
		public virtual IfcModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthX { get; set; }
		public virtual IfcModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthY { get; set; }
		public virtual IfcModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthZ { get; set; }
		public IfcBoundaryEdgeCondition() : base()
		{
		}
		public IfcBoundaryEdgeCondition(IfcLabel? Name, IfcModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthX, IfcModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthY, IfcModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthZ, IfcModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthX, IfcModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthY, IfcModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthZ) : base (Name)
		{
			this.LinearStiffnessByLengthX = LinearStiffnessByLengthX;
			this.LinearStiffnessByLengthY = LinearStiffnessByLengthY;
			this.LinearStiffnessByLengthZ = LinearStiffnessByLengthZ;
			this.RotationalStiffnessByLengthX = RotationalStiffnessByLengthX;
			this.RotationalStiffnessByLengthY = RotationalStiffnessByLengthY;
			this.RotationalStiffnessByLengthZ = RotationalStiffnessByLengthZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LinearStiffnessByLengthX,
				LinearStiffnessByLengthY,
				LinearStiffnessByLengthZ,
				RotationalStiffnessByLengthX,
				RotationalStiffnessByLengthY,
				RotationalStiffnessByLengthZ
			};
		}
		public virtual Global.IfcModulusOfLinearSubgradeReactionMeasure? _LinearStiffnessByLengthX { get { return LinearStiffnessByLengthX; } set { } }
		public virtual Global.IfcModulusOfLinearSubgradeReactionMeasure? _LinearStiffnessByLengthY { get { return LinearStiffnessByLengthY; } set { } }
		public virtual Global.IfcModulusOfLinearSubgradeReactionMeasure? _LinearStiffnessByLengthZ { get { return LinearStiffnessByLengthZ; } set { } }
		public virtual Global.IfcModulusOfRotationalSubgradeReactionMeasure? _RotationalStiffnessByLengthX { get { return RotationalStiffnessByLengthX; } set { } }
		public virtual Global.IfcModulusOfRotationalSubgradeReactionMeasure? _RotationalStiffnessByLengthY { get { return RotationalStiffnessByLengthY; } set { } }
		public virtual Global.IfcModulusOfRotationalSubgradeReactionMeasure? _RotationalStiffnessByLengthZ { get { return RotationalStiffnessByLengthZ; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBoundaryFaceCondition
	/// SUBTYPE OF (IfcBoundaryCondition);
	/// LinearStiffnessByAreaX : OPTIONAL IfcModulusOfSubgradeReactionMeasure;
	/// LinearStiffnessByAreaY : OPTIONAL IfcModulusOfSubgradeReactionMeasure;
	/// LinearStiffnessByAreaZ : OPTIONAL IfcModulusOfSubgradeReactionMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundaryFaceCondition : IfcBoundaryCondition, Global.IfcBoundaryFaceCondition
	{
		public virtual IfcModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaX { get; set; }
		public virtual IfcModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaY { get; set; }
		public virtual IfcModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaZ { get; set; }
		public IfcBoundaryFaceCondition() : base()
		{
		}
		public IfcBoundaryFaceCondition(IfcLabel? Name, IfcModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaX, IfcModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaY, IfcModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaZ) : base (Name)
		{
			this.LinearStiffnessByAreaX = LinearStiffnessByAreaX;
			this.LinearStiffnessByAreaY = LinearStiffnessByAreaY;
			this.LinearStiffnessByAreaZ = LinearStiffnessByAreaZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LinearStiffnessByAreaX,
				LinearStiffnessByAreaY,
				LinearStiffnessByAreaZ
			};
		}
		public virtual Global.IfcModulusOfSubgradeReactionMeasure? _LinearStiffnessByAreaX { get { return LinearStiffnessByAreaX; } set { } }
		public virtual Global.IfcModulusOfSubgradeReactionMeasure? _LinearStiffnessByAreaY { get { return LinearStiffnessByAreaY; } set { } }
		public virtual Global.IfcModulusOfSubgradeReactionMeasure? _LinearStiffnessByAreaZ { get { return LinearStiffnessByAreaZ; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBoundaryNodeCondition
	/// SUPERTYPE OF (ONEOF
	/// (IfcBoundaryNodeConditionWarping))
	/// SUBTYPE OF (IfcBoundaryCondition);
	/// LinearStiffnessX : OPTIONAL IfcLinearStiffnessMeasure;
	/// LinearStiffnessY : OPTIONAL IfcLinearStiffnessMeasure;
	/// LinearStiffnessZ : OPTIONAL IfcLinearStiffnessMeasure;
	/// RotationalStiffnessX : OPTIONAL IfcRotationalStiffnessMeasure;
	/// RotationalStiffnessY : OPTIONAL IfcRotationalStiffnessMeasure;
	/// RotationalStiffnessZ : OPTIONAL IfcRotationalStiffnessMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundaryNodeCondition : IfcBoundaryCondition, Global.IfcBoundaryNodeCondition
	{
		public virtual IfcLinearStiffnessMeasure? LinearStiffnessX { get; set; }
		public virtual IfcLinearStiffnessMeasure? LinearStiffnessY { get; set; }
		public virtual IfcLinearStiffnessMeasure? LinearStiffnessZ { get; set; }
		public virtual IfcRotationalStiffnessMeasure? RotationalStiffnessX { get; set; }
		public virtual IfcRotationalStiffnessMeasure? RotationalStiffnessY { get; set; }
		public virtual IfcRotationalStiffnessMeasure? RotationalStiffnessZ { get; set; }
		public IfcBoundaryNodeCondition() : base()
		{
		}
		public IfcBoundaryNodeCondition(IfcLabel? Name, IfcLinearStiffnessMeasure? LinearStiffnessX, IfcLinearStiffnessMeasure? LinearStiffnessY, IfcLinearStiffnessMeasure? LinearStiffnessZ, IfcRotationalStiffnessMeasure? RotationalStiffnessX, IfcRotationalStiffnessMeasure? RotationalStiffnessY, IfcRotationalStiffnessMeasure? RotationalStiffnessZ) : base (Name)
		{
			this.LinearStiffnessX = LinearStiffnessX;
			this.LinearStiffnessY = LinearStiffnessY;
			this.LinearStiffnessZ = LinearStiffnessZ;
			this.RotationalStiffnessX = RotationalStiffnessX;
			this.RotationalStiffnessY = RotationalStiffnessY;
			this.RotationalStiffnessZ = RotationalStiffnessZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LinearStiffnessX,
				LinearStiffnessY,
				LinearStiffnessZ,
				RotationalStiffnessX,
				RotationalStiffnessY,
				RotationalStiffnessZ
			};
		}
		public virtual Global.IfcLinearStiffnessMeasure? _LinearStiffnessX { get { return LinearStiffnessX; } set { } }
		public virtual Global.IfcLinearStiffnessMeasure? _LinearStiffnessY { get { return LinearStiffnessY; } set { } }
		public virtual Global.IfcLinearStiffnessMeasure? _LinearStiffnessZ { get { return LinearStiffnessZ; } set { } }
		public virtual Global.IfcRotationalStiffnessMeasure? _RotationalStiffnessX { get { return RotationalStiffnessX; } set { } }
		public virtual Global.IfcRotationalStiffnessMeasure? _RotationalStiffnessY { get { return RotationalStiffnessY; } set { } }
		public virtual Global.IfcRotationalStiffnessMeasure? _RotationalStiffnessZ { get { return RotationalStiffnessZ; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBoundaryNodeConditionWarping
	/// SUBTYPE OF (IfcBoundaryNodeCondition);
	/// WarpingStiffness : OPTIONAL IfcWarpingMomentMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundaryNodeConditionWarping : IfcBoundaryNodeCondition, Global.IfcBoundaryNodeConditionWarping
	{
		public virtual IfcWarpingMomentMeasure? WarpingStiffness { get; set; }
		public IfcBoundaryNodeConditionWarping() : base()
		{
		}
		public IfcBoundaryNodeConditionWarping(IfcLabel? Name, IfcLinearStiffnessMeasure? LinearStiffnessX, IfcLinearStiffnessMeasure? LinearStiffnessY, IfcLinearStiffnessMeasure? LinearStiffnessZ, IfcRotationalStiffnessMeasure? RotationalStiffnessX, IfcRotationalStiffnessMeasure? RotationalStiffnessY, IfcRotationalStiffnessMeasure? RotationalStiffnessZ, IfcWarpingMomentMeasure? WarpingStiffness) : base (Name, LinearStiffnessX, LinearStiffnessY, LinearStiffnessZ, RotationalStiffnessX, RotationalStiffnessY, RotationalStiffnessZ)
		{
			this.WarpingStiffness = WarpingStiffness;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LinearStiffnessX,
				LinearStiffnessY,
				LinearStiffnessZ,
				RotationalStiffnessX,
				RotationalStiffnessY,
				RotationalStiffnessZ,
				WarpingStiffness
			};
		}
		public virtual Global.IfcWarpingMomentMeasure? _WarpingStiffness { get { return WarpingStiffness; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBoundedCurve
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBSplineCurve
	/// ,IfcCompositeCurve
	/// ,IfcPolyline
	/// ,IfcTrimmedCurve))
	/// SUBTYPE OF (IfcCurve);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBoundedCurve : IfcCurve, IfcCurveOrEdgeCurve, Global.IfcBoundedCurve
	{
		public IfcBoundedCurve() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBoundedSurface
	/// SUPERTYPE OF (ONEOF
	/// (IfcCurveBoundedPlane
	/// ,IfcRectangularTrimmedSurface))
	/// SUBTYPE OF (IfcSurface);
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundedSurface : IfcSurface, Global.IfcBoundedSurface
	{
		public IfcBoundedSurface() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBoundingBox
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Corner : IfcCartesianPoint;
	/// XDim : IfcPositiveLengthMeasure;
	/// YDim : IfcPositiveLengthMeasure;
	/// ZDim : IfcPositiveLengthMeasure;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcBoundingBox : IfcGeometricRepresentationItem, Global.IfcBoundingBox
	{
		public virtual IfcCartesianPoint? Corner { get; set; }
		public virtual IfcPositiveLengthMeasure? XDim { get; set; }
		public virtual IfcPositiveLengthMeasure? YDim { get; set; }
		public virtual IfcPositiveLengthMeasure? ZDim { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcBoundingBox() : base()
		{
		}
		public IfcBoundingBox(IfcCartesianPoint? Corner, IfcPositiveLengthMeasure? XDim, IfcPositiveLengthMeasure? YDim, IfcPositiveLengthMeasure? ZDim) : base ()
		{
			this.Corner = Corner;
			this.XDim = XDim;
			this.YDim = YDim;
			this.ZDim = ZDim;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Corner,
				XDim,
				YDim,
				ZDim
			};
		}
		public virtual Global.IfcCartesianPoint? _Corner { get { return Corner; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _XDim { get { return XDim; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _YDim { get { return YDim; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _ZDim { get { return ZDim; } set { } }
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBoxedHalfSpace
	/// SUBTYPE OF (IfcHalfSpaceSolid);
	/// Enclosure : IfcBoundingBox;
	/// WHERE
	/// WR1 : NOT ('IFC2X3.IFCCURVEBOUNDEDPLANE' IN TYPEOF(SELF\IfcHalfSpaceSolid.BaseSurface));
	/// END_ENTITY;
	/// <summary>
	public class IfcBoxedHalfSpace : IfcHalfSpaceSolid, Global.IfcBoxedHalfSpace
	{
		public virtual IfcBoundingBox? Enclosure { get; set; }
		public IfcBoxedHalfSpace() : base()
		{
		}
		public IfcBoxedHalfSpace(IfcSurface? BaseSurface, BOOLEAN? AgreementFlag, IfcBoundingBox? Enclosure) : base (BaseSurface, AgreementFlag)
		{
			this.Enclosure = Enclosure;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BaseSurface,
				AgreementFlag,
				Enclosure
			};
		}
		public virtual Global.IfcBoundingBox? _Enclosure { get { return Enclosure; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBuilding
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// ElevationOfRefHeight : OPTIONAL IfcLengthMeasure;
	/// ElevationOfTerrain : OPTIONAL IfcLengthMeasure;
	/// BuildingAddress : OPTIONAL IfcPostalAddress;
	/// END_ENTITY;
	/// <summary>
	public class IfcBuilding : IfcSpatialStructureElement, Global.IfcBuilding
	{
		public virtual IfcLengthMeasure? ElevationOfRefHeight { get; set; }
		public virtual IfcLengthMeasure? ElevationOfTerrain { get; set; }
		public virtual IfcPostalAddress? BuildingAddress { get; set; }
		public IfcBuilding() : base()
		{
		}
		public IfcBuilding(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcElementCompositionEnum? CompositionType, IfcLengthMeasure? ElevationOfRefHeight, IfcLengthMeasure? ElevationOfTerrain, IfcPostalAddress? BuildingAddress) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.ElevationOfRefHeight = ElevationOfRefHeight;
			this.ElevationOfTerrain = ElevationOfTerrain;
			this.BuildingAddress = BuildingAddress;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				CompositionType,
				ElevationOfRefHeight,
				ElevationOfTerrain,
				BuildingAddress
			};
		}
		public virtual Global.IfcLengthMeasure? _ElevationOfRefHeight { get { return ElevationOfRefHeight; } set { } }
		public virtual Global.IfcLengthMeasure? _ElevationOfTerrain { get { return ElevationOfTerrain; } set { } }
		public virtual Global.IfcPostalAddress? _BuildingAddress { get { return BuildingAddress; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBuildingElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBeam
	/// ,IfcBuildingElementComponent
	/// ,IfcBuildingElementProxy
	/// ,IfcColumn
	/// ,IfcCovering
	/// ,IfcCurtainWall
	/// ,IfcDoor
	/// ,IfcFooting
	/// ,IfcMember
	/// ,IfcPile
	/// ,IfcPlate
	/// ,IfcRailing
	/// ,IfcRamp
	/// ,IfcRampFlight
	/// ,IfcRoof
	/// ,IfcSlab
	/// ,IfcStair
	/// ,IfcStairFlight
	/// ,IfcWall
	/// ,IfcWindow))
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBuildingElement : IfcElement, Global.IfcBuildingElement
	{
		public IfcBuildingElement() : base()
		{
		}
		public IfcBuildingElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementComponent
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuildingElementPart
	/// ,IfcReinforcingElement))
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBuildingElementComponent : IfcBuildingElement, Global.IfcBuildingElementComponent
	{
		public IfcBuildingElementComponent() : base()
		{
		}
		public IfcBuildingElementComponent(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementPart
	/// SUBTYPE OF (IfcBuildingElementComponent);
	/// END_ENTITY;
	/// <summary>
	public class IfcBuildingElementPart : IfcBuildingElementComponent, Global.IfcBuildingElementPart
	{
		public IfcBuildingElementPart() : base()
		{
		}
		public IfcBuildingElementPart(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementProxy
	/// SUBTYPE OF (IfcBuildingElement);
	/// CompositionType : OPTIONAL IfcElementCompositionEnum;
	/// WHERE
	/// WR1 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IfcBuildingElementProxy : IfcBuildingElement, Global.IfcBuildingElementProxy
	{
		public virtual IfcElementCompositionEnum? CompositionType { get; set; }
		public IfcBuildingElementProxy() : base()
		{
		}
		public IfcBuildingElementProxy(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcElementCompositionEnum? CompositionType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.CompositionType = CompositionType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				CompositionType
			};
		}
		public virtual Global.IfcElementCompositionEnum? _CompositionType { get { return CompositionType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBuildingElementProxyType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcBuildingElementProxyTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcBuildingElementProxyType : IfcBuildingElementType, Global.IfcBuildingElementProxyType
	{
		public virtual IfcBuildingElementProxyTypeEnum? PredefinedType { get; set; }
		public IfcBuildingElementProxyType() : base()
		{
		}
		public IfcBuildingElementProxyType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcBuildingElementProxyTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcBuildingElementProxyTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcBuildingElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBeamType
	/// ,IfcBuildingElementProxyType
	/// ,IfcColumnType
	/// ,IfcCoveringType
	/// ,IfcCurtainWallType
	/// ,IfcMemberType
	/// ,IfcPlateType
	/// ,IfcRailingType
	/// ,IfcRampFlightType
	/// ,IfcSlabType
	/// ,IfcStairFlightType
	/// ,IfcWallType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcBuildingElementType : IfcElementType, Global.IfcBuildingElementType
	{
		public IfcBuildingElementType() : base()
		{
		}
		public IfcBuildingElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingStorey
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// Elevation : OPTIONAL IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcBuildingStorey : IfcSpatialStructureElement, Global.IfcBuildingStorey
	{
		public virtual IfcLengthMeasure? Elevation { get; set; }
		public IfcBuildingStorey() : base()
		{
		}
		public IfcBuildingStorey(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcElementCompositionEnum? CompositionType, IfcLengthMeasure? Elevation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.Elevation = Elevation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				CompositionType,
				Elevation
			};
		}
		public virtual Global.IfcLengthMeasure? _Elevation { get { return Elevation; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// Width : IfcPositiveLengthMeasure;
	/// WallThickness : IfcPositiveLengthMeasure;
	/// Girth : IfcPositiveLengthMeasure;
	/// InternalFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// CentreOfGravityInX : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR1 : Girth < (Depth / 2.);
	/// WR2 : NOT(EXISTS(InternalFilletRadius)) OR
	/// ((InternalFilletRadius <= Width/2.) AND (InternalFilletRadius <= Depth/2.));
	/// WR3 : (WallThickness < Width/2.) AND (WallThickness < Depth/2.);
	/// END_ENTITY;
	/// <summary>
	public class IfcCShapeProfileDef : IfcParameterizedProfileDef, Global.IfcCShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public virtual IfcPositiveLengthMeasure? Width { get; set; }
		public virtual IfcPositiveLengthMeasure? WallThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? Girth { get; set; }
		public virtual IfcPositiveLengthMeasure? InternalFilletRadius { get; set; }
		public virtual IfcPositiveLengthMeasure? CentreOfGravityInX { get; set; }
		public IfcCShapeProfileDef() : base()
		{
		}
		public IfcCShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Depth, IfcPositiveLengthMeasure? Width, IfcPositiveLengthMeasure? WallThickness, IfcPositiveLengthMeasure? Girth, IfcPositiveLengthMeasure? InternalFilletRadius, IfcPositiveLengthMeasure? CentreOfGravityInX) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.Width = Width;
			this.WallThickness = WallThickness;
			this.Girth = Girth;
			this.InternalFilletRadius = InternalFilletRadius;
			this.CentreOfGravityInX = CentreOfGravityInX;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Depth,
				Width,
				WallThickness,
				Girth,
				InternalFilletRadius,
				CentreOfGravityInX
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Depth { get { return Depth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Width { get { return Width; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _WallThickness { get { return WallThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Girth { get { return Girth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _InternalFilletRadius { get { return InternalFilletRadius; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _CentreOfGravityInX { get { return CentreOfGravityInX; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCableCarrierFittingType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcCableCarrierFittingTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCableCarrierFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCableCarrierFittingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCableCarrierFittingType : IfcFlowFittingType, Global.IfcCableCarrierFittingType
	{
		public virtual IfcCableCarrierFittingTypeEnum? PredefinedType { get; set; }
		public IfcCableCarrierFittingType() : base()
		{
		}
		public IfcCableCarrierFittingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCableCarrierFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCableCarrierFittingTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCableCarrierSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcCableCarrierSegmentTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcCableCarrierSegmentType : IfcFlowSegmentType, Global.IfcCableCarrierSegmentType
	{
		public virtual IfcCableCarrierSegmentTypeEnum? PredefinedType { get; set; }
		public IfcCableCarrierSegmentType() : base()
		{
		}
		public IfcCableCarrierSegmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCableCarrierSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCableCarrierSegmentTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCableSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcCableSegmentTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcCableSegmentType : IfcFlowSegmentType, Global.IfcCableSegmentType
	{
		public virtual IfcCableSegmentTypeEnum? PredefinedType { get; set; }
		public IfcCableSegmentType() : base()
		{
		}
		public IfcCableSegmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCableSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCableSegmentTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCalendarDate;
	/// DayComponent : IfcDayInMonthNumber;
	/// MonthComponent : IfcMonthInYearNumber;
	/// YearComponent : IfcYearNumber;
	/// WHERE
	/// WR21 : IfcValidCalendarDate (SELF);
	/// END_ENTITY;
	/// <summary>
	public class IfcCalendarDate : Ifc_Entity, IfcDateTimeSelect, IfcObjectReferenceSelect, Global.IfcCalendarDate
	{
		public virtual IfcDayInMonthNumber? DayComponent { get; set; }
		public virtual IfcMonthInYearNumber? MonthComponent { get; set; }
		public virtual IfcYearNumber? YearComponent { get; set; }
		public IfcCalendarDate() : base()
		{
		}
		public IfcCalendarDate(IfcDayInMonthNumber? DayComponent, IfcMonthInYearNumber? MonthComponent, IfcYearNumber? YearComponent) : base ()
		{
			this.DayComponent = DayComponent;
			this.MonthComponent = MonthComponent;
			this.YearComponent = YearComponent;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				DayComponent,
				MonthComponent,
				YearComponent
			};
		}
		public virtual Global.IfcDayInMonthNumber? _DayComponent { get { return DayComponent; } set { } }
		public virtual Global.IfcMonthInYearNumber? _MonthComponent { get { return MonthComponent; } set { } }
		public virtual Global.IfcYearNumber? _YearComponent { get { return YearComponent; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCartesianPoint
	/// SUBTYPE OF (IfcPoint);
	/// Coordinates : LIST [1:3] OF IfcLengthMeasure;
	/// DERIVE
	/// Dim : IfcDimensionCount := HIINDEX(Coordinates);
	/// WHERE
	/// WR1 : HIINDEX(Coordinates) >= 2;
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianPoint : IfcPoint, IfcTrimmingSelect, Global.IfcCartesianPoint
	{
		public virtual List<IfcLengthMeasure>? Coordinates { get; set; }
		//TODO DERIVE
		public override IfcDimensionCount? Dim {get {return null;}}
		public IfcCartesianPoint() : base()
		{
		}
		public IfcCartesianPoint(List<IfcLengthMeasure>? Coordinates) : base ()
		{
			this.Coordinates = Coordinates;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Coordinates
			};
		}
		public virtual List<Global.IfcLengthMeasure>? _Coordinates
		{
			get
			{
				if(Coordinates != null)
				{
					List<Global.IfcLengthMeasure>? items = new List<Global.IfcLengthMeasure>();
					foreach (IfcLengthMeasure item in Coordinates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public override Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCartesianTransformationOperator2D
	/// ,IfcCartesianTransformationOperator3D))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Axis1 : OPTIONAL IfcDirection;
	/// Axis2 : OPTIONAL IfcDirection;
	/// LocalOrigin : IfcCartesianPoint;
	/// Scale : OPTIONAL REAL;
	/// DERIVE
	/// Scl : REAL := NVL(Scale, 1.0);
	/// Dim : IfcDimensionCount := LocalOrigin.Dim;
	/// WHERE
	/// WR1 : Scl > 0.0;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcCartesianTransformationOperator : IfcGeometricRepresentationItem, Global.IfcCartesianTransformationOperator
	{
		public virtual IfcDirection? Axis1 { get; set; }
		public virtual IfcDirection? Axis2 { get; set; }
		public virtual IfcCartesianPoint? LocalOrigin { get; set; }
		public virtual REAL? Scale { get; set; }
		//TODO DERIVE
		public virtual REAL? Scl {get {return null;}}
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcCartesianTransformationOperator() : base()
		{
		}
		public IfcCartesianTransformationOperator(IfcDirection? Axis1, IfcDirection? Axis2, IfcCartesianPoint? LocalOrigin, REAL? Scale) : base ()
		{
			this.Axis1 = Axis1;
			this.Axis2 = Axis2;
			this.LocalOrigin = LocalOrigin;
			this.Scale = Scale;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Axis1,
				Axis2,
				LocalOrigin,
				Scale
			};
		}
		public virtual Global.IfcDirection? _Axis1 { get { return Axis1; } set { } }
		public virtual Global.IfcDirection? _Axis2 { get { return Axis2; } set { } }
		public virtual Global.IfcCartesianPoint? _LocalOrigin { get { return LocalOrigin; } set { } }
		public virtual REAL? _Scale { get { return Scale; } set { } }
		public virtual REAL? _Scl { get { return Scl; } set { } }
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator2D
	/// SUPERTYPE OF (ONEOF
	/// (IfcCartesianTransformationOperator2DnonUniform))
	/// SUBTYPE OF (IfcCartesianTransformationOperator);
	/// DERIVE
	/// U : LIST [2:2] OF IfcDirection := IfcBaseAxis(2,SELF\IfcCartesianTransformationOperator.Axis1,
	/// SELF\IfcCartesianTransformationOperator.Axis2,?);
	/// WHERE
	/// WR1 : SELF\IfcCartesianTransformationOperator.Dim = 2;
	/// WR2 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis1)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 2);
	/// WR3 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis2)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 2);
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianTransformationOperator2D : IfcCartesianTransformationOperator, Global.IfcCartesianTransformationOperator2D
	{
		//TODO DERIVE
		public virtual List<IfcDirection>? U {get {return null;}}
		public IfcCartesianTransformationOperator2D() : base()
		{
		}
		public IfcCartesianTransformationOperator2D(IfcDirection? Axis1, IfcDirection? Axis2, IfcCartesianPoint? LocalOrigin, REAL? Scale) : base (Axis1, Axis2, LocalOrigin, Scale)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Axis1,
				Axis2,
				LocalOrigin,
				Scale
			};
		}
		public virtual List<Global.IfcDirection>? _U
		{
			get
			{
				if(U != null)
				{
					List<Global.IfcDirection>? items = new List<Global.IfcDirection>();
					foreach (IfcDirection item in U)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator2DnonUniform
	/// SUBTYPE OF (IfcCartesianTransformationOperator2D);
	/// Scale2 : OPTIONAL REAL;
	/// DERIVE
	/// Scl2 : REAL := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
	/// WHERE
	/// WR1 : Scl2 > 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianTransformationOperator2DnonUniform : IfcCartesianTransformationOperator2D, Global.IfcCartesianTransformationOperator2DnonUniform
	{
		public virtual REAL? Scale2 { get; set; }
		//TODO DERIVE
		public virtual REAL? Scl2 {get {return null;}}
		public IfcCartesianTransformationOperator2DnonUniform() : base()
		{
		}
		public IfcCartesianTransformationOperator2DnonUniform(IfcDirection? Axis1, IfcDirection? Axis2, IfcCartesianPoint? LocalOrigin, REAL? Scale, REAL? Scale2) : base (Axis1, Axis2, LocalOrigin, Scale)
		{
			this.Scale2 = Scale2;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Axis1,
				Axis2,
				LocalOrigin,
				Scale,
				Scale2
			};
		}
		public virtual REAL? _Scale2 { get { return Scale2; } set { } }
		public virtual REAL? _Scl2 { get { return Scl2; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator3D
	/// SUPERTYPE OF (ONEOF
	/// (IfcCartesianTransformationOperator3DnonUniform))
	/// SUBTYPE OF (IfcCartesianTransformationOperator);
	/// Axis3 : OPTIONAL IfcDirection;
	/// DERIVE
	/// U : LIST [3:3] OF IfcDirection := IfcBaseAxis(3,SELF\IfcCartesianTransformationOperator.Axis1,
	/// SELF\IfcCartesianTransformationOperator.Axis2,Axis3);
	/// WHERE
	/// WR1 : SELF\IfcCartesianTransformationOperator.Dim = 3;
	/// WR2 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis1)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 3);
	/// WR3 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis2)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 3);
	/// WR4 : NOT(EXISTS(Axis3)) OR (Axis3.Dim = 3);
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianTransformationOperator3D : IfcCartesianTransformationOperator, Global.IfcCartesianTransformationOperator3D
	{
		public virtual IfcDirection? Axis3 { get; set; }
		//TODO DERIVE
		public virtual List<IfcDirection>? U {get {return null;}}
		public IfcCartesianTransformationOperator3D() : base()
		{
		}
		public IfcCartesianTransformationOperator3D(IfcDirection? Axis1, IfcDirection? Axis2, IfcCartesianPoint? LocalOrigin, REAL? Scale, IfcDirection? Axis3) : base (Axis1, Axis2, LocalOrigin, Scale)
		{
			this.Axis3 = Axis3;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Axis1,
				Axis2,
				LocalOrigin,
				Scale,
				Axis3
			};
		}
		public virtual Global.IfcDirection? _Axis3 { get { return Axis3; } set { } }
		public virtual List<Global.IfcDirection>? _U
		{
			get
			{
				if(U != null)
				{
					List<Global.IfcDirection>? items = new List<Global.IfcDirection>();
					foreach (IfcDirection item in U)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator3DnonUniform
	/// SUBTYPE OF (IfcCartesianTransformationOperator3D);
	/// Scale2 : OPTIONAL REAL;
	/// Scale3 : OPTIONAL REAL;
	/// DERIVE
	/// Scl2 : REAL := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
	/// Scl3 : REAL := NVL(Scale3, SELF\IfcCartesianTransformationOperator.Scl);
	/// WHERE
	/// WR1 : Scl2 > 0.0;
	/// WR2 : Scl3 > 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IfcCartesianTransformationOperator3DnonUniform : IfcCartesianTransformationOperator3D, Global.IfcCartesianTransformationOperator3DnonUniform
	{
		public virtual REAL? Scale2 { get; set; }
		public virtual REAL? Scale3 { get; set; }
		//TODO DERIVE
		public virtual REAL? Scl2 {get {return null;}}
		//TODO DERIVE
		public virtual REAL? Scl3 {get {return null;}}
		public IfcCartesianTransformationOperator3DnonUniform() : base()
		{
		}
		public IfcCartesianTransformationOperator3DnonUniform(IfcDirection? Axis1, IfcDirection? Axis2, IfcCartesianPoint? LocalOrigin, REAL? Scale, IfcDirection? Axis3, REAL? Scale2, REAL? Scale3) : base (Axis1, Axis2, LocalOrigin, Scale, Axis3)
		{
			this.Scale2 = Scale2;
			this.Scale3 = Scale3;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Axis1,
				Axis2,
				LocalOrigin,
				Scale,
				Axis3,
				Scale2,
				Scale3
			};
		}
		public virtual REAL? _Scale2 { get { return Scale2; } set { } }
		public virtual REAL? _Scale3 { get { return Scale3; } set { } }
		public virtual REAL? _Scl2 { get { return Scl2; } set { } }
		public virtual REAL? _Scl3 { get { return Scl3; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCenterLineProfileDef
	/// SUBTYPE OF (IfcArbitraryOpenProfileDef);
	/// Thickness : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCenterLineProfileDef : IfcArbitraryOpenProfileDef, Global.IfcCenterLineProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Thickness { get; set; }
		public IfcCenterLineProfileDef() : base()
		{
		}
		public IfcCenterLineProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcBoundedCurve? Curve, IfcPositiveLengthMeasure? Thickness) : base (ProfileType, ProfileName, Curve)
		{
			this.Thickness = Thickness;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Curve,
				Thickness
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Thickness { get { return Thickness; } set { } }
	}
	/// <summary>
	/// ENTITY IfcChamferEdgeFeature
	/// SUBTYPE OF (IfcEdgeFeature);
	/// Width : OPTIONAL IfcPositiveLengthMeasure;
	/// Height : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcChamferEdgeFeature : IfcEdgeFeature, Global.IfcChamferEdgeFeature
	{
		public virtual IfcPositiveLengthMeasure? Width { get; set; }
		public virtual IfcPositiveLengthMeasure? Height { get; set; }
		public IfcChamferEdgeFeature() : base()
		{
		}
		public IfcChamferEdgeFeature(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPositiveLengthMeasure? FeatureLength, IfcPositiveLengthMeasure? Width, IfcPositiveLengthMeasure? Height) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, FeatureLength)
		{
			this.Width = Width;
			this.Height = Height;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				FeatureLength,
				Width,
				Height
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Width { get { return Width; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Height { get { return Height; } set { } }
	}
	/// <summary>
	/// ENTITY IfcChillerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcChillerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcChillerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcChillerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcChillerType : IfcEnergyConversionDeviceType, Global.IfcChillerType
	{
		public virtual IfcChillerTypeEnum? PredefinedType { get; set; }
		public IfcChillerType() : base()
		{
		}
		public IfcChillerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcChillerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcChillerTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCircle
	/// SUBTYPE OF (IfcConic);
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCircle : IfcConic, Global.IfcCircle
	{
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public IfcCircle() : base()
		{
		}
		public IfcCircle(IfcAxis2Placement? Position, IfcPositiveLengthMeasure? Radius) : base (Position)
		{
			this.Radius = Radius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				Radius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius { get { return Radius; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCircleHollowProfileDef
	/// SUBTYPE OF (IfcCircleProfileDef);
	/// WallThickness : IfcPositiveLengthMeasure;
	/// WHERE
	/// WR1 : WallThickness < SELF\IfcCircleProfileDef.Radius;
	/// END_ENTITY;
	/// <summary>
	public class IfcCircleHollowProfileDef : IfcCircleProfileDef, Global.IfcCircleHollowProfileDef
	{
		public virtual IfcPositiveLengthMeasure? WallThickness { get; set; }
		public IfcCircleHollowProfileDef() : base()
		{
		}
		public IfcCircleHollowProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Radius, IfcPositiveLengthMeasure? WallThickness) : base (ProfileType, ProfileName, Position, Radius)
		{
			this.WallThickness = WallThickness;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Radius,
				WallThickness
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _WallThickness { get { return WallThickness; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCircleProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcCircleHollowProfileDef))
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCircleProfileDef : IfcParameterizedProfileDef, Global.IfcCircleProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public IfcCircleProfileDef() : base()
		{
		}
		public IfcCircleProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Radius) : base (ProfileType, ProfileName, Position)
		{
			this.Radius = Radius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Radius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius { get { return Radius; } set { } }
	}
	/// <summary>
	/// ENTITY IfcClassification;
	/// Source : IfcLabel;
	/// Edition : IfcLabel;
	/// EditionDate : OPTIONAL IfcCalendarDate;
	/// Name : IfcLabel;
	/// INVERSE
	/// Contains : SET [0:?] OF IfcClassificationItem FOR ItemOf;
	/// END_ENTITY;
	/// <summary>
	public class IfcClassification : Ifc_Entity, Global.IfcClassification
	{
		public virtual IfcLabel? Source { get; set; }
		public virtual IfcLabel? Edition { get; set; }
		public virtual IfcCalendarDate? EditionDate { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public List<IfcClassificationItem>? Contains => Model?.GetItems<IfcClassificationItem>().Where(x => x.ItemOf != null && x.ItemOf == this).ToList();
		public IfcClassification() : base()
		{
		}
		public IfcClassification(IfcLabel? Source, IfcLabel? Edition, IfcCalendarDate? EditionDate, IfcLabel? Name) : base ()
		{
			this.Source = Source;
			this.Edition = Edition;
			this.EditionDate = EditionDate;
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Source,
				Edition,
				EditionDate,
				Name
			};
		}
		public virtual Global.IfcLabel? _Source { get { return Source; } set { } }
		public virtual Global.IfcLabel? _Edition { get { return Edition; } set { } }
		public virtual Global.IfcCalendarDate? _EditionDate { get { return EditionDate; } set { } }
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual List<Global.IfcClassificationItem>? _Contains
		{
			get
			{
				if(Contains != null)
				{
					List<Global.IfcClassificationItem>? items = new List<Global.IfcClassificationItem>();
					foreach (IfcClassificationItem item in Contains)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClassificationItem;
	/// Notation : IfcClassificationNotationFacet;
	/// ItemOf : OPTIONAL IfcClassification;
	/// Title : IfcLabel;
	/// INVERSE
	/// IsClassifiedItemIn : SET [0:1] OF IfcClassificationItemRelationship FOR RelatedItems;
	/// IsClassifyingItemIn : SET [0:1] OF IfcClassificationItemRelationship FOR RelatingItem;
	/// END_ENTITY;
	/// <summary>
	public class IfcClassificationItem : Ifc_Entity, Global.IfcClassificationItem
	{
		public virtual IfcClassificationNotationFacet? Notation { get; set; }
		public virtual IfcClassification? ItemOf { get; set; }
		public virtual IfcLabel? Title { get; set; }
		public List<IfcClassificationItemRelationship>? IsClassifiedItemIn => Model?.GetItems<IfcClassificationItemRelationship>().Where(x => x.RelatedItems != null && x.RelatedItems.Contains(this)).ToList();
		public List<IfcClassificationItemRelationship>? IsClassifyingItemIn => Model?.GetItems<IfcClassificationItemRelationship>().Where(x => x.RelatingItem != null && x.RelatingItem == this).ToList();
		public IfcClassificationItem() : base()
		{
		}
		public IfcClassificationItem(IfcClassificationNotationFacet? Notation, IfcClassification? ItemOf, IfcLabel? Title) : base ()
		{
			this.Notation = Notation;
			this.ItemOf = ItemOf;
			this.Title = Title;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Notation,
				ItemOf,
				Title
			};
		}
		public virtual Global.IfcClassificationNotationFacet? _Notation { get { return Notation; } set { } }
		public virtual Global.IfcClassification? _ItemOf { get { return ItemOf; } set { } }
		public virtual Global.IfcLabel? _Title { get { return Title; } set { } }
		public virtual List<Global.IfcClassificationItemRelationship>? _IsClassifiedItemIn
		{
			get
			{
				if(IsClassifiedItemIn != null)
				{
					List<Global.IfcClassificationItemRelationship>? items = new List<Global.IfcClassificationItemRelationship>();
					foreach (IfcClassificationItemRelationship item in IsClassifiedItemIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcClassificationItemRelationship>? _IsClassifyingItemIn
		{
			get
			{
				if(IsClassifyingItemIn != null)
				{
					List<Global.IfcClassificationItemRelationship>? items = new List<Global.IfcClassificationItemRelationship>();
					foreach (IfcClassificationItemRelationship item in IsClassifyingItemIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClassificationItemRelationship;
	/// RelatingItem : IfcClassificationItem;
	/// RelatedItems : SET [1:?] OF IfcClassificationItem;
	/// END_ENTITY;
	/// <summary>
	public class IfcClassificationItemRelationship : Ifc_Entity, Global.IfcClassificationItemRelationship
	{
		public virtual IfcClassificationItem? RelatingItem { get; set; }
		public virtual List<IfcClassificationItem>? RelatedItems { get; set; }
		public IfcClassificationItemRelationship() : base()
		{
		}
		public IfcClassificationItemRelationship(IfcClassificationItem? RelatingItem, List<IfcClassificationItem>? RelatedItems) : base ()
		{
			this.RelatingItem = RelatingItem;
			this.RelatedItems = RelatedItems;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RelatingItem,
				RelatedItems
			};
		}
		public virtual Global.IfcClassificationItem? _RelatingItem { get { return RelatingItem; } set { } }
		public virtual List<Global.IfcClassificationItem>? _RelatedItems
		{
			get
			{
				if(RelatedItems != null)
				{
					List<Global.IfcClassificationItem>? items = new List<Global.IfcClassificationItem>();
					foreach (IfcClassificationItem item in RelatedItems)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClassificationNotation;
	/// NotationFacets : SET [1:?] OF IfcClassificationNotationFacet;
	/// END_ENTITY;
	/// <summary>
	public class IfcClassificationNotation : Ifc_Entity, IfcClassificationNotationSelect, Global.IfcClassificationNotation
	{
		public virtual List<IfcClassificationNotationFacet>? NotationFacets { get; set; }
		public IfcClassificationNotation() : base()
		{
		}
		public IfcClassificationNotation(List<IfcClassificationNotationFacet>? NotationFacets) : base ()
		{
			this.NotationFacets = NotationFacets;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				NotationFacets
			};
		}
		public virtual List<Global.IfcClassificationNotationFacet>? _NotationFacets
		{
			get
			{
				if(NotationFacets != null)
				{
					List<Global.IfcClassificationNotationFacet>? items = new List<Global.IfcClassificationNotationFacet>();
					foreach (IfcClassificationNotationFacet item in NotationFacets)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClassificationNotationFacet;
	/// NotationValue : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcClassificationNotationFacet : Ifc_Entity, Global.IfcClassificationNotationFacet
	{
		public virtual IfcLabel? NotationValue { get; set; }
		public IfcClassificationNotationFacet() : base()
		{
		}
		public IfcClassificationNotationFacet(IfcLabel? NotationValue) : base ()
		{
			this.NotationValue = NotationValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				NotationValue
			};
		}
		public virtual Global.IfcLabel? _NotationValue { get { return NotationValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcClassificationReference
	/// SUBTYPE OF (IfcExternalReference);
	/// ReferencedSource : OPTIONAL IfcClassification;
	/// END_ENTITY;
	/// <summary>
	public class IfcClassificationReference : IfcExternalReference, IfcClassificationNotationSelect, Global.IfcClassificationReference
	{
		public virtual IfcClassification? ReferencedSource { get; set; }
		public IfcClassificationReference() : base()
		{
		}
		public IfcClassificationReference(IfcLabel? Location, IfcIdentifier? ItemReference, IfcLabel? Name, IfcClassification? ReferencedSource) : base (Location, ItemReference, Name)
		{
			this.ReferencedSource = ReferencedSource;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				ItemReference,
				Name,
				ReferencedSource
			};
		}
		public virtual Global.IfcClassification? _ReferencedSource { get { return ReferencedSource; } set { } }
	}
	/// <summary>
	/// ENTITY IfcClosedShell
	/// SUBTYPE OF (IfcConnectedFaceSet);
	/// END_ENTITY;
	/// <summary>
	public class IfcClosedShell : IfcConnectedFaceSet, IfcShell, Global.IfcClosedShell
	{
		public IfcClosedShell() : base()
		{
		}
		public IfcClosedShell(List<IfcFace>? CfsFaces) : base (CfsFaces)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CfsFaces
			};
		}
	}
	/// <summary>
	/// ENTITY IfcCoilType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCoilTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCoilTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoilTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCoilType : IfcEnergyConversionDeviceType, Global.IfcCoilType
	{
		public virtual IfcCoilTypeEnum? PredefinedType { get; set; }
		public IfcCoilType() : base()
		{
		}
		public IfcCoilType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCoilTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCoilTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcColourRgb
	/// SUBTYPE OF (IfcColourSpecification);
	/// Red : IfcNormalisedRatioMeasure;
	/// Green : IfcNormalisedRatioMeasure;
	/// Blue : IfcNormalisedRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcColourRgb : IfcColourSpecification, IfcColourOrFactor, Global.IfcColourRgb
	{
		public virtual IfcNormalisedRatioMeasure? Red { get; set; }
		public virtual IfcNormalisedRatioMeasure? Green { get; set; }
		public virtual IfcNormalisedRatioMeasure? Blue { get; set; }
		public IfcColourRgb() : base()
		{
		}
		public IfcColourRgb(IfcLabel? Name, IfcNormalisedRatioMeasure? Red, IfcNormalisedRatioMeasure? Green, IfcNormalisedRatioMeasure? Blue) : base (Name)
		{
			this.Red = Red;
			this.Green = Green;
			this.Blue = Blue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Red,
				Green,
				Blue
			};
		}
		public virtual Global.IfcNormalisedRatioMeasure? _Red { get { return Red; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _Green { get { return Green; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _Blue { get { return Blue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcColourSpecification
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcColourRgb));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcColourSpecification : Ifc_Entity, IfcColour, Global.IfcColourSpecification
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcColourSpecification() : base()
		{
		}
		public IfcColourSpecification(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
	}
	/// <summary>
	/// ENTITY IfcColumn
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcColumn : IfcBuildingElement, Global.IfcColumn
	{
		public IfcColumn() : base()
		{
		}
		public IfcColumn(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcColumnType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcColumnTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcColumnType : IfcBuildingElementType, Global.IfcColumnType
	{
		public virtual IfcColumnTypeEnum? PredefinedType { get; set; }
		public IfcColumnType() : base()
		{
		}
		public IfcColumnType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcColumnTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcColumnTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcComplexProperty
	/// SUBTYPE OF (IfcProperty);
	/// UsageName : IfcIdentifier;
	/// HasProperties : SET [1:?] OF IfcProperty;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* HasProperties | SELF :=: temp)) = 0;
	/// WR22 : IfcUniquePropertyName(HasProperties);
	/// END_ENTITY;
	/// <summary>
	public class IfcComplexProperty : IfcProperty, Global.IfcComplexProperty
	{
		public virtual IfcIdentifier? UsageName { get; set; }
		public virtual List<IfcProperty>? HasProperties { get; set; }
		public IfcComplexProperty() : base()
		{
		}
		public IfcComplexProperty(IfcIdentifier? Name, IfcText? Description, IfcIdentifier? UsageName, List<IfcProperty>? HasProperties) : base (Name, Description)
		{
			this.UsageName = UsageName;
			this.HasProperties = HasProperties;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				UsageName,
				HasProperties
			};
		}
		public virtual Global.IfcIdentifier? _UsageName { get { return UsageName; } set { } }
		public virtual List<Global.IfcProperty>? _HasProperties
		{
			get
			{
				if(HasProperties != null)
				{
					List<Global.IfcProperty>? items = new List<Global.IfcProperty>();
					foreach (IfcProperty item in HasProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompositeCurve
	/// SUPERTYPE OF (ONEOF
	/// (Ifc2DCompositeCurve))
	/// SUBTYPE OF (IfcBoundedCurve);
	/// Segments : LIST [1:?] OF IfcCompositeCurveSegment;
	/// SelfIntersect : LOGICAL;
	/// DERIVE
	/// NSegments : INTEGER := SIZEOF(Segments);
	/// ClosedCurve : LOGICAL := Segments[NSegments].Transition <> Discontinuous;
	/// WHERE
	/// WR41 : ((NOT ClosedCurve) AND (SIZEOF(QUERY(Temp <* Segments | Temp.Transition = Discontinuous)) = 1)) OR ((ClosedCurve) AND (SIZEOF(QUERY(Temp <* Segments | Temp.Transition = Discontinuous)) = 0));
	/// WR42 : SIZEOF( QUERY( Temp <* Segments | Temp.Dim <> Segments[1].Dim)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcCompositeCurve : IfcBoundedCurve, Global.IfcCompositeCurve
	{
		public virtual List<IfcCompositeCurveSegment>? Segments { get; set; }
		public virtual LOGICAL? SelfIntersect { get; set; }
		//TODO DERIVE
		public virtual INTEGER? NSegments {get {return null;}}
		//TODO DERIVE
		public virtual LOGICAL? ClosedCurve {get {return null;}}
		public IfcCompositeCurve() : base()
		{
		}
		public IfcCompositeCurve(List<IfcCompositeCurveSegment>? Segments, LOGICAL? SelfIntersect) : base ()
		{
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Segments,
				SelfIntersect
			};
		}
		public virtual List<Global.IfcCompositeCurveSegment>? _Segments
		{
			get
			{
				if(Segments != null)
				{
					List<Global.IfcCompositeCurveSegment>? items = new List<Global.IfcCompositeCurveSegment>();
					foreach (IfcCompositeCurveSegment item in Segments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual LOGICAL? _SelfIntersect { get { return SelfIntersect; } set { } }
		public virtual INTEGER? _NSegments { get { return NSegments; } set { } }
		public virtual LOGICAL? _ClosedCurve { get { return ClosedCurve; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCompositeCurveSegment
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Transition : IfcTransitionCode;
	/// SameSense : BOOLEAN;
	/// ParentCurve : IfcCurve;
	/// DERIVE
	/// Dim : IfcDimensionCount := ParentCurve.Dim;
	/// INVERSE
	/// UsingCurves : SET [1:?] OF IfcCompositeCurve FOR Segments;
	/// WHERE
	/// WR1 : ('IFC2X3.IFCBOUNDEDCURVE' IN TYPEOF(ParentCurve));
	/// END_ENTITY;
	/// <summary>
	public class IfcCompositeCurveSegment : IfcGeometricRepresentationItem, Global.IfcCompositeCurveSegment
	{
		public virtual IfcTransitionCode? Transition { get; set; }
		public virtual BOOLEAN? SameSense { get; set; }
		public virtual IfcCurve? ParentCurve { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public List<IfcCompositeCurve>? UsingCurves => Model?.GetItems<IfcCompositeCurve>().Where(x => x.Segments != null && x.Segments.Contains(this)).ToList();
		public IfcCompositeCurveSegment() : base()
		{
		}
		public IfcCompositeCurveSegment(IfcTransitionCode? Transition, BOOLEAN? SameSense, IfcCurve? ParentCurve) : base ()
		{
			this.Transition = Transition;
			this.SameSense = SameSense;
			this.ParentCurve = ParentCurve;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Transition,
				SameSense,
				ParentCurve
			};
		}
		public virtual Global.IfcTransitionCode? _Transition { get { return Transition; } set { } }
		public virtual BOOLEAN? _SameSense { get { return SameSense; } set { } }
		public virtual Global.IfcCurve? _ParentCurve { get { return ParentCurve; } set { } }
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
		public virtual List<Global.IfcCompositeCurve>? _UsingCurves
		{
			get
			{
				if(UsingCurves != null)
				{
					List<Global.IfcCompositeCurve>? items = new List<Global.IfcCompositeCurve>();
					foreach (IfcCompositeCurve item in UsingCurves)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompositeProfileDef
	/// SUBTYPE OF (IfcProfileDef);
	/// Profiles : SET [2:?] OF IfcProfileDef;
	/// Label : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(temp <* Profiles | temp.ProfileType <> Profiles[1].ProfileType)) = 0;
	/// WR2 : SIZEOF(QUERY(temp <* Profiles | 'IFC2X3.IFCCOMPOSITEPROFILEDEF' IN TYPEOF(temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcCompositeProfileDef : IfcProfileDef, Global.IfcCompositeProfileDef
	{
		public virtual List<IfcProfileDef>? Profiles { get; set; }
		public virtual IfcLabel? Label { get; set; }
		public IfcCompositeProfileDef() : base()
		{
		}
		public IfcCompositeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, List<IfcProfileDef>? Profiles, IfcLabel? Label) : base (ProfileType, ProfileName)
		{
			this.Profiles = Profiles;
			this.Label = Label;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Profiles,
				Label
			};
		}
		public virtual List<Global.IfcProfileDef>? _Profiles
		{
			get
			{
				if(Profiles != null)
				{
					List<Global.IfcProfileDef>? items = new List<Global.IfcProfileDef>();
					foreach (IfcProfileDef item in Profiles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _Label { get { return Label; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCompressorType
	/// SUBTYPE OF (IfcFlowMovingDeviceType);
	/// PredefinedType : IfcCompressorTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCompressorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCompressorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCompressorType : IfcFlowMovingDeviceType, Global.IfcCompressorType
	{
		public virtual IfcCompressorTypeEnum? PredefinedType { get; set; }
		public IfcCompressorType() : base()
		{
		}
		public IfcCompressorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCompressorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCompressorTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCondenserType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCondenserTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCondenserTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCondenserTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCondenserType : IfcEnergyConversionDeviceType, Global.IfcCondenserType
	{
		public virtual IfcCondenserTypeEnum? PredefinedType { get; set; }
		public IfcCondenserType() : base()
		{
		}
		public IfcCondenserType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCondenserTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCondenserTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCondition
	/// SUBTYPE OF (IfcGroup);
	/// END_ENTITY;
	/// <summary>
	public class IfcCondition : IfcGroup, Global.IfcCondition
	{
		public IfcCondition() : base()
		{
		}
		public IfcCondition(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcConditionCriterion
	/// SUBTYPE OF (IfcControl);
	/// Criterion : IfcConditionCriterionSelect;
	/// CriterionDateTime : IfcDateTimeSelect;
	/// WHERE
	/// WR1 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IfcConditionCriterion : IfcControl, Global.IfcConditionCriterion
	{
		public virtual IfcConditionCriterionSelect? Criterion { get; set; }
		public virtual IfcDateTimeSelect? CriterionDateTime { get; set; }
		public IfcConditionCriterion() : base()
		{
		}
		public IfcConditionCriterion(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcConditionCriterionSelect? Criterion, IfcDateTimeSelect? CriterionDateTime) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.Criterion = Criterion;
			this.CriterionDateTime = CriterionDateTime;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Criterion,
				CriterionDateTime
			};
		}
		public virtual Global.IfcConditionCriterionSelect? _Criterion { get { return Criterion; } set { } }
		public virtual Global.IfcDateTimeSelect? _CriterionDateTime { get { return CriterionDateTime; } set { } }
	}
	/// <summary>
	/// ENTITY IfcConic
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCircle
	/// ,IfcEllipse))
	/// SUBTYPE OF (IfcCurve);
	/// Position : IfcAxis2Placement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcConic : IfcCurve, Global.IfcConic
	{
		public virtual IfcAxis2Placement? Position { get; set; }
		public IfcConic() : base()
		{
		}
		public IfcConic(IfcAxis2Placement? Position) : base ()
		{
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position
			};
		}
		public virtual Global.IfcAxis2Placement? _Position { get { return Position; } set { } }
	}
	/// <summary>
	/// ENTITY IfcConnectedFaceSet
	/// SUPERTYPE OF (ONEOF
	/// (IfcClosedShell
	/// ,IfcOpenShell))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// CfsFaces : SET [1:?] OF IfcFace;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectedFaceSet : IfcTopologicalRepresentationItem, Global.IfcConnectedFaceSet
	{
		public virtual List<IfcFace>? CfsFaces { get; set; }
		public IfcConnectedFaceSet() : base()
		{
		}
		public IfcConnectedFaceSet(List<IfcFace>? CfsFaces) : base ()
		{
			this.CfsFaces = CfsFaces;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CfsFaces
			};
		}
		public virtual List<Global.IfcFace>? _CfsFaces
		{
			get
			{
				if(CfsFaces != null)
				{
					List<Global.IfcFace>? items = new List<Global.IfcFace>();
					foreach (IfcFace item in CfsFaces)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionCurveGeometry
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// CurveOnRelatingElement : IfcCurveOrEdgeCurve;
	/// CurveOnRelatedElement : OPTIONAL IfcCurveOrEdgeCurve;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectionCurveGeometry : IfcConnectionGeometry, Global.IfcConnectionCurveGeometry
	{
		public virtual IfcCurveOrEdgeCurve? CurveOnRelatingElement { get; set; }
		public virtual IfcCurveOrEdgeCurve? CurveOnRelatedElement { get; set; }
		public IfcConnectionCurveGeometry() : base()
		{
		}
		public IfcConnectionCurveGeometry(IfcCurveOrEdgeCurve? CurveOnRelatingElement, IfcCurveOrEdgeCurve? CurveOnRelatedElement) : base ()
		{
			this.CurveOnRelatingElement = CurveOnRelatingElement;
			this.CurveOnRelatedElement = CurveOnRelatedElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CurveOnRelatingElement,
				CurveOnRelatedElement
			};
		}
		public virtual Global.IfcCurveOrEdgeCurve? _CurveOnRelatingElement { get { return CurveOnRelatingElement; } set { } }
		public virtual Global.IfcCurveOrEdgeCurve? _CurveOnRelatedElement { get { return CurveOnRelatedElement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcConnectionGeometry
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConnectionCurveGeometry
	/// ,IfcConnectionPointGeometry
	/// ,IfcConnectionPortGeometry
	/// ,IfcConnectionSurfaceGeometry));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcConnectionGeometry : Ifc_Entity, Global.IfcConnectionGeometry
	{
		public IfcConnectionGeometry() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionPointEccentricity
	/// SUBTYPE OF (IfcConnectionPointGeometry);
	/// EccentricityInX : OPTIONAL IfcLengthMeasure;
	/// EccentricityInY : OPTIONAL IfcLengthMeasure;
	/// EccentricityInZ : OPTIONAL IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectionPointEccentricity : IfcConnectionPointGeometry, Global.IfcConnectionPointEccentricity
	{
		public virtual IfcLengthMeasure? EccentricityInX { get; set; }
		public virtual IfcLengthMeasure? EccentricityInY { get; set; }
		public virtual IfcLengthMeasure? EccentricityInZ { get; set; }
		public IfcConnectionPointEccentricity() : base()
		{
		}
		public IfcConnectionPointEccentricity(IfcPointOrVertexPoint? PointOnRelatingElement, IfcPointOrVertexPoint? PointOnRelatedElement, IfcLengthMeasure? EccentricityInX, IfcLengthMeasure? EccentricityInY, IfcLengthMeasure? EccentricityInZ) : base (PointOnRelatingElement, PointOnRelatedElement)
		{
			this.EccentricityInX = EccentricityInX;
			this.EccentricityInY = EccentricityInY;
			this.EccentricityInZ = EccentricityInZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				PointOnRelatingElement,
				PointOnRelatedElement,
				EccentricityInX,
				EccentricityInY,
				EccentricityInZ
			};
		}
		public virtual Global.IfcLengthMeasure? _EccentricityInX { get { return EccentricityInX; } set { } }
		public virtual Global.IfcLengthMeasure? _EccentricityInY { get { return EccentricityInY; } set { } }
		public virtual Global.IfcLengthMeasure? _EccentricityInZ { get { return EccentricityInZ; } set { } }
	}
	/// <summary>
	/// ENTITY IfcConnectionPointGeometry
	/// SUPERTYPE OF (ONEOF
	/// (IfcConnectionPointEccentricity))
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// PointOnRelatingElement : IfcPointOrVertexPoint;
	/// PointOnRelatedElement : OPTIONAL IfcPointOrVertexPoint;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectionPointGeometry : IfcConnectionGeometry, Global.IfcConnectionPointGeometry
	{
		public virtual IfcPointOrVertexPoint? PointOnRelatingElement { get; set; }
		public virtual IfcPointOrVertexPoint? PointOnRelatedElement { get; set; }
		public IfcConnectionPointGeometry() : base()
		{
		}
		public IfcConnectionPointGeometry(IfcPointOrVertexPoint? PointOnRelatingElement, IfcPointOrVertexPoint? PointOnRelatedElement) : base ()
		{
			this.PointOnRelatingElement = PointOnRelatingElement;
			this.PointOnRelatedElement = PointOnRelatedElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				PointOnRelatingElement,
				PointOnRelatedElement
			};
		}
		public virtual Global.IfcPointOrVertexPoint? _PointOnRelatingElement { get { return PointOnRelatingElement; } set { } }
		public virtual Global.IfcPointOrVertexPoint? _PointOnRelatedElement { get { return PointOnRelatedElement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcConnectionPortGeometry
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// LocationAtRelatingElement : IfcAxis2Placement;
	/// LocationAtRelatedElement : OPTIONAL IfcAxis2Placement;
	/// ProfileOfPort : IfcProfileDef;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectionPortGeometry : IfcConnectionGeometry, Global.IfcConnectionPortGeometry
	{
		public virtual IfcAxis2Placement? LocationAtRelatingElement { get; set; }
		public virtual IfcAxis2Placement? LocationAtRelatedElement { get; set; }
		public virtual IfcProfileDef? ProfileOfPort { get; set; }
		public IfcConnectionPortGeometry() : base()
		{
		}
		public IfcConnectionPortGeometry(IfcAxis2Placement? LocationAtRelatingElement, IfcAxis2Placement? LocationAtRelatedElement, IfcProfileDef? ProfileOfPort) : base ()
		{
			this.LocationAtRelatingElement = LocationAtRelatingElement;
			this.LocationAtRelatedElement = LocationAtRelatedElement;
			this.ProfileOfPort = ProfileOfPort;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				LocationAtRelatingElement,
				LocationAtRelatedElement,
				ProfileOfPort
			};
		}
		public virtual Global.IfcAxis2Placement? _LocationAtRelatingElement { get { return LocationAtRelatingElement; } set { } }
		public virtual Global.IfcAxis2Placement? _LocationAtRelatedElement { get { return LocationAtRelatedElement; } set { } }
		public virtual Global.IfcProfileDef? _ProfileOfPort { get { return ProfileOfPort; } set { } }
	}
	/// <summary>
	/// ENTITY IfcConnectionSurfaceGeometry
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// SurfaceOnRelatingElement : IfcSurfaceOrFaceSurface;
	/// SurfaceOnRelatedElement : OPTIONAL IfcSurfaceOrFaceSurface;
	/// END_ENTITY;
	/// <summary>
	public class IfcConnectionSurfaceGeometry : IfcConnectionGeometry, Global.IfcConnectionSurfaceGeometry
	{
		public virtual IfcSurfaceOrFaceSurface? SurfaceOnRelatingElement { get; set; }
		public virtual IfcSurfaceOrFaceSurface? SurfaceOnRelatedElement { get; set; }
		public IfcConnectionSurfaceGeometry() : base()
		{
		}
		public IfcConnectionSurfaceGeometry(IfcSurfaceOrFaceSurface? SurfaceOnRelatingElement, IfcSurfaceOrFaceSurface? SurfaceOnRelatedElement) : base ()
		{
			this.SurfaceOnRelatingElement = SurfaceOnRelatingElement;
			this.SurfaceOnRelatedElement = SurfaceOnRelatedElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SurfaceOnRelatingElement,
				SurfaceOnRelatedElement
			};
		}
		public virtual Global.IfcSurfaceOrFaceSurface? _SurfaceOnRelatingElement { get { return SurfaceOnRelatingElement; } set { } }
		public virtual Global.IfcSurfaceOrFaceSurface? _SurfaceOnRelatedElement { get { return SurfaceOnRelatedElement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcConstraint
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcMetric
	/// ,IfcObjective));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// ConstraintGrade : IfcConstraintEnum;
	/// ConstraintSource : OPTIONAL IfcLabel;
	/// CreatingActor : OPTIONAL IfcActorSelect;
	/// CreationTime : OPTIONAL IfcDateTimeSelect;
	/// UserDefinedGrade : OPTIONAL IfcLabel;
	/// INVERSE
	/// ClassifiedAs : SET [0:?] OF IfcConstraintClassificationRelationship FOR ClassifiedConstraint;
	/// RelatesConstraints : SET [0:?] OF IfcConstraintRelationship FOR RelatingConstraint;
	/// IsRelatedWith : SET [0:?] OF IfcConstraintRelationship FOR RelatedConstraints;
	/// PropertiesForConstraint : SET [0:?] OF IfcPropertyConstraintRelationship FOR RelatingConstraint;
	/// Aggregates : SET [0:?] OF IfcConstraintAggregationRelationship FOR RelatingConstraint;
	/// IsAggregatedIn : SET [0:?] OF IfcConstraintAggregationRelationship FOR RelatedConstraints;
	/// WHERE
	/// WR11 : (ConstraintGrade <> IfcConstraintEnum.USERDEFINED) OR
	/// ((ConstraintGrade = IfcConstraintEnum.USERDEFINED) AND EXISTS(SELF\IfcConstraint.UserDefinedGrade));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcConstraint : Ifc_Entity, Global.IfcConstraint
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcConstraintEnum? ConstraintGrade { get; set; }
		public virtual IfcLabel? ConstraintSource { get; set; }
		public virtual IfcActorSelect? CreatingActor { get; set; }
		public virtual IfcDateTimeSelect? CreationTime { get; set; }
		public virtual IfcLabel? UserDefinedGrade { get; set; }
		public List<IfcConstraintClassificationRelationship>? ClassifiedAs => Model?.GetItems<IfcConstraintClassificationRelationship>().Where(x => x.ClassifiedConstraint != null && x.ClassifiedConstraint == this).ToList();
		public List<IfcConstraintRelationship>? RelatesConstraints => Model?.GetItems<IfcConstraintRelationship>().Where(x => x.RelatingConstraint != null && x.RelatingConstraint == this).ToList();
		public List<IfcConstraintRelationship>? IsRelatedWith => Model?.GetItems<IfcConstraintRelationship>().Where(x => x.RelatedConstraints != null && x.RelatedConstraints.Contains(this)).ToList();
		public List<IfcPropertyConstraintRelationship>? PropertiesForConstraint => Model?.GetItems<IfcPropertyConstraintRelationship>().Where(x => x.RelatingConstraint != null && x.RelatingConstraint == this).ToList();
		public List<IfcConstraintAggregationRelationship>? Aggregates => Model?.GetItems<IfcConstraintAggregationRelationship>().Where(x => x.RelatingConstraint != null && x.RelatingConstraint == this).ToList();
		public List<IfcConstraintAggregationRelationship>? IsAggregatedIn => Model?.GetItems<IfcConstraintAggregationRelationship>().Where(x => x.RelatedConstraints != null && x.RelatedConstraints.Contains(this)).ToList();
		public IfcConstraint() : base()
		{
		}
		public IfcConstraint(IfcLabel? Name, IfcText? Description, IfcConstraintEnum? ConstraintGrade, IfcLabel? ConstraintSource, IfcActorSelect? CreatingActor, IfcDateTimeSelect? CreationTime, IfcLabel? UserDefinedGrade) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.ConstraintGrade = ConstraintGrade;
			this.ConstraintSource = ConstraintSource;
			this.CreatingActor = CreatingActor;
			this.CreationTime = CreationTime;
			this.UserDefinedGrade = UserDefinedGrade;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				ConstraintGrade,
				ConstraintSource,
				CreatingActor,
				CreationTime,
				UserDefinedGrade
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcConstraintEnum? _ConstraintGrade { get { return ConstraintGrade; } set { } }
		public virtual Global.IfcLabel? _ConstraintSource { get { return ConstraintSource; } set { } }
		public virtual Global.IfcActorSelect? _CreatingActor { get { return CreatingActor; } set { } }
		public virtual Global.IfcDateTimeSelect? _CreationTime { get { return CreationTime; } set { } }
		public virtual Global.IfcLabel? _UserDefinedGrade { get { return UserDefinedGrade; } set { } }
		public virtual List<Global.IfcConstraintClassificationRelationship>? _ClassifiedAs
		{
			get
			{
				if(ClassifiedAs != null)
				{
					List<Global.IfcConstraintClassificationRelationship>? items = new List<Global.IfcConstraintClassificationRelationship>();
					foreach (IfcConstraintClassificationRelationship item in ClassifiedAs)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcConstraintRelationship>? _RelatesConstraints
		{
			get
			{
				if(RelatesConstraints != null)
				{
					List<Global.IfcConstraintRelationship>? items = new List<Global.IfcConstraintRelationship>();
					foreach (IfcConstraintRelationship item in RelatesConstraints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcConstraintRelationship>? _IsRelatedWith
		{
			get
			{
				if(IsRelatedWith != null)
				{
					List<Global.IfcConstraintRelationship>? items = new List<Global.IfcConstraintRelationship>();
					foreach (IfcConstraintRelationship item in IsRelatedWith)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcPropertyConstraintRelationship>? _PropertiesForConstraint
		{
			get
			{
				if(PropertiesForConstraint != null)
				{
					List<Global.IfcPropertyConstraintRelationship>? items = new List<Global.IfcPropertyConstraintRelationship>();
					foreach (IfcPropertyConstraintRelationship item in PropertiesForConstraint)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcConstraintAggregationRelationship>? _Aggregates
		{
			get
			{
				if(Aggregates != null)
				{
					List<Global.IfcConstraintAggregationRelationship>? items = new List<Global.IfcConstraintAggregationRelationship>();
					foreach (IfcConstraintAggregationRelationship item in Aggregates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcConstraintAggregationRelationship>? _IsAggregatedIn
		{
			get
			{
				if(IsAggregatedIn != null)
				{
					List<Global.IfcConstraintAggregationRelationship>? items = new List<Global.IfcConstraintAggregationRelationship>();
					foreach (IfcConstraintAggregationRelationship item in IsAggregatedIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstraintAggregationRelationship;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// RelatingConstraint : IfcConstraint;
	/// RelatedConstraints : LIST [1:?] OF UNIQUE IfcConstraint;
	/// LogicalAggregator : IfcLogicalOperatorEnum;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(temp <* RelatedConstraints |
	/// temp :=: RelatingConstraint
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcConstraintAggregationRelationship : Ifc_Entity, Global.IfcConstraintAggregationRelationship
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcConstraint? RelatingConstraint { get; set; }
		public virtual List<IfcConstraint>? RelatedConstraints { get; set; }
		public virtual IfcLogicalOperatorEnum? LogicalAggregator { get; set; }
		public IfcConstraintAggregationRelationship() : base()
		{
		}
		public IfcConstraintAggregationRelationship(IfcLabel? Name, IfcText? Description, IfcConstraint? RelatingConstraint, List<IfcConstraint>? RelatedConstraints, IfcLogicalOperatorEnum? LogicalAggregator) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedConstraints = RelatedConstraints;
			this.LogicalAggregator = LogicalAggregator;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingConstraint,
				RelatedConstraints,
				LogicalAggregator
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcConstraint? _RelatingConstraint { get { return RelatingConstraint; } set { } }
		public virtual List<Global.IfcConstraint>? _RelatedConstraints
		{
			get
			{
				if(RelatedConstraints != null)
				{
					List<Global.IfcConstraint>? items = new List<Global.IfcConstraint>();
					foreach (IfcConstraint item in RelatedConstraints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLogicalOperatorEnum? _LogicalAggregator { get { return LogicalAggregator; } set { } }
	}
	/// <summary>
	/// ENTITY IfcConstraintClassificationRelationship;
	/// ClassifiedConstraint : IfcConstraint;
	/// RelatedClassifications : SET [1:?] OF IfcClassificationNotationSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcConstraintClassificationRelationship : Ifc_Entity, Global.IfcConstraintClassificationRelationship
	{
		public virtual IfcConstraint? ClassifiedConstraint { get; set; }
		public virtual List<IfcClassificationNotationSelect>? RelatedClassifications { get; set; }
		public IfcConstraintClassificationRelationship() : base()
		{
		}
		public IfcConstraintClassificationRelationship(IfcConstraint? ClassifiedConstraint, List<IfcClassificationNotationSelect>? RelatedClassifications) : base ()
		{
			this.ClassifiedConstraint = ClassifiedConstraint;
			this.RelatedClassifications = RelatedClassifications;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ClassifiedConstraint,
				RelatedClassifications
			};
		}
		public virtual Global.IfcConstraint? _ClassifiedConstraint { get { return ClassifiedConstraint; } set { } }
		public virtual List<Global.IfcClassificationNotationSelect>? _RelatedClassifications
		{
			get
			{
				if(RelatedClassifications != null)
				{
					List<Global.IfcClassificationNotationSelect>? items = new List<Global.IfcClassificationNotationSelect>();
					foreach (IfcClassificationNotationSelect item in RelatedClassifications)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstraintRelationship;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// RelatingConstraint : IfcConstraint;
	/// RelatedConstraints : SET [1:?] OF IfcConstraint;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(temp <* RelatedConstraints | temp :=: RelatingConstraint )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcConstraintRelationship : Ifc_Entity, Global.IfcConstraintRelationship
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcConstraint? RelatingConstraint { get; set; }
		public virtual List<IfcConstraint>? RelatedConstraints { get; set; }
		public IfcConstraintRelationship() : base()
		{
		}
		public IfcConstraintRelationship(IfcLabel? Name, IfcText? Description, IfcConstraint? RelatingConstraint, List<IfcConstraint>? RelatedConstraints) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedConstraints = RelatedConstraints;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingConstraint,
				RelatedConstraints
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcConstraint? _RelatingConstraint { get { return RelatingConstraint; } set { } }
		public virtual List<Global.IfcConstraint>? _RelatedConstraints
		{
			get
			{
				if(RelatedConstraints != null)
				{
					List<Global.IfcConstraint>? items = new List<Global.IfcConstraint>();
					foreach (IfcConstraint item in RelatedConstraints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionEquipmentResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// END_ENTITY;
	/// <summary>
	public class IfcConstructionEquipmentResource : IfcConstructionResource, Global.IfcConstructionEquipmentResource
	{
		public IfcConstructionEquipmentResource() : base()
		{
		}
		public IfcConstructionEquipmentResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? ResourceIdentifier, IfcLabel? ResourceGroup, IfcResourceConsumptionEnum? ResourceConsumption, IfcMeasureWithUnit? BaseQuantity) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ResourceIdentifier,
				ResourceGroup,
				ResourceConsumption,
				BaseQuantity
			};
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionMaterialResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// Suppliers : OPTIONAL SET [1:?] OF IfcActorSelect;
	/// UsageRatio : OPTIONAL IfcRatioMeasure;
	/// WHERE
	/// WR1 : SIZEOF(SELF\IfcResource.ResourceOf) <=1;
	/// WR2 : NOT(EXISTS(SELF\IfcResource.ResourceOf[1])) OR
	/// (SELF\IfcResource.ResourceOf[1].RelatedObjectsType = IfcObjectTypeEnum.PRODUCT);
	/// END_ENTITY;
	/// <summary>
	public class IfcConstructionMaterialResource : IfcConstructionResource, Global.IfcConstructionMaterialResource
	{
		public virtual List<IfcActorSelect>? Suppliers { get; set; }
		public virtual IfcRatioMeasure? UsageRatio { get; set; }
		public IfcConstructionMaterialResource() : base()
		{
		}
		public IfcConstructionMaterialResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? ResourceIdentifier, IfcLabel? ResourceGroup, IfcResourceConsumptionEnum? ResourceConsumption, IfcMeasureWithUnit? BaseQuantity, List<IfcActorSelect>? Suppliers, IfcRatioMeasure? UsageRatio) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
			this.Suppliers = Suppliers;
			this.UsageRatio = UsageRatio;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ResourceIdentifier,
				ResourceGroup,
				ResourceConsumption,
				BaseQuantity,
				Suppliers,
				UsageRatio
			};
		}
		public virtual List<Global.IfcActorSelect>? _Suppliers
		{
			get
			{
				if(Suppliers != null)
				{
					List<Global.IfcActorSelect>? items = new List<Global.IfcActorSelect>();
					foreach (IfcActorSelect item in Suppliers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcRatioMeasure? _UsageRatio { get { return UsageRatio; } set { } }
	}
	/// <summary>
	/// ENTITY IfcConstructionProductResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// WHERE
	/// WR1 : SIZEOF(SELF\IfcResource.ResourceOf) <=1;
	/// WR2 : NOT(EXISTS(SELF\IfcResource.ResourceOf[1])) OR
	/// (SELF\IfcResource.ResourceOf[1].RelatedObjectsType = IfcObjectTypeEnum.PRODUCT);
	/// END_ENTITY;
	/// <summary>
	public class IfcConstructionProductResource : IfcConstructionResource, Global.IfcConstructionProductResource
	{
		public IfcConstructionProductResource() : base()
		{
		}
		public IfcConstructionProductResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? ResourceIdentifier, IfcLabel? ResourceGroup, IfcResourceConsumptionEnum? ResourceConsumption, IfcMeasureWithUnit? BaseQuantity) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ResourceIdentifier,
				ResourceGroup,
				ResourceConsumption,
				BaseQuantity
			};
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionResource
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConstructionEquipmentResource
	/// ,IfcConstructionMaterialResource
	/// ,IfcConstructionProductResource
	/// ,IfcCrewResource
	/// ,IfcLaborResource
	/// ,IfcSubContractResource))
	/// SUBTYPE OF (IfcResource);
	/// ResourceIdentifier : OPTIONAL IfcIdentifier;
	/// ResourceGroup : OPTIONAL IfcLabel;
	/// ResourceConsumption : OPTIONAL IfcResourceConsumptionEnum;
	/// BaseQuantity : OPTIONAL IfcMeasureWithUnit;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcConstructionResource : IfcResource, Global.IfcConstructionResource
	{
		public virtual IfcIdentifier? ResourceIdentifier { get; set; }
		public virtual IfcLabel? ResourceGroup { get; set; }
		public virtual IfcResourceConsumptionEnum? ResourceConsumption { get; set; }
		public virtual IfcMeasureWithUnit? BaseQuantity { get; set; }
		public IfcConstructionResource() : base()
		{
		}
		public IfcConstructionResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? ResourceIdentifier, IfcLabel? ResourceGroup, IfcResourceConsumptionEnum? ResourceConsumption, IfcMeasureWithUnit? BaseQuantity) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ResourceIdentifier = ResourceIdentifier;
			this.ResourceGroup = ResourceGroup;
			this.ResourceConsumption = ResourceConsumption;
			this.BaseQuantity = BaseQuantity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ResourceIdentifier,
				ResourceGroup,
				ResourceConsumption,
				BaseQuantity
			};
		}
		public virtual Global.IfcIdentifier? _ResourceIdentifier { get { return ResourceIdentifier; } set { } }
		public virtual Global.IfcLabel? _ResourceGroup { get { return ResourceGroup; } set { } }
		public virtual Global.IfcResourceConsumptionEnum? _ResourceConsumption { get { return ResourceConsumption; } set { } }
		public virtual Global.IfcMeasureWithUnit? _BaseQuantity { get { return BaseQuantity; } set { } }
	}
	/// <summary>
	/// ENTITY IfcContextDependentUnit
	/// SUBTYPE OF (IfcNamedUnit);
	/// Name : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcContextDependentUnit : IfcNamedUnit, Global.IfcContextDependentUnit
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcContextDependentUnit() : base()
		{
		}
		public IfcContextDependentUnit(IfcDimensionalExponents? Dimensions, IfcUnitEnum? UnitType, IfcLabel? Name) : base (Dimensions, UnitType)
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Dimensions,
				UnitType,
				Name
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
	}
	/// <summary>
	/// ENTITY IfcControl
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcActionRequest
	/// ,IfcConditionCriterion
	/// ,IfcCostItem
	/// ,IfcCostSchedule
	/// ,IfcEquipmentStandard
	/// ,IfcFurnitureStandard
	/// ,IfcPerformanceHistory
	/// ,IfcPermit
	/// ,IfcProjectOrder
	/// ,IfcProjectOrderRecord
	/// ,IfcScheduleTimeControl
	/// ,IfcServiceLife
	/// ,IfcSpaceProgram
	/// ,IfcTimeSeriesSchedule
	/// ,IfcWorkControl))
	/// SUBTYPE OF (IfcObject);
	/// INVERSE
	/// Controls : SET [0:?] OF IfcRelAssignsToControl FOR RelatingControl;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcControl : IfcObject, Global.IfcControl
	{
		public List<IfcRelAssignsToControl>? Controls => Model?.GetItems<IfcRelAssignsToControl>().Where(x => x.RelatingControl != null && x.RelatingControl == this).ToList();
		public IfcControl() : base()
		{
		}
		public IfcControl(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
		public virtual List<Global.IfcRelAssignsToControl>? _Controls
		{
			get
			{
				if(Controls != null)
				{
					List<Global.IfcRelAssignsToControl>? items = new List<Global.IfcRelAssignsToControl>();
					foreach (IfcRelAssignsToControl item in Controls)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcControllerType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcControllerTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcControllerType : IfcDistributionControlElementType, Global.IfcControllerType
	{
		public virtual IfcControllerTypeEnum? PredefinedType { get; set; }
		public IfcControllerType() : base()
		{
		}
		public IfcControllerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcControllerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcControllerTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcConversionBasedUnit
	/// SUBTYPE OF (IfcNamedUnit);
	/// Name : IfcLabel;
	/// ConversionFactor : IfcMeasureWithUnit;
	/// END_ENTITY;
	/// <summary>
	public class IfcConversionBasedUnit : IfcNamedUnit, Global.IfcConversionBasedUnit
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcMeasureWithUnit? ConversionFactor { get; set; }
		public IfcConversionBasedUnit() : base()
		{
		}
		public IfcConversionBasedUnit(IfcDimensionalExponents? Dimensions, IfcUnitEnum? UnitType, IfcLabel? Name, IfcMeasureWithUnit? ConversionFactor) : base (Dimensions, UnitType)
		{
			this.Name = Name;
			this.ConversionFactor = ConversionFactor;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Dimensions,
				UnitType,
				Name,
				ConversionFactor
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcMeasureWithUnit? _ConversionFactor { get { return ConversionFactor; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCooledBeamType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCooledBeamTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCooledBeamTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCooledBeamTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCooledBeamType : IfcEnergyConversionDeviceType, Global.IfcCooledBeamType
	{
		public virtual IfcCooledBeamTypeEnum? PredefinedType { get; set; }
		public IfcCooledBeamType() : base()
		{
		}
		public IfcCooledBeamType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCooledBeamTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCooledBeamTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCoolingTowerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCoolingTowerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCoolingTowerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoolingTowerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCoolingTowerType : IfcEnergyConversionDeviceType, Global.IfcCoolingTowerType
	{
		public virtual IfcCoolingTowerTypeEnum? PredefinedType { get; set; }
		public IfcCoolingTowerType() : base()
		{
		}
		public IfcCoolingTowerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCoolingTowerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCoolingTowerTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCoordinatedUniversalTimeOffset;
	/// HourOffset : IfcHourInDay;
	/// MinuteOffset : OPTIONAL IfcMinuteInHour;
	/// Sense : IfcAheadOrBehind;
	/// END_ENTITY;
	/// <summary>
	public class IfcCoordinatedUniversalTimeOffset : Ifc_Entity, Global.IfcCoordinatedUniversalTimeOffset
	{
		public virtual IfcHourInDay? HourOffset { get; set; }
		public virtual IfcMinuteInHour? MinuteOffset { get; set; }
		public virtual IfcAheadOrBehind? Sense { get; set; }
		public IfcCoordinatedUniversalTimeOffset() : base()
		{
		}
		public IfcCoordinatedUniversalTimeOffset(IfcHourInDay? HourOffset, IfcMinuteInHour? MinuteOffset, IfcAheadOrBehind? Sense) : base ()
		{
			this.HourOffset = HourOffset;
			this.MinuteOffset = MinuteOffset;
			this.Sense = Sense;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				HourOffset,
				MinuteOffset,
				Sense
			};
		}
		public virtual Global.IfcHourInDay? _HourOffset { get { return HourOffset; } set { } }
		public virtual Global.IfcMinuteInHour? _MinuteOffset { get { return MinuteOffset; } set { } }
		public virtual Global.IfcAheadOrBehind? _Sense { get { return Sense; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCostItem
	/// SUBTYPE OF (IfcControl);
	/// END_ENTITY;
	/// <summary>
	public class IfcCostItem : IfcControl, Global.IfcCostItem
	{
		public IfcCostItem() : base()
		{
		}
		public IfcCostItem(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcCostSchedule
	/// SUBTYPE OF (IfcControl);
	/// SubmittedBy : OPTIONAL IfcActorSelect;
	/// PreparedBy : OPTIONAL IfcActorSelect;
	/// SubmittedOn : OPTIONAL IfcDateTimeSelect;
	/// Status : OPTIONAL IfcLabel;
	/// TargetUsers : OPTIONAL SET [1:?] OF IfcActorSelect;
	/// UpdateDate : OPTIONAL IfcDateTimeSelect;
	/// ID : IfcIdentifier;
	/// PredefinedType : IfcCostScheduleTypeEnum;
	/// UNIQUE
	/// UR2 : ID;
	/// END_ENTITY;
	/// <summary>
	public class IfcCostSchedule : IfcControl, Global.IfcCostSchedule
	{
		public virtual IfcActorSelect? SubmittedBy { get; set; }
		public virtual IfcActorSelect? PreparedBy { get; set; }
		public virtual IfcDateTimeSelect? SubmittedOn { get; set; }
		public virtual IfcLabel? Status { get; set; }
		public virtual List<IfcActorSelect>? TargetUsers { get; set; }
		public virtual IfcDateTimeSelect? UpdateDate { get; set; }
		public virtual IfcIdentifier? ID { get; set; }
		public virtual IfcCostScheduleTypeEnum? PredefinedType { get; set; }
		public IfcCostSchedule() : base()
		{
		}
		public IfcCostSchedule(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcActorSelect? SubmittedBy, IfcActorSelect? PreparedBy, IfcDateTimeSelect? SubmittedOn, IfcLabel? Status, List<IfcActorSelect>? TargetUsers, IfcDateTimeSelect? UpdateDate, IfcIdentifier? ID, IfcCostScheduleTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.SubmittedBy = SubmittedBy;
			this.PreparedBy = PreparedBy;
			this.SubmittedOn = SubmittedOn;
			this.Status = Status;
			this.TargetUsers = TargetUsers;
			this.UpdateDate = UpdateDate;
			this.ID = ID;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				SubmittedBy,
				PreparedBy,
				SubmittedOn,
				Status,
				TargetUsers,
				UpdateDate,
				ID,
				PredefinedType
			};
		}
		public virtual Global.IfcActorSelect? _SubmittedBy { get { return SubmittedBy; } set { } }
		public virtual Global.IfcActorSelect? _PreparedBy { get { return PreparedBy; } set { } }
		public virtual Global.IfcDateTimeSelect? _SubmittedOn { get { return SubmittedOn; } set { } }
		public virtual Global.IfcLabel? _Status { get { return Status; } set { } }
		public virtual List<Global.IfcActorSelect>? _TargetUsers
		{
			get
			{
				if(TargetUsers != null)
				{
					List<Global.IfcActorSelect>? items = new List<Global.IfcActorSelect>();
					foreach (IfcActorSelect item in TargetUsers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcDateTimeSelect? _UpdateDate { get { return UpdateDate; } set { } }
		public virtual Global.IfcIdentifier? _ID { get { return ID; } set { } }
		public virtual Global.IfcCostScheduleTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCostValue
	/// SUBTYPE OF (IfcAppliedValue);
	/// CostType : IfcLabel;
	/// Condition : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IfcCostValue : IfcAppliedValue, IfcMetricValueSelect, Global.IfcCostValue
	{
		public virtual IfcLabel? CostType { get; set; }
		public virtual IfcText? Condition { get; set; }
		public IfcCostValue() : base()
		{
		}
		public IfcCostValue(IfcLabel? Name, IfcText? Description, IfcAppliedValueSelect? AppliedValue, IfcMeasureWithUnit? UnitBasis, IfcDateTimeSelect? ApplicableDate, IfcDateTimeSelect? FixedUntilDate, IfcLabel? CostType, IfcText? Condition) : base (Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate)
		{
			this.CostType = CostType;
			this.Condition = Condition;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				AppliedValue,
				UnitBasis,
				ApplicableDate,
				FixedUntilDate,
				CostType,
				Condition
			};
		}
		public virtual Global.IfcLabel? _CostType { get { return CostType; } set { } }
		public virtual Global.IfcText? _Condition { get { return Condition; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCovering
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcCoveringTypeEnum;
	/// INVERSE
	/// CoversSpaces : SET [0:1] OF IfcRelCoversSpaces FOR RelatedCoverings;
	/// Covers : SET [0:1] OF IfcRelCoversBldgElements FOR RelatedCoverings;
	/// WHERE
	/// WR61 : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCoveringTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoveringTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcCovering : IfcBuildingElement, Global.IfcCovering
	{
		public virtual IfcCoveringTypeEnum? PredefinedType { get; set; }
		public List<IfcRelCoversSpaces>? CoversSpaces => Model?.GetItems<IfcRelCoversSpaces>().Where(x => x.RelatedCoverings != null && x.RelatedCoverings.Contains(this)).ToList();
		public List<IfcRelCoversBldgElements>? Covers => Model?.GetItems<IfcRelCoversBldgElements>().Where(x => x.RelatedCoverings != null && x.RelatedCoverings.Contains(this)).ToList();
		public IfcCovering() : base()
		{
		}
		public IfcCovering(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcCoveringTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcCoveringTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
		public virtual List<Global.IfcRelCoversSpaces>? _CoversSpaces
		{
			get
			{
				if(CoversSpaces != null)
				{
					List<Global.IfcRelCoversSpaces>? items = new List<Global.IfcRelCoversSpaces>();
					foreach (IfcRelCoversSpaces item in CoversSpaces)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelCoversBldgElements>? _Covers
		{
			get
			{
				if(Covers != null)
				{
					List<Global.IfcRelCoversBldgElements>? items = new List<Global.IfcRelCoversBldgElements>();
					foreach (IfcRelCoversBldgElements item in Covers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCoveringType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcCoveringTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcCoveringType : IfcBuildingElementType, Global.IfcCoveringType
	{
		public virtual IfcCoveringTypeEnum? PredefinedType { get; set; }
		public IfcCoveringType() : base()
		{
		}
		public IfcCoveringType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCoveringTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCoveringTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCraneRailAShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// OverallHeight : IfcPositiveLengthMeasure;
	/// BaseWidth2 : IfcPositiveLengthMeasure;
	/// Radius : OPTIONAL IfcPositiveLengthMeasure;
	/// HeadWidth : IfcPositiveLengthMeasure;
	/// HeadDepth2 : IfcPositiveLengthMeasure;
	/// HeadDepth3 : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// BaseWidth4 : IfcPositiveLengthMeasure;
	/// BaseDepth1 : IfcPositiveLengthMeasure;
	/// BaseDepth2 : IfcPositiveLengthMeasure;
	/// BaseDepth3 : IfcPositiveLengthMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCraneRailAShapeProfileDef : IfcParameterizedProfileDef, Global.IfcCraneRailAShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? OverallHeight { get; set; }
		public virtual IfcPositiveLengthMeasure? BaseWidth2 { get; set; }
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public virtual IfcPositiveLengthMeasure? HeadWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? HeadDepth2 { get; set; }
		public virtual IfcPositiveLengthMeasure? HeadDepth3 { get; set; }
		public virtual IfcPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? BaseWidth4 { get; set; }
		public virtual IfcPositiveLengthMeasure? BaseDepth1 { get; set; }
		public virtual IfcPositiveLengthMeasure? BaseDepth2 { get; set; }
		public virtual IfcPositiveLengthMeasure? BaseDepth3 { get; set; }
		public virtual IfcPositiveLengthMeasure? CentreOfGravityInY { get; set; }
		public IfcCraneRailAShapeProfileDef() : base()
		{
		}
		public IfcCraneRailAShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? OverallHeight, IfcPositiveLengthMeasure? BaseWidth2, IfcPositiveLengthMeasure? Radius, IfcPositiveLengthMeasure? HeadWidth, IfcPositiveLengthMeasure? HeadDepth2, IfcPositiveLengthMeasure? HeadDepth3, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? BaseWidth4, IfcPositiveLengthMeasure? BaseDepth1, IfcPositiveLengthMeasure? BaseDepth2, IfcPositiveLengthMeasure? BaseDepth3, IfcPositiveLengthMeasure? CentreOfGravityInY) : base (ProfileType, ProfileName, Position)
		{
			this.OverallHeight = OverallHeight;
			this.BaseWidth2 = BaseWidth2;
			this.Radius = Radius;
			this.HeadWidth = HeadWidth;
			this.HeadDepth2 = HeadDepth2;
			this.HeadDepth3 = HeadDepth3;
			this.WebThickness = WebThickness;
			this.BaseWidth4 = BaseWidth4;
			this.BaseDepth1 = BaseDepth1;
			this.BaseDepth2 = BaseDepth2;
			this.BaseDepth3 = BaseDepth3;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				OverallHeight,
				BaseWidth2,
				Radius,
				HeadWidth,
				HeadDepth2,
				HeadDepth3,
				WebThickness,
				BaseWidth4,
				BaseDepth1,
				BaseDepth2,
				BaseDepth3,
				CentreOfGravityInY
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallHeight { get { return OverallHeight; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _BaseWidth2 { get { return BaseWidth2; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Radius { get { return Radius; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _HeadWidth { get { return HeadWidth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _HeadDepth2 { get { return HeadDepth2; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _HeadDepth3 { get { return HeadDepth3; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _WebThickness { get { return WebThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _BaseWidth4 { get { return BaseWidth4; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _BaseDepth1 { get { return BaseDepth1; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _BaseDepth2 { get { return BaseDepth2; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _BaseDepth3 { get { return BaseDepth3; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _CentreOfGravityInY { get { return CentreOfGravityInY; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCraneRailFShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// OverallHeight : IfcPositiveLengthMeasure;
	/// HeadWidth : IfcPositiveLengthMeasure;
	/// Radius : OPTIONAL IfcPositiveLengthMeasure;
	/// HeadDepth2 : IfcPositiveLengthMeasure;
	/// HeadDepth3 : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// BaseDepth1 : IfcPositiveLengthMeasure;
	/// BaseDepth2 : IfcPositiveLengthMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCraneRailFShapeProfileDef : IfcParameterizedProfileDef, Global.IfcCraneRailFShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? OverallHeight { get; set; }
		public virtual IfcPositiveLengthMeasure? HeadWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public virtual IfcPositiveLengthMeasure? HeadDepth2 { get; set; }
		public virtual IfcPositiveLengthMeasure? HeadDepth3 { get; set; }
		public virtual IfcPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? BaseDepth1 { get; set; }
		public virtual IfcPositiveLengthMeasure? BaseDepth2 { get; set; }
		public virtual IfcPositiveLengthMeasure? CentreOfGravityInY { get; set; }
		public IfcCraneRailFShapeProfileDef() : base()
		{
		}
		public IfcCraneRailFShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? OverallHeight, IfcPositiveLengthMeasure? HeadWidth, IfcPositiveLengthMeasure? Radius, IfcPositiveLengthMeasure? HeadDepth2, IfcPositiveLengthMeasure? HeadDepth3, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? BaseDepth1, IfcPositiveLengthMeasure? BaseDepth2, IfcPositiveLengthMeasure? CentreOfGravityInY) : base (ProfileType, ProfileName, Position)
		{
			this.OverallHeight = OverallHeight;
			this.HeadWidth = HeadWidth;
			this.Radius = Radius;
			this.HeadDepth2 = HeadDepth2;
			this.HeadDepth3 = HeadDepth3;
			this.WebThickness = WebThickness;
			this.BaseDepth1 = BaseDepth1;
			this.BaseDepth2 = BaseDepth2;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				OverallHeight,
				HeadWidth,
				Radius,
				HeadDepth2,
				HeadDepth3,
				WebThickness,
				BaseDepth1,
				BaseDepth2,
				CentreOfGravityInY
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallHeight { get { return OverallHeight; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _HeadWidth { get { return HeadWidth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Radius { get { return Radius; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _HeadDepth2 { get { return HeadDepth2; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _HeadDepth3 { get { return HeadDepth3; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _WebThickness { get { return WebThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _BaseDepth1 { get { return BaseDepth1; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _BaseDepth2 { get { return BaseDepth2; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _CentreOfGravityInY { get { return CentreOfGravityInY; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCrewResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// END_ENTITY;
	/// <summary>
	public class IfcCrewResource : IfcConstructionResource, Global.IfcCrewResource
	{
		public IfcCrewResource() : base()
		{
		}
		public IfcCrewResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? ResourceIdentifier, IfcLabel? ResourceGroup, IfcResourceConsumptionEnum? ResourceConsumption, IfcMeasureWithUnit? BaseQuantity) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ResourceIdentifier,
				ResourceGroup,
				ResourceConsumption,
				BaseQuantity
			};
		}
	}
	/// <summary>
	/// ENTITY IfcCsgPrimitive3D
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBlock
	/// ,IfcRectangularPyramid
	/// ,IfcRightCircularCone
	/// ,IfcRightCircularCylinder
	/// ,IfcSphere))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Position : IfcAxis2Placement3D;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcCsgPrimitive3D : IfcGeometricRepresentationItem, IfcBooleanOperand, IfcCsgSelect, Global.IfcCsgPrimitive3D
	{
		public virtual IfcAxis2Placement3D? Position { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcCsgPrimitive3D() : base()
		{
		}
		public IfcCsgPrimitive3D(IfcAxis2Placement3D? Position) : base ()
		{
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position
			};
		}
		public virtual Global.IfcAxis2Placement3D? _Position { get { return Position; } set { } }
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCsgSolid
	/// SUBTYPE OF (IfcSolidModel);
	/// TreeRootExpression : IfcCsgSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcCsgSolid : IfcSolidModel, Global.IfcCsgSolid
	{
		public virtual IfcCsgSelect? TreeRootExpression { get; set; }
		public IfcCsgSolid() : base()
		{
		}
		public IfcCsgSolid(IfcCsgSelect? TreeRootExpression) : base ()
		{
			this.TreeRootExpression = TreeRootExpression;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TreeRootExpression
			};
		}
		public virtual Global.IfcCsgSelect? _TreeRootExpression { get { return TreeRootExpression; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCurrencyRelationship;
	/// RelatingMonetaryUnit : IfcMonetaryUnit;
	/// RelatedMonetaryUnit : IfcMonetaryUnit;
	/// ExchangeRate : IfcPositiveRatioMeasure;
	/// RateDateTime : IfcDateAndTime;
	/// RateSource : OPTIONAL IfcLibraryInformation;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurrencyRelationship : Ifc_Entity, Global.IfcCurrencyRelationship
	{
		public virtual IfcMonetaryUnit? RelatingMonetaryUnit { get; set; }
		public virtual IfcMonetaryUnit? RelatedMonetaryUnit { get; set; }
		public virtual IfcPositiveRatioMeasure? ExchangeRate { get; set; }
		public virtual IfcDateAndTime? RateDateTime { get; set; }
		public virtual IfcLibraryInformation? RateSource { get; set; }
		public IfcCurrencyRelationship() : base()
		{
		}
		public IfcCurrencyRelationship(IfcMonetaryUnit? RelatingMonetaryUnit, IfcMonetaryUnit? RelatedMonetaryUnit, IfcPositiveRatioMeasure? ExchangeRate, IfcDateAndTime? RateDateTime, IfcLibraryInformation? RateSource) : base ()
		{
			this.RelatingMonetaryUnit = RelatingMonetaryUnit;
			this.RelatedMonetaryUnit = RelatedMonetaryUnit;
			this.ExchangeRate = ExchangeRate;
			this.RateDateTime = RateDateTime;
			this.RateSource = RateSource;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RelatingMonetaryUnit,
				RelatedMonetaryUnit,
				ExchangeRate,
				RateDateTime,
				RateSource
			};
		}
		public virtual Global.IfcMonetaryUnit? _RelatingMonetaryUnit { get { return RelatingMonetaryUnit; } set { } }
		public virtual Global.IfcMonetaryUnit? _RelatedMonetaryUnit { get { return RelatedMonetaryUnit; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _ExchangeRate { get { return ExchangeRate; } set { } }
		public virtual Global.IfcDateAndTime? _RateDateTime { get { return RateDateTime; } set { } }
		public virtual Global.IfcLibraryInformation? _RateSource { get { return RateSource; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCurtainWall
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcCurtainWall : IfcBuildingElement, Global.IfcCurtainWall
	{
		public IfcCurtainWall() : base()
		{
		}
		public IfcCurtainWall(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcCurtainWallType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcCurtainWallTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurtainWallType : IfcBuildingElementType, Global.IfcCurtainWallType
	{
		public virtual IfcCurtainWallTypeEnum? PredefinedType { get; set; }
		public IfcCurtainWallType() : base()
		{
		}
		public IfcCurtainWallType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcCurtainWallTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcCurtainWallTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCurve
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBoundedCurve
	/// ,IfcConic
	/// ,IfcLine
	/// ,IfcOffsetCurve2D
	/// ,IfcOffsetCurve3D))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// DERIVE
	/// Dim : IfcDimensionCount := IfcCurveDim(SELF);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcCurve : IfcGeometricRepresentationItem, IfcGeometricSetSelect, Global.IfcCurve
	{
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcCurve() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCurveBoundedPlane
	/// SUBTYPE OF (IfcBoundedSurface);
	/// BasisSurface : IfcPlane;
	/// OuterBoundary : IfcCurve;
	/// InnerBoundaries : SET [0:?] OF IfcCurve;
	/// DERIVE
	/// Dim : IfcDimensionCount := BasisSurface.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurveBoundedPlane : IfcBoundedSurface, Global.IfcCurveBoundedPlane
	{
		public virtual IfcPlane? BasisSurface { get; set; }
		public virtual IfcCurve? OuterBoundary { get; set; }
		public virtual List<IfcCurve>? InnerBoundaries { get; set; }
		//TODO DERIVE
		public override IfcDimensionCount? Dim {get {return null;}}
		public IfcCurveBoundedPlane() : base()
		{
		}
		public IfcCurveBoundedPlane(IfcPlane? BasisSurface, IfcCurve? OuterBoundary, List<IfcCurve>? InnerBoundaries) : base ()
		{
			this.BasisSurface = BasisSurface;
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisSurface,
				OuterBoundary,
				InnerBoundaries
			};
		}
		public virtual Global.IfcPlane? _BasisSurface { get { return BasisSurface; } set { } }
		public virtual Global.IfcCurve? _OuterBoundary { get { return OuterBoundary; } set { } }
		public virtual List<Global.IfcCurve>? _InnerBoundaries
		{
			get
			{
				if(InnerBoundaries != null)
				{
					List<Global.IfcCurve>? items = new List<Global.IfcCurve>();
					foreach (IfcCurve item in InnerBoundaries)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public override Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCurveStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// CurveFont : OPTIONAL IfcCurveFontOrScaledCurveFontSelect;
	/// CurveWidth : OPTIONAL IfcSizeSelect;
	/// CurveColour : OPTIONAL IfcColour;
	/// WHERE
	/// WR11 : (NOT(EXISTS(CurveWidth))) OR
	/// ('IFC2X3.IFCPOSITIVELENGTHMEASURE' IN TYPEOF(CurveWidth)) OR
	/// (('IFC2X3.IFCDESCRIPTIVEMEASURE' IN TYPEOF(CurveWidth)) AND
	/// (CurveWidth = 'by layer'));
	/// END_ENTITY;
	/// <summary>
	public class IfcCurveStyle : IfcPresentationStyle, IfcPresentationStyleSelect, Global.IfcCurveStyle
	{
		public virtual IfcCurveFontOrScaledCurveFontSelect? CurveFont { get; set; }
		public virtual IfcSizeSelect? CurveWidth { get; set; }
		public virtual IfcColour? CurveColour { get; set; }
		public IfcCurveStyle() : base()
		{
		}
		public IfcCurveStyle(IfcLabel? Name, IfcCurveFontOrScaledCurveFontSelect? CurveFont, IfcSizeSelect? CurveWidth, IfcColour? CurveColour) : base (Name)
		{
			this.CurveFont = CurveFont;
			this.CurveWidth = CurveWidth;
			this.CurveColour = CurveColour;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				CurveFont,
				CurveWidth,
				CurveColour
			};
		}
		public virtual Global.IfcCurveFontOrScaledCurveFontSelect? _CurveFont { get { return CurveFont; } set { } }
		public virtual Global.IfcSizeSelect? _CurveWidth { get { return CurveWidth; } set { } }
		public virtual Global.IfcColour? _CurveColour { get { return CurveColour; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCurveStyleFont;
	/// Name : OPTIONAL IfcLabel;
	/// PatternList : LIST [1:?] OF IfcCurveStyleFontPattern;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurveStyleFont : Ifc_Entity, IfcCurveStyleFontSelect, Global.IfcCurveStyleFont
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual List<IfcCurveStyleFontPattern>? PatternList { get; set; }
		public IfcCurveStyleFont() : base()
		{
		}
		public IfcCurveStyleFont(IfcLabel? Name, List<IfcCurveStyleFontPattern>? PatternList) : base ()
		{
			this.Name = Name;
			this.PatternList = PatternList;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				PatternList
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual List<Global.IfcCurveStyleFontPattern>? _PatternList
		{
			get
			{
				if(PatternList != null)
				{
					List<Global.IfcCurveStyleFontPattern>? items = new List<Global.IfcCurveStyleFontPattern>();
					foreach (IfcCurveStyleFontPattern item in PatternList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveStyleFontAndScaling;
	/// Name : OPTIONAL IfcLabel;
	/// CurveFont : IfcCurveStyleFontSelect;
	/// CurveFontScaling : IfcPositiveRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurveStyleFontAndScaling : Ifc_Entity, IfcCurveFontOrScaledCurveFontSelect, Global.IfcCurveStyleFontAndScaling
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcCurveStyleFontSelect? CurveFont { get; set; }
		public virtual IfcPositiveRatioMeasure? CurveFontScaling { get; set; }
		public IfcCurveStyleFontAndScaling() : base()
		{
		}
		public IfcCurveStyleFontAndScaling(IfcLabel? Name, IfcCurveStyleFontSelect? CurveFont, IfcPositiveRatioMeasure? CurveFontScaling) : base ()
		{
			this.Name = Name;
			this.CurveFont = CurveFont;
			this.CurveFontScaling = CurveFontScaling;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				CurveFont,
				CurveFontScaling
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcCurveStyleFontSelect? _CurveFont { get { return CurveFont; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _CurveFontScaling { get { return CurveFontScaling; } set { } }
	}
	/// <summary>
	/// ENTITY IfcCurveStyleFontPattern;
	/// VisibleSegmentLength : IfcLengthMeasure;
	/// InvisibleSegmentLength : IfcPositiveLengthMeasure;
	/// WHERE
	/// WR01 : VisibleSegmentLength >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcCurveStyleFontPattern : Ifc_Entity, Global.IfcCurveStyleFontPattern
	{
		public virtual IfcLengthMeasure? VisibleSegmentLength { get; set; }
		public virtual IfcPositiveLengthMeasure? InvisibleSegmentLength { get; set; }
		public IfcCurveStyleFontPattern() : base()
		{
		}
		public IfcCurveStyleFontPattern(IfcLengthMeasure? VisibleSegmentLength, IfcPositiveLengthMeasure? InvisibleSegmentLength) : base ()
		{
			this.VisibleSegmentLength = VisibleSegmentLength;
			this.InvisibleSegmentLength = InvisibleSegmentLength;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				VisibleSegmentLength,
				InvisibleSegmentLength
			};
		}
		public virtual Global.IfcLengthMeasure? _VisibleSegmentLength { get { return VisibleSegmentLength; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _InvisibleSegmentLength { get { return InvisibleSegmentLength; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDamperType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcDamperTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcDamperTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDamperTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDamperType : IfcFlowControllerType, Global.IfcDamperType
	{
		public virtual IfcDamperTypeEnum? PredefinedType { get; set; }
		public IfcDamperType() : base()
		{
		}
		public IfcDamperType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDamperTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcDamperTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDateAndTime;
	/// DateComponent : IfcCalendarDate;
	/// TimeComponent : IfcLocalTime;
	/// END_ENTITY;
	/// <summary>
	public class IfcDateAndTime : Ifc_Entity, IfcDateTimeSelect, IfcObjectReferenceSelect, Global.IfcDateAndTime
	{
		public virtual IfcCalendarDate? DateComponent { get; set; }
		public virtual IfcLocalTime? TimeComponent { get; set; }
		public IfcDateAndTime() : base()
		{
		}
		public IfcDateAndTime(IfcCalendarDate? DateComponent, IfcLocalTime? TimeComponent) : base ()
		{
			this.DateComponent = DateComponent;
			this.TimeComponent = TimeComponent;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				DateComponent,
				TimeComponent
			};
		}
		public virtual Global.IfcCalendarDate? _DateComponent { get { return DateComponent; } set { } }
		public virtual Global.IfcLocalTime? _TimeComponent { get { return TimeComponent; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDefinedSymbol
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Definition : IfcDefinedSymbolSelect;
	/// Target : IfcCartesianTransformationOperator2D;
	/// END_ENTITY;
	/// <summary>
	public class IfcDefinedSymbol : IfcGeometricRepresentationItem, Global.IfcDefinedSymbol
	{
		public virtual IfcDefinedSymbolSelect? Definition { get; set; }
		public virtual IfcCartesianTransformationOperator2D? Target { get; set; }
		public IfcDefinedSymbol() : base()
		{
		}
		public IfcDefinedSymbol(IfcDefinedSymbolSelect? Definition, IfcCartesianTransformationOperator2D? Target) : base ()
		{
			this.Definition = Definition;
			this.Target = Target;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Definition,
				Target
			};
		}
		public virtual Global.IfcDefinedSymbolSelect? _Definition { get { return Definition; } set { } }
		public virtual Global.IfcCartesianTransformationOperator2D? _Target { get { return Target; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDerivedProfileDef
	/// SUBTYPE OF (IfcProfileDef);
	/// ParentProfile : IfcProfileDef;
	/// Operator : IfcCartesianTransformationOperator2D;
	/// Label : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : SELF\IfcProfileDef.ProfileType = ParentProfile.ProfileType;
	/// END_ENTITY;
	/// <summary>
	public class IfcDerivedProfileDef : IfcProfileDef, Global.IfcDerivedProfileDef
	{
		public virtual IfcProfileDef? ParentProfile { get; set; }
		public virtual IfcCartesianTransformationOperator2D? Operator { get; set; }
		public virtual IfcLabel? Label { get; set; }
		public IfcDerivedProfileDef() : base()
		{
		}
		public IfcDerivedProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcProfileDef? ParentProfile, IfcCartesianTransformationOperator2D? Operator, IfcLabel? Label) : base (ProfileType, ProfileName)
		{
			this.ParentProfile = ParentProfile;
			this.Operator = Operator;
			this.Label = Label;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				ParentProfile,
				Operator,
				Label
			};
		}
		public virtual Global.IfcProfileDef? _ParentProfile { get { return ParentProfile; } set { } }
		public virtual Global.IfcCartesianTransformationOperator2D? _Operator { get { return Operator; } set { } }
		public virtual Global.IfcLabel? _Label { get { return Label; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDerivedUnit;
	/// Elements : SET [1:?] OF IfcDerivedUnitElement;
	/// UnitType : IfcDerivedUnitEnum;
	/// UserDefinedType : OPTIONAL IfcLabel;
	/// DERIVE
	/// Dimensions : IfcDimensionalExponents := IfcDeriveDimensionalExponents(Elements);
	/// WHERE
	/// WR1 : (SIZEOF (Elements) > 1) OR ((SIZEOF (Elements) = 1) AND (Elements[1].Exponent <> 1 ));
	/// WR2 : (UnitType <> IfcDerivedUnitEnum.USERDEFINED) OR
	/// ((UnitType = IfcDerivedUnitEnum.USERDEFINED) AND
	/// (EXISTS(SELF.UserDefinedType)));
	/// END_ENTITY;
	/// <summary>
	public class IfcDerivedUnit : Ifc_Entity, IfcUnit, Global.IfcDerivedUnit
	{
		public virtual List<IfcDerivedUnitElement>? Elements { get; set; }
		public virtual IfcDerivedUnitEnum? UnitType { get; set; }
		public virtual IfcLabel? UserDefinedType { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionalExponents? Dimensions {get {return null;}}
		public IfcDerivedUnit() : base()
		{
		}
		public IfcDerivedUnit(List<IfcDerivedUnitElement>? Elements, IfcDerivedUnitEnum? UnitType, IfcLabel? UserDefinedType) : base ()
		{
			this.Elements = Elements;
			this.UnitType = UnitType;
			this.UserDefinedType = UserDefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Elements,
				UnitType,
				UserDefinedType
			};
		}
		public virtual List<Global.IfcDerivedUnitElement>? _Elements
		{
			get
			{
				if(Elements != null)
				{
					List<Global.IfcDerivedUnitElement>? items = new List<Global.IfcDerivedUnitElement>();
					foreach (IfcDerivedUnitElement item in Elements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcDerivedUnitEnum? _UnitType { get { return UnitType; } set { } }
		public virtual Global.IfcLabel? _UserDefinedType { get { return UserDefinedType; } set { } }
		public virtual Global.IfcDimensionalExponents? _Dimensions { get { return Dimensions; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDerivedUnitElement;
	/// Unit : IfcNamedUnit;
	/// Exponent : INTEGER;
	/// END_ENTITY;
	/// <summary>
	public class IfcDerivedUnitElement : Ifc_Entity, Global.IfcDerivedUnitElement
	{
		public virtual IfcNamedUnit? Unit { get; set; }
		public virtual INTEGER? Exponent { get; set; }
		public IfcDerivedUnitElement() : base()
		{
		}
		public IfcDerivedUnitElement(IfcNamedUnit? Unit, INTEGER? Exponent) : base ()
		{
			this.Unit = Unit;
			this.Exponent = Exponent;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Unit,
				Exponent
			};
		}
		public virtual Global.IfcNamedUnit? _Unit { get { return Unit; } set { } }
		public virtual INTEGER? _Exponent { get { return Exponent; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDiameterDimension
	/// SUBTYPE OF (IfcDimensionCurveDirectedCallout);
	/// END_ENTITY;
	/// <summary>
	public class IfcDiameterDimension : IfcDimensionCurveDirectedCallout, Global.IfcDiameterDimension
	{
		public IfcDiameterDimension() : base()
		{
		}
		public IfcDiameterDimension(List<IfcDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Contents
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionCalloutRelationship
	/// SUBTYPE OF (IfcDraughtingCalloutRelationship);
	/// WHERE
	/// WR11 : SELF\IfcDraughtingCalloutRelationship.Name IN ['primary','secondary'];
	/// WR12 : SIZEOF(TYPEOF(SELF\IfcDraughtingCalloutRelationship.RelatingDraughtingCallout) * [
	/// 'IFC2X3.IFCANGULARDIMENSION',
	/// 'IFC2X3.IFCDIAMETERDIMENSION',
	/// 'IFC2X3.IFCLINEARDIMENSION',
	/// 'IFC2X3.IFCRADIUSDIMENSION']) = 1;
	/// WR13 : NOT ('IFC2X3.IFCDIMENSIONCURVEDIRECTEDCALLOUT'
	/// IN TYPEOF (SELF\IfcDraughtingCalloutRelationship.RelatedDraughtingCallout));
	/// END_ENTITY;
	/// <summary>
	public class IfcDimensionCalloutRelationship : IfcDraughtingCalloutRelationship, Global.IfcDimensionCalloutRelationship
	{
		public IfcDimensionCalloutRelationship() : base()
		{
		}
		public IfcDimensionCalloutRelationship(IfcLabel? Name, IfcText? Description, IfcDraughtingCallout? RelatingDraughtingCallout, IfcDraughtingCallout? RelatedDraughtingCallout) : base (Name, Description, RelatingDraughtingCallout, RelatedDraughtingCallout)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingDraughtingCallout,
				RelatedDraughtingCallout
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionCurve
	/// SUBTYPE OF (IfcAnnotationCurveOccurrence);
	/// INVERSE
	/// AnnotatedBySymbols : SET [0:2] OF IfcTerminatorSymbol FOR AnnotatedCurve;
	/// WHERE
	/// WR51 : SIZEOF(USEDIN(SELF,'IFC2X3.IFCDRAUGHTINGCALLOUT.CONTENTS'))
	/// >= 1;
	/// WR52 : (SIZEOF(QUERY (Dct1 <* USEDIN(SELF,'IFC2X3.' +
	/// 'IFCTERMINATORSYMBOL.ANNOTATEDCURVE') | (Dct1.Role = IfcDimensionExtentUsage.ORIGIN))) <= 1)
	/// AND
	/// (SIZEOF(QUERY (Dct2 <* USEDIN(SELF,'IFC2X3.' +
	/// 'IFCTERMINATORSYMBOL.ANNOTATEDCURVE') | (Dct2.Role = IfcDimensionExtentUsage.TARGET))) <= 1);
	/// WR53 : SIZEOF(QUERY (Dct <* AnnotatedBySymbols |
	/// NOT('IFC2X3.IFCDIMENSIONCURVETERMINATOR' IN TYPEOF(Dct))))
	/// = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcDimensionCurve : IfcAnnotationCurveOccurrence, Global.IfcDimensionCurve
	{
		public List<IfcTerminatorSymbol>? AnnotatedBySymbols => Model?.GetItems<IfcTerminatorSymbol>().Where(x => x.AnnotatedCurve != null && x.AnnotatedCurve == this).ToList();
		public IfcDimensionCurve() : base()
		{
		}
		public IfcDimensionCurve(IfcRepresentationItem? Item, List<IfcPresentationStyleAssignment>? Styles, IfcLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name
			};
		}
		public virtual List<Global.IfcTerminatorSymbol>? _AnnotatedBySymbols
		{
			get
			{
				if(AnnotatedBySymbols != null)
				{
					List<Global.IfcTerminatorSymbol>? items = new List<Global.IfcTerminatorSymbol>();
					foreach (IfcTerminatorSymbol item in AnnotatedBySymbols)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionCurveDirectedCallout
	/// SUPERTYPE OF (ONEOF
	/// (IfcAngularDimension
	/// ,IfcDiameterDimension
	/// ,IfcLinearDimension
	/// ,IfcRadiusDimension))
	/// SUBTYPE OF (IfcDraughtingCallout);
	/// WHERE
	/// WR41 : SIZEOF(QUERY (Dc <* SELF\IfcDraughtingCallout.Contents | (
	/// 'IFC2X3.IFCDIMENSIONCURVE' IN TYPEOF(Dc))))
	/// = 1;
	/// WR42 : SIZEOF (QUERY (Dc <* SELF.contents |
	/// ('IFC2X3.IFCPROJECTIONCURVE' IN
	/// TYPEOF (Dc)))) <= 2;
	/// END_ENTITY;
	/// <summary>
	public class IfcDimensionCurveDirectedCallout : IfcDraughtingCallout, Global.IfcDimensionCurveDirectedCallout
	{
		public IfcDimensionCurveDirectedCallout() : base()
		{
		}
		public IfcDimensionCurveDirectedCallout(List<IfcDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Contents
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionCurveTerminator
	/// SUBTYPE OF (IfcTerminatorSymbol);
	/// Role : IfcDimensionExtentUsage;
	/// WHERE
	/// WR61 : 'IFC2X3.IFCDIMENSIONCURVE' IN TYPEOF
	/// (SELF\IfcTerminatorSymbol.AnnotatedCurve);
	/// END_ENTITY;
	/// <summary>
	public class IfcDimensionCurveTerminator : IfcTerminatorSymbol, Global.IfcDimensionCurveTerminator
	{
		public virtual IfcDimensionExtentUsage? Role { get; set; }
		public IfcDimensionCurveTerminator() : base()
		{
		}
		public IfcDimensionCurveTerminator(IfcRepresentationItem? Item, List<IfcPresentationStyleAssignment>? Styles, IfcLabel? Name, IfcAnnotationCurveOccurrence? AnnotatedCurve, IfcDimensionExtentUsage? Role) : base (Item, Styles, Name, AnnotatedCurve)
		{
			this.Role = Role;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name,
				AnnotatedCurve,
				Role
			};
		}
		public virtual Global.IfcDimensionExtentUsage? _Role { get { return Role; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDimensionPair
	/// SUBTYPE OF (IfcDraughtingCalloutRelationship);
	/// WHERE
	/// WR11 : SELF.Name IN ['chained','parallel'];
	/// WR12 : SIZEOF(TYPEOF(SELF.RelatingDraughtingCallout) * [
	/// 'IFC2X3.IFCANGULARDIMENSION',
	/// 'IFC2X3.IFCDIAMETERDIMENSION',
	/// 'IFC2X3.IFCLINEARDIMENSION',
	/// 'IFC2X3.IFCRADIUSDIMENSION']) = 1;
	/// WR13 : SIZEOF(TYPEOF(SELF.RelatedDraughtingCallout) * [
	/// 'IFC2X3.IFCANGULARDIMENSION',
	/// 'IFC2X3.IFCDIAMETERDIMENSION',
	/// 'IFC2X3.IFCLINEARDIMENSION',
	/// 'IFC2X3.IFCRADIUSDIMENSION']) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcDimensionPair : IfcDraughtingCalloutRelationship, Global.IfcDimensionPair
	{
		public IfcDimensionPair() : base()
		{
		}
		public IfcDimensionPair(IfcLabel? Name, IfcText? Description, IfcDraughtingCallout? RelatingDraughtingCallout, IfcDraughtingCallout? RelatedDraughtingCallout) : base (Name, Description, RelatingDraughtingCallout, RelatedDraughtingCallout)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingDraughtingCallout,
				RelatedDraughtingCallout
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionalExponents;
	/// LengthExponent : INTEGER;
	/// MassExponent : INTEGER;
	/// TimeExponent : INTEGER;
	/// ElectricCurrentExponent : INTEGER;
	/// ThermodynamicTemperatureExponent : INTEGER;
	/// AmountOfSubstanceExponent : INTEGER;
	/// LuminousIntensityExponent : INTEGER;
	/// END_ENTITY;
	/// <summary>
	public class IfcDimensionalExponents : Ifc_Entity, Global.IfcDimensionalExponents
	{
		public virtual INTEGER? LengthExponent { get; set; }
		public virtual INTEGER? MassExponent { get; set; }
		public virtual INTEGER? TimeExponent { get; set; }
		public virtual INTEGER? ElectricCurrentExponent { get; set; }
		public virtual INTEGER? ThermodynamicTemperatureExponent { get; set; }
		public virtual INTEGER? AmountOfSubstanceExponent { get; set; }
		public virtual INTEGER? LuminousIntensityExponent { get; set; }
		public IfcDimensionalExponents() : base()
		{
		}
		public IfcDimensionalExponents(INTEGER? LengthExponent, INTEGER? MassExponent, INTEGER? TimeExponent, INTEGER? ElectricCurrentExponent, INTEGER? ThermodynamicTemperatureExponent, INTEGER? AmountOfSubstanceExponent, INTEGER? LuminousIntensityExponent) : base ()
		{
			this.LengthExponent = LengthExponent;
			this.MassExponent = MassExponent;
			this.TimeExponent = TimeExponent;
			this.ElectricCurrentExponent = ElectricCurrentExponent;
			this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
			this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
			this.LuminousIntensityExponent = LuminousIntensityExponent;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				LengthExponent,
				MassExponent,
				TimeExponent,
				ElectricCurrentExponent,
				ThermodynamicTemperatureExponent,
				AmountOfSubstanceExponent,
				LuminousIntensityExponent
			};
		}
		public virtual INTEGER? _LengthExponent { get { return LengthExponent; } set { } }
		public virtual INTEGER? _MassExponent { get { return MassExponent; } set { } }
		public virtual INTEGER? _TimeExponent { get { return TimeExponent; } set { } }
		public virtual INTEGER? _ElectricCurrentExponent { get { return ElectricCurrentExponent; } set { } }
		public virtual INTEGER? _ThermodynamicTemperatureExponent { get { return ThermodynamicTemperatureExponent; } set { } }
		public virtual INTEGER? _AmountOfSubstanceExponent { get { return AmountOfSubstanceExponent; } set { } }
		public virtual INTEGER? _LuminousIntensityExponent { get { return LuminousIntensityExponent; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDirection
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// DirectionRatios : LIST [2:3] OF REAL;
	/// DERIVE
	/// Dim : IfcDimensionCount := HIINDEX(DirectionRatios);
	/// END_ENTITY;
	/// <summary>
	public class IfcDirection : IfcGeometricRepresentationItem, IfcOrientationSelect, IfcVectorOrDirection, Global.IfcDirection
	{
		public virtual List<REAL>? DirectionRatios { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcDirection() : base()
		{
		}
		public IfcDirection(List<REAL>? DirectionRatios) : base ()
		{
			this.DirectionRatios = DirectionRatios;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				DirectionRatios
			};
		}
		public virtual List<REAL>? _DirectionRatios
		{
			get
			{
				if(DirectionRatios != null)
				{
					List<REAL>? items = new List<REAL>();
					foreach (REAL item in DirectionRatios)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDiscreteAccessory
	/// SUBTYPE OF (IfcElementComponent);
	/// END_ENTITY;
	/// <summary>
	public class IfcDiscreteAccessory : IfcElementComponent, Global.IfcDiscreteAccessory
	{
		public IfcDiscreteAccessory() : base()
		{
		}
		public IfcDiscreteAccessory(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDiscreteAccessoryType
	/// SUPERTYPE OF (ONEOF
	/// (IfcVibrationIsolatorType))
	/// SUBTYPE OF (IfcElementComponentType);
	/// END_ENTITY;
	/// <summary>
	public class IfcDiscreteAccessoryType : IfcElementComponentType, Global.IfcDiscreteAccessoryType
	{
		public IfcDiscreteAccessoryType() : base()
		{
		}
		public IfcDiscreteAccessoryType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionChamberElement
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionChamberElement : IfcDistributionFlowElement, Global.IfcDistributionChamberElement
	{
		public IfcDistributionChamberElement() : base()
		{
		}
		public IfcDistributionChamberElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionChamberElementType
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// PredefinedType : IfcDistributionChamberElementTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionChamberElementType : IfcDistributionFlowElementType, Global.IfcDistributionChamberElementType
	{
		public virtual IfcDistributionChamberElementTypeEnum? PredefinedType { get; set; }
		public IfcDistributionChamberElementType() : base()
		{
		}
		public IfcDistributionChamberElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDistributionChamberElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcDistributionChamberElementTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDistributionControlElement
	/// SUBTYPE OF (IfcDistributionElement);
	/// ControlElementId : OPTIONAL IfcIdentifier;
	/// INVERSE
	/// AssignedToFlowElement : SET [0:1] OF IfcRelFlowControlElements FOR RelatedControlElements;
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionControlElement : IfcDistributionElement, Global.IfcDistributionControlElement
	{
		public virtual IfcIdentifier? ControlElementId { get; set; }
		public List<IfcRelFlowControlElements>? AssignedToFlowElement => Model?.GetItems<IfcRelFlowControlElements>().Where(x => x.RelatedControlElements != null && x.RelatedControlElements.Contains(this)).ToList();
		public IfcDistributionControlElement() : base()
		{
		}
		public IfcDistributionControlElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcIdentifier? ControlElementId) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.ControlElementId = ControlElementId;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				ControlElementId
			};
		}
		public virtual Global.IfcIdentifier? _ControlElementId { get { return ControlElementId; } set { } }
		public virtual List<Global.IfcRelFlowControlElements>? _AssignedToFlowElement
		{
			get
			{
				if(AssignedToFlowElement != null)
				{
					List<Global.IfcRelFlowControlElements>? items = new List<Global.IfcRelFlowControlElements>();
					foreach (IfcRelFlowControlElements item in AssignedToFlowElement)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionControlElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcActuatorType
	/// ,IfcAlarmType
	/// ,IfcControllerType
	/// ,IfcFlowInstrumentType
	/// ,IfcSensorType))
	/// SUBTYPE OF (IfcDistributionElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcDistributionControlElementType : IfcDistributionElementType, Global.IfcDistributionControlElementType
	{
		public IfcDistributionControlElementType() : base()
		{
		}
		public IfcDistributionControlElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionElement
	/// SUPERTYPE OF (ONEOF
	/// (IfcDistributionControlElement
	/// ,IfcDistributionFlowElement))
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionElement : IfcElement, Global.IfcDistributionElement
	{
		public IfcDistributionElement() : base()
		{
		}
		public IfcDistributionElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionElementType
	/// SUPERTYPE OF (ONEOF
	/// (IfcDistributionControlElementType
	/// ,IfcDistributionFlowElementType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionElementType : IfcElementType, Global.IfcDistributionElementType
	{
		public IfcDistributionElementType() : base()
		{
		}
		public IfcDistributionElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionFlowElement
	/// SUPERTYPE OF (ONEOF
	/// (IfcDistributionChamberElement
	/// ,IfcEnergyConversionDevice
	/// ,IfcFlowController
	/// ,IfcFlowFitting
	/// ,IfcFlowMovingDevice
	/// ,IfcFlowSegment
	/// ,IfcFlowStorageDevice
	/// ,IfcFlowTerminal
	/// ,IfcFlowTreatmentDevice))
	/// SUBTYPE OF (IfcDistributionElement);
	/// INVERSE
	/// HasControlElements : SET [0:1] OF IfcRelFlowControlElements FOR RelatingFlowElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionFlowElement : IfcDistributionElement, Global.IfcDistributionFlowElement
	{
		public List<IfcRelFlowControlElements>? HasControlElements => Model?.GetItems<IfcRelFlowControlElements>().Where(x => x.RelatingFlowElement != null && x.RelatingFlowElement == this).ToList();
		public IfcDistributionFlowElement() : base()
		{
		}
		public IfcDistributionFlowElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
		public virtual List<Global.IfcRelFlowControlElements>? _HasControlElements
		{
			get
			{
				if(HasControlElements != null)
				{
					List<Global.IfcRelFlowControlElements>? items = new List<Global.IfcRelFlowControlElements>();
					foreach (IfcRelFlowControlElements item in HasControlElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionFlowElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDistributionChamberElementType
	/// ,IfcEnergyConversionDeviceType
	/// ,IfcFlowControllerType
	/// ,IfcFlowFittingType
	/// ,IfcFlowMovingDeviceType
	/// ,IfcFlowSegmentType
	/// ,IfcFlowStorageDeviceType
	/// ,IfcFlowTerminalType
	/// ,IfcFlowTreatmentDeviceType))
	/// SUBTYPE OF (IfcDistributionElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcDistributionFlowElementType : IfcDistributionElementType, Global.IfcDistributionFlowElementType
	{
		public IfcDistributionFlowElementType() : base()
		{
		}
		public IfcDistributionFlowElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionPort
	/// SUBTYPE OF (IfcPort);
	/// FlowDirection : OPTIONAL IfcFlowDirectionEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcDistributionPort : IfcPort, Global.IfcDistributionPort
	{
		public virtual IfcFlowDirectionEnum? FlowDirection { get; set; }
		public IfcDistributionPort() : base()
		{
		}
		public IfcDistributionPort(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcFlowDirectionEnum? FlowDirection) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.FlowDirection = FlowDirection;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				FlowDirection
			};
		}
		public virtual Global.IfcFlowDirectionEnum? _FlowDirection { get { return FlowDirection; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDocumentElectronicFormat;
	/// FileExtension : OPTIONAL IfcLabel;
	/// MimeContentType : OPTIONAL IfcLabel;
	/// MimeSubtype : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS(FileExtension) OR EXISTS(MimeContentType);
	/// END_ENTITY;
	/// <summary>
	public class IfcDocumentElectronicFormat : Ifc_Entity, Global.IfcDocumentElectronicFormat
	{
		public virtual IfcLabel? FileExtension { get; set; }
		public virtual IfcLabel? MimeContentType { get; set; }
		public virtual IfcLabel? MimeSubtype { get; set; }
		public IfcDocumentElectronicFormat() : base()
		{
		}
		public IfcDocumentElectronicFormat(IfcLabel? FileExtension, IfcLabel? MimeContentType, IfcLabel? MimeSubtype) : base ()
		{
			this.FileExtension = FileExtension;
			this.MimeContentType = MimeContentType;
			this.MimeSubtype = MimeSubtype;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				FileExtension,
				MimeContentType,
				MimeSubtype
			};
		}
		public virtual Global.IfcLabel? _FileExtension { get { return FileExtension; } set { } }
		public virtual Global.IfcLabel? _MimeContentType { get { return MimeContentType; } set { } }
		public virtual Global.IfcLabel? _MimeSubtype { get { return MimeSubtype; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDocumentInformation;
	/// DocumentId : IfcIdentifier;
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// DocumentReferences : OPTIONAL SET [1:?] OF IfcDocumentReference;
	/// Purpose : OPTIONAL IfcText;
	/// IntendedUse : OPTIONAL IfcText;
	/// Scope : OPTIONAL IfcText;
	/// Revision : OPTIONAL IfcLabel;
	/// DocumentOwner : OPTIONAL IfcActorSelect;
	/// Editors : OPTIONAL SET [1:?] OF IfcActorSelect;
	/// CreationTime : OPTIONAL IfcDateAndTime;
	/// LastRevisionTime : OPTIONAL IfcDateAndTime;
	/// ElectronicFormat : OPTIONAL IfcDocumentElectronicFormat;
	/// ValidFrom : OPTIONAL IfcCalendarDate;
	/// ValidUntil : OPTIONAL IfcCalendarDate;
	/// Confidentiality : OPTIONAL IfcDocumentConfidentialityEnum;
	/// Status : OPTIONAL IfcDocumentStatusEnum;
	/// INVERSE
	/// IsPointedTo : SET [0:?] OF IfcDocumentInformationRelationship FOR RelatedDocuments;
	/// IsPointer : SET [0:1] OF IfcDocumentInformationRelationship FOR RelatingDocument;
	/// END_ENTITY;
	/// <summary>
	public class IfcDocumentInformation : Ifc_Entity, IfcDocumentSelect, Global.IfcDocumentInformation
	{
		public virtual IfcIdentifier? DocumentId { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual List<IfcDocumentReference>? DocumentReferences { get; set; }
		public virtual IfcText? Purpose { get; set; }
		public virtual IfcText? IntendedUse { get; set; }
		public virtual IfcText? Scope { get; set; }
		public virtual IfcLabel? Revision { get; set; }
		public virtual IfcActorSelect? DocumentOwner { get; set; }
		public virtual List<IfcActorSelect>? Editors { get; set; }
		public virtual IfcDateAndTime? CreationTime { get; set; }
		public virtual IfcDateAndTime? LastRevisionTime { get; set; }
		public virtual IfcDocumentElectronicFormat? ElectronicFormat { get; set; }
		public virtual IfcCalendarDate? ValidFrom { get; set; }
		public virtual IfcCalendarDate? ValidUntil { get; set; }
		public virtual IfcDocumentConfidentialityEnum? Confidentiality { get; set; }
		public virtual IfcDocumentStatusEnum? Status { get; set; }
		public List<IfcDocumentInformationRelationship>? IsPointedTo => Model?.GetItems<IfcDocumentInformationRelationship>().Where(x => x.RelatedDocuments != null && x.RelatedDocuments.Contains(this)).ToList();
		public List<IfcDocumentInformationRelationship>? IsPointer => Model?.GetItems<IfcDocumentInformationRelationship>().Where(x => x.RelatingDocument != null && x.RelatingDocument == this).ToList();
		public IfcDocumentInformation() : base()
		{
		}
		public IfcDocumentInformation(IfcIdentifier? DocumentId, IfcLabel? Name, IfcText? Description, List<IfcDocumentReference>? DocumentReferences, IfcText? Purpose, IfcText? IntendedUse, IfcText? Scope, IfcLabel? Revision, IfcActorSelect? DocumentOwner, List<IfcActorSelect>? Editors, IfcDateAndTime? CreationTime, IfcDateAndTime? LastRevisionTime, IfcDocumentElectronicFormat? ElectronicFormat, IfcCalendarDate? ValidFrom, IfcCalendarDate? ValidUntil, IfcDocumentConfidentialityEnum? Confidentiality, IfcDocumentStatusEnum? Status) : base ()
		{
			this.DocumentId = DocumentId;
			this.Name = Name;
			this.Description = Description;
			this.DocumentReferences = DocumentReferences;
			this.Purpose = Purpose;
			this.IntendedUse = IntendedUse;
			this.Scope = Scope;
			this.Revision = Revision;
			this.DocumentOwner = DocumentOwner;
			this.Editors = Editors;
			this.CreationTime = CreationTime;
			this.LastRevisionTime = LastRevisionTime;
			this.ElectronicFormat = ElectronicFormat;
			this.ValidFrom = ValidFrom;
			this.ValidUntil = ValidUntil;
			this.Confidentiality = Confidentiality;
			this.Status = Status;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				DocumentId,
				Name,
				Description,
				DocumentReferences,
				Purpose,
				IntendedUse,
				Scope,
				Revision,
				DocumentOwner,
				Editors,
				CreationTime,
				LastRevisionTime,
				ElectronicFormat,
				ValidFrom,
				ValidUntil,
				Confidentiality,
				Status
			};
		}
		public virtual Global.IfcIdentifier? _DocumentId { get { return DocumentId; } set { } }
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual List<Global.IfcDocumentReference>? _DocumentReferences
		{
			get
			{
				if(DocumentReferences != null)
				{
					List<Global.IfcDocumentReference>? items = new List<Global.IfcDocumentReference>();
					foreach (IfcDocumentReference item in DocumentReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcText? _Purpose { get { return Purpose; } set { } }
		public virtual Global.IfcText? _IntendedUse { get { return IntendedUse; } set { } }
		public virtual Global.IfcText? _Scope { get { return Scope; } set { } }
		public virtual Global.IfcLabel? _Revision { get { return Revision; } set { } }
		public virtual Global.IfcActorSelect? _DocumentOwner { get { return DocumentOwner; } set { } }
		public virtual List<Global.IfcActorSelect>? _Editors
		{
			get
			{
				if(Editors != null)
				{
					List<Global.IfcActorSelect>? items = new List<Global.IfcActorSelect>();
					foreach (IfcActorSelect item in Editors)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcDateAndTime? _CreationTime { get { return CreationTime; } set { } }
		public virtual Global.IfcDateAndTime? _LastRevisionTime { get { return LastRevisionTime; } set { } }
		public virtual Global.IfcDocumentElectronicFormat? _ElectronicFormat { get { return ElectronicFormat; } set { } }
		public virtual Global.IfcCalendarDate? _ValidFrom { get { return ValidFrom; } set { } }
		public virtual Global.IfcCalendarDate? _ValidUntil { get { return ValidUntil; } set { } }
		public virtual Global.IfcDocumentConfidentialityEnum? _Confidentiality { get { return Confidentiality; } set { } }
		public virtual Global.IfcDocumentStatusEnum? _Status { get { return Status; } set { } }
		public virtual List<Global.IfcDocumentInformationRelationship>? _IsPointedTo
		{
			get
			{
				if(IsPointedTo != null)
				{
					List<Global.IfcDocumentInformationRelationship>? items = new List<Global.IfcDocumentInformationRelationship>();
					foreach (IfcDocumentInformationRelationship item in IsPointedTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcDocumentInformationRelationship>? _IsPointer
		{
			get
			{
				if(IsPointer != null)
				{
					List<Global.IfcDocumentInformationRelationship>? items = new List<Global.IfcDocumentInformationRelationship>();
					foreach (IfcDocumentInformationRelationship item in IsPointer)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDocumentInformationRelationship;
	/// RelatingDocument : IfcDocumentInformation;
	/// RelatedDocuments : SET [1:?] OF IfcDocumentInformation;
	/// RelationshipType : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcDocumentInformationRelationship : Ifc_Entity, Global.IfcDocumentInformationRelationship
	{
		public virtual IfcDocumentInformation? RelatingDocument { get; set; }
		public virtual List<IfcDocumentInformation>? RelatedDocuments { get; set; }
		public virtual IfcLabel? RelationshipType { get; set; }
		public IfcDocumentInformationRelationship() : base()
		{
		}
		public IfcDocumentInformationRelationship(IfcDocumentInformation? RelatingDocument, List<IfcDocumentInformation>? RelatedDocuments, IfcLabel? RelationshipType) : base ()
		{
			this.RelatingDocument = RelatingDocument;
			this.RelatedDocuments = RelatedDocuments;
			this.RelationshipType = RelationshipType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RelatingDocument,
				RelatedDocuments,
				RelationshipType
			};
		}
		public virtual Global.IfcDocumentInformation? _RelatingDocument { get { return RelatingDocument; } set { } }
		public virtual List<Global.IfcDocumentInformation>? _RelatedDocuments
		{
			get
			{
				if(RelatedDocuments != null)
				{
					List<Global.IfcDocumentInformation>? items = new List<Global.IfcDocumentInformation>();
					foreach (IfcDocumentInformation item in RelatedDocuments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _RelationshipType { get { return RelationshipType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDocumentReference
	/// SUBTYPE OF (IfcExternalReference);
	/// INVERSE
	/// ReferenceToDocument : SET [0:1] OF IfcDocumentInformation FOR DocumentReferences;
	/// WHERE
	/// WR1 : EXISTS(Name) XOR EXISTS(ReferenceToDocument[1]);
	/// END_ENTITY;
	/// <summary>
	public class IfcDocumentReference : IfcExternalReference, IfcDocumentSelect, Global.IfcDocumentReference
	{
		public List<IfcDocumentInformation>? ReferenceToDocument => Model?.GetItems<IfcDocumentInformation>().Where(x => x.DocumentReferences != null && x.DocumentReferences.Contains(this)).ToList();
		public IfcDocumentReference() : base()
		{
		}
		public IfcDocumentReference(IfcLabel? Location, IfcIdentifier? ItemReference, IfcLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				ItemReference,
				Name
			};
		}
		public virtual List<Global.IfcDocumentInformation>? _ReferenceToDocument
		{
			get
			{
				if(ReferenceToDocument != null)
				{
					List<Global.IfcDocumentInformation>? items = new List<Global.IfcDocumentInformation>();
					foreach (IfcDocumentInformation item in ReferenceToDocument)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDoor
	/// SUBTYPE OF (IfcBuildingElement);
	/// OverallHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// OverallWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcDoor : IfcBuildingElement, Global.IfcDoor
	{
		public virtual IfcPositiveLengthMeasure? OverallHeight { get; set; }
		public virtual IfcPositiveLengthMeasure? OverallWidth { get; set; }
		public IfcDoor() : base()
		{
		}
		public IfcDoor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPositiveLengthMeasure? OverallHeight, IfcPositiveLengthMeasure? OverallWidth) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				OverallHeight,
				OverallWidth
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallHeight { get { return OverallHeight; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _OverallWidth { get { return OverallWidth; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDoorLiningProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// LiningDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// LiningThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// ThresholdDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// ThresholdThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// TransomThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// TransomOffset : OPTIONAL IfcLengthMeasure;
	/// LiningOffset : OPTIONAL IfcLengthMeasure;
	/// ThresholdOffset : OPTIONAL IfcLengthMeasure;
	/// CasingThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// CasingDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// WHERE
	/// WR31 : NOT(NOT(EXISTS(LiningDepth)) AND EXISTS(LiningThickness));
	/// WR32 : NOT(NOT(EXISTS(ThresholdDepth)) AND EXISTS(ThresholdThickness));
	/// WR33 : (EXISTS(TransomOffset) AND EXISTS(TransomThickness)) XOR
	/// (NOT(EXISTS(TransomOffset)) AND NOT(EXISTS(TransomThickness)));
	/// WR34 : (EXISTS(CasingDepth) AND EXISTS(CasingThickness)) XOR
	/// (NOT(EXISTS(CasingDepth)) AND NOT(EXISTS(CasingThickness)));
	/// WR35 : EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]) AND
	/// ('IFC2X3.IFCDOORSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]));
	/// END_ENTITY;
	/// <summary>
	public class IfcDoorLiningProperties : IfcPropertySetDefinition, Global.IfcDoorLiningProperties
	{
		public virtual IfcPositiveLengthMeasure? LiningDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? LiningThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? ThresholdDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? ThresholdThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? TransomThickness { get; set; }
		public virtual IfcLengthMeasure? TransomOffset { get; set; }
		public virtual IfcLengthMeasure? LiningOffset { get; set; }
		public virtual IfcLengthMeasure? ThresholdOffset { get; set; }
		public virtual IfcPositiveLengthMeasure? CasingThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? CasingDepth { get; set; }
		public virtual IfcShapeAspect? ShapeAspectStyle { get; set; }
		public IfcDoorLiningProperties() : base()
		{
		}
		public IfcDoorLiningProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPositiveLengthMeasure? LiningDepth, IfcPositiveLengthMeasure? LiningThickness, IfcPositiveLengthMeasure? ThresholdDepth, IfcPositiveLengthMeasure? ThresholdThickness, IfcPositiveLengthMeasure? TransomThickness, IfcLengthMeasure? TransomOffset, IfcLengthMeasure? LiningOffset, IfcLengthMeasure? ThresholdOffset, IfcPositiveLengthMeasure? CasingThickness, IfcPositiveLengthMeasure? CasingDepth, IfcShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.ThresholdDepth = ThresholdDepth;
			this.ThresholdThickness = ThresholdThickness;
			this.TransomThickness = TransomThickness;
			this.TransomOffset = TransomOffset;
			this.LiningOffset = LiningOffset;
			this.ThresholdOffset = ThresholdOffset;
			this.CasingThickness = CasingThickness;
			this.CasingDepth = CasingDepth;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				LiningDepth,
				LiningThickness,
				ThresholdDepth,
				ThresholdThickness,
				TransomThickness,
				TransomOffset,
				LiningOffset,
				ThresholdOffset,
				CasingThickness,
				CasingDepth,
				ShapeAspectStyle
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _LiningDepth { get { return LiningDepth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _LiningThickness { get { return LiningThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _ThresholdDepth { get { return ThresholdDepth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _ThresholdThickness { get { return ThresholdThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _TransomThickness { get { return TransomThickness; } set { } }
		public virtual Global.IfcLengthMeasure? _TransomOffset { get { return TransomOffset; } set { } }
		public virtual Global.IfcLengthMeasure? _LiningOffset { get { return LiningOffset; } set { } }
		public virtual Global.IfcLengthMeasure? _ThresholdOffset { get { return ThresholdOffset; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _CasingThickness { get { return CasingThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _CasingDepth { get { return CasingDepth; } set { } }
		public virtual Global.IfcShapeAspect? _ShapeAspectStyle { get { return ShapeAspectStyle; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDoorPanelProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// PanelDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// PanelOperation : IfcDoorPanelOperationEnum;
	/// PanelWidth : OPTIONAL IfcNormalisedRatioMeasure;
	/// PanelPosition : IfcDoorPanelPositionEnum;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// WHERE
	/// WR31 : EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]) AND
	/// ('IFC2X3.IFCDOORSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]));
	/// END_ENTITY;
	/// <summary>
	public class IfcDoorPanelProperties : IfcPropertySetDefinition, Global.IfcDoorPanelProperties
	{
		public virtual IfcPositiveLengthMeasure? PanelDepth { get; set; }
		public virtual IfcDoorPanelOperationEnum? PanelOperation { get; set; }
		public virtual IfcNormalisedRatioMeasure? PanelWidth { get; set; }
		public virtual IfcDoorPanelPositionEnum? PanelPosition { get; set; }
		public virtual IfcShapeAspect? ShapeAspectStyle { get; set; }
		public IfcDoorPanelProperties() : base()
		{
		}
		public IfcDoorPanelProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPositiveLengthMeasure? PanelDepth, IfcDoorPanelOperationEnum? PanelOperation, IfcNormalisedRatioMeasure? PanelWidth, IfcDoorPanelPositionEnum? PanelPosition, IfcShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.PanelDepth = PanelDepth;
			this.PanelOperation = PanelOperation;
			this.PanelWidth = PanelWidth;
			this.PanelPosition = PanelPosition;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				PanelDepth,
				PanelOperation,
				PanelWidth,
				PanelPosition,
				ShapeAspectStyle
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _PanelDepth { get { return PanelDepth; } set { } }
		public virtual Global.IfcDoorPanelOperationEnum? _PanelOperation { get { return PanelOperation; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _PanelWidth { get { return PanelWidth; } set { } }
		public virtual Global.IfcDoorPanelPositionEnum? _PanelPosition { get { return PanelPosition; } set { } }
		public virtual Global.IfcShapeAspect? _ShapeAspectStyle { get { return ShapeAspectStyle; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDoorStyle
	/// SUBTYPE OF (IfcTypeProduct);
	/// OperationType : IfcDoorStyleOperationEnum;
	/// ConstructionType : IfcDoorStyleConstructionEnum;
	/// ParameterTakesPrecedence : BOOLEAN;
	/// Sizeable : BOOLEAN;
	/// END_ENTITY;
	/// <summary>
	public class IfcDoorStyle : IfcTypeProduct, Global.IfcDoorStyle
	{
		public virtual IfcDoorStyleOperationEnum? OperationType { get; set; }
		public virtual IfcDoorStyleConstructionEnum? ConstructionType { get; set; }
		public virtual BOOLEAN? ParameterTakesPrecedence { get; set; }
		public virtual BOOLEAN? Sizeable { get; set; }
		public IfcDoorStyle() : base()
		{
		}
		public IfcDoorStyle(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcDoorStyleOperationEnum? OperationType, IfcDoorStyleConstructionEnum? ConstructionType, BOOLEAN? ParameterTakesPrecedence, BOOLEAN? Sizeable) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag)
		{
			this.OperationType = OperationType;
			this.ConstructionType = ConstructionType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				OperationType,
				ConstructionType,
				ParameterTakesPrecedence,
				Sizeable
			};
		}
		public virtual Global.IfcDoorStyleOperationEnum? _OperationType { get { return OperationType; } set { } }
		public virtual Global.IfcDoorStyleConstructionEnum? _ConstructionType { get { return ConstructionType; } set { } }
		public virtual BOOLEAN? _ParameterTakesPrecedence { get { return ParameterTakesPrecedence; } set { } }
		public virtual BOOLEAN? _Sizeable { get { return Sizeable; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDraughtingCallout
	/// SUPERTYPE OF (ONEOF
	/// (IfcDimensionCurveDirectedCallout
	/// ,IfcStructuredDimensionCallout))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Contents : SET [1:?] OF IfcDraughtingCalloutElement;
	/// INVERSE
	/// IsRelatedFromCallout : SET [0:?] OF IfcDraughtingCalloutRelationship FOR RelatedDraughtingCallout;
	/// IsRelatedToCallout : SET [0:?] OF IfcDraughtingCalloutRelationship FOR RelatingDraughtingCallout;
	/// END_ENTITY;
	/// <summary>
	public class IfcDraughtingCallout : IfcGeometricRepresentationItem, Global.IfcDraughtingCallout
	{
		public virtual List<IfcDraughtingCalloutElement>? Contents { get; set; }
		public List<IfcDraughtingCalloutRelationship>? IsRelatedFromCallout => Model?.GetItems<IfcDraughtingCalloutRelationship>().Where(x => x.RelatedDraughtingCallout != null && x.RelatedDraughtingCallout == this).ToList();
		public List<IfcDraughtingCalloutRelationship>? IsRelatedToCallout => Model?.GetItems<IfcDraughtingCalloutRelationship>().Where(x => x.RelatingDraughtingCallout != null && x.RelatingDraughtingCallout == this).ToList();
		public IfcDraughtingCallout() : base()
		{
		}
		public IfcDraughtingCallout(List<IfcDraughtingCalloutElement>? Contents) : base ()
		{
			this.Contents = Contents;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Contents
			};
		}
		public virtual List<Global.IfcDraughtingCalloutElement>? _Contents
		{
			get
			{
				if(Contents != null)
				{
					List<Global.IfcDraughtingCalloutElement>? items = new List<Global.IfcDraughtingCalloutElement>();
					foreach (IfcDraughtingCalloutElement item in Contents)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcDraughtingCalloutRelationship>? _IsRelatedFromCallout
		{
			get
			{
				if(IsRelatedFromCallout != null)
				{
					List<Global.IfcDraughtingCalloutRelationship>? items = new List<Global.IfcDraughtingCalloutRelationship>();
					foreach (IfcDraughtingCalloutRelationship item in IsRelatedFromCallout)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcDraughtingCalloutRelationship>? _IsRelatedToCallout
		{
			get
			{
				if(IsRelatedToCallout != null)
				{
					List<Global.IfcDraughtingCalloutRelationship>? items = new List<Global.IfcDraughtingCalloutRelationship>();
					foreach (IfcDraughtingCalloutRelationship item in IsRelatedToCallout)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDraughtingCalloutRelationship
	/// SUPERTYPE OF (ONEOF
	/// (IfcDimensionCalloutRelationship
	/// ,IfcDimensionPair));
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// RelatingDraughtingCallout : IfcDraughtingCallout;
	/// RelatedDraughtingCallout : IfcDraughtingCallout;
	/// END_ENTITY;
	/// <summary>
	public class IfcDraughtingCalloutRelationship : Ifc_Entity, Global.IfcDraughtingCalloutRelationship
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcDraughtingCallout? RelatingDraughtingCallout { get; set; }
		public virtual IfcDraughtingCallout? RelatedDraughtingCallout { get; set; }
		public IfcDraughtingCalloutRelationship() : base()
		{
		}
		public IfcDraughtingCalloutRelationship(IfcLabel? Name, IfcText? Description, IfcDraughtingCallout? RelatingDraughtingCallout, IfcDraughtingCallout? RelatedDraughtingCallout) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingDraughtingCallout = RelatingDraughtingCallout;
			this.RelatedDraughtingCallout = RelatedDraughtingCallout;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingDraughtingCallout,
				RelatedDraughtingCallout
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcDraughtingCallout? _RelatingDraughtingCallout { get { return RelatingDraughtingCallout; } set { } }
		public virtual Global.IfcDraughtingCallout? _RelatedDraughtingCallout { get { return RelatedDraughtingCallout; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDraughtingPreDefinedColour
	/// SUBTYPE OF (IfcPreDefinedColour);
	/// WHERE
	/// WR31 : SELF\IfcPreDefinedItem.Name IN ['black','red','green','blue','yellow',
	/// 'magenta','cyan','white','by layer'];
	/// END_ENTITY;
	/// <summary>
	public class IfcDraughtingPreDefinedColour : IfcPreDefinedColour, Global.IfcDraughtingPreDefinedColour
	{
		public IfcDraughtingPreDefinedColour() : base()
		{
		}
		public IfcDraughtingPreDefinedColour(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDraughtingPreDefinedCurveFont
	/// SUBTYPE OF (IfcPreDefinedCurveFont);
	/// WHERE
	/// WR31 : SELF\IfcPredefinedItem.Name IN
	/// ['continuous',
	/// 'chain',
	/// 'chain double dash',
	/// 'dashed',
	/// 'dotted',
	/// 'by layer'];
	/// END_ENTITY;
	/// <summary>
	public class IfcDraughtingPreDefinedCurveFont : IfcPreDefinedCurveFont, Global.IfcDraughtingPreDefinedCurveFont
	{
		public IfcDraughtingPreDefinedCurveFont() : base()
		{
		}
		public IfcDraughtingPreDefinedCurveFont(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDraughtingPreDefinedTextFont
	/// SUBTYPE OF (IfcPreDefinedTextFont);
	/// WHERE
	/// WR31 : SELF\IfcPreDefinedItem.Name IN ['ISO 3098-1 font A','ISO 3098-1 font B'];
	/// END_ENTITY;
	/// <summary>
	public class IfcDraughtingPreDefinedTextFont : IfcPreDefinedTextFont, Global.IfcDraughtingPreDefinedTextFont
	{
		public IfcDraughtingPreDefinedTextFont() : base()
		{
		}
		public IfcDraughtingPreDefinedTextFont(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDuctFittingType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcDuctFittingTypeEnum;
	/// WHERE
	/// WR2 : (PredefinedType <> IfcDuctFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctFittingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDuctFittingType : IfcFlowFittingType, Global.IfcDuctFittingType
	{
		public virtual IfcDuctFittingTypeEnum? PredefinedType { get; set; }
		public IfcDuctFittingType() : base()
		{
		}
		public IfcDuctFittingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDuctFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcDuctFittingTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDuctSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcDuctSegmentTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcDuctSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctSegmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDuctSegmentType : IfcFlowSegmentType, Global.IfcDuctSegmentType
	{
		public virtual IfcDuctSegmentTypeEnum? PredefinedType { get; set; }
		public IfcDuctSegmentType() : base()
		{
		}
		public IfcDuctSegmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDuctSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcDuctSegmentTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcDuctSilencerType
	/// SUBTYPE OF (IfcFlowTreatmentDeviceType);
	/// PredefinedType : IfcDuctSilencerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcDuctSilencerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctSilencerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcDuctSilencerType : IfcFlowTreatmentDeviceType, Global.IfcDuctSilencerType
	{
		public virtual IfcDuctSilencerTypeEnum? PredefinedType { get; set; }
		public IfcDuctSilencerType() : base()
		{
		}
		public IfcDuctSilencerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcDuctSilencerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcDuctSilencerTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcEdge
	/// SUPERTYPE OF (ONEOF
	/// (IfcEdgeCurve
	/// ,IfcOrientedEdge
	/// ,IfcSubedge))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// EdgeStart : IfcVertex;
	/// EdgeEnd : IfcVertex;
	/// END_ENTITY;
	/// <summary>
	public class IfcEdge : IfcTopologicalRepresentationItem, Global.IfcEdge
	{
		public virtual IfcVertex? EdgeStart { get; set; }
		public virtual IfcVertex? EdgeEnd { get; set; }
		public IfcEdge() : base()
		{
		}
		public IfcEdge(IfcVertex? EdgeStart, IfcVertex? EdgeEnd) : base ()
		{
			this.EdgeStart = EdgeStart;
			this.EdgeEnd = EdgeEnd;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeStart,
				EdgeEnd
			};
		}
		public virtual Global.IfcVertex? _EdgeStart { get { return EdgeStart; } set { } }
		public virtual Global.IfcVertex? _EdgeEnd { get { return EdgeEnd; } set { } }
	}
	/// <summary>
	/// ENTITY IfcEdgeCurve
	/// SUBTYPE OF (IfcEdge);
	/// EdgeGeometry : IfcCurve;
	/// SameSense : BOOLEAN;
	/// END_ENTITY;
	/// <summary>
	public class IfcEdgeCurve : IfcEdge, IfcCurveOrEdgeCurve, Global.IfcEdgeCurve
	{
		public virtual IfcCurve? EdgeGeometry { get; set; }
		public virtual BOOLEAN? SameSense { get; set; }
		public IfcEdgeCurve() : base()
		{
		}
		public IfcEdgeCurve(IfcVertex? EdgeStart, IfcVertex? EdgeEnd, IfcCurve? EdgeGeometry, BOOLEAN? SameSense) : base (EdgeStart, EdgeEnd)
		{
			this.EdgeGeometry = EdgeGeometry;
			this.SameSense = SameSense;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeStart,
				EdgeEnd,
				EdgeGeometry,
				SameSense
			};
		}
		public virtual Global.IfcCurve? _EdgeGeometry { get { return EdgeGeometry; } set { } }
		public virtual BOOLEAN? _SameSense { get { return SameSense; } set { } }
	}
	/// <summary>
	/// ENTITY IfcEdgeFeature
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcChamferEdgeFeature
	/// ,IfcRoundedEdgeFeature))
	/// SUBTYPE OF (IfcFeatureElementSubtraction);
	/// FeatureLength : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcEdgeFeature : IfcFeatureElementSubtraction, Global.IfcEdgeFeature
	{
		public virtual IfcPositiveLengthMeasure? FeatureLength { get; set; }
		public IfcEdgeFeature() : base()
		{
		}
		public IfcEdgeFeature(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPositiveLengthMeasure? FeatureLength) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.FeatureLength = FeatureLength;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				FeatureLength
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _FeatureLength { get { return FeatureLength; } set { } }
	}
	/// <summary>
	/// ENTITY IfcEdgeLoop
	/// SUBTYPE OF (IfcLoop);
	/// EdgeList : LIST [1:?] OF IfcOrientedEdge;
	/// DERIVE
	/// Ne : INTEGER := SIZEOF(EdgeList);
	/// WHERE
	/// WR1 : (EdgeList[1].EdgeStart) :=: (EdgeList[Ne].EdgeEnd);
	/// WR2 : IfcLoopHeadToTail(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IfcEdgeLoop : IfcLoop, Global.IfcEdgeLoop
	{
		public virtual List<IfcOrientedEdge>? EdgeList { get; set; }
		//TODO DERIVE
		public virtual INTEGER? Ne {get {return null;}}
		public IfcEdgeLoop() : base()
		{
		}
		public IfcEdgeLoop(List<IfcOrientedEdge>? EdgeList) : base ()
		{
			this.EdgeList = EdgeList;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeList
			};
		}
		public virtual List<Global.IfcOrientedEdge>? _EdgeList
		{
			get
			{
				if(EdgeList != null)
				{
					List<Global.IfcOrientedEdge>? items = new List<Global.IfcOrientedEdge>();
					foreach (IfcOrientedEdge item in EdgeList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual INTEGER? _Ne { get { return Ne; } set { } }
	}
	/// <summary>
	/// ENTITY IfcElectricApplianceType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcElectricApplianceTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricApplianceType : IfcFlowTerminalType, Global.IfcElectricApplianceType
	{
		public virtual IfcElectricApplianceTypeEnum? PredefinedType { get; set; }
		public IfcElectricApplianceType() : base()
		{
		}
		public IfcElectricApplianceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricApplianceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricApplianceTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcElectricDistributionPoint
	/// SUBTYPE OF (IfcFlowController);
	/// DistributionPointFunction : IfcElectricDistributionPointFunctionEnum;
	/// UserDefinedFunction : OPTIONAL IfcLabel;
	/// WHERE
	/// WR31 : (DistributionPointFunction <> IfcElectricDistributionPointFunctionEnum.USERDEFINED) OR
	/// ((DistributionPointFunction = IfcElectricDistributionPointFunctionEnum.USERDEFINED) AND EXISTS(SELF\IfcElectricDistributionPoint.UserDefinedFunction));
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricDistributionPoint : IfcFlowController, Global.IfcElectricDistributionPoint
	{
		public virtual IfcElectricDistributionPointFunctionEnum? DistributionPointFunction { get; set; }
		public virtual IfcLabel? UserDefinedFunction { get; set; }
		public IfcElectricDistributionPoint() : base()
		{
		}
		public IfcElectricDistributionPoint(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcElectricDistributionPointFunctionEnum? DistributionPointFunction, IfcLabel? UserDefinedFunction) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.DistributionPointFunction = DistributionPointFunction;
			this.UserDefinedFunction = UserDefinedFunction;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				DistributionPointFunction,
				UserDefinedFunction
			};
		}
		public virtual Global.IfcElectricDistributionPointFunctionEnum? _DistributionPointFunction { get { return DistributionPointFunction; } set { } }
		public virtual Global.IfcLabel? _UserDefinedFunction { get { return UserDefinedFunction; } set { } }
	}
	/// <summary>
	/// ENTITY IfcElectricFlowStorageDeviceType
	/// SUBTYPE OF (IfcFlowStorageDeviceType);
	/// PredefinedType : IfcElectricFlowStorageDeviceTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricFlowStorageDeviceType : IfcFlowStorageDeviceType, Global.IfcElectricFlowStorageDeviceType
	{
		public virtual IfcElectricFlowStorageDeviceTypeEnum? PredefinedType { get; set; }
		public IfcElectricFlowStorageDeviceType() : base()
		{
		}
		public IfcElectricFlowStorageDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricFlowStorageDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricFlowStorageDeviceTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcElectricGeneratorType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcElectricGeneratorTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricGeneratorType : IfcEnergyConversionDeviceType, Global.IfcElectricGeneratorType
	{
		public virtual IfcElectricGeneratorTypeEnum? PredefinedType { get; set; }
		public IfcElectricGeneratorType() : base()
		{
		}
		public IfcElectricGeneratorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricGeneratorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricGeneratorTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcElectricHeaterType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcElectricHeaterTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricHeaterType : IfcFlowTerminalType, Global.IfcElectricHeaterType
	{
		public virtual IfcElectricHeaterTypeEnum? PredefinedType { get; set; }
		public IfcElectricHeaterType() : base()
		{
		}
		public IfcElectricHeaterType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricHeaterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricHeaterTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcElectricMotorType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcElectricMotorTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricMotorType : IfcEnergyConversionDeviceType, Global.IfcElectricMotorType
	{
		public virtual IfcElectricMotorTypeEnum? PredefinedType { get; set; }
		public IfcElectricMotorType() : base()
		{
		}
		public IfcElectricMotorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricMotorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricMotorTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcElectricTimeControlType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcElectricTimeControlTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricTimeControlType : IfcFlowControllerType, Global.IfcElectricTimeControlType
	{
		public virtual IfcElectricTimeControlTypeEnum? PredefinedType { get; set; }
		public IfcElectricTimeControlType() : base()
		{
		}
		public IfcElectricTimeControlType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcElectricTimeControlTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcElectricTimeControlTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcElectricalBaseProperties
	/// SUBTYPE OF (IfcEnergyProperties);
	/// ElectricCurrentType : OPTIONAL IfcElectricCurrentEnum;
	/// InputVoltage : IfcElectricVoltageMeasure;
	/// InputFrequency : IfcFrequencyMeasure;
	/// FullLoadCurrent : OPTIONAL IfcElectricCurrentMeasure;
	/// MinimumCircuitCurrent : OPTIONAL IfcElectricCurrentMeasure;
	/// MaximumPowerInput : OPTIONAL IfcPowerMeasure;
	/// RatedPowerInput : OPTIONAL IfcPowerMeasure;
	/// InputPhase : INTEGER;
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricalBaseProperties : IfcEnergyProperties, Global.IfcElectricalBaseProperties
	{
		public virtual IfcElectricCurrentEnum? ElectricCurrentType { get; set; }
		public virtual IfcElectricVoltageMeasure? InputVoltage { get; set; }
		public virtual IfcFrequencyMeasure? InputFrequency { get; set; }
		public virtual IfcElectricCurrentMeasure? FullLoadCurrent { get; set; }
		public virtual IfcElectricCurrentMeasure? MinimumCircuitCurrent { get; set; }
		public virtual IfcPowerMeasure? MaximumPowerInput { get; set; }
		public virtual IfcPowerMeasure? RatedPowerInput { get; set; }
		public virtual INTEGER? InputPhase { get; set; }
		public IfcElectricalBaseProperties() : base()
		{
		}
		public IfcElectricalBaseProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcEnergySequenceEnum? EnergySequence, IfcLabel? UserDefinedEnergySequence, IfcElectricCurrentEnum? ElectricCurrentType, IfcElectricVoltageMeasure? InputVoltage, IfcFrequencyMeasure? InputFrequency, IfcElectricCurrentMeasure? FullLoadCurrent, IfcElectricCurrentMeasure? MinimumCircuitCurrent, IfcPowerMeasure? MaximumPowerInput, IfcPowerMeasure? RatedPowerInput, INTEGER? InputPhase) : base (GlobalId, OwnerHistory, Name, Description, EnergySequence, UserDefinedEnergySequence)
		{
			this.ElectricCurrentType = ElectricCurrentType;
			this.InputVoltage = InputVoltage;
			this.InputFrequency = InputFrequency;
			this.FullLoadCurrent = FullLoadCurrent;
			this.MinimumCircuitCurrent = MinimumCircuitCurrent;
			this.MaximumPowerInput = MaximumPowerInput;
			this.RatedPowerInput = RatedPowerInput;
			this.InputPhase = InputPhase;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				EnergySequence,
				UserDefinedEnergySequence,
				ElectricCurrentType,
				InputVoltage,
				InputFrequency,
				FullLoadCurrent,
				MinimumCircuitCurrent,
				MaximumPowerInput,
				RatedPowerInput,
				InputPhase
			};
		}
		public virtual Global.IfcElectricCurrentEnum? _ElectricCurrentType { get { return ElectricCurrentType; } set { } }
		public virtual Global.IfcElectricVoltageMeasure? _InputVoltage { get { return InputVoltage; } set { } }
		public virtual Global.IfcFrequencyMeasure? _InputFrequency { get { return InputFrequency; } set { } }
		public virtual Global.IfcElectricCurrentMeasure? _FullLoadCurrent { get { return FullLoadCurrent; } set { } }
		public virtual Global.IfcElectricCurrentMeasure? _MinimumCircuitCurrent { get { return MinimumCircuitCurrent; } set { } }
		public virtual Global.IfcPowerMeasure? _MaximumPowerInput { get { return MaximumPowerInput; } set { } }
		public virtual Global.IfcPowerMeasure? _RatedPowerInput { get { return RatedPowerInput; } set { } }
		public virtual INTEGER? _InputPhase { get { return InputPhase; } set { } }
	}
	/// <summary>
	/// ENTITY IfcElectricalCircuit
	/// SUBTYPE OF (IfcSystem);
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricalCircuit : IfcSystem, Global.IfcElectricalCircuit
	{
		public IfcElectricalCircuit() : base()
		{
		}
		public IfcElectricalCircuit(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcElectricalElement
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcElectricalElement : IfcElement, Global.IfcElectricalElement
	{
		public IfcElectricalElement() : base()
		{
		}
		public IfcElectricalElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuildingElement
	/// ,IfcDistributionElement
	/// ,IfcElectricalElement
	/// ,IfcElementAssembly
	/// ,IfcElementComponent
	/// ,IfcEquipmentElement
	/// ,IfcFeatureElement
	/// ,IfcFurnishingElement
	/// ,IfcTransportElement
	/// ,IfcVirtualElement))
	/// SUBTYPE OF (IfcProduct);
	/// Tag : OPTIONAL IfcIdentifier;
	/// INVERSE
	/// HasStructuralMember : SET [0:?] OF IfcRelConnectsStructuralElement FOR RelatingElement;
	/// FillsVoids : SET [0:1] OF IfcRelFillsElement FOR RelatedBuildingElement;
	/// ConnectedTo : SET [0:?] OF IfcRelConnectsElements FOR RelatingElement;
	/// HasCoverings : SET [0:?] OF IfcRelCoversBldgElements FOR RelatingBuildingElement;
	/// HasProjections : SET [0:?] OF IfcRelProjectsElement FOR RelatingElement;
	/// ReferencedInStructures : SET [0:?] OF IfcRelReferencedInSpatialStructure FOR RelatedElements;
	/// HasPorts : SET [0:?] OF IfcRelConnectsPortToElement FOR RelatedElement;
	/// HasOpenings : SET [0:?] OF IfcRelVoidsElement FOR RelatingBuildingElement;
	/// IsConnectionRealization : SET [0:?] OF IfcRelConnectsWithRealizingElements FOR RealizingElements;
	/// ProvidesBoundaries : SET [0:?] OF IfcRelSpaceBoundary FOR RelatedBuildingElement;
	/// ConnectedFrom : SET [0:?] OF IfcRelConnectsElements FOR RelatedElement;
	/// ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcElement : IfcProduct, IfcStructuralActivityAssignmentSelect, Global.IfcElement
	{
		public virtual IfcIdentifier? Tag { get; set; }
		public List<IfcRelConnectsStructuralElement>? HasStructuralMember => Model?.GetItems<IfcRelConnectsStructuralElement>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList();
		public List<IfcRelFillsElement>? FillsVoids => Model?.GetItems<IfcRelFillsElement>().Where(x => x.RelatedBuildingElement != null && x.RelatedBuildingElement == this).ToList();
		public List<IfcRelConnectsElements>? ConnectedTo => Model?.GetItems<IfcRelConnectsElements>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList();
		public List<IfcRelCoversBldgElements>? HasCoverings => Model?.GetItems<IfcRelCoversBldgElements>().Where(x => x.RelatingBuildingElement != null && x.RelatingBuildingElement == this).ToList();
		public List<IfcRelProjectsElement>? HasProjections => Model?.GetItems<IfcRelProjectsElement>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList();
		public List<IfcRelReferencedInSpatialStructure>? ReferencedInStructures => Model?.GetItems<IfcRelReferencedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList();
		public List<IfcRelConnectsPortToElement>? HasPorts => Model?.GetItems<IfcRelConnectsPortToElement>().Where(x => x.RelatedElement != null && x.RelatedElement == this).ToList();
		public List<IfcRelVoidsElement>? HasOpenings => Model?.GetItems<IfcRelVoidsElement>().Where(x => x.RelatingBuildingElement != null && x.RelatingBuildingElement == this).ToList();
		public List<IfcRelConnectsWithRealizingElements>? IsConnectionRealization => Model?.GetItems<IfcRelConnectsWithRealizingElements>().Where(x => x.RealizingElements != null && x.RealizingElements.Contains(this)).ToList();
		public List<IfcRelSpaceBoundary>? ProvidesBoundaries => Model?.GetItems<IfcRelSpaceBoundary>().Where(x => x.RelatedBuildingElement != null && x.RelatedBuildingElement == this).ToList();
		public List<IfcRelConnectsElements>? ConnectedFrom => Model?.GetItems<IfcRelConnectsElements>().Where(x => x.RelatedElement != null && x.RelatedElement == this).ToList();
		public List<IfcRelContainedInSpatialStructure>? ContainedInStructure => Model?.GetItems<IfcRelContainedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList();
		public IfcElement() : base()
		{
		}
		public IfcElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.Tag = Tag;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
		public virtual Global.IfcIdentifier? _Tag { get { return Tag; } set { } }
		public virtual List<Global.IfcRelConnectsStructuralElement>? _HasStructuralMember
		{
			get
			{
				if(HasStructuralMember != null)
				{
					List<Global.IfcRelConnectsStructuralElement>? items = new List<Global.IfcRelConnectsStructuralElement>();
					foreach (IfcRelConnectsStructuralElement item in HasStructuralMember)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelFillsElement>? _FillsVoids
		{
			get
			{
				if(FillsVoids != null)
				{
					List<Global.IfcRelFillsElement>? items = new List<Global.IfcRelFillsElement>();
					foreach (IfcRelFillsElement item in FillsVoids)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelConnectsElements>? _ConnectedTo
		{
			get
			{
				if(ConnectedTo != null)
				{
					List<Global.IfcRelConnectsElements>? items = new List<Global.IfcRelConnectsElements>();
					foreach (IfcRelConnectsElements item in ConnectedTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelCoversBldgElements>? _HasCoverings
		{
			get
			{
				if(HasCoverings != null)
				{
					List<Global.IfcRelCoversBldgElements>? items = new List<Global.IfcRelCoversBldgElements>();
					foreach (IfcRelCoversBldgElements item in HasCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelProjectsElement>? _HasProjections
		{
			get
			{
				if(HasProjections != null)
				{
					List<Global.IfcRelProjectsElement>? items = new List<Global.IfcRelProjectsElement>();
					foreach (IfcRelProjectsElement item in HasProjections)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelReferencedInSpatialStructure>? _ReferencedInStructures
		{
			get
			{
				if(ReferencedInStructures != null)
				{
					List<Global.IfcRelReferencedInSpatialStructure>? items = new List<Global.IfcRelReferencedInSpatialStructure>();
					foreach (IfcRelReferencedInSpatialStructure item in ReferencedInStructures)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelConnectsPortToElement>? _HasPorts
		{
			get
			{
				if(HasPorts != null)
				{
					List<Global.IfcRelConnectsPortToElement>? items = new List<Global.IfcRelConnectsPortToElement>();
					foreach (IfcRelConnectsPortToElement item in HasPorts)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelVoidsElement>? _HasOpenings
		{
			get
			{
				if(HasOpenings != null)
				{
					List<Global.IfcRelVoidsElement>? items = new List<Global.IfcRelVoidsElement>();
					foreach (IfcRelVoidsElement item in HasOpenings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelConnectsWithRealizingElements>? _IsConnectionRealization
		{
			get
			{
				if(IsConnectionRealization != null)
				{
					List<Global.IfcRelConnectsWithRealizingElements>? items = new List<Global.IfcRelConnectsWithRealizingElements>();
					foreach (IfcRelConnectsWithRealizingElements item in IsConnectionRealization)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelSpaceBoundary>? _ProvidesBoundaries
		{
			get
			{
				if(ProvidesBoundaries != null)
				{
					List<Global.IfcRelSpaceBoundary>? items = new List<Global.IfcRelSpaceBoundary>();
					foreach (IfcRelSpaceBoundary item in ProvidesBoundaries)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelConnectsElements>? _ConnectedFrom
		{
			get
			{
				if(ConnectedFrom != null)
				{
					List<Global.IfcRelConnectsElements>? items = new List<Global.IfcRelConnectsElements>();
					foreach (IfcRelConnectsElements item in ConnectedFrom)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelContainedInSpatialStructure>? _ContainedInStructure
		{
			get
			{
				if(ContainedInStructure != null)
				{
					List<Global.IfcRelContainedInSpatialStructure>? items = new List<Global.IfcRelContainedInSpatialStructure>();
					foreach (IfcRelContainedInSpatialStructure item in ContainedInStructure)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElementAssembly
	/// SUBTYPE OF (IfcElement);
	/// AssemblyPlace : OPTIONAL IfcAssemblyPlaceEnum;
	/// PredefinedType : IfcElementAssemblyTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcElementAssemblyTypeEnum.USERDEFINED) OR ((PredefinedType = IfcElementAssemblyTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcElementAssembly : IfcElement, Global.IfcElementAssembly
	{
		public virtual IfcAssemblyPlaceEnum? AssemblyPlace { get; set; }
		public virtual IfcElementAssemblyTypeEnum? PredefinedType { get; set; }
		public IfcElementAssembly() : base()
		{
		}
		public IfcElementAssembly(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcAssemblyPlaceEnum? AssemblyPlace, IfcElementAssemblyTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.AssemblyPlace = AssemblyPlace;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				AssemblyPlace,
				PredefinedType
			};
		}
		public virtual Global.IfcAssemblyPlaceEnum? _AssemblyPlace { get { return AssemblyPlace; } set { } }
		public virtual Global.IfcElementAssemblyTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcElementComponent
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDiscreteAccessory
	/// ,IfcFastener))
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcElementComponent : IfcElement, Global.IfcElementComponent
	{
		public IfcElementComponent() : base()
		{
		}
		public IfcElementComponent(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcElementComponentType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDiscreteAccessoryType
	/// ,IfcFastenerType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcElementComponentType : IfcElementType, Global.IfcElementComponentType
	{
		public IfcElementComponentType() : base()
		{
		}
		public IfcElementComponentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcElementQuantity
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// MethodOfMeasurement : OPTIONAL IfcLabel;
	/// Quantities : SET [1:?] OF IfcPhysicalQuantity;
	/// END_ENTITY;
	/// <summary>
	public class IfcElementQuantity : IfcPropertySetDefinition, Global.IfcElementQuantity
	{
		public virtual IfcLabel? MethodOfMeasurement { get; set; }
		public virtual List<IfcPhysicalQuantity>? Quantities { get; set; }
		public IfcElementQuantity() : base()
		{
		}
		public IfcElementQuantity(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? MethodOfMeasurement, List<IfcPhysicalQuantity>? Quantities) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.MethodOfMeasurement = MethodOfMeasurement;
			this.Quantities = Quantities;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				MethodOfMeasurement,
				Quantities
			};
		}
		public virtual Global.IfcLabel? _MethodOfMeasurement { get { return MethodOfMeasurement; } set { } }
		public virtual List<Global.IfcPhysicalQuantity>? _Quantities
		{
			get
			{
				if(Quantities != null)
				{
					List<Global.IfcPhysicalQuantity>? items = new List<Global.IfcPhysicalQuantity>();
					foreach (IfcPhysicalQuantity item in Quantities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuildingElementType
	/// ,IfcDistributionElementType
	/// ,IfcElementComponentType
	/// ,IfcFurnishingElementType
	/// ,IfcSpatialStructureElementType
	/// ,IfcTransportElementType))
	/// SUBTYPE OF (IfcTypeProduct);
	/// ElementType : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcElementType : IfcTypeProduct, Global.IfcElementType
	{
		public virtual IfcLabel? ElementType { get; set; }
		public IfcElementType() : base()
		{
		}
		public IfcElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag)
		{
			this.ElementType = ElementType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
		public virtual Global.IfcLabel? _ElementType { get { return ElementType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcElementarySurface
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPlane))
	/// SUBTYPE OF (IfcSurface);
	/// Position : IfcAxis2Placement3D;
	/// DERIVE
	/// Dim : IfcDimensionCount := Position.Dim;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcElementarySurface : IfcSurface, Global.IfcElementarySurface
	{
		public virtual IfcAxis2Placement3D? Position { get; set; }
		//TODO DERIVE
		public override IfcDimensionCount? Dim {get {return null;}}
		public IfcElementarySurface() : base()
		{
		}
		public IfcElementarySurface(IfcAxis2Placement3D? Position) : base ()
		{
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position
			};
		}
		public virtual Global.IfcAxis2Placement3D? _Position { get { return Position; } set { } }
		public override Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcEllipse
	/// SUBTYPE OF (IfcConic);
	/// SemiAxis1 : IfcPositiveLengthMeasure;
	/// SemiAxis2 : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcEllipse : IfcConic, Global.IfcEllipse
	{
		public virtual IfcPositiveLengthMeasure? SemiAxis1 { get; set; }
		public virtual IfcPositiveLengthMeasure? SemiAxis2 { get; set; }
		public IfcEllipse() : base()
		{
		}
		public IfcEllipse(IfcAxis2Placement? Position, IfcPositiveLengthMeasure? SemiAxis1, IfcPositiveLengthMeasure? SemiAxis2) : base (Position)
		{
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				SemiAxis1,
				SemiAxis2
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _SemiAxis1 { get { return SemiAxis1; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _SemiAxis2 { get { return SemiAxis2; } set { } }
	}
	/// <summary>
	/// ENTITY IfcEllipseProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// SemiAxis1 : IfcPositiveLengthMeasure;
	/// SemiAxis2 : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcEllipseProfileDef : IfcParameterizedProfileDef, Global.IfcEllipseProfileDef
	{
		public virtual IfcPositiveLengthMeasure? SemiAxis1 { get; set; }
		public virtual IfcPositiveLengthMeasure? SemiAxis2 { get; set; }
		public IfcEllipseProfileDef() : base()
		{
		}
		public IfcEllipseProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? SemiAxis1, IfcPositiveLengthMeasure? SemiAxis2) : base (ProfileType, ProfileName, Position)
		{
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				SemiAxis1,
				SemiAxis2
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _SemiAxis1 { get { return SemiAxis1; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _SemiAxis2 { get { return SemiAxis2; } set { } }
	}
	/// <summary>
	/// ENTITY IfcEnergyConversionDevice
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcEnergyConversionDevice : IfcDistributionFlowElement, Global.IfcEnergyConversionDevice
	{
		public IfcEnergyConversionDevice() : base()
		{
		}
		public IfcEnergyConversionDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcEnergyConversionDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAirToAirHeatRecoveryType
	/// ,IfcBoilerType
	/// ,IfcChillerType
	/// ,IfcCoilType
	/// ,IfcCondenserType
	/// ,IfcCooledBeamType
	/// ,IfcCoolingTowerType
	/// ,IfcElectricGeneratorType
	/// ,IfcElectricMotorType
	/// ,IfcEvaporativeCoolerType
	/// ,IfcEvaporatorType
	/// ,IfcHeatExchangerType
	/// ,IfcHumidifierType
	/// ,IfcMotorConnectionType
	/// ,IfcSpaceHeaterType
	/// ,IfcTransformerType
	/// ,IfcTubeBundleType
	/// ,IfcUnitaryEquipmentType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcEnergyConversionDeviceType : IfcDistributionFlowElementType, Global.IfcEnergyConversionDeviceType
	{
		public IfcEnergyConversionDeviceType() : base()
		{
		}
		public IfcEnergyConversionDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcEnergyProperties
	/// SUPERTYPE OF (ONEOF
	/// (IfcElectricalBaseProperties))
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// EnergySequence : OPTIONAL IfcEnergySequenceEnum;
	/// UserDefinedEnergySequence : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcEnergyProperties : IfcPropertySetDefinition, Global.IfcEnergyProperties
	{
		public virtual IfcEnergySequenceEnum? EnergySequence { get; set; }
		public virtual IfcLabel? UserDefinedEnergySequence { get; set; }
		public IfcEnergyProperties() : base()
		{
		}
		public IfcEnergyProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcEnergySequenceEnum? EnergySequence, IfcLabel? UserDefinedEnergySequence) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.EnergySequence = EnergySequence;
			this.UserDefinedEnergySequence = UserDefinedEnergySequence;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				EnergySequence,
				UserDefinedEnergySequence
			};
		}
		public virtual Global.IfcEnergySequenceEnum? _EnergySequence { get { return EnergySequence; } set { } }
		public virtual Global.IfcLabel? _UserDefinedEnergySequence { get { return UserDefinedEnergySequence; } set { } }
	}
	/// <summary>
	/// ENTITY IfcEnvironmentalImpactValue
	/// SUBTYPE OF (IfcAppliedValue);
	/// ImpactType : IfcLabel;
	/// Category : IfcEnvironmentalImpactCategoryEnum;
	/// UserDefinedCategory : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : (Category <> IfcEnvironmentalImpactCategoryEnum.USERDEFINED) OR
	/// ((Category = IfcEnvironmentalImpactCategoryEnum.USERDEFINED) AND EXISTS(SELF\IfcEnvironmentalImpactValue.UserDefinedCategory));
	/// END_ENTITY;
	/// <summary>
	public class IfcEnvironmentalImpactValue : IfcAppliedValue, Global.IfcEnvironmentalImpactValue
	{
		public virtual IfcLabel? ImpactType { get; set; }
		public virtual IfcEnvironmentalImpactCategoryEnum? Category { get; set; }
		public virtual IfcLabel? UserDefinedCategory { get; set; }
		public IfcEnvironmentalImpactValue() : base()
		{
		}
		public IfcEnvironmentalImpactValue(IfcLabel? Name, IfcText? Description, IfcAppliedValueSelect? AppliedValue, IfcMeasureWithUnit? UnitBasis, IfcDateTimeSelect? ApplicableDate, IfcDateTimeSelect? FixedUntilDate, IfcLabel? ImpactType, IfcEnvironmentalImpactCategoryEnum? Category, IfcLabel? UserDefinedCategory) : base (Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate)
		{
			this.ImpactType = ImpactType;
			this.Category = Category;
			this.UserDefinedCategory = UserDefinedCategory;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				AppliedValue,
				UnitBasis,
				ApplicableDate,
				FixedUntilDate,
				ImpactType,
				Category,
				UserDefinedCategory
			};
		}
		public virtual Global.IfcLabel? _ImpactType { get { return ImpactType; } set { } }
		public virtual Global.IfcEnvironmentalImpactCategoryEnum? _Category { get { return Category; } set { } }
		public virtual Global.IfcLabel? _UserDefinedCategory { get { return UserDefinedCategory; } set { } }
	}
	/// <summary>
	/// ENTITY IfcEquipmentElement
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcEquipmentElement : IfcElement, Global.IfcEquipmentElement
	{
		public IfcEquipmentElement() : base()
		{
		}
		public IfcEquipmentElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcEquipmentStandard
	/// SUBTYPE OF (IfcControl);
	/// END_ENTITY;
	/// <summary>
	public class IfcEquipmentStandard : IfcControl, Global.IfcEquipmentStandard
	{
		public IfcEquipmentStandard() : base()
		{
		}
		public IfcEquipmentStandard(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcEvaporativeCoolerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcEvaporativeCoolerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcEvaporativeCoolerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcEvaporativeCoolerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcEvaporativeCoolerType : IfcEnergyConversionDeviceType, Global.IfcEvaporativeCoolerType
	{
		public virtual IfcEvaporativeCoolerTypeEnum? PredefinedType { get; set; }
		public IfcEvaporativeCoolerType() : base()
		{
		}
		public IfcEvaporativeCoolerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcEvaporativeCoolerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcEvaporativeCoolerTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcEvaporatorType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcEvaporatorTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcEvaporatorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcEvaporatorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcEvaporatorType : IfcEnergyConversionDeviceType, Global.IfcEvaporatorType
	{
		public virtual IfcEvaporatorTypeEnum? PredefinedType { get; set; }
		public IfcEvaporatorType() : base()
		{
		}
		public IfcEvaporatorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcEvaporatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcEvaporatorTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcExtendedMaterialProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// ExtendedProperties : SET [1:?] OF IfcProperty;
	/// Description : OPTIONAL IfcText;
	/// Name : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcExtendedMaterialProperties : IfcMaterialProperties, Global.IfcExtendedMaterialProperties
	{
		public virtual List<IfcProperty>? ExtendedProperties { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public IfcExtendedMaterialProperties() : base()
		{
		}
		public IfcExtendedMaterialProperties(IfcMaterial? Material, List<IfcProperty>? ExtendedProperties, IfcText? Description, IfcLabel? Name) : base (Material)
		{
			this.ExtendedProperties = ExtendedProperties;
			this.Description = Description;
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				ExtendedProperties,
				Description,
				Name
			};
		}
		public virtual List<Global.IfcProperty>? _ExtendedProperties
		{
			get
			{
				if(ExtendedProperties != null)
				{
					List<Global.IfcProperty>? items = new List<Global.IfcProperty>();
					foreach (IfcProperty item in ExtendedProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
	}
	/// <summary>
	/// ENTITY IfcExternalReference
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcClassificationReference
	/// ,IfcDocumentReference
	/// ,IfcExternallyDefinedHatchStyle
	/// ,IfcExternallyDefinedSurfaceStyle
	/// ,IfcExternallyDefinedSymbol
	/// ,IfcExternallyDefinedTextFont
	/// ,IfcLibraryReference));
	/// Location : OPTIONAL IfcLabel;
	/// ItemReference : OPTIONAL IfcIdentifier;
	/// Name : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS(ItemReference) OR EXISTS(Location) OR EXISTS(Name);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcExternalReference : Ifc_Entity, IfcLightDistributionDataSourceSelect, IfcObjectReferenceSelect, Global.IfcExternalReference
	{
		public virtual IfcLabel? Location { get; set; }
		public virtual IfcIdentifier? ItemReference { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public IfcExternalReference() : base()
		{
		}
		public IfcExternalReference(IfcLabel? Location, IfcIdentifier? ItemReference, IfcLabel? Name) : base ()
		{
			this.Location = Location;
			this.ItemReference = ItemReference;
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				ItemReference,
				Name
			};
		}
		public virtual Global.IfcLabel? _Location { get { return Location; } set { } }
		public virtual Global.IfcIdentifier? _ItemReference { get { return ItemReference; } set { } }
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
	}
	/// <summary>
	/// ENTITY IfcExternallyDefinedHatchStyle
	/// SUBTYPE OF (IfcExternalReference);
	/// END_ENTITY;
	/// <summary>
	public class IfcExternallyDefinedHatchStyle : IfcExternalReference, IfcFillStyleSelect, Global.IfcExternallyDefinedHatchStyle
	{
		public IfcExternallyDefinedHatchStyle() : base()
		{
		}
		public IfcExternallyDefinedHatchStyle(IfcLabel? Location, IfcIdentifier? ItemReference, IfcLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				ItemReference,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExternallyDefinedSurfaceStyle
	/// SUBTYPE OF (IfcExternalReference);
	/// END_ENTITY;
	/// <summary>
	public class IfcExternallyDefinedSurfaceStyle : IfcExternalReference, IfcSurfaceStyleElementSelect, Global.IfcExternallyDefinedSurfaceStyle
	{
		public IfcExternallyDefinedSurfaceStyle() : base()
		{
		}
		public IfcExternallyDefinedSurfaceStyle(IfcLabel? Location, IfcIdentifier? ItemReference, IfcLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				ItemReference,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExternallyDefinedSymbol
	/// SUBTYPE OF (IfcExternalReference);
	/// END_ENTITY;
	/// <summary>
	public class IfcExternallyDefinedSymbol : IfcExternalReference, IfcDefinedSymbolSelect, Global.IfcExternallyDefinedSymbol
	{
		public IfcExternallyDefinedSymbol() : base()
		{
		}
		public IfcExternallyDefinedSymbol(IfcLabel? Location, IfcIdentifier? ItemReference, IfcLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				ItemReference,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExternallyDefinedTextFont
	/// SUBTYPE OF (IfcExternalReference);
	/// END_ENTITY;
	/// <summary>
	public class IfcExternallyDefinedTextFont : IfcExternalReference, IfcTextFontSelect, Global.IfcExternallyDefinedTextFont
	{
		public IfcExternallyDefinedTextFont() : base()
		{
		}
		public IfcExternallyDefinedTextFont(IfcLabel? Location, IfcIdentifier? ItemReference, IfcLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				ItemReference,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExtrudedAreaSolid
	/// SUBTYPE OF (IfcSweptAreaSolid);
	/// ExtrudedDirection : IfcDirection;
	/// Depth : IfcPositiveLengthMeasure;
	/// WHERE
	/// WR31 : IfcDotProduct(IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcDirection([0.0,0.0,1.0]), SELF.ExtrudedDirection) <> 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IfcExtrudedAreaSolid : IfcSweptAreaSolid, Global.IfcExtrudedAreaSolid
	{
		public virtual IfcDirection? ExtrudedDirection { get; set; }
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public IfcExtrudedAreaSolid() : base()
		{
		}
		public IfcExtrudedAreaSolid(IfcProfileDef? SweptArea, IfcAxis2Placement3D? Position, IfcDirection? ExtrudedDirection, IfcPositiveLengthMeasure? Depth) : base (SweptArea, Position)
		{
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptArea,
				Position,
				ExtrudedDirection,
				Depth
			};
		}
		public virtual Global.IfcDirection? _ExtrudedDirection { get { return ExtrudedDirection; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Depth { get { return Depth; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFace
	/// SUPERTYPE OF (ONEOF
	/// (IfcFaceSurface))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// Bounds : SET [1:?] OF IfcFaceBound;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(temp <* Bounds | 'IFC2X3.IFCFACEOUTERBOUND' IN TYPEOF(temp))) <= 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcFace : IfcTopologicalRepresentationItem, Global.IfcFace
	{
		public virtual List<IfcFaceBound>? Bounds { get; set; }
		public IfcFace() : base()
		{
		}
		public IfcFace(List<IfcFaceBound>? Bounds) : base ()
		{
			this.Bounds = Bounds;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Bounds
			};
		}
		public virtual List<Global.IfcFaceBound>? _Bounds
		{
			get
			{
				if(Bounds != null)
				{
					List<Global.IfcFaceBound>? items = new List<Global.IfcFaceBound>();
					foreach (IfcFaceBound item in Bounds)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFaceBasedSurfaceModel
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// FbsmFaces : SET [1:?] OF IfcConnectedFaceSet;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcFaceBasedSurfaceModel : IfcGeometricRepresentationItem, IfcSurfaceOrFaceSurface, Global.IfcFaceBasedSurfaceModel
	{
		public virtual List<IfcConnectedFaceSet>? FbsmFaces { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcFaceBasedSurfaceModel() : base()
		{
		}
		public IfcFaceBasedSurfaceModel(List<IfcConnectedFaceSet>? FbsmFaces) : base ()
		{
			this.FbsmFaces = FbsmFaces;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				FbsmFaces
			};
		}
		public virtual List<Global.IfcConnectedFaceSet>? _FbsmFaces
		{
			get
			{
				if(FbsmFaces != null)
				{
					List<Global.IfcConnectedFaceSet>? items = new List<Global.IfcConnectedFaceSet>();
					foreach (IfcConnectedFaceSet item in FbsmFaces)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFaceBound
	/// SUPERTYPE OF (ONEOF
	/// (IfcFaceOuterBound))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// Bound : IfcLoop;
	/// Orientation : BOOLEAN;
	/// END_ENTITY;
	/// <summary>
	public class IfcFaceBound : IfcTopologicalRepresentationItem, Global.IfcFaceBound
	{
		public virtual IfcLoop? Bound { get; set; }
		public virtual BOOLEAN? Orientation { get; set; }
		public IfcFaceBound() : base()
		{
		}
		public IfcFaceBound(IfcLoop? Bound, BOOLEAN? Orientation) : base ()
		{
			this.Bound = Bound;
			this.Orientation = Orientation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Bound,
				Orientation
			};
		}
		public virtual Global.IfcLoop? _Bound { get { return Bound; } set { } }
		public virtual BOOLEAN? _Orientation { get { return Orientation; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFaceOuterBound
	/// SUBTYPE OF (IfcFaceBound);
	/// END_ENTITY;
	/// <summary>
	public class IfcFaceOuterBound : IfcFaceBound, Global.IfcFaceOuterBound
	{
		public IfcFaceOuterBound() : base()
		{
		}
		public IfcFaceOuterBound(IfcLoop? Bound, BOOLEAN? Orientation) : base (Bound, Orientation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Bound,
				Orientation
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFaceSurface
	/// SUBTYPE OF (IfcFace);
	/// FaceSurface : IfcSurface;
	/// SameSense : BOOLEAN;
	/// END_ENTITY;
	/// <summary>
	public class IfcFaceSurface : IfcFace, IfcSurfaceOrFaceSurface, Global.IfcFaceSurface
	{
		public virtual IfcSurface? FaceSurface { get; set; }
		public virtual BOOLEAN? SameSense { get; set; }
		public IfcFaceSurface() : base()
		{
		}
		public IfcFaceSurface(List<IfcFaceBound>? Bounds, IfcSurface? FaceSurface, BOOLEAN? SameSense) : base (Bounds)
		{
			this.FaceSurface = FaceSurface;
			this.SameSense = SameSense;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Bounds,
				FaceSurface,
				SameSense
			};
		}
		public virtual Global.IfcSurface? _FaceSurface { get { return FaceSurface; } set { } }
		public virtual BOOLEAN? _SameSense { get { return SameSense; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFacetedBrep
	/// SUBTYPE OF (IfcManifoldSolidBrep);
	/// END_ENTITY;
	/// <summary>
	public class IfcFacetedBrep : IfcManifoldSolidBrep, Global.IfcFacetedBrep
	{
		public IfcFacetedBrep() : base()
		{
		}
		public IfcFacetedBrep(IfcClosedShell? Outer) : base (Outer)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Outer
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFacetedBrepWithVoids
	/// SUBTYPE OF (IfcManifoldSolidBrep);
	/// Voids : SET [1:?] OF IfcClosedShell;
	/// END_ENTITY;
	/// <summary>
	public class IfcFacetedBrepWithVoids : IfcManifoldSolidBrep, Global.IfcFacetedBrepWithVoids
	{
		public virtual List<IfcClosedShell>? Voids { get; set; }
		public IfcFacetedBrepWithVoids() : base()
		{
		}
		public IfcFacetedBrepWithVoids(IfcClosedShell? Outer, List<IfcClosedShell>? Voids) : base (Outer)
		{
			this.Voids = Voids;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Outer,
				Voids
			};
		}
		public virtual List<Global.IfcClosedShell>? _Voids
		{
			get
			{
				if(Voids != null)
				{
					List<Global.IfcClosedShell>? items = new List<Global.IfcClosedShell>();
					foreach (IfcClosedShell item in Voids)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFailureConnectionCondition
	/// SUBTYPE OF (IfcStructuralConnectionCondition);
	/// TensionFailureX : OPTIONAL IfcForceMeasure;
	/// TensionFailureY : OPTIONAL IfcForceMeasure;
	/// TensionFailureZ : OPTIONAL IfcForceMeasure;
	/// CompressionFailureX : OPTIONAL IfcForceMeasure;
	/// CompressionFailureY : OPTIONAL IfcForceMeasure;
	/// CompressionFailureZ : OPTIONAL IfcForceMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcFailureConnectionCondition : IfcStructuralConnectionCondition, Global.IfcFailureConnectionCondition
	{
		public virtual IfcForceMeasure? TensionFailureX { get; set; }
		public virtual IfcForceMeasure? TensionFailureY { get; set; }
		public virtual IfcForceMeasure? TensionFailureZ { get; set; }
		public virtual IfcForceMeasure? CompressionFailureX { get; set; }
		public virtual IfcForceMeasure? CompressionFailureY { get; set; }
		public virtual IfcForceMeasure? CompressionFailureZ { get; set; }
		public IfcFailureConnectionCondition() : base()
		{
		}
		public IfcFailureConnectionCondition(IfcLabel? Name, IfcForceMeasure? TensionFailureX, IfcForceMeasure? TensionFailureY, IfcForceMeasure? TensionFailureZ, IfcForceMeasure? CompressionFailureX, IfcForceMeasure? CompressionFailureY, IfcForceMeasure? CompressionFailureZ) : base (Name)
		{
			this.TensionFailureX = TensionFailureX;
			this.TensionFailureY = TensionFailureY;
			this.TensionFailureZ = TensionFailureZ;
			this.CompressionFailureX = CompressionFailureX;
			this.CompressionFailureY = CompressionFailureY;
			this.CompressionFailureZ = CompressionFailureZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				TensionFailureX,
				TensionFailureY,
				TensionFailureZ,
				CompressionFailureX,
				CompressionFailureY,
				CompressionFailureZ
			};
		}
		public virtual Global.IfcForceMeasure? _TensionFailureX { get { return TensionFailureX; } set { } }
		public virtual Global.IfcForceMeasure? _TensionFailureY { get { return TensionFailureY; } set { } }
		public virtual Global.IfcForceMeasure? _TensionFailureZ { get { return TensionFailureZ; } set { } }
		public virtual Global.IfcForceMeasure? _CompressionFailureX { get { return CompressionFailureX; } set { } }
		public virtual Global.IfcForceMeasure? _CompressionFailureY { get { return CompressionFailureY; } set { } }
		public virtual Global.IfcForceMeasure? _CompressionFailureZ { get { return CompressionFailureZ; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFanType
	/// SUBTYPE OF (IfcFlowMovingDeviceType);
	/// PredefinedType : IfcFanTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcFanTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFanTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFanType : IfcFlowMovingDeviceType, Global.IfcFanType
	{
		public virtual IfcFanTypeEnum? PredefinedType { get; set; }
		public IfcFanType() : base()
		{
		}
		public IfcFanType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFanTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFanTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFastener
	/// SUPERTYPE OF (ONEOF
	/// (IfcMechanicalFastener))
	/// SUBTYPE OF (IfcElementComponent);
	/// END_ENTITY;
	/// <summary>
	public class IfcFastener : IfcElementComponent, Global.IfcFastener
	{
		public IfcFastener() : base()
		{
		}
		public IfcFastener(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFastenerType
	/// SUPERTYPE OF (ONEOF
	/// (IfcMechanicalFastenerType))
	/// SUBTYPE OF (IfcElementComponentType);
	/// END_ENTITY;
	/// <summary>
	public class IfcFastenerType : IfcElementComponentType, Global.IfcFastenerType
	{
		public IfcFastenerType() : base()
		{
		}
		public IfcFastenerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFeatureElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcFeatureElementAddition
	/// ,IfcFeatureElementSubtraction))
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFeatureElement : IfcElement, Global.IfcFeatureElement
	{
		public IfcFeatureElement() : base()
		{
		}
		public IfcFeatureElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFeatureElementAddition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcProjectionElement))
	/// SUBTYPE OF (IfcFeatureElement);
	/// INVERSE
	/// ProjectsElements : IfcRelProjectsElement FOR RelatedFeatureElement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFeatureElementAddition : IfcFeatureElement, Global.IfcFeatureElementAddition
	{
		public IfcRelProjectsElement? ProjectsElements => Model?.GetItems<IfcRelProjectsElement>().FirstOrDefault(x => x.RelatedFeatureElement != null && x.RelatedFeatureElement == this);
		public IfcFeatureElementAddition() : base()
		{
		}
		public IfcFeatureElementAddition(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
		public virtual Global.IfcRelProjectsElement? _ProjectsElements { get { return ProjectsElements; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFeatureElementSubtraction
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcEdgeFeature
	/// ,IfcOpeningElement))
	/// SUBTYPE OF (IfcFeatureElement);
	/// INVERSE
	/// VoidsElements : IfcRelVoidsElement FOR RelatedOpeningElement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFeatureElementSubtraction : IfcFeatureElement, Global.IfcFeatureElementSubtraction
	{
		public IfcRelVoidsElement? VoidsElements => Model?.GetItems<IfcRelVoidsElement>().FirstOrDefault(x => x.RelatedOpeningElement != null && x.RelatedOpeningElement == this);
		public IfcFeatureElementSubtraction() : base()
		{
		}
		public IfcFeatureElementSubtraction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
		public virtual Global.IfcRelVoidsElement? _VoidsElements { get { return VoidsElements; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFillAreaStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// FillStyles : SET [1:?] OF IfcFillStyleSelect;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(Style <* SELF.FillStyles |
	/// 'IFC2X3.IFCCOLOUR' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR12 : SIZEOF(QUERY(Style <* SELF.FillStyles |
	/// 'IFC2X3.IFCEXTERNALLYDEFINEDHATCHSTYLE' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR13 : IfcCorrectFillAreaStyle(SELF.FillStyles);
	/// END_ENTITY;
	/// <summary>
	public class IfcFillAreaStyle : IfcPresentationStyle, IfcPresentationStyleSelect, Global.IfcFillAreaStyle
	{
		public virtual List<IfcFillStyleSelect>? FillStyles { get; set; }
		public IfcFillAreaStyle() : base()
		{
		}
		public IfcFillAreaStyle(IfcLabel? Name, List<IfcFillStyleSelect>? FillStyles) : base (Name)
		{
			this.FillStyles = FillStyles;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				FillStyles
			};
		}
		public virtual List<Global.IfcFillStyleSelect>? _FillStyles
		{
			get
			{
				if(FillStyles != null)
				{
					List<Global.IfcFillStyleSelect>? items = new List<Global.IfcFillStyleSelect>();
					foreach (IfcFillStyleSelect item in FillStyles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFillAreaStyleHatching
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// HatchLineAppearance : IfcCurveStyle;
	/// StartOfNextHatchLine : IfcHatchLineDistanceSelect;
	/// PointOfReferenceHatchLine : OPTIONAL IfcCartesianPoint;
	/// PatternStart : OPTIONAL IfcCartesianPoint;
	/// HatchLineAngle : IfcPlaneAngleMeasure;
	/// WHERE
	/// WR21 : NOT(
	/// 'IFC2X3.IFCTWODIRECTIONREPEATFACTOR'
	/// IN TYPEOF(StartOfNextHatchLine)
	/// );
	/// WR22 : NOT(EXISTS(PatternStart))
	/// OR (PatternStart.Dim = 2);
	/// WR23 : NOT(EXISTS(PointOfReferenceHatchLine))
	/// OR (PointOfReferenceHatchLine.Dim = 2);
	/// END_ENTITY;
	/// <summary>
	public class IfcFillAreaStyleHatching : IfcGeometricRepresentationItem, IfcFillStyleSelect, Global.IfcFillAreaStyleHatching
	{
		public virtual IfcCurveStyle? HatchLineAppearance { get; set; }
		public virtual IfcHatchLineDistanceSelect? StartOfNextHatchLine { get; set; }
		public virtual IfcCartesianPoint? PointOfReferenceHatchLine { get; set; }
		public virtual IfcCartesianPoint? PatternStart { get; set; }
		public virtual IfcPlaneAngleMeasure? HatchLineAngle { get; set; }
		public IfcFillAreaStyleHatching() : base()
		{
		}
		public IfcFillAreaStyleHatching(IfcCurveStyle? HatchLineAppearance, IfcHatchLineDistanceSelect? StartOfNextHatchLine, IfcCartesianPoint? PointOfReferenceHatchLine, IfcCartesianPoint? PatternStart, IfcPlaneAngleMeasure? HatchLineAngle) : base ()
		{
			this.HatchLineAppearance = HatchLineAppearance;
			this.StartOfNextHatchLine = StartOfNextHatchLine;
			this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
			this.PatternStart = PatternStart;
			this.HatchLineAngle = HatchLineAngle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				HatchLineAppearance,
				StartOfNextHatchLine,
				PointOfReferenceHatchLine,
				PatternStart,
				HatchLineAngle
			};
		}
		public virtual Global.IfcCurveStyle? _HatchLineAppearance { get { return HatchLineAppearance; } set { } }
		public virtual Global.IfcHatchLineDistanceSelect? _StartOfNextHatchLine { get { return StartOfNextHatchLine; } set { } }
		public virtual Global.IfcCartesianPoint? _PointOfReferenceHatchLine { get { return PointOfReferenceHatchLine; } set { } }
		public virtual Global.IfcCartesianPoint? _PatternStart { get { return PatternStart; } set { } }
		public virtual Global.IfcPlaneAngleMeasure? _HatchLineAngle { get { return HatchLineAngle; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFillAreaStyleTileSymbolWithStyle
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Symbol : IfcAnnotationSymbolOccurrence;
	/// END_ENTITY;
	/// <summary>
	public class IfcFillAreaStyleTileSymbolWithStyle : IfcGeometricRepresentationItem, IfcFillAreaStyleTileShapeSelect, Global.IfcFillAreaStyleTileSymbolWithStyle
	{
		public virtual IfcAnnotationSymbolOccurrence? Symbol { get; set; }
		public IfcFillAreaStyleTileSymbolWithStyle() : base()
		{
		}
		public IfcFillAreaStyleTileSymbolWithStyle(IfcAnnotationSymbolOccurrence? Symbol) : base ()
		{
			this.Symbol = Symbol;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Symbol
			};
		}
		public virtual Global.IfcAnnotationSymbolOccurrence? _Symbol { get { return Symbol; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFillAreaStyleTiles
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// TilingPattern : IfcOneDirectionRepeatFactor;
	/// Tiles : SET [1:?] OF IfcFillAreaStyleTileShapeSelect;
	/// TilingScale : IfcPositiveRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcFillAreaStyleTiles : IfcGeometricRepresentationItem, IfcFillStyleSelect, Global.IfcFillAreaStyleTiles
	{
		public virtual IfcOneDirectionRepeatFactor? TilingPattern { get; set; }
		public virtual List<IfcFillAreaStyleTileShapeSelect>? Tiles { get; set; }
		public virtual IfcPositiveRatioMeasure? TilingScale { get; set; }
		public IfcFillAreaStyleTiles() : base()
		{
		}
		public IfcFillAreaStyleTiles(IfcOneDirectionRepeatFactor? TilingPattern, List<IfcFillAreaStyleTileShapeSelect>? Tiles, IfcPositiveRatioMeasure? TilingScale) : base ()
		{
			this.TilingPattern = TilingPattern;
			this.Tiles = Tiles;
			this.TilingScale = TilingScale;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TilingPattern,
				Tiles,
				TilingScale
			};
		}
		public virtual Global.IfcOneDirectionRepeatFactor? _TilingPattern { get { return TilingPattern; } set { } }
		public virtual List<Global.IfcFillAreaStyleTileShapeSelect>? _Tiles
		{
			get
			{
				if(Tiles != null)
				{
					List<Global.IfcFillAreaStyleTileShapeSelect>? items = new List<Global.IfcFillAreaStyleTileShapeSelect>();
					foreach (IfcFillAreaStyleTileShapeSelect item in Tiles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcPositiveRatioMeasure? _TilingScale { get { return TilingScale; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFilterType
	/// SUBTYPE OF (IfcFlowTreatmentDeviceType);
	/// PredefinedType : IfcFilterTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcFilterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFilterTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFilterType : IfcFlowTreatmentDeviceType, Global.IfcFilterType
	{
		public virtual IfcFilterTypeEnum? PredefinedType { get; set; }
		public IfcFilterType() : base()
		{
		}
		public IfcFilterType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFilterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFilterTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFireSuppressionTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcFireSuppressionTerminalTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcFireSuppressionTerminalType : IfcFlowTerminalType, Global.IfcFireSuppressionTerminalType
	{
		public virtual IfcFireSuppressionTerminalTypeEnum? PredefinedType { get; set; }
		public IfcFireSuppressionTerminalType() : base()
		{
		}
		public IfcFireSuppressionTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFireSuppressionTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFireSuppressionTerminalTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFlowController
	/// SUPERTYPE OF (ONEOF
	/// (IfcElectricDistributionPoint))
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowController : IfcDistributionFlowElement, Global.IfcFlowController
	{
		public IfcFlowController() : base()
		{
		}
		public IfcFlowController(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowControllerType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAirTerminalBoxType
	/// ,IfcDamperType
	/// ,IfcElectricTimeControlType
	/// ,IfcFlowMeterType
	/// ,IfcProtectiveDeviceType
	/// ,IfcSwitchingDeviceType
	/// ,IfcValveType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowControllerType : IfcDistributionFlowElementType, Global.IfcFlowControllerType
	{
		public IfcFlowControllerType() : base()
		{
		}
		public IfcFlowControllerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowFitting
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowFitting : IfcDistributionFlowElement, Global.IfcFlowFitting
	{
		public IfcFlowFitting() : base()
		{
		}
		public IfcFlowFitting(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowFittingType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCableCarrierFittingType
	/// ,IfcDuctFittingType
	/// ,IfcJunctionBoxType
	/// ,IfcPipeFittingType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowFittingType : IfcDistributionFlowElementType, Global.IfcFlowFittingType
	{
		public IfcFlowFittingType() : base()
		{
		}
		public IfcFlowFittingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowInstrumentType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcFlowInstrumentTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowInstrumentType : IfcDistributionControlElementType, Global.IfcFlowInstrumentType
	{
		public virtual IfcFlowInstrumentTypeEnum? PredefinedType { get; set; }
		public IfcFlowInstrumentType() : base()
		{
		}
		public IfcFlowInstrumentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFlowInstrumentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFlowInstrumentTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFlowMeterType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcFlowMeterTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcFlowMeterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFlowMeterTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowMeterType : IfcFlowControllerType, Global.IfcFlowMeterType
	{
		public virtual IfcFlowMeterTypeEnum? PredefinedType { get; set; }
		public IfcFlowMeterType() : base()
		{
		}
		public IfcFlowMeterType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcFlowMeterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcFlowMeterTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFlowMovingDevice
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowMovingDevice : IfcDistributionFlowElement, Global.IfcFlowMovingDevice
	{
		public IfcFlowMovingDevice() : base()
		{
		}
		public IfcFlowMovingDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowMovingDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCompressorType
	/// ,IfcFanType
	/// ,IfcPumpType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowMovingDeviceType : IfcDistributionFlowElementType, Global.IfcFlowMovingDeviceType
	{
		public IfcFlowMovingDeviceType() : base()
		{
		}
		public IfcFlowMovingDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowSegment
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowSegment : IfcDistributionFlowElement, Global.IfcFlowSegment
	{
		public IfcFlowSegment() : base()
		{
		}
		public IfcFlowSegment(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowSegmentType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCableCarrierSegmentType
	/// ,IfcCableSegmentType
	/// ,IfcDuctSegmentType
	/// ,IfcPipeSegmentType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowSegmentType : IfcDistributionFlowElementType, Global.IfcFlowSegmentType
	{
		public IfcFlowSegmentType() : base()
		{
		}
		public IfcFlowSegmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowStorageDevice
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowStorageDevice : IfcDistributionFlowElement, Global.IfcFlowStorageDevice
	{
		public IfcFlowStorageDevice() : base()
		{
		}
		public IfcFlowStorageDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowStorageDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcElectricFlowStorageDeviceType
	/// ,IfcTankType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowStorageDeviceType : IfcDistributionFlowElementType, Global.IfcFlowStorageDeviceType
	{
		public IfcFlowStorageDeviceType() : base()
		{
		}
		public IfcFlowStorageDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTerminal
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowTerminal : IfcDistributionFlowElement, Global.IfcFlowTerminal
	{
		public IfcFlowTerminal() : base()
		{
		}
		public IfcFlowTerminal(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTerminalType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAirTerminalType
	/// ,IfcElectricApplianceType
	/// ,IfcElectricHeaterType
	/// ,IfcFireSuppressionTerminalType
	/// ,IfcGasTerminalType
	/// ,IfcLampType
	/// ,IfcLightFixtureType
	/// ,IfcOutletType
	/// ,IfcSanitaryTerminalType
	/// ,IfcStackTerminalType
	/// ,IfcWasteTerminalType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowTerminalType : IfcDistributionFlowElementType, Global.IfcFlowTerminalType
	{
		public IfcFlowTerminalType() : base()
		{
		}
		public IfcFlowTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTreatmentDevice
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFlowTreatmentDevice : IfcDistributionFlowElement, Global.IfcFlowTreatmentDevice
	{
		public IfcFlowTreatmentDevice() : base()
		{
		}
		public IfcFlowTreatmentDevice(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTreatmentDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDuctSilencerType
	/// ,IfcFilterType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcFlowTreatmentDeviceType : IfcDistributionFlowElementType, Global.IfcFlowTreatmentDeviceType
	{
		public IfcFlowTreatmentDeviceType() : base()
		{
		}
		public IfcFlowTreatmentDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFluidFlowProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// PropertySource : IfcPropertySourceEnum;
	/// FlowConditionTimeSeries : OPTIONAL IfcTimeSeries;
	/// VelocityTimeSeries : OPTIONAL IfcTimeSeries;
	/// FlowrateTimeSeries : OPTIONAL IfcTimeSeries;
	/// Fluid : IfcMaterial;
	/// PressureTimeSeries : OPTIONAL IfcTimeSeries;
	/// UserDefinedPropertySource : OPTIONAL IfcLabel;
	/// TemperatureSingleValue : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// WetBulbTemperatureSingleValue : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// WetBulbTemperatureTimeSeries : OPTIONAL IfcTimeSeries;
	/// TemperatureTimeSeries : OPTIONAL IfcTimeSeries;
	/// FlowrateSingleValue : OPTIONAL IfcDerivedMeasureValue;
	/// FlowConditionSingleValue : OPTIONAL IfcPositiveRatioMeasure;
	/// VelocitySingleValue : OPTIONAL IfcLinearVelocityMeasure;
	/// PressureSingleValue : OPTIONAL IfcPressureMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcFluidFlowProperties : IfcPropertySetDefinition, Global.IfcFluidFlowProperties
	{
		public virtual IfcPropertySourceEnum? PropertySource { get; set; }
		public virtual IfcTimeSeries? FlowConditionTimeSeries { get; set; }
		public virtual IfcTimeSeries? VelocityTimeSeries { get; set; }
		public virtual IfcTimeSeries? FlowrateTimeSeries { get; set; }
		public virtual IfcMaterial? Fluid { get; set; }
		public virtual IfcTimeSeries? PressureTimeSeries { get; set; }
		public virtual IfcLabel? UserDefinedPropertySource { get; set; }
		public virtual IfcThermodynamicTemperatureMeasure? TemperatureSingleValue { get; set; }
		public virtual IfcThermodynamicTemperatureMeasure? WetBulbTemperatureSingleValue { get; set; }
		public virtual IfcTimeSeries? WetBulbTemperatureTimeSeries { get; set; }
		public virtual IfcTimeSeries? TemperatureTimeSeries { get; set; }
		public virtual IfcDerivedMeasureValue? FlowrateSingleValue { get; set; }
		public virtual IfcPositiveRatioMeasure? FlowConditionSingleValue { get; set; }
		public virtual IfcLinearVelocityMeasure? VelocitySingleValue { get; set; }
		public virtual IfcPressureMeasure? PressureSingleValue { get; set; }
		public IfcFluidFlowProperties() : base()
		{
		}
		public IfcFluidFlowProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPropertySourceEnum? PropertySource, IfcTimeSeries? FlowConditionTimeSeries, IfcTimeSeries? VelocityTimeSeries, IfcTimeSeries? FlowrateTimeSeries, IfcMaterial? Fluid, IfcTimeSeries? PressureTimeSeries, IfcLabel? UserDefinedPropertySource, IfcThermodynamicTemperatureMeasure? TemperatureSingleValue, IfcThermodynamicTemperatureMeasure? WetBulbTemperatureSingleValue, IfcTimeSeries? WetBulbTemperatureTimeSeries, IfcTimeSeries? TemperatureTimeSeries, IfcDerivedMeasureValue? FlowrateSingleValue, IfcPositiveRatioMeasure? FlowConditionSingleValue, IfcLinearVelocityMeasure? VelocitySingleValue, IfcPressureMeasure? PressureSingleValue) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.PropertySource = PropertySource;
			this.FlowConditionTimeSeries = FlowConditionTimeSeries;
			this.VelocityTimeSeries = VelocityTimeSeries;
			this.FlowrateTimeSeries = FlowrateTimeSeries;
			this.Fluid = Fluid;
			this.PressureTimeSeries = PressureTimeSeries;
			this.UserDefinedPropertySource = UserDefinedPropertySource;
			this.TemperatureSingleValue = TemperatureSingleValue;
			this.WetBulbTemperatureSingleValue = WetBulbTemperatureSingleValue;
			this.WetBulbTemperatureTimeSeries = WetBulbTemperatureTimeSeries;
			this.TemperatureTimeSeries = TemperatureTimeSeries;
			this.FlowrateSingleValue = FlowrateSingleValue;
			this.FlowConditionSingleValue = FlowConditionSingleValue;
			this.VelocitySingleValue = VelocitySingleValue;
			this.PressureSingleValue = PressureSingleValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				PropertySource,
				FlowConditionTimeSeries,
				VelocityTimeSeries,
				FlowrateTimeSeries,
				Fluid,
				PressureTimeSeries,
				UserDefinedPropertySource,
				TemperatureSingleValue,
				WetBulbTemperatureSingleValue,
				WetBulbTemperatureTimeSeries,
				TemperatureTimeSeries,
				FlowrateSingleValue,
				FlowConditionSingleValue,
				VelocitySingleValue,
				PressureSingleValue
			};
		}
		public virtual Global.IfcPropertySourceEnum? _PropertySource { get { return PropertySource; } set { } }
		public virtual Global.IfcTimeSeries? _FlowConditionTimeSeries { get { return FlowConditionTimeSeries; } set { } }
		public virtual Global.IfcTimeSeries? _VelocityTimeSeries { get { return VelocityTimeSeries; } set { } }
		public virtual Global.IfcTimeSeries? _FlowrateTimeSeries { get { return FlowrateTimeSeries; } set { } }
		public virtual Global.IfcMaterial? _Fluid { get { return Fluid; } set { } }
		public virtual Global.IfcTimeSeries? _PressureTimeSeries { get { return PressureTimeSeries; } set { } }
		public virtual Global.IfcLabel? _UserDefinedPropertySource { get { return UserDefinedPropertySource; } set { } }
		public virtual Global.IfcThermodynamicTemperatureMeasure? _TemperatureSingleValue { get { return TemperatureSingleValue; } set { } }
		public virtual Global.IfcThermodynamicTemperatureMeasure? _WetBulbTemperatureSingleValue { get { return WetBulbTemperatureSingleValue; } set { } }
		public virtual Global.IfcTimeSeries? _WetBulbTemperatureTimeSeries { get { return WetBulbTemperatureTimeSeries; } set { } }
		public virtual Global.IfcTimeSeries? _TemperatureTimeSeries { get { return TemperatureTimeSeries; } set { } }
		public virtual Global.IfcDerivedMeasureValue? _FlowrateSingleValue { get { return FlowrateSingleValue; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _FlowConditionSingleValue { get { return FlowConditionSingleValue; } set { } }
		public virtual Global.IfcLinearVelocityMeasure? _VelocitySingleValue { get { return VelocitySingleValue; } set { } }
		public virtual Global.IfcPressureMeasure? _PressureSingleValue { get { return PressureSingleValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFooting
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : IfcFootingTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcFootingTypeEnum.USERDEFINED) OR ((PredefinedType = IfcFootingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcFooting : IfcBuildingElement, Global.IfcFooting
	{
		public virtual IfcFootingTypeEnum? PredefinedType { get; set; }
		public IfcFooting() : base()
		{
		}
		public IfcFooting(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcFootingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcFootingTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFuelProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// CombustionTemperature : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// CarbonContent : OPTIONAL IfcPositiveRatioMeasure;
	/// LowerHeatingValue : OPTIONAL IfcHeatingValueMeasure;
	/// HigherHeatingValue : OPTIONAL IfcHeatingValueMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IfcFuelProperties : IfcMaterialProperties, Global.IfcFuelProperties
	{
		public virtual IfcThermodynamicTemperatureMeasure? CombustionTemperature { get; set; }
		public virtual IfcPositiveRatioMeasure? CarbonContent { get; set; }
		public virtual IfcHeatingValueMeasure? LowerHeatingValue { get; set; }
		public virtual IfcHeatingValueMeasure? HigherHeatingValue { get; set; }
		public IfcFuelProperties() : base()
		{
		}
		public IfcFuelProperties(IfcMaterial? Material, IfcThermodynamicTemperatureMeasure? CombustionTemperature, IfcPositiveRatioMeasure? CarbonContent, IfcHeatingValueMeasure? LowerHeatingValue, IfcHeatingValueMeasure? HigherHeatingValue) : base (Material)
		{
			this.CombustionTemperature = CombustionTemperature;
			this.CarbonContent = CarbonContent;
			this.LowerHeatingValue = LowerHeatingValue;
			this.HigherHeatingValue = HigherHeatingValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				CombustionTemperature,
				CarbonContent,
				LowerHeatingValue,
				HigherHeatingValue
			};
		}
		public virtual Global.IfcThermodynamicTemperatureMeasure? _CombustionTemperature { get { return CombustionTemperature; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _CarbonContent { get { return CarbonContent; } set { } }
		public virtual Global.IfcHeatingValueMeasure? _LowerHeatingValue { get { return LowerHeatingValue; } set { } }
		public virtual Global.IfcHeatingValueMeasure? _HigherHeatingValue { get { return HigherHeatingValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcFurnishingElement
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcFurnishingElement : IfcElement, Global.IfcFurnishingElement
	{
		public IfcFurnishingElement() : base()
		{
		}
		public IfcFurnishingElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFurnishingElementType
	/// SUPERTYPE OF (ONEOF
	/// (IfcFurnitureType
	/// ,IfcSystemFurnitureElementType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public class IfcFurnishingElementType : IfcElementType, Global.IfcFurnishingElementType
	{
		public IfcFurnishingElementType() : base()
		{
		}
		public IfcFurnishingElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFurnitureStandard
	/// SUBTYPE OF (IfcControl);
	/// END_ENTITY;
	/// <summary>
	public class IfcFurnitureStandard : IfcControl, Global.IfcFurnitureStandard
	{
		public IfcFurnitureStandard() : base()
		{
		}
		public IfcFurnitureStandard(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFurnitureType
	/// SUBTYPE OF (IfcFurnishingElementType);
	/// AssemblyPlace : IfcAssemblyPlaceEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcFurnitureType : IfcFurnishingElementType, Global.IfcFurnitureType
	{
		public virtual IfcAssemblyPlaceEnum? AssemblyPlace { get; set; }
		public IfcFurnitureType() : base()
		{
		}
		public IfcFurnitureType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcAssemblyPlaceEnum? AssemblyPlace) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.AssemblyPlace = AssemblyPlace;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				AssemblyPlace
			};
		}
		public virtual Global.IfcAssemblyPlaceEnum? _AssemblyPlace { get { return AssemblyPlace; } set { } }
	}
	/// <summary>
	/// ENTITY IfcGasTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcGasTerminalTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcGasTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcGasTerminalTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcGasTerminalType : IfcFlowTerminalType, Global.IfcGasTerminalType
	{
		public virtual IfcGasTerminalTypeEnum? PredefinedType { get; set; }
		public IfcGasTerminalType() : base()
		{
		}
		public IfcGasTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcGasTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcGasTerminalTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcGeneralMaterialProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// MolecularWeight : OPTIONAL IfcMolecularWeightMeasure;
	/// Porosity : OPTIONAL IfcNormalisedRatioMeasure;
	/// MassDensity : OPTIONAL IfcMassDensityMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IfcGeneralMaterialProperties : IfcMaterialProperties, Global.IfcGeneralMaterialProperties
	{
		public virtual IfcMolecularWeightMeasure? MolecularWeight { get; set; }
		public virtual IfcNormalisedRatioMeasure? Porosity { get; set; }
		public virtual IfcMassDensityMeasure? MassDensity { get; set; }
		public IfcGeneralMaterialProperties() : base()
		{
		}
		public IfcGeneralMaterialProperties(IfcMaterial? Material, IfcMolecularWeightMeasure? MolecularWeight, IfcNormalisedRatioMeasure? Porosity, IfcMassDensityMeasure? MassDensity) : base (Material)
		{
			this.MolecularWeight = MolecularWeight;
			this.Porosity = Porosity;
			this.MassDensity = MassDensity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				MolecularWeight,
				Porosity,
				MassDensity
			};
		}
		public virtual Global.IfcMolecularWeightMeasure? _MolecularWeight { get { return MolecularWeight; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _Porosity { get { return Porosity; } set { } }
		public virtual Global.IfcMassDensityMeasure? _MassDensity { get { return MassDensity; } set { } }
	}
	/// <summary>
	/// ENTITY IfcGeneralProfileProperties
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralProfileProperties))
	/// SUBTYPE OF (IfcProfileProperties);
	/// PhysicalWeight : OPTIONAL IfcMassPerLengthMeasure;
	/// Perimeter : OPTIONAL IfcPositiveLengthMeasure;
	/// MinimumPlateThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// MaximumPlateThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// CrossSectionArea : OPTIONAL IfcAreaMeasure;
	/// WHERE
	/// WR1 : NOT(EXISTS(CrossSectionArea)) OR (CrossSectionArea > 0.);
	/// END_ENTITY;
	/// <summary>
	public class IfcGeneralProfileProperties : IfcProfileProperties, Global.IfcGeneralProfileProperties
	{
		public virtual IfcMassPerLengthMeasure? PhysicalWeight { get; set; }
		public virtual IfcPositiveLengthMeasure? Perimeter { get; set; }
		public virtual IfcPositiveLengthMeasure? MinimumPlateThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? MaximumPlateThickness { get; set; }
		public virtual IfcAreaMeasure? CrossSectionArea { get; set; }
		public IfcGeneralProfileProperties() : base()
		{
		}
		public IfcGeneralProfileProperties(IfcLabel? ProfileName, IfcProfileDef? ProfileDefinition, IfcMassPerLengthMeasure? PhysicalWeight, IfcPositiveLengthMeasure? Perimeter, IfcPositiveLengthMeasure? MinimumPlateThickness, IfcPositiveLengthMeasure? MaximumPlateThickness, IfcAreaMeasure? CrossSectionArea) : base (ProfileName, ProfileDefinition)
		{
			this.PhysicalWeight = PhysicalWeight;
			this.Perimeter = Perimeter;
			this.MinimumPlateThickness = MinimumPlateThickness;
			this.MaximumPlateThickness = MaximumPlateThickness;
			this.CrossSectionArea = CrossSectionArea;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileName,
				ProfileDefinition,
				PhysicalWeight,
				Perimeter,
				MinimumPlateThickness,
				MaximumPlateThickness,
				CrossSectionArea
			};
		}
		public virtual Global.IfcMassPerLengthMeasure? _PhysicalWeight { get { return PhysicalWeight; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Perimeter { get { return Perimeter; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _MinimumPlateThickness { get { return MinimumPlateThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _MaximumPlateThickness { get { return MaximumPlateThickness; } set { } }
		public virtual Global.IfcAreaMeasure? _CrossSectionArea { get { return CrossSectionArea; } set { } }
	}
	/// <summary>
	/// ENTITY IfcGeometricCurveSet
	/// SUBTYPE OF (IfcGeometricSet);
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcGeometricSet.Elements |
	/// 'IFC2X3.IFCSURFACE' IN TYPEOF(Temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcGeometricCurveSet : IfcGeometricSet, Global.IfcGeometricCurveSet
	{
		public IfcGeometricCurveSet() : base()
		{
		}
		public IfcGeometricCurveSet(List<IfcGeometricSetSelect>? Elements) : base (Elements)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Elements
			};
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricRepresentationContext
	/// SUPERTYPE OF (ONEOF
	/// (IfcGeometricRepresentationSubContext))
	/// SUBTYPE OF (IfcRepresentationContext);
	/// CoordinateSpaceDimension : IfcDimensionCount;
	/// Precision : OPTIONAL REAL;
	/// WorldCoordinateSystem : IfcAxis2Placement;
	/// TrueNorth : OPTIONAL IfcDirection;
	/// INVERSE
	/// HasSubContexts : SET [0:?] OF IfcGeometricRepresentationSubContext FOR ParentContext;
	/// END_ENTITY;
	/// <summary>
	public class IfcGeometricRepresentationContext : IfcRepresentationContext, Global.IfcGeometricRepresentationContext
	{
		public virtual IfcDimensionCount? CoordinateSpaceDimension { get; set; }
		public virtual REAL? Precision { get; set; }
		public virtual IfcAxis2Placement? WorldCoordinateSystem { get; set; }
		public virtual IfcDirection? TrueNorth { get; set; }
		public List<IfcGeometricRepresentationSubContext>? HasSubContexts => Model?.GetItems<IfcGeometricRepresentationSubContext>().Where(x => x.ParentContext != null && x.ParentContext == this).ToList();
		public IfcGeometricRepresentationContext() : base()
		{
		}
		public IfcGeometricRepresentationContext(IfcLabel? ContextIdentifier, IfcLabel? ContextType, IfcDimensionCount? CoordinateSpaceDimension, REAL? Precision, IfcAxis2Placement? WorldCoordinateSystem, IfcDirection? TrueNorth) : base (ContextIdentifier, ContextType)
		{
			this.CoordinateSpaceDimension = CoordinateSpaceDimension;
			this.Precision = Precision;
			this.WorldCoordinateSystem = WorldCoordinateSystem;
			this.TrueNorth = TrueNorth;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextIdentifier,
				ContextType,
				CoordinateSpaceDimension,
				Precision,
				WorldCoordinateSystem,
				TrueNorth
			};
		}
		public virtual Global.IfcDimensionCount? _CoordinateSpaceDimension { get { return CoordinateSpaceDimension; } set { } }
		public virtual REAL? _Precision { get { return Precision; } set { } }
		public virtual Global.IfcAxis2Placement? _WorldCoordinateSystem { get { return WorldCoordinateSystem; } set { } }
		public virtual Global.IfcDirection? _TrueNorth { get { return TrueNorth; } set { } }
		public virtual List<Global.IfcGeometricRepresentationSubContext>? _HasSubContexts
		{
			get
			{
				if(HasSubContexts != null)
				{
					List<Global.IfcGeometricRepresentationSubContext>? items = new List<Global.IfcGeometricRepresentationSubContext>();
					foreach (IfcGeometricRepresentationSubContext item in HasSubContexts)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricRepresentationItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAnnotationFillArea
	/// ,IfcAnnotationSurface
	/// ,IfcBooleanResult
	/// ,IfcBoundingBox
	/// ,IfcCartesianTransformationOperator
	/// ,IfcCompositeCurveSegment
	/// ,IfcCsgPrimitive3D
	/// ,IfcCurve
	/// ,IfcDefinedSymbol
	/// ,IfcDirection
	/// ,IfcDraughtingCallout
	/// ,IfcFaceBasedSurfaceModel
	/// ,IfcFillAreaStyleHatching
	/// ,IfcFillAreaStyleTileSymbolWithStyle
	/// ,IfcFillAreaStyleTiles
	/// ,IfcGeometricSet
	/// ,IfcHalfSpaceSolid
	/// ,IfcLightSource
	/// ,IfcOneDirectionRepeatFactor
	/// ,IfcPlacement
	/// ,IfcPlanarExtent
	/// ,IfcPoint
	/// ,IfcSectionedSpine
	/// ,IfcShellBasedSurfaceModel
	/// ,IfcSolidModel
	/// ,IfcSurface
	/// ,IfcTextLiteral
	/// ,IfcVector))
	/// SUBTYPE OF (IfcRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcGeometricRepresentationItem : IfcRepresentationItem, Global.IfcGeometricRepresentationItem
	{
		public IfcGeometricRepresentationItem() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricRepresentationSubContext
	/// SUBTYPE OF (IfcGeometricRepresentationContext);
	/// ParentContext : IfcGeometricRepresentationContext;
	/// TargetScale : OPTIONAL IfcPositiveRatioMeasure;
	/// TargetView : IfcGeometricProjectionEnum;
	/// UserDefinedTargetView : OPTIONAL IfcLabel;
	/// DERIVE
	/// SELF\IfcGeometricRepresentationContext.WorldCoordinateSystem : IfcAxis2Placement := ParentContext.WorldCoordinateSystem;
	/// SELF\IfcGeometricRepresentationContext.CoordinateSpaceDimension : IfcDimensionCount := ParentContext.CoordinateSpaceDimension;
	/// SELF\IfcGeometricRepresentationContext.TrueNorth : IfcDirection := NVL(ParentContext.TrueNorth,SELF.WorldCoordinateSystem.P[2]);
	/// SELF\IfcGeometricRepresentationContext.Precision : REAL := NVL(ParentContext.Precision,1.E-5);
	/// WHERE
	/// WR31 : NOT('IFC2X3.IFCGEOMETRICREPRESENTATIONSUBCONTEXT' IN TYPEOF(ParentContext));
	/// WR32 : (TargetView <> IfcGeometricProjectionEnum.USERDEFINED) OR
	/// ((TargetView =  IfcGeometricProjectionEnum.USERDEFINED) AND
	/// EXISTS(UserDefinedTargetView));
	/// END_ENTITY;
	/// <summary>
	public class IfcGeometricRepresentationSubContext : IfcGeometricRepresentationContext, Global.IfcGeometricRepresentationSubContext
	{
		public virtual IfcGeometricRepresentationContext? ParentContext { get; set; }
		public virtual IfcPositiveRatioMeasure? TargetScale { get; set; }
		public virtual IfcGeometricProjectionEnum? TargetView { get; set; }
		public virtual IfcLabel? UserDefinedTargetView { get; set; }
		//TODO DERIVE
		public override IfcAxis2Placement? WorldCoordinateSystem {get {return null;}}
		//TODO DERIVE
		public override IfcDimensionCount? CoordinateSpaceDimension {get {return null;}}
		//TODO DERIVE
		public override IfcDirection? TrueNorth {get {return null;}}
		//TODO DERIVE
		public override REAL? Precision {get {return null;}}
		public IfcGeometricRepresentationSubContext() : base()
		{
		}
		public IfcGeometricRepresentationSubContext(IfcLabel? ContextIdentifier, IfcLabel? ContextType, IfcDimensionCount? CoordinateSpaceDimension, REAL? Precision, IfcAxis2Placement? WorldCoordinateSystem, IfcDirection? TrueNorth, IfcGeometricRepresentationContext? ParentContext, IfcPositiveRatioMeasure? TargetScale, IfcGeometricProjectionEnum? TargetView, IfcLabel? UserDefinedTargetView) : base (ContextIdentifier, ContextType, CoordinateSpaceDimension, Precision, WorldCoordinateSystem, TrueNorth)
		{
			this.ParentContext = ParentContext;
			this.TargetScale = TargetScale;
			this.TargetView = TargetView;
			this.UserDefinedTargetView = UserDefinedTargetView;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextIdentifier,
				ContextType,
				CoordinateSpaceDimension,
				Precision,
				WorldCoordinateSystem,
				TrueNorth,
				ParentContext,
				TargetScale,
				TargetView,
				UserDefinedTargetView
			};
		}
		public virtual Global.IfcGeometricRepresentationContext? _ParentContext { get { return ParentContext; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _TargetScale { get { return TargetScale; } set { } }
		public virtual Global.IfcGeometricProjectionEnum? _TargetView { get { return TargetView; } set { } }
		public virtual Global.IfcLabel? _UserDefinedTargetView { get { return UserDefinedTargetView; } set { } }
		public override Global.IfcAxis2Placement? _WorldCoordinateSystem { get { return WorldCoordinateSystem; } set { } }
		public override Global.IfcDimensionCount? _CoordinateSpaceDimension { get { return CoordinateSpaceDimension; } set { } }
		public override Global.IfcDirection? _TrueNorth { get { return TrueNorth; } set { } }
		public override REAL? _Precision { get { return Precision; } set { } }
	}
	/// <summary>
	/// ENTITY IfcGeometricSet
	/// SUPERTYPE OF (ONEOF
	/// (IfcGeometricCurveSet))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Elements : SET [1:?] OF IfcGeometricSetSelect;
	/// DERIVE
	/// Dim : IfcDimensionCount := Elements[1].Dim;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(Temp <* Elements |
	/// Temp.Dim <> Elements[1].Dim))
	/// = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcGeometricSet : IfcGeometricRepresentationItem, Global.IfcGeometricSet
	{
		public virtual List<IfcGeometricSetSelect>? Elements { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcGeometricSet() : base()
		{
		}
		public IfcGeometricSet(List<IfcGeometricSetSelect>? Elements) : base ()
		{
			this.Elements = Elements;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Elements
			};
		}
		public virtual List<Global.IfcGeometricSetSelect>? _Elements
		{
			get
			{
				if(Elements != null)
				{
					List<Global.IfcGeometricSetSelect>? items = new List<Global.IfcGeometricSetSelect>();
					foreach (IfcGeometricSetSelect item in Elements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcGrid
	/// SUBTYPE OF (IfcProduct);
	/// UAxes : LIST [1:?] OF UNIQUE IfcGridAxis;
	/// VAxes : LIST [1:?] OF UNIQUE IfcGridAxis;
	/// WAxes : OPTIONAL LIST [1:?] OF UNIQUE IfcGridAxis;
	/// INVERSE
	/// ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
	/// WHERE
	/// WR41 : EXISTS(SELF\IfcProduct.ObjectPlacement);
	/// END_ENTITY;
	/// <summary>
	public class IfcGrid : IfcProduct, Global.IfcGrid
	{
		public virtual List<IfcGridAxis>? UAxes { get; set; }
		public virtual List<IfcGridAxis>? VAxes { get; set; }
		public virtual List<IfcGridAxis>? WAxes { get; set; }
		public List<IfcRelContainedInSpatialStructure>? ContainedInStructure => Model?.GetItems<IfcRelContainedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList();
		public IfcGrid() : base()
		{
		}
		public IfcGrid(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, List<IfcGridAxis>? UAxes, List<IfcGridAxis>? VAxes, List<IfcGridAxis>? WAxes) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.UAxes = UAxes;
			this.VAxes = VAxes;
			this.WAxes = WAxes;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				UAxes,
				VAxes,
				WAxes
			};
		}
		public virtual List<Global.IfcGridAxis>? _UAxes
		{
			get
			{
				if(UAxes != null)
				{
					List<Global.IfcGridAxis>? items = new List<Global.IfcGridAxis>();
					foreach (IfcGridAxis item in UAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcGridAxis>? _VAxes
		{
			get
			{
				if(VAxes != null)
				{
					List<Global.IfcGridAxis>? items = new List<Global.IfcGridAxis>();
					foreach (IfcGridAxis item in VAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcGridAxis>? _WAxes
		{
			get
			{
				if(WAxes != null)
				{
					List<Global.IfcGridAxis>? items = new List<Global.IfcGridAxis>();
					foreach (IfcGridAxis item in WAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelContainedInSpatialStructure>? _ContainedInStructure
		{
			get
			{
				if(ContainedInStructure != null)
				{
					List<Global.IfcRelContainedInSpatialStructure>? items = new List<Global.IfcRelContainedInSpatialStructure>();
					foreach (IfcRelContainedInSpatialStructure item in ContainedInStructure)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGridAxis;
	/// AxisTag : OPTIONAL IfcLabel;
	/// AxisCurve : IfcCurve;
	/// SameSense : IfcBoolean;
	/// INVERSE
	/// PartOfW : SET [0:1] OF IfcGrid FOR WAxes;
	/// PartOfV : SET [0:1] OF IfcGrid FOR VAxes;
	/// PartOfU : SET [0:1] OF IfcGrid FOR UAxes;
	/// HasIntersections : SET [0:?] OF IfcVirtualGridIntersection FOR IntersectingAxes;
	/// WHERE
	/// WR1 : AxisCurve.Dim = 2;
	/// WR2 : (SIZEOF(PartOfU) = 1) XOR (SIZEOF(PartOfV) = 1) XOR (SIZEOF(PartOfW) = 1);
	/// END_ENTITY;
	/// <summary>
	public class IfcGridAxis : Ifc_Entity, Global.IfcGridAxis
	{
		public virtual IfcLabel? AxisTag { get; set; }
		public virtual IfcCurve? AxisCurve { get; set; }
		public virtual IfcBoolean? SameSense { get; set; }
		public List<IfcGrid>? PartOfW => Model?.GetItems<IfcGrid>().Where(x => x.WAxes != null && x.WAxes.Contains(this)).ToList();
		public List<IfcGrid>? PartOfV => Model?.GetItems<IfcGrid>().Where(x => x.VAxes != null && x.VAxes.Contains(this)).ToList();
		public List<IfcGrid>? PartOfU => Model?.GetItems<IfcGrid>().Where(x => x.UAxes != null && x.UAxes.Contains(this)).ToList();
		public List<IfcVirtualGridIntersection>? HasIntersections => Model?.GetItems<IfcVirtualGridIntersection>().Where(x => x.IntersectingAxes != null && x.IntersectingAxes.Contains(this)).ToList();
		public IfcGridAxis() : base()
		{
		}
		public IfcGridAxis(IfcLabel? AxisTag, IfcCurve? AxisCurve, IfcBoolean? SameSense) : base ()
		{
			this.AxisTag = AxisTag;
			this.AxisCurve = AxisCurve;
			this.SameSense = SameSense;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				AxisTag,
				AxisCurve,
				SameSense
			};
		}
		public virtual Global.IfcLabel? _AxisTag { get { return AxisTag; } set { } }
		public virtual Global.IfcCurve? _AxisCurve { get { return AxisCurve; } set { } }
		public virtual Global.IfcBoolean? _SameSense { get { return SameSense; } set { } }
		public virtual List<Global.IfcGrid>? _PartOfW
		{
			get
			{
				if(PartOfW != null)
				{
					List<Global.IfcGrid>? items = new List<Global.IfcGrid>();
					foreach (IfcGrid item in PartOfW)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcGrid>? _PartOfV
		{
			get
			{
				if(PartOfV != null)
				{
					List<Global.IfcGrid>? items = new List<Global.IfcGrid>();
					foreach (IfcGrid item in PartOfV)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcGrid>? _PartOfU
		{
			get
			{
				if(PartOfU != null)
				{
					List<Global.IfcGrid>? items = new List<Global.IfcGrid>();
					foreach (IfcGrid item in PartOfU)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcVirtualGridIntersection>? _HasIntersections
		{
			get
			{
				if(HasIntersections != null)
				{
					List<Global.IfcVirtualGridIntersection>? items = new List<Global.IfcVirtualGridIntersection>();
					foreach (IfcVirtualGridIntersection item in HasIntersections)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGridPlacement
	/// SUBTYPE OF (IfcObjectPlacement);
	/// PlacementLocation : IfcVirtualGridIntersection;
	/// PlacementRefDirection : OPTIONAL IfcVirtualGridIntersection;
	/// END_ENTITY;
	/// <summary>
	public class IfcGridPlacement : IfcObjectPlacement, Global.IfcGridPlacement
	{
		public virtual IfcVirtualGridIntersection? PlacementLocation { get; set; }
		public virtual IfcVirtualGridIntersection? PlacementRefDirection { get; set; }
		public IfcGridPlacement() : base()
		{
		}
		public IfcGridPlacement(IfcVirtualGridIntersection? PlacementLocation, IfcVirtualGridIntersection? PlacementRefDirection) : base ()
		{
			this.PlacementLocation = PlacementLocation;
			this.PlacementRefDirection = PlacementRefDirection;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				PlacementLocation,
				PlacementRefDirection
			};
		}
		public virtual Global.IfcVirtualGridIntersection? _PlacementLocation { get { return PlacementLocation; } set { } }
		public virtual Global.IfcVirtualGridIntersection? _PlacementRefDirection { get { return PlacementRefDirection; } set { } }
	}
	/// <summary>
	/// ENTITY IfcGroup
	/// SUPERTYPE OF (ONEOF
	/// (IfcAsset
	/// ,IfcCondition
	/// ,IfcInventory
	/// ,IfcStructuralLoadGroup
	/// ,IfcStructuralResultGroup
	/// ,IfcSystem
	/// ,IfcZone))
	/// SUBTYPE OF (IfcObject);
	/// INVERSE
	/// IsGroupedBy : IfcRelAssignsToGroup FOR RelatingGroup;
	/// END_ENTITY;
	/// <summary>
	public class IfcGroup : IfcObject, Global.IfcGroup
	{
		public IfcRelAssignsToGroup? IsGroupedBy => Model?.GetItems<IfcRelAssignsToGroup>().FirstOrDefault(x => x.RelatingGroup != null && x.RelatingGroup == this);
		public IfcGroup() : base()
		{
		}
		public IfcGroup(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
		public virtual Global.IfcRelAssignsToGroup? _IsGroupedBy { get { return IsGroupedBy; } set { } }
	}
	/// <summary>
	/// ENTITY IfcHalfSpaceSolid
	/// SUPERTYPE OF (ONEOF
	/// (IfcBoxedHalfSpace
	/// ,IfcPolygonalBoundedHalfSpace))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// BaseSurface : IfcSurface;
	/// AgreementFlag : BOOLEAN;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcHalfSpaceSolid : IfcGeometricRepresentationItem, IfcBooleanOperand, Global.IfcHalfSpaceSolid
	{
		public virtual IfcSurface? BaseSurface { get; set; }
		public virtual BOOLEAN? AgreementFlag { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcHalfSpaceSolid() : base()
		{
		}
		public IfcHalfSpaceSolid(IfcSurface? BaseSurface, BOOLEAN? AgreementFlag) : base ()
		{
			this.BaseSurface = BaseSurface;
			this.AgreementFlag = AgreementFlag;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BaseSurface,
				AgreementFlag
			};
		}
		public virtual Global.IfcSurface? _BaseSurface { get { return BaseSurface; } set { } }
		public virtual BOOLEAN? _AgreementFlag { get { return AgreementFlag; } set { } }
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcHeatExchangerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcHeatExchangerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcHeatExchangerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcHeatExchangerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcHeatExchangerType : IfcEnergyConversionDeviceType, Global.IfcHeatExchangerType
	{
		public virtual IfcHeatExchangerTypeEnum? PredefinedType { get; set; }
		public IfcHeatExchangerType() : base()
		{
		}
		public IfcHeatExchangerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcHeatExchangerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcHeatExchangerTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcHumidifierType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcHumidifierTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcHumidifierTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcHumidifierTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcHumidifierType : IfcEnergyConversionDeviceType, Global.IfcHumidifierType
	{
		public virtual IfcHumidifierTypeEnum? PredefinedType { get; set; }
		public IfcHumidifierType() : base()
		{
		}
		public IfcHumidifierType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcHumidifierTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcHumidifierTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcHygroscopicMaterialProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// UpperVaporResistanceFactor : OPTIONAL IfcPositiveRatioMeasure;
	/// LowerVaporResistanceFactor : OPTIONAL IfcPositiveRatioMeasure;
	/// IsothermalMoistureCapacity : OPTIONAL IfcIsothermalMoistureCapacityMeasure;
	/// VaporPermeability : OPTIONAL IfcVaporPermeabilityMeasure;
	/// MoistureDiffusivity : OPTIONAL IfcMoistureDiffusivityMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IfcHygroscopicMaterialProperties : IfcMaterialProperties, Global.IfcHygroscopicMaterialProperties
	{
		public virtual IfcPositiveRatioMeasure? UpperVaporResistanceFactor { get; set; }
		public virtual IfcPositiveRatioMeasure? LowerVaporResistanceFactor { get; set; }
		public virtual IfcIsothermalMoistureCapacityMeasure? IsothermalMoistureCapacity { get; set; }
		public virtual IfcVaporPermeabilityMeasure? VaporPermeability { get; set; }
		public virtual IfcMoistureDiffusivityMeasure? MoistureDiffusivity { get; set; }
		public IfcHygroscopicMaterialProperties() : base()
		{
		}
		public IfcHygroscopicMaterialProperties(IfcMaterial? Material, IfcPositiveRatioMeasure? UpperVaporResistanceFactor, IfcPositiveRatioMeasure? LowerVaporResistanceFactor, IfcIsothermalMoistureCapacityMeasure? IsothermalMoistureCapacity, IfcVaporPermeabilityMeasure? VaporPermeability, IfcMoistureDiffusivityMeasure? MoistureDiffusivity) : base (Material)
		{
			this.UpperVaporResistanceFactor = UpperVaporResistanceFactor;
			this.LowerVaporResistanceFactor = LowerVaporResistanceFactor;
			this.IsothermalMoistureCapacity = IsothermalMoistureCapacity;
			this.VaporPermeability = VaporPermeability;
			this.MoistureDiffusivity = MoistureDiffusivity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				UpperVaporResistanceFactor,
				LowerVaporResistanceFactor,
				IsothermalMoistureCapacity,
				VaporPermeability,
				MoistureDiffusivity
			};
		}
		public virtual Global.IfcPositiveRatioMeasure? _UpperVaporResistanceFactor { get { return UpperVaporResistanceFactor; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _LowerVaporResistanceFactor { get { return LowerVaporResistanceFactor; } set { } }
		public virtual Global.IfcIsothermalMoistureCapacityMeasure? _IsothermalMoistureCapacity { get { return IsothermalMoistureCapacity; } set { } }
		public virtual Global.IfcVaporPermeabilityMeasure? _VaporPermeability { get { return VaporPermeability; } set { } }
		public virtual Global.IfcMoistureDiffusivityMeasure? _MoistureDiffusivity { get { return MoistureDiffusivity; } set { } }
	}
	/// <summary>
	/// ENTITY IfcIShapeProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcAsymmetricIShapeProfileDef))
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// OverallWidth : IfcPositiveLengthMeasure;
	/// OverallDepth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR1 : FlangeThickness < (OverallDepth / 2.);
	/// WR2 : WebThickness < OverallWidth;
	/// WR3 : NOT(EXISTS(FilletRadius)) OR
	/// ((FilletRadius <= (OverallWidth - WebThickness)/2.) AND
	/// (FilletRadius <= (OverallDepth - (2. * FlangeThickness))/2.));
	/// END_ENTITY;
	/// <summary>
	public class IfcIShapeProfileDef : IfcParameterizedProfileDef, Global.IfcIShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? OverallWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? OverallDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FilletRadius { get; set; }
		public IfcIShapeProfileDef() : base()
		{
		}
		public IfcIShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? OverallWidth, IfcPositiveLengthMeasure? OverallDepth, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? FlangeThickness, IfcPositiveLengthMeasure? FilletRadius) : base (ProfileType, ProfileName, Position)
		{
			this.OverallWidth = OverallWidth;
			this.OverallDepth = OverallDepth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				OverallWidth,
				OverallDepth,
				WebThickness,
				FlangeThickness,
				FilletRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallWidth { get { return OverallWidth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _OverallDepth { get { return OverallDepth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _WebThickness { get { return WebThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FlangeThickness { get { return FlangeThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FilletRadius { get { return FilletRadius; } set { } }
	}
	/// <summary>
	/// ENTITY IfcImageTexture
	/// SUBTYPE OF (IfcSurfaceTexture);
	/// UrlReference : IfcIdentifier;
	/// END_ENTITY;
	/// <summary>
	public class IfcImageTexture : IfcSurfaceTexture, Global.IfcImageTexture
	{
		public virtual IfcIdentifier? UrlReference { get; set; }
		public IfcImageTexture() : base()
		{
		}
		public IfcImageTexture(BOOLEAN? RepeatS, BOOLEAN? RepeatT, IfcSurfaceTextureEnum? TextureType, IfcCartesianTransformationOperator2D? TextureTransform, IfcIdentifier? UrlReference) : base (RepeatS, RepeatT, TextureType, TextureTransform)
		{
			this.UrlReference = UrlReference;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RepeatS,
				RepeatT,
				TextureType,
				TextureTransform,
				UrlReference
			};
		}
		public virtual Global.IfcIdentifier? _UrlReference { get { return UrlReference; } set { } }
	}
	/// <summary>
	/// ENTITY IfcInventory
	/// SUBTYPE OF (IfcGroup);
	/// InventoryType : IfcInventoryTypeEnum;
	/// Jurisdiction : IfcActorSelect;
	/// ResponsiblePersons : SET [1:?] OF IfcPerson;
	/// LastUpdateDate : IfcCalendarDate;
	/// CurrentValue : OPTIONAL IfcCostValue;
	/// OriginalValue : OPTIONAL IfcCostValue;
	/// WHERE
	/// WR41 : SIZEOF(QUERY(temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects |
	/// NOT( ('IFC2X3.IFCSPACE' IN TYPEOF (temp)) OR
	/// ('IFC2X3.IFCASSET' IN TYPEOF (temp)) OR
	/// ('IFC2X3.IFCFURNISHINGELEMENT' IN TYPEOF (temp))
	/// ))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcInventory : IfcGroup, Global.IfcInventory
	{
		public virtual IfcInventoryTypeEnum? InventoryType { get; set; }
		public virtual IfcActorSelect? Jurisdiction { get; set; }
		public virtual List<IfcPerson>? ResponsiblePersons { get; set; }
		public virtual IfcCalendarDate? LastUpdateDate { get; set; }
		public virtual IfcCostValue? CurrentValue { get; set; }
		public virtual IfcCostValue? OriginalValue { get; set; }
		public IfcInventory() : base()
		{
		}
		public IfcInventory(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcInventoryTypeEnum? InventoryType, IfcActorSelect? Jurisdiction, List<IfcPerson>? ResponsiblePersons, IfcCalendarDate? LastUpdateDate, IfcCostValue? CurrentValue, IfcCostValue? OriginalValue) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.InventoryType = InventoryType;
			this.Jurisdiction = Jurisdiction;
			this.ResponsiblePersons = ResponsiblePersons;
			this.LastUpdateDate = LastUpdateDate;
			this.CurrentValue = CurrentValue;
			this.OriginalValue = OriginalValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				InventoryType,
				Jurisdiction,
				ResponsiblePersons,
				LastUpdateDate,
				CurrentValue,
				OriginalValue
			};
		}
		public virtual Global.IfcInventoryTypeEnum? _InventoryType { get { return InventoryType; } set { } }
		public virtual Global.IfcActorSelect? _Jurisdiction { get { return Jurisdiction; } set { } }
		public virtual List<Global.IfcPerson>? _ResponsiblePersons
		{
			get
			{
				if(ResponsiblePersons != null)
				{
					List<Global.IfcPerson>? items = new List<Global.IfcPerson>();
					foreach (IfcPerson item in ResponsiblePersons)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcCalendarDate? _LastUpdateDate { get { return LastUpdateDate; } set { } }
		public virtual Global.IfcCostValue? _CurrentValue { get { return CurrentValue; } set { } }
		public virtual Global.IfcCostValue? _OriginalValue { get { return OriginalValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcIrregularTimeSeries
	/// SUBTYPE OF (IfcTimeSeries);
	/// Values : LIST [1:?] OF IfcIrregularTimeSeriesValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcIrregularTimeSeries : IfcTimeSeries, Global.IfcIrregularTimeSeries
	{
		public virtual List<IfcIrregularTimeSeriesValue>? Values { get; set; }
		public IfcIrregularTimeSeries() : base()
		{
		}
		public IfcIrregularTimeSeries(IfcLabel? Name, IfcText? Description, IfcDateTimeSelect? StartTime, IfcDateTimeSelect? EndTime, IfcTimeSeriesDataTypeEnum? TimeSeriesDataType, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcUnit? Unit, List<IfcIrregularTimeSeriesValue>? Values) : base (Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit)
		{
			this.Values = Values;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				StartTime,
				EndTime,
				TimeSeriesDataType,
				DataOrigin,
				UserDefinedDataOrigin,
				Unit,
				Values
			};
		}
		public virtual List<Global.IfcIrregularTimeSeriesValue>? _Values
		{
			get
			{
				if(Values != null)
				{
					List<Global.IfcIrregularTimeSeriesValue>? items = new List<Global.IfcIrregularTimeSeriesValue>();
					foreach (IfcIrregularTimeSeriesValue item in Values)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIrregularTimeSeriesValue;
	/// TimeStamp : IfcDateTimeSelect;
	/// ListValues : LIST [1:?] OF IfcValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcIrregularTimeSeriesValue : Ifc_Entity, Global.IfcIrregularTimeSeriesValue
	{
		public virtual IfcDateTimeSelect? TimeStamp { get; set; }
		public virtual List<IfcValue>? ListValues { get; set; }
		public IfcIrregularTimeSeriesValue() : base()
		{
		}
		public IfcIrregularTimeSeriesValue(IfcDateTimeSelect? TimeStamp, List<IfcValue>? ListValues) : base ()
		{
			this.TimeStamp = TimeStamp;
			this.ListValues = ListValues;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TimeStamp,
				ListValues
			};
		}
		public virtual Global.IfcDateTimeSelect? _TimeStamp { get { return TimeStamp; } set { } }
		public virtual List<Global.IfcValue>? _ListValues
		{
			get
			{
				if(ListValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in ListValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcJunctionBoxType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcJunctionBoxTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcJunctionBoxType : IfcFlowFittingType, Global.IfcJunctionBoxType
	{
		public virtual IfcJunctionBoxTypeEnum? PredefinedType { get; set; }
		public IfcJunctionBoxType() : base()
		{
		}
		public IfcJunctionBoxType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcJunctionBoxTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcJunctionBoxTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// Width : OPTIONAL IfcPositiveLengthMeasure;
	/// Thickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// EdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// LegSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// CentreOfGravityInX : OPTIONAL IfcPositiveLengthMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR21 : Thickness < Depth;
	/// WR22 : NOT(EXISTS(Width)) OR (Thickness < Width);
	/// END_ENTITY;
	/// <summary>
	public class IfcLShapeProfileDef : IfcParameterizedProfileDef, Global.IfcLShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public virtual IfcPositiveLengthMeasure? Width { get; set; }
		public virtual IfcPositiveLengthMeasure? Thickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FilletRadius { get; set; }
		public virtual IfcPositiveLengthMeasure? EdgeRadius { get; set; }
		public virtual IfcPlaneAngleMeasure? LegSlope { get; set; }
		public virtual IfcPositiveLengthMeasure? CentreOfGravityInX { get; set; }
		public virtual IfcPositiveLengthMeasure? CentreOfGravityInY { get; set; }
		public IfcLShapeProfileDef() : base()
		{
		}
		public IfcLShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Depth, IfcPositiveLengthMeasure? Width, IfcPositiveLengthMeasure? Thickness, IfcPositiveLengthMeasure? FilletRadius, IfcPositiveLengthMeasure? EdgeRadius, IfcPlaneAngleMeasure? LegSlope, IfcPositiveLengthMeasure? CentreOfGravityInX, IfcPositiveLengthMeasure? CentreOfGravityInY) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.Width = Width;
			this.Thickness = Thickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.LegSlope = LegSlope;
			this.CentreOfGravityInX = CentreOfGravityInX;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Depth,
				Width,
				Thickness,
				FilletRadius,
				EdgeRadius,
				LegSlope,
				CentreOfGravityInX,
				CentreOfGravityInY
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Depth { get { return Depth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Width { get { return Width; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Thickness { get { return Thickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FilletRadius { get { return FilletRadius; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _EdgeRadius { get { return EdgeRadius; } set { } }
		public virtual Global.IfcPlaneAngleMeasure? _LegSlope { get { return LegSlope; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _CentreOfGravityInX { get { return CentreOfGravityInX; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _CentreOfGravityInY { get { return CentreOfGravityInY; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLaborResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// SkillSet : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IfcLaborResource : IfcConstructionResource, Global.IfcLaborResource
	{
		public virtual IfcText? SkillSet { get; set; }
		public IfcLaborResource() : base()
		{
		}
		public IfcLaborResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? ResourceIdentifier, IfcLabel? ResourceGroup, IfcResourceConsumptionEnum? ResourceConsumption, IfcMeasureWithUnit? BaseQuantity, IfcText? SkillSet) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
			this.SkillSet = SkillSet;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ResourceIdentifier,
				ResourceGroup,
				ResourceConsumption,
				BaseQuantity,
				SkillSet
			};
		}
		public virtual Global.IfcText? _SkillSet { get { return SkillSet; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLampType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcLampTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcLampType : IfcFlowTerminalType, Global.IfcLampType
	{
		public virtual IfcLampTypeEnum? PredefinedType { get; set; }
		public IfcLampType() : base()
		{
		}
		public IfcLampType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcLampTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcLampTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLibraryInformation;
	/// Name : IfcLabel;
	/// Version : OPTIONAL IfcLabel;
	/// Publisher : OPTIONAL IfcOrganization;
	/// VersionDate : OPTIONAL IfcCalendarDate;
	/// LibraryReference : OPTIONAL SET [1:?] OF IfcLibraryReference;
	/// END_ENTITY;
	/// <summary>
	public class IfcLibraryInformation : Ifc_Entity, IfcLibrarySelect, Global.IfcLibraryInformation
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcLabel? Version { get; set; }
		public virtual IfcOrganization? Publisher { get; set; }
		public virtual IfcCalendarDate? VersionDate { get; set; }
		public virtual List<IfcLibraryReference>? LibraryReference { get; set; }
		public IfcLibraryInformation() : base()
		{
		}
		public IfcLibraryInformation(IfcLabel? Name, IfcLabel? Version, IfcOrganization? Publisher, IfcCalendarDate? VersionDate, List<IfcLibraryReference>? LibraryReference) : base ()
		{
			this.Name = Name;
			this.Version = Version;
			this.Publisher = Publisher;
			this.VersionDate = VersionDate;
			this.LibraryReference = LibraryReference;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Version,
				Publisher,
				VersionDate,
				LibraryReference
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcLabel? _Version { get { return Version; } set { } }
		public virtual Global.IfcOrganization? _Publisher { get { return Publisher; } set { } }
		public virtual Global.IfcCalendarDate? _VersionDate { get { return VersionDate; } set { } }
		public virtual List<Global.IfcLibraryReference>? _LibraryReference
		{
			get
			{
				if(LibraryReference != null)
				{
					List<Global.IfcLibraryReference>? items = new List<Global.IfcLibraryReference>();
					foreach (IfcLibraryReference item in LibraryReference)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLibraryReference
	/// SUBTYPE OF (IfcExternalReference);
	/// INVERSE
	/// ReferenceIntoLibrary : SET [0:1] OF IfcLibraryInformation FOR LibraryReference;
	/// END_ENTITY;
	/// <summary>
	public class IfcLibraryReference : IfcExternalReference, IfcLibrarySelect, Global.IfcLibraryReference
	{
		public List<IfcLibraryInformation>? ReferenceIntoLibrary => Model?.GetItems<IfcLibraryInformation>().Where(x => x.LibraryReference != null && x.LibraryReference.Contains(this)).ToList();
		public IfcLibraryReference() : base()
		{
		}
		public IfcLibraryReference(IfcLabel? Location, IfcIdentifier? ItemReference, IfcLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location,
				ItemReference,
				Name
			};
		}
		public virtual List<Global.IfcLibraryInformation>? _ReferenceIntoLibrary
		{
			get
			{
				if(ReferenceIntoLibrary != null)
				{
					List<Global.IfcLibraryInformation>? items = new List<Global.IfcLibraryInformation>();
					foreach (IfcLibraryInformation item in ReferenceIntoLibrary)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightDistributionData;
	/// MainPlaneAngle : IfcPlaneAngleMeasure;
	/// SecondaryPlaneAngle : LIST [1:?] OF IfcPlaneAngleMeasure;
	/// LuminousIntensity : LIST [1:?] OF IfcLuminousIntensityDistributionMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightDistributionData : Ifc_Entity, Global.IfcLightDistributionData
	{
		public virtual IfcPlaneAngleMeasure? MainPlaneAngle { get; set; }
		public virtual List<IfcPlaneAngleMeasure>? SecondaryPlaneAngle { get; set; }
		public virtual List<IfcLuminousIntensityDistributionMeasure>? LuminousIntensity { get; set; }
		public IfcLightDistributionData() : base()
		{
		}
		public IfcLightDistributionData(IfcPlaneAngleMeasure? MainPlaneAngle, List<IfcPlaneAngleMeasure>? SecondaryPlaneAngle, List<IfcLuminousIntensityDistributionMeasure>? LuminousIntensity) : base ()
		{
			this.MainPlaneAngle = MainPlaneAngle;
			this.SecondaryPlaneAngle = SecondaryPlaneAngle;
			this.LuminousIntensity = LuminousIntensity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				MainPlaneAngle,
				SecondaryPlaneAngle,
				LuminousIntensity
			};
		}
		public virtual Global.IfcPlaneAngleMeasure? _MainPlaneAngle { get { return MainPlaneAngle; } set { } }
		public virtual List<Global.IfcPlaneAngleMeasure>? _SecondaryPlaneAngle
		{
			get
			{
				if(SecondaryPlaneAngle != null)
				{
					List<Global.IfcPlaneAngleMeasure>? items = new List<Global.IfcPlaneAngleMeasure>();
					foreach (IfcPlaneAngleMeasure item in SecondaryPlaneAngle)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcLuminousIntensityDistributionMeasure>? _LuminousIntensity
		{
			get
			{
				if(LuminousIntensity != null)
				{
					List<Global.IfcLuminousIntensityDistributionMeasure>? items = new List<Global.IfcLuminousIntensityDistributionMeasure>();
					foreach (IfcLuminousIntensityDistributionMeasure item in LuminousIntensity)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightFixtureType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcLightFixtureTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightFixtureType : IfcFlowTerminalType, Global.IfcLightFixtureType
	{
		public virtual IfcLightFixtureTypeEnum? PredefinedType { get; set; }
		public IfcLightFixtureType() : base()
		{
		}
		public IfcLightFixtureType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcLightFixtureTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcLightFixtureTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLightIntensityDistribution;
	/// LightDistributionCurve : IfcLightDistributionCurveEnum;
	/// DistributionData : LIST [1:?] OF IfcLightDistributionData;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightIntensityDistribution : Ifc_Entity, IfcLightDistributionDataSourceSelect, Global.IfcLightIntensityDistribution
	{
		public virtual IfcLightDistributionCurveEnum? LightDistributionCurve { get; set; }
		public virtual List<IfcLightDistributionData>? DistributionData { get; set; }
		public IfcLightIntensityDistribution() : base()
		{
		}
		public IfcLightIntensityDistribution(IfcLightDistributionCurveEnum? LightDistributionCurve, List<IfcLightDistributionData>? DistributionData) : base ()
		{
			this.LightDistributionCurve = LightDistributionCurve;
			this.DistributionData = DistributionData;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				LightDistributionCurve,
				DistributionData
			};
		}
		public virtual Global.IfcLightDistributionCurveEnum? _LightDistributionCurve { get { return LightDistributionCurve; } set { } }
		public virtual List<Global.IfcLightDistributionData>? _DistributionData
		{
			get
			{
				if(DistributionData != null)
				{
					List<Global.IfcLightDistributionData>? items = new List<Global.IfcLightDistributionData>();
					foreach (IfcLightDistributionData item in DistributionData)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightSource
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcLightSourceAmbient
	/// ,IfcLightSourceDirectional
	/// ,IfcLightSourceGoniometric
	/// ,IfcLightSourcePositional))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Name : OPTIONAL IfcLabel;
	/// LightColour : IfcColourRgb;
	/// AmbientIntensity : OPTIONAL IfcNormalisedRatioMeasure;
	/// Intensity : OPTIONAL IfcNormalisedRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcLightSource : IfcGeometricRepresentationItem, Global.IfcLightSource
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcColourRgb? LightColour { get; set; }
		public virtual IfcNormalisedRatioMeasure? AmbientIntensity { get; set; }
		public virtual IfcNormalisedRatioMeasure? Intensity { get; set; }
		public IfcLightSource() : base()
		{
		}
		public IfcLightSource(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity) : base ()
		{
			this.Name = Name;
			this.LightColour = LightColour;
			this.AmbientIntensity = AmbientIntensity;
			this.Intensity = Intensity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcColourRgb? _LightColour { get { return LightColour; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _AmbientIntensity { get { return AmbientIntensity; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _Intensity { get { return Intensity; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLightSourceAmbient
	/// SUBTYPE OF (IfcLightSource);
	/// END_ENTITY;
	/// <summary>
	public class IfcLightSourceAmbient : IfcLightSource, Global.IfcLightSourceAmbient
	{
		public IfcLightSourceAmbient() : base()
		{
		}
		public IfcLightSourceAmbient(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity
			};
		}
	}
	/// <summary>
	/// ENTITY IfcLightSourceDirectional
	/// SUBTYPE OF (IfcLightSource);
	/// Orientation : IfcDirection;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightSourceDirectional : IfcLightSource, Global.IfcLightSourceDirectional
	{
		public virtual IfcDirection? Orientation { get; set; }
		public IfcLightSourceDirectional() : base()
		{
		}
		public IfcLightSourceDirectional(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity, IfcDirection? Orientation) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
			this.Orientation = Orientation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity,
				Orientation
			};
		}
		public virtual Global.IfcDirection? _Orientation { get { return Orientation; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLightSourceGoniometric
	/// SUBTYPE OF (IfcLightSource);
	/// Position : IfcAxis2Placement3D;
	/// ColourAppearance : OPTIONAL IfcColourRgb;
	/// ColourTemperature : IfcThermodynamicTemperatureMeasure;
	/// LuminousFlux : IfcLuminousFluxMeasure;
	/// LightEmissionSource : IfcLightEmissionSourceEnum;
	/// LightDistributionDataSource : IfcLightDistributionDataSourceSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightSourceGoniometric : IfcLightSource, Global.IfcLightSourceGoniometric
	{
		public virtual IfcAxis2Placement3D? Position { get; set; }
		public virtual IfcColourRgb? ColourAppearance { get; set; }
		public virtual IfcThermodynamicTemperatureMeasure? ColourTemperature { get; set; }
		public virtual IfcLuminousFluxMeasure? LuminousFlux { get; set; }
		public virtual IfcLightEmissionSourceEnum? LightEmissionSource { get; set; }
		public virtual IfcLightDistributionDataSourceSelect? LightDistributionDataSource { get; set; }
		public IfcLightSourceGoniometric() : base()
		{
		}
		public IfcLightSourceGoniometric(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity, IfcAxis2Placement3D? Position, IfcColourRgb? ColourAppearance, IfcThermodynamicTemperatureMeasure? ColourTemperature, IfcLuminousFluxMeasure? LuminousFlux, IfcLightEmissionSourceEnum? LightEmissionSource, IfcLightDistributionDataSourceSelect? LightDistributionDataSource) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
			this.Position = Position;
			this.ColourAppearance = ColourAppearance;
			this.ColourTemperature = ColourTemperature;
			this.LuminousFlux = LuminousFlux;
			this.LightEmissionSource = LightEmissionSource;
			this.LightDistributionDataSource = LightDistributionDataSource;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity,
				Position,
				ColourAppearance,
				ColourTemperature,
				LuminousFlux,
				LightEmissionSource,
				LightDistributionDataSource
			};
		}
		public virtual Global.IfcAxis2Placement3D? _Position { get { return Position; } set { } }
		public virtual Global.IfcColourRgb? _ColourAppearance { get { return ColourAppearance; } set { } }
		public virtual Global.IfcThermodynamicTemperatureMeasure? _ColourTemperature { get { return ColourTemperature; } set { } }
		public virtual Global.IfcLuminousFluxMeasure? _LuminousFlux { get { return LuminousFlux; } set { } }
		public virtual Global.IfcLightEmissionSourceEnum? _LightEmissionSource { get { return LightEmissionSource; } set { } }
		public virtual Global.IfcLightDistributionDataSourceSelect? _LightDistributionDataSource { get { return LightDistributionDataSource; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLightSourcePositional
	/// SUPERTYPE OF (ONEOF
	/// (IfcLightSourceSpot))
	/// SUBTYPE OF (IfcLightSource);
	/// Position : IfcCartesianPoint;
	/// Radius : IfcPositiveLengthMeasure;
	/// ConstantAttenuation : IfcReal;
	/// DistanceAttenuation : IfcReal;
	/// QuadricAttenuation : IfcReal;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightSourcePositional : IfcLightSource, Global.IfcLightSourcePositional
	{
		public virtual IfcCartesianPoint? Position { get; set; }
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public virtual IfcReal? ConstantAttenuation { get; set; }
		public virtual IfcReal? DistanceAttenuation { get; set; }
		public virtual IfcReal? QuadricAttenuation { get; set; }
		public IfcLightSourcePositional() : base()
		{
		}
		public IfcLightSourcePositional(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity, IfcCartesianPoint? Position, IfcPositiveLengthMeasure? Radius, IfcReal? ConstantAttenuation, IfcReal? DistanceAttenuation, IfcReal? QuadricAttenuation) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
			this.Position = Position;
			this.Radius = Radius;
			this.ConstantAttenuation = ConstantAttenuation;
			this.DistanceAttenuation = DistanceAttenuation;
			this.QuadricAttenuation = QuadricAttenuation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity,
				Position,
				Radius,
				ConstantAttenuation,
				DistanceAttenuation,
				QuadricAttenuation
			};
		}
		public virtual Global.IfcCartesianPoint? _Position { get { return Position; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Radius { get { return Radius; } set { } }
		public virtual Global.IfcReal? _ConstantAttenuation { get { return ConstantAttenuation; } set { } }
		public virtual Global.IfcReal? _DistanceAttenuation { get { return DistanceAttenuation; } set { } }
		public virtual Global.IfcReal? _QuadricAttenuation { get { return QuadricAttenuation; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLightSourceSpot
	/// SUBTYPE OF (IfcLightSourcePositional);
	/// Orientation : IfcDirection;
	/// ConcentrationExponent : OPTIONAL IfcReal;
	/// SpreadAngle : IfcPositivePlaneAngleMeasure;
	/// BeamWidthAngle : IfcPositivePlaneAngleMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcLightSourceSpot : IfcLightSourcePositional, Global.IfcLightSourceSpot
	{
		public virtual IfcDirection? Orientation { get; set; }
		public virtual IfcReal? ConcentrationExponent { get; set; }
		public virtual IfcPositivePlaneAngleMeasure? SpreadAngle { get; set; }
		public virtual IfcPositivePlaneAngleMeasure? BeamWidthAngle { get; set; }
		public IfcLightSourceSpot() : base()
		{
		}
		public IfcLightSourceSpot(IfcLabel? Name, IfcColourRgb? LightColour, IfcNormalisedRatioMeasure? AmbientIntensity, IfcNormalisedRatioMeasure? Intensity, IfcCartesianPoint? Position, IfcPositiveLengthMeasure? Radius, IfcReal? ConstantAttenuation, IfcReal? DistanceAttenuation, IfcReal? QuadricAttenuation, IfcDirection? Orientation, IfcReal? ConcentrationExponent, IfcPositivePlaneAngleMeasure? SpreadAngle, IfcPositivePlaneAngleMeasure? BeamWidthAngle) : base (Name, LightColour, AmbientIntensity, Intensity, Position, Radius, ConstantAttenuation, DistanceAttenuation, QuadricAttenuation)
		{
			this.Orientation = Orientation;
			this.ConcentrationExponent = ConcentrationExponent;
			this.SpreadAngle = SpreadAngle;
			this.BeamWidthAngle = BeamWidthAngle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LightColour,
				AmbientIntensity,
				Intensity,
				Position,
				Radius,
				ConstantAttenuation,
				DistanceAttenuation,
				QuadricAttenuation,
				Orientation,
				ConcentrationExponent,
				SpreadAngle,
				BeamWidthAngle
			};
		}
		public virtual Global.IfcDirection? _Orientation { get { return Orientation; } set { } }
		public virtual Global.IfcReal? _ConcentrationExponent { get { return ConcentrationExponent; } set { } }
		public virtual Global.IfcPositivePlaneAngleMeasure? _SpreadAngle { get { return SpreadAngle; } set { } }
		public virtual Global.IfcPositivePlaneAngleMeasure? _BeamWidthAngle { get { return BeamWidthAngle; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLine
	/// SUBTYPE OF (IfcCurve);
	/// Pnt : IfcCartesianPoint;
	/// Dir : IfcVector;
	/// WHERE
	/// WR1 : Dir.Dim = Pnt.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IfcLine : IfcCurve, Global.IfcLine
	{
		public virtual IfcCartesianPoint? Pnt { get; set; }
		public virtual IfcVector? Dir { get; set; }
		public IfcLine() : base()
		{
		}
		public IfcLine(IfcCartesianPoint? Pnt, IfcVector? Dir) : base ()
		{
			this.Pnt = Pnt;
			this.Dir = Dir;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Pnt,
				Dir
			};
		}
		public virtual Global.IfcCartesianPoint? _Pnt { get { return Pnt; } set { } }
		public virtual Global.IfcVector? _Dir { get { return Dir; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLinearDimension
	/// SUBTYPE OF (IfcDimensionCurveDirectedCallout);
	/// END_ENTITY;
	/// <summary>
	public class IfcLinearDimension : IfcDimensionCurveDirectedCallout, Global.IfcLinearDimension
	{
		public IfcLinearDimension() : base()
		{
		}
		public IfcLinearDimension(List<IfcDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Contents
			};
		}
	}
	/// <summary>
	/// ENTITY IfcLocalPlacement
	/// SUBTYPE OF (IfcObjectPlacement);
	/// PlacementRelTo : OPTIONAL IfcObjectPlacement;
	/// RelativePlacement : IfcAxis2Placement;
	/// WHERE
	/// WR21 : IfcCorrectLocalPlacement(RelativePlacement, PlacementRelTo);
	/// END_ENTITY;
	/// <summary>
	public class IfcLocalPlacement : IfcObjectPlacement, Global.IfcLocalPlacement
	{
		public virtual IfcObjectPlacement? PlacementRelTo { get; set; }
		public virtual IfcAxis2Placement? RelativePlacement { get; set; }
		public IfcLocalPlacement() : base()
		{
		}
		public IfcLocalPlacement(IfcObjectPlacement? PlacementRelTo, IfcAxis2Placement? RelativePlacement) : base ()
		{
			this.PlacementRelTo = PlacementRelTo;
			this.RelativePlacement = RelativePlacement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				PlacementRelTo,
				RelativePlacement
			};
		}
		public virtual Global.IfcObjectPlacement? _PlacementRelTo { get { return PlacementRelTo; } set { } }
		public virtual Global.IfcAxis2Placement? _RelativePlacement { get { return RelativePlacement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLocalTime;
	/// HourComponent : IfcHourInDay;
	/// MinuteComponent : OPTIONAL IfcMinuteInHour;
	/// SecondComponent : OPTIONAL IfcSecondInMinute;
	/// Zone : OPTIONAL IfcCoordinatedUniversalTimeOffset;
	/// DaylightSavingOffset : OPTIONAL IfcDaylightSavingHour;
	/// WHERE
	/// WR21 : IfcValidTime (SELF);
	/// END_ENTITY;
	/// <summary>
	public class IfcLocalTime : Ifc_Entity, IfcDateTimeSelect, IfcObjectReferenceSelect, Global.IfcLocalTime
	{
		public virtual IfcHourInDay? HourComponent { get; set; }
		public virtual IfcMinuteInHour? MinuteComponent { get; set; }
		public virtual IfcSecondInMinute? SecondComponent { get; set; }
		public virtual IfcCoordinatedUniversalTimeOffset? Zone { get; set; }
		public virtual IfcDaylightSavingHour? DaylightSavingOffset { get; set; }
		public IfcLocalTime() : base()
		{
		}
		public IfcLocalTime(IfcHourInDay? HourComponent, IfcMinuteInHour? MinuteComponent, IfcSecondInMinute? SecondComponent, IfcCoordinatedUniversalTimeOffset? Zone, IfcDaylightSavingHour? DaylightSavingOffset) : base ()
		{
			this.HourComponent = HourComponent;
			this.MinuteComponent = MinuteComponent;
			this.SecondComponent = SecondComponent;
			this.Zone = Zone;
			this.DaylightSavingOffset = DaylightSavingOffset;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				HourComponent,
				MinuteComponent,
				SecondComponent,
				Zone,
				DaylightSavingOffset
			};
		}
		public virtual Global.IfcHourInDay? _HourComponent { get { return HourComponent; } set { } }
		public virtual Global.IfcMinuteInHour? _MinuteComponent { get { return MinuteComponent; } set { } }
		public virtual Global.IfcSecondInMinute? _SecondComponent { get { return SecondComponent; } set { } }
		public virtual Global.IfcCoordinatedUniversalTimeOffset? _Zone { get { return Zone; } set { } }
		public virtual Global.IfcDaylightSavingHour? _DaylightSavingOffset { get { return DaylightSavingOffset; } set { } }
	}
	/// <summary>
	/// ENTITY IfcLoop
	/// SUPERTYPE OF (ONEOF
	/// (IfcEdgeLoop
	/// ,IfcPolyLoop
	/// ,IfcVertexLoop))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public class IfcLoop : IfcTopologicalRepresentationItem, Global.IfcLoop
	{
		public IfcLoop() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcManifoldSolidBrep
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcFacetedBrep
	/// ,IfcFacetedBrepWithVoids))
	/// SUBTYPE OF (IfcSolidModel);
	/// Outer : IfcClosedShell;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcManifoldSolidBrep : IfcSolidModel, Global.IfcManifoldSolidBrep
	{
		public virtual IfcClosedShell? Outer { get; set; }
		public IfcManifoldSolidBrep() : base()
		{
		}
		public IfcManifoldSolidBrep(IfcClosedShell? Outer) : base ()
		{
			this.Outer = Outer;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Outer
			};
		}
		public virtual Global.IfcClosedShell? _Outer { get { return Outer; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMappedItem
	/// SUBTYPE OF (IfcRepresentationItem);
	/// MappingSource : IfcRepresentationMap;
	/// MappingTarget : IfcCartesianTransformationOperator;
	/// END_ENTITY;
	/// <summary>
	public class IfcMappedItem : IfcRepresentationItem, Global.IfcMappedItem
	{
		public virtual IfcRepresentationMap? MappingSource { get; set; }
		public virtual IfcCartesianTransformationOperator? MappingTarget { get; set; }
		public IfcMappedItem() : base()
		{
		}
		public IfcMappedItem(IfcRepresentationMap? MappingSource, IfcCartesianTransformationOperator? MappingTarget) : base ()
		{
			this.MappingSource = MappingSource;
			this.MappingTarget = MappingTarget;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				MappingSource,
				MappingTarget
			};
		}
		public virtual Global.IfcRepresentationMap? _MappingSource { get { return MappingSource; } set { } }
		public virtual Global.IfcCartesianTransformationOperator? _MappingTarget { get { return MappingTarget; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMaterial;
	/// Name : IfcLabel;
	/// INVERSE
	/// HasRepresentation : SET [0:1] OF IfcMaterialDefinitionRepresentation FOR RepresentedMaterial;
	/// ClassifiedAs : SET [0:1] OF IfcMaterialClassificationRelationship FOR ClassifiedMaterial;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterial : Ifc_Entity, IfcMaterialSelect, IfcObjectReferenceSelect, Global.IfcMaterial
	{
		public virtual IfcLabel? Name { get; set; }
		public List<IfcMaterialDefinitionRepresentation>? HasRepresentation => Model?.GetItems<IfcMaterialDefinitionRepresentation>().Where(x => x.RepresentedMaterial != null && x.RepresentedMaterial == this).ToList();
		public List<IfcMaterialClassificationRelationship>? ClassifiedAs => Model?.GetItems<IfcMaterialClassificationRelationship>().Where(x => x.ClassifiedMaterial != null && x.ClassifiedMaterial == this).ToList();
		public IfcMaterial() : base()
		{
		}
		public IfcMaterial(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual List<Global.IfcMaterialDefinitionRepresentation>? _HasRepresentation
		{
			get
			{
				if(HasRepresentation != null)
				{
					List<Global.IfcMaterialDefinitionRepresentation>? items = new List<Global.IfcMaterialDefinitionRepresentation>();
					foreach (IfcMaterialDefinitionRepresentation item in HasRepresentation)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcMaterialClassificationRelationship>? _ClassifiedAs
		{
			get
			{
				if(ClassifiedAs != null)
				{
					List<Global.IfcMaterialClassificationRelationship>? items = new List<Global.IfcMaterialClassificationRelationship>();
					foreach (IfcMaterialClassificationRelationship item in ClassifiedAs)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialClassificationRelationship;
	/// MaterialClassifications : SET [1:?] OF IfcClassificationNotationSelect;
	/// ClassifiedMaterial : IfcMaterial;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialClassificationRelationship : Ifc_Entity, Global.IfcMaterialClassificationRelationship
	{
		public virtual List<IfcClassificationNotationSelect>? MaterialClassifications { get; set; }
		public virtual IfcMaterial? ClassifiedMaterial { get; set; }
		public IfcMaterialClassificationRelationship() : base()
		{
		}
		public IfcMaterialClassificationRelationship(List<IfcClassificationNotationSelect>? MaterialClassifications, IfcMaterial? ClassifiedMaterial) : base ()
		{
			this.MaterialClassifications = MaterialClassifications;
			this.ClassifiedMaterial = ClassifiedMaterial;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				MaterialClassifications,
				ClassifiedMaterial
			};
		}
		public virtual List<Global.IfcClassificationNotationSelect>? _MaterialClassifications
		{
			get
			{
				if(MaterialClassifications != null)
				{
					List<Global.IfcClassificationNotationSelect>? items = new List<Global.IfcClassificationNotationSelect>();
					foreach (IfcClassificationNotationSelect item in MaterialClassifications)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcMaterial? _ClassifiedMaterial { get { return ClassifiedMaterial; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMaterialDefinitionRepresentation
	/// SUBTYPE OF (IfcProductRepresentation);
	/// RepresentedMaterial : IfcMaterial;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(temp <* Representations |
	/// (NOT('IFC2X3.IFCSTYLEDREPRESENTATION' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialDefinitionRepresentation : IfcProductRepresentation, Global.IfcMaterialDefinitionRepresentation
	{
		public virtual IfcMaterial? RepresentedMaterial { get; set; }
		public IfcMaterialDefinitionRepresentation() : base()
		{
		}
		public IfcMaterialDefinitionRepresentation(IfcLabel? Name, IfcText? Description, List<IfcRepresentation>? Representations, IfcMaterial? RepresentedMaterial) : base (Name, Description, Representations)
		{
			this.RepresentedMaterial = RepresentedMaterial;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Representations,
				RepresentedMaterial
			};
		}
		public virtual Global.IfcMaterial? _RepresentedMaterial { get { return RepresentedMaterial; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMaterialLayer;
	/// Material : OPTIONAL IfcMaterial;
	/// LayerThickness : IfcPositiveLengthMeasure;
	/// IsVentilated : OPTIONAL IfcLogical;
	/// INVERSE
	/// ToMaterialLayerSet : IfcMaterialLayerSet FOR MaterialLayers;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialLayer : Ifc_Entity, IfcMaterialSelect, IfcObjectReferenceSelect, Global.IfcMaterialLayer
	{
		public virtual IfcMaterial? Material { get; set; }
		public virtual IfcPositiveLengthMeasure? LayerThickness { get; set; }
		public virtual IfcLogical? IsVentilated { get; set; }
		public IfcMaterialLayerSet? ToMaterialLayerSet => Model?.GetItems<IfcMaterialLayerSet>().FirstOrDefault(x => x.MaterialLayers != null && x.MaterialLayers.Contains(this));
		public IfcMaterialLayer() : base()
		{
		}
		public IfcMaterialLayer(IfcMaterial? Material, IfcPositiveLengthMeasure? LayerThickness, IfcLogical? IsVentilated) : base ()
		{
			this.Material = Material;
			this.LayerThickness = LayerThickness;
			this.IsVentilated = IsVentilated;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				LayerThickness,
				IsVentilated
			};
		}
		public virtual Global.IfcMaterial? _Material { get { return Material; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _LayerThickness { get { return LayerThickness; } set { } }
		public virtual Global.IfcLogical? _IsVentilated { get { return IsVentilated; } set { } }
		public virtual Global.IfcMaterialLayerSet? _ToMaterialLayerSet { get { return ToMaterialLayerSet; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMaterialLayerSet;
	/// MaterialLayers : LIST [1:?] OF IfcMaterialLayer;
	/// LayerSetName : OPTIONAL IfcLabel;
	/// DERIVE
	/// TotalThickness : IfcLengthMeasure := IfcMlsTotalThickness(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialLayerSet : Ifc_Entity, IfcMaterialSelect, Global.IfcMaterialLayerSet
	{
		public virtual List<IfcMaterialLayer>? MaterialLayers { get; set; }
		public virtual IfcLabel? LayerSetName { get; set; }
		//TODO DERIVE
		public virtual IfcLengthMeasure? TotalThickness {get {return null;}}
		public IfcMaterialLayerSet() : base()
		{
		}
		public IfcMaterialLayerSet(List<IfcMaterialLayer>? MaterialLayers, IfcLabel? LayerSetName) : base ()
		{
			this.MaterialLayers = MaterialLayers;
			this.LayerSetName = LayerSetName;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				MaterialLayers,
				LayerSetName
			};
		}
		public virtual List<Global.IfcMaterialLayer>? _MaterialLayers
		{
			get
			{
				if(MaterialLayers != null)
				{
					List<Global.IfcMaterialLayer>? items = new List<Global.IfcMaterialLayer>();
					foreach (IfcMaterialLayer item in MaterialLayers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _LayerSetName { get { return LayerSetName; } set { } }
		public virtual Global.IfcLengthMeasure? _TotalThickness { get { return TotalThickness; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMaterialLayerSetUsage;
	/// ForLayerSet : IfcMaterialLayerSet;
	/// LayerSetDirection : IfcLayerSetDirectionEnum;
	/// DirectionSense : IfcDirectionSenseEnum;
	/// OffsetFromReferenceLine : IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialLayerSetUsage : Ifc_Entity, IfcMaterialSelect, Global.IfcMaterialLayerSetUsage
	{
		public virtual IfcMaterialLayerSet? ForLayerSet { get; set; }
		public virtual IfcLayerSetDirectionEnum? LayerSetDirection { get; set; }
		public virtual IfcDirectionSenseEnum? DirectionSense { get; set; }
		public virtual IfcLengthMeasure? OffsetFromReferenceLine { get; set; }
		public IfcMaterialLayerSetUsage() : base()
		{
		}
		public IfcMaterialLayerSetUsage(IfcMaterialLayerSet? ForLayerSet, IfcLayerSetDirectionEnum? LayerSetDirection, IfcDirectionSenseEnum? DirectionSense, IfcLengthMeasure? OffsetFromReferenceLine) : base ()
		{
			this.ForLayerSet = ForLayerSet;
			this.LayerSetDirection = LayerSetDirection;
			this.DirectionSense = DirectionSense;
			this.OffsetFromReferenceLine = OffsetFromReferenceLine;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ForLayerSet,
				LayerSetDirection,
				DirectionSense,
				OffsetFromReferenceLine
			};
		}
		public virtual Global.IfcMaterialLayerSet? _ForLayerSet { get { return ForLayerSet; } set { } }
		public virtual Global.IfcLayerSetDirectionEnum? _LayerSetDirection { get { return LayerSetDirection; } set { } }
		public virtual Global.IfcDirectionSenseEnum? _DirectionSense { get { return DirectionSense; } set { } }
		public virtual Global.IfcLengthMeasure? _OffsetFromReferenceLine { get { return OffsetFromReferenceLine; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMaterialList;
	/// Materials : LIST [1:?] OF IfcMaterial;
	/// END_ENTITY;
	/// <summary>
	public class IfcMaterialList : Ifc_Entity, IfcMaterialSelect, IfcObjectReferenceSelect, Global.IfcMaterialList
	{
		public virtual List<IfcMaterial>? Materials { get; set; }
		public IfcMaterialList() : base()
		{
		}
		public IfcMaterialList(List<IfcMaterial>? Materials) : base ()
		{
			this.Materials = Materials;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Materials
			};
		}
		public virtual List<Global.IfcMaterial>? _Materials
		{
			get
			{
				if(Materials != null)
				{
					List<Global.IfcMaterial>? items = new List<Global.IfcMaterial>();
					foreach (IfcMaterial item in Materials)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialProperties
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcExtendedMaterialProperties
	/// ,IfcFuelProperties
	/// ,IfcGeneralMaterialProperties
	/// ,IfcHygroscopicMaterialProperties
	/// ,IfcMechanicalMaterialProperties
	/// ,IfcOpticalMaterialProperties
	/// ,IfcProductsOfCombustionProperties
	/// ,IfcThermalMaterialProperties
	/// ,IfcWaterProperties));
	/// Material : IfcMaterial;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcMaterialProperties : Ifc_Entity, Global.IfcMaterialProperties
	{
		public virtual IfcMaterial? Material { get; set; }
		public IfcMaterialProperties() : base()
		{
		}
		public IfcMaterialProperties(IfcMaterial? Material) : base ()
		{
			this.Material = Material;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material
			};
		}
		public virtual Global.IfcMaterial? _Material { get { return Material; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMeasureWithUnit;
	/// ValueComponent : IfcValue;
	/// UnitComponent : IfcUnit;
	/// END_ENTITY;
	/// <summary>
	public class IfcMeasureWithUnit : Ifc_Entity, IfcAppliedValueSelect, IfcConditionCriterionSelect, IfcMetricValueSelect, Global.IfcMeasureWithUnit
	{
		public virtual IfcValue? ValueComponent { get; set; }
		public virtual IfcUnit? UnitComponent { get; set; }
		public IfcMeasureWithUnit() : base()
		{
		}
		public IfcMeasureWithUnit(IfcValue? ValueComponent, IfcUnit? UnitComponent) : base ()
		{
			this.ValueComponent = ValueComponent;
			this.UnitComponent = UnitComponent;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ValueComponent,
				UnitComponent
			};
		}
		public virtual Global.IfcValue? _ValueComponent { get { return ValueComponent; } set { } }
		public virtual Global.IfcUnit? _UnitComponent { get { return UnitComponent; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMechanicalConcreteMaterialProperties
	/// SUBTYPE OF (IfcMechanicalMaterialProperties);
	/// CompressiveStrength : OPTIONAL IfcPressureMeasure;
	/// MaxAggregateSize : OPTIONAL IfcPositiveLengthMeasure;
	/// AdmixturesDescription : OPTIONAL IfcText;
	/// Workability : OPTIONAL IfcText;
	/// ProtectivePoreRatio : OPTIONAL IfcNormalisedRatioMeasure;
	/// WaterImpermeability : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IfcMechanicalConcreteMaterialProperties : IfcMechanicalMaterialProperties, Global.IfcMechanicalConcreteMaterialProperties
	{
		public virtual IfcPressureMeasure? CompressiveStrength { get; set; }
		public virtual IfcPositiveLengthMeasure? MaxAggregateSize { get; set; }
		public virtual IfcText? AdmixturesDescription { get; set; }
		public virtual IfcText? Workability { get; set; }
		public virtual IfcNormalisedRatioMeasure? ProtectivePoreRatio { get; set; }
		public virtual IfcText? WaterImpermeability { get; set; }
		public IfcMechanicalConcreteMaterialProperties() : base()
		{
		}
		public IfcMechanicalConcreteMaterialProperties(IfcMaterial? Material, IfcDynamicViscosityMeasure? DynamicViscosity, IfcModulusOfElasticityMeasure? YoungModulus, IfcModulusOfElasticityMeasure? ShearModulus, IfcPositiveRatioMeasure? PoissonRatio, IfcThermalExpansionCoefficientMeasure? ThermalExpansionCoefficient, IfcPressureMeasure? CompressiveStrength, IfcPositiveLengthMeasure? MaxAggregateSize, IfcText? AdmixturesDescription, IfcText? Workability, IfcNormalisedRatioMeasure? ProtectivePoreRatio, IfcText? WaterImpermeability) : base (Material, DynamicViscosity, YoungModulus, ShearModulus, PoissonRatio, ThermalExpansionCoefficient)
		{
			this.CompressiveStrength = CompressiveStrength;
			this.MaxAggregateSize = MaxAggregateSize;
			this.AdmixturesDescription = AdmixturesDescription;
			this.Workability = Workability;
			this.ProtectivePoreRatio = ProtectivePoreRatio;
			this.WaterImpermeability = WaterImpermeability;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				DynamicViscosity,
				YoungModulus,
				ShearModulus,
				PoissonRatio,
				ThermalExpansionCoefficient,
				CompressiveStrength,
				MaxAggregateSize,
				AdmixturesDescription,
				Workability,
				ProtectivePoreRatio,
				WaterImpermeability
			};
		}
		public virtual Global.IfcPressureMeasure? _CompressiveStrength { get { return CompressiveStrength; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _MaxAggregateSize { get { return MaxAggregateSize; } set { } }
		public virtual Global.IfcText? _AdmixturesDescription { get { return AdmixturesDescription; } set { } }
		public virtual Global.IfcText? _Workability { get { return Workability; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _ProtectivePoreRatio { get { return ProtectivePoreRatio; } set { } }
		public virtual Global.IfcText? _WaterImpermeability { get { return WaterImpermeability; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMechanicalFastener
	/// SUBTYPE OF (IfcFastener);
	/// NominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// NominalLength : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcMechanicalFastener : IfcFastener, Global.IfcMechanicalFastener
	{
		public virtual IfcPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IfcPositiveLengthMeasure? NominalLength { get; set; }
		public IfcMechanicalFastener() : base()
		{
		}
		public IfcMechanicalFastener(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPositiveLengthMeasure? NominalDiameter, IfcPositiveLengthMeasure? NominalLength) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.NominalDiameter = NominalDiameter;
			this.NominalLength = NominalLength;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				NominalDiameter,
				NominalLength
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _NominalDiameter { get { return NominalDiameter; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _NominalLength { get { return NominalLength; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMechanicalFastenerType
	/// SUBTYPE OF (IfcFastenerType);
	/// END_ENTITY;
	/// <summary>
	public class IfcMechanicalFastenerType : IfcFastenerType, Global.IfcMechanicalFastenerType
	{
		public IfcMechanicalFastenerType() : base()
		{
		}
		public IfcMechanicalFastenerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcMechanicalMaterialProperties
	/// SUPERTYPE OF (ONEOF
	/// (IfcMechanicalConcreteMaterialProperties
	/// ,IfcMechanicalSteelMaterialProperties))
	/// SUBTYPE OF (IfcMaterialProperties);
	/// DynamicViscosity : OPTIONAL IfcDynamicViscosityMeasure;
	/// YoungModulus : OPTIONAL IfcModulusOfElasticityMeasure;
	/// ShearModulus : OPTIONAL IfcModulusOfElasticityMeasure;
	/// PoissonRatio : OPTIONAL IfcPositiveRatioMeasure;
	/// ThermalExpansionCoefficient : OPTIONAL IfcThermalExpansionCoefficientMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// WHERE
	/// WR21 : NOT(EXISTS(YoungModulus)) OR (YoungModulus >= 0.0);
	/// WR22 : NOT(EXISTS(ShearModulus)) OR (ShearModulus >= 0.0);
	/// END_ENTITY;
	/// <summary>
	public class IfcMechanicalMaterialProperties : IfcMaterialProperties, Global.IfcMechanicalMaterialProperties
	{
		public virtual IfcDynamicViscosityMeasure? DynamicViscosity { get; set; }
		public virtual IfcModulusOfElasticityMeasure? YoungModulus { get; set; }
		public virtual IfcModulusOfElasticityMeasure? ShearModulus { get; set; }
		public virtual IfcPositiveRatioMeasure? PoissonRatio { get; set; }
		public virtual IfcThermalExpansionCoefficientMeasure? ThermalExpansionCoefficient { get; set; }
		public IfcMechanicalMaterialProperties() : base()
		{
		}
		public IfcMechanicalMaterialProperties(IfcMaterial? Material, IfcDynamicViscosityMeasure? DynamicViscosity, IfcModulusOfElasticityMeasure? YoungModulus, IfcModulusOfElasticityMeasure? ShearModulus, IfcPositiveRatioMeasure? PoissonRatio, IfcThermalExpansionCoefficientMeasure? ThermalExpansionCoefficient) : base (Material)
		{
			this.DynamicViscosity = DynamicViscosity;
			this.YoungModulus = YoungModulus;
			this.ShearModulus = ShearModulus;
			this.PoissonRatio = PoissonRatio;
			this.ThermalExpansionCoefficient = ThermalExpansionCoefficient;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				DynamicViscosity,
				YoungModulus,
				ShearModulus,
				PoissonRatio,
				ThermalExpansionCoefficient
			};
		}
		public virtual Global.IfcDynamicViscosityMeasure? _DynamicViscosity { get { return DynamicViscosity; } set { } }
		public virtual Global.IfcModulusOfElasticityMeasure? _YoungModulus { get { return YoungModulus; } set { } }
		public virtual Global.IfcModulusOfElasticityMeasure? _ShearModulus { get { return ShearModulus; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _PoissonRatio { get { return PoissonRatio; } set { } }
		public virtual Global.IfcThermalExpansionCoefficientMeasure? _ThermalExpansionCoefficient { get { return ThermalExpansionCoefficient; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMechanicalSteelMaterialProperties
	/// SUBTYPE OF (IfcMechanicalMaterialProperties);
	/// YieldStress : OPTIONAL IfcPressureMeasure;
	/// UltimateStress : OPTIONAL IfcPressureMeasure;
	/// UltimateStrain : OPTIONAL IfcPositiveRatioMeasure;
	/// HardeningModule : OPTIONAL IfcModulusOfElasticityMeasure;
	/// ProportionalStress : OPTIONAL IfcPressureMeasure;
	/// PlasticStrain : OPTIONAL IfcPositiveRatioMeasure;
	/// Relaxations : OPTIONAL SET [1:?] OF IfcRelaxation;
	/// WHERE
	/// WR31 : NOT(EXISTS(YieldStress)) OR (YieldStress >= 0.);
	/// WR32 : NOT(EXISTS(UltimateStress)) OR (UltimateStress >= 0.);
	/// WR33 : NOT(EXISTS(HardeningModule)) OR (HardeningModule >= 0.);
	/// WR34 : NOT(EXISTS(ProportionalStress)) OR (ProportionalStress >= 0.);
	/// END_ENTITY;
	/// <summary>
	public class IfcMechanicalSteelMaterialProperties : IfcMechanicalMaterialProperties, Global.IfcMechanicalSteelMaterialProperties
	{
		public virtual IfcPressureMeasure? YieldStress { get; set; }
		public virtual IfcPressureMeasure? UltimateStress { get; set; }
		public virtual IfcPositiveRatioMeasure? UltimateStrain { get; set; }
		public virtual IfcModulusOfElasticityMeasure? HardeningModule { get; set; }
		public virtual IfcPressureMeasure? ProportionalStress { get; set; }
		public virtual IfcPositiveRatioMeasure? PlasticStrain { get; set; }
		public virtual List<IfcRelaxation>? Relaxations { get; set; }
		public IfcMechanicalSteelMaterialProperties() : base()
		{
		}
		public IfcMechanicalSteelMaterialProperties(IfcMaterial? Material, IfcDynamicViscosityMeasure? DynamicViscosity, IfcModulusOfElasticityMeasure? YoungModulus, IfcModulusOfElasticityMeasure? ShearModulus, IfcPositiveRatioMeasure? PoissonRatio, IfcThermalExpansionCoefficientMeasure? ThermalExpansionCoefficient, IfcPressureMeasure? YieldStress, IfcPressureMeasure? UltimateStress, IfcPositiveRatioMeasure? UltimateStrain, IfcModulusOfElasticityMeasure? HardeningModule, IfcPressureMeasure? ProportionalStress, IfcPositiveRatioMeasure? PlasticStrain, List<IfcRelaxation>? Relaxations) : base (Material, DynamicViscosity, YoungModulus, ShearModulus, PoissonRatio, ThermalExpansionCoefficient)
		{
			this.YieldStress = YieldStress;
			this.UltimateStress = UltimateStress;
			this.UltimateStrain = UltimateStrain;
			this.HardeningModule = HardeningModule;
			this.ProportionalStress = ProportionalStress;
			this.PlasticStrain = PlasticStrain;
			this.Relaxations = Relaxations;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				DynamicViscosity,
				YoungModulus,
				ShearModulus,
				PoissonRatio,
				ThermalExpansionCoefficient,
				YieldStress,
				UltimateStress,
				UltimateStrain,
				HardeningModule,
				ProportionalStress,
				PlasticStrain,
				Relaxations
			};
		}
		public virtual Global.IfcPressureMeasure? _YieldStress { get { return YieldStress; } set { } }
		public virtual Global.IfcPressureMeasure? _UltimateStress { get { return UltimateStress; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _UltimateStrain { get { return UltimateStrain; } set { } }
		public virtual Global.IfcModulusOfElasticityMeasure? _HardeningModule { get { return HardeningModule; } set { } }
		public virtual Global.IfcPressureMeasure? _ProportionalStress { get { return ProportionalStress; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _PlasticStrain { get { return PlasticStrain; } set { } }
		public virtual List<Global.IfcRelaxation>? _Relaxations
		{
			get
			{
				if(Relaxations != null)
				{
					List<Global.IfcRelaxation>? items = new List<Global.IfcRelaxation>();
					foreach (IfcRelaxation item in Relaxations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMember
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcMember : IfcBuildingElement, Global.IfcMember
	{
		public IfcMember() : base()
		{
		}
		public IfcMember(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcMemberType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcMemberTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcMemberType : IfcBuildingElementType, Global.IfcMemberType
	{
		public virtual IfcMemberTypeEnum? PredefinedType { get; set; }
		public IfcMemberType() : base()
		{
		}
		public IfcMemberType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcMemberTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcMemberTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMetric
	/// SUBTYPE OF (IfcConstraint);
	/// Benchmark : IfcBenchmarkEnum;
	/// ValueSource : OPTIONAL IfcLabel;
	/// DataValue : IfcMetricValueSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcMetric : IfcConstraint, Global.IfcMetric
	{
		public virtual IfcBenchmarkEnum? Benchmark { get; set; }
		public virtual IfcLabel? ValueSource { get; set; }
		public virtual IfcMetricValueSelect? DataValue { get; set; }
		public IfcMetric() : base()
		{
		}
		public IfcMetric(IfcLabel? Name, IfcText? Description, IfcConstraintEnum? ConstraintGrade, IfcLabel? ConstraintSource, IfcActorSelect? CreatingActor, IfcDateTimeSelect? CreationTime, IfcLabel? UserDefinedGrade, IfcBenchmarkEnum? Benchmark, IfcLabel? ValueSource, IfcMetricValueSelect? DataValue) : base (Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade)
		{
			this.Benchmark = Benchmark;
			this.ValueSource = ValueSource;
			this.DataValue = DataValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				ConstraintGrade,
				ConstraintSource,
				CreatingActor,
				CreationTime,
				UserDefinedGrade,
				Benchmark,
				ValueSource,
				DataValue
			};
		}
		public virtual Global.IfcBenchmarkEnum? _Benchmark { get { return Benchmark; } set { } }
		public virtual Global.IfcLabel? _ValueSource { get { return ValueSource; } set { } }
		public virtual Global.IfcMetricValueSelect? _DataValue { get { return DataValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMonetaryUnit;
	/// Currency : IfcCurrencyEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcMonetaryUnit : Ifc_Entity, IfcUnit, Global.IfcMonetaryUnit
	{
		public virtual IfcCurrencyEnum? Currency { get; set; }
		public IfcMonetaryUnit() : base()
		{
		}
		public IfcMonetaryUnit(IfcCurrencyEnum? Currency) : base ()
		{
			this.Currency = Currency;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Currency
			};
		}
		public virtual Global.IfcCurrencyEnum? _Currency { get { return Currency; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMotorConnectionType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcMotorConnectionTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcMotorConnectionType : IfcEnergyConversionDeviceType, Global.IfcMotorConnectionType
	{
		public virtual IfcMotorConnectionTypeEnum? PredefinedType { get; set; }
		public IfcMotorConnectionType() : base()
		{
		}
		public IfcMotorConnectionType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcMotorConnectionTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcMotorConnectionTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcMove
	/// SUBTYPE OF (IfcTask);
	/// MoveFrom : IfcSpatialStructureElement;
	/// MoveTo : IfcSpatialStructureElement;
	/// PunchList : OPTIONAL LIST [1:?] OF UNIQUE IfcText;
	/// WHERE
	/// WR1 : SIZEOF(SELF\IfcProcess.OperatesOn) >= 1;
	/// WR2 : SIZEOF(QUERY(temp <* OperatesOn |
	/// SIZEOF(QUERY(temp2 <* temp.RelatedObjects |
	/// ('IFC2X3.IFCACTOR' IN TYPEOF (temp2)) OR
	/// ('IFC2X3.IFCEQUIPMENTELEMENT' IN TYPEOF (temp2)) OR
	/// ('IFC2X3.IFCFURNISHINGELEMENT' IN TYPEOF (temp2)) )) >=1
	/// )) >= 1;
	/// WR3 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IfcMove : IfcTask, Global.IfcMove
	{
		public virtual IfcSpatialStructureElement? MoveFrom { get; set; }
		public virtual IfcSpatialStructureElement? MoveTo { get; set; }
		public virtual List<IfcText>? PunchList { get; set; }
		public IfcMove() : base()
		{
		}
		public IfcMove(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? TaskId, IfcLabel? Status, IfcLabel? WorkMethod, BOOLEAN? IsMilestone, INTEGER? Priority, IfcSpatialStructureElement? MoveFrom, IfcSpatialStructureElement? MoveTo, List<IfcText>? PunchList) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, TaskId, Status, WorkMethod, IsMilestone, Priority)
		{
			this.MoveFrom = MoveFrom;
			this.MoveTo = MoveTo;
			this.PunchList = PunchList;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				TaskId,
				Status,
				WorkMethod,
				IsMilestone,
				Priority,
				MoveFrom,
				MoveTo,
				PunchList
			};
		}
		public virtual Global.IfcSpatialStructureElement? _MoveFrom { get { return MoveFrom; } set { } }
		public virtual Global.IfcSpatialStructureElement? _MoveTo { get { return MoveTo; } set { } }
		public virtual List<Global.IfcText>? _PunchList
		{
			get
			{
				if(PunchList != null)
				{
					List<Global.IfcText>? items = new List<Global.IfcText>();
					foreach (IfcText item in PunchList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcNamedUnit
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcContextDependentUnit
	/// ,IfcConversionBasedUnit
	/// ,IfcSIUnit));
	/// Dimensions : IfcDimensionalExponents;
	/// UnitType : IfcUnitEnum;
	/// WHERE
	/// WR1 : IfcCorrectDimensions (SELF.UnitType, SELF.Dimensions);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcNamedUnit : Ifc_Entity, IfcUnit, Global.IfcNamedUnit
	{
		public virtual IfcDimensionalExponents? Dimensions { get; set; }
		public virtual IfcUnitEnum? UnitType { get; set; }
		public IfcNamedUnit() : base()
		{
		}
		public IfcNamedUnit(IfcDimensionalExponents? Dimensions, IfcUnitEnum? UnitType) : base ()
		{
			this.Dimensions = Dimensions;
			this.UnitType = UnitType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Dimensions,
				UnitType
			};
		}
		public virtual Global.IfcDimensionalExponents? _Dimensions { get { return Dimensions; } set { } }
		public virtual Global.IfcUnitEnum? _UnitType { get { return UnitType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcObject
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcActor
	/// ,IfcControl
	/// ,IfcGroup
	/// ,IfcProcess
	/// ,IfcProduct
	/// ,IfcProject
	/// ,IfcResource))
	/// SUBTYPE OF (IfcObjectDefinition);
	/// ObjectType : OPTIONAL IfcLabel;
	/// INVERSE
	/// IsDefinedBy : SET [0:?] OF IfcRelDefines FOR RelatedObjects;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(temp <* IsDefinedBy | 'IFC2X3.IFCRELDEFINESBYTYPE' IN TYPEOF(temp))) <= 1;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcObject : IfcObjectDefinition, Global.IfcObject
	{
		public virtual IfcLabel? ObjectType { get; set; }
		public List<IfcRelDefines>? IsDefinedBy => Model?.GetItems<IfcRelDefines>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();
		public IfcObject() : base()
		{
		}
		public IfcObject(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ObjectType = ObjectType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
		public virtual Global.IfcLabel? _ObjectType { get { return ObjectType; } set { } }
		public virtual List<Global.IfcRelDefines>? _IsDefinedBy
		{
			get
			{
				if(IsDefinedBy != null)
				{
					List<Global.IfcRelDefines>? items = new List<Global.IfcRelDefines>();
					foreach (IfcRelDefines item in IsDefinedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcObjectDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcObject
	/// ,IfcTypeObject))
	/// SUBTYPE OF (IfcRoot);
	/// INVERSE
	/// HasAssignments : SET [0:?] OF IfcRelAssigns FOR RelatedObjects;
	/// IsDecomposedBy : SET [0:?] OF IfcRelDecomposes FOR RelatingObject;
	/// Decomposes : SET [0:1] OF IfcRelDecomposes FOR RelatedObjects;
	/// HasAssociations : SET [0:?] OF IfcRelAssociates FOR RelatedObjects;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcObjectDefinition : IfcRoot, Global.IfcObjectDefinition
	{
		public List<IfcRelAssigns>? HasAssignments => Model?.GetItems<IfcRelAssigns>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();
		public List<IfcRelDecomposes>? IsDecomposedBy => Model?.GetItems<IfcRelDecomposes>().Where(x => x.RelatingObject != null && x.RelatingObject == this).ToList();
		public List<IfcRelDecomposes>? Decomposes => Model?.GetItems<IfcRelDecomposes>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();
		public List<IfcRelAssociates>? HasAssociations => Model?.GetItems<IfcRelAssociates>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();
		public IfcObjectDefinition() : base()
		{
		}
		public IfcObjectDefinition(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
		public virtual List<Global.IfcRelAssigns>? _HasAssignments
		{
			get
			{
				if(HasAssignments != null)
				{
					List<Global.IfcRelAssigns>? items = new List<Global.IfcRelAssigns>();
					foreach (IfcRelAssigns item in HasAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDecomposes>? _IsDecomposedBy
		{
			get
			{
				if(IsDecomposedBy != null)
				{
					List<Global.IfcRelDecomposes>? items = new List<Global.IfcRelDecomposes>();
					foreach (IfcRelDecomposes item in IsDecomposedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDecomposes>? _Decomposes
		{
			get
			{
				if(Decomposes != null)
				{
					List<Global.IfcRelDecomposes>? items = new List<Global.IfcRelDecomposes>();
					foreach (IfcRelDecomposes item in Decomposes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelAssociates>? _HasAssociations
		{
			get
			{
				if(HasAssociations != null)
				{
					List<Global.IfcRelAssociates>? items = new List<Global.IfcRelAssociates>();
					foreach (IfcRelAssociates item in HasAssociations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcObjectPlacement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcGridPlacement
	/// ,IfcLocalPlacement));
	/// INVERSE
	/// PlacesObject : SET [1:1] OF IfcProduct FOR ObjectPlacement;
	/// ReferencedByPlacements : SET [0:?] OF IfcLocalPlacement FOR PlacementRelTo;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcObjectPlacement : Ifc_Entity, Global.IfcObjectPlacement
	{
		public List<IfcProduct>? PlacesObject => Model?.GetItems<IfcProduct>().Where(x => x.ObjectPlacement != null && x.ObjectPlacement == this).ToList();
		public List<IfcLocalPlacement>? ReferencedByPlacements => Model?.GetItems<IfcLocalPlacement>().Where(x => x.PlacementRelTo != null && x.PlacementRelTo == this).ToList();
		public IfcObjectPlacement() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual List<Global.IfcProduct>? _PlacesObject
		{
			get
			{
				if(PlacesObject != null)
				{
					List<Global.IfcProduct>? items = new List<Global.IfcProduct>();
					foreach (IfcProduct item in PlacesObject)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcLocalPlacement>? _ReferencedByPlacements
		{
			get
			{
				if(ReferencedByPlacements != null)
				{
					List<Global.IfcLocalPlacement>? items = new List<Global.IfcLocalPlacement>();
					foreach (IfcLocalPlacement item in ReferencedByPlacements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcObjective
	/// SUBTYPE OF (IfcConstraint);
	/// BenchmarkValues : OPTIONAL IfcMetric;
	/// ResultValues : OPTIONAL IfcMetric;
	/// ObjectiveQualifier : IfcObjectiveEnum;
	/// UserDefinedQualifier : OPTIONAL IfcLabel;
	/// WHERE
	/// WR21 : (ObjectiveQualifier <> IfcObjectiveEnum.USERDEFINED) OR
	/// ((ObjectiveQualifier = IfcObjectiveEnum.USERDEFINED) AND EXISTS(SELF\IfcObjective.UserDefinedQualifier));
	/// END_ENTITY;
	/// <summary>
	public class IfcObjective : IfcConstraint, Global.IfcObjective
	{
		public virtual IfcMetric? BenchmarkValues { get; set; }
		public virtual IfcMetric? ResultValues { get; set; }
		public virtual IfcObjectiveEnum? ObjectiveQualifier { get; set; }
		public virtual IfcLabel? UserDefinedQualifier { get; set; }
		public IfcObjective() : base()
		{
		}
		public IfcObjective(IfcLabel? Name, IfcText? Description, IfcConstraintEnum? ConstraintGrade, IfcLabel? ConstraintSource, IfcActorSelect? CreatingActor, IfcDateTimeSelect? CreationTime, IfcLabel? UserDefinedGrade, IfcMetric? BenchmarkValues, IfcMetric? ResultValues, IfcObjectiveEnum? ObjectiveQualifier, IfcLabel? UserDefinedQualifier) : base (Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade)
		{
			this.BenchmarkValues = BenchmarkValues;
			this.ResultValues = ResultValues;
			this.ObjectiveQualifier = ObjectiveQualifier;
			this.UserDefinedQualifier = UserDefinedQualifier;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				ConstraintGrade,
				ConstraintSource,
				CreatingActor,
				CreationTime,
				UserDefinedGrade,
				BenchmarkValues,
				ResultValues,
				ObjectiveQualifier,
				UserDefinedQualifier
			};
		}
		public virtual Global.IfcMetric? _BenchmarkValues { get { return BenchmarkValues; } set { } }
		public virtual Global.IfcMetric? _ResultValues { get { return ResultValues; } set { } }
		public virtual Global.IfcObjectiveEnum? _ObjectiveQualifier { get { return ObjectiveQualifier; } set { } }
		public virtual Global.IfcLabel? _UserDefinedQualifier { get { return UserDefinedQualifier; } set { } }
	}
	/// <summary>
	/// ENTITY IfcOccupant
	/// SUBTYPE OF (IfcActor);
	/// PredefinedType : IfcOccupantTypeEnum;
	/// WHERE
	/// WR31 : NOT(PredefinedType = IfcOccupantTypeEnum.USERDEFINED)
	/// OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcOccupant : IfcActor, Global.IfcOccupant
	{
		public virtual IfcOccupantTypeEnum? PredefinedType { get; set; }
		public IfcOccupant() : base()
		{
		}
		public IfcOccupant(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcActorSelect? TheActor, IfcOccupantTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, TheActor)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				TheActor,
				PredefinedType
			};
		}
		public virtual Global.IfcOccupantTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcOffsetCurve2D
	/// SUBTYPE OF (IfcCurve);
	/// BasisCurve : IfcCurve;
	/// Distance : IfcLengthMeasure;
	/// SelfIntersect : LOGICAL;
	/// WHERE
	/// WR1 : BasisCurve.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class IfcOffsetCurve2D : IfcCurve, Global.IfcOffsetCurve2D
	{
		public virtual IfcCurve? BasisCurve { get; set; }
		public virtual IfcLengthMeasure? Distance { get; set; }
		public virtual LOGICAL? SelfIntersect { get; set; }
		public IfcOffsetCurve2D() : base()
		{
		}
		public IfcOffsetCurve2D(IfcCurve? BasisCurve, IfcLengthMeasure? Distance, LOGICAL? SelfIntersect) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisCurve,
				Distance,
				SelfIntersect
			};
		}
		public virtual Global.IfcCurve? _BasisCurve { get { return BasisCurve; } set { } }
		public virtual Global.IfcLengthMeasure? _Distance { get { return Distance; } set { } }
		public virtual LOGICAL? _SelfIntersect { get { return SelfIntersect; } set { } }
	}
	/// <summary>
	/// ENTITY IfcOffsetCurve3D
	/// SUBTYPE OF (IfcCurve);
	/// BasisCurve : IfcCurve;
	/// Distance : IfcLengthMeasure;
	/// SelfIntersect : LOGICAL;
	/// RefDirection : IfcDirection;
	/// WHERE
	/// WR1 : BasisCurve.Dim = 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcOffsetCurve3D : IfcCurve, Global.IfcOffsetCurve3D
	{
		public virtual IfcCurve? BasisCurve { get; set; }
		public virtual IfcLengthMeasure? Distance { get; set; }
		public virtual LOGICAL? SelfIntersect { get; set; }
		public virtual IfcDirection? RefDirection { get; set; }
		public IfcOffsetCurve3D() : base()
		{
		}
		public IfcOffsetCurve3D(IfcCurve? BasisCurve, IfcLengthMeasure? Distance, LOGICAL? SelfIntersect, IfcDirection? RefDirection) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
			this.RefDirection = RefDirection;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisCurve,
				Distance,
				SelfIntersect,
				RefDirection
			};
		}
		public virtual Global.IfcCurve? _BasisCurve { get { return BasisCurve; } set { } }
		public virtual Global.IfcLengthMeasure? _Distance { get { return Distance; } set { } }
		public virtual LOGICAL? _SelfIntersect { get { return SelfIntersect; } set { } }
		public virtual Global.IfcDirection? _RefDirection { get { return RefDirection; } set { } }
	}
	/// <summary>
	/// ENTITY IfcOneDirectionRepeatFactor
	/// SUPERTYPE OF (ONEOF
	/// (IfcTwoDirectionRepeatFactor))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// RepeatFactor : IfcVector;
	/// END_ENTITY;
	/// <summary>
	public class IfcOneDirectionRepeatFactor : IfcGeometricRepresentationItem, IfcHatchLineDistanceSelect, Global.IfcOneDirectionRepeatFactor
	{
		public virtual IfcVector? RepeatFactor { get; set; }
		public IfcOneDirectionRepeatFactor() : base()
		{
		}
		public IfcOneDirectionRepeatFactor(IfcVector? RepeatFactor) : base ()
		{
			this.RepeatFactor = RepeatFactor;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RepeatFactor
			};
		}
		public virtual Global.IfcVector? _RepeatFactor { get { return RepeatFactor; } set { } }
	}
	/// <summary>
	/// ENTITY IfcOpenShell
	/// SUBTYPE OF (IfcConnectedFaceSet);
	/// END_ENTITY;
	/// <summary>
	public class IfcOpenShell : IfcConnectedFaceSet, IfcShell, Global.IfcOpenShell
	{
		public IfcOpenShell() : base()
		{
		}
		public IfcOpenShell(List<IfcFace>? CfsFaces) : base (CfsFaces)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				CfsFaces
			};
		}
	}
	/// <summary>
	/// ENTITY IfcOpeningElement
	/// SUBTYPE OF (IfcFeatureElementSubtraction);
	/// INVERSE
	/// HasFillings : SET [0:?] OF IfcRelFillsElement FOR RelatingOpeningElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcOpeningElement : IfcFeatureElementSubtraction, Global.IfcOpeningElement
	{
		public List<IfcRelFillsElement>? HasFillings => Model?.GetItems<IfcRelFillsElement>().Where(x => x.RelatingOpeningElement != null && x.RelatingOpeningElement == this).ToList();
		public IfcOpeningElement() : base()
		{
		}
		public IfcOpeningElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
		public virtual List<Global.IfcRelFillsElement>? _HasFillings
		{
			get
			{
				if(HasFillings != null)
				{
					List<Global.IfcRelFillsElement>? items = new List<Global.IfcRelFillsElement>();
					foreach (IfcRelFillsElement item in HasFillings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOpticalMaterialProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// VisibleTransmittance : OPTIONAL IfcPositiveRatioMeasure;
	/// SolarTransmittance : OPTIONAL IfcPositiveRatioMeasure;
	/// ThermalIrTransmittance : OPTIONAL IfcPositiveRatioMeasure;
	/// ThermalIrEmissivityBack : OPTIONAL IfcPositiveRatioMeasure;
	/// ThermalIrEmissivityFront : OPTIONAL IfcPositiveRatioMeasure;
	/// VisibleReflectanceBack : OPTIONAL IfcPositiveRatioMeasure;
	/// VisibleReflectanceFront : OPTIONAL IfcPositiveRatioMeasure;
	/// SolarReflectanceFront : OPTIONAL IfcPositiveRatioMeasure;
	/// SolarReflectanceBack : OPTIONAL IfcPositiveRatioMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IfcOpticalMaterialProperties : IfcMaterialProperties, Global.IfcOpticalMaterialProperties
	{
		public virtual IfcPositiveRatioMeasure? VisibleTransmittance { get; set; }
		public virtual IfcPositiveRatioMeasure? SolarTransmittance { get; set; }
		public virtual IfcPositiveRatioMeasure? ThermalIrTransmittance { get; set; }
		public virtual IfcPositiveRatioMeasure? ThermalIrEmissivityBack { get; set; }
		public virtual IfcPositiveRatioMeasure? ThermalIrEmissivityFront { get; set; }
		public virtual IfcPositiveRatioMeasure? VisibleReflectanceBack { get; set; }
		public virtual IfcPositiveRatioMeasure? VisibleReflectanceFront { get; set; }
		public virtual IfcPositiveRatioMeasure? SolarReflectanceFront { get; set; }
		public virtual IfcPositiveRatioMeasure? SolarReflectanceBack { get; set; }
		public IfcOpticalMaterialProperties() : base()
		{
		}
		public IfcOpticalMaterialProperties(IfcMaterial? Material, IfcPositiveRatioMeasure? VisibleTransmittance, IfcPositiveRatioMeasure? SolarTransmittance, IfcPositiveRatioMeasure? ThermalIrTransmittance, IfcPositiveRatioMeasure? ThermalIrEmissivityBack, IfcPositiveRatioMeasure? ThermalIrEmissivityFront, IfcPositiveRatioMeasure? VisibleReflectanceBack, IfcPositiveRatioMeasure? VisibleReflectanceFront, IfcPositiveRatioMeasure? SolarReflectanceFront, IfcPositiveRatioMeasure? SolarReflectanceBack) : base (Material)
		{
			this.VisibleTransmittance = VisibleTransmittance;
			this.SolarTransmittance = SolarTransmittance;
			this.ThermalIrTransmittance = ThermalIrTransmittance;
			this.ThermalIrEmissivityBack = ThermalIrEmissivityBack;
			this.ThermalIrEmissivityFront = ThermalIrEmissivityFront;
			this.VisibleReflectanceBack = VisibleReflectanceBack;
			this.VisibleReflectanceFront = VisibleReflectanceFront;
			this.SolarReflectanceFront = SolarReflectanceFront;
			this.SolarReflectanceBack = SolarReflectanceBack;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				VisibleTransmittance,
				SolarTransmittance,
				ThermalIrTransmittance,
				ThermalIrEmissivityBack,
				ThermalIrEmissivityFront,
				VisibleReflectanceBack,
				VisibleReflectanceFront,
				SolarReflectanceFront,
				SolarReflectanceBack
			};
		}
		public virtual Global.IfcPositiveRatioMeasure? _VisibleTransmittance { get { return VisibleTransmittance; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _SolarTransmittance { get { return SolarTransmittance; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _ThermalIrTransmittance { get { return ThermalIrTransmittance; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _ThermalIrEmissivityBack { get { return ThermalIrEmissivityBack; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _ThermalIrEmissivityFront { get { return ThermalIrEmissivityFront; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _VisibleReflectanceBack { get { return VisibleReflectanceBack; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _VisibleReflectanceFront { get { return VisibleReflectanceFront; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _SolarReflectanceFront { get { return SolarReflectanceFront; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _SolarReflectanceBack { get { return SolarReflectanceBack; } set { } }
	}
	/// <summary>
	/// ENTITY IfcOrderAction
	/// SUBTYPE OF (IfcTask);
	/// ActionID : IfcIdentifier;
	/// UNIQUE
	/// UR2 : ActionID;
	/// END_ENTITY;
	/// <summary>
	public class IfcOrderAction : IfcTask, Global.IfcOrderAction
	{
		public virtual IfcIdentifier? ActionID { get; set; }
		public IfcOrderAction() : base()
		{
		}
		public IfcOrderAction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? TaskId, IfcLabel? Status, IfcLabel? WorkMethod, BOOLEAN? IsMilestone, INTEGER? Priority, IfcIdentifier? ActionID) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, TaskId, Status, WorkMethod, IsMilestone, Priority)
		{
			this.ActionID = ActionID;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				TaskId,
				Status,
				WorkMethod,
				IsMilestone,
				Priority,
				ActionID
			};
		}
		public virtual Global.IfcIdentifier? _ActionID { get { return ActionID; } set { } }
	}
	/// <summary>
	/// ENTITY IfcOrganization;
	/// Id : OPTIONAL IfcIdentifier;
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
	/// Addresses : OPTIONAL LIST [1:?] OF IfcAddress;
	/// INVERSE
	/// IsRelatedBy : SET [0:?] OF IfcOrganizationRelationship FOR RelatedOrganizations;
	/// Relates : SET [0:?] OF IfcOrganizationRelationship FOR RelatingOrganization;
	/// Engages : SET [0:?] OF IfcPersonAndOrganization FOR TheOrganization;
	/// END_ENTITY;
	/// <summary>
	public class IfcOrganization : Ifc_Entity, IfcActorSelect, IfcObjectReferenceSelect, Global.IfcOrganization
	{
		public virtual IfcIdentifier? Id { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual List<IfcActorRole>? Roles { get; set; }
		public virtual List<IfcAddress>? Addresses { get; set; }
		public List<IfcOrganizationRelationship>? IsRelatedBy => Model?.GetItems<IfcOrganizationRelationship>().Where(x => x.RelatedOrganizations != null && x.RelatedOrganizations.Contains(this)).ToList();
		public List<IfcOrganizationRelationship>? Relates => Model?.GetItems<IfcOrganizationRelationship>().Where(x => x.RelatingOrganization != null && x.RelatingOrganization == this).ToList();
		public List<IfcPersonAndOrganization>? Engages => Model?.GetItems<IfcPersonAndOrganization>().Where(x => x.TheOrganization != null && x.TheOrganization == this).ToList();
		public IfcOrganization() : base()
		{
		}
		public IfcOrganization(IfcIdentifier? Id, IfcLabel? Name, IfcText? Description, List<IfcActorRole>? Roles, List<IfcAddress>? Addresses) : base ()
		{
			this.Id = Id;
			this.Name = Name;
			this.Description = Description;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Id,
				Name,
				Description,
				Roles,
				Addresses
			};
		}
		public virtual Global.IfcIdentifier? _Id { get { return Id; } set { } }
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual List<Global.IfcActorRole>? _Roles
		{
			get
			{
				if(Roles != null)
				{
					List<Global.IfcActorRole>? items = new List<Global.IfcActorRole>();
					foreach (IfcActorRole item in Roles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcAddress>? _Addresses
		{
			get
			{
				if(Addresses != null)
				{
					List<Global.IfcAddress>? items = new List<Global.IfcAddress>();
					foreach (IfcAddress item in Addresses)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcOrganizationRelationship>? _IsRelatedBy
		{
			get
			{
				if(IsRelatedBy != null)
				{
					List<Global.IfcOrganizationRelationship>? items = new List<Global.IfcOrganizationRelationship>();
					foreach (IfcOrganizationRelationship item in IsRelatedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcOrganizationRelationship>? _Relates
		{
			get
			{
				if(Relates != null)
				{
					List<Global.IfcOrganizationRelationship>? items = new List<Global.IfcOrganizationRelationship>();
					foreach (IfcOrganizationRelationship item in Relates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcPersonAndOrganization>? _Engages
		{
			get
			{
				if(Engages != null)
				{
					List<Global.IfcPersonAndOrganization>? items = new List<Global.IfcPersonAndOrganization>();
					foreach (IfcPersonAndOrganization item in Engages)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOrganizationRelationship;
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// RelatingOrganization : IfcOrganization;
	/// RelatedOrganizations : SET [1:?] OF IfcOrganization;
	/// END_ENTITY;
	/// <summary>
	public class IfcOrganizationRelationship : Ifc_Entity, Global.IfcOrganizationRelationship
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcOrganization? RelatingOrganization { get; set; }
		public virtual List<IfcOrganization>? RelatedOrganizations { get; set; }
		public IfcOrganizationRelationship() : base()
		{
		}
		public IfcOrganizationRelationship(IfcLabel? Name, IfcText? Description, IfcOrganization? RelatingOrganization, List<IfcOrganization>? RelatedOrganizations) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingOrganization = RelatingOrganization;
			this.RelatedOrganizations = RelatedOrganizations;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				RelatingOrganization,
				RelatedOrganizations
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcOrganization? _RelatingOrganization { get { return RelatingOrganization; } set { } }
		public virtual List<Global.IfcOrganization>? _RelatedOrganizations
		{
			get
			{
				if(RelatedOrganizations != null)
				{
					List<Global.IfcOrganization>? items = new List<Global.IfcOrganization>();
					foreach (IfcOrganization item in RelatedOrganizations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOrientedEdge
	/// SUBTYPE OF (IfcEdge);
	/// EdgeElement : IfcEdge;
	/// Orientation : BOOLEAN;
	/// DERIVE
	/// SELF\IfcEdge.EdgeStart : IfcVertex := IfcBooleanChoose
	/// (Orientation, EdgeElement.EdgeStart, EdgeElement.EdgeEnd);
	/// SELF\IfcEdge.EdgeEnd : IfcVertex := IfcBooleanChoose
	/// (Orientation, EdgeElement.EdgeEnd, EdgeElement.EdgeStart);
	/// WHERE
	/// WR1 : NOT('IFC2X3.IFCORIENTEDEDGE' IN TYPEOF(EdgeElement));
	/// END_ENTITY;
	/// <summary>
	public class IfcOrientedEdge : IfcEdge, Global.IfcOrientedEdge
	{
		public virtual IfcEdge? EdgeElement { get; set; }
		public virtual BOOLEAN? Orientation { get; set; }
		//TODO DERIVE
		public override IfcVertex? EdgeStart {get {return null;}}
		//TODO DERIVE
		public override IfcVertex? EdgeEnd {get {return null;}}
		public IfcOrientedEdge() : base()
		{
		}
		public IfcOrientedEdge(IfcVertex? EdgeStart, IfcVertex? EdgeEnd, IfcEdge? EdgeElement, BOOLEAN? Orientation) : base (EdgeStart, EdgeEnd)
		{
			this.EdgeElement = EdgeElement;
			this.Orientation = Orientation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeStart,
				EdgeEnd,
				EdgeElement,
				Orientation
			};
		}
		public virtual Global.IfcEdge? _EdgeElement { get { return EdgeElement; } set { } }
		public virtual BOOLEAN? _Orientation { get { return Orientation; } set { } }
		public override Global.IfcVertex? _EdgeStart { get { return EdgeStart; } set { } }
		public override Global.IfcVertex? _EdgeEnd { get { return EdgeEnd; } set { } }
	}
	/// <summary>
	/// ENTITY IfcOutletType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcOutletTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcOutletType : IfcFlowTerminalType, Global.IfcOutletType
	{
		public virtual IfcOutletTypeEnum? PredefinedType { get; set; }
		public IfcOutletType() : base()
		{
		}
		public IfcOutletType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcOutletTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcOutletTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcOwnerHistory;
	/// OwningUser : IfcPersonAndOrganization;
	/// OwningApplication : IfcApplication;
	/// State : OPTIONAL IfcStateEnum;
	/// ChangeAction : IfcChangeActionEnum;
	/// LastModifiedDate : OPTIONAL IfcTimeStamp;
	/// LastModifyingUser : OPTIONAL IfcPersonAndOrganization;
	/// LastModifyingApplication : OPTIONAL IfcApplication;
	/// CreationDate : IfcTimeStamp;
	/// END_ENTITY;
	/// <summary>
	public class IfcOwnerHistory : Ifc_Entity, Global.IfcOwnerHistory
	{
		public virtual IfcPersonAndOrganization? OwningUser { get; set; }
		public virtual IfcApplication? OwningApplication { get; set; }
		public virtual IfcStateEnum? State { get; set; }
		public virtual IfcChangeActionEnum? ChangeAction { get; set; }
		public virtual IfcTimeStamp? LastModifiedDate { get; set; }
		public virtual IfcPersonAndOrganization? LastModifyingUser { get; set; }
		public virtual IfcApplication? LastModifyingApplication { get; set; }
		public virtual IfcTimeStamp? CreationDate { get; set; }
		public IfcOwnerHistory() : base()
		{
		}
		public IfcOwnerHistory(IfcPersonAndOrganization? OwningUser, IfcApplication? OwningApplication, IfcStateEnum? State, IfcChangeActionEnum? ChangeAction, IfcTimeStamp? LastModifiedDate, IfcPersonAndOrganization? LastModifyingUser, IfcApplication? LastModifyingApplication, IfcTimeStamp? CreationDate) : base ()
		{
			this.OwningUser = OwningUser;
			this.OwningApplication = OwningApplication;
			this.State = State;
			this.ChangeAction = ChangeAction;
			this.LastModifiedDate = LastModifiedDate;
			this.LastModifyingUser = LastModifyingUser;
			this.LastModifyingApplication = LastModifyingApplication;
			this.CreationDate = CreationDate;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				OwningUser,
				OwningApplication,
				State,
				ChangeAction,
				LastModifiedDate,
				LastModifyingUser,
				LastModifyingApplication,
				CreationDate
			};
		}
		public virtual Global.IfcPersonAndOrganization? _OwningUser { get { return OwningUser; } set { } }
		public virtual Global.IfcApplication? _OwningApplication { get { return OwningApplication; } set { } }
		public virtual Global.IfcStateEnum? _State { get { return State; } set { } }
		public virtual Global.IfcChangeActionEnum? _ChangeAction { get { return ChangeAction; } set { } }
		public virtual Global.IfcTimeStamp? _LastModifiedDate { get { return LastModifiedDate; } set { } }
		public virtual Global.IfcPersonAndOrganization? _LastModifyingUser { get { return LastModifyingUser; } set { } }
		public virtual Global.IfcApplication? _LastModifyingApplication { get { return LastModifyingApplication; } set { } }
		public virtual Global.IfcTimeStamp? _CreationDate { get { return CreationDate; } set { } }
	}
	/// <summary>
	/// ENTITY IfcParameterizedProfileDef
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCShapeProfileDef
	/// ,IfcCircleProfileDef
	/// ,IfcCraneRailAShapeProfileDef
	/// ,IfcCraneRailFShapeProfileDef
	/// ,IfcEllipseProfileDef
	/// ,IfcIShapeProfileDef
	/// ,IfcLShapeProfileDef
	/// ,IfcRectangleProfileDef
	/// ,IfcTShapeProfileDef
	/// ,IfcTrapeziumProfileDef
	/// ,IfcUShapeProfileDef
	/// ,IfcZShapeProfileDef))
	/// SUBTYPE OF (IfcProfileDef);
	/// Position : IfcAxis2Placement2D;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcParameterizedProfileDef : IfcProfileDef, Global.IfcParameterizedProfileDef
	{
		public virtual IfcAxis2Placement2D? Position { get; set; }
		public IfcParameterizedProfileDef() : base()
		{
		}
		public IfcParameterizedProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position) : base (ProfileType, ProfileName)
		{
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position
			};
		}
		public virtual Global.IfcAxis2Placement2D? _Position { get { return Position; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPath
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// EdgeList : LIST [1:?] OF UNIQUE IfcOrientedEdge;
	/// WHERE
	/// WR1 : IfcPathHeadToTail(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IfcPath : IfcTopologicalRepresentationItem, Global.IfcPath
	{
		public virtual List<IfcOrientedEdge>? EdgeList { get; set; }
		public IfcPath() : base()
		{
		}
		public IfcPath(List<IfcOrientedEdge>? EdgeList) : base ()
		{
			this.EdgeList = EdgeList;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeList
			};
		}
		public virtual List<Global.IfcOrientedEdge>? _EdgeList
		{
			get
			{
				if(EdgeList != null)
				{
					List<Global.IfcOrientedEdge>? items = new List<Global.IfcOrientedEdge>();
					foreach (IfcOrientedEdge item in EdgeList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPerformanceHistory
	/// SUBTYPE OF (IfcControl);
	/// LifeCyclePhase : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcPerformanceHistory : IfcControl, Global.IfcPerformanceHistory
	{
		public virtual IfcLabel? LifeCyclePhase { get; set; }
		public IfcPerformanceHistory() : base()
		{
		}
		public IfcPerformanceHistory(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcLabel? LifeCyclePhase) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.LifeCyclePhase = LifeCyclePhase;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				LifeCyclePhase
			};
		}
		public virtual Global.IfcLabel? _LifeCyclePhase { get { return LifeCyclePhase; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPermeableCoveringProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// OperationType : IfcPermeableCoveringOperationEnum;
	/// PanelPosition : IfcWindowPanelPositionEnum;
	/// FrameDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// FrameThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// END_ENTITY;
	/// <summary>
	public class IfcPermeableCoveringProperties : IfcPropertySetDefinition, Global.IfcPermeableCoveringProperties
	{
		public virtual IfcPermeableCoveringOperationEnum? OperationType { get; set; }
		public virtual IfcWindowPanelPositionEnum? PanelPosition { get; set; }
		public virtual IfcPositiveLengthMeasure? FrameDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? FrameThickness { get; set; }
		public virtual IfcShapeAspect? ShapeAspectStyle { get; set; }
		public IfcPermeableCoveringProperties() : base()
		{
		}
		public IfcPermeableCoveringProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPermeableCoveringOperationEnum? OperationType, IfcWindowPanelPositionEnum? PanelPosition, IfcPositiveLengthMeasure? FrameDepth, IfcPositiveLengthMeasure? FrameThickness, IfcShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				OperationType,
				PanelPosition,
				FrameDepth,
				FrameThickness,
				ShapeAspectStyle
			};
		}
		public virtual Global.IfcPermeableCoveringOperationEnum? _OperationType { get { return OperationType; } set { } }
		public virtual Global.IfcWindowPanelPositionEnum? _PanelPosition { get { return PanelPosition; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FrameDepth { get { return FrameDepth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FrameThickness { get { return FrameThickness; } set { } }
		public virtual Global.IfcShapeAspect? _ShapeAspectStyle { get { return ShapeAspectStyle; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPermit
	/// SUBTYPE OF (IfcControl);
	/// PermitID : IfcIdentifier;
	/// UNIQUE
	/// UR2 : PermitID;
	/// END_ENTITY;
	/// <summary>
	public class IfcPermit : IfcControl, Global.IfcPermit
	{
		public virtual IfcIdentifier? PermitID { get; set; }
		public IfcPermit() : base()
		{
		}
		public IfcPermit(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? PermitID) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.PermitID = PermitID;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				PermitID
			};
		}
		public virtual Global.IfcIdentifier? _PermitID { get { return PermitID; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPerson;
	/// Id : OPTIONAL IfcIdentifier;
	/// FamilyName : OPTIONAL IfcLabel;
	/// GivenName : OPTIONAL IfcLabel;
	/// MiddleNames : OPTIONAL LIST [1:?] OF IfcLabel;
	/// PrefixTitles : OPTIONAL LIST [1:?] OF IfcLabel;
	/// SuffixTitles : OPTIONAL LIST [1:?] OF IfcLabel;
	/// Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
	/// Addresses : OPTIONAL LIST [1:?] OF IfcAddress;
	/// INVERSE
	/// EngagedIn : SET [0:?] OF IfcPersonAndOrganization FOR ThePerson;
	/// WHERE
	/// WR1 : EXISTS(FamilyName) OR
	/// EXISTS(GivenName);
	/// END_ENTITY;
	/// <summary>
	public class IfcPerson : Ifc_Entity, IfcActorSelect, IfcObjectReferenceSelect, Global.IfcPerson
	{
		public virtual IfcIdentifier? Id { get; set; }
		public virtual IfcLabel? FamilyName { get; set; }
		public virtual IfcLabel? GivenName { get; set; }
		public virtual List<IfcLabel>? MiddleNames { get; set; }
		public virtual List<IfcLabel>? PrefixTitles { get; set; }
		public virtual List<IfcLabel>? SuffixTitles { get; set; }
		public virtual List<IfcActorRole>? Roles { get; set; }
		public virtual List<IfcAddress>? Addresses { get; set; }
		public List<IfcPersonAndOrganization>? EngagedIn => Model?.GetItems<IfcPersonAndOrganization>().Where(x => x.ThePerson != null && x.ThePerson == this).ToList();
		public IfcPerson() : base()
		{
		}
		public IfcPerson(IfcIdentifier? Id, IfcLabel? FamilyName, IfcLabel? GivenName, List<IfcLabel>? MiddleNames, List<IfcLabel>? PrefixTitles, List<IfcLabel>? SuffixTitles, List<IfcActorRole>? Roles, List<IfcAddress>? Addresses) : base ()
		{
			this.Id = Id;
			this.FamilyName = FamilyName;
			this.GivenName = GivenName;
			this.MiddleNames = MiddleNames;
			this.PrefixTitles = PrefixTitles;
			this.SuffixTitles = SuffixTitles;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Id,
				FamilyName,
				GivenName,
				MiddleNames,
				PrefixTitles,
				SuffixTitles,
				Roles,
				Addresses
			};
		}
		public virtual Global.IfcIdentifier? _Id { get { return Id; } set { } }
		public virtual Global.IfcLabel? _FamilyName { get { return FamilyName; } set { } }
		public virtual Global.IfcLabel? _GivenName { get { return GivenName; } set { } }
		public virtual List<Global.IfcLabel>? _MiddleNames
		{
			get
			{
				if(MiddleNames != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in MiddleNames)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcLabel>? _PrefixTitles
		{
			get
			{
				if(PrefixTitles != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in PrefixTitles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcLabel>? _SuffixTitles
		{
			get
			{
				if(SuffixTitles != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in SuffixTitles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcActorRole>? _Roles
		{
			get
			{
				if(Roles != null)
				{
					List<Global.IfcActorRole>? items = new List<Global.IfcActorRole>();
					foreach (IfcActorRole item in Roles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcAddress>? _Addresses
		{
			get
			{
				if(Addresses != null)
				{
					List<Global.IfcAddress>? items = new List<Global.IfcAddress>();
					foreach (IfcAddress item in Addresses)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcPersonAndOrganization>? _EngagedIn
		{
			get
			{
				if(EngagedIn != null)
				{
					List<Global.IfcPersonAndOrganization>? items = new List<Global.IfcPersonAndOrganization>();
					foreach (IfcPersonAndOrganization item in EngagedIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPersonAndOrganization;
	/// ThePerson : IfcPerson;
	/// TheOrganization : IfcOrganization;
	/// Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
	/// END_ENTITY;
	/// <summary>
	public class IfcPersonAndOrganization : Ifc_Entity, IfcActorSelect, IfcObjectReferenceSelect, Global.IfcPersonAndOrganization
	{
		public virtual IfcPerson? ThePerson { get; set; }
		public virtual IfcOrganization? TheOrganization { get; set; }
		public virtual List<IfcActorRole>? Roles { get; set; }
		public IfcPersonAndOrganization() : base()
		{
		}
		public IfcPersonAndOrganization(IfcPerson? ThePerson, IfcOrganization? TheOrganization, List<IfcActorRole>? Roles) : base ()
		{
			this.ThePerson = ThePerson;
			this.TheOrganization = TheOrganization;
			this.Roles = Roles;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ThePerson,
				TheOrganization,
				Roles
			};
		}
		public virtual Global.IfcPerson? _ThePerson { get { return ThePerson; } set { } }
		public virtual Global.IfcOrganization? _TheOrganization { get { return TheOrganization; } set { } }
		public virtual List<Global.IfcActorRole>? _Roles
		{
			get
			{
				if(Roles != null)
				{
					List<Global.IfcActorRole>? items = new List<Global.IfcActorRole>();
					foreach (IfcActorRole item in Roles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPhysicalComplexQuantity
	/// SUBTYPE OF (IfcPhysicalQuantity);
	/// HasQuantities : SET [1:?] OF IfcPhysicalQuantity;
	/// Discrimination : IfcLabel;
	/// Quality : OPTIONAL IfcLabel;
	/// Usage : OPTIONAL IfcLabel;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* HasQuantities | SELF :=: temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcPhysicalComplexQuantity : IfcPhysicalQuantity, Global.IfcPhysicalComplexQuantity
	{
		public virtual List<IfcPhysicalQuantity>? HasQuantities { get; set; }
		public virtual IfcLabel? Discrimination { get; set; }
		public virtual IfcLabel? Quality { get; set; }
		public virtual IfcLabel? Usage { get; set; }
		public IfcPhysicalComplexQuantity() : base()
		{
		}
		public IfcPhysicalComplexQuantity(IfcLabel? Name, IfcText? Description, List<IfcPhysicalQuantity>? HasQuantities, IfcLabel? Discrimination, IfcLabel? Quality, IfcLabel? Usage) : base (Name, Description)
		{
			this.HasQuantities = HasQuantities;
			this.Discrimination = Discrimination;
			this.Quality = Quality;
			this.Usage = Usage;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				HasQuantities,
				Discrimination,
				Quality,
				Usage
			};
		}
		public virtual List<Global.IfcPhysicalQuantity>? _HasQuantities
		{
			get
			{
				if(HasQuantities != null)
				{
					List<Global.IfcPhysicalQuantity>? items = new List<Global.IfcPhysicalQuantity>();
					foreach (IfcPhysicalQuantity item in HasQuantities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _Discrimination { get { return Discrimination; } set { } }
		public virtual Global.IfcLabel? _Quality { get { return Quality; } set { } }
		public virtual Global.IfcLabel? _Usage { get { return Usage; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPhysicalQuantity
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPhysicalComplexQuantity
	/// ,IfcPhysicalSimpleQuantity));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// INVERSE
	/// PartOfComplex : SET [0:1] OF IfcPhysicalComplexQuantity FOR HasQuantities;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPhysicalQuantity : Ifc_Entity, Global.IfcPhysicalQuantity
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public List<IfcPhysicalComplexQuantity>? PartOfComplex => Model?.GetItems<IfcPhysicalComplexQuantity>().Where(x => x.HasQuantities != null && x.HasQuantities.Contains(this)).ToList();
		public IfcPhysicalQuantity() : base()
		{
		}
		public IfcPhysicalQuantity(IfcLabel? Name, IfcText? Description) : base ()
		{
			this.Name = Name;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual List<Global.IfcPhysicalComplexQuantity>? _PartOfComplex
		{
			get
			{
				if(PartOfComplex != null)
				{
					List<Global.IfcPhysicalComplexQuantity>? items = new List<Global.IfcPhysicalComplexQuantity>();
					foreach (IfcPhysicalComplexQuantity item in PartOfComplex)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPhysicalSimpleQuantity
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcQuantityArea
	/// ,IfcQuantityCount
	/// ,IfcQuantityLength
	/// ,IfcQuantityTime
	/// ,IfcQuantityVolume
	/// ,IfcQuantityWeight))
	/// SUBTYPE OF (IfcPhysicalQuantity);
	/// Unit : OPTIONAL IfcNamedUnit;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPhysicalSimpleQuantity : IfcPhysicalQuantity, Global.IfcPhysicalSimpleQuantity
	{
		public virtual IfcNamedUnit? Unit { get; set; }
		public IfcPhysicalSimpleQuantity() : base()
		{
		}
		public IfcPhysicalSimpleQuantity(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit) : base (Name, Description)
		{
			this.Unit = Unit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit
			};
		}
		public virtual Global.IfcNamedUnit? _Unit { get { return Unit; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPile
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : IfcPileTypeEnum;
	/// ConstructionType : OPTIONAL IfcPileConstructionEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcPileTypeEnum.USERDEFINED) OR ((PredefinedType = IfcPileTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPile : IfcBuildingElement, Global.IfcPile
	{
		public virtual IfcPileTypeEnum? PredefinedType { get; set; }
		public virtual IfcPileConstructionEnum? ConstructionType { get; set; }
		public IfcPile() : base()
		{
		}
		public IfcPile(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPileTypeEnum? PredefinedType, IfcPileConstructionEnum? ConstructionType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
			this.ConstructionType = ConstructionType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType,
				ConstructionType
			};
		}
		public virtual Global.IfcPileTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
		public virtual Global.IfcPileConstructionEnum? _ConstructionType { get { return ConstructionType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPipeFittingType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcPipeFittingTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcPipeFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPipeFittingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPipeFittingType : IfcFlowFittingType, Global.IfcPipeFittingType
	{
		public virtual IfcPipeFittingTypeEnum? PredefinedType { get; set; }
		public IfcPipeFittingType() : base()
		{
		}
		public IfcPipeFittingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcPipeFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcPipeFittingTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPipeSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcPipeSegmentTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcPipeSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPipeSegmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPipeSegmentType : IfcFlowSegmentType, Global.IfcPipeSegmentType
	{
		public virtual IfcPipeSegmentTypeEnum? PredefinedType { get; set; }
		public IfcPipeSegmentType() : base()
		{
		}
		public IfcPipeSegmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcPipeSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcPipeSegmentTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPixelTexture
	/// SUBTYPE OF (IfcSurfaceTexture);
	/// Width : IfcInteger;
	/// Height : IfcInteger;
	/// ColourComponents : IfcInteger;
	/// Pixel : LIST [1:?] OF BINARY(32);
	/// WHERE
	/// WR21 : Width >= 1;
	/// WR22 : Height >= 1;
	/// WR23 : {1 <= ColourComponents <= 4};
	/// WR24 : SIZEOF(Pixel) = (Width * Height);
	/// END_ENTITY;
	/// <summary>
	public class IfcPixelTexture : IfcSurfaceTexture, Global.IfcPixelTexture
	{
		public virtual IfcInteger? Width { get; set; }
		public virtual IfcInteger? Height { get; set; }
		public virtual IfcInteger? ColourComponents { get; set; }
		public virtual List<INTEGER>? Pixel { get; set; }
		public IfcPixelTexture() : base()
		{
		}
		public IfcPixelTexture(BOOLEAN? RepeatS, BOOLEAN? RepeatT, IfcSurfaceTextureEnum? TextureType, IfcCartesianTransformationOperator2D? TextureTransform, IfcInteger? Width, IfcInteger? Height, IfcInteger? ColourComponents, List<INTEGER>? Pixel) : base (RepeatS, RepeatT, TextureType, TextureTransform)
		{
			this.Width = Width;
			this.Height = Height;
			this.ColourComponents = ColourComponents;
			this.Pixel = Pixel;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RepeatS,
				RepeatT,
				TextureType,
				TextureTransform,
				Width,
				Height,
				ColourComponents,
				Pixel
			};
		}
		public virtual Global.IfcInteger? _Width { get { return Width; } set { } }
		public virtual Global.IfcInteger? _Height { get { return Height; } set { } }
		public virtual Global.IfcInteger? _ColourComponents { get { return ColourComponents; } set { } }
		public virtual List<INTEGER>? _Pixel
		{
			get
			{
				if(Pixel != null)
				{
					List<INTEGER>? items = new List<INTEGER>();
					foreach (INTEGER item in Pixel)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPlacement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAxis1Placement
	/// ,IfcAxis2Placement2D
	/// ,IfcAxis2Placement3D))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Location : IfcCartesianPoint;
	/// DERIVE
	/// Dim : IfcDimensionCount := Location.Dim;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPlacement : IfcGeometricRepresentationItem, Global.IfcPlacement
	{
		public virtual IfcCartesianPoint? Location { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcPlacement() : base()
		{
		}
		public IfcPlacement(IfcCartesianPoint? Location) : base ()
		{
			this.Location = Location;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Location
			};
		}
		public virtual Global.IfcCartesianPoint? _Location { get { return Location; } set { } }
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPlanarBox
	/// SUBTYPE OF (IfcPlanarExtent);
	/// Placement : IfcAxis2Placement;
	/// END_ENTITY;
	/// <summary>
	public class IfcPlanarBox : IfcPlanarExtent, Global.IfcPlanarBox
	{
		public virtual IfcAxis2Placement? Placement { get; set; }
		public IfcPlanarBox() : base()
		{
		}
		public IfcPlanarBox(IfcLengthMeasure? SizeInX, IfcLengthMeasure? SizeInY, IfcAxis2Placement? Placement) : base (SizeInX, SizeInY)
		{
			this.Placement = Placement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SizeInX,
				SizeInY,
				Placement
			};
		}
		public virtual Global.IfcAxis2Placement? _Placement { get { return Placement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPlanarExtent
	/// SUPERTYPE OF (ONEOF
	/// (IfcPlanarBox))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// SizeInX : IfcLengthMeasure;
	/// SizeInY : IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcPlanarExtent : IfcGeometricRepresentationItem, Global.IfcPlanarExtent
	{
		public virtual IfcLengthMeasure? SizeInX { get; set; }
		public virtual IfcLengthMeasure? SizeInY { get; set; }
		public IfcPlanarExtent() : base()
		{
		}
		public IfcPlanarExtent(IfcLengthMeasure? SizeInX, IfcLengthMeasure? SizeInY) : base ()
		{
			this.SizeInX = SizeInX;
			this.SizeInY = SizeInY;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SizeInX,
				SizeInY
			};
		}
		public virtual Global.IfcLengthMeasure? _SizeInX { get { return SizeInX; } set { } }
		public virtual Global.IfcLengthMeasure? _SizeInY { get { return SizeInY; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPlane
	/// SUBTYPE OF (IfcElementarySurface);
	/// END_ENTITY;
	/// <summary>
	public class IfcPlane : IfcElementarySurface, Global.IfcPlane
	{
		public IfcPlane() : base()
		{
		}
		public IfcPlane(IfcAxis2Placement3D? Position) : base (Position)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPlate
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcPlate : IfcBuildingElement, Global.IfcPlate
	{
		public IfcPlate() : base()
		{
		}
		public IfcPlate(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPlateType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcPlateTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcPlateType : IfcBuildingElementType, Global.IfcPlateType
	{
		public virtual IfcPlateTypeEnum? PredefinedType { get; set; }
		public IfcPlateType() : base()
		{
		}
		public IfcPlateType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcPlateTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcPlateTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPoint
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCartesianPoint
	/// ,IfcPointOnCurve
	/// ,IfcPointOnSurface))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPoint : IfcGeometricRepresentationItem, IfcGeometricSetSelect, IfcPointOrVertexPoint, Global.IfcPoint
	{
		public virtual IfcDimensionCount? Dim { get; set;  }
		public IfcPoint() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPointOnCurve
	/// SUBTYPE OF (IfcPoint);
	/// BasisCurve : IfcCurve;
	/// PointParameter : IfcParameterValue;
	/// DERIVE
	/// Dim : IfcDimensionCount := BasisCurve.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IfcPointOnCurve : IfcPoint, Global.IfcPointOnCurve
	{
		public virtual IfcCurve? BasisCurve { get; set; }
		public virtual IfcParameterValue? PointParameter { get; set; }
		//TODO DERIVE
		public override IfcDimensionCount? Dim {get {return null;}}
		public IfcPointOnCurve() : base()
		{
		}
		public IfcPointOnCurve(IfcCurve? BasisCurve, IfcParameterValue? PointParameter) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.PointParameter = PointParameter;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisCurve,
				PointParameter
			};
		}
		public virtual Global.IfcCurve? _BasisCurve { get { return BasisCurve; } set { } }
		public virtual Global.IfcParameterValue? _PointParameter { get { return PointParameter; } set { } }
		public override Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPointOnSurface
	/// SUBTYPE OF (IfcPoint);
	/// BasisSurface : IfcSurface;
	/// PointParameterU : IfcParameterValue;
	/// PointParameterV : IfcParameterValue;
	/// DERIVE
	/// Dim : IfcDimensionCount := BasisSurface.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IfcPointOnSurface : IfcPoint, Global.IfcPointOnSurface
	{
		public virtual IfcSurface? BasisSurface { get; set; }
		public virtual IfcParameterValue? PointParameterU { get; set; }
		public virtual IfcParameterValue? PointParameterV { get; set; }
		//TODO DERIVE
		public override IfcDimensionCount? Dim {get {return null;}}
		public IfcPointOnSurface() : base()
		{
		}
		public IfcPointOnSurface(IfcSurface? BasisSurface, IfcParameterValue? PointParameterU, IfcParameterValue? PointParameterV) : base ()
		{
			this.BasisSurface = BasisSurface;
			this.PointParameterU = PointParameterU;
			this.PointParameterV = PointParameterV;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisSurface,
				PointParameterU,
				PointParameterV
			};
		}
		public virtual Global.IfcSurface? _BasisSurface { get { return BasisSurface; } set { } }
		public virtual Global.IfcParameterValue? _PointParameterU { get { return PointParameterU; } set { } }
		public virtual Global.IfcParameterValue? _PointParameterV { get { return PointParameterV; } set { } }
		public override Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPolyLoop
	/// SUBTYPE OF (IfcLoop);
	/// Polygon : LIST [3:?] OF UNIQUE IfcCartesianPoint;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(Temp <* Polygon | Temp.Dim <> Polygon[1].Dim)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcPolyLoop : IfcLoop, Global.IfcPolyLoop
	{
		public virtual List<IfcCartesianPoint>? Polygon { get; set; }
		public IfcPolyLoop() : base()
		{
		}
		public IfcPolyLoop(List<IfcCartesianPoint>? Polygon) : base ()
		{
			this.Polygon = Polygon;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Polygon
			};
		}
		public virtual List<Global.IfcCartesianPoint>? _Polygon
		{
			get
			{
				if(Polygon != null)
				{
					List<Global.IfcCartesianPoint>? items = new List<Global.IfcCartesianPoint>();
					foreach (IfcCartesianPoint item in Polygon)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPolygonalBoundedHalfSpace
	/// SUBTYPE OF (IfcHalfSpaceSolid);
	/// Position : IfcAxis2Placement3D;
	/// PolygonalBoundary : IfcBoundedCurve;
	/// WHERE
	/// WR41 : PolygonalBoundary.Dim = 2;
	/// WR42 : SIZEOF(TYPEOF(PolygonalBoundary) * [
	/// 'IFC2X3.IFCPOLYLINE',
	/// 'IFC2X3.IFCCOMPOSITECURVE']
	/// ) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcPolygonalBoundedHalfSpace : IfcHalfSpaceSolid, Global.IfcPolygonalBoundedHalfSpace
	{
		public virtual IfcAxis2Placement3D? Position { get; set; }
		public virtual IfcBoundedCurve? PolygonalBoundary { get; set; }
		public IfcPolygonalBoundedHalfSpace() : base()
		{
		}
		public IfcPolygonalBoundedHalfSpace(IfcSurface? BaseSurface, BOOLEAN? AgreementFlag, IfcAxis2Placement3D? Position, IfcBoundedCurve? PolygonalBoundary) : base (BaseSurface, AgreementFlag)
		{
			this.Position = Position;
			this.PolygonalBoundary = PolygonalBoundary;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BaseSurface,
				AgreementFlag,
				Position,
				PolygonalBoundary
			};
		}
		public virtual Global.IfcAxis2Placement3D? _Position { get { return Position; } set { } }
		public virtual Global.IfcBoundedCurve? _PolygonalBoundary { get { return PolygonalBoundary; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPolyline
	/// SUBTYPE OF (IfcBoundedCurve);
	/// Points : LIST [2:?] OF IfcCartesianPoint;
	/// WHERE
	/// WR41 : SIZEOF(QUERY(Temp <* Points | Temp.Dim <> Points[1].Dim)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcPolyline : IfcBoundedCurve, Global.IfcPolyline
	{
		public virtual List<IfcCartesianPoint>? Points { get; set; }
		public IfcPolyline() : base()
		{
		}
		public IfcPolyline(List<IfcCartesianPoint>? Points) : base ()
		{
			this.Points = Points;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Points
			};
		}
		public virtual List<Global.IfcCartesianPoint>? _Points
		{
			get
			{
				if(Points != null)
				{
					List<Global.IfcCartesianPoint>? items = new List<Global.IfcCartesianPoint>();
					foreach (IfcCartesianPoint item in Points)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPort
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDistributionPort))
	/// SUBTYPE OF (IfcProduct);
	/// INVERSE
	/// ContainedIn : IfcRelConnectsPortToElement FOR RelatingPort;
	/// ConnectedFrom : SET [0:1] OF IfcRelConnectsPorts FOR RelatedPort;
	/// ConnectedTo : SET [0:1] OF IfcRelConnectsPorts FOR RelatingPort;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPort : IfcProduct, Global.IfcPort
	{
		public IfcRelConnectsPortToElement? ContainedIn => Model?.GetItems<IfcRelConnectsPortToElement>().FirstOrDefault(x => x.RelatingPort != null && x.RelatingPort == this);
		public List<IfcRelConnectsPorts>? ConnectedFrom => Model?.GetItems<IfcRelConnectsPorts>().Where(x => x.RelatedPort != null && x.RelatedPort == this).ToList();
		public List<IfcRelConnectsPorts>? ConnectedTo => Model?.GetItems<IfcRelConnectsPorts>().Where(x => x.RelatingPort != null && x.RelatingPort == this).ToList();
		public IfcPort() : base()
		{
		}
		public IfcPort(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation
			};
		}
		public virtual Global.IfcRelConnectsPortToElement? _ContainedIn { get { return ContainedIn; } set { } }
		public virtual List<Global.IfcRelConnectsPorts>? _ConnectedFrom
		{
			get
			{
				if(ConnectedFrom != null)
				{
					List<Global.IfcRelConnectsPorts>? items = new List<Global.IfcRelConnectsPorts>();
					foreach (IfcRelConnectsPorts item in ConnectedFrom)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelConnectsPorts>? _ConnectedTo
		{
			get
			{
				if(ConnectedTo != null)
				{
					List<Global.IfcRelConnectsPorts>? items = new List<Global.IfcRelConnectsPorts>();
					foreach (IfcRelConnectsPorts item in ConnectedTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPostalAddress
	/// SUBTYPE OF (IfcAddress);
	/// InternalLocation : OPTIONAL IfcLabel;
	/// AddressLines : OPTIONAL LIST [1:?] OF IfcLabel;
	/// PostalBox : OPTIONAL IfcLabel;
	/// Town : OPTIONAL IfcLabel;
	/// Region : OPTIONAL IfcLabel;
	/// PostalCode : OPTIONAL IfcLabel;
	/// Country : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS (InternalLocation) OR
	/// EXISTS (AddressLines) OR
	/// EXISTS (PostalBox) OR
	/// EXISTS (PostalCode) OR
	/// EXISTS (Town) OR
	/// EXISTS (Region) OR
	/// EXISTS (Country);
	/// END_ENTITY;
	/// <summary>
	public class IfcPostalAddress : IfcAddress, Global.IfcPostalAddress
	{
		public virtual IfcLabel? InternalLocation { get; set; }
		public virtual List<IfcLabel>? AddressLines { get; set; }
		public virtual IfcLabel? PostalBox { get; set; }
		public virtual IfcLabel? Town { get; set; }
		public virtual IfcLabel? Region { get; set; }
		public virtual IfcLabel? PostalCode { get; set; }
		public virtual IfcLabel? Country { get; set; }
		public IfcPostalAddress() : base()
		{
		}
		public IfcPostalAddress(IfcAddressTypeEnum? Purpose, IfcText? Description, IfcLabel? UserDefinedPurpose, IfcLabel? InternalLocation, List<IfcLabel>? AddressLines, IfcLabel? PostalBox, IfcLabel? Town, IfcLabel? Region, IfcLabel? PostalCode, IfcLabel? Country) : base (Purpose, Description, UserDefinedPurpose)
		{
			this.InternalLocation = InternalLocation;
			this.AddressLines = AddressLines;
			this.PostalBox = PostalBox;
			this.Town = Town;
			this.Region = Region;
			this.PostalCode = PostalCode;
			this.Country = Country;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Purpose,
				Description,
				UserDefinedPurpose,
				InternalLocation,
				AddressLines,
				PostalBox,
				Town,
				Region,
				PostalCode,
				Country
			};
		}
		public virtual Global.IfcLabel? _InternalLocation { get { return InternalLocation; } set { } }
		public virtual List<Global.IfcLabel>? _AddressLines
		{
			get
			{
				if(AddressLines != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in AddressLines)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _PostalBox { get { return PostalBox; } set { } }
		public virtual Global.IfcLabel? _Town { get { return Town; } set { } }
		public virtual Global.IfcLabel? _Region { get { return Region; } set { } }
		public virtual Global.IfcLabel? _PostalCode { get { return PostalCode; } set { } }
		public virtual Global.IfcLabel? _Country { get { return Country; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPreDefinedColour
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDraughtingPreDefinedColour))
	/// SUBTYPE OF (IfcPreDefinedItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPreDefinedColour : IfcPreDefinedItem, IfcColour, Global.IfcPreDefinedColour
	{
		public IfcPreDefinedColour() : base()
		{
		}
		public IfcPreDefinedColour(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedCurveFont
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDraughtingPreDefinedCurveFont))
	/// SUBTYPE OF (IfcPreDefinedItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPreDefinedCurveFont : IfcPreDefinedItem, IfcCurveStyleFontSelect, Global.IfcPreDefinedCurveFont
	{
		public IfcPreDefinedCurveFont() : base()
		{
		}
		public IfcPreDefinedCurveFont(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedDimensionSymbol
	/// SUBTYPE OF (IfcPreDefinedSymbol);
	/// WHERE
	/// WR31 : SELF\IfcPreDefinedItem.Name IN ['arc length','conical taper','counterbore',
	/// 'countersink','depth','diameter','plus minus','radius',
	/// 'slope','spherical diameter','spherical radius','square'];
	/// END_ENTITY;
	/// <summary>
	public class IfcPreDefinedDimensionSymbol : IfcPreDefinedSymbol, Global.IfcPreDefinedDimensionSymbol
	{
		public IfcPreDefinedDimensionSymbol() : base()
		{
		}
		public IfcPreDefinedDimensionSymbol(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPreDefinedColour
	/// ,IfcPreDefinedCurveFont
	/// ,IfcPreDefinedSymbol
	/// ,IfcPreDefinedTextFont));
	/// Name : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPreDefinedItem : Ifc_Entity, Global.IfcPreDefinedItem
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcPreDefinedItem() : base()
		{
		}
		public IfcPreDefinedItem(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPreDefinedPointMarkerSymbol
	/// SUBTYPE OF (IfcPreDefinedSymbol);
	/// WHERE
	/// WR31 : SELF\IfcPreDefinedItem.Name IN ['asterisk','circle','dot','plus','square','triangle','x'];
	/// END_ENTITY;
	/// <summary>
	public class IfcPreDefinedPointMarkerSymbol : IfcPreDefinedSymbol, Global.IfcPreDefinedPointMarkerSymbol
	{
		public IfcPreDefinedPointMarkerSymbol() : base()
		{
		}
		public IfcPreDefinedPointMarkerSymbol(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedSymbol
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPreDefinedDimensionSymbol
	/// ,IfcPreDefinedPointMarkerSymbol
	/// ,IfcPreDefinedTerminatorSymbol))
	/// SUBTYPE OF (IfcPreDefinedItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPreDefinedSymbol : IfcPreDefinedItem, IfcDefinedSymbolSelect, Global.IfcPreDefinedSymbol
	{
		public IfcPreDefinedSymbol() : base()
		{
		}
		public IfcPreDefinedSymbol(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedTerminatorSymbol
	/// SUBTYPE OF (IfcPreDefinedSymbol);
	/// WHERE
	/// WR31 : SELF\IfcPreDefinedItem.Name IN ['blanked arrow','blanked box',
	/// 'blanked dot','dimension origin','filled arrow','filled box',
	/// 'filled dot','integral symbol','open arrow','slash','unfilled arrow'];
	/// END_ENTITY;
	/// <summary>
	public class IfcPreDefinedTerminatorSymbol : IfcPreDefinedSymbol, Global.IfcPreDefinedTerminatorSymbol
	{
		public IfcPreDefinedTerminatorSymbol() : base()
		{
		}
		public IfcPreDefinedTerminatorSymbol(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedTextFont
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDraughtingPreDefinedTextFont
	/// ,IfcTextStyleFontModel))
	/// SUBTYPE OF (IfcPreDefinedItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPreDefinedTextFont : IfcPreDefinedItem, IfcTextFontSelect, Global.IfcPreDefinedTextFont
	{
		public IfcPreDefinedTextFont() : base()
		{
		}
		public IfcPreDefinedTextFont(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPresentationLayerAssignment
	/// SUPERTYPE OF (ONEOF
	/// (IfcPresentationLayerWithStyle));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// AssignedItems : SET [1:?] OF IfcLayeredItem;
	/// Identifier : OPTIONAL IfcIdentifier;
	/// END_ENTITY;
	/// <summary>
	public class IfcPresentationLayerAssignment : Ifc_Entity, Global.IfcPresentationLayerAssignment
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual List<IfcLayeredItem>? AssignedItems { get; set; }
		public virtual IfcIdentifier? Identifier { get; set; }
		public IfcPresentationLayerAssignment() : base()
		{
		}
		public IfcPresentationLayerAssignment(IfcLabel? Name, IfcText? Description, List<IfcLayeredItem>? AssignedItems, IfcIdentifier? Identifier) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.AssignedItems = AssignedItems;
			this.Identifier = Identifier;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				AssignedItems,
				Identifier
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual List<Global.IfcLayeredItem>? _AssignedItems
		{
			get
			{
				if(AssignedItems != null)
				{
					List<Global.IfcLayeredItem>? items = new List<Global.IfcLayeredItem>();
					foreach (IfcLayeredItem item in AssignedItems)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcIdentifier? _Identifier { get { return Identifier; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPresentationLayerWithStyle
	/// SUBTYPE OF (IfcPresentationLayerAssignment);
	/// LayerOn : LOGICAL;
	/// LayerFrozen : LOGICAL;
	/// LayerBlocked : LOGICAL;
	/// LayerStyles : SET [0:?] OF IfcPresentationStyleSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcPresentationLayerWithStyle : IfcPresentationLayerAssignment, Global.IfcPresentationLayerWithStyle
	{
		public virtual LOGICAL? LayerOn { get; set; }
		public virtual LOGICAL? LayerFrozen { get; set; }
		public virtual LOGICAL? LayerBlocked { get; set; }
		public virtual List<IfcPresentationStyleSelect>? LayerStyles { get; set; }
		public IfcPresentationLayerWithStyle() : base()
		{
		}
		public IfcPresentationLayerWithStyle(IfcLabel? Name, IfcText? Description, List<IfcLayeredItem>? AssignedItems, IfcIdentifier? Identifier, LOGICAL? LayerOn, LOGICAL? LayerFrozen, LOGICAL? LayerBlocked, List<IfcPresentationStyleSelect>? LayerStyles) : base (Name, Description, AssignedItems, Identifier)
		{
			this.LayerOn = LayerOn;
			this.LayerFrozen = LayerFrozen;
			this.LayerBlocked = LayerBlocked;
			this.LayerStyles = LayerStyles;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				AssignedItems,
				Identifier,
				LayerOn,
				LayerFrozen,
				LayerBlocked,
				LayerStyles
			};
		}
		public virtual LOGICAL? _LayerOn { get { return LayerOn; } set { } }
		public virtual LOGICAL? _LayerFrozen { get { return LayerFrozen; } set { } }
		public virtual LOGICAL? _LayerBlocked { get { return LayerBlocked; } set { } }
		public virtual List<Global.IfcPresentationStyleSelect>? _LayerStyles
		{
			get
			{
				if(LayerStyles != null)
				{
					List<Global.IfcPresentationStyleSelect>? items = new List<Global.IfcPresentationStyleSelect>();
					foreach (IfcPresentationStyleSelect item in LayerStyles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPresentationStyle
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCurveStyle
	/// ,IfcFillAreaStyle
	/// ,IfcSurfaceStyle
	/// ,IfcSymbolStyle
	/// ,IfcTextStyle));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPresentationStyle : Ifc_Entity, Global.IfcPresentationStyle
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcPresentationStyle() : base()
		{
		}
		public IfcPresentationStyle(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPresentationStyleAssignment;
	/// Styles : SET [1:?] OF IfcPresentationStyleSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcPresentationStyleAssignment : Ifc_Entity, Global.IfcPresentationStyleAssignment
	{
		public virtual List<IfcPresentationStyleSelect>? Styles { get; set; }
		public IfcPresentationStyleAssignment() : base()
		{
		}
		public IfcPresentationStyleAssignment(List<IfcPresentationStyleSelect>? Styles) : base ()
		{
			this.Styles = Styles;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Styles
			};
		}
		public virtual List<Global.IfcPresentationStyleSelect>? _Styles
		{
			get
			{
				if(Styles != null)
				{
					List<Global.IfcPresentationStyleSelect>? items = new List<Global.IfcPresentationStyleSelect>();
					foreach (IfcPresentationStyleSelect item in Styles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProcedure
	/// SUBTYPE OF (IfcProcess);
	/// ProcedureID : IfcIdentifier;
	/// ProcedureType : IfcProcedureTypeEnum;
	/// UserDefinedProcedureType : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(temp <* SELF\IfcObjectDefinition.Decomposes | NOT('IFC2X3.IFCRELNESTS' IN TYPEOF(temp)))) = 0;
	/// WR2 : SIZEOF(QUERY(temp <* SELF\IfcObjectDefinition.IsDecomposedBy | NOT('IFC2X3.IFCRELNESTS' IN TYPEOF(temp)))) = 0;
	/// WR3 : EXISTS(SELF\IfcRoot.Name);
	/// WR4 : (ProcedureType <> IfcProcedureTypeEnum.USERDEFINED) OR
	/// ((ProcedureType = IfcProcedureTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcProcedure.UserDefinedProcedureType));
	/// END_ENTITY;
	/// <summary>
	public class IfcProcedure : IfcProcess, Global.IfcProcedure
	{
		public virtual IfcIdentifier? ProcedureID { get; set; }
		public virtual IfcProcedureTypeEnum? ProcedureType { get; set; }
		public virtual IfcLabel? UserDefinedProcedureType { get; set; }
		public IfcProcedure() : base()
		{
		}
		public IfcProcedure(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? ProcedureID, IfcProcedureTypeEnum? ProcedureType, IfcLabel? UserDefinedProcedureType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ProcedureID = ProcedureID;
			this.ProcedureType = ProcedureType;
			this.UserDefinedProcedureType = UserDefinedProcedureType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ProcedureID,
				ProcedureType,
				UserDefinedProcedureType
			};
		}
		public virtual Global.IfcIdentifier? _ProcedureID { get { return ProcedureID; } set { } }
		public virtual Global.IfcProcedureTypeEnum? _ProcedureType { get { return ProcedureType; } set { } }
		public virtual Global.IfcLabel? _UserDefinedProcedureType { get { return UserDefinedProcedureType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcProcess
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcProcedure
	/// ,IfcTask))
	/// SUBTYPE OF (IfcObject);
	/// INVERSE
	/// OperatesOn : SET [0:?] OF IfcRelAssignsToProcess FOR RelatingProcess;
	/// IsSuccessorFrom : SET [0:?] OF IfcRelSequence FOR RelatedProcess;
	/// IsPredecessorTo : SET [0:?] OF IfcRelSequence FOR RelatingProcess;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcProcess : IfcObject, Global.IfcProcess
	{
		public List<IfcRelAssignsToProcess>? OperatesOn => Model?.GetItems<IfcRelAssignsToProcess>().Where(x => x.RelatingProcess != null && x.RelatingProcess == this).ToList();
		public List<IfcRelSequence>? IsSuccessorFrom => Model?.GetItems<IfcRelSequence>().Where(x => x.RelatedProcess != null && x.RelatedProcess == this).ToList();
		public List<IfcRelSequence>? IsPredecessorTo => Model?.GetItems<IfcRelSequence>().Where(x => x.RelatingProcess != null && x.RelatingProcess == this).ToList();
		public IfcProcess() : base()
		{
		}
		public IfcProcess(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
		public virtual List<Global.IfcRelAssignsToProcess>? _OperatesOn
		{
			get
			{
				if(OperatesOn != null)
				{
					List<Global.IfcRelAssignsToProcess>? items = new List<Global.IfcRelAssignsToProcess>();
					foreach (IfcRelAssignsToProcess item in OperatesOn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelSequence>? _IsSuccessorFrom
		{
			get
			{
				if(IsSuccessorFrom != null)
				{
					List<Global.IfcRelSequence>? items = new List<Global.IfcRelSequence>();
					foreach (IfcRelSequence item in IsSuccessorFrom)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelSequence>? _IsPredecessorTo
		{
			get
			{
				if(IsPredecessorTo != null)
				{
					List<Global.IfcRelSequence>? items = new List<Global.IfcRelSequence>();
					foreach (IfcRelSequence item in IsPredecessorTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProduct
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAnnotation
	/// ,IfcElement
	/// ,IfcGrid
	/// ,IfcPort
	/// ,IfcProxy
	/// ,IfcSpatialStructureElement
	/// ,IfcStructuralActivity
	/// ,IfcStructuralItem))
	/// SUBTYPE OF (IfcObject);
	/// ObjectPlacement : OPTIONAL IfcObjectPlacement;
	/// Representation : OPTIONAL IfcProductRepresentation;
	/// INVERSE
	/// ReferencedBy : SET [0:?] OF IfcRelAssignsToProduct FOR RelatingProduct;
	/// WHERE
	/// WR1 : (EXISTS(Representation) AND EXISTS(ObjectPlacement))
	/// OR (EXISTS(Representation) AND
	/// (NOT('IFC2X3.IFCPRODUCTDEFINITIONSHAPE' IN TYPEOF(Representation))))
	/// OR (NOT(EXISTS(Representation)));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcProduct : IfcObject, Global.IfcProduct
	{
		public virtual IfcObjectPlacement? ObjectPlacement { get; set; }
		public virtual IfcProductRepresentation? Representation { get; set; }
		public List<IfcRelAssignsToProduct>? ReferencedBy => Model?.GetItems<IfcRelAssignsToProduct>().Where(x => x.RelatingProduct != null && x.RelatingProduct == this).ToList();
		public IfcProduct() : base()
		{
		}
		public IfcProduct(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation
			};
		}
		public virtual Global.IfcObjectPlacement? _ObjectPlacement { get { return ObjectPlacement; } set { } }
		public virtual Global.IfcProductRepresentation? _Representation { get { return Representation; } set { } }
		public virtual List<Global.IfcRelAssignsToProduct>? _ReferencedBy
		{
			get
			{
				if(ReferencedBy != null)
				{
					List<Global.IfcRelAssignsToProduct>? items = new List<Global.IfcRelAssignsToProduct>();
					foreach (IfcRelAssignsToProduct item in ReferencedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProductDefinitionShape
	/// SUBTYPE OF (IfcProductRepresentation);
	/// INVERSE
	/// ShapeOfProduct : SET [1:1] OF IfcProduct FOR Representation;
	/// HasShapeAspects : SET [0:?] OF IfcShapeAspect FOR PartOfProductDefinitionShape;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(temp <* Representations |
	/// (NOT('IFC2X3.IFCSHAPEMODEL' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcProductDefinitionShape : IfcProductRepresentation, Global.IfcProductDefinitionShape
	{
		public List<IfcProduct>? ShapeOfProduct => Model?.GetItems<IfcProduct>().Where(x => x.Representation != null && x.Representation == this).ToList();
		public List<IfcShapeAspect>? HasShapeAspects => Model?.GetItems<IfcShapeAspect>().Where(x => x.PartOfProductDefinitionShape != null && x.PartOfProductDefinitionShape == this).ToList();
		public IfcProductDefinitionShape() : base()
		{
		}
		public IfcProductDefinitionShape(IfcLabel? Name, IfcText? Description, List<IfcRepresentation>? Representations) : base (Name, Description, Representations)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Representations
			};
		}
		public virtual List<Global.IfcProduct>? _ShapeOfProduct
		{
			get
			{
				if(ShapeOfProduct != null)
				{
					List<Global.IfcProduct>? items = new List<Global.IfcProduct>();
					foreach (IfcProduct item in ShapeOfProduct)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcShapeAspect>? _HasShapeAspects
		{
			get
			{
				if(HasShapeAspects != null)
				{
					List<Global.IfcShapeAspect>? items = new List<Global.IfcShapeAspect>();
					foreach (IfcShapeAspect item in HasShapeAspects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProductRepresentation
	/// SUPERTYPE OF (ONEOF
	/// (IfcMaterialDefinitionRepresentation
	/// ,IfcProductDefinitionShape));
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Representations : LIST [1:?] OF IfcRepresentation;
	/// END_ENTITY;
	/// <summary>
	public class IfcProductRepresentation : Ifc_Entity, Global.IfcProductRepresentation
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual List<IfcRepresentation>? Representations { get; set; }
		public IfcProductRepresentation() : base()
		{
		}
		public IfcProductRepresentation(IfcLabel? Name, IfcText? Description, List<IfcRepresentation>? Representations) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.Representations = Representations;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Representations
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual List<Global.IfcRepresentation>? _Representations
		{
			get
			{
				if(Representations != null)
				{
					List<Global.IfcRepresentation>? items = new List<Global.IfcRepresentation>();
					foreach (IfcRepresentation item in Representations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProductsOfCombustionProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// SpecificHeatCapacity : OPTIONAL IfcSpecificHeatCapacityMeasure;
	/// N20Content : OPTIONAL IfcPositiveRatioMeasure;
	/// COContent : OPTIONAL IfcPositiveRatioMeasure;
	/// CO2Content : OPTIONAL IfcPositiveRatioMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IfcProductsOfCombustionProperties : IfcMaterialProperties, Global.IfcProductsOfCombustionProperties
	{
		public virtual IfcSpecificHeatCapacityMeasure? SpecificHeatCapacity { get; set; }
		public virtual IfcPositiveRatioMeasure? N20Content { get; set; }
		public virtual IfcPositiveRatioMeasure? COContent { get; set; }
		public virtual IfcPositiveRatioMeasure? CO2Content { get; set; }
		public IfcProductsOfCombustionProperties() : base()
		{
		}
		public IfcProductsOfCombustionProperties(IfcMaterial? Material, IfcSpecificHeatCapacityMeasure? SpecificHeatCapacity, IfcPositiveRatioMeasure? N20Content, IfcPositiveRatioMeasure? COContent, IfcPositiveRatioMeasure? CO2Content) : base (Material)
		{
			this.SpecificHeatCapacity = SpecificHeatCapacity;
			this.N20Content = N20Content;
			this.COContent = COContent;
			this.CO2Content = CO2Content;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				SpecificHeatCapacity,
				N20Content,
				COContent,
				CO2Content
			};
		}
		public virtual Global.IfcSpecificHeatCapacityMeasure? _SpecificHeatCapacity { get { return SpecificHeatCapacity; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _N20Content { get { return N20Content; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _COContent { get { return COContent; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _CO2Content { get { return CO2Content; } set { } }
	}
	/// <summary>
	/// ENTITY IfcProfileDef
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcArbitraryClosedProfileDef
	/// ,IfcArbitraryOpenProfileDef
	/// ,IfcCompositeProfileDef
	/// ,IfcDerivedProfileDef
	/// ,IfcParameterizedProfileDef));
	/// ProfileType : IfcProfileTypeEnum;
	/// ProfileName : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcProfileDef : Ifc_Entity, Global.IfcProfileDef
	{
		public virtual IfcProfileTypeEnum? ProfileType { get; set; }
		public virtual IfcLabel? ProfileName { get; set; }
		public IfcProfileDef() : base()
		{
		}
		public IfcProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName) : base ()
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName
			};
		}
		public virtual Global.IfcProfileTypeEnum? _ProfileType { get { return ProfileType; } set { } }
		public virtual Global.IfcLabel? _ProfileName { get { return ProfileName; } set { } }
	}
	/// <summary>
	/// ENTITY IfcProfileProperties
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcGeneralProfileProperties
	/// ,IfcRibPlateProfileProperties));
	/// ProfileName : OPTIONAL IfcLabel;
	/// ProfileDefinition : OPTIONAL IfcProfileDef;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcProfileProperties : Ifc_Entity, Global.IfcProfileProperties
	{
		public virtual IfcLabel? ProfileName { get; set; }
		public virtual IfcProfileDef? ProfileDefinition { get; set; }
		public IfcProfileProperties() : base()
		{
		}
		public IfcProfileProperties(IfcLabel? ProfileName, IfcProfileDef? ProfileDefinition) : base ()
		{
			this.ProfileName = ProfileName;
			this.ProfileDefinition = ProfileDefinition;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileName,
				ProfileDefinition
			};
		}
		public virtual Global.IfcLabel? _ProfileName { get { return ProfileName; } set { } }
		public virtual Global.IfcProfileDef? _ProfileDefinition { get { return ProfileDefinition; } set { } }
	}
	/// <summary>
	/// ENTITY IfcProject
	/// SUBTYPE OF (IfcObject);
	/// LongName : OPTIONAL IfcLabel;
	/// Phase : OPTIONAL IfcLabel;
	/// RepresentationContexts : SET [1:?] OF IfcRepresentationContext;
	/// UnitsInContext : IfcUnitAssignment;
	/// WHERE
	/// WR31 : EXISTS(SELF\IfcRoot.Name);
	/// WR32 : SIZEOF(QUERY(Temp <* RepresentationContexts |
	/// 'IFC2X3.IFCGEOMETRICREPRESENTATIONSUBCONTEXT' IN TYPEOF(Temp)
	/// )) = 0;
	/// WR33 : SIZEOF(SELF\IfcObjectDefinition.Decomposes) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcProject : IfcObject, Global.IfcProject
	{
		public virtual IfcLabel? LongName { get; set; }
		public virtual IfcLabel? Phase { get; set; }
		public virtual List<IfcRepresentationContext>? RepresentationContexts { get; set; }
		public virtual IfcUnitAssignment? UnitsInContext { get; set; }
		public IfcProject() : base()
		{
		}
		public IfcProject(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcLabel? LongName, IfcLabel? Phase, List<IfcRepresentationContext>? RepresentationContexts, IfcUnitAssignment? UnitsInContext) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.LongName = LongName;
			this.Phase = Phase;
			this.RepresentationContexts = RepresentationContexts;
			this.UnitsInContext = UnitsInContext;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				LongName,
				Phase,
				RepresentationContexts,
				UnitsInContext
			};
		}
		public virtual Global.IfcLabel? _LongName { get { return LongName; } set { } }
		public virtual Global.IfcLabel? _Phase { get { return Phase; } set { } }
		public virtual List<Global.IfcRepresentationContext>? _RepresentationContexts
		{
			get
			{
				if(RepresentationContexts != null)
				{
					List<Global.IfcRepresentationContext>? items = new List<Global.IfcRepresentationContext>();
					foreach (IfcRepresentationContext item in RepresentationContexts)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcUnitAssignment? _UnitsInContext { get { return UnitsInContext; } set { } }
	}
	/// <summary>
	/// ENTITY IfcProjectOrder
	/// SUBTYPE OF (IfcControl);
	/// ID : IfcIdentifier;
	/// PredefinedType : IfcProjectOrderTypeEnum;
	/// Status : OPTIONAL IfcLabel;
	/// UNIQUE
	/// UR2 : ID;
	/// END_ENTITY;
	/// <summary>
	public class IfcProjectOrder : IfcControl, Global.IfcProjectOrder
	{
		public virtual IfcIdentifier? ID { get; set; }
		public virtual IfcProjectOrderTypeEnum? PredefinedType { get; set; }
		public virtual IfcLabel? Status { get; set; }
		public IfcProjectOrder() : base()
		{
		}
		public IfcProjectOrder(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? ID, IfcProjectOrderTypeEnum? PredefinedType, IfcLabel? Status) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ID = ID;
			this.PredefinedType = PredefinedType;
			this.Status = Status;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ID,
				PredefinedType,
				Status
			};
		}
		public virtual Global.IfcIdentifier? _ID { get { return ID; } set { } }
		public virtual Global.IfcProjectOrderTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
		public virtual Global.IfcLabel? _Status { get { return Status; } set { } }
	}
	/// <summary>
	/// ENTITY IfcProjectOrderRecord
	/// SUBTYPE OF (IfcControl);
	/// Records : LIST [1:?] OF UNIQUE IfcRelAssignsToProjectOrder;
	/// PredefinedType : IfcProjectOrderRecordTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcProjectOrderRecord : IfcControl, Global.IfcProjectOrderRecord
	{
		public virtual List<IfcRelAssignsToProjectOrder>? Records { get; set; }
		public virtual IfcProjectOrderRecordTypeEnum? PredefinedType { get; set; }
		public IfcProjectOrderRecord() : base()
		{
		}
		public IfcProjectOrderRecord(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, List<IfcRelAssignsToProjectOrder>? Records, IfcProjectOrderRecordTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.Records = Records;
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Records,
				PredefinedType
			};
		}
		public virtual List<Global.IfcRelAssignsToProjectOrder>? _Records
		{
			get
			{
				if(Records != null)
				{
					List<Global.IfcRelAssignsToProjectOrder>? items = new List<Global.IfcRelAssignsToProjectOrder>();
					foreach (IfcRelAssignsToProjectOrder item in Records)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcProjectOrderRecordTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcProjectionCurve
	/// SUBTYPE OF (IfcAnnotationCurveOccurrence);
	/// END_ENTITY;
	/// <summary>
	public class IfcProjectionCurve : IfcAnnotationCurveOccurrence, Global.IfcProjectionCurve
	{
		public IfcProjectionCurve() : base()
		{
		}
		public IfcProjectionCurve(IfcRepresentationItem? Item, List<IfcPresentationStyleAssignment>? Styles, IfcLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcProjectionElement
	/// SUBTYPE OF (IfcFeatureElementAddition);
	/// END_ENTITY;
	/// <summary>
	public class IfcProjectionElement : IfcFeatureElementAddition, Global.IfcProjectionElement
	{
		public IfcProjectionElement() : base()
		{
		}
		public IfcProjectionElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcProperty
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcComplexProperty
	/// ,IfcSimpleProperty));
	/// Name : IfcIdentifier;
	/// Description : OPTIONAL IfcText;
	/// INVERSE
	/// PropertyForDependance : SET [0:?] OF IfcPropertyDependencyRelationship FOR DependingProperty;
	/// PropertyDependsOn : SET [0:?] OF IfcPropertyDependencyRelationship FOR DependantProperty;
	/// PartOfComplex : SET [0:1] OF IfcComplexProperty FOR HasProperties;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcProperty : Ifc_Entity, Global.IfcProperty
	{
		public virtual IfcIdentifier? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public List<IfcPropertyDependencyRelationship>? PropertyForDependance => Model?.GetItems<IfcPropertyDependencyRelationship>().Where(x => x.DependingProperty != null && x.DependingProperty == this).ToList();
		public List<IfcPropertyDependencyRelationship>? PropertyDependsOn => Model?.GetItems<IfcPropertyDependencyRelationship>().Where(x => x.DependantProperty != null && x.DependantProperty == this).ToList();
		public List<IfcComplexProperty>? PartOfComplex => Model?.GetItems<IfcComplexProperty>().Where(x => x.HasProperties != null && x.HasProperties.Contains(this)).ToList();
		public IfcProperty() : base()
		{
		}
		public IfcProperty(IfcIdentifier? Name, IfcText? Description) : base ()
		{
			this.Name = Name;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description
			};
		}
		public virtual Global.IfcIdentifier? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual List<Global.IfcPropertyDependencyRelationship>? _PropertyForDependance
		{
			get
			{
				if(PropertyForDependance != null)
				{
					List<Global.IfcPropertyDependencyRelationship>? items = new List<Global.IfcPropertyDependencyRelationship>();
					foreach (IfcPropertyDependencyRelationship item in PropertyForDependance)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcPropertyDependencyRelationship>? _PropertyDependsOn
		{
			get
			{
				if(PropertyDependsOn != null)
				{
					List<Global.IfcPropertyDependencyRelationship>? items = new List<Global.IfcPropertyDependencyRelationship>();
					foreach (IfcPropertyDependencyRelationship item in PropertyDependsOn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcComplexProperty>? _PartOfComplex
		{
			get
			{
				if(PartOfComplex != null)
				{
					List<Global.IfcComplexProperty>? items = new List<Global.IfcComplexProperty>();
					foreach (IfcComplexProperty item in PartOfComplex)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyBoundedValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// UpperBoundValue : OPTIONAL IfcValue;
	/// LowerBoundValue : OPTIONAL IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// WHERE
	/// WR21 : NOT(EXISTS(UpperBoundValue)) OR NOT(EXISTS(LowerBoundValue)) OR
	/// (TYPEOF(UpperBoundValue) = TYPEOF(LowerBoundValue));
	/// WR22 : EXISTS(UpperBoundValue) OR EXISTS(LowerBoundValue);
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyBoundedValue : IfcSimpleProperty, Global.IfcPropertyBoundedValue
	{
		public virtual IfcValue? UpperBoundValue { get; set; }
		public virtual IfcValue? LowerBoundValue { get; set; }
		public virtual IfcUnit? Unit { get; set; }
		public IfcPropertyBoundedValue() : base()
		{
		}
		public IfcPropertyBoundedValue(IfcIdentifier? Name, IfcText? Description, IfcValue? UpperBoundValue, IfcValue? LowerBoundValue, IfcUnit? Unit) : base (Name, Description)
		{
			this.UpperBoundValue = UpperBoundValue;
			this.LowerBoundValue = LowerBoundValue;
			this.Unit = Unit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				UpperBoundValue,
				LowerBoundValue,
				Unit
			};
		}
		public virtual Global.IfcValue? _UpperBoundValue { get { return UpperBoundValue; } set { } }
		public virtual Global.IfcValue? _LowerBoundValue { get { return LowerBoundValue; } set { } }
		public virtual Global.IfcUnit? _Unit { get { return Unit; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPropertyConstraintRelationship;
	/// RelatingConstraint : IfcConstraint;
	/// RelatedProperties : SET [1:?] OF IfcProperty;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyConstraintRelationship : Ifc_Entity, Global.IfcPropertyConstraintRelationship
	{
		public virtual IfcConstraint? RelatingConstraint { get; set; }
		public virtual List<IfcProperty>? RelatedProperties { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public IfcPropertyConstraintRelationship() : base()
		{
		}
		public IfcPropertyConstraintRelationship(IfcConstraint? RelatingConstraint, List<IfcProperty>? RelatedProperties, IfcLabel? Name, IfcText? Description) : base ()
		{
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedProperties = RelatedProperties;
			this.Name = Name;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RelatingConstraint,
				RelatedProperties,
				Name,
				Description
			};
		}
		public virtual Global.IfcConstraint? _RelatingConstraint { get { return RelatingConstraint; } set { } }
		public virtual List<Global.IfcProperty>? _RelatedProperties
		{
			get
			{
				if(RelatedProperties != null)
				{
					List<Global.IfcProperty>? items = new List<Global.IfcProperty>();
					foreach (IfcProperty item in RelatedProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPropertyDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPropertySetDefinition))
	/// SUBTYPE OF (IfcRoot);
	/// INVERSE
	/// HasAssociations : SET [0:?] OF IfcRelAssociates FOR RelatedObjects;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPropertyDefinition : IfcRoot, Global.IfcPropertyDefinition
	{
		public List<IfcRelAssociates>? HasAssociations => Model?.GetItems<IfcRelAssociates>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList();
		public IfcPropertyDefinition() : base()
		{
		}
		public IfcPropertyDefinition(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
		public virtual List<Global.IfcRelAssociates>? _HasAssociations
		{
			get
			{
				if(HasAssociations != null)
				{
					List<Global.IfcRelAssociates>? items = new List<Global.IfcRelAssociates>();
					foreach (IfcRelAssociates item in HasAssociations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyDependencyRelationship;
	/// DependingProperty : IfcProperty;
	/// DependantProperty : IfcProperty;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Expression : OPTIONAL IfcText;
	/// WHERE
	/// WR1 : DependingProperty :<>: DependantProperty;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyDependencyRelationship : Ifc_Entity, Global.IfcPropertyDependencyRelationship
	{
		public virtual IfcProperty? DependingProperty { get; set; }
		public virtual IfcProperty? DependantProperty { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcText? Expression { get; set; }
		public IfcPropertyDependencyRelationship() : base()
		{
		}
		public IfcPropertyDependencyRelationship(IfcProperty? DependingProperty, IfcProperty? DependantProperty, IfcLabel? Name, IfcText? Description, IfcText? Expression) : base ()
		{
			this.DependingProperty = DependingProperty;
			this.DependantProperty = DependantProperty;
			this.Name = Name;
			this.Description = Description;
			this.Expression = Expression;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				DependingProperty,
				DependantProperty,
				Name,
				Description,
				Expression
			};
		}
		public virtual Global.IfcProperty? _DependingProperty { get { return DependingProperty; } set { } }
		public virtual Global.IfcProperty? _DependantProperty { get { return DependantProperty; } set { } }
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcText? _Expression { get { return Expression; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPropertyEnumeratedValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// EnumerationValues : LIST [1:?] OF IfcValue;
	/// EnumerationReference : OPTIONAL IfcPropertyEnumeration;
	/// WHERE
	/// WR1 : NOT(EXISTS(EnumerationReference)) OR
	/// (SIZEOF(QUERY(temp <* EnumerationValues |
	/// temp IN EnumerationReference.EnumerationValues))
	/// = SIZEOF(EnumerationValues));
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyEnumeratedValue : IfcSimpleProperty, Global.IfcPropertyEnumeratedValue
	{
		public virtual List<IfcValue>? EnumerationValues { get; set; }
		public virtual IfcPropertyEnumeration? EnumerationReference { get; set; }
		public IfcPropertyEnumeratedValue() : base()
		{
		}
		public IfcPropertyEnumeratedValue(IfcIdentifier? Name, IfcText? Description, List<IfcValue>? EnumerationValues, IfcPropertyEnumeration? EnumerationReference) : base (Name, Description)
		{
			this.EnumerationValues = EnumerationValues;
			this.EnumerationReference = EnumerationReference;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				EnumerationValues,
				EnumerationReference
			};
		}
		public virtual List<Global.IfcValue>? _EnumerationValues
		{
			get
			{
				if(EnumerationValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in EnumerationValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcPropertyEnumeration? _EnumerationReference { get { return EnumerationReference; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPropertyEnumeration;
	/// Name : IfcLabel;
	/// EnumerationValues : LIST [1:?] OF UNIQUE IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// UNIQUE
	/// UR1 : Name;
	/// WHERE
	/// WR01 : SIZEOF(QUERY(temp <* SELF.EnumerationValues |
	/// NOT(TYPEOF(SELF.EnumerationValues[1]) = TYPEOF(temp))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyEnumeration : Ifc_Entity, Global.IfcPropertyEnumeration
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual List<IfcValue>? EnumerationValues { get; set; }
		public virtual IfcUnit? Unit { get; set; }
		public IfcPropertyEnumeration() : base()
		{
		}
		public IfcPropertyEnumeration(IfcLabel? Name, List<IfcValue>? EnumerationValues, IfcUnit? Unit) : base ()
		{
			this.Name = Name;
			this.EnumerationValues = EnumerationValues;
			this.Unit = Unit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				EnumerationValues,
				Unit
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual List<Global.IfcValue>? _EnumerationValues
		{
			get
			{
				if(EnumerationValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in EnumerationValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcUnit? _Unit { get { return Unit; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPropertyListValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// ListValues : LIST [1:?] OF IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// WHERE
	/// WR31 : SIZEOF(QUERY(temp <* SELF.ListValues |
	/// NOT(TYPEOF(SELF.ListValues[1]) = TYPEOF(temp))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyListValue : IfcSimpleProperty, Global.IfcPropertyListValue
	{
		public virtual List<IfcValue>? ListValues { get; set; }
		public virtual IfcUnit? Unit { get; set; }
		public IfcPropertyListValue() : base()
		{
		}
		public IfcPropertyListValue(IfcIdentifier? Name, IfcText? Description, List<IfcValue>? ListValues, IfcUnit? Unit) : base (Name, Description)
		{
			this.ListValues = ListValues;
			this.Unit = Unit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				ListValues,
				Unit
			};
		}
		public virtual List<Global.IfcValue>? _ListValues
		{
			get
			{
				if(ListValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in ListValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcUnit? _Unit { get { return Unit; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPropertyReferenceValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// UsageName : OPTIONAL IfcLabel;
	/// PropertyReference : IfcObjectReferenceSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyReferenceValue : IfcSimpleProperty, Global.IfcPropertyReferenceValue
	{
		public virtual IfcLabel? UsageName { get; set; }
		public virtual IfcObjectReferenceSelect? PropertyReference { get; set; }
		public IfcPropertyReferenceValue() : base()
		{
		}
		public IfcPropertyReferenceValue(IfcIdentifier? Name, IfcText? Description, IfcLabel? UsageName, IfcObjectReferenceSelect? PropertyReference) : base (Name, Description)
		{
			this.UsageName = UsageName;
			this.PropertyReference = PropertyReference;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				UsageName,
				PropertyReference
			};
		}
		public virtual Global.IfcLabel? _UsageName { get { return UsageName; } set { } }
		public virtual Global.IfcObjectReferenceSelect? _PropertyReference { get { return PropertyReference; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPropertySet
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// HasProperties : SET [1:?] OF IfcProperty;
	/// WHERE
	/// WR31 : EXISTS(SELF\IfcRoot.Name);
	/// WR32 : IfcUniquePropertyName(HasProperties);
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertySet : IfcPropertySetDefinition, Global.IfcPropertySet
	{
		public virtual List<IfcProperty>? HasProperties { get; set; }
		public IfcPropertySet() : base()
		{
		}
		public IfcPropertySet(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcProperty>? HasProperties) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.HasProperties = HasProperties;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				HasProperties
			};
		}
		public virtual List<Global.IfcProperty>? _HasProperties
		{
			get
			{
				if(HasProperties != null)
				{
					List<Global.IfcProperty>? items = new List<Global.IfcProperty>();
					foreach (IfcProperty item in HasProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertySetDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDoorLiningProperties
	/// ,IfcDoorPanelProperties
	/// ,IfcElementQuantity
	/// ,IfcEnergyProperties
	/// ,IfcFluidFlowProperties
	/// ,IfcPermeableCoveringProperties
	/// ,IfcPropertySet
	/// ,IfcReinforcementDefinitionProperties
	/// ,IfcServiceLifeFactor
	/// ,IfcSoundProperties
	/// ,IfcSoundValue
	/// ,IfcSpaceThermalLoadProperties
	/// ,IfcWindowLiningProperties
	/// ,IfcWindowPanelProperties))
	/// SUBTYPE OF (IfcPropertyDefinition);
	/// INVERSE
	/// PropertyDefinitionOf : SET [0:1] OF IfcRelDefinesByProperties FOR RelatingPropertyDefinition;
	/// DefinesType : SET [0:1] OF IfcTypeObject FOR HasPropertySets;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcPropertySetDefinition : IfcPropertyDefinition, Global.IfcPropertySetDefinition
	{
		public List<IfcRelDefinesByProperties>? PropertyDefinitionOf => Model?.GetItems<IfcRelDefinesByProperties>().Where(x => x.RelatingPropertyDefinition != null && x.RelatingPropertyDefinition == this).ToList();
		public List<IfcTypeObject>? DefinesType => Model?.GetItems<IfcTypeObject>().Where(x => x.HasPropertySets != null && x.HasPropertySets.Contains(this)).ToList();
		public IfcPropertySetDefinition() : base()
		{
		}
		public IfcPropertySetDefinition(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
		public virtual List<Global.IfcRelDefinesByProperties>? _PropertyDefinitionOf
		{
			get
			{
				if(PropertyDefinitionOf != null)
				{
					List<Global.IfcRelDefinesByProperties>? items = new List<Global.IfcRelDefinesByProperties>();
					foreach (IfcRelDefinesByProperties item in PropertyDefinitionOf)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcTypeObject>? _DefinesType
		{
			get
			{
				if(DefinesType != null)
				{
					List<Global.IfcTypeObject>? items = new List<Global.IfcTypeObject>();
					foreach (IfcTypeObject item in DefinesType)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertySingleValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// NominalValue : OPTIONAL IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertySingleValue : IfcSimpleProperty, Global.IfcPropertySingleValue
	{
		public virtual IfcValue? NominalValue { get; set; }
		public virtual IfcUnit? Unit { get; set; }
		public IfcPropertySingleValue() : base()
		{
		}
		public IfcPropertySingleValue(IfcIdentifier? Name, IfcText? Description, IfcValue? NominalValue, IfcUnit? Unit) : base (Name, Description)
		{
			this.NominalValue = NominalValue;
			this.Unit = Unit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				NominalValue,
				Unit
			};
		}
		public virtual Global.IfcValue? _NominalValue { get { return NominalValue; } set { } }
		public virtual Global.IfcUnit? _Unit { get { return Unit; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPropertyTableValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// DefiningValues : LIST [1:?] OF UNIQUE IfcValue;
	/// DefinedValues : LIST [1:?] OF IfcValue;
	/// Expression : OPTIONAL IfcText;
	/// DefiningUnit : OPTIONAL IfcUnit;
	/// DefinedUnit : OPTIONAL IfcUnit;
	/// WHERE
	/// WR1 : SIZEOF(DefiningValues) = SIZEOF(DefinedValues);
	/// WR2 : SIZEOF(QUERY(temp <* SELF.DefiningValues | TYPEOF(temp) <> TYPEOF(SELF.DefiningValues[1])))=0;
	/// WR3 : SIZEOF(QUERY(temp <* SELF.DefinedValues | TYPEOF(temp) <> TYPEOF(SELF.DefinedValues[1])))=0;
	/// END_ENTITY;
	/// <summary>
	public class IfcPropertyTableValue : IfcSimpleProperty, Global.IfcPropertyTableValue
	{
		public virtual List<IfcValue>? DefiningValues { get; set; }
		public virtual List<IfcValue>? DefinedValues { get; set; }
		public virtual IfcText? Expression { get; set; }
		public virtual IfcUnit? DefiningUnit { get; set; }
		public virtual IfcUnit? DefinedUnit { get; set; }
		public IfcPropertyTableValue() : base()
		{
		}
		public IfcPropertyTableValue(IfcIdentifier? Name, IfcText? Description, List<IfcValue>? DefiningValues, List<IfcValue>? DefinedValues, IfcText? Expression, IfcUnit? DefiningUnit, IfcUnit? DefinedUnit) : base (Name, Description)
		{
			this.DefiningValues = DefiningValues;
			this.DefinedValues = DefinedValues;
			this.Expression = Expression;
			this.DefiningUnit = DefiningUnit;
			this.DefinedUnit = DefinedUnit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				DefiningValues,
				DefinedValues,
				Expression,
				DefiningUnit,
				DefinedUnit
			};
		}
		public virtual List<Global.IfcValue>? _DefiningValues
		{
			get
			{
				if(DefiningValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in DefiningValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcValue>? _DefinedValues
		{
			get
			{
				if(DefinedValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in DefinedValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcText? _Expression { get { return Expression; } set { } }
		public virtual Global.IfcUnit? _DefiningUnit { get { return DefiningUnit; } set { } }
		public virtual Global.IfcUnit? _DefinedUnit { get { return DefinedUnit; } set { } }
	}
	/// <summary>
	/// ENTITY IfcProtectiveDeviceType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcProtectiveDeviceTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcProtectiveDeviceType : IfcFlowControllerType, Global.IfcProtectiveDeviceType
	{
		public virtual IfcProtectiveDeviceTypeEnum? PredefinedType { get; set; }
		public IfcProtectiveDeviceType() : base()
		{
		}
		public IfcProtectiveDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcProtectiveDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcProtectiveDeviceTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcProxy
	/// SUBTYPE OF (IfcProduct);
	/// ProxyType : IfcObjectTypeEnum;
	/// Tag : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IfcProxy : IfcProduct, Global.IfcProxy
	{
		public virtual IfcObjectTypeEnum? ProxyType { get; set; }
		public virtual IfcLabel? Tag { get; set; }
		public IfcProxy() : base()
		{
		}
		public IfcProxy(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcObjectTypeEnum? ProxyType, IfcLabel? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.ProxyType = ProxyType;
			this.Tag = Tag;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				ProxyType,
				Tag
			};
		}
		public virtual Global.IfcObjectTypeEnum? _ProxyType { get { return ProxyType; } set { } }
		public virtual Global.IfcLabel? _Tag { get { return Tag; } set { } }
	}
	/// <summary>
	/// ENTITY IfcPumpType
	/// SUBTYPE OF (IfcFlowMovingDeviceType);
	/// PredefinedType : IfcPumpTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcPumpTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPumpTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcPumpType : IfcFlowMovingDeviceType, Global.IfcPumpType
	{
		public virtual IfcPumpTypeEnum? PredefinedType { get; set; }
		public IfcPumpType() : base()
		{
		}
		public IfcPumpType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcPumpTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcPumpTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcQuantityArea
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// AreaValue : IfcAreaMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.AREAUNIT);
	/// WR22 : AreaValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityArea : IfcPhysicalSimpleQuantity, Global.IfcQuantityArea
	{
		public virtual IfcAreaMeasure? AreaValue { get; set; }
		public IfcQuantityArea() : base()
		{
		}
		public IfcQuantityArea(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcAreaMeasure? AreaValue) : base (Name, Description, Unit)
		{
			this.AreaValue = AreaValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				AreaValue
			};
		}
		public virtual Global.IfcAreaMeasure? _AreaValue { get { return AreaValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcQuantityCount
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// CountValue : IfcCountMeasure;
	/// WHERE
	/// WR21 : CountValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityCount : IfcPhysicalSimpleQuantity, Global.IfcQuantityCount
	{
		public virtual IfcCountMeasure? CountValue { get; set; }
		public IfcQuantityCount() : base()
		{
		}
		public IfcQuantityCount(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcCountMeasure? CountValue) : base (Name, Description, Unit)
		{
			this.CountValue = CountValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				CountValue
			};
		}
		public virtual Global.IfcCountMeasure? _CountValue { get { return CountValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcQuantityLength
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// LengthValue : IfcLengthMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.LENGTHUNIT);
	/// WR22 : LengthValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityLength : IfcPhysicalSimpleQuantity, Global.IfcQuantityLength
	{
		public virtual IfcLengthMeasure? LengthValue { get; set; }
		public IfcQuantityLength() : base()
		{
		}
		public IfcQuantityLength(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcLengthMeasure? LengthValue) : base (Name, Description, Unit)
		{
			this.LengthValue = LengthValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				LengthValue
			};
		}
		public virtual Global.IfcLengthMeasure? _LengthValue { get { return LengthValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcQuantityTime
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// TimeValue : IfcTimeMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.TIMEUNIT);
	/// WR22 : TimeValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityTime : IfcPhysicalSimpleQuantity, Global.IfcQuantityTime
	{
		public virtual IfcTimeMeasure? TimeValue { get; set; }
		public IfcQuantityTime() : base()
		{
		}
		public IfcQuantityTime(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcTimeMeasure? TimeValue) : base (Name, Description, Unit)
		{
			this.TimeValue = TimeValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				TimeValue
			};
		}
		public virtual Global.IfcTimeMeasure? _TimeValue { get { return TimeValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcQuantityVolume
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// VolumeValue : IfcVolumeMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.VOLUMEUNIT);
	/// WR22 : VolumeValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityVolume : IfcPhysicalSimpleQuantity, Global.IfcQuantityVolume
	{
		public virtual IfcVolumeMeasure? VolumeValue { get; set; }
		public IfcQuantityVolume() : base()
		{
		}
		public IfcQuantityVolume(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcVolumeMeasure? VolumeValue) : base (Name, Description, Unit)
		{
			this.VolumeValue = VolumeValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				VolumeValue
			};
		}
		public virtual Global.IfcVolumeMeasure? _VolumeValue { get { return VolumeValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcQuantityWeight
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// WeightValue : IfcMassMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.MASSUNIT);
	/// WR22 : WeightValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcQuantityWeight : IfcPhysicalSimpleQuantity, Global.IfcQuantityWeight
	{
		public virtual IfcMassMeasure? WeightValue { get; set; }
		public IfcQuantityWeight() : base()
		{
		}
		public IfcQuantityWeight(IfcLabel? Name, IfcText? Description, IfcNamedUnit? Unit, IfcMassMeasure? WeightValue) : base (Name, Description, Unit)
		{
			this.WeightValue = WeightValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				Unit,
				WeightValue
			};
		}
		public virtual Global.IfcMassMeasure? _WeightValue { get { return WeightValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRadiusDimension
	/// SUBTYPE OF (IfcDimensionCurveDirectedCallout);
	/// END_ENTITY;
	/// <summary>
	public class IfcRadiusDimension : IfcDimensionCurveDirectedCallout, Global.IfcRadiusDimension
	{
		public IfcRadiusDimension() : base()
		{
		}
		public IfcRadiusDimension(List<IfcDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Contents
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRailing
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcRailingTypeEnum;
	/// WHERE
	/// WR61 : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcRailingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcRailingTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcRailing : IfcBuildingElement, Global.IfcRailing
	{
		public virtual IfcRailingTypeEnum? PredefinedType { get; set; }
		public IfcRailing() : base()
		{
		}
		public IfcRailing(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcRailingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcRailingTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRailingType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcRailingTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcRailingType : IfcBuildingElementType, Global.IfcRailingType
	{
		public virtual IfcRailingTypeEnum? PredefinedType { get; set; }
		public IfcRailingType() : base()
		{
		}
		public IfcRailingType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcRailingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcRailingTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRamp
	/// SUBTYPE OF (IfcBuildingElement);
	/// ShapeType : IfcRampTypeEnum;
	/// WHERE
	/// WR1 : (HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 0) OR
	/// ((HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 1) AND (NOT(EXISTS(SELF\IfcProduct.Representation))));
	/// END_ENTITY;
	/// <summary>
	public class IfcRamp : IfcBuildingElement, Global.IfcRamp
	{
		public virtual IfcRampTypeEnum? ShapeType { get; set; }
		public IfcRamp() : base()
		{
		}
		public IfcRamp(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcRampTypeEnum? ShapeType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.ShapeType = ShapeType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				ShapeType
			};
		}
		public virtual Global.IfcRampTypeEnum? _ShapeType { get { return ShapeType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRampFlight
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcRampFlight : IfcBuildingElement, Global.IfcRampFlight
	{
		public IfcRampFlight() : base()
		{
		}
		public IfcRampFlight(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRampFlightType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcRampFlightTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcRampFlightType : IfcBuildingElementType, Global.IfcRampFlightType
	{
		public virtual IfcRampFlightTypeEnum? PredefinedType { get; set; }
		public IfcRampFlightType() : base()
		{
		}
		public IfcRampFlightType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcRampFlightTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcRampFlightTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRationalBezierCurve
	/// SUBTYPE OF (IfcBezierCurve);
	/// WeightsData : LIST [2:?] OF REAL;
	/// DERIVE
	/// Weights : ARRAY [0:255] OF REAL := IfcListToArray(WeightsData,0,SELF\IfcBSplineCurve.UpperIndexOnControlPoints);
	/// WHERE
	/// WR1 : SIZEOF(WeightsData) = SIZEOF(SELF\IfcBSplineCurve.ControlPointsList);
	/// WR2 : IfcCurveWeightsPositive(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IfcRationalBezierCurve : IfcBezierCurve, Global.IfcRationalBezierCurve
	{
		public virtual List<REAL>? WeightsData { get; set; }
		//TODO DERIVE
		public virtual List<REAL>? Weights {get {return null;}}
		public IfcRationalBezierCurve() : base()
		{
		}
		public IfcRationalBezierCurve(INTEGER? Degree, List<IfcCartesianPoint>? ControlPointsList, IfcBSplineCurveForm? CurveForm, LOGICAL? ClosedCurve, LOGICAL? SelfIntersect, List<REAL>? WeightsData) : base (Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect)
		{
			this.WeightsData = WeightsData;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Degree,
				ControlPointsList,
				CurveForm,
				ClosedCurve,
				SelfIntersect,
				WeightsData
			};
		}
		public virtual List<REAL>? _WeightsData
		{
			get
			{
				if(WeightsData != null)
				{
					List<REAL>? items = new List<REAL>();
					foreach (REAL item in WeightsData)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<REAL>? _Weights
		{
			get
			{
				if(Weights != null)
				{
					List<REAL>? items = new List<REAL>();
					foreach (REAL item in Weights)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRectangleHollowProfileDef
	/// SUBTYPE OF (IfcRectangleProfileDef);
	/// WallThickness : IfcPositiveLengthMeasure;
	/// InnerFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// OuterFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR31 : (WallThickness < (SELF\IfcRectangleProfileDef.XDim/2.)) AND
	/// (WallThickness < (SELF\IfcRectangleProfileDef.YDim/2.));
	/// WR32 : NOT(EXISTS(OuterFilletRadius)) OR
	/// ((OuterFilletRadius <= (SELF\IfcRectangleProfileDef.XDim/2.)) AND
	/// (OuterFilletRadius <= (SELF\IfcRectangleProfileDef.YDim/2.)));
	/// WR33 : NOT(EXISTS(InnerFilletRadius)) OR
	/// ((InnerFilletRadius <= (SELF\IfcRectangleProfileDef.XDim/2. - WallThickness)) AND
	/// (InnerFilletRadius <= (SELF\IfcRectangleProfileDef.YDim/2. - WallThickness)));
	/// END_ENTITY;
	/// <summary>
	public class IfcRectangleHollowProfileDef : IfcRectangleProfileDef, Global.IfcRectangleHollowProfileDef
	{
		public virtual IfcPositiveLengthMeasure? WallThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? InnerFilletRadius { get; set; }
		public virtual IfcPositiveLengthMeasure? OuterFilletRadius { get; set; }
		public IfcRectangleHollowProfileDef() : base()
		{
		}
		public IfcRectangleHollowProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? XDim, IfcPositiveLengthMeasure? YDim, IfcPositiveLengthMeasure? WallThickness, IfcPositiveLengthMeasure? InnerFilletRadius, IfcPositiveLengthMeasure? OuterFilletRadius) : base (ProfileType, ProfileName, Position, XDim, YDim)
		{
			this.WallThickness = WallThickness;
			this.InnerFilletRadius = InnerFilletRadius;
			this.OuterFilletRadius = OuterFilletRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				XDim,
				YDim,
				WallThickness,
				InnerFilletRadius,
				OuterFilletRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _WallThickness { get { return WallThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _InnerFilletRadius { get { return InnerFilletRadius; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _OuterFilletRadius { get { return OuterFilletRadius; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRectangleProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcRectangleHollowProfileDef
	/// ,IfcRoundedRectangleProfileDef))
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// XDim : IfcPositiveLengthMeasure;
	/// YDim : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcRectangleProfileDef : IfcParameterizedProfileDef, Global.IfcRectangleProfileDef
	{
		public virtual IfcPositiveLengthMeasure? XDim { get; set; }
		public virtual IfcPositiveLengthMeasure? YDim { get; set; }
		public IfcRectangleProfileDef() : base()
		{
		}
		public IfcRectangleProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? XDim, IfcPositiveLengthMeasure? YDim) : base (ProfileType, ProfileName, Position)
		{
			this.XDim = XDim;
			this.YDim = YDim;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				XDim,
				YDim
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _XDim { get { return XDim; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _YDim { get { return YDim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRectangularPyramid
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// XLength : IfcPositiveLengthMeasure;
	/// YLength : IfcPositiveLengthMeasure;
	/// Height : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcRectangularPyramid : IfcCsgPrimitive3D, Global.IfcRectangularPyramid
	{
		public virtual IfcPositiveLengthMeasure? XLength { get; set; }
		public virtual IfcPositiveLengthMeasure? YLength { get; set; }
		public virtual IfcPositiveLengthMeasure? Height { get; set; }
		public IfcRectangularPyramid() : base()
		{
		}
		public IfcRectangularPyramid(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? XLength, IfcPositiveLengthMeasure? YLength, IfcPositiveLengthMeasure? Height) : base (Position)
		{
			this.XLength = XLength;
			this.YLength = YLength;
			this.Height = Height;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				XLength,
				YLength,
				Height
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _XLength { get { return XLength; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _YLength { get { return YLength; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Height { get { return Height; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRectangularTrimmedSurface
	/// SUBTYPE OF (IfcBoundedSurface);
	/// BasisSurface : IfcSurface;
	/// U1 : IfcParameterValue;
	/// V1 : IfcParameterValue;
	/// U2 : IfcParameterValue;
	/// V2 : IfcParameterValue;
	/// Usense : BOOLEAN;
	/// Vsense : BOOLEAN;
	/// DERIVE
	/// Dim : IfcDimensionCount := BasisSurface.Dim;
	/// WHERE
	/// WR1 : U1 <> U2;
	/// WR2 : V1 <> V2;
	/// WR3 : (('IFC2X3.IFCELEMENTARYSURFACE' IN TYPEOF(BasisSurface)) AND
	/// (NOT ('IFC2X3.IFCPLANE' IN TYPEOF(BasisSurface)))) OR
	/// ('IFC2X3.IFCSURFACEOFREVOLUTION' IN TYPEOF(BasisSurface)) OR
	/// (Usense = (U2 > U1));
	/// WR4 : Vsense = (V2 > V1);
	/// END_ENTITY;
	/// <summary>
	public class IfcRectangularTrimmedSurface : IfcBoundedSurface, Global.IfcRectangularTrimmedSurface
	{
		public virtual IfcSurface? BasisSurface { get; set; }
		public virtual IfcParameterValue? U1 { get; set; }
		public virtual IfcParameterValue? V1 { get; set; }
		public virtual IfcParameterValue? U2 { get; set; }
		public virtual IfcParameterValue? V2 { get; set; }
		public virtual BOOLEAN? Usense { get; set; }
		public virtual BOOLEAN? Vsense { get; set; }
		//TODO DERIVE
		public override IfcDimensionCount? Dim {get {return null;}}
		public IfcRectangularTrimmedSurface() : base()
		{
		}
		public IfcRectangularTrimmedSurface(IfcSurface? BasisSurface, IfcParameterValue? U1, IfcParameterValue? V1, IfcParameterValue? U2, IfcParameterValue? V2, BOOLEAN? Usense, BOOLEAN? Vsense) : base ()
		{
			this.BasisSurface = BasisSurface;
			this.U1 = U1;
			this.V1 = V1;
			this.U2 = U2;
			this.V2 = V2;
			this.Usense = Usense;
			this.Vsense = Vsense;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisSurface,
				U1,
				V1,
				U2,
				V2,
				Usense,
				Vsense
			};
		}
		public virtual Global.IfcSurface? _BasisSurface { get { return BasisSurface; } set { } }
		public virtual Global.IfcParameterValue? _U1 { get { return U1; } set { } }
		public virtual Global.IfcParameterValue? _V1 { get { return V1; } set { } }
		public virtual Global.IfcParameterValue? _U2 { get { return U2; } set { } }
		public virtual Global.IfcParameterValue? _V2 { get { return V2; } set { } }
		public virtual BOOLEAN? _Usense { get { return Usense; } set { } }
		public virtual BOOLEAN? _Vsense { get { return Vsense; } set { } }
		public override Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcReferencesValueDocument;
	/// ReferencedDocument : IfcDocumentSelect;
	/// ReferencingValues : SET [1:?] OF IfcAppliedValue;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IfcReferencesValueDocument : Ifc_Entity, Global.IfcReferencesValueDocument
	{
		public virtual IfcDocumentSelect? ReferencedDocument { get; set; }
		public virtual List<IfcAppliedValue>? ReferencingValues { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public IfcReferencesValueDocument() : base()
		{
		}
		public IfcReferencesValueDocument(IfcDocumentSelect? ReferencedDocument, List<IfcAppliedValue>? ReferencingValues, IfcLabel? Name, IfcText? Description) : base ()
		{
			this.ReferencedDocument = ReferencedDocument;
			this.ReferencingValues = ReferencingValues;
			this.Name = Name;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ReferencedDocument,
				ReferencingValues,
				Name,
				Description
			};
		}
		public virtual Global.IfcDocumentSelect? _ReferencedDocument { get { return ReferencedDocument; } set { } }
		public virtual List<Global.IfcAppliedValue>? _ReferencingValues
		{
			get
			{
				if(ReferencingValues != null)
				{
					List<Global.IfcAppliedValue>? items = new List<Global.IfcAppliedValue>();
					foreach (IfcAppliedValue item in ReferencingValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRegularTimeSeries
	/// SUBTYPE OF (IfcTimeSeries);
	/// TimeStep : IfcTimeMeasure;
	/// Values : LIST [1:?] OF IfcTimeSeriesValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcRegularTimeSeries : IfcTimeSeries, Global.IfcRegularTimeSeries
	{
		public virtual IfcTimeMeasure? TimeStep { get; set; }
		public virtual List<IfcTimeSeriesValue>? Values { get; set; }
		public IfcRegularTimeSeries() : base()
		{
		}
		public IfcRegularTimeSeries(IfcLabel? Name, IfcText? Description, IfcDateTimeSelect? StartTime, IfcDateTimeSelect? EndTime, IfcTimeSeriesDataTypeEnum? TimeSeriesDataType, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcUnit? Unit, IfcTimeMeasure? TimeStep, List<IfcTimeSeriesValue>? Values) : base (Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit)
		{
			this.TimeStep = TimeStep;
			this.Values = Values;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				StartTime,
				EndTime,
				TimeSeriesDataType,
				DataOrigin,
				UserDefinedDataOrigin,
				Unit,
				TimeStep,
				Values
			};
		}
		public virtual Global.IfcTimeMeasure? _TimeStep { get { return TimeStep; } set { } }
		public virtual List<Global.IfcTimeSeriesValue>? _Values
		{
			get
			{
				if(Values != null)
				{
					List<Global.IfcTimeSeriesValue>? items = new List<Global.IfcTimeSeriesValue>();
					foreach (IfcTimeSeriesValue item in Values)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcementBarProperties;
	/// TotalCrossSectionArea : IfcAreaMeasure;
	/// SteelGrade : IfcLabel;
	/// BarSurface : OPTIONAL IfcReinforcingBarSurfaceEnum;
	/// EffectiveDepth : OPTIONAL IfcLengthMeasure;
	/// NominalBarDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// BarCount : OPTIONAL IfcCountMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcReinforcementBarProperties : Ifc_Entity, Global.IfcReinforcementBarProperties
	{
		public virtual IfcAreaMeasure? TotalCrossSectionArea { get; set; }
		public virtual IfcLabel? SteelGrade { get; set; }
		public virtual IfcReinforcingBarSurfaceEnum? BarSurface { get; set; }
		public virtual IfcLengthMeasure? EffectiveDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? NominalBarDiameter { get; set; }
		public virtual IfcCountMeasure? BarCount { get; set; }
		public IfcReinforcementBarProperties() : base()
		{
		}
		public IfcReinforcementBarProperties(IfcAreaMeasure? TotalCrossSectionArea, IfcLabel? SteelGrade, IfcReinforcingBarSurfaceEnum? BarSurface, IfcLengthMeasure? EffectiveDepth, IfcPositiveLengthMeasure? NominalBarDiameter, IfcCountMeasure? BarCount) : base ()
		{
			this.TotalCrossSectionArea = TotalCrossSectionArea;
			this.SteelGrade = SteelGrade;
			this.BarSurface = BarSurface;
			this.EffectiveDepth = EffectiveDepth;
			this.NominalBarDiameter = NominalBarDiameter;
			this.BarCount = BarCount;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TotalCrossSectionArea,
				SteelGrade,
				BarSurface,
				EffectiveDepth,
				NominalBarDiameter,
				BarCount
			};
		}
		public virtual Global.IfcAreaMeasure? _TotalCrossSectionArea { get { return TotalCrossSectionArea; } set { } }
		public virtual Global.IfcLabel? _SteelGrade { get { return SteelGrade; } set { } }
		public virtual Global.IfcReinforcingBarSurfaceEnum? _BarSurface { get { return BarSurface; } set { } }
		public virtual Global.IfcLengthMeasure? _EffectiveDepth { get { return EffectiveDepth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _NominalBarDiameter { get { return NominalBarDiameter; } set { } }
		public virtual Global.IfcCountMeasure? _BarCount { get { return BarCount; } set { } }
	}
	/// <summary>
	/// ENTITY IfcReinforcementDefinitionProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// DefinitionType : OPTIONAL IfcLabel;
	/// ReinforcementSectionDefinitions : LIST [1:?] OF IfcSectionReinforcementProperties;
	/// END_ENTITY;
	/// <summary>
	public class IfcReinforcementDefinitionProperties : IfcPropertySetDefinition, Global.IfcReinforcementDefinitionProperties
	{
		public virtual IfcLabel? DefinitionType { get; set; }
		public virtual List<IfcSectionReinforcementProperties>? ReinforcementSectionDefinitions { get; set; }
		public IfcReinforcementDefinitionProperties() : base()
		{
		}
		public IfcReinforcementDefinitionProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? DefinitionType, List<IfcSectionReinforcementProperties>? ReinforcementSectionDefinitions) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.DefinitionType = DefinitionType;
			this.ReinforcementSectionDefinitions = ReinforcementSectionDefinitions;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				DefinitionType,
				ReinforcementSectionDefinitions
			};
		}
		public virtual Global.IfcLabel? _DefinitionType { get { return DefinitionType; } set { } }
		public virtual List<Global.IfcSectionReinforcementProperties>? _ReinforcementSectionDefinitions
		{
			get
			{
				if(ReinforcementSectionDefinitions != null)
				{
					List<Global.IfcSectionReinforcementProperties>? items = new List<Global.IfcSectionReinforcementProperties>();
					foreach (IfcSectionReinforcementProperties item in ReinforcementSectionDefinitions)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcingBar
	/// SUBTYPE OF (IfcReinforcingElement);
	/// NominalDiameter : IfcPositiveLengthMeasure;
	/// CrossSectionArea : IfcAreaMeasure;
	/// BarLength : OPTIONAL IfcPositiveLengthMeasure;
	/// BarRole : IfcReinforcingBarRoleEnum;
	/// BarSurface : OPTIONAL IfcReinforcingBarSurfaceEnum;
	/// WHERE
	/// WR1 : (BarRole <> IfcReinforcingBarRoleEnum.USERDEFINED) OR ((BarRole = IfcReinforcingBarRoleEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcReinforcingBar : IfcReinforcingElement, Global.IfcReinforcingBar
	{
		public virtual IfcPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IfcAreaMeasure? CrossSectionArea { get; set; }
		public virtual IfcPositiveLengthMeasure? BarLength { get; set; }
		public virtual IfcReinforcingBarRoleEnum? BarRole { get; set; }
		public virtual IfcReinforcingBarSurfaceEnum? BarSurface { get; set; }
		public IfcReinforcingBar() : base()
		{
		}
		public IfcReinforcingBar(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLabel? SteelGrade, IfcPositiveLengthMeasure? NominalDiameter, IfcAreaMeasure? CrossSectionArea, IfcPositiveLengthMeasure? BarLength, IfcReinforcingBarRoleEnum? BarRole, IfcReinforcingBarSurfaceEnum? BarSurface) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.BarLength = BarLength;
			this.BarRole = BarRole;
			this.BarSurface = BarSurface;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				SteelGrade,
				NominalDiameter,
				CrossSectionArea,
				BarLength,
				BarRole,
				BarSurface
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _NominalDiameter { get { return NominalDiameter; } set { } }
		public virtual Global.IfcAreaMeasure? _CrossSectionArea { get { return CrossSectionArea; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _BarLength { get { return BarLength; } set { } }
		public virtual Global.IfcReinforcingBarRoleEnum? _BarRole { get { return BarRole; } set { } }
		public virtual Global.IfcReinforcingBarSurfaceEnum? _BarSurface { get { return BarSurface; } set { } }
	}
	/// <summary>
	/// ENTITY IfcReinforcingElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcReinforcingBar
	/// ,IfcReinforcingMesh
	/// ,IfcTendon
	/// ,IfcTendonAnchor))
	/// SUBTYPE OF (IfcBuildingElementComponent);
	/// SteelGrade : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcReinforcingElement : IfcBuildingElementComponent, Global.IfcReinforcingElement
	{
		public virtual IfcLabel? SteelGrade { get; set; }
		public IfcReinforcingElement() : base()
		{
		}
		public IfcReinforcingElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLabel? SteelGrade) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.SteelGrade = SteelGrade;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				SteelGrade
			};
		}
		public virtual Global.IfcLabel? _SteelGrade { get { return SteelGrade; } set { } }
	}
	/// <summary>
	/// ENTITY IfcReinforcingMesh
	/// SUBTYPE OF (IfcReinforcingElement);
	/// MeshLength : OPTIONAL IfcPositiveLengthMeasure;
	/// MeshWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// LongitudinalBarNominalDiameter : IfcPositiveLengthMeasure;
	/// TransverseBarNominalDiameter : IfcPositiveLengthMeasure;
	/// LongitudinalBarCrossSectionArea : IfcAreaMeasure;
	/// TransverseBarCrossSectionArea : IfcAreaMeasure;
	/// LongitudinalBarSpacing : IfcPositiveLengthMeasure;
	/// TransverseBarSpacing : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcReinforcingMesh : IfcReinforcingElement, Global.IfcReinforcingMesh
	{
		public virtual IfcPositiveLengthMeasure? MeshLength { get; set; }
		public virtual IfcPositiveLengthMeasure? MeshWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? LongitudinalBarNominalDiameter { get; set; }
		public virtual IfcPositiveLengthMeasure? TransverseBarNominalDiameter { get; set; }
		public virtual IfcAreaMeasure? LongitudinalBarCrossSectionArea { get; set; }
		public virtual IfcAreaMeasure? TransverseBarCrossSectionArea { get; set; }
		public virtual IfcPositiveLengthMeasure? LongitudinalBarSpacing { get; set; }
		public virtual IfcPositiveLengthMeasure? TransverseBarSpacing { get; set; }
		public IfcReinforcingMesh() : base()
		{
		}
		public IfcReinforcingMesh(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLabel? SteelGrade, IfcPositiveLengthMeasure? MeshLength, IfcPositiveLengthMeasure? MeshWidth, IfcPositiveLengthMeasure? LongitudinalBarNominalDiameter, IfcPositiveLengthMeasure? TransverseBarNominalDiameter, IfcAreaMeasure? LongitudinalBarCrossSectionArea, IfcAreaMeasure? TransverseBarCrossSectionArea, IfcPositiveLengthMeasure? LongitudinalBarSpacing, IfcPositiveLengthMeasure? TransverseBarSpacing) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
			this.MeshLength = MeshLength;
			this.MeshWidth = MeshWidth;
			this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
			this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
			this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
			this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
			this.LongitudinalBarSpacing = LongitudinalBarSpacing;
			this.TransverseBarSpacing = TransverseBarSpacing;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				SteelGrade,
				MeshLength,
				MeshWidth,
				LongitudinalBarNominalDiameter,
				TransverseBarNominalDiameter,
				LongitudinalBarCrossSectionArea,
				TransverseBarCrossSectionArea,
				LongitudinalBarSpacing,
				TransverseBarSpacing
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _MeshLength { get { return MeshLength; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _MeshWidth { get { return MeshWidth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _LongitudinalBarNominalDiameter { get { return LongitudinalBarNominalDiameter; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _TransverseBarNominalDiameter { get { return TransverseBarNominalDiameter; } set { } }
		public virtual Global.IfcAreaMeasure? _LongitudinalBarCrossSectionArea { get { return LongitudinalBarCrossSectionArea; } set { } }
		public virtual Global.IfcAreaMeasure? _TransverseBarCrossSectionArea { get { return TransverseBarCrossSectionArea; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _LongitudinalBarSpacing { get { return LongitudinalBarSpacing; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _TransverseBarSpacing { get { return TransverseBarSpacing; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAggregates
	/// SUBTYPE OF (IfcRelDecomposes);
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAggregates : IfcRelDecomposes, Global.IfcRelAggregates
	{
		public IfcRelAggregates() : base()
		{
		}
		public IfcRelAggregates(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcObjectDefinition? RelatingObject, List<IfcObjectDefinition>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description, RelatingObject, RelatedObjects)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingObject,
				RelatedObjects
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssigns
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelAssignsToActor
	/// ,IfcRelAssignsToControl
	/// ,IfcRelAssignsToGroup
	/// ,IfcRelAssignsToProcess
	/// ,IfcRelAssignsToProduct
	/// ,IfcRelAssignsToResource))
	/// SUBTYPE OF (IfcRelationship);
	/// RelatedObjects : SET [1:?] OF IfcObjectDefinition;
	/// RelatedObjectsType : OPTIONAL IfcObjectTypeEnum;
	/// WHERE
	/// WR1 : IfcCorrectObjectAssignment(RelatedObjectsType, RelatedObjects);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRelAssigns : IfcRelationship, Global.IfcRelAssigns
	{
		public virtual List<IfcObjectDefinition>? RelatedObjects { get; set; }
		public virtual IfcObjectTypeEnum? RelatedObjectsType { get; set; }
		public IfcRelAssigns() : base()
		{
		}
		public IfcRelAssigns(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType
			};
		}
		public virtual List<Global.IfcObjectDefinition>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					List<Global.IfcObjectDefinition>? items = new List<Global.IfcObjectDefinition>();
					foreach (IfcObjectDefinition item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcObjectTypeEnum? _RelatedObjectsType { get { return RelatedObjectsType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssignsTasks
	/// SUBTYPE OF (IfcRelAssignsToControl);
	/// TimeForTask : OPTIONAL IfcScheduleTimeControl;
	/// WHERE
	/// WR1 : HIINDEX(SELF\IfcRelAssigns.RelatedObjects) = 1;
	/// WR2 : 'IFC2X3.IFCTASK' IN TYPEOF(SELF\IfcRelAssigns.RelatedObjects[1]);
	/// WR3 : 'IFC2X3.IFCWORKCONTROL' IN TYPEOF(SELF\IfcRelAssignsToControl.RelatingControl);
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsTasks : IfcRelAssignsToControl, Global.IfcRelAssignsTasks
	{
		public virtual IfcScheduleTimeControl? TimeForTask { get; set; }
		public IfcRelAssignsTasks() : base()
		{
		}
		public IfcRelAssignsTasks(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcControl? RelatingControl, IfcScheduleTimeControl? TimeForTask) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingControl)
		{
			this.TimeForTask = TimeForTask;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingControl,
				TimeForTask
			};
		}
		public virtual Global.IfcScheduleTimeControl? _TimeForTask { get { return TimeForTask; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToActor
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelOccupiesSpaces))
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingActor : IfcActor;
	/// ActingRole : OPTIONAL IfcActorRole;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingActor :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToActor : IfcRelAssigns, Global.IfcRelAssignsToActor
	{
		public virtual IfcActor? RelatingActor { get; set; }
		public virtual IfcActorRole? ActingRole { get; set; }
		public IfcRelAssignsToActor() : base()
		{
		}
		public IfcRelAssignsToActor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcActor? RelatingActor, IfcActorRole? ActingRole) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingActor = RelatingActor;
			this.ActingRole = ActingRole;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingActor,
				ActingRole
			};
		}
		public virtual Global.IfcActor? _RelatingActor { get { return RelatingActor; } set { } }
		public virtual Global.IfcActorRole? _ActingRole { get { return ActingRole; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToControl
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelAssignsTasks
	/// ,IfcRelAssignsToProjectOrder
	/// ,IfcRelSchedulesCostItems))
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingControl : IfcControl;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingControl :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToControl : IfcRelAssigns, Global.IfcRelAssignsToControl
	{
		public virtual IfcControl? RelatingControl { get; set; }
		public IfcRelAssignsToControl() : base()
		{
		}
		public IfcRelAssignsToControl(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcControl? RelatingControl) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingControl = RelatingControl;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingControl
			};
		}
		public virtual Global.IfcControl? _RelatingControl { get { return RelatingControl; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToGroup
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingGroup : IfcGroup;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingGroup :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToGroup : IfcRelAssigns, Global.IfcRelAssignsToGroup
	{
		public virtual IfcGroup? RelatingGroup { get; set; }
		public IfcRelAssignsToGroup() : base()
		{
		}
		public IfcRelAssignsToGroup(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcGroup? RelatingGroup) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingGroup = RelatingGroup;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingGroup
			};
		}
		public virtual Global.IfcGroup? _RelatingGroup { get { return RelatingGroup; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToProcess
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingProcess : IfcProcess;
	/// QuantityInProcess : OPTIONAL IfcMeasureWithUnit;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingProcess :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToProcess : IfcRelAssigns, Global.IfcRelAssignsToProcess
	{
		public virtual IfcProcess? RelatingProcess { get; set; }
		public virtual IfcMeasureWithUnit? QuantityInProcess { get; set; }
		public IfcRelAssignsToProcess() : base()
		{
		}
		public IfcRelAssignsToProcess(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcProcess? RelatingProcess, IfcMeasureWithUnit? QuantityInProcess) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingProcess = RelatingProcess;
			this.QuantityInProcess = QuantityInProcess;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingProcess,
				QuantityInProcess
			};
		}
		public virtual Global.IfcProcess? _RelatingProcess { get { return RelatingProcess; } set { } }
		public virtual Global.IfcMeasureWithUnit? _QuantityInProcess { get { return QuantityInProcess; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToProduct
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingProduct : IfcProduct;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingProduct :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToProduct : IfcRelAssigns, Global.IfcRelAssignsToProduct
	{
		public virtual IfcProduct? RelatingProduct { get; set; }
		public IfcRelAssignsToProduct() : base()
		{
		}
		public IfcRelAssignsToProduct(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcProduct? RelatingProduct) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingProduct = RelatingProduct;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingProduct
			};
		}
		public virtual Global.IfcProduct? _RelatingProduct { get { return RelatingProduct; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToProjectOrder
	/// SUBTYPE OF (IfcRelAssignsToControl);
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToProjectOrder : IfcRelAssignsToControl, Global.IfcRelAssignsToProjectOrder
	{
		public IfcRelAssignsToProjectOrder() : base()
		{
		}
		public IfcRelAssignsToProjectOrder(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcControl? RelatingControl) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingControl)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingControl
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToResource
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingResource : IfcResource;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingResource :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssignsToResource : IfcRelAssigns, Global.IfcRelAssignsToResource
	{
		public virtual IfcResource? RelatingResource { get; set; }
		public IfcRelAssignsToResource() : base()
		{
		}
		public IfcRelAssignsToResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcResource? RelatingResource) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingResource = RelatingResource;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingResource
			};
		}
		public virtual Global.IfcResource? _RelatingResource { get { return RelatingResource; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssociates
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelAssociatesAppliedValue
	/// ,IfcRelAssociatesApproval
	/// ,IfcRelAssociatesClassification
	/// ,IfcRelAssociatesConstraint
	/// ,IfcRelAssociatesDocument
	/// ,IfcRelAssociatesLibrary
	/// ,IfcRelAssociatesMaterial
	/// ,IfcRelAssociatesProfileProperties))
	/// SUBTYPE OF (IfcRelationship);
	/// RelatedObjects : SET [1:?] OF IfcRoot;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* RelatedObjects |
	/// NOT(('IFC2X3.IFCOBJECTDEFINITION' IN TYPEOF(temp))
	/// OR ('IFC2X3.IFCPROPERTYDEFINITION' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociates : IfcRelationship, Global.IfcRelAssociates
	{
		public virtual List<IfcRoot>? RelatedObjects { get; set; }
		public IfcRelAssociates() : base()
		{
		}
		public IfcRelAssociates(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcRoot>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedObjects = RelatedObjects;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects
			};
		}
		public virtual List<Global.IfcRoot>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					List<Global.IfcRoot>? items = new List<Global.IfcRoot>();
					foreach (IfcRoot item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesAppliedValue
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingAppliedValue : IfcAppliedValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesAppliedValue : IfcRelAssociates, Global.IfcRelAssociatesAppliedValue
	{
		public virtual IfcAppliedValue? RelatingAppliedValue { get; set; }
		public IfcRelAssociatesAppliedValue() : base()
		{
		}
		public IfcRelAssociatesAppliedValue(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcRoot>? RelatedObjects, IfcAppliedValue? RelatingAppliedValue) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingAppliedValue = RelatingAppliedValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingAppliedValue
			};
		}
		public virtual Global.IfcAppliedValue? _RelatingAppliedValue { get { return RelatingAppliedValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesApproval
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingApproval : IfcApproval;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesApproval : IfcRelAssociates, Global.IfcRelAssociatesApproval
	{
		public virtual IfcApproval? RelatingApproval { get; set; }
		public IfcRelAssociatesApproval() : base()
		{
		}
		public IfcRelAssociatesApproval(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcRoot>? RelatedObjects, IfcApproval? RelatingApproval) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingApproval = RelatingApproval;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingApproval
			};
		}
		public virtual Global.IfcApproval? _RelatingApproval { get { return RelatingApproval; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesClassification
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingClassification : IfcClassificationNotationSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesClassification : IfcRelAssociates, Global.IfcRelAssociatesClassification
	{
		public virtual IfcClassificationNotationSelect? RelatingClassification { get; set; }
		public IfcRelAssociatesClassification() : base()
		{
		}
		public IfcRelAssociatesClassification(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcRoot>? RelatedObjects, IfcClassificationNotationSelect? RelatingClassification) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingClassification = RelatingClassification;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingClassification
			};
		}
		public virtual Global.IfcClassificationNotationSelect? _RelatingClassification { get { return RelatingClassification; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesConstraint
	/// SUBTYPE OF (IfcRelAssociates);
	/// Intent : IfcLabel;
	/// RelatingConstraint : IfcConstraint;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesConstraint : IfcRelAssociates, Global.IfcRelAssociatesConstraint
	{
		public virtual IfcLabel? Intent { get; set; }
		public virtual IfcConstraint? RelatingConstraint { get; set; }
		public IfcRelAssociatesConstraint() : base()
		{
		}
		public IfcRelAssociatesConstraint(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcRoot>? RelatedObjects, IfcLabel? Intent, IfcConstraint? RelatingConstraint) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.Intent = Intent;
			this.RelatingConstraint = RelatingConstraint;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				Intent,
				RelatingConstraint
			};
		}
		public virtual Global.IfcLabel? _Intent { get { return Intent; } set { } }
		public virtual Global.IfcConstraint? _RelatingConstraint { get { return RelatingConstraint; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesDocument
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingDocument : IfcDocumentSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesDocument : IfcRelAssociates, Global.IfcRelAssociatesDocument
	{
		public virtual IfcDocumentSelect? RelatingDocument { get; set; }
		public IfcRelAssociatesDocument() : base()
		{
		}
		public IfcRelAssociatesDocument(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcRoot>? RelatedObjects, IfcDocumentSelect? RelatingDocument) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingDocument = RelatingDocument;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingDocument
			};
		}
		public virtual Global.IfcDocumentSelect? _RelatingDocument { get { return RelatingDocument; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesLibrary
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingLibrary : IfcLibrarySelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesLibrary : IfcRelAssociates, Global.IfcRelAssociatesLibrary
	{
		public virtual IfcLibrarySelect? RelatingLibrary { get; set; }
		public IfcRelAssociatesLibrary() : base()
		{
		}
		public IfcRelAssociatesLibrary(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcRoot>? RelatedObjects, IfcLibrarySelect? RelatingLibrary) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingLibrary = RelatingLibrary;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingLibrary
			};
		}
		public virtual Global.IfcLibrarySelect? _RelatingLibrary { get { return RelatingLibrary; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesMaterial
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingMaterial : IfcMaterialSelect;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* SELF\IfcRelAssociates.RelatedObjects |
	/// ('IFC2X3.IFCFEATUREELEMENTSUBTRACTION' IN TYPEOF(temp))
	/// OR ('IFC2X3.IFCVIRTUALELEMENT' IN TYPEOF(temp))
	/// )) = 0;
	/// WR22 : SIZEOF(QUERY(temp <* SELF\IfcRelAssociates.RelatedObjects |
	/// (NOT('IFC2X3.IFCPRODUCT' IN TYPEOF(temp))
	/// AND NOT('IFC2X3.IFCTYPEPRODUCT' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesMaterial : IfcRelAssociates, Global.IfcRelAssociatesMaterial
	{
		public virtual IfcMaterialSelect? RelatingMaterial { get; set; }
		public IfcRelAssociatesMaterial() : base()
		{
		}
		public IfcRelAssociatesMaterial(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcRoot>? RelatedObjects, IfcMaterialSelect? RelatingMaterial) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingMaterial = RelatingMaterial;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingMaterial
			};
		}
		public virtual Global.IfcMaterialSelect? _RelatingMaterial { get { return RelatingMaterial; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesProfileProperties
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingProfileProperties : IfcProfileProperties;
	/// ProfileSectionLocation : OPTIONAL IfcShapeAspect;
	/// ProfileOrientation : OPTIONAL IfcOrientationSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelAssociatesProfileProperties : IfcRelAssociates, Global.IfcRelAssociatesProfileProperties
	{
		public virtual IfcProfileProperties? RelatingProfileProperties { get; set; }
		public virtual IfcShapeAspect? ProfileSectionLocation { get; set; }
		public virtual IfcOrientationSelect? ProfileOrientation { get; set; }
		public IfcRelAssociatesProfileProperties() : base()
		{
		}
		public IfcRelAssociatesProfileProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcRoot>? RelatedObjects, IfcProfileProperties? RelatingProfileProperties, IfcShapeAspect? ProfileSectionLocation, IfcOrientationSelect? ProfileOrientation) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingProfileProperties = RelatingProfileProperties;
			this.ProfileSectionLocation = ProfileSectionLocation;
			this.ProfileOrientation = ProfileOrientation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingProfileProperties,
				ProfileSectionLocation,
				ProfileOrientation
			};
		}
		public virtual Global.IfcProfileProperties? _RelatingProfileProperties { get { return RelatingProfileProperties; } set { } }
		public virtual Global.IfcShapeAspect? _ProfileSectionLocation { get { return ProfileSectionLocation; } set { } }
		public virtual Global.IfcOrientationSelect? _ProfileOrientation { get { return ProfileOrientation; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelConnects
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelConnectsElements
	/// ,IfcRelConnectsPortToElement
	/// ,IfcRelConnectsPorts
	/// ,IfcRelConnectsStructuralActivity
	/// ,IfcRelConnectsStructuralElement
	/// ,IfcRelConnectsStructuralMember
	/// ,IfcRelContainedInSpatialStructure
	/// ,IfcRelCoversBldgElements
	/// ,IfcRelCoversSpaces
	/// ,IfcRelFillsElement
	/// ,IfcRelFlowControlElements
	/// ,IfcRelInteractionRequirements
	/// ,IfcRelProjectsElement
	/// ,IfcRelReferencedInSpatialStructure
	/// ,IfcRelSequence
	/// ,IfcRelServicesBuildings
	/// ,IfcRelSpaceBoundary
	/// ,IfcRelVoidsElement))
	/// SUBTYPE OF (IfcRelationship);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRelConnects : IfcRelationship, Global.IfcRelConnects
	{
		public IfcRelConnects() : base()
		{
		}
		public IfcRelConnects(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsElements
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelConnectsPathElements
	/// ,IfcRelConnectsWithRealizingElements))
	/// SUBTYPE OF (IfcRelConnects);
	/// ConnectionGeometry : OPTIONAL IfcConnectionGeometry;
	/// RelatingElement : IfcElement;
	/// RelatedElement : IfcElement;
	/// WHERE
	/// WR31 : RelatingElement :<>: RelatedElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsElements : IfcRelConnects, Global.IfcRelConnectsElements
	{
		public virtual IfcConnectionGeometry? ConnectionGeometry { get; set; }
		public virtual IfcElement? RelatingElement { get; set; }
		public virtual IfcElement? RelatedElement { get; set; }
		public IfcRelConnectsElements() : base()
		{
		}
		public IfcRelConnectsElements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcConnectionGeometry? ConnectionGeometry, IfcElement? RelatingElement, IfcElement? RelatedElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ConnectionGeometry = ConnectionGeometry;
			this.RelatingElement = RelatingElement;
			this.RelatedElement = RelatedElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ConnectionGeometry,
				RelatingElement,
				RelatedElement
			};
		}
		public virtual Global.IfcConnectionGeometry? _ConnectionGeometry { get { return ConnectionGeometry; } set { } }
		public virtual Global.IfcElement? _RelatingElement { get { return RelatingElement; } set { } }
		public virtual Global.IfcElement? _RelatedElement { get { return RelatedElement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelConnectsPathElements
	/// SUBTYPE OF (IfcRelConnectsElements);
	/// RelatingPriorities : LIST [0:?] OF INTEGER;
	/// RelatedPriorities : LIST [0:?] OF INTEGER;
	/// RelatedConnectionType : IfcConnectionTypeEnum;
	/// RelatingConnectionType : IfcConnectionTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsPathElements : IfcRelConnectsElements, Global.IfcRelConnectsPathElements
	{
		public virtual List<INTEGER>? RelatingPriorities { get; set; }
		public virtual List<INTEGER>? RelatedPriorities { get; set; }
		public virtual IfcConnectionTypeEnum? RelatedConnectionType { get; set; }
		public virtual IfcConnectionTypeEnum? RelatingConnectionType { get; set; }
		public IfcRelConnectsPathElements() : base()
		{
		}
		public IfcRelConnectsPathElements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcConnectionGeometry? ConnectionGeometry, IfcElement? RelatingElement, IfcElement? RelatedElement, List<INTEGER>? RelatingPriorities, List<INTEGER>? RelatedPriorities, IfcConnectionTypeEnum? RelatedConnectionType, IfcConnectionTypeEnum? RelatingConnectionType) : base (GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement)
		{
			this.RelatingPriorities = RelatingPriorities;
			this.RelatedPriorities = RelatedPriorities;
			this.RelatedConnectionType = RelatedConnectionType;
			this.RelatingConnectionType = RelatingConnectionType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ConnectionGeometry,
				RelatingElement,
				RelatedElement,
				RelatingPriorities,
				RelatedPriorities,
				RelatedConnectionType,
				RelatingConnectionType
			};
		}
		public virtual List<INTEGER>? _RelatingPriorities
		{
			get
			{
				if(RelatingPriorities != null)
				{
					List<INTEGER>? items = new List<INTEGER>();
					foreach (INTEGER item in RelatingPriorities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<INTEGER>? _RelatedPriorities
		{
			get
			{
				if(RelatedPriorities != null)
				{
					List<INTEGER>? items = new List<INTEGER>();
					foreach (INTEGER item in RelatedPriorities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcConnectionTypeEnum? _RelatedConnectionType { get { return RelatedConnectionType; } set { } }
		public virtual Global.IfcConnectionTypeEnum? _RelatingConnectionType { get { return RelatingConnectionType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelConnectsPortToElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingPort : IfcPort;
	/// RelatedElement : IfcElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsPortToElement : IfcRelConnects, Global.IfcRelConnectsPortToElement
	{
		public virtual IfcPort? RelatingPort { get; set; }
		public virtual IfcElement? RelatedElement { get; set; }
		public IfcRelConnectsPortToElement() : base()
		{
		}
		public IfcRelConnectsPortToElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPort? RelatingPort, IfcElement? RelatedElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingPort = RelatingPort;
			this.RelatedElement = RelatedElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingPort,
				RelatedElement
			};
		}
		public virtual Global.IfcPort? _RelatingPort { get { return RelatingPort; } set { } }
		public virtual Global.IfcElement? _RelatedElement { get { return RelatedElement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelConnectsPorts
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingPort : IfcPort;
	/// RelatedPort : IfcPort;
	/// RealizingElement : OPTIONAL IfcElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsPorts : IfcRelConnects, Global.IfcRelConnectsPorts
	{
		public virtual IfcPort? RelatingPort { get; set; }
		public virtual IfcPort? RelatedPort { get; set; }
		public virtual IfcElement? RealizingElement { get; set; }
		public IfcRelConnectsPorts() : base()
		{
		}
		public IfcRelConnectsPorts(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPort? RelatingPort, IfcPort? RelatedPort, IfcElement? RealizingElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingPort = RelatingPort;
			this.RelatedPort = RelatedPort;
			this.RealizingElement = RealizingElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingPort,
				RelatedPort,
				RealizingElement
			};
		}
		public virtual Global.IfcPort? _RelatingPort { get { return RelatingPort; } set { } }
		public virtual Global.IfcPort? _RelatedPort { get { return RelatedPort; } set { } }
		public virtual Global.IfcElement? _RealizingElement { get { return RealizingElement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelConnectsStructuralActivity
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingElement : IfcStructuralActivityAssignmentSelect;
	/// RelatedStructuralActivity : IfcStructuralActivity;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsStructuralActivity : IfcRelConnects, Global.IfcRelConnectsStructuralActivity
	{
		public virtual IfcStructuralActivityAssignmentSelect? RelatingElement { get; set; }
		public virtual IfcStructuralActivity? RelatedStructuralActivity { get; set; }
		public IfcRelConnectsStructuralActivity() : base()
		{
		}
		public IfcRelConnectsStructuralActivity(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcStructuralActivityAssignmentSelect? RelatingElement, IfcStructuralActivity? RelatedStructuralActivity) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingElement = RelatingElement;
			this.RelatedStructuralActivity = RelatedStructuralActivity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingElement,
				RelatedStructuralActivity
			};
		}
		public virtual Global.IfcStructuralActivityAssignmentSelect? _RelatingElement { get { return RelatingElement; } set { } }
		public virtual Global.IfcStructuralActivity? _RelatedStructuralActivity { get { return RelatedStructuralActivity; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelConnectsStructuralElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingElement : IfcElement;
	/// RelatedStructuralMember : IfcStructuralMember;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsStructuralElement : IfcRelConnects, Global.IfcRelConnectsStructuralElement
	{
		public virtual IfcElement? RelatingElement { get; set; }
		public virtual IfcStructuralMember? RelatedStructuralMember { get; set; }
		public IfcRelConnectsStructuralElement() : base()
		{
		}
		public IfcRelConnectsStructuralElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcElement? RelatingElement, IfcStructuralMember? RelatedStructuralMember) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingElement = RelatingElement;
			this.RelatedStructuralMember = RelatedStructuralMember;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingElement,
				RelatedStructuralMember
			};
		}
		public virtual Global.IfcElement? _RelatingElement { get { return RelatingElement; } set { } }
		public virtual Global.IfcStructuralMember? _RelatedStructuralMember { get { return RelatedStructuralMember; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelConnectsStructuralMember
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelConnectsWithEccentricity))
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingStructuralMember : IfcStructuralMember;
	/// RelatedStructuralConnection : IfcStructuralConnection;
	/// AppliedCondition : OPTIONAL IfcBoundaryCondition;
	/// AdditionalConditions : OPTIONAL IfcStructuralConnectionCondition;
	/// SupportedLength : OPTIONAL IfcLengthMeasure;
	/// ConditionCoordinateSystem : OPTIONAL IfcAxis2Placement3D;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsStructuralMember : IfcRelConnects, Global.IfcRelConnectsStructuralMember
	{
		public virtual IfcStructuralMember? RelatingStructuralMember { get; set; }
		public virtual IfcStructuralConnection? RelatedStructuralConnection { get; set; }
		public virtual IfcBoundaryCondition? AppliedCondition { get; set; }
		public virtual IfcStructuralConnectionCondition? AdditionalConditions { get; set; }
		public virtual IfcLengthMeasure? SupportedLength { get; set; }
		public virtual IfcAxis2Placement3D? ConditionCoordinateSystem { get; set; }
		public IfcRelConnectsStructuralMember() : base()
		{
		}
		public IfcRelConnectsStructuralMember(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcStructuralMember? RelatingStructuralMember, IfcStructuralConnection? RelatedStructuralConnection, IfcBoundaryCondition? AppliedCondition, IfcStructuralConnectionCondition? AdditionalConditions, IfcLengthMeasure? SupportedLength, IfcAxis2Placement3D? ConditionCoordinateSystem) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingStructuralMember = RelatingStructuralMember;
			this.RelatedStructuralConnection = RelatedStructuralConnection;
			this.AppliedCondition = AppliedCondition;
			this.AdditionalConditions = AdditionalConditions;
			this.SupportedLength = SupportedLength;
			this.ConditionCoordinateSystem = ConditionCoordinateSystem;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingStructuralMember,
				RelatedStructuralConnection,
				AppliedCondition,
				AdditionalConditions,
				SupportedLength,
				ConditionCoordinateSystem
			};
		}
		public virtual Global.IfcStructuralMember? _RelatingStructuralMember { get { return RelatingStructuralMember; } set { } }
		public virtual Global.IfcStructuralConnection? _RelatedStructuralConnection { get { return RelatedStructuralConnection; } set { } }
		public virtual Global.IfcBoundaryCondition? _AppliedCondition { get { return AppliedCondition; } set { } }
		public virtual Global.IfcStructuralConnectionCondition? _AdditionalConditions { get { return AdditionalConditions; } set { } }
		public virtual Global.IfcLengthMeasure? _SupportedLength { get { return SupportedLength; } set { } }
		public virtual Global.IfcAxis2Placement3D? _ConditionCoordinateSystem { get { return ConditionCoordinateSystem; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelConnectsWithEccentricity
	/// SUBTYPE OF (IfcRelConnectsStructuralMember);
	/// ConnectionConstraint : IfcConnectionGeometry;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsWithEccentricity : IfcRelConnectsStructuralMember, Global.IfcRelConnectsWithEccentricity
	{
		public virtual IfcConnectionGeometry? ConnectionConstraint { get; set; }
		public IfcRelConnectsWithEccentricity() : base()
		{
		}
		public IfcRelConnectsWithEccentricity(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcStructuralMember? RelatingStructuralMember, IfcStructuralConnection? RelatedStructuralConnection, IfcBoundaryCondition? AppliedCondition, IfcStructuralConnectionCondition? AdditionalConditions, IfcLengthMeasure? SupportedLength, IfcAxis2Placement3D? ConditionCoordinateSystem, IfcConnectionGeometry? ConnectionConstraint) : base (GlobalId, OwnerHistory, Name, Description, RelatingStructuralMember, RelatedStructuralConnection, AppliedCondition, AdditionalConditions, SupportedLength, ConditionCoordinateSystem)
		{
			this.ConnectionConstraint = ConnectionConstraint;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingStructuralMember,
				RelatedStructuralConnection,
				AppliedCondition,
				AdditionalConditions,
				SupportedLength,
				ConditionCoordinateSystem,
				ConnectionConstraint
			};
		}
		public virtual Global.IfcConnectionGeometry? _ConnectionConstraint { get { return ConnectionConstraint; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelConnectsWithRealizingElements
	/// SUBTYPE OF (IfcRelConnectsElements);
	/// RealizingElements : SET [1:?] OF IfcElement;
	/// ConnectionType : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelConnectsWithRealizingElements : IfcRelConnectsElements, Global.IfcRelConnectsWithRealizingElements
	{
		public virtual List<IfcElement>? RealizingElements { get; set; }
		public virtual IfcLabel? ConnectionType { get; set; }
		public IfcRelConnectsWithRealizingElements() : base()
		{
		}
		public IfcRelConnectsWithRealizingElements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcConnectionGeometry? ConnectionGeometry, IfcElement? RelatingElement, IfcElement? RelatedElement, List<IfcElement>? RealizingElements, IfcLabel? ConnectionType) : base (GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement)
		{
			this.RealizingElements = RealizingElements;
			this.ConnectionType = ConnectionType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ConnectionGeometry,
				RelatingElement,
				RelatedElement,
				RealizingElements,
				ConnectionType
			};
		}
		public virtual List<Global.IfcElement>? _RealizingElements
		{
			get
			{
				if(RealizingElements != null)
				{
					List<Global.IfcElement>? items = new List<Global.IfcElement>();
					foreach (IfcElement item in RealizingElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _ConnectionType { get { return ConnectionType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelContainedInSpatialStructure
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatedElements : SET [1:?] OF IfcProduct;
	/// RelatingStructure : IfcSpatialStructureElement;
	/// WHERE
	/// WR31 : SIZEOF(QUERY(temp <* RelatedElements | 'IFC2X3.IFCSPATIALSTRUCTUREELEMENT' IN TYPEOF(temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelContainedInSpatialStructure : IfcRelConnects, Global.IfcRelContainedInSpatialStructure
	{
		public virtual List<IfcProduct>? RelatedElements { get; set; }
		public virtual IfcSpatialStructureElement? RelatingStructure { get; set; }
		public IfcRelContainedInSpatialStructure() : base()
		{
		}
		public IfcRelContainedInSpatialStructure(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcProduct>? RelatedElements, IfcSpatialStructureElement? RelatingStructure) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedElements,
				RelatingStructure
			};
		}
		public virtual List<Global.IfcProduct>? _RelatedElements
		{
			get
			{
				if(RelatedElements != null)
				{
					List<Global.IfcProduct>? items = new List<Global.IfcProduct>();
					foreach (IfcProduct item in RelatedElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcSpatialStructureElement? _RelatingStructure { get { return RelatingStructure; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelCoversBldgElements
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingBuildingElement : IfcElement;
	/// RelatedCoverings : SET [1:?] OF IfcCovering;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelCoversBldgElements : IfcRelConnects, Global.IfcRelCoversBldgElements
	{
		public virtual IfcElement? RelatingBuildingElement { get; set; }
		public virtual List<IfcCovering>? RelatedCoverings { get; set; }
		public IfcRelCoversBldgElements() : base()
		{
		}
		public IfcRelCoversBldgElements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcElement? RelatingBuildingElement, List<IfcCovering>? RelatedCoverings) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedCoverings = RelatedCoverings;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingBuildingElement,
				RelatedCoverings
			};
		}
		public virtual Global.IfcElement? _RelatingBuildingElement { get { return RelatingBuildingElement; } set { } }
		public virtual List<Global.IfcCovering>? _RelatedCoverings
		{
			get
			{
				if(RelatedCoverings != null)
				{
					List<Global.IfcCovering>? items = new List<Global.IfcCovering>();
					foreach (IfcCovering item in RelatedCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelCoversSpaces
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatedSpace : IfcSpace;
	/// RelatedCoverings : SET [1:?] OF IfcCovering;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelCoversSpaces : IfcRelConnects, Global.IfcRelCoversSpaces
	{
		public virtual IfcSpace? RelatedSpace { get; set; }
		public virtual List<IfcCovering>? RelatedCoverings { get; set; }
		public IfcRelCoversSpaces() : base()
		{
		}
		public IfcRelCoversSpaces(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcSpace? RelatedSpace, List<IfcCovering>? RelatedCoverings) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedSpace = RelatedSpace;
			this.RelatedCoverings = RelatedCoverings;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedSpace,
				RelatedCoverings
			};
		}
		public virtual Global.IfcSpace? _RelatedSpace { get { return RelatedSpace; } set { } }
		public virtual List<Global.IfcCovering>? _RelatedCoverings
		{
			get
			{
				if(RelatedCoverings != null)
				{
					List<Global.IfcCovering>? items = new List<Global.IfcCovering>();
					foreach (IfcCovering item in RelatedCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDecomposes
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelAggregates
	/// ,IfcRelNests))
	/// SUBTYPE OF (IfcRelationship);
	/// RelatingObject : IfcObjectDefinition;
	/// RelatedObjects : SET [1:?] OF IfcObjectDefinition;
	/// WHERE
	/// WR31 : SIZEOF(QUERY(Temp <* RelatedObjects | RelatingObject :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRelDecomposes : IfcRelationship, Global.IfcRelDecomposes
	{
		public virtual IfcObjectDefinition? RelatingObject { get; set; }
		public virtual List<IfcObjectDefinition>? RelatedObjects { get; set; }
		public IfcRelDecomposes() : base()
		{
		}
		public IfcRelDecomposes(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcObjectDefinition? RelatingObject, List<IfcObjectDefinition>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingObject = RelatingObject;
			this.RelatedObjects = RelatedObjects;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingObject,
				RelatedObjects
			};
		}
		public virtual Global.IfcObjectDefinition? _RelatingObject { get { return RelatingObject; } set { } }
		public virtual List<Global.IfcObjectDefinition>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					List<Global.IfcObjectDefinition>? items = new List<Global.IfcObjectDefinition>();
					foreach (IfcObjectDefinition item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDefines
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelDefinesByProperties
	/// ,IfcRelDefinesByType))
	/// SUBTYPE OF (IfcRelationship);
	/// RelatedObjects : SET [1:?] OF IfcObject;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRelDefines : IfcRelationship, Global.IfcRelDefines
	{
		public virtual List<IfcObject>? RelatedObjects { get; set; }
		public IfcRelDefines() : base()
		{
		}
		public IfcRelDefines(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObject>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedObjects = RelatedObjects;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects
			};
		}
		public virtual List<Global.IfcObject>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					List<Global.IfcObject>? items = new List<Global.IfcObject>();
					foreach (IfcObject item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDefinesByProperties
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelOverridesProperties))
	/// SUBTYPE OF (IfcRelDefines);
	/// RelatingPropertyDefinition : IfcPropertySetDefinition;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelDefinesByProperties : IfcRelDefines, Global.IfcRelDefinesByProperties
	{
		public virtual IfcPropertySetDefinition? RelatingPropertyDefinition { get; set; }
		public IfcRelDefinesByProperties() : base()
		{
		}
		public IfcRelDefinesByProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObject>? RelatedObjects, IfcPropertySetDefinition? RelatingPropertyDefinition) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingPropertyDefinition = RelatingPropertyDefinition;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingPropertyDefinition
			};
		}
		public virtual Global.IfcPropertySetDefinition? _RelatingPropertyDefinition { get { return RelatingPropertyDefinition; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelDefinesByType
	/// SUBTYPE OF (IfcRelDefines);
	/// RelatingType : IfcTypeObject;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelDefinesByType : IfcRelDefines, Global.IfcRelDefinesByType
	{
		public virtual IfcTypeObject? RelatingType { get; set; }
		public IfcRelDefinesByType() : base()
		{
		}
		public IfcRelDefinesByType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObject>? RelatedObjects, IfcTypeObject? RelatingType) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingType = RelatingType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingType
			};
		}
		public virtual Global.IfcTypeObject? _RelatingType { get { return RelatingType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelFillsElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingOpeningElement : IfcOpeningElement;
	/// RelatedBuildingElement : IfcElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelFillsElement : IfcRelConnects, Global.IfcRelFillsElement
	{
		public virtual IfcOpeningElement? RelatingOpeningElement { get; set; }
		public virtual IfcElement? RelatedBuildingElement { get; set; }
		public IfcRelFillsElement() : base()
		{
		}
		public IfcRelFillsElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcOpeningElement? RelatingOpeningElement, IfcElement? RelatedBuildingElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingOpeningElement = RelatingOpeningElement;
			this.RelatedBuildingElement = RelatedBuildingElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingOpeningElement,
				RelatedBuildingElement
			};
		}
		public virtual Global.IfcOpeningElement? _RelatingOpeningElement { get { return RelatingOpeningElement; } set { } }
		public virtual Global.IfcElement? _RelatedBuildingElement { get { return RelatedBuildingElement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelFlowControlElements
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatedControlElements : SET [1:?] OF IfcDistributionControlElement;
	/// RelatingFlowElement : IfcDistributionFlowElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelFlowControlElements : IfcRelConnects, Global.IfcRelFlowControlElements
	{
		public virtual List<IfcDistributionControlElement>? RelatedControlElements { get; set; }
		public virtual IfcDistributionFlowElement? RelatingFlowElement { get; set; }
		public IfcRelFlowControlElements() : base()
		{
		}
		public IfcRelFlowControlElements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcDistributionControlElement>? RelatedControlElements, IfcDistributionFlowElement? RelatingFlowElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedControlElements = RelatedControlElements;
			this.RelatingFlowElement = RelatingFlowElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedControlElements,
				RelatingFlowElement
			};
		}
		public virtual List<Global.IfcDistributionControlElement>? _RelatedControlElements
		{
			get
			{
				if(RelatedControlElements != null)
				{
					List<Global.IfcDistributionControlElement>? items = new List<Global.IfcDistributionControlElement>();
					foreach (IfcDistributionControlElement item in RelatedControlElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcDistributionFlowElement? _RelatingFlowElement { get { return RelatingFlowElement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelInteractionRequirements
	/// SUBTYPE OF (IfcRelConnects);
	/// DailyInteraction : OPTIONAL IfcCountMeasure;
	/// ImportanceRating : OPTIONAL IfcNormalisedRatioMeasure;
	/// LocationOfInteraction : OPTIONAL IfcSpatialStructureElement;
	/// RelatedSpaceProgram : IfcSpaceProgram;
	/// RelatingSpaceProgram : IfcSpaceProgram;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelInteractionRequirements : IfcRelConnects, Global.IfcRelInteractionRequirements
	{
		public virtual IfcCountMeasure? DailyInteraction { get; set; }
		public virtual IfcNormalisedRatioMeasure? ImportanceRating { get; set; }
		public virtual IfcSpatialStructureElement? LocationOfInteraction { get; set; }
		public virtual IfcSpaceProgram? RelatedSpaceProgram { get; set; }
		public virtual IfcSpaceProgram? RelatingSpaceProgram { get; set; }
		public IfcRelInteractionRequirements() : base()
		{
		}
		public IfcRelInteractionRequirements(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcCountMeasure? DailyInteraction, IfcNormalisedRatioMeasure? ImportanceRating, IfcSpatialStructureElement? LocationOfInteraction, IfcSpaceProgram? RelatedSpaceProgram, IfcSpaceProgram? RelatingSpaceProgram) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.DailyInteraction = DailyInteraction;
			this.ImportanceRating = ImportanceRating;
			this.LocationOfInteraction = LocationOfInteraction;
			this.RelatedSpaceProgram = RelatedSpaceProgram;
			this.RelatingSpaceProgram = RelatingSpaceProgram;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				DailyInteraction,
				ImportanceRating,
				LocationOfInteraction,
				RelatedSpaceProgram,
				RelatingSpaceProgram
			};
		}
		public virtual Global.IfcCountMeasure? _DailyInteraction { get { return DailyInteraction; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _ImportanceRating { get { return ImportanceRating; } set { } }
		public virtual Global.IfcSpatialStructureElement? _LocationOfInteraction { get { return LocationOfInteraction; } set { } }
		public virtual Global.IfcSpaceProgram? _RelatedSpaceProgram { get { return RelatedSpaceProgram; } set { } }
		public virtual Global.IfcSpaceProgram? _RelatingSpaceProgram { get { return RelatingSpaceProgram; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelNests
	/// SUBTYPE OF (IfcRelDecomposes);
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelDecomposes.RelatedObjects |
	/// NOT(TYPEOF(SELF\IfcRelDecomposes.RelatingObject) = TYPEOF(Temp)))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelNests : IfcRelDecomposes, Global.IfcRelNests
	{
		public IfcRelNests() : base()
		{
		}
		public IfcRelNests(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcObjectDefinition? RelatingObject, List<IfcObjectDefinition>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description, RelatingObject, RelatedObjects)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingObject,
				RelatedObjects
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelOccupiesSpaces
	/// SUBTYPE OF (IfcRelAssignsToActor);
	/// END_ENTITY;
	/// <summary>
	public class IfcRelOccupiesSpaces : IfcRelAssignsToActor, Global.IfcRelOccupiesSpaces
	{
		public IfcRelOccupiesSpaces() : base()
		{
		}
		public IfcRelOccupiesSpaces(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcActor? RelatingActor, IfcActorRole? ActingRole) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingActor, ActingRole)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingActor,
				ActingRole
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelOverridesProperties
	/// SUBTYPE OF (IfcRelDefinesByProperties);
	/// OverridingProperties : SET [1:?] OF IfcProperty;
	/// WHERE
	/// WR1 : SIZEOF(SELF\IfcRelDefines.RelatedObjects) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelOverridesProperties : IfcRelDefinesByProperties, Global.IfcRelOverridesProperties
	{
		public virtual List<IfcProperty>? OverridingProperties { get; set; }
		public IfcRelOverridesProperties() : base()
		{
		}
		public IfcRelOverridesProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObject>? RelatedObjects, IfcPropertySetDefinition? RelatingPropertyDefinition, List<IfcProperty>? OverridingProperties) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatingPropertyDefinition)
		{
			this.OverridingProperties = OverridingProperties;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatingPropertyDefinition,
				OverridingProperties
			};
		}
		public virtual List<Global.IfcProperty>? _OverridingProperties
		{
			get
			{
				if(OverridingProperties != null)
				{
					List<Global.IfcProperty>? items = new List<Global.IfcProperty>();
					foreach (IfcProperty item in OverridingProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelProjectsElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingElement : IfcElement;
	/// RelatedFeatureElement : IfcFeatureElementAddition;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelProjectsElement : IfcRelConnects, Global.IfcRelProjectsElement
	{
		public virtual IfcElement? RelatingElement { get; set; }
		public virtual IfcFeatureElementAddition? RelatedFeatureElement { get; set; }
		public IfcRelProjectsElement() : base()
		{
		}
		public IfcRelProjectsElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcElement? RelatingElement, IfcFeatureElementAddition? RelatedFeatureElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingElement = RelatingElement;
			this.RelatedFeatureElement = RelatedFeatureElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingElement,
				RelatedFeatureElement
			};
		}
		public virtual Global.IfcElement? _RelatingElement { get { return RelatingElement; } set { } }
		public virtual Global.IfcFeatureElementAddition? _RelatedFeatureElement { get { return RelatedFeatureElement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelReferencedInSpatialStructure
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatedElements : SET [1:?] OF IfcProduct;
	/// RelatingStructure : IfcSpatialStructureElement;
	/// WHERE
	/// WR31 : SIZEOF(QUERY(temp <* RelatedElements | 'IFC2X3.IFCSPATIALSTRUCTUREELEMENT' IN TYPEOF(temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelReferencedInSpatialStructure : IfcRelConnects, Global.IfcRelReferencedInSpatialStructure
	{
		public virtual List<IfcProduct>? RelatedElements { get; set; }
		public virtual IfcSpatialStructureElement? RelatingStructure { get; set; }
		public IfcRelReferencedInSpatialStructure() : base()
		{
		}
		public IfcRelReferencedInSpatialStructure(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcProduct>? RelatedElements, IfcSpatialStructureElement? RelatingStructure) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedElements,
				RelatingStructure
			};
		}
		public virtual List<Global.IfcProduct>? _RelatedElements
		{
			get
			{
				if(RelatedElements != null)
				{
					List<Global.IfcProduct>? items = new List<Global.IfcProduct>();
					foreach (IfcProduct item in RelatedElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcSpatialStructureElement? _RelatingStructure { get { return RelatingStructure; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelSchedulesCostItems
	/// SUBTYPE OF (IfcRelAssignsToControl);
	/// WHERE
	/// WR11 : SIZEOF(QUERY(temp <* SELF\IfcRelAssigns.RelatedObjects |
	/// NOT('IFC2X3.IFCCOSTITEM' IN TYPEOF(temp))
	/// )) = 0;
	/// WR12 : 'IFC2X3.IFCCOSTSCHEDULE' IN TYPEOF (SELF\IfcRelAssignsToControl.RelatingControl);
	/// END_ENTITY;
	/// <summary>
	public class IfcRelSchedulesCostItems : IfcRelAssignsToControl, Global.IfcRelSchedulesCostItems
	{
		public IfcRelSchedulesCostItems() : base()
		{
		}
		public IfcRelSchedulesCostItems(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, List<IfcObjectDefinition>? RelatedObjects, IfcObjectTypeEnum? RelatedObjectsType, IfcControl? RelatingControl) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingControl)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatedObjects,
				RelatedObjectsType,
				RelatingControl
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelSequence
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingProcess : IfcProcess;
	/// RelatedProcess : IfcProcess;
	/// TimeLag : IfcTimeMeasure;
	/// SequenceType : IfcSequenceEnum;
	/// WHERE
	/// WR1 : RelatingProcess :<>: RelatedProcess;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelSequence : IfcRelConnects, Global.IfcRelSequence
	{
		public virtual IfcProcess? RelatingProcess { get; set; }
		public virtual IfcProcess? RelatedProcess { get; set; }
		public virtual IfcTimeMeasure? TimeLag { get; set; }
		public virtual IfcSequenceEnum? SequenceType { get; set; }
		public IfcRelSequence() : base()
		{
		}
		public IfcRelSequence(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcProcess? RelatingProcess, IfcProcess? RelatedProcess, IfcTimeMeasure? TimeLag, IfcSequenceEnum? SequenceType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingProcess = RelatingProcess;
			this.RelatedProcess = RelatedProcess;
			this.TimeLag = TimeLag;
			this.SequenceType = SequenceType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingProcess,
				RelatedProcess,
				TimeLag,
				SequenceType
			};
		}
		public virtual Global.IfcProcess? _RelatingProcess { get { return RelatingProcess; } set { } }
		public virtual Global.IfcProcess? _RelatedProcess { get { return RelatedProcess; } set { } }
		public virtual Global.IfcTimeMeasure? _TimeLag { get { return TimeLag; } set { } }
		public virtual Global.IfcSequenceEnum? _SequenceType { get { return SequenceType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelServicesBuildings
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingSystem : IfcSystem;
	/// RelatedBuildings : SET [1:?] OF IfcSpatialStructureElement;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelServicesBuildings : IfcRelConnects, Global.IfcRelServicesBuildings
	{
		public virtual IfcSystem? RelatingSystem { get; set; }
		public virtual List<IfcSpatialStructureElement>? RelatedBuildings { get; set; }
		public IfcRelServicesBuildings() : base()
		{
		}
		public IfcRelServicesBuildings(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcSystem? RelatingSystem, List<IfcSpatialStructureElement>? RelatedBuildings) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingSystem = RelatingSystem;
			this.RelatedBuildings = RelatedBuildings;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingSystem,
				RelatedBuildings
			};
		}
		public virtual Global.IfcSystem? _RelatingSystem { get { return RelatingSystem; } set { } }
		public virtual List<Global.IfcSpatialStructureElement>? _RelatedBuildings
		{
			get
			{
				if(RelatedBuildings != null)
				{
					List<Global.IfcSpatialStructureElement>? items = new List<Global.IfcSpatialStructureElement>();
					foreach (IfcSpatialStructureElement item in RelatedBuildings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelSpaceBoundary
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingSpace : IfcSpace;
	/// RelatedBuildingElement : OPTIONAL IfcElement;
	/// ConnectionGeometry : OPTIONAL IfcConnectionGeometry;
	/// PhysicalOrVirtualBoundary : IfcPhysicalOrVirtualEnum;
	/// InternalOrExternalBoundary : IfcInternalOrExternalEnum;
	/// WHERE
	/// WR1 : ((PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.Physical) AND
	/// (EXISTS(RelatedBuildingElement) AND NOT('IFC2X3.IFCVIRTUALELEMENT' IN TYPEOF(RelatedBuildingElement))))
	/// OR
	/// ((PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.Virtual) AND
	/// (NOT(EXISTS(RelatedBuildingElement)) OR ('IFC2X3.IFCVIRTUALELEMENT' IN TYPEOF(RelatedBuildingElement))))
	/// OR
	/// (PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.NotDefined);
	/// END_ENTITY;
	/// <summary>
	public class IfcRelSpaceBoundary : IfcRelConnects, Global.IfcRelSpaceBoundary
	{
		public virtual IfcSpace? RelatingSpace { get; set; }
		public virtual IfcElement? RelatedBuildingElement { get; set; }
		public virtual IfcConnectionGeometry? ConnectionGeometry { get; set; }
		public virtual IfcPhysicalOrVirtualEnum? PhysicalOrVirtualBoundary { get; set; }
		public virtual IfcInternalOrExternalEnum? InternalOrExternalBoundary { get; set; }
		public IfcRelSpaceBoundary() : base()
		{
		}
		public IfcRelSpaceBoundary(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcSpace? RelatingSpace, IfcElement? RelatedBuildingElement, IfcConnectionGeometry? ConnectionGeometry, IfcPhysicalOrVirtualEnum? PhysicalOrVirtualBoundary, IfcInternalOrExternalEnum? InternalOrExternalBoundary) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingSpace = RelatingSpace;
			this.RelatedBuildingElement = RelatedBuildingElement;
			this.ConnectionGeometry = ConnectionGeometry;
			this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
			this.InternalOrExternalBoundary = InternalOrExternalBoundary;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingSpace,
				RelatedBuildingElement,
				ConnectionGeometry,
				PhysicalOrVirtualBoundary,
				InternalOrExternalBoundary
			};
		}
		public virtual Global.IfcSpace? _RelatingSpace { get { return RelatingSpace; } set { } }
		public virtual Global.IfcElement? _RelatedBuildingElement { get { return RelatedBuildingElement; } set { } }
		public virtual Global.IfcConnectionGeometry? _ConnectionGeometry { get { return ConnectionGeometry; } set { } }
		public virtual Global.IfcPhysicalOrVirtualEnum? _PhysicalOrVirtualBoundary { get { return PhysicalOrVirtualBoundary; } set { } }
		public virtual Global.IfcInternalOrExternalEnum? _InternalOrExternalBoundary { get { return InternalOrExternalBoundary; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelVoidsElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingBuildingElement : IfcElement;
	/// RelatedOpeningElement : IfcFeatureElementSubtraction;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelVoidsElement : IfcRelConnects, Global.IfcRelVoidsElement
	{
		public virtual IfcElement? RelatingBuildingElement { get; set; }
		public virtual IfcFeatureElementSubtraction? RelatedOpeningElement { get; set; }
		public IfcRelVoidsElement() : base()
		{
		}
		public IfcRelVoidsElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcElement? RelatingBuildingElement, IfcFeatureElementSubtraction? RelatedOpeningElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedOpeningElement = RelatedOpeningElement;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				RelatingBuildingElement,
				RelatedOpeningElement
			};
		}
		public virtual Global.IfcElement? _RelatingBuildingElement { get { return RelatingBuildingElement; } set { } }
		public virtual Global.IfcFeatureElementSubtraction? _RelatedOpeningElement { get { return RelatedOpeningElement; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRelationship
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelAssigns
	/// ,IfcRelAssociates
	/// ,IfcRelConnects
	/// ,IfcRelDecomposes
	/// ,IfcRelDefines))
	/// SUBTYPE OF (IfcRoot);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRelationship : IfcRoot, Global.IfcRelationship
	{
		public IfcRelationship() : base()
		{
		}
		public IfcRelationship(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelaxation;
	/// RelaxationValue : IfcNormalisedRatioMeasure;
	/// InitialStress : IfcNormalisedRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcRelaxation : Ifc_Entity, Global.IfcRelaxation
	{
		public virtual IfcNormalisedRatioMeasure? RelaxationValue { get; set; }
		public virtual IfcNormalisedRatioMeasure? InitialStress { get; set; }
		public IfcRelaxation() : base()
		{
		}
		public IfcRelaxation(IfcNormalisedRatioMeasure? RelaxationValue, IfcNormalisedRatioMeasure? InitialStress) : base ()
		{
			this.RelaxationValue = RelaxationValue;
			this.InitialStress = InitialStress;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RelaxationValue,
				InitialStress
			};
		}
		public virtual Global.IfcNormalisedRatioMeasure? _RelaxationValue { get { return RelaxationValue; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _InitialStress { get { return InitialStress; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRepresentation
	/// SUPERTYPE OF (ONEOF
	/// (IfcShapeModel
	/// ,IfcStyleModel));
	/// ContextOfItems : IfcRepresentationContext;
	/// RepresentationIdentifier : OPTIONAL IfcLabel;
	/// RepresentationType : OPTIONAL IfcLabel;
	/// Items : SET [1:?] OF IfcRepresentationItem;
	/// INVERSE
	/// RepresentationMap : SET [0:1] OF IfcRepresentationMap FOR MappedRepresentation;
	/// LayerAssignments : SET [0:?] OF IfcPresentationLayerAssignment FOR AssignedItems;
	/// OfProductRepresentation : SET [0:1] OF IfcProductRepresentation FOR Representations;
	/// END_ENTITY;
	/// <summary>
	public class IfcRepresentation : Ifc_Entity, IfcLayeredItem, Global.IfcRepresentation
	{
		public virtual IfcRepresentationContext? ContextOfItems { get; set; }
		public virtual IfcLabel? RepresentationIdentifier { get; set; }
		public virtual IfcLabel? RepresentationType { get; set; }
		public virtual List<IfcRepresentationItem>? Items { get; set; }
		public List<IfcRepresentationMap>? RepresentationMap => Model?.GetItems<IfcRepresentationMap>().Where(x => x.MappedRepresentation != null && x.MappedRepresentation == this).ToList();
		public List<IfcPresentationLayerAssignment>? LayerAssignments => Model?.GetItems<IfcPresentationLayerAssignment>().Where(x => x.AssignedItems != null && x.AssignedItems.Contains(this)).ToList();
		public List<IfcProductRepresentation>? OfProductRepresentation => Model?.GetItems<IfcProductRepresentation>().Where(x => x.Representations != null && x.Representations.Contains(this)).ToList();
		public IfcRepresentation() : base()
		{
		}
		public IfcRepresentation(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base ()
		{
			this.ContextOfItems = ContextOfItems;
			this.RepresentationIdentifier = RepresentationIdentifier;
			this.RepresentationType = RepresentationType;
			this.Items = Items;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
		public virtual Global.IfcRepresentationContext? _ContextOfItems { get { return ContextOfItems; } set { } }
		public virtual Global.IfcLabel? _RepresentationIdentifier { get { return RepresentationIdentifier; } set { } }
		public virtual Global.IfcLabel? _RepresentationType { get { return RepresentationType; } set { } }
		public virtual List<Global.IfcRepresentationItem>? _Items
		{
			get
			{
				if(Items != null)
				{
					List<Global.IfcRepresentationItem>? items = new List<Global.IfcRepresentationItem>();
					foreach (IfcRepresentationItem item in Items)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRepresentationMap>? _RepresentationMap
		{
			get
			{
				if(RepresentationMap != null)
				{
					List<Global.IfcRepresentationMap>? items = new List<Global.IfcRepresentationMap>();
					foreach (IfcRepresentationMap item in RepresentationMap)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcProductRepresentation>? _OfProductRepresentation
		{
			get
			{
				if(OfProductRepresentation != null)
				{
					List<Global.IfcProductRepresentation>? items = new List<Global.IfcProductRepresentation>();
					foreach (IfcProductRepresentation item in OfProductRepresentation)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRepresentationContext
	/// SUPERTYPE OF (ONEOF
	/// (IfcGeometricRepresentationContext));
	/// ContextIdentifier : OPTIONAL IfcLabel;
	/// ContextType : OPTIONAL IfcLabel;
	/// INVERSE
	/// RepresentationsInContext : SET [0:?] OF IfcRepresentation FOR ContextOfItems;
	/// END_ENTITY;
	/// <summary>
	public class IfcRepresentationContext : Ifc_Entity, Global.IfcRepresentationContext
	{
		public virtual IfcLabel? ContextIdentifier { get; set; }
		public virtual IfcLabel? ContextType { get; set; }
		public List<IfcRepresentation>? RepresentationsInContext => Model?.GetItems<IfcRepresentation>().Where(x => x.ContextOfItems != null && x.ContextOfItems == this).ToList();
		public IfcRepresentationContext() : base()
		{
		}
		public IfcRepresentationContext(IfcLabel? ContextIdentifier, IfcLabel? ContextType) : base ()
		{
			this.ContextIdentifier = ContextIdentifier;
			this.ContextType = ContextType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextIdentifier,
				ContextType
			};
		}
		public virtual Global.IfcLabel? _ContextIdentifier { get { return ContextIdentifier; } set { } }
		public virtual Global.IfcLabel? _ContextType { get { return ContextType; } set { } }
		public virtual List<Global.IfcRepresentation>? _RepresentationsInContext
		{
			get
			{
				if(RepresentationsInContext != null)
				{
					List<Global.IfcRepresentation>? items = new List<Global.IfcRepresentation>();
					foreach (IfcRepresentation item in RepresentationsInContext)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRepresentationItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcGeometricRepresentationItem
	/// ,IfcMappedItem
	/// ,IfcStyledItem
	/// ,IfcTopologicalRepresentationItem));
	/// INVERSE
	/// LayerAssignments : SET [0:?] OF IfcPresentationLayerAssignment FOR AssignedItems;
	/// StyledByItem : SET [0:1] OF IfcStyledItem FOR Item;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRepresentationItem : Ifc_Entity, IfcLayeredItem, Global.IfcRepresentationItem
	{
		public List<IfcPresentationLayerAssignment>? LayerAssignments => Model?.GetItems<IfcPresentationLayerAssignment>().Where(x => x.AssignedItems != null && x.AssignedItems.Contains(this)).ToList();
		public List<IfcStyledItem>? StyledByItem => Model?.GetItems<IfcStyledItem>().Where(x => x.Item != null && x.Item == this).ToList();
		public IfcRepresentationItem() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual List<Global.IfcPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					List<Global.IfcPresentationLayerAssignment>? items = new List<Global.IfcPresentationLayerAssignment>();
					foreach (IfcPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcStyledItem>? _StyledByItem
		{
			get
			{
				if(StyledByItem != null)
				{
					List<Global.IfcStyledItem>? items = new List<Global.IfcStyledItem>();
					foreach (IfcStyledItem item in StyledByItem)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRepresentationMap;
	/// MappingOrigin : IfcAxis2Placement;
	/// MappedRepresentation : IfcRepresentation;
	/// INVERSE
	/// MapUsage : SET [0:?] OF IfcMappedItem FOR MappingSource;
	/// END_ENTITY;
	/// <summary>
	public class IfcRepresentationMap : Ifc_Entity, Global.IfcRepresentationMap
	{
		public virtual IfcAxis2Placement? MappingOrigin { get; set; }
		public virtual IfcRepresentation? MappedRepresentation { get; set; }
		public List<IfcMappedItem>? MapUsage => Model?.GetItems<IfcMappedItem>().Where(x => x.MappingSource != null && x.MappingSource == this).ToList();
		public IfcRepresentationMap() : base()
		{
		}
		public IfcRepresentationMap(IfcAxis2Placement? MappingOrigin, IfcRepresentation? MappedRepresentation) : base ()
		{
			this.MappingOrigin = MappingOrigin;
			this.MappedRepresentation = MappedRepresentation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				MappingOrigin,
				MappedRepresentation
			};
		}
		public virtual Global.IfcAxis2Placement? _MappingOrigin { get { return MappingOrigin; } set { } }
		public virtual Global.IfcRepresentation? _MappedRepresentation { get { return MappedRepresentation; } set { } }
		public virtual List<Global.IfcMappedItem>? _MapUsage
		{
			get
			{
				if(MapUsage != null)
				{
					List<Global.IfcMappedItem>? items = new List<Global.IfcMappedItem>();
					foreach (IfcMappedItem item in MapUsage)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcResource
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConstructionResource))
	/// SUBTYPE OF (IfcObject);
	/// INVERSE
	/// ResourceOf : SET [0:?] OF IfcRelAssignsToResource FOR RelatingResource;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcResource : IfcObject, Global.IfcResource
	{
		public List<IfcRelAssignsToResource>? ResourceOf => Model?.GetItems<IfcRelAssignsToResource>().Where(x => x.RelatingResource != null && x.RelatingResource == this).ToList();
		public IfcResource() : base()
		{
		}
		public IfcResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
		public virtual List<Global.IfcRelAssignsToResource>? _ResourceOf
		{
			get
			{
				if(ResourceOf != null)
				{
					List<Global.IfcRelAssignsToResource>? items = new List<Global.IfcRelAssignsToResource>();
					foreach (IfcRelAssignsToResource item in ResourceOf)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRevolvedAreaSolid
	/// SUBTYPE OF (IfcSweptAreaSolid);
	/// Axis : IfcAxis1Placement;
	/// Angle : IfcPlaneAngleMeasure;
	/// DERIVE
	/// AxisLine : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(Axis.Location,
	/// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(Axis.Z,1.0));
	/// WHERE
	/// WR31 : Axis.Location.Coordinates[3] = 0.0;
	/// WR32 : Axis.Z.DirectionRatios[3] = 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IfcRevolvedAreaSolid : IfcSweptAreaSolid, Global.IfcRevolvedAreaSolid
	{
		public virtual IfcAxis1Placement? Axis { get; set; }
		public virtual IfcPlaneAngleMeasure? Angle { get; set; }
		//TODO DERIVE
		public virtual IfcLine? AxisLine {get {return null;}}
		public IfcRevolvedAreaSolid() : base()
		{
		}
		public IfcRevolvedAreaSolid(IfcProfileDef? SweptArea, IfcAxis2Placement3D? Position, IfcAxis1Placement? Axis, IfcPlaneAngleMeasure? Angle) : base (SweptArea, Position)
		{
			this.Axis = Axis;
			this.Angle = Angle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptArea,
				Position,
				Axis,
				Angle
			};
		}
		public virtual Global.IfcAxis1Placement? _Axis { get { return Axis; } set { } }
		public virtual Global.IfcPlaneAngleMeasure? _Angle { get { return Angle; } set { } }
		public virtual Global.IfcLine? _AxisLine { get { return AxisLine; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRibPlateProfileProperties
	/// SUBTYPE OF (IfcProfileProperties);
	/// Thickness : OPTIONAL IfcPositiveLengthMeasure;
	/// RibHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// RibWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// RibSpacing : OPTIONAL IfcPositiveLengthMeasure;
	/// Direction : IfcRibPlateDirectionEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcRibPlateProfileProperties : IfcProfileProperties, Global.IfcRibPlateProfileProperties
	{
		public virtual IfcPositiveLengthMeasure? Thickness { get; set; }
		public virtual IfcPositiveLengthMeasure? RibHeight { get; set; }
		public virtual IfcPositiveLengthMeasure? RibWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? RibSpacing { get; set; }
		public virtual IfcRibPlateDirectionEnum? Direction { get; set; }
		public IfcRibPlateProfileProperties() : base()
		{
		}
		public IfcRibPlateProfileProperties(IfcLabel? ProfileName, IfcProfileDef? ProfileDefinition, IfcPositiveLengthMeasure? Thickness, IfcPositiveLengthMeasure? RibHeight, IfcPositiveLengthMeasure? RibWidth, IfcPositiveLengthMeasure? RibSpacing, IfcRibPlateDirectionEnum? Direction) : base (ProfileName, ProfileDefinition)
		{
			this.Thickness = Thickness;
			this.RibHeight = RibHeight;
			this.RibWidth = RibWidth;
			this.RibSpacing = RibSpacing;
			this.Direction = Direction;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileName,
				ProfileDefinition,
				Thickness,
				RibHeight,
				RibWidth,
				RibSpacing,
				Direction
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Thickness { get { return Thickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _RibHeight { get { return RibHeight; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _RibWidth { get { return RibWidth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _RibSpacing { get { return RibSpacing; } set { } }
		public virtual Global.IfcRibPlateDirectionEnum? _Direction { get { return Direction; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRightCircularCone
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// Height : IfcPositiveLengthMeasure;
	/// BottomRadius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcRightCircularCone : IfcCsgPrimitive3D, Global.IfcRightCircularCone
	{
		public virtual IfcPositiveLengthMeasure? Height { get; set; }
		public virtual IfcPositiveLengthMeasure? BottomRadius { get; set; }
		public IfcRightCircularCone() : base()
		{
		}
		public IfcRightCircularCone(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? Height, IfcPositiveLengthMeasure? BottomRadius) : base (Position)
		{
			this.Height = Height;
			this.BottomRadius = BottomRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				Height,
				BottomRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Height { get { return Height; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _BottomRadius { get { return BottomRadius; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRightCircularCylinder
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// Height : IfcPositiveLengthMeasure;
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcRightCircularCylinder : IfcCsgPrimitive3D, Global.IfcRightCircularCylinder
	{
		public virtual IfcPositiveLengthMeasure? Height { get; set; }
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public IfcRightCircularCylinder() : base()
		{
		}
		public IfcRightCircularCylinder(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? Height, IfcPositiveLengthMeasure? Radius) : base (Position)
		{
			this.Height = Height;
			this.Radius = Radius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				Height,
				Radius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Height { get { return Height; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Radius { get { return Radius; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRoof
	/// SUBTYPE OF (IfcBuildingElement);
	/// ShapeType : IfcRoofTypeEnum;
	/// WHERE
	/// WR1 : (HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 0) OR
	/// ((HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 1) AND (NOT(EXISTS(SELF\IfcProduct.Representation))));
	/// END_ENTITY;
	/// <summary>
	public class IfcRoof : IfcBuildingElement, Global.IfcRoof
	{
		public virtual IfcRoofTypeEnum? ShapeType { get; set; }
		public IfcRoof() : base()
		{
		}
		public IfcRoof(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcRoofTypeEnum? ShapeType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.ShapeType = ShapeType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				ShapeType
			};
		}
		public virtual Global.IfcRoofTypeEnum? _ShapeType { get { return ShapeType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRoot
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcObjectDefinition
	/// ,IfcPropertyDefinition
	/// ,IfcRelationship));
	/// GlobalId : IfcGloballyUniqueId;
	/// OwnerHistory : IfcOwnerHistory;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// UNIQUE
	/// UR1 : GlobalId;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcRoot : Ifc_Entity, Global.IfcRoot
	{
		public virtual IfcGloballyUniqueId? GlobalId { get; set; }
		public virtual IfcOwnerHistory? OwnerHistory { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public IfcRoot() : base()
		{
		}
		public IfcRoot(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description) : base ()
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description
			};
		}
		public virtual Global.IfcGloballyUniqueId? _GlobalId { get { return GlobalId; } set { } }
		public virtual Global.IfcOwnerHistory? _OwnerHistory { get { return OwnerHistory; } set { } }
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRoundedEdgeFeature
	/// SUBTYPE OF (IfcEdgeFeature);
	/// Radius : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcRoundedEdgeFeature : IfcEdgeFeature, Global.IfcRoundedEdgeFeature
	{
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public IfcRoundedEdgeFeature() : base()
		{
		}
		public IfcRoundedEdgeFeature(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPositiveLengthMeasure? FeatureLength, IfcPositiveLengthMeasure? Radius) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, FeatureLength)
		{
			this.Radius = Radius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				FeatureLength,
				Radius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius { get { return Radius; } set { } }
	}
	/// <summary>
	/// ENTITY IfcRoundedRectangleProfileDef
	/// SUBTYPE OF (IfcRectangleProfileDef);
	/// RoundingRadius : IfcPositiveLengthMeasure;
	/// WHERE
	/// WR31 : ((RoundingRadius <= (SELF\IfcRectangleProfileDef.XDim/2.)) AND
	/// (RoundingRadius <= (SELF\IfcRectangleProfileDef.YDim/2.)));
	/// END_ENTITY;
	/// <summary>
	public class IfcRoundedRectangleProfileDef : IfcRectangleProfileDef, Global.IfcRoundedRectangleProfileDef
	{
		public virtual IfcPositiveLengthMeasure? RoundingRadius { get; set; }
		public IfcRoundedRectangleProfileDef() : base()
		{
		}
		public IfcRoundedRectangleProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? XDim, IfcPositiveLengthMeasure? YDim, IfcPositiveLengthMeasure? RoundingRadius) : base (ProfileType, ProfileName, Position, XDim, YDim)
		{
			this.RoundingRadius = RoundingRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				XDim,
				YDim,
				RoundingRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _RoundingRadius { get { return RoundingRadius; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSIUnit
	/// SUBTYPE OF (IfcNamedUnit);
	/// Prefix : OPTIONAL IfcSIPrefix;
	/// Name : IfcSIUnitName;
	/// DERIVE
	/// SELF\IfcNamedUnit.Dimensions : IfcDimensionalExponents := IfcDimensionsForSiUnit (SELF.Name);
	/// END_ENTITY;
	/// <summary>
	public class IfcSIUnit : IfcNamedUnit, Global.IfcSIUnit
	{
		public virtual IfcSIPrefix? Prefix { get; set; }
		public virtual IfcSIUnitName? Name { get; set; }
		//TODO DERIVE
		public override IfcDimensionalExponents? Dimensions {get {return null;}}
		public IfcSIUnit() : base()
		{
		}
		public IfcSIUnit(IfcDimensionalExponents? Dimensions, IfcUnitEnum? UnitType, IfcSIPrefix? Prefix, IfcSIUnitName? Name) : base (Dimensions, UnitType)
		{
			this.Prefix = Prefix;
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Dimensions,
				UnitType,
				Prefix,
				Name
			};
		}
		public virtual Global.IfcSIPrefix? _Prefix { get { return Prefix; } set { } }
		public virtual Global.IfcSIUnitName? _Name { get { return Name; } set { } }
		public override Global.IfcDimensionalExponents? _Dimensions { get { return Dimensions; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSanitaryTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcSanitaryTerminalTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcSanitaryTerminalType : IfcFlowTerminalType, Global.IfcSanitaryTerminalType
	{
		public virtual IfcSanitaryTerminalTypeEnum? PredefinedType { get; set; }
		public IfcSanitaryTerminalType() : base()
		{
		}
		public IfcSanitaryTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSanitaryTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSanitaryTerminalTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcScheduleTimeControl
	/// SUBTYPE OF (IfcControl);
	/// ActualStart : OPTIONAL IfcDateTimeSelect;
	/// EarlyStart : OPTIONAL IfcDateTimeSelect;
	/// LateStart : OPTIONAL IfcDateTimeSelect;
	/// ScheduleStart : OPTIONAL IfcDateTimeSelect;
	/// ActualFinish : OPTIONAL IfcDateTimeSelect;
	/// EarlyFinish : OPTIONAL IfcDateTimeSelect;
	/// LateFinish : OPTIONAL IfcDateTimeSelect;
	/// ScheduleFinish : OPTIONAL IfcDateTimeSelect;
	/// ScheduleDuration : OPTIONAL IfcTimeMeasure;
	/// ActualDuration : OPTIONAL IfcTimeMeasure;
	/// RemainingTime : OPTIONAL IfcTimeMeasure;
	/// FreeFloat : OPTIONAL IfcTimeMeasure;
	/// TotalFloat : OPTIONAL IfcTimeMeasure;
	/// IsCritical : OPTIONAL BOOLEAN;
	/// StatusTime : OPTIONAL IfcDateTimeSelect;
	/// StartFloat : OPTIONAL IfcTimeMeasure;
	/// FinishFloat : OPTIONAL IfcTimeMeasure;
	/// Completion : OPTIONAL IfcPositiveRatioMeasure;
	/// INVERSE
	/// ScheduleTimeControlAssigned : IfcRelAssignsTasks FOR TimeForTask;
	/// END_ENTITY;
	/// <summary>
	public class IfcScheduleTimeControl : IfcControl, Global.IfcScheduleTimeControl
	{
		public virtual IfcDateTimeSelect? ActualStart { get; set; }
		public virtual IfcDateTimeSelect? EarlyStart { get; set; }
		public virtual IfcDateTimeSelect? LateStart { get; set; }
		public virtual IfcDateTimeSelect? ScheduleStart { get; set; }
		public virtual IfcDateTimeSelect? ActualFinish { get; set; }
		public virtual IfcDateTimeSelect? EarlyFinish { get; set; }
		public virtual IfcDateTimeSelect? LateFinish { get; set; }
		public virtual IfcDateTimeSelect? ScheduleFinish { get; set; }
		public virtual IfcTimeMeasure? ScheduleDuration { get; set; }
		public virtual IfcTimeMeasure? ActualDuration { get; set; }
		public virtual IfcTimeMeasure? RemainingTime { get; set; }
		public virtual IfcTimeMeasure? FreeFloat { get; set; }
		public virtual IfcTimeMeasure? TotalFloat { get; set; }
		public virtual BOOLEAN? IsCritical { get; set; }
		public virtual IfcDateTimeSelect? StatusTime { get; set; }
		public virtual IfcTimeMeasure? StartFloat { get; set; }
		public virtual IfcTimeMeasure? FinishFloat { get; set; }
		public virtual IfcPositiveRatioMeasure? Completion { get; set; }
		public IfcRelAssignsTasks? ScheduleTimeControlAssigned => Model?.GetItems<IfcRelAssignsTasks>().FirstOrDefault(x => x.TimeForTask != null && x.TimeForTask == this);
		public IfcScheduleTimeControl() : base()
		{
		}
		public IfcScheduleTimeControl(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcDateTimeSelect? ActualStart, IfcDateTimeSelect? EarlyStart, IfcDateTimeSelect? LateStart, IfcDateTimeSelect? ScheduleStart, IfcDateTimeSelect? ActualFinish, IfcDateTimeSelect? EarlyFinish, IfcDateTimeSelect? LateFinish, IfcDateTimeSelect? ScheduleFinish, IfcTimeMeasure? ScheduleDuration, IfcTimeMeasure? ActualDuration, IfcTimeMeasure? RemainingTime, IfcTimeMeasure? FreeFloat, IfcTimeMeasure? TotalFloat, BOOLEAN? IsCritical, IfcDateTimeSelect? StatusTime, IfcTimeMeasure? StartFloat, IfcTimeMeasure? FinishFloat, IfcPositiveRatioMeasure? Completion) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ActualStart = ActualStart;
			this.EarlyStart = EarlyStart;
			this.LateStart = LateStart;
			this.ScheduleStart = ScheduleStart;
			this.ActualFinish = ActualFinish;
			this.EarlyFinish = EarlyFinish;
			this.LateFinish = LateFinish;
			this.ScheduleFinish = ScheduleFinish;
			this.ScheduleDuration = ScheduleDuration;
			this.ActualDuration = ActualDuration;
			this.RemainingTime = RemainingTime;
			this.FreeFloat = FreeFloat;
			this.TotalFloat = TotalFloat;
			this.IsCritical = IsCritical;
			this.StatusTime = StatusTime;
			this.StartFloat = StartFloat;
			this.FinishFloat = FinishFloat;
			this.Completion = Completion;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ActualStart,
				EarlyStart,
				LateStart,
				ScheduleStart,
				ActualFinish,
				EarlyFinish,
				LateFinish,
				ScheduleFinish,
				ScheduleDuration,
				ActualDuration,
				RemainingTime,
				FreeFloat,
				TotalFloat,
				IsCritical,
				StatusTime,
				StartFloat,
				FinishFloat,
				Completion
			};
		}
		public virtual Global.IfcDateTimeSelect? _ActualStart { get { return ActualStart; } set { } }
		public virtual Global.IfcDateTimeSelect? _EarlyStart { get { return EarlyStart; } set { } }
		public virtual Global.IfcDateTimeSelect? _LateStart { get { return LateStart; } set { } }
		public virtual Global.IfcDateTimeSelect? _ScheduleStart { get { return ScheduleStart; } set { } }
		public virtual Global.IfcDateTimeSelect? _ActualFinish { get { return ActualFinish; } set { } }
		public virtual Global.IfcDateTimeSelect? _EarlyFinish { get { return EarlyFinish; } set { } }
		public virtual Global.IfcDateTimeSelect? _LateFinish { get { return LateFinish; } set { } }
		public virtual Global.IfcDateTimeSelect? _ScheduleFinish { get { return ScheduleFinish; } set { } }
		public virtual Global.IfcTimeMeasure? _ScheduleDuration { get { return ScheduleDuration; } set { } }
		public virtual Global.IfcTimeMeasure? _ActualDuration { get { return ActualDuration; } set { } }
		public virtual Global.IfcTimeMeasure? _RemainingTime { get { return RemainingTime; } set { } }
		public virtual Global.IfcTimeMeasure? _FreeFloat { get { return FreeFloat; } set { } }
		public virtual Global.IfcTimeMeasure? _TotalFloat { get { return TotalFloat; } set { } }
		public virtual BOOLEAN? _IsCritical { get { return IsCritical; } set { } }
		public virtual Global.IfcDateTimeSelect? _StatusTime { get { return StatusTime; } set { } }
		public virtual Global.IfcTimeMeasure? _StartFloat { get { return StartFloat; } set { } }
		public virtual Global.IfcTimeMeasure? _FinishFloat { get { return FinishFloat; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _Completion { get { return Completion; } set { } }
		public virtual Global.IfcRelAssignsTasks? _ScheduleTimeControlAssigned { get { return ScheduleTimeControlAssigned; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSectionProperties;
	/// SectionType : IfcSectionTypeEnum;
	/// StartProfile : IfcProfileDef;
	/// EndProfile : OPTIONAL IfcProfileDef;
	/// END_ENTITY;
	/// <summary>
	public class IfcSectionProperties : Ifc_Entity, Global.IfcSectionProperties
	{
		public virtual IfcSectionTypeEnum? SectionType { get; set; }
		public virtual IfcProfileDef? StartProfile { get; set; }
		public virtual IfcProfileDef? EndProfile { get; set; }
		public IfcSectionProperties() : base()
		{
		}
		public IfcSectionProperties(IfcSectionTypeEnum? SectionType, IfcProfileDef? StartProfile, IfcProfileDef? EndProfile) : base ()
		{
			this.SectionType = SectionType;
			this.StartProfile = StartProfile;
			this.EndProfile = EndProfile;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SectionType,
				StartProfile,
				EndProfile
			};
		}
		public virtual Global.IfcSectionTypeEnum? _SectionType { get { return SectionType; } set { } }
		public virtual Global.IfcProfileDef? _StartProfile { get { return StartProfile; } set { } }
		public virtual Global.IfcProfileDef? _EndProfile { get { return EndProfile; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSectionReinforcementProperties;
	/// LongitudinalStartPosition : IfcLengthMeasure;
	/// LongitudinalEndPosition : IfcLengthMeasure;
	/// TransversePosition : OPTIONAL IfcLengthMeasure;
	/// ReinforcementRole : IfcReinforcingBarRoleEnum;
	/// SectionDefinition : IfcSectionProperties;
	/// CrossSectionReinforcementDefinitions : SET [1:?] OF IfcReinforcementBarProperties;
	/// END_ENTITY;
	/// <summary>
	public class IfcSectionReinforcementProperties : Ifc_Entity, Global.IfcSectionReinforcementProperties
	{
		public virtual IfcLengthMeasure? LongitudinalStartPosition { get; set; }
		public virtual IfcLengthMeasure? LongitudinalEndPosition { get; set; }
		public virtual IfcLengthMeasure? TransversePosition { get; set; }
		public virtual IfcReinforcingBarRoleEnum? ReinforcementRole { get; set; }
		public virtual IfcSectionProperties? SectionDefinition { get; set; }
		public virtual List<IfcReinforcementBarProperties>? CrossSectionReinforcementDefinitions { get; set; }
		public IfcSectionReinforcementProperties() : base()
		{
		}
		public IfcSectionReinforcementProperties(IfcLengthMeasure? LongitudinalStartPosition, IfcLengthMeasure? LongitudinalEndPosition, IfcLengthMeasure? TransversePosition, IfcReinforcingBarRoleEnum? ReinforcementRole, IfcSectionProperties? SectionDefinition, List<IfcReinforcementBarProperties>? CrossSectionReinforcementDefinitions) : base ()
		{
			this.LongitudinalStartPosition = LongitudinalStartPosition;
			this.LongitudinalEndPosition = LongitudinalEndPosition;
			this.TransversePosition = TransversePosition;
			this.ReinforcementRole = ReinforcementRole;
			this.SectionDefinition = SectionDefinition;
			this.CrossSectionReinforcementDefinitions = CrossSectionReinforcementDefinitions;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				LongitudinalStartPosition,
				LongitudinalEndPosition,
				TransversePosition,
				ReinforcementRole,
				SectionDefinition,
				CrossSectionReinforcementDefinitions
			};
		}
		public virtual Global.IfcLengthMeasure? _LongitudinalStartPosition { get { return LongitudinalStartPosition; } set { } }
		public virtual Global.IfcLengthMeasure? _LongitudinalEndPosition { get { return LongitudinalEndPosition; } set { } }
		public virtual Global.IfcLengthMeasure? _TransversePosition { get { return TransversePosition; } set { } }
		public virtual Global.IfcReinforcingBarRoleEnum? _ReinforcementRole { get { return ReinforcementRole; } set { } }
		public virtual Global.IfcSectionProperties? _SectionDefinition { get { return SectionDefinition; } set { } }
		public virtual List<Global.IfcReinforcementBarProperties>? _CrossSectionReinforcementDefinitions
		{
			get
			{
				if(CrossSectionReinforcementDefinitions != null)
				{
					List<Global.IfcReinforcementBarProperties>? items = new List<Global.IfcReinforcementBarProperties>();
					foreach (IfcReinforcementBarProperties item in CrossSectionReinforcementDefinitions)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSectionedSpine
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// SpineCurve : IfcCompositeCurve;
	/// CrossSections : LIST [2:?] OF IfcProfileDef;
	/// CrossSectionPositions : LIST [2:?] OF IfcAxis2Placement3D;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// WHERE
	/// WR1 : SIZEOF(CrossSections) = SIZEOF(CrossSectionPositions);
	/// WR2 : SIZEOF(QUERY(temp <* CrossSections | CrossSections[1].ProfileType <> temp.ProfileType)) = 0;
	/// WR3 : SpineCurve.Dim = 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcSectionedSpine : IfcGeometricRepresentationItem, Global.IfcSectionedSpine
	{
		public virtual IfcCompositeCurve? SpineCurve { get; set; }
		public virtual List<IfcProfileDef>? CrossSections { get; set; }
		public virtual List<IfcAxis2Placement3D>? CrossSectionPositions { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcSectionedSpine() : base()
		{
		}
		public IfcSectionedSpine(IfcCompositeCurve? SpineCurve, List<IfcProfileDef>? CrossSections, List<IfcAxis2Placement3D>? CrossSectionPositions) : base ()
		{
			this.SpineCurve = SpineCurve;
			this.CrossSections = CrossSections;
			this.CrossSectionPositions = CrossSectionPositions;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SpineCurve,
				CrossSections,
				CrossSectionPositions
			};
		}
		public virtual Global.IfcCompositeCurve? _SpineCurve { get { return SpineCurve; } set { } }
		public virtual List<Global.IfcProfileDef>? _CrossSections
		{
			get
			{
				if(CrossSections != null)
				{
					List<Global.IfcProfileDef>? items = new List<Global.IfcProfileDef>();
					foreach (IfcProfileDef item in CrossSections)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcAxis2Placement3D>? _CrossSectionPositions
		{
			get
			{
				if(CrossSectionPositions != null)
				{
					List<Global.IfcAxis2Placement3D>? items = new List<Global.IfcAxis2Placement3D>();
					foreach (IfcAxis2Placement3D item in CrossSectionPositions)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSensorType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcSensorTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcSensorType : IfcDistributionControlElementType, Global.IfcSensorType
	{
		public virtual IfcSensorTypeEnum? PredefinedType { get; set; }
		public IfcSensorType() : base()
		{
		}
		public IfcSensorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSensorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSensorTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcServiceLife
	/// SUBTYPE OF (IfcControl);
	/// ServiceLifeType : IfcServiceLifeTypeEnum;
	/// ServiceLifeDuration : IfcTimeMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcServiceLife : IfcControl, Global.IfcServiceLife
	{
		public virtual IfcServiceLifeTypeEnum? ServiceLifeType { get; set; }
		public virtual IfcTimeMeasure? ServiceLifeDuration { get; set; }
		public IfcServiceLife() : base()
		{
		}
		public IfcServiceLife(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcServiceLifeTypeEnum? ServiceLifeType, IfcTimeMeasure? ServiceLifeDuration) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ServiceLifeType = ServiceLifeType;
			this.ServiceLifeDuration = ServiceLifeDuration;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ServiceLifeType,
				ServiceLifeDuration
			};
		}
		public virtual Global.IfcServiceLifeTypeEnum? _ServiceLifeType { get { return ServiceLifeType; } set { } }
		public virtual Global.IfcTimeMeasure? _ServiceLifeDuration { get { return ServiceLifeDuration; } set { } }
	}
	/// <summary>
	/// ENTITY IfcServiceLifeFactor
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// PredefinedType : IfcServiceLifeFactorTypeEnum;
	/// UpperValue : OPTIONAL IfcMeasureValue;
	/// MostUsedValue : IfcMeasureValue;
	/// LowerValue : OPTIONAL IfcMeasureValue;
	/// WHERE
	/// WR31 : NOT(PredefinedType = IfcServiceLifeFactorTypeEnum.USERDEFINED)
	/// OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcServiceLifeFactor : IfcPropertySetDefinition, Global.IfcServiceLifeFactor
	{
		public virtual IfcServiceLifeFactorTypeEnum? PredefinedType { get; set; }
		public virtual IfcMeasureValue? UpperValue { get; set; }
		public virtual IfcMeasureValue? MostUsedValue { get; set; }
		public virtual IfcMeasureValue? LowerValue { get; set; }
		public IfcServiceLifeFactor() : base()
		{
		}
		public IfcServiceLifeFactor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcServiceLifeFactorTypeEnum? PredefinedType, IfcMeasureValue? UpperValue, IfcMeasureValue? MostUsedValue, IfcMeasureValue? LowerValue) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.PredefinedType = PredefinedType;
			this.UpperValue = UpperValue;
			this.MostUsedValue = MostUsedValue;
			this.LowerValue = LowerValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				PredefinedType,
				UpperValue,
				MostUsedValue,
				LowerValue
			};
		}
		public virtual Global.IfcServiceLifeFactorTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
		public virtual Global.IfcMeasureValue? _UpperValue { get { return UpperValue; } set { } }
		public virtual Global.IfcMeasureValue? _MostUsedValue { get { return MostUsedValue; } set { } }
		public virtual Global.IfcMeasureValue? _LowerValue { get { return LowerValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcShapeAspect;
	/// ShapeRepresentations : LIST [1:?] OF IfcShapeModel;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// ProductDefinitional : LOGICAL;
	/// PartOfProductDefinitionShape : IfcProductDefinitionShape;
	/// END_ENTITY;
	/// <summary>
	public class IfcShapeAspect : Ifc_Entity, Global.IfcShapeAspect
	{
		public virtual List<IfcShapeModel>? ShapeRepresentations { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual LOGICAL? ProductDefinitional { get; set; }
		public virtual IfcProductDefinitionShape? PartOfProductDefinitionShape { get; set; }
		public IfcShapeAspect() : base()
		{
		}
		public IfcShapeAspect(List<IfcShapeModel>? ShapeRepresentations, IfcLabel? Name, IfcText? Description, LOGICAL? ProductDefinitional, IfcProductDefinitionShape? PartOfProductDefinitionShape) : base ()
		{
			this.ShapeRepresentations = ShapeRepresentations;
			this.Name = Name;
			this.Description = Description;
			this.ProductDefinitional = ProductDefinitional;
			this.PartOfProductDefinitionShape = PartOfProductDefinitionShape;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ShapeRepresentations,
				Name,
				Description,
				ProductDefinitional,
				PartOfProductDefinitionShape
			};
		}
		public virtual List<Global.IfcShapeModel>? _ShapeRepresentations
		{
			get
			{
				if(ShapeRepresentations != null)
				{
					List<Global.IfcShapeModel>? items = new List<Global.IfcShapeModel>();
					foreach (IfcShapeModel item in ShapeRepresentations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual LOGICAL? _ProductDefinitional { get { return ProductDefinitional; } set { } }
		public virtual Global.IfcProductDefinitionShape? _PartOfProductDefinitionShape { get { return PartOfProductDefinitionShape; } set { } }
	}
	/// <summary>
	/// ENTITY IfcShapeModel
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcShapeRepresentation
	/// ,IfcTopologyRepresentation))
	/// SUBTYPE OF (IfcRepresentation);
	/// INVERSE
	/// OfShapeAspect : SET [0:1] OF IfcShapeAspect FOR ShapeRepresentations;
	/// WHERE
	/// WR11 : (SIZEOF(SELF\IfcRepresentation.OfProductRepresentation) = 1) XOR
	/// (SIZEOF(SELF\IfcRepresentation.RepresentationMap) = 1) XOR
	/// (SIZEOF(OfShapeAspect) = 1);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcShapeModel : IfcRepresentation, Global.IfcShapeModel
	{
		public List<IfcShapeAspect>? OfShapeAspect => Model?.GetItems<IfcShapeAspect>().Where(x => x.ShapeRepresentations != null && x.ShapeRepresentations.Contains(this)).ToList();
		public IfcShapeModel() : base()
		{
		}
		public IfcShapeModel(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
		public virtual List<Global.IfcShapeAspect>? _OfShapeAspect
		{
			get
			{
				if(OfShapeAspect != null)
				{
					List<Global.IfcShapeAspect>? items = new List<Global.IfcShapeAspect>();
					foreach (IfcShapeAspect item in OfShapeAspect)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcShapeRepresentation
	/// SUBTYPE OF (IfcShapeModel);
	/// WHERE
	/// WR21 : 'IFC2X3.IFCGEOMETRICREPRESENTATIONCONTEXT'
	/// IN TYPEOF(SELF\IfcRepresentation.ContextOfItems);
	/// WR22 : SIZEOF(QUERY(temp <* Items |
	/// ('IFC2X3.IFCTOPOLOGICALREPRESENTATIONITEM' IN TYPEOF(temp))
	/// AND (NOT(SIZEOF(
	/// ['IFC2X3.IFCVERTEXPOINT',
	/// 'IFC2X3.IFCEDGECURVE',
	/// 'IFC2X3.IFCFACESURFACE'] * TYPEOF(temp)) = 1))
	/// )) = 0;
	/// WR23 : EXISTS(SELF\IfcRepresentation.RepresentationType);
	/// WR24 : IfcShapeRepresentationTypes(SELF\IfcRepresentation.RepresentationType, SELF\IfcRepresentation.Items);
	/// END_ENTITY;
	/// <summary>
	public class IfcShapeRepresentation : IfcShapeModel, Global.IfcShapeRepresentation
	{
		public IfcShapeRepresentation() : base()
		{
		}
		public IfcShapeRepresentation(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
	}
	/// <summary>
	/// ENTITY IfcShellBasedSurfaceModel
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// SbsmBoundary : SET [1:?] OF IfcShell;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IfcShellBasedSurfaceModel : IfcGeometricRepresentationItem, Global.IfcShellBasedSurfaceModel
	{
		public virtual List<IfcShell>? SbsmBoundary { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcShellBasedSurfaceModel() : base()
		{
		}
		public IfcShellBasedSurfaceModel(List<IfcShell>? SbsmBoundary) : base ()
		{
			this.SbsmBoundary = SbsmBoundary;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SbsmBoundary
			};
		}
		public virtual List<Global.IfcShell>? _SbsmBoundary
		{
			get
			{
				if(SbsmBoundary != null)
				{
					List<Global.IfcShell>? items = new List<Global.IfcShell>();
					foreach (IfcShell item in SbsmBoundary)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSimpleProperty
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPropertyBoundedValue
	/// ,IfcPropertyEnumeratedValue
	/// ,IfcPropertyListValue
	/// ,IfcPropertyReferenceValue
	/// ,IfcPropertySingleValue
	/// ,IfcPropertyTableValue))
	/// SUBTYPE OF (IfcProperty);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSimpleProperty : IfcProperty, Global.IfcSimpleProperty
	{
		public IfcSimpleProperty() : base()
		{
		}
		public IfcSimpleProperty(IfcIdentifier? Name, IfcText? Description) : base (Name, Description)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSite
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// RefLatitude : OPTIONAL IfcCompoundPlaneAngleMeasure;
	/// RefLongitude : OPTIONAL IfcCompoundPlaneAngleMeasure;
	/// RefElevation : OPTIONAL IfcLengthMeasure;
	/// LandTitleNumber : OPTIONAL IfcLabel;
	/// SiteAddress : OPTIONAL IfcPostalAddress;
	/// END_ENTITY;
	/// <summary>
	public class IfcSite : IfcSpatialStructureElement, Global.IfcSite
	{
		public virtual IfcCompoundPlaneAngleMeasure? RefLatitude { get; set; }
		public virtual IfcCompoundPlaneAngleMeasure? RefLongitude { get; set; }
		public virtual IfcLengthMeasure? RefElevation { get; set; }
		public virtual IfcLabel? LandTitleNumber { get; set; }
		public virtual IfcPostalAddress? SiteAddress { get; set; }
		public IfcSite() : base()
		{
		}
		public IfcSite(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcElementCompositionEnum? CompositionType, IfcCompoundPlaneAngleMeasure? RefLatitude, IfcCompoundPlaneAngleMeasure? RefLongitude, IfcLengthMeasure? RefElevation, IfcLabel? LandTitleNumber, IfcPostalAddress? SiteAddress) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.RefLatitude = RefLatitude;
			this.RefLongitude = RefLongitude;
			this.RefElevation = RefElevation;
			this.LandTitleNumber = LandTitleNumber;
			this.SiteAddress = SiteAddress;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				CompositionType,
				RefLatitude,
				RefLongitude,
				RefElevation,
				LandTitleNumber,
				SiteAddress
			};
		}
		public virtual Global.IfcCompoundPlaneAngleMeasure? _RefLatitude { get { return RefLatitude; } set { } }
		public virtual Global.IfcCompoundPlaneAngleMeasure? _RefLongitude { get { return RefLongitude; } set { } }
		public virtual Global.IfcLengthMeasure? _RefElevation { get { return RefElevation; } set { } }
		public virtual Global.IfcLabel? _LandTitleNumber { get { return LandTitleNumber; } set { } }
		public virtual Global.IfcPostalAddress? _SiteAddress { get { return SiteAddress; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSlab
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcSlabTypeEnum;
	/// WHERE
	/// WR61 : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSlabTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSlabTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSlab : IfcBuildingElement, Global.IfcSlab
	{
		public virtual IfcSlabTypeEnum? PredefinedType { get; set; }
		public IfcSlab() : base()
		{
		}
		public IfcSlab(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcSlabTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				PredefinedType
			};
		}
		public virtual Global.IfcSlabTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSlabType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcSlabTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcSlabType : IfcBuildingElementType, Global.IfcSlabType
	{
		public virtual IfcSlabTypeEnum? PredefinedType { get; set; }
		public IfcSlabType() : base()
		{
		}
		public IfcSlabType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSlabTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSlabTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSlippageConnectionCondition
	/// SUBTYPE OF (IfcStructuralConnectionCondition);
	/// SlippageX : OPTIONAL IfcLengthMeasure;
	/// SlippageY : OPTIONAL IfcLengthMeasure;
	/// SlippageZ : OPTIONAL IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcSlippageConnectionCondition : IfcStructuralConnectionCondition, Global.IfcSlippageConnectionCondition
	{
		public virtual IfcLengthMeasure? SlippageX { get; set; }
		public virtual IfcLengthMeasure? SlippageY { get; set; }
		public virtual IfcLengthMeasure? SlippageZ { get; set; }
		public IfcSlippageConnectionCondition() : base()
		{
		}
		public IfcSlippageConnectionCondition(IfcLabel? Name, IfcLengthMeasure? SlippageX, IfcLengthMeasure? SlippageY, IfcLengthMeasure? SlippageZ) : base (Name)
		{
			this.SlippageX = SlippageX;
			this.SlippageY = SlippageY;
			this.SlippageZ = SlippageZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				SlippageX,
				SlippageY,
				SlippageZ
			};
		}
		public virtual Global.IfcLengthMeasure? _SlippageX { get { return SlippageX; } set { } }
		public virtual Global.IfcLengthMeasure? _SlippageY { get { return SlippageY; } set { } }
		public virtual Global.IfcLengthMeasure? _SlippageZ { get { return SlippageZ; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSolidModel
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCsgSolid
	/// ,IfcManifoldSolidBrep
	/// ,IfcSweptAreaSolid
	/// ,IfcSweptDiskSolid))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSolidModel : IfcGeometricRepresentationItem, IfcBooleanOperand, Global.IfcSolidModel
	{
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcSolidModel() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSoundProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// IsAttenuating : IfcBoolean;
	/// SoundScale : OPTIONAL IfcSoundScaleEnum;
	/// SoundValues : LIST [1:8] OF IfcSoundValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcSoundProperties : IfcPropertySetDefinition, Global.IfcSoundProperties
	{
		public virtual IfcBoolean? IsAttenuating { get; set; }
		public virtual IfcSoundScaleEnum? SoundScale { get; set; }
		public virtual List<IfcSoundValue>? SoundValues { get; set; }
		public IfcSoundProperties() : base()
		{
		}
		public IfcSoundProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcBoolean? IsAttenuating, IfcSoundScaleEnum? SoundScale, List<IfcSoundValue>? SoundValues) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.IsAttenuating = IsAttenuating;
			this.SoundScale = SoundScale;
			this.SoundValues = SoundValues;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				IsAttenuating,
				SoundScale,
				SoundValues
			};
		}
		public virtual Global.IfcBoolean? _IsAttenuating { get { return IsAttenuating; } set { } }
		public virtual Global.IfcSoundScaleEnum? _SoundScale { get { return SoundScale; } set { } }
		public virtual List<Global.IfcSoundValue>? _SoundValues
		{
			get
			{
				if(SoundValues != null)
				{
					List<Global.IfcSoundValue>? items = new List<Global.IfcSoundValue>();
					foreach (IfcSoundValue item in SoundValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSoundValue
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// SoundLevelTimeSeries : OPTIONAL IfcTimeSeries;
	/// Frequency : IfcFrequencyMeasure;
	/// SoundLevelSingleValue : OPTIONAL IfcDerivedMeasureValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcSoundValue : IfcPropertySetDefinition, Global.IfcSoundValue
	{
		public virtual IfcTimeSeries? SoundLevelTimeSeries { get; set; }
		public virtual IfcFrequencyMeasure? Frequency { get; set; }
		public virtual IfcDerivedMeasureValue? SoundLevelSingleValue { get; set; }
		public IfcSoundValue() : base()
		{
		}
		public IfcSoundValue(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcTimeSeries? SoundLevelTimeSeries, IfcFrequencyMeasure? Frequency, IfcDerivedMeasureValue? SoundLevelSingleValue) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.SoundLevelTimeSeries = SoundLevelTimeSeries;
			this.Frequency = Frequency;
			this.SoundLevelSingleValue = SoundLevelSingleValue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				SoundLevelTimeSeries,
				Frequency,
				SoundLevelSingleValue
			};
		}
		public virtual Global.IfcTimeSeries? _SoundLevelTimeSeries { get { return SoundLevelTimeSeries; } set { } }
		public virtual Global.IfcFrequencyMeasure? _Frequency { get { return Frequency; } set { } }
		public virtual Global.IfcDerivedMeasureValue? _SoundLevelSingleValue { get { return SoundLevelSingleValue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSpace
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// InteriorOrExteriorSpace : IfcInternalOrExternalEnum;
	/// ElevationWithFlooring : OPTIONAL IfcLengthMeasure;
	/// INVERSE
	/// HasCoverings : SET [0:?] OF IfcRelCoversSpaces FOR RelatedSpace;
	/// BoundedBy : SET [0:?] OF IfcRelSpaceBoundary FOR RelatingSpace;
	/// END_ENTITY;
	/// <summary>
	public class IfcSpace : IfcSpatialStructureElement, Global.IfcSpace
	{
		public virtual IfcInternalOrExternalEnum? InteriorOrExteriorSpace { get; set; }
		public virtual IfcLengthMeasure? ElevationWithFlooring { get; set; }
		public List<IfcRelCoversSpaces>? HasCoverings => Model?.GetItems<IfcRelCoversSpaces>().Where(x => x.RelatedSpace != null && x.RelatedSpace == this).ToList();
		public List<IfcRelSpaceBoundary>? BoundedBy => Model?.GetItems<IfcRelSpaceBoundary>().Where(x => x.RelatingSpace != null && x.RelatingSpace == this).ToList();
		public IfcSpace() : base()
		{
		}
		public IfcSpace(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcElementCompositionEnum? CompositionType, IfcInternalOrExternalEnum? InteriorOrExteriorSpace, IfcLengthMeasure? ElevationWithFlooring) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.InteriorOrExteriorSpace = InteriorOrExteriorSpace;
			this.ElevationWithFlooring = ElevationWithFlooring;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				CompositionType,
				InteriorOrExteriorSpace,
				ElevationWithFlooring
			};
		}
		public virtual Global.IfcInternalOrExternalEnum? _InteriorOrExteriorSpace { get { return InteriorOrExteriorSpace; } set { } }
		public virtual Global.IfcLengthMeasure? _ElevationWithFlooring { get { return ElevationWithFlooring; } set { } }
		public virtual List<Global.IfcRelCoversSpaces>? _HasCoverings
		{
			get
			{
				if(HasCoverings != null)
				{
					List<Global.IfcRelCoversSpaces>? items = new List<Global.IfcRelCoversSpaces>();
					foreach (IfcRelCoversSpaces item in HasCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelSpaceBoundary>? _BoundedBy
		{
			get
			{
				if(BoundedBy != null)
				{
					List<Global.IfcRelSpaceBoundary>? items = new List<Global.IfcRelSpaceBoundary>();
					foreach (IfcRelSpaceBoundary item in BoundedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpaceHeaterType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcSpaceHeaterTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcSpaceHeaterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSpaceHeaterTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcSpaceHeaterType : IfcEnergyConversionDeviceType, Global.IfcSpaceHeaterType
	{
		public virtual IfcSpaceHeaterTypeEnum? PredefinedType { get; set; }
		public IfcSpaceHeaterType() : base()
		{
		}
		public IfcSpaceHeaterType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSpaceHeaterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSpaceHeaterTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSpaceProgram
	/// SUBTYPE OF (IfcControl);
	/// SpaceProgramIdentifier : IfcIdentifier;
	/// MaxRequiredArea : OPTIONAL IfcAreaMeasure;
	/// MinRequiredArea : OPTIONAL IfcAreaMeasure;
	/// RequestedLocation : OPTIONAL IfcSpatialStructureElement;
	/// StandardRequiredArea : IfcAreaMeasure;
	/// INVERSE
	/// HasInteractionReqsFrom : SET [0:?] OF IfcRelInteractionRequirements FOR RelatedSpaceProgram;
	/// HasInteractionReqsTo : SET [0:?] OF IfcRelInteractionRequirements FOR RelatingSpaceProgram;
	/// END_ENTITY;
	/// <summary>
	public class IfcSpaceProgram : IfcControl, Global.IfcSpaceProgram
	{
		public virtual IfcIdentifier? SpaceProgramIdentifier { get; set; }
		public virtual IfcAreaMeasure? MaxRequiredArea { get; set; }
		public virtual IfcAreaMeasure? MinRequiredArea { get; set; }
		public virtual IfcSpatialStructureElement? RequestedLocation { get; set; }
		public virtual IfcAreaMeasure? StandardRequiredArea { get; set; }
		public List<IfcRelInteractionRequirements>? HasInteractionReqsFrom => Model?.GetItems<IfcRelInteractionRequirements>().Where(x => x.RelatedSpaceProgram != null && x.RelatedSpaceProgram == this).ToList();
		public List<IfcRelInteractionRequirements>? HasInteractionReqsTo => Model?.GetItems<IfcRelInteractionRequirements>().Where(x => x.RelatingSpaceProgram != null && x.RelatingSpaceProgram == this).ToList();
		public IfcSpaceProgram() : base()
		{
		}
		public IfcSpaceProgram(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? SpaceProgramIdentifier, IfcAreaMeasure? MaxRequiredArea, IfcAreaMeasure? MinRequiredArea, IfcSpatialStructureElement? RequestedLocation, IfcAreaMeasure? StandardRequiredArea) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.SpaceProgramIdentifier = SpaceProgramIdentifier;
			this.MaxRequiredArea = MaxRequiredArea;
			this.MinRequiredArea = MinRequiredArea;
			this.RequestedLocation = RequestedLocation;
			this.StandardRequiredArea = StandardRequiredArea;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				SpaceProgramIdentifier,
				MaxRequiredArea,
				MinRequiredArea,
				RequestedLocation,
				StandardRequiredArea
			};
		}
		public virtual Global.IfcIdentifier? _SpaceProgramIdentifier { get { return SpaceProgramIdentifier; } set { } }
		public virtual Global.IfcAreaMeasure? _MaxRequiredArea { get { return MaxRequiredArea; } set { } }
		public virtual Global.IfcAreaMeasure? _MinRequiredArea { get { return MinRequiredArea; } set { } }
		public virtual Global.IfcSpatialStructureElement? _RequestedLocation { get { return RequestedLocation; } set { } }
		public virtual Global.IfcAreaMeasure? _StandardRequiredArea { get { return StandardRequiredArea; } set { } }
		public virtual List<Global.IfcRelInteractionRequirements>? _HasInteractionReqsFrom
		{
			get
			{
				if(HasInteractionReqsFrom != null)
				{
					List<Global.IfcRelInteractionRequirements>? items = new List<Global.IfcRelInteractionRequirements>();
					foreach (IfcRelInteractionRequirements item in HasInteractionReqsFrom)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelInteractionRequirements>? _HasInteractionReqsTo
		{
			get
			{
				if(HasInteractionReqsTo != null)
				{
					List<Global.IfcRelInteractionRequirements>? items = new List<Global.IfcRelInteractionRequirements>();
					foreach (IfcRelInteractionRequirements item in HasInteractionReqsTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpaceThermalLoadProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// ApplicableValueRatio : OPTIONAL IfcPositiveRatioMeasure;
	/// ThermalLoadSource : IfcThermalLoadSourceEnum;
	/// PropertySource : IfcPropertySourceEnum;
	/// SourceDescription : OPTIONAL IfcText;
	/// MaximumValue : IfcPowerMeasure;
	/// MinimumValue : OPTIONAL IfcPowerMeasure;
	/// ThermalLoadTimeSeriesValues : OPTIONAL IfcTimeSeries;
	/// UserDefinedThermalLoadSource : OPTIONAL IfcLabel;
	/// UserDefinedPropertySource : OPTIONAL IfcLabel;
	/// ThermalLoadType : IfcThermalLoadTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcSpaceThermalLoadProperties : IfcPropertySetDefinition, Global.IfcSpaceThermalLoadProperties
	{
		public virtual IfcPositiveRatioMeasure? ApplicableValueRatio { get; set; }
		public virtual IfcThermalLoadSourceEnum? ThermalLoadSource { get; set; }
		public virtual IfcPropertySourceEnum? PropertySource { get; set; }
		public virtual IfcText? SourceDescription { get; set; }
		public virtual IfcPowerMeasure? MaximumValue { get; set; }
		public virtual IfcPowerMeasure? MinimumValue { get; set; }
		public virtual IfcTimeSeries? ThermalLoadTimeSeriesValues { get; set; }
		public virtual IfcLabel? UserDefinedThermalLoadSource { get; set; }
		public virtual IfcLabel? UserDefinedPropertySource { get; set; }
		public virtual IfcThermalLoadTypeEnum? ThermalLoadType { get; set; }
		public IfcSpaceThermalLoadProperties() : base()
		{
		}
		public IfcSpaceThermalLoadProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPositiveRatioMeasure? ApplicableValueRatio, IfcThermalLoadSourceEnum? ThermalLoadSource, IfcPropertySourceEnum? PropertySource, IfcText? SourceDescription, IfcPowerMeasure? MaximumValue, IfcPowerMeasure? MinimumValue, IfcTimeSeries? ThermalLoadTimeSeriesValues, IfcLabel? UserDefinedThermalLoadSource, IfcLabel? UserDefinedPropertySource, IfcThermalLoadTypeEnum? ThermalLoadType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ApplicableValueRatio = ApplicableValueRatio;
			this.ThermalLoadSource = ThermalLoadSource;
			this.PropertySource = PropertySource;
			this.SourceDescription = SourceDescription;
			this.MaximumValue = MaximumValue;
			this.MinimumValue = MinimumValue;
			this.ThermalLoadTimeSeriesValues = ThermalLoadTimeSeriesValues;
			this.UserDefinedThermalLoadSource = UserDefinedThermalLoadSource;
			this.UserDefinedPropertySource = UserDefinedPropertySource;
			this.ThermalLoadType = ThermalLoadType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableValueRatio,
				ThermalLoadSource,
				PropertySource,
				SourceDescription,
				MaximumValue,
				MinimumValue,
				ThermalLoadTimeSeriesValues,
				UserDefinedThermalLoadSource,
				UserDefinedPropertySource,
				ThermalLoadType
			};
		}
		public virtual Global.IfcPositiveRatioMeasure? _ApplicableValueRatio { get { return ApplicableValueRatio; } set { } }
		public virtual Global.IfcThermalLoadSourceEnum? _ThermalLoadSource { get { return ThermalLoadSource; } set { } }
		public virtual Global.IfcPropertySourceEnum? _PropertySource { get { return PropertySource; } set { } }
		public virtual Global.IfcText? _SourceDescription { get { return SourceDescription; } set { } }
		public virtual Global.IfcPowerMeasure? _MaximumValue { get { return MaximumValue; } set { } }
		public virtual Global.IfcPowerMeasure? _MinimumValue { get { return MinimumValue; } set { } }
		public virtual Global.IfcTimeSeries? _ThermalLoadTimeSeriesValues { get { return ThermalLoadTimeSeriesValues; } set { } }
		public virtual Global.IfcLabel? _UserDefinedThermalLoadSource { get { return UserDefinedThermalLoadSource; } set { } }
		public virtual Global.IfcLabel? _UserDefinedPropertySource { get { return UserDefinedPropertySource; } set { } }
		public virtual Global.IfcThermalLoadTypeEnum? _ThermalLoadType { get { return ThermalLoadType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSpaceType
	/// SUBTYPE OF (IfcSpatialStructureElementType);
	/// PredefinedType : IfcSpaceTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcSpaceType : IfcSpatialStructureElementType, Global.IfcSpaceType
	{
		public virtual IfcSpaceTypeEnum? PredefinedType { get; set; }
		public IfcSpaceType() : base()
		{
		}
		public IfcSpaceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSpaceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSpaceTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSpatialStructureElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuilding
	/// ,IfcBuildingStorey
	/// ,IfcSite
	/// ,IfcSpace))
	/// SUBTYPE OF (IfcProduct);
	/// LongName : OPTIONAL IfcLabel;
	/// CompositionType : IfcElementCompositionEnum;
	/// INVERSE
	/// ReferencesElements : SET [0:?] OF IfcRelReferencedInSpatialStructure FOR RelatingStructure;
	/// ServicedBySystems : SET [0:?] OF IfcRelServicesBuildings FOR RelatedBuildings;
	/// ContainsElements : SET [0:?] OF IfcRelContainedInSpatialStructure FOR RelatingStructure;
	/// WHERE
	/// WR41 : (HIINDEX(SELF\IfcObjectDefinition.Decomposes) = 1)
	/// AND
	/// ('IFC2X3.IFCRELAGGREGATES' IN TYPEOF(SELF\IfcObjectDefinition.Decomposes[1]))
	/// AND
	/// (('IFC2X3.IFCPROJECT' IN TYPEOF (SELF\IfcObjectDefinition.Decomposes[1].RelatingObject)) OR
	/// ('IFC2X3.IFCSPATIALSTRUCTUREELEMENT' IN TYPEOF (SELF\IfcObjectDefinition.Decomposes[1].RelatingObject))
	/// );
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSpatialStructureElement : IfcProduct, Global.IfcSpatialStructureElement
	{
		public virtual IfcLabel? LongName { get; set; }
		public virtual IfcElementCompositionEnum? CompositionType { get; set; }
		public List<IfcRelReferencedInSpatialStructure>? ReferencesElements => Model?.GetItems<IfcRelReferencedInSpatialStructure>().Where(x => x.RelatingStructure != null && x.RelatingStructure == this).ToList();
		public List<IfcRelServicesBuildings>? ServicedBySystems => Model?.GetItems<IfcRelServicesBuildings>().Where(x => x.RelatedBuildings != null && x.RelatedBuildings.Contains(this)).ToList();
		public List<IfcRelContainedInSpatialStructure>? ContainsElements => Model?.GetItems<IfcRelContainedInSpatialStructure>().Where(x => x.RelatingStructure != null && x.RelatingStructure == this).ToList();
		public IfcSpatialStructureElement() : base()
		{
		}
		public IfcSpatialStructureElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcLabel? LongName, IfcElementCompositionEnum? CompositionType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.LongName = LongName;
			this.CompositionType = CompositionType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				LongName,
				CompositionType
			};
		}
		public virtual Global.IfcLabel? _LongName { get { return LongName; } set { } }
		public virtual Global.IfcElementCompositionEnum? _CompositionType { get { return CompositionType; } set { } }
		public virtual List<Global.IfcRelReferencedInSpatialStructure>? _ReferencesElements
		{
			get
			{
				if(ReferencesElements != null)
				{
					List<Global.IfcRelReferencedInSpatialStructure>? items = new List<Global.IfcRelReferencedInSpatialStructure>();
					foreach (IfcRelReferencedInSpatialStructure item in ReferencesElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelServicesBuildings>? _ServicedBySystems
		{
			get
			{
				if(ServicedBySystems != null)
				{
					List<Global.IfcRelServicesBuildings>? items = new List<Global.IfcRelServicesBuildings>();
					foreach (IfcRelServicesBuildings item in ServicedBySystems)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelContainedInSpatialStructure>? _ContainsElements
		{
			get
			{
				if(ContainsElements != null)
				{
					List<Global.IfcRelContainedInSpatialStructure>? items = new List<Global.IfcRelContainedInSpatialStructure>();
					foreach (IfcRelContainedInSpatialStructure item in ContainsElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpatialStructureElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcSpaceType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSpatialStructureElementType : IfcElementType, Global.IfcSpatialStructureElementType
	{
		public IfcSpatialStructureElementType() : base()
		{
		}
		public IfcSpatialStructureElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSphere
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcSphere : IfcCsgPrimitive3D, Global.IfcSphere
	{
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public IfcSphere() : base()
		{
		}
		public IfcSphere(IfcAxis2Placement3D? Position, IfcPositiveLengthMeasure? Radius) : base (Position)
		{
			this.Radius = Radius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Position,
				Radius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Radius { get { return Radius; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStackTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcStackTerminalTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcStackTerminalType : IfcFlowTerminalType, Global.IfcStackTerminalType
	{
		public virtual IfcStackTerminalTypeEnum? PredefinedType { get; set; }
		public IfcStackTerminalType() : base()
		{
		}
		public IfcStackTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcStackTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcStackTerminalTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStair
	/// SUBTYPE OF (IfcBuildingElement);
	/// ShapeType : IfcStairTypeEnum;
	/// WHERE
	/// WR1 : (HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 0) OR
	/// ((HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 1) AND (NOT(EXISTS(SELF\IfcProduct.Representation))));
	/// END_ENTITY;
	/// <summary>
	public class IfcStair : IfcBuildingElement, Global.IfcStair
	{
		public virtual IfcStairTypeEnum? ShapeType { get; set; }
		public IfcStair() : base()
		{
		}
		public IfcStair(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcStairTypeEnum? ShapeType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.ShapeType = ShapeType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				ShapeType
			};
		}
		public virtual Global.IfcStairTypeEnum? _ShapeType { get { return ShapeType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStairFlight
	/// SUBTYPE OF (IfcBuildingElement);
	/// NumberOfRiser : OPTIONAL INTEGER;
	/// NumberOfTreads : OPTIONAL INTEGER;
	/// RiserHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// TreadLength : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStairFlight : IfcBuildingElement, Global.IfcStairFlight
	{
		public virtual INTEGER? NumberOfRiser { get; set; }
		public virtual INTEGER? NumberOfTreads { get; set; }
		public virtual IfcPositiveLengthMeasure? RiserHeight { get; set; }
		public virtual IfcPositiveLengthMeasure? TreadLength { get; set; }
		public IfcStairFlight() : base()
		{
		}
		public IfcStairFlight(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, INTEGER? NumberOfRiser, INTEGER? NumberOfTreads, IfcPositiveLengthMeasure? RiserHeight, IfcPositiveLengthMeasure? TreadLength) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.NumberOfRiser = NumberOfRiser;
			this.NumberOfTreads = NumberOfTreads;
			this.RiserHeight = RiserHeight;
			this.TreadLength = TreadLength;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				NumberOfRiser,
				NumberOfTreads,
				RiserHeight,
				TreadLength
			};
		}
		public virtual INTEGER? _NumberOfRiser { get { return NumberOfRiser; } set { } }
		public virtual INTEGER? _NumberOfTreads { get { return NumberOfTreads; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _RiserHeight { get { return RiserHeight; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _TreadLength { get { return TreadLength; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStairFlightType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcStairFlightTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcStairFlightType : IfcBuildingElementType, Global.IfcStairFlightType
	{
		public virtual IfcStairFlightTypeEnum? PredefinedType { get; set; }
		public IfcStairFlightType() : base()
		{
		}
		public IfcStairFlightType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcStairFlightTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcStairFlightTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralAction
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralLinearAction
	/// ,IfcStructuralPlanarAction
	/// ,IfcStructuralPointAction))
	/// SUBTYPE OF (IfcStructuralActivity);
	/// DestabilizingLoad : BOOLEAN;
	/// CausedBy : OPTIONAL IfcStructuralReaction;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralAction : IfcStructuralActivity, Global.IfcStructuralAction
	{
		public virtual BOOLEAN? DestabilizingLoad { get; set; }
		public virtual IfcStructuralReaction? CausedBy { get; set; }
		public IfcStructuralAction() : base()
		{
		}
		public IfcStructuralAction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IfcStructuralReaction? CausedBy) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal)
		{
			this.DestabilizingLoad = DestabilizingLoad;
			this.CausedBy = CausedBy;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad,
				CausedBy
			};
		}
		public virtual BOOLEAN? _DestabilizingLoad { get { return DestabilizingLoad; } set { } }
		public virtual Global.IfcStructuralReaction? _CausedBy { get { return CausedBy; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralActivity
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralAction
	/// ,IfcStructuralReaction))
	/// SUBTYPE OF (IfcProduct);
	/// AppliedLoad : IfcStructuralLoad;
	/// GlobalOrLocal : IfcGlobalOrLocalEnum;
	/// INVERSE
	/// AssignedToStructuralItem : IfcRelConnectsStructuralActivity FOR RelatedStructuralActivity;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralActivity : IfcProduct, Global.IfcStructuralActivity
	{
		public virtual IfcStructuralLoad? AppliedLoad { get; set; }
		public virtual IfcGlobalOrLocalEnum? GlobalOrLocal { get; set; }
		public IfcRelConnectsStructuralActivity? AssignedToStructuralItem => Model?.GetItems<IfcRelConnectsStructuralActivity>().FirstOrDefault(x => x.RelatedStructuralActivity != null && x.RelatedStructuralActivity == this);
		public IfcStructuralActivity() : base()
		{
		}
		public IfcStructuralActivity(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal
			};
		}
		public virtual Global.IfcStructuralLoad? _AppliedLoad { get { return AppliedLoad; } set { } }
		public virtual Global.IfcGlobalOrLocalEnum? _GlobalOrLocal { get { return GlobalOrLocal; } set { } }
		public virtual Global.IfcRelConnectsStructuralActivity? _AssignedToStructuralItem { get { return AssignedToStructuralItem; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralAnalysisModel
	/// SUBTYPE OF (IfcSystem);
	/// PredefinedType : IfcAnalysisModelTypeEnum;
	/// OrientationOf2DPlane : OPTIONAL IfcAxis2Placement3D;
	/// LoadedBy : OPTIONAL SET [1:?] OF IfcStructuralLoadGroup;
	/// HasResults : OPTIONAL SET [1:?] OF IfcStructuralResultGroup;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralAnalysisModel : IfcSystem, Global.IfcStructuralAnalysisModel
	{
		public virtual IfcAnalysisModelTypeEnum? PredefinedType { get; set; }
		public virtual IfcAxis2Placement3D? OrientationOf2DPlane { get; set; }
		public virtual List<IfcStructuralLoadGroup>? LoadedBy { get; set; }
		public virtual List<IfcStructuralResultGroup>? HasResults { get; set; }
		public IfcStructuralAnalysisModel() : base()
		{
		}
		public IfcStructuralAnalysisModel(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcAnalysisModelTypeEnum? PredefinedType, IfcAxis2Placement3D? OrientationOf2DPlane, List<IfcStructuralLoadGroup>? LoadedBy, List<IfcStructuralResultGroup>? HasResults) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.PredefinedType = PredefinedType;
			this.OrientationOf2DPlane = OrientationOf2DPlane;
			this.LoadedBy = LoadedBy;
			this.HasResults = HasResults;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				PredefinedType,
				OrientationOf2DPlane,
				LoadedBy,
				HasResults
			};
		}
		public virtual Global.IfcAnalysisModelTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
		public virtual Global.IfcAxis2Placement3D? _OrientationOf2DPlane { get { return OrientationOf2DPlane; } set { } }
		public virtual List<Global.IfcStructuralLoadGroup>? _LoadedBy
		{
			get
			{
				if(LoadedBy != null)
				{
					List<Global.IfcStructuralLoadGroup>? items = new List<Global.IfcStructuralLoadGroup>();
					foreach (IfcStructuralLoadGroup item in LoadedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcStructuralResultGroup>? _HasResults
		{
			get
			{
				if(HasResults != null)
				{
					List<Global.IfcStructuralResultGroup>? items = new List<Global.IfcStructuralResultGroup>();
					foreach (IfcStructuralResultGroup item in HasResults)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralConnection
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralCurveConnection
	/// ,IfcStructuralPointConnection
	/// ,IfcStructuralSurfaceConnection))
	/// SUBTYPE OF (IfcStructuralItem);
	/// AppliedCondition : OPTIONAL IfcBoundaryCondition;
	/// INVERSE
	/// ConnectsStructuralMembers : SET [1:?] OF IfcRelConnectsStructuralMember FOR RelatedStructuralConnection;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralConnection : IfcStructuralItem, Global.IfcStructuralConnection
	{
		public virtual IfcBoundaryCondition? AppliedCondition { get; set; }
		public List<IfcRelConnectsStructuralMember>? ConnectsStructuralMembers => Model?.GetItems<IfcRelConnectsStructuralMember>().Where(x => x.RelatedStructuralConnection != null && x.RelatedStructuralConnection == this).ToList();
		public IfcStructuralConnection() : base()
		{
		}
		public IfcStructuralConnection(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcBoundaryCondition? AppliedCondition) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.AppliedCondition = AppliedCondition;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedCondition
			};
		}
		public virtual Global.IfcBoundaryCondition? _AppliedCondition { get { return AppliedCondition; } set { } }
		public virtual List<Global.IfcRelConnectsStructuralMember>? _ConnectsStructuralMembers
		{
			get
			{
				if(ConnectsStructuralMembers != null)
				{
					List<Global.IfcRelConnectsStructuralMember>? items = new List<Global.IfcRelConnectsStructuralMember>();
					foreach (IfcRelConnectsStructuralMember item in ConnectsStructuralMembers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralConnectionCondition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcFailureConnectionCondition
	/// ,IfcSlippageConnectionCondition));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralConnectionCondition : Ifc_Entity, Global.IfcStructuralConnectionCondition
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcStructuralConnectionCondition() : base()
		{
		}
		public IfcStructuralConnectionCondition(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralCurveConnection
	/// SUBTYPE OF (IfcStructuralConnection);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralCurveConnection : IfcStructuralConnection, Global.IfcStructuralCurveConnection
	{
		public IfcStructuralCurveConnection() : base()
		{
		}
		public IfcStructuralCurveConnection(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcBoundaryCondition? AppliedCondition) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedCondition
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralCurveMember
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralCurveMemberVarying))
	/// SUBTYPE OF (IfcStructuralMember);
	/// PredefinedType : IfcStructuralCurveTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralCurveMember : IfcStructuralMember, Global.IfcStructuralCurveMember
	{
		public virtual IfcStructuralCurveTypeEnum? PredefinedType { get; set; }
		public IfcStructuralCurveMember() : base()
		{
		}
		public IfcStructuralCurveMember(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralCurveTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				PredefinedType
			};
		}
		public virtual Global.IfcStructuralCurveTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralCurveMemberVarying
	/// SUBTYPE OF (IfcStructuralCurveMember);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralCurveMemberVarying : IfcStructuralCurveMember, Global.IfcStructuralCurveMemberVarying
	{
		public IfcStructuralCurveMemberVarying() : base()
		{
		}
		public IfcStructuralCurveMemberVarying(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralCurveTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				PredefinedType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralConnection
	/// ,IfcStructuralMember))
	/// SUBTYPE OF (IfcProduct);
	/// INVERSE
	/// AssignedStructuralActivity : SET [0:?] OF IfcRelConnectsStructuralActivity FOR RelatingElement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralItem : IfcProduct, IfcStructuralActivityAssignmentSelect, Global.IfcStructuralItem
	{
		public List<IfcRelConnectsStructuralActivity>? AssignedStructuralActivity => Model?.GetItems<IfcRelConnectsStructuralActivity>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList();
		public IfcStructuralItem() : base()
		{
		}
		public IfcStructuralItem(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation
			};
		}
		public virtual List<Global.IfcRelConnectsStructuralActivity>? _AssignedStructuralActivity
		{
			get
			{
				if(AssignedStructuralActivity != null)
				{
					List<Global.IfcRelConnectsStructuralActivity>? items = new List<Global.IfcRelConnectsStructuralActivity>();
					foreach (IfcRelConnectsStructuralActivity item in AssignedStructuralActivity)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLinearAction
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralLinearActionVarying))
	/// SUBTYPE OF (IfcStructuralAction);
	/// ProjectedOrTrue : IfcProjectedOrTrueLengthEnum;
	/// WHERE
	/// WR61 : SIZEOF(['IFC2X3.IFCSTRUCTURALLOADLINEARFORCE',
	/// 'IFC2X3.IFCSTRUCTURALLOADTEMPERATURE']
	/// * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLinearAction : IfcStructuralAction, Global.IfcStructuralLinearAction
	{
		public virtual IfcProjectedOrTrueLengthEnum? ProjectedOrTrue { get; set; }
		public IfcStructuralLinearAction() : base()
		{
		}
		public IfcStructuralLinearAction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IfcStructuralReaction? CausedBy, IfcProjectedOrTrueLengthEnum? ProjectedOrTrue) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy)
		{
			this.ProjectedOrTrue = ProjectedOrTrue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad,
				CausedBy,
				ProjectedOrTrue
			};
		}
		public virtual Global.IfcProjectedOrTrueLengthEnum? _ProjectedOrTrue { get { return ProjectedOrTrue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralLinearActionVarying
	/// SUBTYPE OF (IfcStructuralLinearAction);
	/// VaryingAppliedLoadLocation : IfcShapeAspect;
	/// SubsequentAppliedLoads : LIST [1:?] OF IfcStructuralLoad;
	/// DERIVE
	/// VaryingAppliedLoads : LIST [2:?] OF IfcStructuralLoad := IfcAddToBeginOfList(SELF\IfcStructuralActivity.AppliedLoad, SubsequentAppliedLoads);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLinearActionVarying : IfcStructuralLinearAction, Global.IfcStructuralLinearActionVarying
	{
		public virtual IfcShapeAspect? VaryingAppliedLoadLocation { get; set; }
		public virtual List<IfcStructuralLoad>? SubsequentAppliedLoads { get; set; }
		//TODO DERIVE
		public virtual List<IfcStructuralLoad>? VaryingAppliedLoads {get {return null;}}
		public IfcStructuralLinearActionVarying() : base()
		{
		}
		public IfcStructuralLinearActionVarying(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IfcStructuralReaction? CausedBy, IfcProjectedOrTrueLengthEnum? ProjectedOrTrue, IfcShapeAspect? VaryingAppliedLoadLocation, List<IfcStructuralLoad>? SubsequentAppliedLoads) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy, ProjectedOrTrue)
		{
			this.VaryingAppliedLoadLocation = VaryingAppliedLoadLocation;
			this.SubsequentAppliedLoads = SubsequentAppliedLoads;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad,
				CausedBy,
				ProjectedOrTrue,
				VaryingAppliedLoadLocation,
				SubsequentAppliedLoads
			};
		}
		public virtual Global.IfcShapeAspect? _VaryingAppliedLoadLocation { get { return VaryingAppliedLoadLocation; } set { } }
		public virtual List<Global.IfcStructuralLoad>? _SubsequentAppliedLoads
		{
			get
			{
				if(SubsequentAppliedLoads != null)
				{
					List<Global.IfcStructuralLoad>? items = new List<Global.IfcStructuralLoad>();
					foreach (IfcStructuralLoad item in SubsequentAppliedLoads)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcStructuralLoad>? _VaryingAppliedLoads
		{
			get
			{
				if(VaryingAppliedLoads != null)
				{
					List<Global.IfcStructuralLoad>? items = new List<Global.IfcStructuralLoad>();
					foreach (IfcStructuralLoad item in VaryingAppliedLoads)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoad
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadStatic));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralLoad : Ifc_Entity, Global.IfcStructuralLoad
	{
		public virtual IfcLabel? Name { get; set; }
		public IfcStructuralLoad() : base()
		{
		}
		public IfcStructuralLoad(IfcLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadGroup
	/// SUBTYPE OF (IfcGroup);
	/// PredefinedType : IfcLoadGroupTypeEnum;
	/// ActionType : IfcActionTypeEnum;
	/// ActionSource : IfcActionSourceTypeEnum;
	/// Coefficient : OPTIONAL IfcRatioMeasure;
	/// Purpose : OPTIONAL IfcLabel;
	/// INVERSE
	/// SourceOfResultGroup : SET [0:1] OF IfcStructuralResultGroup FOR ResultForLoadGroup;
	/// LoadGroupFor : SET [0:?] OF IfcStructuralAnalysisModel FOR LoadedBy;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadGroup : IfcGroup, Global.IfcStructuralLoadGroup
	{
		public virtual IfcLoadGroupTypeEnum? PredefinedType { get; set; }
		public virtual IfcActionTypeEnum? ActionType { get; set; }
		public virtual IfcActionSourceTypeEnum? ActionSource { get; set; }
		public virtual IfcRatioMeasure? Coefficient { get; set; }
		public virtual IfcLabel? Purpose { get; set; }
		public List<IfcStructuralResultGroup>? SourceOfResultGroup => Model?.GetItems<IfcStructuralResultGroup>().Where(x => x.ResultForLoadGroup != null && x.ResultForLoadGroup == this).ToList();
		public List<IfcStructuralAnalysisModel>? LoadGroupFor => Model?.GetItems<IfcStructuralAnalysisModel>().Where(x => x.LoadedBy != null && x.LoadedBy.Contains(this)).ToList();
		public IfcStructuralLoadGroup() : base()
		{
		}
		public IfcStructuralLoadGroup(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcLoadGroupTypeEnum? PredefinedType, IfcActionTypeEnum? ActionType, IfcActionSourceTypeEnum? ActionSource, IfcRatioMeasure? Coefficient, IfcLabel? Purpose) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.PredefinedType = PredefinedType;
			this.ActionType = ActionType;
			this.ActionSource = ActionSource;
			this.Coefficient = Coefficient;
			this.Purpose = Purpose;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				PredefinedType,
				ActionType,
				ActionSource,
				Coefficient,
				Purpose
			};
		}
		public virtual Global.IfcLoadGroupTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
		public virtual Global.IfcActionTypeEnum? _ActionType { get { return ActionType; } set { } }
		public virtual Global.IfcActionSourceTypeEnum? _ActionSource { get { return ActionSource; } set { } }
		public virtual Global.IfcRatioMeasure? _Coefficient { get { return Coefficient; } set { } }
		public virtual Global.IfcLabel? _Purpose { get { return Purpose; } set { } }
		public virtual List<Global.IfcStructuralResultGroup>? _SourceOfResultGroup
		{
			get
			{
				if(SourceOfResultGroup != null)
				{
					List<Global.IfcStructuralResultGroup>? items = new List<Global.IfcStructuralResultGroup>();
					foreach (IfcStructuralResultGroup item in SourceOfResultGroup)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcStructuralAnalysisModel>? _LoadGroupFor
		{
			get
			{
				if(LoadGroupFor != null)
				{
					List<Global.IfcStructuralAnalysisModel>? items = new List<Global.IfcStructuralAnalysisModel>();
					foreach (IfcStructuralAnalysisModel item in LoadGroupFor)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadLinearForce
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// LinearForceX : OPTIONAL IfcLinearForceMeasure;
	/// LinearForceY : OPTIONAL IfcLinearForceMeasure;
	/// LinearForceZ : OPTIONAL IfcLinearForceMeasure;
	/// LinearMomentX : OPTIONAL IfcLinearMomentMeasure;
	/// LinearMomentY : OPTIONAL IfcLinearMomentMeasure;
	/// LinearMomentZ : OPTIONAL IfcLinearMomentMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadLinearForce : IfcStructuralLoadStatic, Global.IfcStructuralLoadLinearForce
	{
		public virtual IfcLinearForceMeasure? LinearForceX { get; set; }
		public virtual IfcLinearForceMeasure? LinearForceY { get; set; }
		public virtual IfcLinearForceMeasure? LinearForceZ { get; set; }
		public virtual IfcLinearMomentMeasure? LinearMomentX { get; set; }
		public virtual IfcLinearMomentMeasure? LinearMomentY { get; set; }
		public virtual IfcLinearMomentMeasure? LinearMomentZ { get; set; }
		public IfcStructuralLoadLinearForce() : base()
		{
		}
		public IfcStructuralLoadLinearForce(IfcLabel? Name, IfcLinearForceMeasure? LinearForceX, IfcLinearForceMeasure? LinearForceY, IfcLinearForceMeasure? LinearForceZ, IfcLinearMomentMeasure? LinearMomentX, IfcLinearMomentMeasure? LinearMomentY, IfcLinearMomentMeasure? LinearMomentZ) : base (Name)
		{
			this.LinearForceX = LinearForceX;
			this.LinearForceY = LinearForceY;
			this.LinearForceZ = LinearForceZ;
			this.LinearMomentX = LinearMomentX;
			this.LinearMomentY = LinearMomentY;
			this.LinearMomentZ = LinearMomentZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				LinearForceX,
				LinearForceY,
				LinearForceZ,
				LinearMomentX,
				LinearMomentY,
				LinearMomentZ
			};
		}
		public virtual Global.IfcLinearForceMeasure? _LinearForceX { get { return LinearForceX; } set { } }
		public virtual Global.IfcLinearForceMeasure? _LinearForceY { get { return LinearForceY; } set { } }
		public virtual Global.IfcLinearForceMeasure? _LinearForceZ { get { return LinearForceZ; } set { } }
		public virtual Global.IfcLinearMomentMeasure? _LinearMomentX { get { return LinearMomentX; } set { } }
		public virtual Global.IfcLinearMomentMeasure? _LinearMomentY { get { return LinearMomentY; } set { } }
		public virtual Global.IfcLinearMomentMeasure? _LinearMomentZ { get { return LinearMomentZ; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadPlanarForce
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// PlanarForceX : OPTIONAL IfcPlanarForceMeasure;
	/// PlanarForceY : OPTIONAL IfcPlanarForceMeasure;
	/// PlanarForceZ : OPTIONAL IfcPlanarForceMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadPlanarForce : IfcStructuralLoadStatic, Global.IfcStructuralLoadPlanarForce
	{
		public virtual IfcPlanarForceMeasure? PlanarForceX { get; set; }
		public virtual IfcPlanarForceMeasure? PlanarForceY { get; set; }
		public virtual IfcPlanarForceMeasure? PlanarForceZ { get; set; }
		public IfcStructuralLoadPlanarForce() : base()
		{
		}
		public IfcStructuralLoadPlanarForce(IfcLabel? Name, IfcPlanarForceMeasure? PlanarForceX, IfcPlanarForceMeasure? PlanarForceY, IfcPlanarForceMeasure? PlanarForceZ) : base (Name)
		{
			this.PlanarForceX = PlanarForceX;
			this.PlanarForceY = PlanarForceY;
			this.PlanarForceZ = PlanarForceZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				PlanarForceX,
				PlanarForceY,
				PlanarForceZ
			};
		}
		public virtual Global.IfcPlanarForceMeasure? _PlanarForceX { get { return PlanarForceX; } set { } }
		public virtual Global.IfcPlanarForceMeasure? _PlanarForceY { get { return PlanarForceY; } set { } }
		public virtual Global.IfcPlanarForceMeasure? _PlanarForceZ { get { return PlanarForceZ; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleDisplacement
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadSingleDisplacementDistortion))
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// DisplacementX : OPTIONAL IfcLengthMeasure;
	/// DisplacementY : OPTIONAL IfcLengthMeasure;
	/// DisplacementZ : OPTIONAL IfcLengthMeasure;
	/// RotationalDisplacementRX : OPTIONAL IfcPlaneAngleMeasure;
	/// RotationalDisplacementRY : OPTIONAL IfcPlaneAngleMeasure;
	/// RotationalDisplacementRZ : OPTIONAL IfcPlaneAngleMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadSingleDisplacement : IfcStructuralLoadStatic, Global.IfcStructuralLoadSingleDisplacement
	{
		public virtual IfcLengthMeasure? DisplacementX { get; set; }
		public virtual IfcLengthMeasure? DisplacementY { get; set; }
		public virtual IfcLengthMeasure? DisplacementZ { get; set; }
		public virtual IfcPlaneAngleMeasure? RotationalDisplacementRX { get; set; }
		public virtual IfcPlaneAngleMeasure? RotationalDisplacementRY { get; set; }
		public virtual IfcPlaneAngleMeasure? RotationalDisplacementRZ { get; set; }
		public IfcStructuralLoadSingleDisplacement() : base()
		{
		}
		public IfcStructuralLoadSingleDisplacement(IfcLabel? Name, IfcLengthMeasure? DisplacementX, IfcLengthMeasure? DisplacementY, IfcLengthMeasure? DisplacementZ, IfcPlaneAngleMeasure? RotationalDisplacementRX, IfcPlaneAngleMeasure? RotationalDisplacementRY, IfcPlaneAngleMeasure? RotationalDisplacementRZ) : base (Name)
		{
			this.DisplacementX = DisplacementX;
			this.DisplacementY = DisplacementY;
			this.DisplacementZ = DisplacementZ;
			this.RotationalDisplacementRX = RotationalDisplacementRX;
			this.RotationalDisplacementRY = RotationalDisplacementRY;
			this.RotationalDisplacementRZ = RotationalDisplacementRZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DisplacementX,
				DisplacementY,
				DisplacementZ,
				RotationalDisplacementRX,
				RotationalDisplacementRY,
				RotationalDisplacementRZ
			};
		}
		public virtual Global.IfcLengthMeasure? _DisplacementX { get { return DisplacementX; } set { } }
		public virtual Global.IfcLengthMeasure? _DisplacementY { get { return DisplacementY; } set { } }
		public virtual Global.IfcLengthMeasure? _DisplacementZ { get { return DisplacementZ; } set { } }
		public virtual Global.IfcPlaneAngleMeasure? _RotationalDisplacementRX { get { return RotationalDisplacementRX; } set { } }
		public virtual Global.IfcPlaneAngleMeasure? _RotationalDisplacementRY { get { return RotationalDisplacementRY; } set { } }
		public virtual Global.IfcPlaneAngleMeasure? _RotationalDisplacementRZ { get { return RotationalDisplacementRZ; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleDisplacementDistortion
	/// SUBTYPE OF (IfcStructuralLoadSingleDisplacement);
	/// Distortion : OPTIONAL IfcCurvatureMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadSingleDisplacementDistortion : IfcStructuralLoadSingleDisplacement, Global.IfcStructuralLoadSingleDisplacementDistortion
	{
		public virtual IfcCurvatureMeasure? Distortion { get; set; }
		public IfcStructuralLoadSingleDisplacementDistortion() : base()
		{
		}
		public IfcStructuralLoadSingleDisplacementDistortion(IfcLabel? Name, IfcLengthMeasure? DisplacementX, IfcLengthMeasure? DisplacementY, IfcLengthMeasure? DisplacementZ, IfcPlaneAngleMeasure? RotationalDisplacementRX, IfcPlaneAngleMeasure? RotationalDisplacementRY, IfcPlaneAngleMeasure? RotationalDisplacementRZ, IfcCurvatureMeasure? Distortion) : base (Name, DisplacementX, DisplacementY, DisplacementZ, RotationalDisplacementRX, RotationalDisplacementRY, RotationalDisplacementRZ)
		{
			this.Distortion = Distortion;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DisplacementX,
				DisplacementY,
				DisplacementZ,
				RotationalDisplacementRX,
				RotationalDisplacementRY,
				RotationalDisplacementRZ,
				Distortion
			};
		}
		public virtual Global.IfcCurvatureMeasure? _Distortion { get { return Distortion; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleForce
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadSingleForceWarping))
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// ForceX : OPTIONAL IfcForceMeasure;
	/// ForceY : OPTIONAL IfcForceMeasure;
	/// ForceZ : OPTIONAL IfcForceMeasure;
	/// MomentX : OPTIONAL IfcTorqueMeasure;
	/// MomentY : OPTIONAL IfcTorqueMeasure;
	/// MomentZ : OPTIONAL IfcTorqueMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadSingleForce : IfcStructuralLoadStatic, Global.IfcStructuralLoadSingleForce
	{
		public virtual IfcForceMeasure? ForceX { get; set; }
		public virtual IfcForceMeasure? ForceY { get; set; }
		public virtual IfcForceMeasure? ForceZ { get; set; }
		public virtual IfcTorqueMeasure? MomentX { get; set; }
		public virtual IfcTorqueMeasure? MomentY { get; set; }
		public virtual IfcTorqueMeasure? MomentZ { get; set; }
		public IfcStructuralLoadSingleForce() : base()
		{
		}
		public IfcStructuralLoadSingleForce(IfcLabel? Name, IfcForceMeasure? ForceX, IfcForceMeasure? ForceY, IfcForceMeasure? ForceZ, IfcTorqueMeasure? MomentX, IfcTorqueMeasure? MomentY, IfcTorqueMeasure? MomentZ) : base (Name)
		{
			this.ForceX = ForceX;
			this.ForceY = ForceY;
			this.ForceZ = ForceZ;
			this.MomentX = MomentX;
			this.MomentY = MomentY;
			this.MomentZ = MomentZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				ForceX,
				ForceY,
				ForceZ,
				MomentX,
				MomentY,
				MomentZ
			};
		}
		public virtual Global.IfcForceMeasure? _ForceX { get { return ForceX; } set { } }
		public virtual Global.IfcForceMeasure? _ForceY { get { return ForceY; } set { } }
		public virtual Global.IfcForceMeasure? _ForceZ { get { return ForceZ; } set { } }
		public virtual Global.IfcTorqueMeasure? _MomentX { get { return MomentX; } set { } }
		public virtual Global.IfcTorqueMeasure? _MomentY { get { return MomentY; } set { } }
		public virtual Global.IfcTorqueMeasure? _MomentZ { get { return MomentZ; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleForceWarping
	/// SUBTYPE OF (IfcStructuralLoadSingleForce);
	/// WarpingMoment : OPTIONAL IfcWarpingMomentMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadSingleForceWarping : IfcStructuralLoadSingleForce, Global.IfcStructuralLoadSingleForceWarping
	{
		public virtual IfcWarpingMomentMeasure? WarpingMoment { get; set; }
		public IfcStructuralLoadSingleForceWarping() : base()
		{
		}
		public IfcStructuralLoadSingleForceWarping(IfcLabel? Name, IfcForceMeasure? ForceX, IfcForceMeasure? ForceY, IfcForceMeasure? ForceZ, IfcTorqueMeasure? MomentX, IfcTorqueMeasure? MomentY, IfcTorqueMeasure? MomentZ, IfcWarpingMomentMeasure? WarpingMoment) : base (Name, ForceX, ForceY, ForceZ, MomentX, MomentY, MomentZ)
		{
			this.WarpingMoment = WarpingMoment;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				ForceX,
				ForceY,
				ForceZ,
				MomentX,
				MomentY,
				MomentZ,
				WarpingMoment
			};
		}
		public virtual Global.IfcWarpingMomentMeasure? _WarpingMoment { get { return WarpingMoment; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadStatic
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadLinearForce
	/// ,IfcStructuralLoadPlanarForce
	/// ,IfcStructuralLoadSingleDisplacement
	/// ,IfcStructuralLoadSingleForce
	/// ,IfcStructuralLoadTemperature))
	/// SUBTYPE OF (IfcStructuralLoad);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralLoadStatic : IfcStructuralLoad, Global.IfcStructuralLoadStatic
	{
		public IfcStructuralLoadStatic() : base()
		{
		}
		public IfcStructuralLoadStatic(IfcLabel? Name) : base (Name)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadTemperature
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// DeltaT_Constant : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// DeltaT_Y : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// DeltaT_Z : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralLoadTemperature : IfcStructuralLoadStatic, Global.IfcStructuralLoadTemperature
	{
		public virtual IfcThermodynamicTemperatureMeasure? DeltaT_Constant { get; set; }
		public virtual IfcThermodynamicTemperatureMeasure? DeltaT_Y { get; set; }
		public virtual IfcThermodynamicTemperatureMeasure? DeltaT_Z { get; set; }
		public IfcStructuralLoadTemperature() : base()
		{
		}
		public IfcStructuralLoadTemperature(IfcLabel? Name, IfcThermodynamicTemperatureMeasure? DeltaT_Constant, IfcThermodynamicTemperatureMeasure? DeltaT_Y, IfcThermodynamicTemperatureMeasure? DeltaT_Z) : base (Name)
		{
			this.DeltaT_Constant = DeltaT_Constant;
			this.DeltaT_Y = DeltaT_Y;
			this.DeltaT_Z = DeltaT_Z;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				DeltaT_Constant,
				DeltaT_Y,
				DeltaT_Z
			};
		}
		public virtual Global.IfcThermodynamicTemperatureMeasure? _DeltaT_Constant { get { return DeltaT_Constant; } set { } }
		public virtual Global.IfcThermodynamicTemperatureMeasure? _DeltaT_Y { get { return DeltaT_Y; } set { } }
		public virtual Global.IfcThermodynamicTemperatureMeasure? _DeltaT_Z { get { return DeltaT_Z; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralMember
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralCurveMember
	/// ,IfcStructuralSurfaceMember))
	/// SUBTYPE OF (IfcStructuralItem);
	/// INVERSE
	/// ReferencesElement : SET [0:?] OF IfcRelConnectsStructuralElement FOR RelatedStructuralMember;
	/// ConnectedBy : SET [0:?] OF IfcRelConnectsStructuralMember FOR RelatingStructuralMember;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralMember : IfcStructuralItem, Global.IfcStructuralMember
	{
		public List<IfcRelConnectsStructuralElement>? ReferencesElement => Model?.GetItems<IfcRelConnectsStructuralElement>().Where(x => x.RelatedStructuralMember != null && x.RelatedStructuralMember == this).ToList();
		public List<IfcRelConnectsStructuralMember>? ConnectedBy => Model?.GetItems<IfcRelConnectsStructuralMember>().Where(x => x.RelatingStructuralMember != null && x.RelatingStructuralMember == this).ToList();
		public IfcStructuralMember() : base()
		{
		}
		public IfcStructuralMember(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation
			};
		}
		public virtual List<Global.IfcRelConnectsStructuralElement>? _ReferencesElement
		{
			get
			{
				if(ReferencesElement != null)
				{
					List<Global.IfcRelConnectsStructuralElement>? items = new List<Global.IfcRelConnectsStructuralElement>();
					foreach (IfcRelConnectsStructuralElement item in ReferencesElement)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelConnectsStructuralMember>? _ConnectedBy
		{
			get
			{
				if(ConnectedBy != null)
				{
					List<Global.IfcRelConnectsStructuralMember>? items = new List<Global.IfcRelConnectsStructuralMember>();
					foreach (IfcRelConnectsStructuralMember item in ConnectedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPlanarAction
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralPlanarActionVarying))
	/// SUBTYPE OF (IfcStructuralAction);
	/// ProjectedOrTrue : IfcProjectedOrTrueLengthEnum;
	/// WHERE
	/// WR61 : SIZEOF(['IFC2X3.IFCSTRUCTURALLOADPLANARFORCE',
	/// 'IFC2X3.IFCSTRUCTURALLOADTEMPERATURE']
	/// * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralPlanarAction : IfcStructuralAction, Global.IfcStructuralPlanarAction
	{
		public virtual IfcProjectedOrTrueLengthEnum? ProjectedOrTrue { get; set; }
		public IfcStructuralPlanarAction() : base()
		{
		}
		public IfcStructuralPlanarAction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IfcStructuralReaction? CausedBy, IfcProjectedOrTrueLengthEnum? ProjectedOrTrue) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy)
		{
			this.ProjectedOrTrue = ProjectedOrTrue;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad,
				CausedBy,
				ProjectedOrTrue
			};
		}
		public virtual Global.IfcProjectedOrTrueLengthEnum? _ProjectedOrTrue { get { return ProjectedOrTrue; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralPlanarActionVarying
	/// SUBTYPE OF (IfcStructuralPlanarAction);
	/// VaryingAppliedLoadLocation : IfcShapeAspect;
	/// SubsequentAppliedLoads : LIST [2:?] OF IfcStructuralLoad;
	/// DERIVE
	/// VaryingAppliedLoads : LIST [3:?] OF IfcStructuralLoad := IfcAddToBeginOfList(SELF\IfcStructuralActivity.AppliedLoad, SubsequentAppliedLoads);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralPlanarActionVarying : IfcStructuralPlanarAction, Global.IfcStructuralPlanarActionVarying
	{
		public virtual IfcShapeAspect? VaryingAppliedLoadLocation { get; set; }
		public virtual List<IfcStructuralLoad>? SubsequentAppliedLoads { get; set; }
		//TODO DERIVE
		public virtual List<IfcStructuralLoad>? VaryingAppliedLoads {get {return null;}}
		public IfcStructuralPlanarActionVarying() : base()
		{
		}
		public IfcStructuralPlanarActionVarying(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IfcStructuralReaction? CausedBy, IfcProjectedOrTrueLengthEnum? ProjectedOrTrue, IfcShapeAspect? VaryingAppliedLoadLocation, List<IfcStructuralLoad>? SubsequentAppliedLoads) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy, ProjectedOrTrue)
		{
			this.VaryingAppliedLoadLocation = VaryingAppliedLoadLocation;
			this.SubsequentAppliedLoads = SubsequentAppliedLoads;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad,
				CausedBy,
				ProjectedOrTrue,
				VaryingAppliedLoadLocation,
				SubsequentAppliedLoads
			};
		}
		public virtual Global.IfcShapeAspect? _VaryingAppliedLoadLocation { get { return VaryingAppliedLoadLocation; } set { } }
		public virtual List<Global.IfcStructuralLoad>? _SubsequentAppliedLoads
		{
			get
			{
				if(SubsequentAppliedLoads != null)
				{
					List<Global.IfcStructuralLoad>? items = new List<Global.IfcStructuralLoad>();
					foreach (IfcStructuralLoad item in SubsequentAppliedLoads)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcStructuralLoad>? _VaryingAppliedLoads
		{
			get
			{
				if(VaryingAppliedLoads != null)
				{
					List<Global.IfcStructuralLoad>? items = new List<Global.IfcStructuralLoad>();
					foreach (IfcStructuralLoad item in VaryingAppliedLoads)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPointAction
	/// SUBTYPE OF (IfcStructuralAction);
	/// WHERE
	/// WR61 : SIZEOF(['IFC2X3.IFCSTRUCTURALLOADSINGLEFORCE',
	/// 'IFC2X3.IFCSTRUCTURALLOADSINGLEDISPLACEMENT']
	/// * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralPointAction : IfcStructuralAction, Global.IfcStructuralPointAction
	{
		public IfcStructuralPointAction() : base()
		{
		}
		public IfcStructuralPointAction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IfcStructuralReaction? CausedBy) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal,
				DestabilizingLoad,
				CausedBy
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPointConnection
	/// SUBTYPE OF (IfcStructuralConnection);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralPointConnection : IfcStructuralConnection, Global.IfcStructuralPointConnection
	{
		public IfcStructuralPointConnection() : base()
		{
		}
		public IfcStructuralPointConnection(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcBoundaryCondition? AppliedCondition) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedCondition
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPointReaction
	/// SUBTYPE OF (IfcStructuralReaction);
	/// WHERE
	/// WR61 : SIZEOF(['IFC2X3.IFCSTRUCTURALLOADSINGLEFORCE',
	/// 'IFC2X3.IFCSTRUCTURALLOADSINGLEDISPLACEMENT']
	/// * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralPointReaction : IfcStructuralReaction, Global.IfcStructuralPointReaction
	{
		public IfcStructuralPointReaction() : base()
		{
		}
		public IfcStructuralPointReaction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralProfileProperties
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralSteelProfileProperties))
	/// SUBTYPE OF (IfcGeneralProfileProperties);
	/// TorsionalConstantX : OPTIONAL IfcMomentOfInertiaMeasure;
	/// MomentOfInertiaYZ : OPTIONAL IfcMomentOfInertiaMeasure;
	/// MomentOfInertiaY : OPTIONAL IfcMomentOfInertiaMeasure;
	/// MomentOfInertiaZ : OPTIONAL IfcMomentOfInertiaMeasure;
	/// WarpingConstant : OPTIONAL IfcWarpingConstantMeasure;
	/// ShearCentreZ : OPTIONAL IfcLengthMeasure;
	/// ShearCentreY : OPTIONAL IfcLengthMeasure;
	/// ShearDeformationAreaZ : OPTIONAL IfcAreaMeasure;
	/// ShearDeformationAreaY : OPTIONAL IfcAreaMeasure;
	/// MaximumSectionModulusY : OPTIONAL IfcSectionModulusMeasure;
	/// MinimumSectionModulusY : OPTIONAL IfcSectionModulusMeasure;
	/// MaximumSectionModulusZ : OPTIONAL IfcSectionModulusMeasure;
	/// MinimumSectionModulusZ : OPTIONAL IfcSectionModulusMeasure;
	/// TorsionalSectionModulus : OPTIONAL IfcSectionModulusMeasure;
	/// CentreOfGravityInX : OPTIONAL IfcLengthMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcLengthMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(ShearDeformationAreaY)) OR (ShearDeformationAreaY >= 0.);
	/// WR22 : NOT(EXISTS(ShearDeformationAreaZ)) OR (ShearDeformationAreaZ >= 0.);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralProfileProperties : IfcGeneralProfileProperties, Global.IfcStructuralProfileProperties
	{
		public virtual IfcMomentOfInertiaMeasure? TorsionalConstantX { get; set; }
		public virtual IfcMomentOfInertiaMeasure? MomentOfInertiaYZ { get; set; }
		public virtual IfcMomentOfInertiaMeasure? MomentOfInertiaY { get; set; }
		public virtual IfcMomentOfInertiaMeasure? MomentOfInertiaZ { get; set; }
		public virtual IfcWarpingConstantMeasure? WarpingConstant { get; set; }
		public virtual IfcLengthMeasure? ShearCentreZ { get; set; }
		public virtual IfcLengthMeasure? ShearCentreY { get; set; }
		public virtual IfcAreaMeasure? ShearDeformationAreaZ { get; set; }
		public virtual IfcAreaMeasure? ShearDeformationAreaY { get; set; }
		public virtual IfcSectionModulusMeasure? MaximumSectionModulusY { get; set; }
		public virtual IfcSectionModulusMeasure? MinimumSectionModulusY { get; set; }
		public virtual IfcSectionModulusMeasure? MaximumSectionModulusZ { get; set; }
		public virtual IfcSectionModulusMeasure? MinimumSectionModulusZ { get; set; }
		public virtual IfcSectionModulusMeasure? TorsionalSectionModulus { get; set; }
		public virtual IfcLengthMeasure? CentreOfGravityInX { get; set; }
		public virtual IfcLengthMeasure? CentreOfGravityInY { get; set; }
		public IfcStructuralProfileProperties() : base()
		{
		}
		public IfcStructuralProfileProperties(IfcLabel? ProfileName, IfcProfileDef? ProfileDefinition, IfcMassPerLengthMeasure? PhysicalWeight, IfcPositiveLengthMeasure? Perimeter, IfcPositiveLengthMeasure? MinimumPlateThickness, IfcPositiveLengthMeasure? MaximumPlateThickness, IfcAreaMeasure? CrossSectionArea, IfcMomentOfInertiaMeasure? TorsionalConstantX, IfcMomentOfInertiaMeasure? MomentOfInertiaYZ, IfcMomentOfInertiaMeasure? MomentOfInertiaY, IfcMomentOfInertiaMeasure? MomentOfInertiaZ, IfcWarpingConstantMeasure? WarpingConstant, IfcLengthMeasure? ShearCentreZ, IfcLengthMeasure? ShearCentreY, IfcAreaMeasure? ShearDeformationAreaZ, IfcAreaMeasure? ShearDeformationAreaY, IfcSectionModulusMeasure? MaximumSectionModulusY, IfcSectionModulusMeasure? MinimumSectionModulusY, IfcSectionModulusMeasure? MaximumSectionModulusZ, IfcSectionModulusMeasure? MinimumSectionModulusZ, IfcSectionModulusMeasure? TorsionalSectionModulus, IfcLengthMeasure? CentreOfGravityInX, IfcLengthMeasure? CentreOfGravityInY) : base (ProfileName, ProfileDefinition, PhysicalWeight, Perimeter, MinimumPlateThickness, MaximumPlateThickness, CrossSectionArea)
		{
			this.TorsionalConstantX = TorsionalConstantX;
			this.MomentOfInertiaYZ = MomentOfInertiaYZ;
			this.MomentOfInertiaY = MomentOfInertiaY;
			this.MomentOfInertiaZ = MomentOfInertiaZ;
			this.WarpingConstant = WarpingConstant;
			this.ShearCentreZ = ShearCentreZ;
			this.ShearCentreY = ShearCentreY;
			this.ShearDeformationAreaZ = ShearDeformationAreaZ;
			this.ShearDeformationAreaY = ShearDeformationAreaY;
			this.MaximumSectionModulusY = MaximumSectionModulusY;
			this.MinimumSectionModulusY = MinimumSectionModulusY;
			this.MaximumSectionModulusZ = MaximumSectionModulusZ;
			this.MinimumSectionModulusZ = MinimumSectionModulusZ;
			this.TorsionalSectionModulus = TorsionalSectionModulus;
			this.CentreOfGravityInX = CentreOfGravityInX;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileName,
				ProfileDefinition,
				PhysicalWeight,
				Perimeter,
				MinimumPlateThickness,
				MaximumPlateThickness,
				CrossSectionArea,
				TorsionalConstantX,
				MomentOfInertiaYZ,
				MomentOfInertiaY,
				MomentOfInertiaZ,
				WarpingConstant,
				ShearCentreZ,
				ShearCentreY,
				ShearDeformationAreaZ,
				ShearDeformationAreaY,
				MaximumSectionModulusY,
				MinimumSectionModulusY,
				MaximumSectionModulusZ,
				MinimumSectionModulusZ,
				TorsionalSectionModulus,
				CentreOfGravityInX,
				CentreOfGravityInY
			};
		}
		public virtual Global.IfcMomentOfInertiaMeasure? _TorsionalConstantX { get { return TorsionalConstantX; } set { } }
		public virtual Global.IfcMomentOfInertiaMeasure? _MomentOfInertiaYZ { get { return MomentOfInertiaYZ; } set { } }
		public virtual Global.IfcMomentOfInertiaMeasure? _MomentOfInertiaY { get { return MomentOfInertiaY; } set { } }
		public virtual Global.IfcMomentOfInertiaMeasure? _MomentOfInertiaZ { get { return MomentOfInertiaZ; } set { } }
		public virtual Global.IfcWarpingConstantMeasure? _WarpingConstant { get { return WarpingConstant; } set { } }
		public virtual Global.IfcLengthMeasure? _ShearCentreZ { get { return ShearCentreZ; } set { } }
		public virtual Global.IfcLengthMeasure? _ShearCentreY { get { return ShearCentreY; } set { } }
		public virtual Global.IfcAreaMeasure? _ShearDeformationAreaZ { get { return ShearDeformationAreaZ; } set { } }
		public virtual Global.IfcAreaMeasure? _ShearDeformationAreaY { get { return ShearDeformationAreaY; } set { } }
		public virtual Global.IfcSectionModulusMeasure? _MaximumSectionModulusY { get { return MaximumSectionModulusY; } set { } }
		public virtual Global.IfcSectionModulusMeasure? _MinimumSectionModulusY { get { return MinimumSectionModulusY; } set { } }
		public virtual Global.IfcSectionModulusMeasure? _MaximumSectionModulusZ { get { return MaximumSectionModulusZ; } set { } }
		public virtual Global.IfcSectionModulusMeasure? _MinimumSectionModulusZ { get { return MinimumSectionModulusZ; } set { } }
		public virtual Global.IfcSectionModulusMeasure? _TorsionalSectionModulus { get { return TorsionalSectionModulus; } set { } }
		public virtual Global.IfcLengthMeasure? _CentreOfGravityInX { get { return CentreOfGravityInX; } set { } }
		public virtual Global.IfcLengthMeasure? _CentreOfGravityInY { get { return CentreOfGravityInY; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralReaction
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralPointReaction))
	/// SUBTYPE OF (IfcStructuralActivity);
	/// INVERSE
	/// Causes : SET [0:?] OF IfcStructuralAction FOR CausedBy;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStructuralReaction : IfcStructuralActivity, Global.IfcStructuralReaction
	{
		public List<IfcStructuralAction>? Causes => Model?.GetItems<IfcStructuralAction>().Where(x => x.CausedBy != null && x.CausedBy == this).ToList();
		public IfcStructuralReaction() : base()
		{
		}
		public IfcStructuralReaction(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralLoad? AppliedLoad, IfcGlobalOrLocalEnum? GlobalOrLocal) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedLoad,
				GlobalOrLocal
			};
		}
		public virtual List<Global.IfcStructuralAction>? _Causes
		{
			get
			{
				if(Causes != null)
				{
					List<Global.IfcStructuralAction>? items = new List<Global.IfcStructuralAction>();
					foreach (IfcStructuralAction item in Causes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralResultGroup
	/// SUBTYPE OF (IfcGroup);
	/// TheoryType : IfcAnalysisTheoryTypeEnum;
	/// ResultForLoadGroup : OPTIONAL IfcStructuralLoadGroup;
	/// IsLinear : BOOLEAN;
	/// INVERSE
	/// ResultGroupFor : SET [0:1] OF IfcStructuralAnalysisModel FOR HasResults;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralResultGroup : IfcGroup, Global.IfcStructuralResultGroup
	{
		public virtual IfcAnalysisTheoryTypeEnum? TheoryType { get; set; }
		public virtual IfcStructuralLoadGroup? ResultForLoadGroup { get; set; }
		public virtual BOOLEAN? IsLinear { get; set; }
		public List<IfcStructuralAnalysisModel>? ResultGroupFor => Model?.GetItems<IfcStructuralAnalysisModel>().Where(x => x.HasResults != null && x.HasResults.Contains(this)).ToList();
		public IfcStructuralResultGroup() : base()
		{
		}
		public IfcStructuralResultGroup(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcAnalysisTheoryTypeEnum? TheoryType, IfcStructuralLoadGroup? ResultForLoadGroup, BOOLEAN? IsLinear) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.TheoryType = TheoryType;
			this.ResultForLoadGroup = ResultForLoadGroup;
			this.IsLinear = IsLinear;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				TheoryType,
				ResultForLoadGroup,
				IsLinear
			};
		}
		public virtual Global.IfcAnalysisTheoryTypeEnum? _TheoryType { get { return TheoryType; } set { } }
		public virtual Global.IfcStructuralLoadGroup? _ResultForLoadGroup { get { return ResultForLoadGroup; } set { } }
		public virtual BOOLEAN? _IsLinear { get { return IsLinear; } set { } }
		public virtual List<Global.IfcStructuralAnalysisModel>? _ResultGroupFor
		{
			get
			{
				if(ResultGroupFor != null)
				{
					List<Global.IfcStructuralAnalysisModel>? items = new List<Global.IfcStructuralAnalysisModel>();
					foreach (IfcStructuralAnalysisModel item in ResultGroupFor)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralSteelProfileProperties
	/// SUBTYPE OF (IfcStructuralProfileProperties);
	/// ShearAreaZ : OPTIONAL IfcAreaMeasure;
	/// ShearAreaY : OPTIONAL IfcAreaMeasure;
	/// PlasticShapeFactorY : OPTIONAL IfcPositiveRatioMeasure;
	/// PlasticShapeFactorZ : OPTIONAL IfcPositiveRatioMeasure;
	/// WHERE
	/// WR31 : NOT(EXISTS(ShearAreaY)) OR (ShearAreaY >= 0.);
	/// WR32 : NOT(EXISTS(ShearAreaZ)) OR (ShearAreaZ >= 0.);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralSteelProfileProperties : IfcStructuralProfileProperties, Global.IfcStructuralSteelProfileProperties
	{
		public virtual IfcAreaMeasure? ShearAreaZ { get; set; }
		public virtual IfcAreaMeasure? ShearAreaY { get; set; }
		public virtual IfcPositiveRatioMeasure? PlasticShapeFactorY { get; set; }
		public virtual IfcPositiveRatioMeasure? PlasticShapeFactorZ { get; set; }
		public IfcStructuralSteelProfileProperties() : base()
		{
		}
		public IfcStructuralSteelProfileProperties(IfcLabel? ProfileName, IfcProfileDef? ProfileDefinition, IfcMassPerLengthMeasure? PhysicalWeight, IfcPositiveLengthMeasure? Perimeter, IfcPositiveLengthMeasure? MinimumPlateThickness, IfcPositiveLengthMeasure? MaximumPlateThickness, IfcAreaMeasure? CrossSectionArea, IfcMomentOfInertiaMeasure? TorsionalConstantX, IfcMomentOfInertiaMeasure? MomentOfInertiaYZ, IfcMomentOfInertiaMeasure? MomentOfInertiaY, IfcMomentOfInertiaMeasure? MomentOfInertiaZ, IfcWarpingConstantMeasure? WarpingConstant, IfcLengthMeasure? ShearCentreZ, IfcLengthMeasure? ShearCentreY, IfcAreaMeasure? ShearDeformationAreaZ, IfcAreaMeasure? ShearDeformationAreaY, IfcSectionModulusMeasure? MaximumSectionModulusY, IfcSectionModulusMeasure? MinimumSectionModulusY, IfcSectionModulusMeasure? MaximumSectionModulusZ, IfcSectionModulusMeasure? MinimumSectionModulusZ, IfcSectionModulusMeasure? TorsionalSectionModulus, IfcLengthMeasure? CentreOfGravityInX, IfcLengthMeasure? CentreOfGravityInY, IfcAreaMeasure? ShearAreaZ, IfcAreaMeasure? ShearAreaY, IfcPositiveRatioMeasure? PlasticShapeFactorY, IfcPositiveRatioMeasure? PlasticShapeFactorZ) : base (ProfileName, ProfileDefinition, PhysicalWeight, Perimeter, MinimumPlateThickness, MaximumPlateThickness, CrossSectionArea, TorsionalConstantX, MomentOfInertiaYZ, MomentOfInertiaY, MomentOfInertiaZ, WarpingConstant, ShearCentreZ, ShearCentreY, ShearDeformationAreaZ, ShearDeformationAreaY, MaximumSectionModulusY, MinimumSectionModulusY, MaximumSectionModulusZ, MinimumSectionModulusZ, TorsionalSectionModulus, CentreOfGravityInX, CentreOfGravityInY)
		{
			this.ShearAreaZ = ShearAreaZ;
			this.ShearAreaY = ShearAreaY;
			this.PlasticShapeFactorY = PlasticShapeFactorY;
			this.PlasticShapeFactorZ = PlasticShapeFactorZ;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileName,
				ProfileDefinition,
				PhysicalWeight,
				Perimeter,
				MinimumPlateThickness,
				MaximumPlateThickness,
				CrossSectionArea,
				TorsionalConstantX,
				MomentOfInertiaYZ,
				MomentOfInertiaY,
				MomentOfInertiaZ,
				WarpingConstant,
				ShearCentreZ,
				ShearCentreY,
				ShearDeformationAreaZ,
				ShearDeformationAreaY,
				MaximumSectionModulusY,
				MinimumSectionModulusY,
				MaximumSectionModulusZ,
				MinimumSectionModulusZ,
				TorsionalSectionModulus,
				CentreOfGravityInX,
				CentreOfGravityInY,
				ShearAreaZ,
				ShearAreaY,
				PlasticShapeFactorY,
				PlasticShapeFactorZ
			};
		}
		public virtual Global.IfcAreaMeasure? _ShearAreaZ { get { return ShearAreaZ; } set { } }
		public virtual Global.IfcAreaMeasure? _ShearAreaY { get { return ShearAreaY; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _PlasticShapeFactorY { get { return PlasticShapeFactorY; } set { } }
		public virtual Global.IfcPositiveRatioMeasure? _PlasticShapeFactorZ { get { return PlasticShapeFactorZ; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralSurfaceConnection
	/// SUBTYPE OF (IfcStructuralConnection);
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralSurfaceConnection : IfcStructuralConnection, Global.IfcStructuralSurfaceConnection
	{
		public IfcStructuralSurfaceConnection() : base()
		{
		}
		public IfcStructuralSurfaceConnection(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcBoundaryCondition? AppliedCondition) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				AppliedCondition
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralSurfaceMember
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralSurfaceMemberVarying))
	/// SUBTYPE OF (IfcStructuralMember);
	/// PredefinedType : IfcStructuralSurfaceTypeEnum;
	/// Thickness : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralSurfaceMember : IfcStructuralMember, Global.IfcStructuralSurfaceMember
	{
		public virtual IfcStructuralSurfaceTypeEnum? PredefinedType { get; set; }
		public virtual IfcPositiveLengthMeasure? Thickness { get; set; }
		public IfcStructuralSurfaceMember() : base()
		{
		}
		public IfcStructuralSurfaceMember(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralSurfaceTypeEnum? PredefinedType, IfcPositiveLengthMeasure? Thickness) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.PredefinedType = PredefinedType;
			this.Thickness = Thickness;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				PredefinedType,
				Thickness
			};
		}
		public virtual Global.IfcStructuralSurfaceTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Thickness { get { return Thickness; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStructuralSurfaceMemberVarying
	/// SUBTYPE OF (IfcStructuralSurfaceMember);
	/// SubsequentThickness : LIST [2:?] OF IfcPositiveLengthMeasure;
	/// VaryingThicknessLocation : IfcShapeAspect;
	/// DERIVE
	/// VaryingThickness : LIST [3:?] OF IfcPositiveLengthMeasure := IfcAddToBeginOfList(SELF\IfcStructuralSurfaceMember.Thickness, SubsequentThickness);
	/// WHERE
	/// WR61 : EXISTS(SELF\IfcStructuralSurfaceMember.Thickness);
	/// WR62 : SIZEOF(QUERY(temp <* SELF.VaryingThicknessLocation.ShapeRepresentations |
	/// NOT(SIZEOF(temp\IfcRepresentation.Items) = 1)
	/// )) = 0;
	/// WR63 : SIZEOF(QUERY(temp <* SELF.VaryingThicknessLocation.ShapeRepresentations |
	/// NOT(('IFC2X3.IFCCARTESIANPOINT' IN TYPEOF(temp\IfcRepresentation.Items[1]))
	/// OR
	/// ('IFC2X3.IFCPOINTONSURFACE' IN TYPEOF(temp\IfcRepresentation.Items[1])))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuralSurfaceMemberVarying : IfcStructuralSurfaceMember, Global.IfcStructuralSurfaceMemberVarying
	{
		public virtual List<IfcPositiveLengthMeasure>? SubsequentThickness { get; set; }
		public virtual IfcShapeAspect? VaryingThicknessLocation { get; set; }
		//TODO DERIVE
		public virtual List<IfcPositiveLengthMeasure>? VaryingThickness {get {return null;}}
		public IfcStructuralSurfaceMemberVarying() : base()
		{
		}
		public IfcStructuralSurfaceMemberVarying(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcStructuralSurfaceTypeEnum? PredefinedType, IfcPositiveLengthMeasure? Thickness, List<IfcPositiveLengthMeasure>? SubsequentThickness, IfcShapeAspect? VaryingThicknessLocation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, Thickness)
		{
			this.SubsequentThickness = SubsequentThickness;
			this.VaryingThicknessLocation = VaryingThicknessLocation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				PredefinedType,
				Thickness,
				SubsequentThickness,
				VaryingThicknessLocation
			};
		}
		public virtual List<Global.IfcPositiveLengthMeasure>? _SubsequentThickness
		{
			get
			{
				if(SubsequentThickness != null)
				{
					List<Global.IfcPositiveLengthMeasure>? items = new List<Global.IfcPositiveLengthMeasure>();
					foreach (IfcPositiveLengthMeasure item in SubsequentThickness)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcShapeAspect? _VaryingThicknessLocation { get { return VaryingThicknessLocation; } set { } }
		public virtual List<Global.IfcPositiveLengthMeasure>? _VaryingThickness
		{
			get
			{
				if(VaryingThickness != null)
				{
					List<Global.IfcPositiveLengthMeasure>? items = new List<Global.IfcPositiveLengthMeasure>();
					foreach (IfcPositiveLengthMeasure item in VaryingThickness)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuredDimensionCallout
	/// SUBTYPE OF (IfcDraughtingCallout);
	/// WHERE
	/// WR31 : SIZEOF(QUERY ( Ato <* QUERY ( Con <* SELF.contents | (
	/// 'IFC2X3.IFCANNOTATIONTEXTOCCURRENCE' IN
	/// TYPEOF(Con)) ) | (NOT (Ato.Name IN ['dimension value',
	/// 'tolerance value','unit text','prefix text','suffix text']))))
	/// = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcStructuredDimensionCallout : IfcDraughtingCallout, Global.IfcStructuredDimensionCallout
	{
		public IfcStructuredDimensionCallout() : base()
		{
		}
		public IfcStructuredDimensionCallout(List<IfcDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Contents
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStyleModel
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStyledRepresentation))
	/// SUBTYPE OF (IfcRepresentation);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcStyleModel : IfcRepresentation, Global.IfcStyleModel
	{
		public IfcStyleModel() : base()
		{
		}
		public IfcStyleModel(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStyledItem
	/// SUPERTYPE OF (ONEOF
	/// (IfcAnnotationOccurrence))
	/// SUBTYPE OF (IfcRepresentationItem);
	/// Item : OPTIONAL IfcRepresentationItem;
	/// Styles : SET [1:?] OF IfcPresentationStyleAssignment;
	/// Name : OPTIONAL IfcLabel;
	/// WHERE
	/// WR11 : SIZEOF(Styles) = 1;
	/// WR12 : NOT('IFC2X3.IFCSTYLEDITEM' IN TYPEOF(Item));
	/// END_ENTITY;
	/// <summary>
	public class IfcStyledItem : IfcRepresentationItem, Global.IfcStyledItem
	{
		public virtual IfcRepresentationItem? Item { get; set; }
		public virtual List<IfcPresentationStyleAssignment>? Styles { get; set; }
		public virtual IfcLabel? Name { get; set; }
		public IfcStyledItem() : base()
		{
		}
		public IfcStyledItem(IfcRepresentationItem? Item, List<IfcPresentationStyleAssignment>? Styles, IfcLabel? Name) : base ()
		{
			this.Item = Item;
			this.Styles = Styles;
			this.Name = Name;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name
			};
		}
		public virtual Global.IfcRepresentationItem? _Item { get { return Item; } set { } }
		public virtual List<Global.IfcPresentationStyleAssignment>? _Styles
		{
			get
			{
				if(Styles != null)
				{
					List<Global.IfcPresentationStyleAssignment>? items = new List<Global.IfcPresentationStyleAssignment>();
					foreach (IfcPresentationStyleAssignment item in Styles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
	}
	/// <summary>
	/// ENTITY IfcStyledRepresentation
	/// SUBTYPE OF (IfcStyleModel);
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* SELF\IfcRepresentation.Items |
	/// (NOT('IFC2X3.IFCSTYLEDITEM' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcStyledRepresentation : IfcStyleModel, Global.IfcStyledRepresentation
	{
		public IfcStyledRepresentation() : base()
		{
		}
		public IfcStyledRepresentation(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSubContractResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// SubContractor : OPTIONAL IfcActorSelect;
	/// JobDescription : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IfcSubContractResource : IfcConstructionResource, Global.IfcSubContractResource
	{
		public virtual IfcActorSelect? SubContractor { get; set; }
		public virtual IfcText? JobDescription { get; set; }
		public IfcSubContractResource() : base()
		{
		}
		public IfcSubContractResource(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? ResourceIdentifier, IfcLabel? ResourceGroup, IfcResourceConsumptionEnum? ResourceConsumption, IfcMeasureWithUnit? BaseQuantity, IfcActorSelect? SubContractor, IfcText? JobDescription) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
			this.SubContractor = SubContractor;
			this.JobDescription = JobDescription;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ResourceIdentifier,
				ResourceGroup,
				ResourceConsumption,
				BaseQuantity,
				SubContractor,
				JobDescription
			};
		}
		public virtual Global.IfcActorSelect? _SubContractor { get { return SubContractor; } set { } }
		public virtual Global.IfcText? _JobDescription { get { return JobDescription; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSubedge
	/// SUBTYPE OF (IfcEdge);
	/// ParentEdge : IfcEdge;
	/// END_ENTITY;
	/// <summary>
	public class IfcSubedge : IfcEdge, Global.IfcSubedge
	{
		public virtual IfcEdge? ParentEdge { get; set; }
		public IfcSubedge() : base()
		{
		}
		public IfcSubedge(IfcVertex? EdgeStart, IfcVertex? EdgeEnd, IfcEdge? ParentEdge) : base (EdgeStart, EdgeEnd)
		{
			this.ParentEdge = ParentEdge;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				EdgeStart,
				EdgeEnd,
				ParentEdge
			};
		}
		public virtual Global.IfcEdge? _ParentEdge { get { return ParentEdge; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSurface
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBoundedSurface
	/// ,IfcElementarySurface
	/// ,IfcSweptSurface))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSurface : IfcGeometricRepresentationItem, IfcGeometricSetSelect, IfcSurfaceOrFaceSurface, Global.IfcSurface
	{
		public virtual IfcDimensionCount? Dim { get; set;  }
		public IfcSurface() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSurfaceCurveSweptAreaSolid
	/// SUBTYPE OF (IfcSweptAreaSolid);
	/// Directrix : IfcCurve;
	/// StartParam : IfcParameterValue;
	/// EndParam : IfcParameterValue;
	/// ReferenceSurface : IfcSurface;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceCurveSweptAreaSolid : IfcSweptAreaSolid, Global.IfcSurfaceCurveSweptAreaSolid
	{
		public virtual IfcCurve? Directrix { get; set; }
		public virtual IfcParameterValue? StartParam { get; set; }
		public virtual IfcParameterValue? EndParam { get; set; }
		public virtual IfcSurface? ReferenceSurface { get; set; }
		public IfcSurfaceCurveSweptAreaSolid() : base()
		{
		}
		public IfcSurfaceCurveSweptAreaSolid(IfcProfileDef? SweptArea, IfcAxis2Placement3D? Position, IfcCurve? Directrix, IfcParameterValue? StartParam, IfcParameterValue? EndParam, IfcSurface? ReferenceSurface) : base (SweptArea, Position)
		{
			this.Directrix = Directrix;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
			this.ReferenceSurface = ReferenceSurface;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptArea,
				Position,
				Directrix,
				StartParam,
				EndParam,
				ReferenceSurface
			};
		}
		public virtual Global.IfcCurve? _Directrix { get { return Directrix; } set { } }
		public virtual Global.IfcParameterValue? _StartParam { get { return StartParam; } set { } }
		public virtual Global.IfcParameterValue? _EndParam { get { return EndParam; } set { } }
		public virtual Global.IfcSurface? _ReferenceSurface { get { return ReferenceSurface; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSurfaceOfLinearExtrusion
	/// SUBTYPE OF (IfcSweptSurface);
	/// ExtrudedDirection : IfcDirection;
	/// Depth : IfcLengthMeasure;
	/// DERIVE
	/// ExtrusionAxis : IfcVector := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector (ExtrudedDirection, Depth);
	/// WHERE
	/// WR41 : Depth > 0.;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceOfLinearExtrusion : IfcSweptSurface, Global.IfcSurfaceOfLinearExtrusion
	{
		public virtual IfcDirection? ExtrudedDirection { get; set; }
		public virtual IfcLengthMeasure? Depth { get; set; }
		//TODO DERIVE
		public virtual IfcVector? ExtrusionAxis {get {return null;}}
		public IfcSurfaceOfLinearExtrusion() : base()
		{
		}
		public IfcSurfaceOfLinearExtrusion(IfcProfileDef? SweptCurve, IfcAxis2Placement3D? Position, IfcDirection? ExtrudedDirection, IfcLengthMeasure? Depth) : base (SweptCurve, Position)
		{
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptCurve,
				Position,
				ExtrudedDirection,
				Depth
			};
		}
		public virtual Global.IfcDirection? _ExtrudedDirection { get { return ExtrudedDirection; } set { } }
		public virtual Global.IfcLengthMeasure? _Depth { get { return Depth; } set { } }
		public virtual Global.IfcVector? _ExtrusionAxis { get { return ExtrusionAxis; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSurfaceOfRevolution
	/// SUBTYPE OF (IfcSweptSurface);
	/// AxisPosition : IfcAxis1Placement;
	/// DERIVE
	/// AxisLine : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(AxisPosition.Location,
	/// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(AxisPosition.Z,1.0));
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceOfRevolution : IfcSweptSurface, Global.IfcSurfaceOfRevolution
	{
		public virtual IfcAxis1Placement? AxisPosition { get; set; }
		//TODO DERIVE
		public virtual IfcLine? AxisLine {get {return null;}}
		public IfcSurfaceOfRevolution() : base()
		{
		}
		public IfcSurfaceOfRevolution(IfcProfileDef? SweptCurve, IfcAxis2Placement3D? Position, IfcAxis1Placement? AxisPosition) : base (SweptCurve, Position)
		{
			this.AxisPosition = AxisPosition;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptCurve,
				Position,
				AxisPosition
			};
		}
		public virtual Global.IfcAxis1Placement? _AxisPosition { get { return AxisPosition; } set { } }
		public virtual Global.IfcLine? _AxisLine { get { return AxisLine; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// Side : IfcSurfaceSide;
	/// Styles : SET [1:5] OF IfcSurfaceStyleElementSelect;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC2X3.IFCSURFACESTYLESHADING' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR12 : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC2X3.IFCSURFACESTYLELIGHTING' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR13 : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC2X3.IFCSURFACESTYLEREFRACTION' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR14 : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC2X3.IFCSURFACESTYLEWITHTEXTURES' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR15 : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC2X3.IFCEXTERNALLYDEFINEDSURFACESTYLE' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyle : IfcPresentationStyle, IfcPresentationStyleSelect, Global.IfcSurfaceStyle
	{
		public virtual IfcSurfaceSide? Side { get; set; }
		public virtual List<IfcSurfaceStyleElementSelect>? Styles { get; set; }
		public IfcSurfaceStyle() : base()
		{
		}
		public IfcSurfaceStyle(IfcLabel? Name, IfcSurfaceSide? Side, List<IfcSurfaceStyleElementSelect>? Styles) : base (Name)
		{
			this.Side = Side;
			this.Styles = Styles;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Side,
				Styles
			};
		}
		public virtual Global.IfcSurfaceSide? _Side { get { return Side; } set { } }
		public virtual List<Global.IfcSurfaceStyleElementSelect>? _Styles
		{
			get
			{
				if(Styles != null)
				{
					List<Global.IfcSurfaceStyleElementSelect>? items = new List<Global.IfcSurfaceStyleElementSelect>();
					foreach (IfcSurfaceStyleElementSelect item in Styles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleLighting;
	/// DiffuseTransmissionColour : IfcColourRgb;
	/// DiffuseReflectionColour : IfcColourRgb;
	/// TransmissionColour : IfcColourRgb;
	/// ReflectanceColour : IfcColourRgb;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyleLighting : Ifc_Entity, IfcSurfaceStyleElementSelect, Global.IfcSurfaceStyleLighting
	{
		public virtual IfcColourRgb? DiffuseTransmissionColour { get; set; }
		public virtual IfcColourRgb? DiffuseReflectionColour { get; set; }
		public virtual IfcColourRgb? TransmissionColour { get; set; }
		public virtual IfcColourRgb? ReflectanceColour { get; set; }
		public IfcSurfaceStyleLighting() : base()
		{
		}
		public IfcSurfaceStyleLighting(IfcColourRgb? DiffuseTransmissionColour, IfcColourRgb? DiffuseReflectionColour, IfcColourRgb? TransmissionColour, IfcColourRgb? ReflectanceColour) : base ()
		{
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.DiffuseReflectionColour = DiffuseReflectionColour;
			this.TransmissionColour = TransmissionColour;
			this.ReflectanceColour = ReflectanceColour;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				DiffuseTransmissionColour,
				DiffuseReflectionColour,
				TransmissionColour,
				ReflectanceColour
			};
		}
		public virtual Global.IfcColourRgb? _DiffuseTransmissionColour { get { return DiffuseTransmissionColour; } set { } }
		public virtual Global.IfcColourRgb? _DiffuseReflectionColour { get { return DiffuseReflectionColour; } set { } }
		public virtual Global.IfcColourRgb? _TransmissionColour { get { return TransmissionColour; } set { } }
		public virtual Global.IfcColourRgb? _ReflectanceColour { get { return ReflectanceColour; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleRefraction;
	/// RefractionIndex : OPTIONAL IfcReal;
	/// DispersionFactor : OPTIONAL IfcReal;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyleRefraction : Ifc_Entity, IfcSurfaceStyleElementSelect, Global.IfcSurfaceStyleRefraction
	{
		public virtual IfcReal? RefractionIndex { get; set; }
		public virtual IfcReal? DispersionFactor { get; set; }
		public IfcSurfaceStyleRefraction() : base()
		{
		}
		public IfcSurfaceStyleRefraction(IfcReal? RefractionIndex, IfcReal? DispersionFactor) : base ()
		{
			this.RefractionIndex = RefractionIndex;
			this.DispersionFactor = DispersionFactor;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RefractionIndex,
				DispersionFactor
			};
		}
		public virtual Global.IfcReal? _RefractionIndex { get { return RefractionIndex; } set { } }
		public virtual Global.IfcReal? _DispersionFactor { get { return DispersionFactor; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleRendering
	/// SUBTYPE OF (IfcSurfaceStyleShading);
	/// Transparency : OPTIONAL IfcNormalisedRatioMeasure;
	/// DiffuseColour : OPTIONAL IfcColourOrFactor;
	/// TransmissionColour : OPTIONAL IfcColourOrFactor;
	/// DiffuseTransmissionColour : OPTIONAL IfcColourOrFactor;
	/// ReflectionColour : OPTIONAL IfcColourOrFactor;
	/// SpecularColour : OPTIONAL IfcColourOrFactor;
	/// SpecularHighlight : OPTIONAL IfcSpecularHighlightSelect;
	/// ReflectanceMethod : IfcReflectanceMethodEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyleRendering : IfcSurfaceStyleShading, Global.IfcSurfaceStyleRendering
	{
		public virtual IfcNormalisedRatioMeasure? Transparency { get; set; }
		public virtual IfcColourOrFactor? DiffuseColour { get; set; }
		public virtual IfcColourOrFactor? TransmissionColour { get; set; }
		public virtual IfcColourOrFactor? DiffuseTransmissionColour { get; set; }
		public virtual IfcColourOrFactor? ReflectionColour { get; set; }
		public virtual IfcColourOrFactor? SpecularColour { get; set; }
		public virtual IfcSpecularHighlightSelect? SpecularHighlight { get; set; }
		public virtual IfcReflectanceMethodEnum? ReflectanceMethod { get; set; }
		public IfcSurfaceStyleRendering() : base()
		{
		}
		public IfcSurfaceStyleRendering(IfcColourRgb? SurfaceColour, IfcNormalisedRatioMeasure? Transparency, IfcColourOrFactor? DiffuseColour, IfcColourOrFactor? TransmissionColour, IfcColourOrFactor? DiffuseTransmissionColour, IfcColourOrFactor? ReflectionColour, IfcColourOrFactor? SpecularColour, IfcSpecularHighlightSelect? SpecularHighlight, IfcReflectanceMethodEnum? ReflectanceMethod) : base (SurfaceColour)
		{
			this.Transparency = Transparency;
			this.DiffuseColour = DiffuseColour;
			this.TransmissionColour = TransmissionColour;
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.ReflectionColour = ReflectionColour;
			this.SpecularColour = SpecularColour;
			this.SpecularHighlight = SpecularHighlight;
			this.ReflectanceMethod = ReflectanceMethod;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SurfaceColour,
				Transparency,
				DiffuseColour,
				TransmissionColour,
				DiffuseTransmissionColour,
				ReflectionColour,
				SpecularColour,
				SpecularHighlight,
				ReflectanceMethod
			};
		}
		public virtual Global.IfcNormalisedRatioMeasure? _Transparency { get { return Transparency; } set { } }
		public virtual Global.IfcColourOrFactor? _DiffuseColour { get { return DiffuseColour; } set { } }
		public virtual Global.IfcColourOrFactor? _TransmissionColour { get { return TransmissionColour; } set { } }
		public virtual Global.IfcColourOrFactor? _DiffuseTransmissionColour { get { return DiffuseTransmissionColour; } set { } }
		public virtual Global.IfcColourOrFactor? _ReflectionColour { get { return ReflectionColour; } set { } }
		public virtual Global.IfcColourOrFactor? _SpecularColour { get { return SpecularColour; } set { } }
		public virtual Global.IfcSpecularHighlightSelect? _SpecularHighlight { get { return SpecularHighlight; } set { } }
		public virtual Global.IfcReflectanceMethodEnum? _ReflectanceMethod { get { return ReflectanceMethod; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleShading
	/// SUPERTYPE OF (ONEOF
	/// (IfcSurfaceStyleRendering));
	/// SurfaceColour : IfcColourRgb;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyleShading : Ifc_Entity, IfcSurfaceStyleElementSelect, Global.IfcSurfaceStyleShading
	{
		public virtual IfcColourRgb? SurfaceColour { get; set; }
		public IfcSurfaceStyleShading() : base()
		{
		}
		public IfcSurfaceStyleShading(IfcColourRgb? SurfaceColour) : base ()
		{
			this.SurfaceColour = SurfaceColour;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SurfaceColour
			};
		}
		public virtual Global.IfcColourRgb? _SurfaceColour { get { return SurfaceColour; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleWithTextures;
	/// Textures : LIST [1:?] OF IfcSurfaceTexture;
	/// END_ENTITY;
	/// <summary>
	public class IfcSurfaceStyleWithTextures : Ifc_Entity, IfcSurfaceStyleElementSelect, Global.IfcSurfaceStyleWithTextures
	{
		public virtual List<IfcSurfaceTexture>? Textures { get; set; }
		public IfcSurfaceStyleWithTextures() : base()
		{
		}
		public IfcSurfaceStyleWithTextures(List<IfcSurfaceTexture>? Textures) : base ()
		{
			this.Textures = Textures;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Textures
			};
		}
		public virtual List<Global.IfcSurfaceTexture>? _Textures
		{
			get
			{
				if(Textures != null)
				{
					List<Global.IfcSurfaceTexture>? items = new List<Global.IfcSurfaceTexture>();
					foreach (IfcSurfaceTexture item in Textures)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceTexture
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBlobTexture
	/// ,IfcImageTexture
	/// ,IfcPixelTexture));
	/// RepeatS : BOOLEAN;
	/// RepeatT : BOOLEAN;
	/// TextureType : IfcSurfaceTextureEnum;
	/// TextureTransform : OPTIONAL IfcCartesianTransformationOperator2D;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSurfaceTexture : Ifc_Entity, Global.IfcSurfaceTexture
	{
		public virtual BOOLEAN? RepeatS { get; set; }
		public virtual BOOLEAN? RepeatT { get; set; }
		public virtual IfcSurfaceTextureEnum? TextureType { get; set; }
		public virtual IfcCartesianTransformationOperator2D? TextureTransform { get; set; }
		public IfcSurfaceTexture() : base()
		{
		}
		public IfcSurfaceTexture(BOOLEAN? RepeatS, BOOLEAN? RepeatT, IfcSurfaceTextureEnum? TextureType, IfcCartesianTransformationOperator2D? TextureTransform) : base ()
		{
			this.RepeatS = RepeatS;
			this.RepeatT = RepeatT;
			this.TextureType = TextureType;
			this.TextureTransform = TextureTransform;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RepeatS,
				RepeatT,
				TextureType,
				TextureTransform
			};
		}
		public virtual BOOLEAN? _RepeatS { get { return RepeatS; } set { } }
		public virtual BOOLEAN? _RepeatT { get { return RepeatT; } set { } }
		public virtual Global.IfcSurfaceTextureEnum? _TextureType { get { return TextureType; } set { } }
		public virtual Global.IfcCartesianTransformationOperator2D? _TextureTransform { get { return TextureTransform; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSweptAreaSolid
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcExtrudedAreaSolid
	/// ,IfcRevolvedAreaSolid
	/// ,IfcSurfaceCurveSweptAreaSolid))
	/// SUBTYPE OF (IfcSolidModel);
	/// SweptArea : IfcProfileDef;
	/// Position : IfcAxis2Placement3D;
	/// WHERE
	/// WR22 : SweptArea.ProfileType = IfcProfileTypeEnum.Area;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSweptAreaSolid : IfcSolidModel, Global.IfcSweptAreaSolid
	{
		public virtual IfcProfileDef? SweptArea { get; set; }
		public virtual IfcAxis2Placement3D? Position { get; set; }
		public IfcSweptAreaSolid() : base()
		{
		}
		public IfcSweptAreaSolid(IfcProfileDef? SweptArea, IfcAxis2Placement3D? Position) : base ()
		{
			this.SweptArea = SweptArea;
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptArea,
				Position
			};
		}
		public virtual Global.IfcProfileDef? _SweptArea { get { return SweptArea; } set { } }
		public virtual Global.IfcAxis2Placement3D? _Position { get { return Position; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSweptDiskSolid
	/// SUBTYPE OF (IfcSolidModel);
	/// Directrix : IfcCurve;
	/// Radius : IfcPositiveLengthMeasure;
	/// InnerRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// StartParam : IfcParameterValue;
	/// EndParam : IfcParameterValue;
	/// WHERE
	/// WR1 : Directrix.Dim = 3;
	/// WR2 : (NOT EXISTS(InnerRadius)) OR (Radius > InnerRadius);
	/// END_ENTITY;
	/// <summary>
	public class IfcSweptDiskSolid : IfcSolidModel, Global.IfcSweptDiskSolid
	{
		public virtual IfcCurve? Directrix { get; set; }
		public virtual IfcPositiveLengthMeasure? Radius { get; set; }
		public virtual IfcPositiveLengthMeasure? InnerRadius { get; set; }
		public virtual IfcParameterValue? StartParam { get; set; }
		public virtual IfcParameterValue? EndParam { get; set; }
		public IfcSweptDiskSolid() : base()
		{
		}
		public IfcSweptDiskSolid(IfcCurve? Directrix, IfcPositiveLengthMeasure? Radius, IfcPositiveLengthMeasure? InnerRadius, IfcParameterValue? StartParam, IfcParameterValue? EndParam) : base ()
		{
			this.Directrix = Directrix;
			this.Radius = Radius;
			this.InnerRadius = InnerRadius;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Directrix,
				Radius,
				InnerRadius,
				StartParam,
				EndParam
			};
		}
		public virtual Global.IfcCurve? _Directrix { get { return Directrix; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _Radius { get { return Radius; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _InnerRadius { get { return InnerRadius; } set { } }
		public virtual Global.IfcParameterValue? _StartParam { get { return StartParam; } set { } }
		public virtual Global.IfcParameterValue? _EndParam { get { return EndParam; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSweptSurface
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcSurfaceOfLinearExtrusion
	/// ,IfcSurfaceOfRevolution))
	/// SUBTYPE OF (IfcSurface);
	/// SweptCurve : IfcProfileDef;
	/// Position : IfcAxis2Placement3D;
	/// DERIVE
	/// Dim : IfcDimensionCount := Position.Dim;
	/// WHERE
	/// WR1 : NOT('IFC2X3.IFCDERIVEDPROFILEDEF' IN TYPEOF(SweptCurve));
	/// WR2 : SweptCurve.ProfileType = IfcProfileTypeEnum.Curve;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcSweptSurface : IfcSurface, Global.IfcSweptSurface
	{
		public virtual IfcProfileDef? SweptCurve { get; set; }
		public virtual IfcAxis2Placement3D? Position { get; set; }
		//TODO DERIVE
		public override IfcDimensionCount? Dim {get {return null;}}
		public IfcSweptSurface() : base()
		{
		}
		public IfcSweptSurface(IfcProfileDef? SweptCurve, IfcAxis2Placement3D? Position) : base ()
		{
			this.SweptCurve = SweptCurve;
			this.Position = Position;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				SweptCurve,
				Position
			};
		}
		public virtual Global.IfcProfileDef? _SweptCurve { get { return SweptCurve; } set { } }
		public virtual Global.IfcAxis2Placement3D? _Position { get { return Position; } set { } }
		public override Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSwitchingDeviceType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcSwitchingDeviceTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcSwitchingDeviceType : IfcFlowControllerType, Global.IfcSwitchingDeviceType
	{
		public virtual IfcSwitchingDeviceTypeEnum? PredefinedType { get; set; }
		public IfcSwitchingDeviceType() : base()
		{
		}
		public IfcSwitchingDeviceType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcSwitchingDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcSwitchingDeviceTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSymbolStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// StyleOfSymbol : IfcSymbolStyleSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcSymbolStyle : IfcPresentationStyle, IfcPresentationStyleSelect, Global.IfcSymbolStyle
	{
		public virtual IfcSymbolStyleSelect? StyleOfSymbol { get; set; }
		public IfcSymbolStyle() : base()
		{
		}
		public IfcSymbolStyle(IfcLabel? Name, IfcSymbolStyleSelect? StyleOfSymbol) : base (Name)
		{
			this.StyleOfSymbol = StyleOfSymbol;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				StyleOfSymbol
			};
		}
		public virtual Global.IfcSymbolStyleSelect? _StyleOfSymbol { get { return StyleOfSymbol; } set { } }
	}
	/// <summary>
	/// ENTITY IfcSystem
	/// SUPERTYPE OF (ONEOF
	/// (IfcElectricalCircuit
	/// ,IfcStructuralAnalysisModel))
	/// SUBTYPE OF (IfcGroup);
	/// INVERSE
	/// ServicesBuildings : SET [0:1] OF IfcRelServicesBuildings FOR RelatingSystem;
	/// END_ENTITY;
	/// <summary>
	public class IfcSystem : IfcGroup, Global.IfcSystem
	{
		public List<IfcRelServicesBuildings>? ServicesBuildings => Model?.GetItems<IfcRelServicesBuildings>().Where(x => x.RelatingSystem != null && x.RelatingSystem == this).ToList();
		public IfcSystem() : base()
		{
		}
		public IfcSystem(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
		public virtual List<Global.IfcRelServicesBuildings>? _ServicesBuildings
		{
			get
			{
				if(ServicesBuildings != null)
				{
					List<Global.IfcRelServicesBuildings>? items = new List<Global.IfcRelServicesBuildings>();
					foreach (IfcRelServicesBuildings item in ServicesBuildings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSystemFurnitureElementType
	/// SUBTYPE OF (IfcFurnishingElementType);
	/// END_ENTITY;
	/// <summary>
	public class IfcSystemFurnitureElementType : IfcFurnishingElementType, Global.IfcSystemFurnitureElementType
	{
		public IfcSystemFurnitureElementType() : base()
		{
		}
		public IfcSystemFurnitureElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcTShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// FlangeWidth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// FlangeEdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WebEdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WebSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// FlangeSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR1 : FlangeThickness < Depth;
	/// WR2 : WebThickness < FlangeWidth;
	/// END_ENTITY;
	/// <summary>
	public class IfcTShapeProfileDef : IfcParameterizedProfileDef, Global.IfcTShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FilletRadius { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeEdgeRadius { get; set; }
		public virtual IfcPositiveLengthMeasure? WebEdgeRadius { get; set; }
		public virtual IfcPlaneAngleMeasure? WebSlope { get; set; }
		public virtual IfcPlaneAngleMeasure? FlangeSlope { get; set; }
		public virtual IfcPositiveLengthMeasure? CentreOfGravityInY { get; set; }
		public IfcTShapeProfileDef() : base()
		{
		}
		public IfcTShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Depth, IfcPositiveLengthMeasure? FlangeWidth, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? FlangeThickness, IfcPositiveLengthMeasure? FilletRadius, IfcPositiveLengthMeasure? FlangeEdgeRadius, IfcPositiveLengthMeasure? WebEdgeRadius, IfcPlaneAngleMeasure? WebSlope, IfcPlaneAngleMeasure? FlangeSlope, IfcPositiveLengthMeasure? CentreOfGravityInY) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.FlangeEdgeRadius = FlangeEdgeRadius;
			this.WebEdgeRadius = WebEdgeRadius;
			this.WebSlope = WebSlope;
			this.FlangeSlope = FlangeSlope;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Depth,
				FlangeWidth,
				WebThickness,
				FlangeThickness,
				FilletRadius,
				FlangeEdgeRadius,
				WebEdgeRadius,
				WebSlope,
				FlangeSlope,
				CentreOfGravityInY
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Depth { get { return Depth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FlangeWidth { get { return FlangeWidth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _WebThickness { get { return WebThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FlangeThickness { get { return FlangeThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FilletRadius { get { return FilletRadius; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FlangeEdgeRadius { get { return FlangeEdgeRadius; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _WebEdgeRadius { get { return WebEdgeRadius; } set { } }
		public virtual Global.IfcPlaneAngleMeasure? _WebSlope { get { return WebSlope; } set { } }
		public virtual Global.IfcPlaneAngleMeasure? _FlangeSlope { get { return FlangeSlope; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _CentreOfGravityInY { get { return CentreOfGravityInY; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTable;
	/// Name : STRING;
	/// Rows : LIST [1:?] OF IfcTableRow;
	/// DERIVE
	/// NumberOfCellsInRow : INTEGER := HIINDEX(Rows[1].RowCells);
	/// NumberOfHeadings : INTEGER := SIZEOF(QUERY( Temp <* Rows | Temp.IsHeading));
	/// NumberOfDataRows : INTEGER := SIZEOF(QUERY( Temp <* Rows | NOT(Temp.IsHeading)));
	/// WHERE
	/// WR1 : SIZEOF(QUERY( Temp <* Rows | HIINDEX(Temp.RowCells) <> HIINDEX(Rows[1].RowCells))) = 0;
	/// WR2 : SIZEOF(QUERY( Temp <* Rows | HIINDEX(Temp.RowCells) <> HIINDEX(Rows[1].RowCells))) = 0;
	/// WR3 : { 0 <= NumberOfHeadings <= 1 };
	/// END_ENTITY;
	/// <summary>
	public class IfcTable : Ifc_Entity, IfcMetricValueSelect, Global.IfcTable
	{
		public virtual STRING? Name { get; set; }
		public virtual List<IfcTableRow>? Rows { get; set; }
		//TODO DERIVE
		public virtual INTEGER? NumberOfCellsInRow {get {return null;}}
		//TODO DERIVE
		public virtual INTEGER? NumberOfHeadings {get {return null;}}
		//TODO DERIVE
		public virtual INTEGER? NumberOfDataRows {get {return null;}}
		public IfcTable() : base()
		{
		}
		public IfcTable(STRING? Name, List<IfcTableRow>? Rows) : base ()
		{
			this.Name = Name;
			this.Rows = Rows;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Rows
			};
		}
		public virtual STRING? _Name { get { return Name; } set { } }
		public virtual List<Global.IfcTableRow>? _Rows
		{
			get
			{
				if(Rows != null)
				{
					List<Global.IfcTableRow>? items = new List<Global.IfcTableRow>();
					foreach (IfcTableRow item in Rows)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual INTEGER? _NumberOfCellsInRow { get { return NumberOfCellsInRow; } set { } }
		public virtual INTEGER? _NumberOfHeadings { get { return NumberOfHeadings; } set { } }
		public virtual INTEGER? _NumberOfDataRows { get { return NumberOfDataRows; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTableRow;
	/// RowCells : LIST [1:?] OF IfcValue;
	/// IsHeading : BOOLEAN;
	/// INVERSE
	/// OfTable : IfcTable FOR Rows;
	/// END_ENTITY;
	/// <summary>
	public class IfcTableRow : Ifc_Entity, Global.IfcTableRow
	{
		public virtual List<IfcValue>? RowCells { get; set; }
		public virtual BOOLEAN? IsHeading { get; set; }
		public IfcTable? OfTable => Model?.GetItems<IfcTable>().FirstOrDefault(x => x.Rows != null && x.Rows.Contains(this));
		public IfcTableRow() : base()
		{
		}
		public IfcTableRow(List<IfcValue>? RowCells, BOOLEAN? IsHeading) : base ()
		{
			this.RowCells = RowCells;
			this.IsHeading = IsHeading;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RowCells,
				IsHeading
			};
		}
		public virtual List<Global.IfcValue>? _RowCells
		{
			get
			{
				if(RowCells != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in RowCells)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual BOOLEAN? _IsHeading { get { return IsHeading; } set { } }
		public virtual Global.IfcTable? _OfTable { get { return OfTable; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTankType
	/// SUBTYPE OF (IfcFlowStorageDeviceType);
	/// PredefinedType : IfcTankTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcTankTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTankTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTankType : IfcFlowStorageDeviceType, Global.IfcTankType
	{
		public virtual IfcTankTypeEnum? PredefinedType { get; set; }
		public IfcTankType() : base()
		{
		}
		public IfcTankType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcTankTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcTankTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTask
	/// SUPERTYPE OF (ONEOF
	/// (IfcMove
	/// ,IfcOrderAction))
	/// SUBTYPE OF (IfcProcess);
	/// TaskId : IfcIdentifier;
	/// Status : OPTIONAL IfcLabel;
	/// WorkMethod : OPTIONAL IfcLabel;
	/// IsMilestone : BOOLEAN;
	/// Priority : OPTIONAL INTEGER;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(temp <* SELF\IfcObjectDefinition.Decomposes | NOT('IFC2X3.IFCRELNESTS' IN TYPEOF(temp)))) = 0;
	/// WR2 : SIZEOF(QUERY(temp <* SELF\IfcObjectDefinition.IsDecomposedBy | NOT('IFC2X3.IFCRELNESTS' IN TYPEOF(temp)))) = 0;
	/// WR3 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IfcTask : IfcProcess, Global.IfcTask
	{
		public virtual IfcIdentifier? TaskId { get; set; }
		public virtual IfcLabel? Status { get; set; }
		public virtual IfcLabel? WorkMethod { get; set; }
		public virtual BOOLEAN? IsMilestone { get; set; }
		public virtual INTEGER? Priority { get; set; }
		public IfcTask() : base()
		{
		}
		public IfcTask(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? TaskId, IfcLabel? Status, IfcLabel? WorkMethod, BOOLEAN? IsMilestone, INTEGER? Priority) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.TaskId = TaskId;
			this.Status = Status;
			this.WorkMethod = WorkMethod;
			this.IsMilestone = IsMilestone;
			this.Priority = Priority;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				TaskId,
				Status,
				WorkMethod,
				IsMilestone,
				Priority
			};
		}
		public virtual Global.IfcIdentifier? _TaskId { get { return TaskId; } set { } }
		public virtual Global.IfcLabel? _Status { get { return Status; } set { } }
		public virtual Global.IfcLabel? _WorkMethod { get { return WorkMethod; } set { } }
		public virtual BOOLEAN? _IsMilestone { get { return IsMilestone; } set { } }
		public virtual INTEGER? _Priority { get { return Priority; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTelecomAddress
	/// SUBTYPE OF (IfcAddress);
	/// TelephoneNumbers : OPTIONAL LIST [1:?] OF IfcLabel;
	/// FacsimileNumbers : OPTIONAL LIST [1:?] OF IfcLabel;
	/// PagerNumber : OPTIONAL IfcLabel;
	/// ElectronicMailAddresses : OPTIONAL LIST [1:?] OF IfcLabel;
	/// WWWHomePageURL : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS (TelephoneNumbers) OR
	/// EXISTS (PagerNumber) OR
	/// EXISTS (FacsimileNumbers) OR
	/// EXISTS (ElectronicMailAddresses) OR
	/// EXISTS (WWWHomePageURL);
	/// END_ENTITY;
	/// <summary>
	public class IfcTelecomAddress : IfcAddress, Global.IfcTelecomAddress
	{
		public virtual List<IfcLabel>? TelephoneNumbers { get; set; }
		public virtual List<IfcLabel>? FacsimileNumbers { get; set; }
		public virtual IfcLabel? PagerNumber { get; set; }
		public virtual List<IfcLabel>? ElectronicMailAddresses { get; set; }
		public virtual IfcLabel? WWWHomePageURL { get; set; }
		public IfcTelecomAddress() : base()
		{
		}
		public IfcTelecomAddress(IfcAddressTypeEnum? Purpose, IfcText? Description, IfcLabel? UserDefinedPurpose, List<IfcLabel>? TelephoneNumbers, List<IfcLabel>? FacsimileNumbers, IfcLabel? PagerNumber, List<IfcLabel>? ElectronicMailAddresses, IfcLabel? WWWHomePageURL) : base (Purpose, Description, UserDefinedPurpose)
		{
			this.TelephoneNumbers = TelephoneNumbers;
			this.FacsimileNumbers = FacsimileNumbers;
			this.PagerNumber = PagerNumber;
			this.ElectronicMailAddresses = ElectronicMailAddresses;
			this.WWWHomePageURL = WWWHomePageURL;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Purpose,
				Description,
				UserDefinedPurpose,
				TelephoneNumbers,
				FacsimileNumbers,
				PagerNumber,
				ElectronicMailAddresses,
				WWWHomePageURL
			};
		}
		public virtual List<Global.IfcLabel>? _TelephoneNumbers
		{
			get
			{
				if(TelephoneNumbers != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in TelephoneNumbers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcLabel>? _FacsimileNumbers
		{
			get
			{
				if(FacsimileNumbers != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in FacsimileNumbers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _PagerNumber { get { return PagerNumber; } set { } }
		public virtual List<Global.IfcLabel>? _ElectronicMailAddresses
		{
			get
			{
				if(ElectronicMailAddresses != null)
				{
					List<Global.IfcLabel>? items = new List<Global.IfcLabel>();
					foreach (IfcLabel item in ElectronicMailAddresses)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _WWWHomePageURL { get { return WWWHomePageURL; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTendon
	/// SUBTYPE OF (IfcReinforcingElement);
	/// PredefinedType : IfcTendonTypeEnum;
	/// NominalDiameter : IfcPositiveLengthMeasure;
	/// CrossSectionArea : IfcAreaMeasure;
	/// TensionForce : OPTIONAL IfcForceMeasure;
	/// PreStress : OPTIONAL IfcPressureMeasure;
	/// FrictionCoefficient : OPTIONAL IfcNormalisedRatioMeasure;
	/// AnchorageSlip : OPTIONAL IfcPositiveLengthMeasure;
	/// MinCurvatureRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcTendonTypeEnum.USERDEFINED) OR ((PredefinedType = IfcTendonTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTendon : IfcReinforcingElement, Global.IfcTendon
	{
		public virtual IfcTendonTypeEnum? PredefinedType { get; set; }
		public virtual IfcPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IfcAreaMeasure? CrossSectionArea { get; set; }
		public virtual IfcForceMeasure? TensionForce { get; set; }
		public virtual IfcPressureMeasure? PreStress { get; set; }
		public virtual IfcNormalisedRatioMeasure? FrictionCoefficient { get; set; }
		public virtual IfcPositiveLengthMeasure? AnchorageSlip { get; set; }
		public virtual IfcPositiveLengthMeasure? MinCurvatureRadius { get; set; }
		public IfcTendon() : base()
		{
		}
		public IfcTendon(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLabel? SteelGrade, IfcTendonTypeEnum? PredefinedType, IfcPositiveLengthMeasure? NominalDiameter, IfcAreaMeasure? CrossSectionArea, IfcForceMeasure? TensionForce, IfcPressureMeasure? PreStress, IfcNormalisedRatioMeasure? FrictionCoefficient, IfcPositiveLengthMeasure? AnchorageSlip, IfcPositiveLengthMeasure? MinCurvatureRadius) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.TensionForce = TensionForce;
			this.PreStress = PreStress;
			this.FrictionCoefficient = FrictionCoefficient;
			this.AnchorageSlip = AnchorageSlip;
			this.MinCurvatureRadius = MinCurvatureRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				SteelGrade,
				PredefinedType,
				NominalDiameter,
				CrossSectionArea,
				TensionForce,
				PreStress,
				FrictionCoefficient,
				AnchorageSlip,
				MinCurvatureRadius
			};
		}
		public virtual Global.IfcTendonTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _NominalDiameter { get { return NominalDiameter; } set { } }
		public virtual Global.IfcAreaMeasure? _CrossSectionArea { get { return CrossSectionArea; } set { } }
		public virtual Global.IfcForceMeasure? _TensionForce { get { return TensionForce; } set { } }
		public virtual Global.IfcPressureMeasure? _PreStress { get { return PreStress; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _FrictionCoefficient { get { return FrictionCoefficient; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _AnchorageSlip { get { return AnchorageSlip; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _MinCurvatureRadius { get { return MinCurvatureRadius; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTendonAnchor
	/// SUBTYPE OF (IfcReinforcingElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcTendonAnchor : IfcReinforcingElement, Global.IfcTendonAnchor
	{
		public IfcTendonAnchor() : base()
		{
		}
		public IfcTendonAnchor(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcLabel? SteelGrade) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				SteelGrade
			};
		}
	}
	/// <summary>
	/// ENTITY IfcTerminatorSymbol
	/// SUPERTYPE OF (ONEOF
	/// (IfcDimensionCurveTerminator))
	/// SUBTYPE OF (IfcAnnotationSymbolOccurrence);
	/// AnnotatedCurve : IfcAnnotationCurveOccurrence;
	/// END_ENTITY;
	/// <summary>
	public class IfcTerminatorSymbol : IfcAnnotationSymbolOccurrence, Global.IfcTerminatorSymbol
	{
		public virtual IfcAnnotationCurveOccurrence? AnnotatedCurve { get; set; }
		public IfcTerminatorSymbol() : base()
		{
		}
		public IfcTerminatorSymbol(IfcRepresentationItem? Item, List<IfcPresentationStyleAssignment>? Styles, IfcLabel? Name, IfcAnnotationCurveOccurrence? AnnotatedCurve) : base (Item, Styles, Name)
		{
			this.AnnotatedCurve = AnnotatedCurve;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Item,
				Styles,
				Name,
				AnnotatedCurve
			};
		}
		public virtual Global.IfcAnnotationCurveOccurrence? _AnnotatedCurve { get { return AnnotatedCurve; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTextLiteral
	/// SUPERTYPE OF (ONEOF
	/// (IfcTextLiteralWithExtent))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Literal : IfcPresentableText;
	/// Placement : IfcAxis2Placement;
	/// Path : IfcTextPath;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextLiteral : IfcGeometricRepresentationItem, Global.IfcTextLiteral
	{
		public virtual IfcPresentableText? Literal { get; set; }
		public virtual IfcAxis2Placement? Placement { get; set; }
		public virtual IfcTextPath? Path { get; set; }
		public IfcTextLiteral() : base()
		{
		}
		public IfcTextLiteral(IfcPresentableText? Literal, IfcAxis2Placement? Placement, IfcTextPath? Path) : base ()
		{
			this.Literal = Literal;
			this.Placement = Placement;
			this.Path = Path;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Literal,
				Placement,
				Path
			};
		}
		public virtual Global.IfcPresentableText? _Literal { get { return Literal; } set { } }
		public virtual Global.IfcAxis2Placement? _Placement { get { return Placement; } set { } }
		public virtual Global.IfcTextPath? _Path { get { return Path; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTextLiteralWithExtent
	/// SUBTYPE OF (IfcTextLiteral);
	/// Extent : IfcPlanarExtent;
	/// BoxAlignment : IfcBoxAlignment;
	/// WHERE
	/// WR31 : NOT('IFC2X3.IFCPLANARBOX' IN TYPEOF(Extent));
	/// END_ENTITY;
	/// <summary>
	public class IfcTextLiteralWithExtent : IfcTextLiteral, Global.IfcTextLiteralWithExtent
	{
		public virtual IfcPlanarExtent? Extent { get; set; }
		public virtual IfcBoxAlignment? BoxAlignment { get; set; }
		public IfcTextLiteralWithExtent() : base()
		{
		}
		public IfcTextLiteralWithExtent(IfcPresentableText? Literal, IfcAxis2Placement? Placement, IfcTextPath? Path, IfcPlanarExtent? Extent, IfcBoxAlignment? BoxAlignment) : base (Literal, Placement, Path)
		{
			this.Extent = Extent;
			this.BoxAlignment = BoxAlignment;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Literal,
				Placement,
				Path,
				Extent,
				BoxAlignment
			};
		}
		public virtual Global.IfcPlanarExtent? _Extent { get { return Extent; } set { } }
		public virtual Global.IfcBoxAlignment? _BoxAlignment { get { return BoxAlignment; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTextStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// TextCharacterAppearance : OPTIONAL IfcCharacterStyleSelect;
	/// TextStyle : OPTIONAL IfcTextStyleSelect;
	/// TextFontStyle : IfcTextFontSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextStyle : IfcPresentationStyle, IfcPresentationStyleSelect, Global.IfcTextStyle
	{
		public virtual IfcCharacterStyleSelect? TextCharacterAppearance { get; set; }
		public virtual IfcTextStyleSelect? TextStyle { get; set; }
		public virtual IfcTextFontSelect? TextFontStyle { get; set; }
		public IfcTextStyle() : base()
		{
		}
		public IfcTextStyle(IfcLabel? Name, IfcCharacterStyleSelect? TextCharacterAppearance, IfcTextStyleSelect? TextStyle, IfcTextFontSelect? TextFontStyle) : base (Name)
		{
			this.TextCharacterAppearance = TextCharacterAppearance;
			this.TextStyle = TextStyle;
			this.TextFontStyle = TextFontStyle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				TextCharacterAppearance,
				TextStyle,
				TextFontStyle
			};
		}
		public virtual Global.IfcCharacterStyleSelect? _TextCharacterAppearance { get { return TextCharacterAppearance; } set { } }
		public virtual Global.IfcTextStyleSelect? _TextStyle { get { return TextStyle; } set { } }
		public virtual Global.IfcTextFontSelect? _TextFontStyle { get { return TextFontStyle; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTextStyleFontModel
	/// SUBTYPE OF (IfcPreDefinedTextFont);
	/// FontFamily : OPTIONAL LIST [1:?] OF IfcTextFontName;
	/// FontStyle : OPTIONAL IfcFontStyle;
	/// FontVariant : OPTIONAL IfcFontVariant;
	/// FontWeight : OPTIONAL IfcFontWeight;
	/// FontSize : IfcSizeSelect;
	/// WHERE
	/// WR31 : ('IFC2X3.IFCLENGTHMEASURE' IN TYPEOF(SELF.FontSize)) AND
	/// (SELF.FontSize > 0.);
	/// END_ENTITY;
	/// <summary>
	public class IfcTextStyleFontModel : IfcPreDefinedTextFont, Global.IfcTextStyleFontModel
	{
		public virtual List<IfcTextFontName>? FontFamily { get; set; }
		public virtual IfcFontStyle? FontStyle { get; set; }
		public virtual IfcFontVariant? FontVariant { get; set; }
		public virtual IfcFontWeight? FontWeight { get; set; }
		public virtual IfcSizeSelect? FontSize { get; set; }
		public IfcTextStyleFontModel() : base()
		{
		}
		public IfcTextStyleFontModel(IfcLabel? Name, List<IfcTextFontName>? FontFamily, IfcFontStyle? FontStyle, IfcFontVariant? FontVariant, IfcFontWeight? FontWeight, IfcSizeSelect? FontSize) : base (Name)
		{
			this.FontFamily = FontFamily;
			this.FontStyle = FontStyle;
			this.FontVariant = FontVariant;
			this.FontWeight = FontWeight;
			this.FontSize = FontSize;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				FontFamily,
				FontStyle,
				FontVariant,
				FontWeight,
				FontSize
			};
		}
		public virtual List<Global.IfcTextFontName>? _FontFamily
		{
			get
			{
				if(FontFamily != null)
				{
					List<Global.IfcTextFontName>? items = new List<Global.IfcTextFontName>();
					foreach (IfcTextFontName item in FontFamily)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcFontStyle? _FontStyle { get { return FontStyle; } set { } }
		public virtual Global.IfcFontVariant? _FontVariant { get { return FontVariant; } set { } }
		public virtual Global.IfcFontWeight? _FontWeight { get { return FontWeight; } set { } }
		public virtual Global.IfcSizeSelect? _FontSize { get { return FontSize; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTextStyleForDefinedFont;
	/// Colour : IfcColour;
	/// BackgroundColour : OPTIONAL IfcColour;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextStyleForDefinedFont : Ifc_Entity, IfcCharacterStyleSelect, Global.IfcTextStyleForDefinedFont
	{
		public virtual IfcColour? Colour { get; set; }
		public virtual IfcColour? BackgroundColour { get; set; }
		public IfcTextStyleForDefinedFont() : base()
		{
		}
		public IfcTextStyleForDefinedFont(IfcColour? Colour, IfcColour? BackgroundColour) : base ()
		{
			this.Colour = Colour;
			this.BackgroundColour = BackgroundColour;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Colour,
				BackgroundColour
			};
		}
		public virtual Global.IfcColour? _Colour { get { return Colour; } set { } }
		public virtual Global.IfcColour? _BackgroundColour { get { return BackgroundColour; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTextStyleTextModel;
	/// TextIndent : OPTIONAL IfcSizeSelect;
	/// TextAlign : OPTIONAL IfcTextAlignment;
	/// TextDecoration : OPTIONAL IfcTextDecoration;
	/// LetterSpacing : OPTIONAL IfcSizeSelect;
	/// WordSpacing : OPTIONAL IfcSizeSelect;
	/// TextTransform : OPTIONAL IfcTextTransformation;
	/// LineHeight : OPTIONAL IfcSizeSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextStyleTextModel : Ifc_Entity, IfcTextStyleSelect, Global.IfcTextStyleTextModel
	{
		public virtual IfcSizeSelect? TextIndent { get; set; }
		public virtual IfcTextAlignment? TextAlign { get; set; }
		public virtual IfcTextDecoration? TextDecoration { get; set; }
		public virtual IfcSizeSelect? LetterSpacing { get; set; }
		public virtual IfcSizeSelect? WordSpacing { get; set; }
		public virtual IfcTextTransformation? TextTransform { get; set; }
		public virtual IfcSizeSelect? LineHeight { get; set; }
		public IfcTextStyleTextModel() : base()
		{
		}
		public IfcTextStyleTextModel(IfcSizeSelect? TextIndent, IfcTextAlignment? TextAlign, IfcTextDecoration? TextDecoration, IfcSizeSelect? LetterSpacing, IfcSizeSelect? WordSpacing, IfcTextTransformation? TextTransform, IfcSizeSelect? LineHeight) : base ()
		{
			this.TextIndent = TextIndent;
			this.TextAlign = TextAlign;
			this.TextDecoration = TextDecoration;
			this.LetterSpacing = LetterSpacing;
			this.WordSpacing = WordSpacing;
			this.TextTransform = TextTransform;
			this.LineHeight = LineHeight;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TextIndent,
				TextAlign,
				TextDecoration,
				LetterSpacing,
				WordSpacing,
				TextTransform,
				LineHeight
			};
		}
		public virtual Global.IfcSizeSelect? _TextIndent { get { return TextIndent; } set { } }
		public virtual Global.IfcTextAlignment? _TextAlign { get { return TextAlign; } set { } }
		public virtual Global.IfcTextDecoration? _TextDecoration { get { return TextDecoration; } set { } }
		public virtual Global.IfcSizeSelect? _LetterSpacing { get { return LetterSpacing; } set { } }
		public virtual Global.IfcSizeSelect? _WordSpacing { get { return WordSpacing; } set { } }
		public virtual Global.IfcTextTransformation? _TextTransform { get { return TextTransform; } set { } }
		public virtual Global.IfcSizeSelect? _LineHeight { get { return LineHeight; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTextStyleWithBoxCharacteristics;
	/// BoxHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// BoxWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// BoxSlantAngle : OPTIONAL IfcPlaneAngleMeasure;
	/// BoxRotateAngle : OPTIONAL IfcPlaneAngleMeasure;
	/// CharacterSpacing : OPTIONAL IfcSizeSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextStyleWithBoxCharacteristics : Ifc_Entity, IfcTextStyleSelect, Global.IfcTextStyleWithBoxCharacteristics
	{
		public virtual IfcPositiveLengthMeasure? BoxHeight { get; set; }
		public virtual IfcPositiveLengthMeasure? BoxWidth { get; set; }
		public virtual IfcPlaneAngleMeasure? BoxSlantAngle { get; set; }
		public virtual IfcPlaneAngleMeasure? BoxRotateAngle { get; set; }
		public virtual IfcSizeSelect? CharacterSpacing { get; set; }
		public IfcTextStyleWithBoxCharacteristics() : base()
		{
		}
		public IfcTextStyleWithBoxCharacteristics(IfcPositiveLengthMeasure? BoxHeight, IfcPositiveLengthMeasure? BoxWidth, IfcPlaneAngleMeasure? BoxSlantAngle, IfcPlaneAngleMeasure? BoxRotateAngle, IfcSizeSelect? CharacterSpacing) : base ()
		{
			this.BoxHeight = BoxHeight;
			this.BoxWidth = BoxWidth;
			this.BoxSlantAngle = BoxSlantAngle;
			this.BoxRotateAngle = BoxRotateAngle;
			this.CharacterSpacing = CharacterSpacing;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BoxHeight,
				BoxWidth,
				BoxSlantAngle,
				BoxRotateAngle,
				CharacterSpacing
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _BoxHeight { get { return BoxHeight; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _BoxWidth { get { return BoxWidth; } set { } }
		public virtual Global.IfcPlaneAngleMeasure? _BoxSlantAngle { get { return BoxSlantAngle; } set { } }
		public virtual Global.IfcPlaneAngleMeasure? _BoxRotateAngle { get { return BoxRotateAngle; } set { } }
		public virtual Global.IfcSizeSelect? _CharacterSpacing { get { return CharacterSpacing; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTextureCoordinate
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcTextureCoordinateGenerator
	/// ,IfcTextureMap));
	/// INVERSE
	/// AnnotatedSurface : SET [1:1] OF IfcAnnotationSurface FOR TextureCoordinates;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcTextureCoordinate : Ifc_Entity, Global.IfcTextureCoordinate
	{
		public List<IfcAnnotationSurface>? AnnotatedSurface => Model?.GetItems<IfcAnnotationSurface>().Where(x => x.TextureCoordinates != null && x.TextureCoordinates == this).ToList();
		public IfcTextureCoordinate() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
		public virtual List<Global.IfcAnnotationSurface>? _AnnotatedSurface
		{
			get
			{
				if(AnnotatedSurface != null)
				{
					List<Global.IfcAnnotationSurface>? items = new List<Global.IfcAnnotationSurface>();
					foreach (IfcAnnotationSurface item in AnnotatedSurface)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureCoordinateGenerator
	/// SUBTYPE OF (IfcTextureCoordinate);
	/// Mode : IfcLabel;
	/// Parameter : LIST [1:?] OF IfcSimpleValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextureCoordinateGenerator : IfcTextureCoordinate, Global.IfcTextureCoordinateGenerator
	{
		public virtual IfcLabel? Mode { get; set; }
		public virtual List<IfcSimpleValue>? Parameter { get; set; }
		public IfcTextureCoordinateGenerator() : base()
		{
		}
		public IfcTextureCoordinateGenerator(IfcLabel? Mode, List<IfcSimpleValue>? Parameter) : base ()
		{
			this.Mode = Mode;
			this.Parameter = Parameter;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Mode,
				Parameter
			};
		}
		public virtual Global.IfcLabel? _Mode { get { return Mode; } set { } }
		public virtual List<Global.IfcSimpleValue>? _Parameter
		{
			get
			{
				if(Parameter != null)
				{
					List<Global.IfcSimpleValue>? items = new List<Global.IfcSimpleValue>();
					foreach (IfcSimpleValue item in Parameter)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureMap
	/// SUBTYPE OF (IfcTextureCoordinate);
	/// TextureMaps : SET [1:?] OF IfcVertexBasedTextureMap;
	/// WHERE
	/// WR11 : SIZEOF([
	/// 'IFC2X3.IFCSHELLBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCFACEBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCFACETEDBREP',
	/// 'IFC2X3.IFCFACETEDBREPWITHVOIDS']
	/// * TYPEOF(SELF\IfcTextureCoordinate.AnnotatedSurface[1].Item)
	/// ) >= 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextureMap : IfcTextureCoordinate, Global.IfcTextureMap
	{
		public virtual List<IfcVertexBasedTextureMap>? TextureMaps { get; set; }
		public IfcTextureMap() : base()
		{
		}
		public IfcTextureMap(List<IfcVertexBasedTextureMap>? TextureMaps) : base ()
		{
			this.TextureMaps = TextureMaps;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TextureMaps
			};
		}
		public virtual List<Global.IfcVertexBasedTextureMap>? _TextureMaps
		{
			get
			{
				if(TextureMaps != null)
				{
					List<Global.IfcVertexBasedTextureMap>? items = new List<Global.IfcVertexBasedTextureMap>();
					foreach (IfcVertexBasedTextureMap item in TextureMaps)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureVertex;
	/// Coordinates : LIST [2:2] OF IfcParameterValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcTextureVertex : Ifc_Entity, Global.IfcTextureVertex
	{
		public virtual List<IfcParameterValue>? Coordinates { get; set; }
		public IfcTextureVertex() : base()
		{
		}
		public IfcTextureVertex(List<IfcParameterValue>? Coordinates) : base ()
		{
			this.Coordinates = Coordinates;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Coordinates
			};
		}
		public virtual List<Global.IfcParameterValue>? _Coordinates
		{
			get
			{
				if(Coordinates != null)
				{
					List<Global.IfcParameterValue>? items = new List<Global.IfcParameterValue>();
					foreach (IfcParameterValue item in Coordinates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcThermalMaterialProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// SpecificHeatCapacity : OPTIONAL IfcSpecificHeatCapacityMeasure;
	/// BoilingPoint : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// FreezingPoint : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// ThermalConductivity : OPTIONAL IfcThermalConductivityMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IfcThermalMaterialProperties : IfcMaterialProperties, Global.IfcThermalMaterialProperties
	{
		public virtual IfcSpecificHeatCapacityMeasure? SpecificHeatCapacity { get; set; }
		public virtual IfcThermodynamicTemperatureMeasure? BoilingPoint { get; set; }
		public virtual IfcThermodynamicTemperatureMeasure? FreezingPoint { get; set; }
		public virtual IfcThermalConductivityMeasure? ThermalConductivity { get; set; }
		public IfcThermalMaterialProperties() : base()
		{
		}
		public IfcThermalMaterialProperties(IfcMaterial? Material, IfcSpecificHeatCapacityMeasure? SpecificHeatCapacity, IfcThermodynamicTemperatureMeasure? BoilingPoint, IfcThermodynamicTemperatureMeasure? FreezingPoint, IfcThermalConductivityMeasure? ThermalConductivity) : base (Material)
		{
			this.SpecificHeatCapacity = SpecificHeatCapacity;
			this.BoilingPoint = BoilingPoint;
			this.FreezingPoint = FreezingPoint;
			this.ThermalConductivity = ThermalConductivity;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				SpecificHeatCapacity,
				BoilingPoint,
				FreezingPoint,
				ThermalConductivity
			};
		}
		public virtual Global.IfcSpecificHeatCapacityMeasure? _SpecificHeatCapacity { get { return SpecificHeatCapacity; } set { } }
		public virtual Global.IfcThermodynamicTemperatureMeasure? _BoilingPoint { get { return BoilingPoint; } set { } }
		public virtual Global.IfcThermodynamicTemperatureMeasure? _FreezingPoint { get { return FreezingPoint; } set { } }
		public virtual Global.IfcThermalConductivityMeasure? _ThermalConductivity { get { return ThermalConductivity; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTimeSeries
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcIrregularTimeSeries
	/// ,IfcRegularTimeSeries));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// StartTime : IfcDateTimeSelect;
	/// EndTime : IfcDateTimeSelect;
	/// TimeSeriesDataType : IfcTimeSeriesDataTypeEnum;
	/// DataOrigin : IfcDataOriginEnum;
	/// UserDefinedDataOrigin : OPTIONAL IfcLabel;
	/// Unit : OPTIONAL IfcUnit;
	/// INVERSE
	/// DocumentedBy : SET [0:1] OF IfcTimeSeriesReferenceRelationship FOR ReferencedTimeSeries;
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcTimeSeries : Ifc_Entity, IfcMetricValueSelect, IfcObjectReferenceSelect, Global.IfcTimeSeries
	{
		public virtual IfcLabel? Name { get; set; }
		public virtual IfcText? Description { get; set; }
		public virtual IfcDateTimeSelect? StartTime { get; set; }
		public virtual IfcDateTimeSelect? EndTime { get; set; }
		public virtual IfcTimeSeriesDataTypeEnum? TimeSeriesDataType { get; set; }
		public virtual IfcDataOriginEnum? DataOrigin { get; set; }
		public virtual IfcLabel? UserDefinedDataOrigin { get; set; }
		public virtual IfcUnit? Unit { get; set; }
		public List<IfcTimeSeriesReferenceRelationship>? DocumentedBy => Model?.GetItems<IfcTimeSeriesReferenceRelationship>().Where(x => x.ReferencedTimeSeries != null && x.ReferencedTimeSeries == this).ToList();
		public IfcTimeSeries() : base()
		{
		}
		public IfcTimeSeries(IfcLabel? Name, IfcText? Description, IfcDateTimeSelect? StartTime, IfcDateTimeSelect? EndTime, IfcTimeSeriesDataTypeEnum? TimeSeriesDataType, IfcDataOriginEnum? DataOrigin, IfcLabel? UserDefinedDataOrigin, IfcUnit? Unit) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.StartTime = StartTime;
			this.EndTime = EndTime;
			this.TimeSeriesDataType = TimeSeriesDataType;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.Unit = Unit;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Name,
				Description,
				StartTime,
				EndTime,
				TimeSeriesDataType,
				DataOrigin,
				UserDefinedDataOrigin,
				Unit
			};
		}
		public virtual Global.IfcLabel? _Name { get { return Name; } set { } }
		public virtual Global.IfcText? _Description { get { return Description; } set { } }
		public virtual Global.IfcDateTimeSelect? _StartTime { get { return StartTime; } set { } }
		public virtual Global.IfcDateTimeSelect? _EndTime { get { return EndTime; } set { } }
		public virtual Global.IfcTimeSeriesDataTypeEnum? _TimeSeriesDataType { get { return TimeSeriesDataType; } set { } }
		public virtual Global.IfcDataOriginEnum? _DataOrigin { get { return DataOrigin; } set { } }
		public virtual Global.IfcLabel? _UserDefinedDataOrigin { get { return UserDefinedDataOrigin; } set { } }
		public virtual Global.IfcUnit? _Unit { get { return Unit; } set { } }
		public virtual List<Global.IfcTimeSeriesReferenceRelationship>? _DocumentedBy
		{
			get
			{
				if(DocumentedBy != null)
				{
					List<Global.IfcTimeSeriesReferenceRelationship>? items = new List<Global.IfcTimeSeriesReferenceRelationship>();
					foreach (IfcTimeSeriesReferenceRelationship item in DocumentedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTimeSeriesReferenceRelationship;
	/// ReferencedTimeSeries : IfcTimeSeries;
	/// TimeSeriesReferences : SET [1:?] OF IfcDocumentSelect;
	/// END_ENTITY;
	/// <summary>
	public class IfcTimeSeriesReferenceRelationship : Ifc_Entity, Global.IfcTimeSeriesReferenceRelationship
	{
		public virtual IfcTimeSeries? ReferencedTimeSeries { get; set; }
		public virtual List<IfcDocumentSelect>? TimeSeriesReferences { get; set; }
		public IfcTimeSeriesReferenceRelationship() : base()
		{
		}
		public IfcTimeSeriesReferenceRelationship(IfcTimeSeries? ReferencedTimeSeries, List<IfcDocumentSelect>? TimeSeriesReferences) : base ()
		{
			this.ReferencedTimeSeries = ReferencedTimeSeries;
			this.TimeSeriesReferences = TimeSeriesReferences;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ReferencedTimeSeries,
				TimeSeriesReferences
			};
		}
		public virtual Global.IfcTimeSeries? _ReferencedTimeSeries { get { return ReferencedTimeSeries; } set { } }
		public virtual List<Global.IfcDocumentSelect>? _TimeSeriesReferences
		{
			get
			{
				if(TimeSeriesReferences != null)
				{
					List<Global.IfcDocumentSelect>? items = new List<Global.IfcDocumentSelect>();
					foreach (IfcDocumentSelect item in TimeSeriesReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTimeSeriesSchedule
	/// SUBTYPE OF (IfcControl);
	/// ApplicableDates : OPTIONAL LIST [1:?] OF IfcDateTimeSelect;
	/// TimeSeriesScheduleType : IfcTimeSeriesScheduleTypeEnum;
	/// TimeSeries : IfcTimeSeries;
	/// WHERE
	/// WR41 : NOT(TimeSeriesScheduleType=IfcTimeSeriesScheduleTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IfcTimeSeriesSchedule : IfcControl, Global.IfcTimeSeriesSchedule
	{
		public virtual List<IfcDateTimeSelect>? ApplicableDates { get; set; }
		public virtual IfcTimeSeriesScheduleTypeEnum? TimeSeriesScheduleType { get; set; }
		public virtual IfcTimeSeries? TimeSeries { get; set; }
		public IfcTimeSeriesSchedule() : base()
		{
		}
		public IfcTimeSeriesSchedule(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, List<IfcDateTimeSelect>? ApplicableDates, IfcTimeSeriesScheduleTypeEnum? TimeSeriesScheduleType, IfcTimeSeries? TimeSeries) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ApplicableDates = ApplicableDates;
			this.TimeSeriesScheduleType = TimeSeriesScheduleType;
			this.TimeSeries = TimeSeries;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ApplicableDates,
				TimeSeriesScheduleType,
				TimeSeries
			};
		}
		public virtual List<Global.IfcDateTimeSelect>? _ApplicableDates
		{
			get
			{
				if(ApplicableDates != null)
				{
					List<Global.IfcDateTimeSelect>? items = new List<Global.IfcDateTimeSelect>();
					foreach (IfcDateTimeSelect item in ApplicableDates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcTimeSeriesScheduleTypeEnum? _TimeSeriesScheduleType { get { return TimeSeriesScheduleType; } set { } }
		public virtual Global.IfcTimeSeries? _TimeSeries { get { return TimeSeries; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTimeSeriesValue;
	/// ListValues : LIST [1:?] OF IfcValue;
	/// END_ENTITY;
	/// <summary>
	public class IfcTimeSeriesValue : Ifc_Entity, Global.IfcTimeSeriesValue
	{
		public virtual List<IfcValue>? ListValues { get; set; }
		public IfcTimeSeriesValue() : base()
		{
		}
		public IfcTimeSeriesValue(List<IfcValue>? ListValues) : base ()
		{
			this.ListValues = ListValues;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ListValues
			};
		}
		public virtual List<Global.IfcValue>? _ListValues
		{
			get
			{
				if(ListValues != null)
				{
					List<Global.IfcValue>? items = new List<Global.IfcValue>();
					foreach (IfcValue item in ListValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTopologicalRepresentationItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConnectedFaceSet
	/// ,IfcEdge
	/// ,IfcFace
	/// ,IfcFaceBound
	/// ,IfcLoop
	/// ,IfcPath
	/// ,IfcVertex))
	/// SUBTYPE OF (IfcRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcTopologicalRepresentationItem : IfcRepresentationItem, Global.IfcTopologicalRepresentationItem
	{
		public IfcTopologicalRepresentationItem() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcTopologyRepresentation
	/// SUBTYPE OF (IfcShapeModel);
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* SELF\IfcRepresentation.Items |
	/// NOT('IFC2X3.IFCTOPOLOGICALREPRESENTATIONITEM' IN TYPEOF(temp))
	/// )) = 0;
	/// WR22 : EXISTS(SELF\IfcRepresentation.RepresentationType);
	/// WR23 : IfcTopologyRepresentationTypes(SELF\IfcRepresentation.RepresentationType, SELF\IfcRepresentation.Items);
	/// END_ENTITY;
	/// <summary>
	public class IfcTopologyRepresentation : IfcShapeModel, Global.IfcTopologyRepresentation
	{
		public IfcTopologyRepresentation() : base()
		{
		}
		public IfcTopologyRepresentation(IfcRepresentationContext? ContextOfItems, IfcLabel? RepresentationIdentifier, IfcLabel? RepresentationType, List<IfcRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ContextOfItems,
				RepresentationIdentifier,
				RepresentationType,
				Items
			};
		}
	}
	/// <summary>
	/// ENTITY IfcTransformerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcTransformerTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcTransformerType : IfcEnergyConversionDeviceType, Global.IfcTransformerType
	{
		public virtual IfcTransformerTypeEnum? PredefinedType { get; set; }
		public IfcTransformerType() : base()
		{
		}
		public IfcTransformerType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcTransformerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcTransformerTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTransportElement
	/// SUBTYPE OF (IfcElement);
	/// OperationType : OPTIONAL IfcTransportElementTypeEnum;
	/// CapacityByWeight : OPTIONAL IfcMassMeasure;
	/// CapacityByNumber : OPTIONAL IfcCountMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcTransportElement : IfcElement, Global.IfcTransportElement
	{
		public virtual IfcTransportElementTypeEnum? OperationType { get; set; }
		public virtual IfcMassMeasure? CapacityByWeight { get; set; }
		public virtual IfcCountMeasure? CapacityByNumber { get; set; }
		public IfcTransportElement() : base()
		{
		}
		public IfcTransportElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcTransportElementTypeEnum? OperationType, IfcMassMeasure? CapacityByWeight, IfcCountMeasure? CapacityByNumber) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.OperationType = OperationType;
			this.CapacityByWeight = CapacityByWeight;
			this.CapacityByNumber = CapacityByNumber;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				OperationType,
				CapacityByWeight,
				CapacityByNumber
			};
		}
		public virtual Global.IfcTransportElementTypeEnum? _OperationType { get { return OperationType; } set { } }
		public virtual Global.IfcMassMeasure? _CapacityByWeight { get { return CapacityByWeight; } set { } }
		public virtual Global.IfcCountMeasure? _CapacityByNumber { get { return CapacityByNumber; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTransportElementType
	/// SUBTYPE OF (IfcElementType);
	/// PredefinedType : IfcTransportElementTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcTransportElementType : IfcElementType, Global.IfcTransportElementType
	{
		public virtual IfcTransportElementTypeEnum? PredefinedType { get; set; }
		public IfcTransportElementType() : base()
		{
		}
		public IfcTransportElementType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcTransportElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcTransportElementTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTrapeziumProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// BottomXDim : IfcPositiveLengthMeasure;
	/// TopXDim : IfcPositiveLengthMeasure;
	/// YDim : IfcPositiveLengthMeasure;
	/// TopXOffset : IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcTrapeziumProfileDef : IfcParameterizedProfileDef, Global.IfcTrapeziumProfileDef
	{
		public virtual IfcPositiveLengthMeasure? BottomXDim { get; set; }
		public virtual IfcPositiveLengthMeasure? TopXDim { get; set; }
		public virtual IfcPositiveLengthMeasure? YDim { get; set; }
		public virtual IfcLengthMeasure? TopXOffset { get; set; }
		public IfcTrapeziumProfileDef() : base()
		{
		}
		public IfcTrapeziumProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? BottomXDim, IfcPositiveLengthMeasure? TopXDim, IfcPositiveLengthMeasure? YDim, IfcLengthMeasure? TopXOffset) : base (ProfileType, ProfileName, Position)
		{
			this.BottomXDim = BottomXDim;
			this.TopXDim = TopXDim;
			this.YDim = YDim;
			this.TopXOffset = TopXOffset;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				BottomXDim,
				TopXDim,
				YDim,
				TopXOffset
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _BottomXDim { get { return BottomXDim; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _TopXDim { get { return TopXDim; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _YDim { get { return YDim; } set { } }
		public virtual Global.IfcLengthMeasure? _TopXOffset { get { return TopXOffset; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTrimmedCurve
	/// SUBTYPE OF (IfcBoundedCurve);
	/// BasisCurve : IfcCurve;
	/// Trim1 : SET [1:2] OF IfcTrimmingSelect;
	/// Trim2 : SET [1:2] OF IfcTrimmingSelect;
	/// SenseAgreement : BOOLEAN;
	/// MasterRepresentation : IfcTrimmingPreference;
	/// WHERE
	/// WR41 : (HIINDEX(Trim1) = 1) OR (TYPEOF(Trim1[1]) <> TYPEOF(Trim1[2]));
	/// WR42 : (HIINDEX(Trim2) = 1) OR (TYPEOF(Trim2[1]) <> TYPEOF(Trim2[2]));
	/// WR43 : NOT('IFC2X3.IFCBOUNDEDCURVE' IN TYPEOF(BasisCurve));
	/// END_ENTITY;
	/// <summary>
	public class IfcTrimmedCurve : IfcBoundedCurve, Global.IfcTrimmedCurve
	{
		public virtual IfcCurve? BasisCurve { get; set; }
		public virtual List<IfcTrimmingSelect>? Trim1 { get; set; }
		public virtual List<IfcTrimmingSelect>? Trim2 { get; set; }
		public virtual BOOLEAN? SenseAgreement { get; set; }
		public virtual IfcTrimmingPreference? MasterRepresentation { get; set; }
		public IfcTrimmedCurve() : base()
		{
		}
		public IfcTrimmedCurve(IfcCurve? BasisCurve, List<IfcTrimmingSelect>? Trim1, List<IfcTrimmingSelect>? Trim2, BOOLEAN? SenseAgreement, IfcTrimmingPreference? MasterRepresentation) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.Trim1 = Trim1;
			this.Trim2 = Trim2;
			this.SenseAgreement = SenseAgreement;
			this.MasterRepresentation = MasterRepresentation;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				BasisCurve,
				Trim1,
				Trim2,
				SenseAgreement,
				MasterRepresentation
			};
		}
		public virtual Global.IfcCurve? _BasisCurve { get { return BasisCurve; } set { } }
		public virtual List<Global.IfcTrimmingSelect>? _Trim1
		{
			get
			{
				if(Trim1 != null)
				{
					List<Global.IfcTrimmingSelect>? items = new List<Global.IfcTrimmingSelect>();
					foreach (IfcTrimmingSelect item in Trim1)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcTrimmingSelect>? _Trim2
		{
			get
			{
				if(Trim2 != null)
				{
					List<Global.IfcTrimmingSelect>? items = new List<Global.IfcTrimmingSelect>();
					foreach (IfcTrimmingSelect item in Trim2)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual BOOLEAN? _SenseAgreement { get { return SenseAgreement; } set { } }
		public virtual Global.IfcTrimmingPreference? _MasterRepresentation { get { return MasterRepresentation; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTubeBundleType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcTubeBundleTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcTubeBundleTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTubeBundleTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcTubeBundleType : IfcEnergyConversionDeviceType, Global.IfcTubeBundleType
	{
		public virtual IfcTubeBundleTypeEnum? PredefinedType { get; set; }
		public IfcTubeBundleType() : base()
		{
		}
		public IfcTubeBundleType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcTubeBundleTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcTubeBundleTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTwoDirectionRepeatFactor
	/// SUBTYPE OF (IfcOneDirectionRepeatFactor);
	/// SecondRepeatFactor : IfcVector;
	/// END_ENTITY;
	/// <summary>
	public class IfcTwoDirectionRepeatFactor : IfcOneDirectionRepeatFactor, Global.IfcTwoDirectionRepeatFactor
	{
		public virtual IfcVector? SecondRepeatFactor { get; set; }
		public IfcTwoDirectionRepeatFactor() : base()
		{
		}
		public IfcTwoDirectionRepeatFactor(IfcVector? RepeatFactor, IfcVector? SecondRepeatFactor) : base (RepeatFactor)
		{
			this.SecondRepeatFactor = SecondRepeatFactor;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				RepeatFactor,
				SecondRepeatFactor
			};
		}
		public virtual Global.IfcVector? _SecondRepeatFactor { get { return SecondRepeatFactor; } set { } }
	}
	/// <summary>
	/// ENTITY IfcTypeObject
	/// SUPERTYPE OF (ONEOF
	/// (IfcTypeProduct))
	/// SUBTYPE OF (IfcObjectDefinition);
	/// ApplicableOccurrence : OPTIONAL IfcLabel;
	/// HasPropertySets : OPTIONAL SET [1:?] OF IfcPropertySetDefinition;
	/// INVERSE
	/// ObjectTypeOf : SET [0:1] OF IfcRelDefinesByType FOR RelatingType;
	/// WHERE
	/// WR1 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IfcTypeObject : IfcObjectDefinition, Global.IfcTypeObject
	{
		public virtual IfcLabel? ApplicableOccurrence { get; set; }
		public virtual List<IfcPropertySetDefinition>? HasPropertySets { get; set; }
		public List<IfcRelDefinesByType>? ObjectTypeOf => Model?.GetItems<IfcRelDefinesByType>().Where(x => x.RelatingType != null && x.RelatingType == this).ToList();
		public IfcTypeObject() : base()
		{
		}
		public IfcTypeObject(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets
			};
		}
		public virtual Global.IfcLabel? _ApplicableOccurrence { get { return ApplicableOccurrence; } set { } }
		public virtual List<Global.IfcPropertySetDefinition>? _HasPropertySets
		{
			get
			{
				if(HasPropertySets != null)
				{
					List<Global.IfcPropertySetDefinition>? items = new List<Global.IfcPropertySetDefinition>();
					foreach (IfcPropertySetDefinition item in HasPropertySets)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcRelDefinesByType>? _ObjectTypeOf
		{
			get
			{
				if(ObjectTypeOf != null)
				{
					List<Global.IfcRelDefinesByType>? items = new List<Global.IfcRelDefinesByType>();
					foreach (IfcRelDefinesByType item in ObjectTypeOf)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTypeProduct
	/// SUPERTYPE OF (ONEOF
	/// (IfcDoorStyle
	/// ,IfcElementType
	/// ,IfcWindowStyle))
	/// SUBTYPE OF (IfcTypeObject);
	/// RepresentationMaps : OPTIONAL LIST [1:?] OF UNIQUE IfcRepresentationMap;
	/// Tag : OPTIONAL IfcLabel;
	/// WHERE
	/// WR41 : NOT(EXISTS(SELF\IfcTypeObject.ObjectTypeOf[1])) OR
	/// (SIZEOF(QUERY(temp <* SELF\IfcTypeObject.ObjectTypeOf[1].RelatedObjects |
	/// NOT('IFC2X3.IFCPRODUCT' IN TYPEOF(temp)))
	/// ) = 0);
	/// END_ENTITY;
	/// <summary>
	public class IfcTypeProduct : IfcTypeObject, Global.IfcTypeProduct
	{
		public virtual List<IfcRepresentationMap>? RepresentationMaps { get; set; }
		public virtual IfcLabel? Tag { get; set; }
		public IfcTypeProduct() : base()
		{
		}
		public IfcTypeProduct(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets)
		{
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag
			};
		}
		public virtual List<Global.IfcRepresentationMap>? _RepresentationMaps
		{
			get
			{
				if(RepresentationMaps != null)
				{
					List<Global.IfcRepresentationMap>? items = new List<Global.IfcRepresentationMap>();
					foreach (IfcRepresentationMap item in RepresentationMaps)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _Tag { get { return Tag; } set { } }
	}
	/// <summary>
	/// ENTITY IfcUShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// FlangeWidth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// EdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// FlangeSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// CentreOfGravityInX : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR21 : FlangeThickness < (Depth / 2.);
	/// WR22 : WebThickness < FlangeWidth;
	/// END_ENTITY;
	/// <summary>
	public class IfcUShapeProfileDef : IfcParameterizedProfileDef, Global.IfcUShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FilletRadius { get; set; }
		public virtual IfcPositiveLengthMeasure? EdgeRadius { get; set; }
		public virtual IfcPlaneAngleMeasure? FlangeSlope { get; set; }
		public virtual IfcPositiveLengthMeasure? CentreOfGravityInX { get; set; }
		public IfcUShapeProfileDef() : base()
		{
		}
		public IfcUShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Depth, IfcPositiveLengthMeasure? FlangeWidth, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? FlangeThickness, IfcPositiveLengthMeasure? FilletRadius, IfcPositiveLengthMeasure? EdgeRadius, IfcPlaneAngleMeasure? FlangeSlope, IfcPositiveLengthMeasure? CentreOfGravityInX) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.FlangeSlope = FlangeSlope;
			this.CentreOfGravityInX = CentreOfGravityInX;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Depth,
				FlangeWidth,
				WebThickness,
				FlangeThickness,
				FilletRadius,
				EdgeRadius,
				FlangeSlope,
				CentreOfGravityInX
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Depth { get { return Depth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FlangeWidth { get { return FlangeWidth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _WebThickness { get { return WebThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FlangeThickness { get { return FlangeThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FilletRadius { get { return FilletRadius; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _EdgeRadius { get { return EdgeRadius; } set { } }
		public virtual Global.IfcPlaneAngleMeasure? _FlangeSlope { get { return FlangeSlope; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _CentreOfGravityInX { get { return CentreOfGravityInX; } set { } }
	}
	/// <summary>
	/// ENTITY IfcUnitAssignment;
	/// Units : SET [1:?] OF IfcUnit;
	/// WHERE
	/// WR01 : IfcCorrectUnitAssignment(Units);
	/// END_ENTITY;
	/// <summary>
	public class IfcUnitAssignment : Ifc_Entity, Global.IfcUnitAssignment
	{
		public virtual List<IfcUnit>? Units { get; set; }
		public IfcUnitAssignment() : base()
		{
		}
		public IfcUnitAssignment(List<IfcUnit>? Units) : base ()
		{
			this.Units = Units;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Units
			};
		}
		public virtual List<Global.IfcUnit>? _Units
		{
			get
			{
				if(Units != null)
				{
					List<Global.IfcUnit>? items = new List<Global.IfcUnit>();
					foreach (IfcUnit item in Units)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcUnitaryEquipmentType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcUnitaryEquipmentTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcUnitaryEquipmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcUnitaryEquipmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcUnitaryEquipmentType : IfcEnergyConversionDeviceType, Global.IfcUnitaryEquipmentType
	{
		public virtual IfcUnitaryEquipmentTypeEnum? PredefinedType { get; set; }
		public IfcUnitaryEquipmentType() : base()
		{
		}
		public IfcUnitaryEquipmentType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcUnitaryEquipmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcUnitaryEquipmentTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcValveType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcValveTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcValveTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcValveTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcValveType : IfcFlowControllerType, Global.IfcValveType
	{
		public virtual IfcValveTypeEnum? PredefinedType { get; set; }
		public IfcValveType() : base()
		{
		}
		public IfcValveType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcValveTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcValveTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcVector
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Orientation : IfcDirection;
	/// Magnitude : IfcLengthMeasure;
	/// DERIVE
	/// Dim : IfcDimensionCount := Orientation.Dim;
	/// WHERE
	/// WR1 : Magnitude >= 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IfcVector : IfcGeometricRepresentationItem, IfcVectorOrDirection, Global.IfcVector
	{
		public virtual IfcDirection? Orientation { get; set; }
		public virtual IfcLengthMeasure? Magnitude { get; set; }
		//TODO DERIVE
		public virtual IfcDimensionCount? Dim {get {return null;}}
		public IfcVector() : base()
		{
		}
		public IfcVector(IfcDirection? Orientation, IfcLengthMeasure? Magnitude) : base ()
		{
			this.Orientation = Orientation;
			this.Magnitude = Magnitude;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Orientation,
				Magnitude
			};
		}
		public virtual Global.IfcDirection? _Orientation { get { return Orientation; } set { } }
		public virtual Global.IfcLengthMeasure? _Magnitude { get { return Magnitude; } set { } }
		public virtual Global.IfcDimensionCount? _Dim { get { return Dim; } set { } }
	}
	/// <summary>
	/// ENTITY IfcVertex
	/// SUPERTYPE OF (ONEOF
	/// (IfcVertexPoint))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public class IfcVertex : IfcTopologicalRepresentationItem, Global.IfcVertex
	{
		public IfcVertex() : base()
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcVertexBasedTextureMap;
	/// TextureVertices : LIST [3:?] OF IfcTextureVertex;
	/// TexturePoints : LIST [3:?] OF IfcCartesianPoint;
	/// END_ENTITY;
	/// <summary>
	public class IfcVertexBasedTextureMap : Ifc_Entity, Global.IfcVertexBasedTextureMap
	{
		public virtual List<IfcTextureVertex>? TextureVertices { get; set; }
		public virtual List<IfcCartesianPoint>? TexturePoints { get; set; }
		public IfcVertexBasedTextureMap() : base()
		{
		}
		public IfcVertexBasedTextureMap(List<IfcTextureVertex>? TextureVertices, List<IfcCartesianPoint>? TexturePoints) : base ()
		{
			this.TextureVertices = TextureVertices;
			this.TexturePoints = TexturePoints;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				TextureVertices,
				TexturePoints
			};
		}
		public virtual List<Global.IfcTextureVertex>? _TextureVertices
		{
			get
			{
				if(TextureVertices != null)
				{
					List<Global.IfcTextureVertex>? items = new List<Global.IfcTextureVertex>();
					foreach (IfcTextureVertex item in TextureVertices)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcCartesianPoint>? _TexturePoints
		{
			get
			{
				if(TexturePoints != null)
				{
					List<Global.IfcCartesianPoint>? items = new List<Global.IfcCartesianPoint>();
					foreach (IfcCartesianPoint item in TexturePoints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVertexLoop
	/// SUBTYPE OF (IfcLoop);
	/// LoopVertex : IfcVertex;
	/// END_ENTITY;
	/// <summary>
	public class IfcVertexLoop : IfcLoop, Global.IfcVertexLoop
	{
		public virtual IfcVertex? LoopVertex { get; set; }
		public IfcVertexLoop() : base()
		{
		}
		public IfcVertexLoop(IfcVertex? LoopVertex) : base ()
		{
			this.LoopVertex = LoopVertex;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				LoopVertex
			};
		}
		public virtual Global.IfcVertex? _LoopVertex { get { return LoopVertex; } set { } }
	}
	/// <summary>
	/// ENTITY IfcVertexPoint
	/// SUBTYPE OF (IfcVertex);
	/// VertexGeometry : IfcPoint;
	/// END_ENTITY;
	/// <summary>
	public class IfcVertexPoint : IfcVertex, IfcPointOrVertexPoint, Global.IfcVertexPoint
	{
		public virtual IfcPoint? VertexGeometry { get; set; }
		public IfcVertexPoint() : base()
		{
		}
		public IfcVertexPoint(IfcPoint? VertexGeometry) : base ()
		{
			this.VertexGeometry = VertexGeometry;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				VertexGeometry
			};
		}
		public virtual Global.IfcPoint? _VertexGeometry { get { return VertexGeometry; } set { } }
	}
	/// <summary>
	/// ENTITY IfcVibrationIsolatorType
	/// SUBTYPE OF (IfcDiscreteAccessoryType);
	/// PredefinedType : IfcVibrationIsolatorTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcVibrationIsolatorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcVibrationIsolatorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IfcVibrationIsolatorType : IfcDiscreteAccessoryType, Global.IfcVibrationIsolatorType
	{
		public virtual IfcVibrationIsolatorTypeEnum? PredefinedType { get; set; }
		public IfcVibrationIsolatorType() : base()
		{
		}
		public IfcVibrationIsolatorType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcVibrationIsolatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcVibrationIsolatorTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcVirtualElement
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IfcVirtualElement : IfcElement, Global.IfcVirtualElement
	{
		public IfcVirtualElement() : base()
		{
		}
		public IfcVirtualElement(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcVirtualGridIntersection;
	/// IntersectingAxes : LIST [2:2] OF UNIQUE IfcGridAxis;
	/// OffsetDistances : LIST [2:3] OF IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcVirtualGridIntersection : Ifc_Entity, Global.IfcVirtualGridIntersection
	{
		public virtual List<IfcGridAxis>? IntersectingAxes { get; set; }
		public virtual List<IfcLengthMeasure>? OffsetDistances { get; set; }
		public IfcVirtualGridIntersection() : base()
		{
		}
		public IfcVirtualGridIntersection(List<IfcGridAxis>? IntersectingAxes, List<IfcLengthMeasure>? OffsetDistances) : base ()
		{
			this.IntersectingAxes = IntersectingAxes;
			this.OffsetDistances = OffsetDistances;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				IntersectingAxes,
				OffsetDistances
			};
		}
		public virtual List<Global.IfcGridAxis>? _IntersectingAxes
		{
			get
			{
				if(IntersectingAxes != null)
				{
					List<Global.IfcGridAxis>? items = new List<Global.IfcGridAxis>();
					foreach (IfcGridAxis item in IntersectingAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual List<Global.IfcLengthMeasure>? _OffsetDistances
		{
			get
			{
				if(OffsetDistances != null)
				{
					List<Global.IfcLengthMeasure>? items = new List<Global.IfcLengthMeasure>();
					foreach (IfcLengthMeasure item in OffsetDistances)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWall
	/// SUPERTYPE OF (ONEOF
	/// (IfcWallStandardCase))
	/// SUBTYPE OF (IfcBuildingElement);
	/// WHERE
	/// WR1 : SIZEOF (QUERY(temp <* SELF\IfcObjectDefinition.HasAssociations |
	/// 'IFC2X3.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)
	/// )) <= 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcWall : IfcBuildingElement, Global.IfcWall
	{
		public IfcWall() : base()
		{
		}
		public IfcWall(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcWallStandardCase
	/// SUBTYPE OF (IfcWall);
	/// WHERE
	/// WR1 : SIZEOF (QUERY(temp <* USEDIN(SELF, 'IFC2X3.IFCRELASSOCIATES.RELATEDOBJECTS') |
	/// ('IFC2X3.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)) AND
	/// ('IFC2X3.IFCMATERIALLAYERSETUSAGE' IN TYPEOF(temp.RelatingMaterial))
	/// )) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IfcWallStandardCase : IfcWall, Global.IfcWallStandardCase
	{
		public IfcWallStandardCase() : base()
		{
		}
		public IfcWallStandardCase(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag
			};
		}
	}
	/// <summary>
	/// ENTITY IfcWallType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcWallTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcWallType : IfcBuildingElementType, Global.IfcWallType
	{
		public virtual IfcWallTypeEnum? PredefinedType { get; set; }
		public IfcWallType() : base()
		{
		}
		public IfcWallType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcWallTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcWallTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcWasteTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcWasteTerminalTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IfcWasteTerminalType : IfcFlowTerminalType, Global.IfcWasteTerminalType
	{
		public virtual IfcWasteTerminalTypeEnum? PredefinedType { get; set; }
		public IfcWasteTerminalType() : base()
		{
		}
		public IfcWasteTerminalType(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcLabel? ElementType, IfcWasteTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ElementType,
				PredefinedType
			};
		}
		public virtual Global.IfcWasteTerminalTypeEnum? _PredefinedType { get { return PredefinedType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcWaterProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// IsPotable : OPTIONAL BOOLEAN;
	/// Hardness : OPTIONAL IfcIonConcentrationMeasure;
	/// AlkalinityConcentration : OPTIONAL IfcIonConcentrationMeasure;
	/// AcidityConcentration : OPTIONAL IfcIonConcentrationMeasure;
	/// ImpuritiesContent : OPTIONAL IfcNormalisedRatioMeasure;
	/// PHLevel : OPTIONAL IfcPHMeasure;
	/// DissolvedSolidsContent : OPTIONAL IfcNormalisedRatioMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IfcWaterProperties : IfcMaterialProperties, Global.IfcWaterProperties
	{
		public virtual BOOLEAN? IsPotable { get; set; }
		public virtual IfcIonConcentrationMeasure? Hardness { get; set; }
		public virtual IfcIonConcentrationMeasure? AlkalinityConcentration { get; set; }
		public virtual IfcIonConcentrationMeasure? AcidityConcentration { get; set; }
		public virtual IfcNormalisedRatioMeasure? ImpuritiesContent { get; set; }
		public virtual IfcPHMeasure? PHLevel { get; set; }
		public virtual IfcNormalisedRatioMeasure? DissolvedSolidsContent { get; set; }
		public IfcWaterProperties() : base()
		{
		}
		public IfcWaterProperties(IfcMaterial? Material, BOOLEAN? IsPotable, IfcIonConcentrationMeasure? Hardness, IfcIonConcentrationMeasure? AlkalinityConcentration, IfcIonConcentrationMeasure? AcidityConcentration, IfcNormalisedRatioMeasure? ImpuritiesContent, IfcPHMeasure? PHLevel, IfcNormalisedRatioMeasure? DissolvedSolidsContent) : base (Material)
		{
			this.IsPotable = IsPotable;
			this.Hardness = Hardness;
			this.AlkalinityConcentration = AlkalinityConcentration;
			this.AcidityConcentration = AcidityConcentration;
			this.ImpuritiesContent = ImpuritiesContent;
			this.PHLevel = PHLevel;
			this.DissolvedSolidsContent = DissolvedSolidsContent;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				Material,
				IsPotable,
				Hardness,
				AlkalinityConcentration,
				AcidityConcentration,
				ImpuritiesContent,
				PHLevel,
				DissolvedSolidsContent
			};
		}
		public virtual BOOLEAN? _IsPotable { get { return IsPotable; } set { } }
		public virtual Global.IfcIonConcentrationMeasure? _Hardness { get { return Hardness; } set { } }
		public virtual Global.IfcIonConcentrationMeasure? _AlkalinityConcentration { get { return AlkalinityConcentration; } set { } }
		public virtual Global.IfcIonConcentrationMeasure? _AcidityConcentration { get { return AcidityConcentration; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _ImpuritiesContent { get { return ImpuritiesContent; } set { } }
		public virtual Global.IfcPHMeasure? _PHLevel { get { return PHLevel; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _DissolvedSolidsContent { get { return DissolvedSolidsContent; } set { } }
	}
	/// <summary>
	/// ENTITY IfcWindow
	/// SUBTYPE OF (IfcBuildingElement);
	/// OverallHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// OverallWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IfcWindow : IfcBuildingElement, Global.IfcWindow
	{
		public virtual IfcPositiveLengthMeasure? OverallHeight { get; set; }
		public virtual IfcPositiveLengthMeasure? OverallWidth { get; set; }
		public IfcWindow() : base()
		{
		}
		public IfcWindow(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcObjectPlacement? ObjectPlacement, IfcProductRepresentation? Representation, IfcIdentifier? Tag, IfcPositiveLengthMeasure? OverallHeight, IfcPositiveLengthMeasure? OverallWidth) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				ObjectPlacement,
				Representation,
				Tag,
				OverallHeight,
				OverallWidth
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _OverallHeight { get { return OverallHeight; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _OverallWidth { get { return OverallWidth; } set { } }
	}
	/// <summary>
	/// ENTITY IfcWindowLiningProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// LiningDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// LiningThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// TransomThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// MullionThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// FirstTransomOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// SecondTransomOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// FirstMullionOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// SecondMullionOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// WHERE
	/// WR31 : NOT(NOT(EXISTS(LiningDepth)) AND EXISTS(LiningThickness));
	/// WR32 : NOT(NOT(EXISTS(FirstTransomOffset)) AND EXISTS(SecondTransomOffset));
	/// WR33 : NOT(NOT(EXISTS(FirstMullionOffset)) AND EXISTS(SecondMullionOffset));
	/// WR34 : EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]) AND
	/// ('IFC2X3.IFCWINDOWSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]));
	/// END_ENTITY;
	/// <summary>
	public class IfcWindowLiningProperties : IfcPropertySetDefinition, Global.IfcWindowLiningProperties
	{
		public virtual IfcPositiveLengthMeasure? LiningDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? LiningThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? TransomThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? MullionThickness { get; set; }
		public virtual IfcNormalisedRatioMeasure? FirstTransomOffset { get; set; }
		public virtual IfcNormalisedRatioMeasure? SecondTransomOffset { get; set; }
		public virtual IfcNormalisedRatioMeasure? FirstMullionOffset { get; set; }
		public virtual IfcNormalisedRatioMeasure? SecondMullionOffset { get; set; }
		public virtual IfcShapeAspect? ShapeAspectStyle { get; set; }
		public IfcWindowLiningProperties() : base()
		{
		}
		public IfcWindowLiningProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcPositiveLengthMeasure? LiningDepth, IfcPositiveLengthMeasure? LiningThickness, IfcPositiveLengthMeasure? TransomThickness, IfcPositiveLengthMeasure? MullionThickness, IfcNormalisedRatioMeasure? FirstTransomOffset, IfcNormalisedRatioMeasure? SecondTransomOffset, IfcNormalisedRatioMeasure? FirstMullionOffset, IfcNormalisedRatioMeasure? SecondMullionOffset, IfcShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.TransomThickness = TransomThickness;
			this.MullionThickness = MullionThickness;
			this.FirstTransomOffset = FirstTransomOffset;
			this.SecondTransomOffset = SecondTransomOffset;
			this.FirstMullionOffset = FirstMullionOffset;
			this.SecondMullionOffset = SecondMullionOffset;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				LiningDepth,
				LiningThickness,
				TransomThickness,
				MullionThickness,
				FirstTransomOffset,
				SecondTransomOffset,
				FirstMullionOffset,
				SecondMullionOffset,
				ShapeAspectStyle
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _LiningDepth { get { return LiningDepth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _LiningThickness { get { return LiningThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _TransomThickness { get { return TransomThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _MullionThickness { get { return MullionThickness; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _FirstTransomOffset { get { return FirstTransomOffset; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _SecondTransomOffset { get { return SecondTransomOffset; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _FirstMullionOffset { get { return FirstMullionOffset; } set { } }
		public virtual Global.IfcNormalisedRatioMeasure? _SecondMullionOffset { get { return SecondMullionOffset; } set { } }
		public virtual Global.IfcShapeAspect? _ShapeAspectStyle { get { return ShapeAspectStyle; } set { } }
	}
	/// <summary>
	/// ENTITY IfcWindowPanelProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// OperationType : IfcWindowPanelOperationEnum;
	/// PanelPosition : IfcWindowPanelPositionEnum;
	/// FrameDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// FrameThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// END_ENTITY;
	/// <summary>
	public class IfcWindowPanelProperties : IfcPropertySetDefinition, Global.IfcWindowPanelProperties
	{
		public virtual IfcWindowPanelOperationEnum? OperationType { get; set; }
		public virtual IfcWindowPanelPositionEnum? PanelPosition { get; set; }
		public virtual IfcPositiveLengthMeasure? FrameDepth { get; set; }
		public virtual IfcPositiveLengthMeasure? FrameThickness { get; set; }
		public virtual IfcShapeAspect? ShapeAspectStyle { get; set; }
		public IfcWindowPanelProperties() : base()
		{
		}
		public IfcWindowPanelProperties(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcWindowPanelOperationEnum? OperationType, IfcWindowPanelPositionEnum? PanelPosition, IfcPositiveLengthMeasure? FrameDepth, IfcPositiveLengthMeasure? FrameThickness, IfcShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				OperationType,
				PanelPosition,
				FrameDepth,
				FrameThickness,
				ShapeAspectStyle
			};
		}
		public virtual Global.IfcWindowPanelOperationEnum? _OperationType { get { return OperationType; } set { } }
		public virtual Global.IfcWindowPanelPositionEnum? _PanelPosition { get { return PanelPosition; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FrameDepth { get { return FrameDepth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FrameThickness { get { return FrameThickness; } set { } }
		public virtual Global.IfcShapeAspect? _ShapeAspectStyle { get { return ShapeAspectStyle; } set { } }
	}
	/// <summary>
	/// ENTITY IfcWindowStyle
	/// SUBTYPE OF (IfcTypeProduct);
	/// ConstructionType : IfcWindowStyleConstructionEnum;
	/// OperationType : IfcWindowStyleOperationEnum;
	/// ParameterTakesPrecedence : BOOLEAN;
	/// Sizeable : BOOLEAN;
	/// END_ENTITY;
	/// <summary>
	public class IfcWindowStyle : IfcTypeProduct, Global.IfcWindowStyle
	{
		public virtual IfcWindowStyleConstructionEnum? ConstructionType { get; set; }
		public virtual IfcWindowStyleOperationEnum? OperationType { get; set; }
		public virtual BOOLEAN? ParameterTakesPrecedence { get; set; }
		public virtual BOOLEAN? Sizeable { get; set; }
		public IfcWindowStyle() : base()
		{
		}
		public IfcWindowStyle(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ApplicableOccurrence, List<IfcPropertySetDefinition>? HasPropertySets, List<IfcRepresentationMap>? RepresentationMaps, IfcLabel? Tag, IfcWindowStyleConstructionEnum? ConstructionType, IfcWindowStyleOperationEnum? OperationType, BOOLEAN? ParameterTakesPrecedence, BOOLEAN? Sizeable) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag)
		{
			this.ConstructionType = ConstructionType;
			this.OperationType = OperationType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ApplicableOccurrence,
				HasPropertySets,
				RepresentationMaps,
				Tag,
				ConstructionType,
				OperationType,
				ParameterTakesPrecedence,
				Sizeable
			};
		}
		public virtual Global.IfcWindowStyleConstructionEnum? _ConstructionType { get { return ConstructionType; } set { } }
		public virtual Global.IfcWindowStyleOperationEnum? _OperationType { get { return OperationType; } set { } }
		public virtual BOOLEAN? _ParameterTakesPrecedence { get { return ParameterTakesPrecedence; } set { } }
		public virtual BOOLEAN? _Sizeable { get { return Sizeable; } set { } }
	}
	/// <summary>
	/// ENTITY IfcWorkControl
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcWorkPlan
	/// ,IfcWorkSchedule))
	/// SUBTYPE OF (IfcControl);
	/// Identifier : IfcIdentifier;
	/// CreationDate : IfcDateTimeSelect;
	/// Creators : OPTIONAL SET [1:?] OF IfcPerson;
	/// Purpose : OPTIONAL IfcLabel;
	/// Duration : OPTIONAL IfcTimeMeasure;
	/// TotalFloat : OPTIONAL IfcTimeMeasure;
	/// StartTime : IfcDateTimeSelect;
	/// FinishTime : OPTIONAL IfcDateTimeSelect;
	/// WorkControlType : OPTIONAL IfcWorkControlTypeEnum;
	/// UserDefinedControlType : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : (WorkControlType <> IfcWorkControlTypeEnum.USERDEFINED) OR
	/// ((WorkControlType = IfcWorkControlTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcWorkControl.UserDefinedControlType));
	/// END_ENTITY;
	/// <summary>
	public abstract class IfcWorkControl : IfcControl, Global.IfcWorkControl
	{
		public virtual IfcIdentifier? Identifier { get; set; }
		public virtual IfcDateTimeSelect? CreationDate { get; set; }
		public virtual List<IfcPerson>? Creators { get; set; }
		public virtual IfcLabel? Purpose { get; set; }
		public virtual IfcTimeMeasure? Duration { get; set; }
		public virtual IfcTimeMeasure? TotalFloat { get; set; }
		public virtual IfcDateTimeSelect? StartTime { get; set; }
		public virtual IfcDateTimeSelect? FinishTime { get; set; }
		public virtual IfcWorkControlTypeEnum? WorkControlType { get; set; }
		public virtual IfcLabel? UserDefinedControlType { get; set; }
		public IfcWorkControl() : base()
		{
		}
		public IfcWorkControl(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identifier, IfcDateTimeSelect? CreationDate, List<IfcPerson>? Creators, IfcLabel? Purpose, IfcTimeMeasure? Duration, IfcTimeMeasure? TotalFloat, IfcDateTimeSelect? StartTime, IfcDateTimeSelect? FinishTime, IfcWorkControlTypeEnum? WorkControlType, IfcLabel? UserDefinedControlType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.Identifier = Identifier;
			this.CreationDate = CreationDate;
			this.Creators = Creators;
			this.Purpose = Purpose;
			this.Duration = Duration;
			this.TotalFloat = TotalFloat;
			this.StartTime = StartTime;
			this.FinishTime = FinishTime;
			this.WorkControlType = WorkControlType;
			this.UserDefinedControlType = UserDefinedControlType;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identifier,
				CreationDate,
				Creators,
				Purpose,
				Duration,
				TotalFloat,
				StartTime,
				FinishTime,
				WorkControlType,
				UserDefinedControlType
			};
		}
		public virtual Global.IfcIdentifier? _Identifier { get { return Identifier; } set { } }
		public virtual Global.IfcDateTimeSelect? _CreationDate { get { return CreationDate; } set { } }
		public virtual List<Global.IfcPerson>? _Creators
		{
			get
			{
				if(Creators != null)
				{
					List<Global.IfcPerson>? items = new List<Global.IfcPerson>();
					foreach (IfcPerson item in Creators)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IfcLabel? _Purpose { get { return Purpose; } set { } }
		public virtual Global.IfcTimeMeasure? _Duration { get { return Duration; } set { } }
		public virtual Global.IfcTimeMeasure? _TotalFloat { get { return TotalFloat; } set { } }
		public virtual Global.IfcDateTimeSelect? _StartTime { get { return StartTime; } set { } }
		public virtual Global.IfcDateTimeSelect? _FinishTime { get { return FinishTime; } set { } }
		public virtual Global.IfcWorkControlTypeEnum? _WorkControlType { get { return WorkControlType; } set { } }
		public virtual Global.IfcLabel? _UserDefinedControlType { get { return UserDefinedControlType; } set { } }
	}
	/// <summary>
	/// ENTITY IfcWorkPlan
	/// SUBTYPE OF (IfcWorkControl);
	/// END_ENTITY;
	/// <summary>
	public class IfcWorkPlan : IfcWorkControl, Global.IfcWorkPlan
	{
		public IfcWorkPlan() : base()
		{
		}
		public IfcWorkPlan(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identifier, IfcDateTimeSelect? CreationDate, List<IfcPerson>? Creators, IfcLabel? Purpose, IfcTimeMeasure? Duration, IfcTimeMeasure? TotalFloat, IfcDateTimeSelect? StartTime, IfcDateTimeSelect? FinishTime, IfcWorkControlTypeEnum? WorkControlType, IfcLabel? UserDefinedControlType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identifier, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime, WorkControlType, UserDefinedControlType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identifier,
				CreationDate,
				Creators,
				Purpose,
				Duration,
				TotalFloat,
				StartTime,
				FinishTime,
				WorkControlType,
				UserDefinedControlType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcWorkSchedule
	/// SUBTYPE OF (IfcWorkControl);
	/// END_ENTITY;
	/// <summary>
	public class IfcWorkSchedule : IfcWorkControl, Global.IfcWorkSchedule
	{
		public IfcWorkSchedule() : base()
		{
		}
		public IfcWorkSchedule(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType, IfcIdentifier? Identifier, IfcDateTimeSelect? CreationDate, List<IfcPerson>? Creators, IfcLabel? Purpose, IfcTimeMeasure? Duration, IfcTimeMeasure? TotalFloat, IfcDateTimeSelect? StartTime, IfcDateTimeSelect? FinishTime, IfcWorkControlTypeEnum? WorkControlType, IfcLabel? UserDefinedControlType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identifier, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime, WorkControlType, UserDefinedControlType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType,
				Identifier,
				CreationDate,
				Creators,
				Purpose,
				Duration,
				TotalFloat,
				StartTime,
				FinishTime,
				WorkControlType,
				UserDefinedControlType
			};
		}
	}
	/// <summary>
	/// ENTITY IfcZShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// FlangeWidth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// EdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR21 : FlangeThickness < (Depth / 2.);
	/// END_ENTITY;
	/// <summary>
	public class IfcZShapeProfileDef : IfcParameterizedProfileDef, Global.IfcZShapeProfileDef
	{
		public virtual IfcPositiveLengthMeasure? Depth { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeWidth { get; set; }
		public virtual IfcPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IfcPositiveLengthMeasure? FilletRadius { get; set; }
		public virtual IfcPositiveLengthMeasure? EdgeRadius { get; set; }
		public IfcZShapeProfileDef() : base()
		{
		}
		public IfcZShapeProfileDef(IfcProfileTypeEnum? ProfileType, IfcLabel? ProfileName, IfcAxis2Placement2D? Position, IfcPositiveLengthMeasure? Depth, IfcPositiveLengthMeasure? FlangeWidth, IfcPositiveLengthMeasure? WebThickness, IfcPositiveLengthMeasure? FlangeThickness, IfcPositiveLengthMeasure? FilletRadius, IfcPositiveLengthMeasure? EdgeRadius) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				ProfileType,
				ProfileName,
				Position,
				Depth,
				FlangeWidth,
				WebThickness,
				FlangeThickness,
				FilletRadius,
				EdgeRadius
			};
		}
		public virtual Global.IfcPositiveLengthMeasure? _Depth { get { return Depth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FlangeWidth { get { return FlangeWidth; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _WebThickness { get { return WebThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FlangeThickness { get { return FlangeThickness; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _FilletRadius { get { return FilletRadius; } set { } }
		public virtual Global.IfcPositiveLengthMeasure? _EdgeRadius { get { return EdgeRadius; } set { } }
	}
	/// <summary>
	/// ENTITY IfcZone
	/// SUBTYPE OF (IfcGroup);
	/// WHERE
	/// WR1 : SIZEOF (QUERY (temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects |  NOT(('IFC2X3.IFCZONE' IN TYPEOF(temp)) OR ('IFC2X3.IFCSPACE' IN TYPEOF(temp))) )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IfcZone : IfcGroup, Global.IfcZone
	{
		public IfcZone() : base()
		{
		}
		public IfcZone(IfcGloballyUniqueId? GlobalId, IfcOwnerHistory? OwnerHistory, IfcLabel? Name, IfcText? Description, IfcLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override List<object?> GetParameters()
		{
			return new List<object?>()
			{
				GlobalId,
				OwnerHistory,
				Name,
				Description,
				ObjectType
			};
		}
	}
}
