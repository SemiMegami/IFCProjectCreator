using System;
using System.Collections.Generic;
#pragma warning disable VSSpell001 // Spell Check
namespace IFC.IFC2x3
{
	#region ---- SIMPLE DATA TYPES ----
	/// <summary>
	/// TYPE IfcAbsorbedDoseMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCAbsorbedDoseMeasure : REAL, IFCDerivedMeasureValue, Global.IFCAbsorbedDoseMeasure
	{
		public IFCAbsorbedDoseMeasure() : base () { }
		public IFCAbsorbedDoseMeasure(double value) : base (value) { }
		public static implicit operator IFCAbsorbedDoseMeasure(double value) { return new IFCAbsorbedDoseMeasure(value);}
		public static implicit operator double(IFCAbsorbedDoseMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAccelerationMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCAccelerationMeasure : REAL, IFCDerivedMeasureValue, Global.IFCAccelerationMeasure
	{
		public IFCAccelerationMeasure() : base () { }
		public IFCAccelerationMeasure(double value) : base (value) { }
		public static implicit operator IFCAccelerationMeasure(double value) { return new IFCAccelerationMeasure(value);}
		public static implicit operator double(IFCAccelerationMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAmountOfSubstanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCAmountOfSubstanceMeasure : REAL, IFCMeasureValue, Global.IFCAmountOfSubstanceMeasure
	{
		public IFCAmountOfSubstanceMeasure() : base () { }
		public IFCAmountOfSubstanceMeasure(double value) : base (value) { }
		public static implicit operator IFCAmountOfSubstanceMeasure(double value) { return new IFCAmountOfSubstanceMeasure(value);}
		public static implicit operator double(IFCAmountOfSubstanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAngularVelocityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCAngularVelocityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCAngularVelocityMeasure
	{
		public IFCAngularVelocityMeasure() : base () { }
		public IFCAngularVelocityMeasure(double value) : base (value) { }
		public static implicit operator IFCAngularVelocityMeasure(double value) { return new IFCAngularVelocityMeasure(value);}
		public static implicit operator double(IFCAngularVelocityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAreaMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCAreaMeasure : REAL, IFCMeasureValue, Global.IFCAreaMeasure
	{
		public IFCAreaMeasure() : base () { }
		public IFCAreaMeasure(double value) : base (value) { }
		public static implicit operator IFCAreaMeasure(double value) { return new IFCAreaMeasure(value);}
		public static implicit operator double(IFCAreaMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBoolean = BOOLEAN;
	/// END_TYPE;
	/// <summary>
	public class IFCBoolean : BOOLEAN, IFCSimpleValue, Global.IFCBoolean
	{
		public IFCBoolean() : base () { }
		public IFCBoolean(bool value) : base (value) { }
		public static implicit operator IFCBoolean(bool value) { return new IFCBoolean(value);}
		public static implicit operator bool(IFCBoolean value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBoxAlignment = IfcLabel;
	/// WHERE
	/// WR1 : SELF IN ['top-left', 'top-middle', 'top-right', 'middle-left', 'center', 'middle-right', 'bottom-left', 'bottom-middle', 'bottom-right'];
	/// END_TYPE;
	/// <summary>
	public class IFCBoxAlignment : IFCLabel, Global.IFCBoxAlignment
	{
		public IFCBoxAlignment() : base () { }
		public IFCBoxAlignment(string value) : base (value) { }
		public static implicit operator IFCBoxAlignment(string value) { return new IFCBoxAlignment(value);}
		public static implicit operator string(IFCBoxAlignment value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcContextDependentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCContextDependentMeasure : REAL, IFCMeasureValue, Global.IFCContextDependentMeasure
	{
		public IFCContextDependentMeasure() : base () { }
		public IFCContextDependentMeasure(double value) : base (value) { }
		public static implicit operator IFCContextDependentMeasure(double value) { return new IFCContextDependentMeasure(value);}
		public static implicit operator double(IFCContextDependentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCountMeasure = NUMBER;
	/// END_TYPE;
	/// <summary>
	public class IFCCountMeasure : NUMBER, IFCMeasureValue, Global.IFCCountMeasure
	{
		public IFCCountMeasure() : base () { }
		public IFCCountMeasure(double value) : base (value) { }
		public static implicit operator IFCCountMeasure(double value) { return new IFCCountMeasure(value);}
		public static implicit operator double(IFCCountMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCurvatureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCCurvatureMeasure : REAL, IFCDerivedMeasureValue, Global.IFCCurvatureMeasure
	{
		public IFCCurvatureMeasure() : base () { }
		public IFCCurvatureMeasure(double value) : base (value) { }
		public static implicit operator IFCCurvatureMeasure(double value) { return new IFCCurvatureMeasure(value);}
		public static implicit operator double(IFCCurvatureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDayInMonthNumber = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IFCDayInMonthNumber : INTEGER, Global.IFCDayInMonthNumber
	{
		public IFCDayInMonthNumber() : base () { }
		public IFCDayInMonthNumber(int value) : base (value) { }
		public static implicit operator IFCDayInMonthNumber(int value) { return new IFCDayInMonthNumber(value);}
		public static implicit operator int(IFCDayInMonthNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDaylightSavingHour = INTEGER;
	/// WHERE
	/// WR1 : { 0 <= SELF <= 2 };
	/// END_TYPE;
	/// <summary>
	public class IFCDaylightSavingHour : INTEGER, Global.IFCDaylightSavingHour
	{
		public IFCDaylightSavingHour() : base () { }
		public IFCDaylightSavingHour(int value) : base (value) { }
		public static implicit operator IFCDaylightSavingHour(int value) { return new IFCDaylightSavingHour(value);}
		public static implicit operator int(IFCDaylightSavingHour value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDescriptiveMeasure = STRING;
	/// END_TYPE;
	/// <summary>
	public class IFCDescriptiveMeasure : STRING, IFCMeasureValue, IFCSizeSelect, Global.IFCDescriptiveMeasure
	{
		public IFCDescriptiveMeasure() : base () { }
		public IFCDescriptiveMeasure(string value) : base (value) { }
		public static implicit operator IFCDescriptiveMeasure(string value) { return new IFCDescriptiveMeasure(value);}
		public static implicit operator string(IFCDescriptiveMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDimensionCount = INTEGER;
	/// WHERE
	/// WR1 : { 0 < SELF <= 3 };
	/// END_TYPE;
	/// <summary>
	public class IFCDimensionCount : INTEGER, Global.IFCDimensionCount
	{
		public IFCDimensionCount() : base () { }
		public IFCDimensionCount(int value) : base (value) { }
		public static implicit operator IFCDimensionCount(int value) { return new IFCDimensionCount(value);}
		public static implicit operator int(IFCDimensionCount value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoseEquivalentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCDoseEquivalentMeasure : REAL, IFCDerivedMeasureValue, Global.IFCDoseEquivalentMeasure
	{
		public IFCDoseEquivalentMeasure() : base () { }
		public IFCDoseEquivalentMeasure(double value) : base (value) { }
		public static implicit operator IFCDoseEquivalentMeasure(double value) { return new IFCDoseEquivalentMeasure(value);}
		public static implicit operator double(IFCDoseEquivalentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDynamicViscosityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCDynamicViscosityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCDynamicViscosityMeasure
	{
		public IFCDynamicViscosityMeasure() : base () { }
		public IFCDynamicViscosityMeasure(double value) : base (value) { }
		public static implicit operator IFCDynamicViscosityMeasure(double value) { return new IFCDynamicViscosityMeasure(value);}
		public static implicit operator double(IFCDynamicViscosityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricCapacitanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCElectricCapacitanceMeasure : REAL, IFCDerivedMeasureValue, Global.IFCElectricCapacitanceMeasure
	{
		public IFCElectricCapacitanceMeasure() : base () { }
		public IFCElectricCapacitanceMeasure(double value) : base (value) { }
		public static implicit operator IFCElectricCapacitanceMeasure(double value) { return new IFCElectricCapacitanceMeasure(value);}
		public static implicit operator double(IFCElectricCapacitanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricChargeMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCElectricChargeMeasure : REAL, IFCDerivedMeasureValue, Global.IFCElectricChargeMeasure
	{
		public IFCElectricChargeMeasure() : base () { }
		public IFCElectricChargeMeasure(double value) : base (value) { }
		public static implicit operator IFCElectricChargeMeasure(double value) { return new IFCElectricChargeMeasure(value);}
		public static implicit operator double(IFCElectricChargeMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricConductanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCElectricConductanceMeasure : REAL, IFCDerivedMeasureValue, Global.IFCElectricConductanceMeasure
	{
		public IFCElectricConductanceMeasure() : base () { }
		public IFCElectricConductanceMeasure(double value) : base (value) { }
		public static implicit operator IFCElectricConductanceMeasure(double value) { return new IFCElectricConductanceMeasure(value);}
		public static implicit operator double(IFCElectricConductanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricCurrentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCElectricCurrentMeasure : REAL, IFCMeasureValue, Global.IFCElectricCurrentMeasure
	{
		public IFCElectricCurrentMeasure() : base () { }
		public IFCElectricCurrentMeasure(double value) : base (value) { }
		public static implicit operator IFCElectricCurrentMeasure(double value) { return new IFCElectricCurrentMeasure(value);}
		public static implicit operator double(IFCElectricCurrentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricResistanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCElectricResistanceMeasure : REAL, IFCDerivedMeasureValue, Global.IFCElectricResistanceMeasure
	{
		public IFCElectricResistanceMeasure() : base () { }
		public IFCElectricResistanceMeasure(double value) : base (value) { }
		public static implicit operator IFCElectricResistanceMeasure(double value) { return new IFCElectricResistanceMeasure(value);}
		public static implicit operator double(IFCElectricResistanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricVoltageMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCElectricVoltageMeasure : REAL, IFCDerivedMeasureValue, Global.IFCElectricVoltageMeasure
	{
		public IFCElectricVoltageMeasure() : base () { }
		public IFCElectricVoltageMeasure(double value) : base (value) { }
		public static implicit operator IFCElectricVoltageMeasure(double value) { return new IFCElectricVoltageMeasure(value);}
		public static implicit operator double(IFCElectricVoltageMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEnergyMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCEnergyMeasure : REAL, IFCDerivedMeasureValue, Global.IFCEnergyMeasure
	{
		public IFCEnergyMeasure() : base () { }
		public IFCEnergyMeasure(double value) : base (value) { }
		public static implicit operator IFCEnergyMeasure(double value) { return new IFCEnergyMeasure(value);}
		public static implicit operator double(IFCEnergyMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFontStyle = STRING;
	/// WHERE
	/// WR1 : SELF IN ['normal','italic','oblique'];
	/// END_TYPE;
	/// <summary>
	public class IFCFontStyle : STRING, Global.IFCFontStyle
	{
		public IFCFontStyle() : base () { }
		public IFCFontStyle(string value) : base (value) { }
		public static implicit operator IFCFontStyle(string value) { return new IFCFontStyle(value);}
		public static implicit operator string(IFCFontStyle value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFontVariant = STRING;
	/// WHERE
	/// WR1 : SELF IN ['normal','small-caps'];
	/// END_TYPE;
	/// <summary>
	public class IFCFontVariant : STRING, Global.IFCFontVariant
	{
		public IFCFontVariant() : base () { }
		public IFCFontVariant(string value) : base (value) { }
		public static implicit operator IFCFontVariant(string value) { return new IFCFontVariant(value);}
		public static implicit operator string(IFCFontVariant value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFontWeight = STRING;
	/// WHERE
	/// WR1 : SELF IN ['normal','small-caps','100','200','300','400','500','600','700','800','900'];
	/// END_TYPE;
	/// <summary>
	public class IFCFontWeight : STRING, Global.IFCFontWeight
	{
		public IFCFontWeight() : base () { }
		public IFCFontWeight(string value) : base (value) { }
		public static implicit operator IFCFontWeight(string value) { return new IFCFontWeight(value);}
		public static implicit operator string(IFCFontWeight value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcForceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCForceMeasure : REAL, IFCDerivedMeasureValue, Global.IFCForceMeasure
	{
		public IFCForceMeasure() : base () { }
		public IFCForceMeasure(double value) : base (value) { }
		public static implicit operator IFCForceMeasure(double value) { return new IFCForceMeasure(value);}
		public static implicit operator double(IFCForceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFrequencyMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCFrequencyMeasure : REAL, IFCDerivedMeasureValue, Global.IFCFrequencyMeasure
	{
		public IFCFrequencyMeasure() : base () { }
		public IFCFrequencyMeasure(double value) : base (value) { }
		public static implicit operator IFCFrequencyMeasure(double value) { return new IFCFrequencyMeasure(value);}
		public static implicit operator double(IFCFrequencyMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGloballyUniqueId = STRING(22) FIXED;
	/// END_TYPE;
	/// <summary>
	public class IFCGloballyUniqueId : STRING, Global.IFCGloballyUniqueId
	{
		public IFCGloballyUniqueId() : base () { }
		public IFCGloballyUniqueId(string value) : base (value) { }
		public static implicit operator IFCGloballyUniqueId(string value) { return new IFCGloballyUniqueId(value);}
		public static implicit operator string(IFCGloballyUniqueId value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHeatFluxDensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCHeatFluxDensityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCHeatFluxDensityMeasure
	{
		public IFCHeatFluxDensityMeasure() : base () { }
		public IFCHeatFluxDensityMeasure(double value) : base (value) { }
		public static implicit operator IFCHeatFluxDensityMeasure(double value) { return new IFCHeatFluxDensityMeasure(value);}
		public static implicit operator double(IFCHeatFluxDensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHeatingValueMeasure = REAL;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IFCHeatingValueMeasure : REAL, IFCDerivedMeasureValue, Global.IFCHeatingValueMeasure
	{
		public IFCHeatingValueMeasure() : base () { }
		public IFCHeatingValueMeasure(double value) : base (value) { }
		public static implicit operator IFCHeatingValueMeasure(double value) { return new IFCHeatingValueMeasure(value);}
		public static implicit operator double(IFCHeatingValueMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHourInDay = INTEGER;
	/// WHERE
	/// WR1 : { 0 <= SELF < 24 };
	/// END_TYPE;
	/// <summary>
	public class IFCHourInDay : INTEGER, Global.IFCHourInDay
	{
		public IFCHourInDay() : base () { }
		public IFCHourInDay(int value) : base (value) { }
		public static implicit operator IFCHourInDay(int value) { return new IFCHourInDay(value);}
		public static implicit operator int(IFCHourInDay value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIdentifier = STRING;
	/// END_TYPE;
	/// <summary>
	public class IFCIdentifier : STRING, IFCSimpleValue, Global.IFCIdentifier
	{
		public IFCIdentifier() : base () { }
		public IFCIdentifier(string value) : base (value) { }
		public static implicit operator IFCIdentifier(string value) { return new IFCIdentifier(value);}
		public static implicit operator string(IFCIdentifier value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIlluminanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCIlluminanceMeasure : REAL, IFCDerivedMeasureValue, Global.IFCIlluminanceMeasure
	{
		public IFCIlluminanceMeasure() : base () { }
		public IFCIlluminanceMeasure(double value) : base (value) { }
		public static implicit operator IFCIlluminanceMeasure(double value) { return new IFCIlluminanceMeasure(value);}
		public static implicit operator double(IFCIlluminanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInductanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCInductanceMeasure : REAL, IFCDerivedMeasureValue, Global.IFCInductanceMeasure
	{
		public IFCInductanceMeasure() : base () { }
		public IFCInductanceMeasure(double value) : base (value) { }
		public static implicit operator IFCInductanceMeasure(double value) { return new IFCInductanceMeasure(value);}
		public static implicit operator double(IFCInductanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInteger = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IFCInteger : INTEGER, IFCSimpleValue, Global.IFCInteger
	{
		public IFCInteger() : base () { }
		public IFCInteger(int value) : base (value) { }
		public static implicit operator IFCInteger(int value) { return new IFCInteger(value);}
		public static implicit operator int(IFCInteger value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIntegerCountRateMeasure = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IFCIntegerCountRateMeasure : INTEGER, IFCDerivedMeasureValue, Global.IFCIntegerCountRateMeasure
	{
		public IFCIntegerCountRateMeasure() : base () { }
		public IFCIntegerCountRateMeasure(int value) : base (value) { }
		public static implicit operator IFCIntegerCountRateMeasure(int value) { return new IFCIntegerCountRateMeasure(value);}
		public static implicit operator int(IFCIntegerCountRateMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIonConcentrationMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCIonConcentrationMeasure : REAL, IFCDerivedMeasureValue, Global.IFCIonConcentrationMeasure
	{
		public IFCIonConcentrationMeasure() : base () { }
		public IFCIonConcentrationMeasure(double value) : base (value) { }
		public static implicit operator IFCIonConcentrationMeasure(double value) { return new IFCIonConcentrationMeasure(value);}
		public static implicit operator double(IFCIonConcentrationMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcIsothermalMoistureCapacityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCIsothermalMoistureCapacityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCIsothermalMoistureCapacityMeasure
	{
		public IFCIsothermalMoistureCapacityMeasure() : base () { }
		public IFCIsothermalMoistureCapacityMeasure(double value) : base (value) { }
		public static implicit operator IFCIsothermalMoistureCapacityMeasure(double value) { return new IFCIsothermalMoistureCapacityMeasure(value);}
		public static implicit operator double(IFCIsothermalMoistureCapacityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcKinematicViscosityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCKinematicViscosityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCKinematicViscosityMeasure
	{
		public IFCKinematicViscosityMeasure() : base () { }
		public IFCKinematicViscosityMeasure(double value) : base (value) { }
		public static implicit operator IFCKinematicViscosityMeasure(double value) { return new IFCKinematicViscosityMeasure(value);}
		public static implicit operator double(IFCKinematicViscosityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLabel = STRING;
	/// END_TYPE;
	/// <summary>
	public class IFCLabel : STRING, IFCConditionCriterionSelect, IFCSimpleValue, Global.IFCLabel
	{
		public IFCLabel() : base () { }
		public IFCLabel(string value) : base (value) { }
		public static implicit operator IFCLabel(string value) { return new IFCLabel(value);}
		public static implicit operator string(IFCLabel value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLengthMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCLengthMeasure : REAL, IFCMeasureValue, IFCSizeSelect, Global.IFCLengthMeasure
	{
		public IFCLengthMeasure() : base () { }
		public IFCLengthMeasure(double value) : base (value) { }
		public static implicit operator IFCLengthMeasure(double value) { return new IFCLengthMeasure(value);}
		public static implicit operator double(IFCLengthMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearForceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCLinearForceMeasure : REAL, IFCDerivedMeasureValue, Global.IFCLinearForceMeasure
	{
		public IFCLinearForceMeasure() : base () { }
		public IFCLinearForceMeasure(double value) : base (value) { }
		public static implicit operator IFCLinearForceMeasure(double value) { return new IFCLinearForceMeasure(value);}
		public static implicit operator double(IFCLinearForceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearMomentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCLinearMomentMeasure : REAL, IFCDerivedMeasureValue, Global.IFCLinearMomentMeasure
	{
		public IFCLinearMomentMeasure() : base () { }
		public IFCLinearMomentMeasure(double value) : base (value) { }
		public static implicit operator IFCLinearMomentMeasure(double value) { return new IFCLinearMomentMeasure(value);}
		public static implicit operator double(IFCLinearMomentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearStiffnessMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCLinearStiffnessMeasure : REAL, IFCDerivedMeasureValue, Global.IFCLinearStiffnessMeasure
	{
		public IFCLinearStiffnessMeasure() : base () { }
		public IFCLinearStiffnessMeasure(double value) : base (value) { }
		public static implicit operator IFCLinearStiffnessMeasure(double value) { return new IFCLinearStiffnessMeasure(value);}
		public static implicit operator double(IFCLinearStiffnessMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLinearVelocityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCLinearVelocityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCLinearVelocityMeasure
	{
		public IFCLinearVelocityMeasure() : base () { }
		public IFCLinearVelocityMeasure(double value) : base (value) { }
		public static implicit operator IFCLinearVelocityMeasure(double value) { return new IFCLinearVelocityMeasure(value);}
		public static implicit operator double(IFCLinearVelocityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLogical = LOGICAL;
	/// END_TYPE;
	/// <summary>
	public class IFCLogical : LOGICAL, IFCSimpleValue, Global.IFCLogical
	{
		public IFCLogical() : base () { }
		public IFCLogical(bool value) : base (value) { }
		public static implicit operator IFCLogical(bool value) { return new IFCLogical(value);}
		public static implicit operator bool(IFCLogical value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLuminousFluxMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCLuminousFluxMeasure : REAL, IFCDerivedMeasureValue, Global.IFCLuminousFluxMeasure
	{
		public IFCLuminousFluxMeasure() : base () { }
		public IFCLuminousFluxMeasure(double value) : base (value) { }
		public static implicit operator IFCLuminousFluxMeasure(double value) { return new IFCLuminousFluxMeasure(value);}
		public static implicit operator double(IFCLuminousFluxMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLuminousIntensityDistributionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCLuminousIntensityDistributionMeasure : REAL, IFCDerivedMeasureValue, Global.IFCLuminousIntensityDistributionMeasure
	{
		public IFCLuminousIntensityDistributionMeasure() : base () { }
		public IFCLuminousIntensityDistributionMeasure(double value) : base (value) { }
		public static implicit operator IFCLuminousIntensityDistributionMeasure(double value) { return new IFCLuminousIntensityDistributionMeasure(value);}
		public static implicit operator double(IFCLuminousIntensityDistributionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLuminousIntensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCLuminousIntensityMeasure : REAL, IFCMeasureValue, Global.IFCLuminousIntensityMeasure
	{
		public IFCLuminousIntensityMeasure() : base () { }
		public IFCLuminousIntensityMeasure(double value) : base (value) { }
		public static implicit operator IFCLuminousIntensityMeasure(double value) { return new IFCLuminousIntensityMeasure(value);}
		public static implicit operator double(IFCLuminousIntensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMagneticFluxDensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCMagneticFluxDensityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCMagneticFluxDensityMeasure
	{
		public IFCMagneticFluxDensityMeasure() : base () { }
		public IFCMagneticFluxDensityMeasure(double value) : base (value) { }
		public static implicit operator IFCMagneticFluxDensityMeasure(double value) { return new IFCMagneticFluxDensityMeasure(value);}
		public static implicit operator double(IFCMagneticFluxDensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMagneticFluxMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCMagneticFluxMeasure : REAL, IFCDerivedMeasureValue, Global.IFCMagneticFluxMeasure
	{
		public IFCMagneticFluxMeasure() : base () { }
		public IFCMagneticFluxMeasure(double value) : base (value) { }
		public static implicit operator IFCMagneticFluxMeasure(double value) { return new IFCMagneticFluxMeasure(value);}
		public static implicit operator double(IFCMagneticFluxMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassDensityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCMassDensityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCMassDensityMeasure
	{
		public IFCMassDensityMeasure() : base () { }
		public IFCMassDensityMeasure(double value) : base (value) { }
		public static implicit operator IFCMassDensityMeasure(double value) { return new IFCMassDensityMeasure(value);}
		public static implicit operator double(IFCMassDensityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassFlowRateMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCMassFlowRateMeasure : REAL, IFCDerivedMeasureValue, Global.IFCMassFlowRateMeasure
	{
		public IFCMassFlowRateMeasure() : base () { }
		public IFCMassFlowRateMeasure(double value) : base (value) { }
		public static implicit operator IFCMassFlowRateMeasure(double value) { return new IFCMassFlowRateMeasure(value);}
		public static implicit operator double(IFCMassFlowRateMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCMassMeasure : REAL, IFCMeasureValue, Global.IFCMassMeasure
	{
		public IFCMassMeasure() : base () { }
		public IFCMassMeasure(double value) : base (value) { }
		public static implicit operator IFCMassMeasure(double value) { return new IFCMassMeasure(value);}
		public static implicit operator double(IFCMassMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMassPerLengthMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCMassPerLengthMeasure : REAL, IFCDerivedMeasureValue, Global.IFCMassPerLengthMeasure
	{
		public IFCMassPerLengthMeasure() : base () { }
		public IFCMassPerLengthMeasure(double value) : base (value) { }
		public static implicit operator IFCMassPerLengthMeasure(double value) { return new IFCMassPerLengthMeasure(value);}
		public static implicit operator double(IFCMassPerLengthMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMinuteInHour = INTEGER;
	/// WHERE
	/// WR1 : {0 <= SELF <= 59 };
	/// END_TYPE;
	/// <summary>
	public class IFCMinuteInHour : INTEGER, Global.IFCMinuteInHour
	{
		public IFCMinuteInHour() : base () { }
		public IFCMinuteInHour(int value) : base (value) { }
		public static implicit operator IFCMinuteInHour(int value) { return new IFCMinuteInHour(value);}
		public static implicit operator int(IFCMinuteInHour value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfElasticityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCModulusOfElasticityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCModulusOfElasticityMeasure
	{
		public IFCModulusOfElasticityMeasure() : base () { }
		public IFCModulusOfElasticityMeasure(double value) : base (value) { }
		public static implicit operator IFCModulusOfElasticityMeasure(double value) { return new IFCModulusOfElasticityMeasure(value);}
		public static implicit operator double(IFCModulusOfElasticityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfLinearSubgradeReactionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCModulusOfLinearSubgradeReactionMeasure : REAL, IFCDerivedMeasureValue, Global.IFCModulusOfLinearSubgradeReactionMeasure
	{
		public IFCModulusOfLinearSubgradeReactionMeasure() : base () { }
		public IFCModulusOfLinearSubgradeReactionMeasure(double value) : base (value) { }
		public static implicit operator IFCModulusOfLinearSubgradeReactionMeasure(double value) { return new IFCModulusOfLinearSubgradeReactionMeasure(value);}
		public static implicit operator double(IFCModulusOfLinearSubgradeReactionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfRotationalSubgradeReactionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCModulusOfRotationalSubgradeReactionMeasure : REAL, IFCDerivedMeasureValue, Global.IFCModulusOfRotationalSubgradeReactionMeasure
	{
		public IFCModulusOfRotationalSubgradeReactionMeasure() : base () { }
		public IFCModulusOfRotationalSubgradeReactionMeasure(double value) : base (value) { }
		public static implicit operator IFCModulusOfRotationalSubgradeReactionMeasure(double value) { return new IFCModulusOfRotationalSubgradeReactionMeasure(value);}
		public static implicit operator double(IFCModulusOfRotationalSubgradeReactionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcModulusOfSubgradeReactionMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCModulusOfSubgradeReactionMeasure : REAL, IFCDerivedMeasureValue, Global.IFCModulusOfSubgradeReactionMeasure
	{
		public IFCModulusOfSubgradeReactionMeasure() : base () { }
		public IFCModulusOfSubgradeReactionMeasure(double value) : base (value) { }
		public static implicit operator IFCModulusOfSubgradeReactionMeasure(double value) { return new IFCModulusOfSubgradeReactionMeasure(value);}
		public static implicit operator double(IFCModulusOfSubgradeReactionMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMoistureDiffusivityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCMoistureDiffusivityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCMoistureDiffusivityMeasure
	{
		public IFCMoistureDiffusivityMeasure() : base () { }
		public IFCMoistureDiffusivityMeasure(double value) : base (value) { }
		public static implicit operator IFCMoistureDiffusivityMeasure(double value) { return new IFCMoistureDiffusivityMeasure(value);}
		public static implicit operator double(IFCMoistureDiffusivityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMolecularWeightMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCMolecularWeightMeasure : REAL, IFCDerivedMeasureValue, Global.IFCMolecularWeightMeasure
	{
		public IFCMolecularWeightMeasure() : base () { }
		public IFCMolecularWeightMeasure(double value) : base (value) { }
		public static implicit operator IFCMolecularWeightMeasure(double value) { return new IFCMolecularWeightMeasure(value);}
		public static implicit operator double(IFCMolecularWeightMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMomentOfInertiaMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCMomentOfInertiaMeasure : REAL, IFCDerivedMeasureValue, Global.IFCMomentOfInertiaMeasure
	{
		public IFCMomentOfInertiaMeasure() : base () { }
		public IFCMomentOfInertiaMeasure(double value) : base (value) { }
		public static implicit operator IFCMomentOfInertiaMeasure(double value) { return new IFCMomentOfInertiaMeasure(value);}
		public static implicit operator double(IFCMomentOfInertiaMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMonetaryMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCMonetaryMeasure : REAL, IFCAppliedValueSelect, IFCDerivedMeasureValue, Global.IFCMonetaryMeasure
	{
		public IFCMonetaryMeasure() : base () { }
		public IFCMonetaryMeasure(double value) : base (value) { }
		public static implicit operator IFCMonetaryMeasure(double value) { return new IFCMonetaryMeasure(value);}
		public static implicit operator double(IFCMonetaryMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMonthInYearNumber = INTEGER;
	/// WHERE
	/// WR1 : { 1<= SELF <= 12 };
	/// END_TYPE;
	/// <summary>
	public class IFCMonthInYearNumber : INTEGER, Global.IFCMonthInYearNumber
	{
		public IFCMonthInYearNumber() : base () { }
		public IFCMonthInYearNumber(int value) : base (value) { }
		public static implicit operator IFCMonthInYearNumber(int value) { return new IFCMonthInYearNumber(value);}
		public static implicit operator int(IFCMonthInYearNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcNormalisedRatioMeasure = IfcRatioMeasure;
	/// WHERE
	/// WR1 : {0.0 <= SELF <= 1.0};
	/// END_TYPE;
	/// <summary>
	public class IFCNormalisedRatioMeasure : IFCRatioMeasure, IFCColourOrFactor, IFCMeasureValue, IFCSizeSelect, Global.IFCNormalisedRatioMeasure
	{
		public IFCNormalisedRatioMeasure() : base () { }
		public IFCNormalisedRatioMeasure(double value) : base (value) { }
		public static implicit operator IFCNormalisedRatioMeasure(double value) { return new IFCNormalisedRatioMeasure(value);}
		public static implicit operator double(IFCNormalisedRatioMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcNumericMeasure = NUMBER;
	/// END_TYPE;
	/// <summary>
	public class IFCNumericMeasure : NUMBER, IFCMeasureValue, Global.IFCNumericMeasure
	{
		public IFCNumericMeasure() : base () { }
		public IFCNumericMeasure(double value) : base (value) { }
		public static implicit operator IFCNumericMeasure(double value) { return new IFCNumericMeasure(value);}
		public static implicit operator double(IFCNumericMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPHMeasure = REAL;
	/// WHERE
	/// WR21 : {0.0 <= SELF <= 14.0};
	/// END_TYPE;
	/// <summary>
	public class IFCPHMeasure : REAL, IFCDerivedMeasureValue, Global.IFCPHMeasure
	{
		public IFCPHMeasure() : base () { }
		public IFCPHMeasure(double value) : base (value) { }
		public static implicit operator IFCPHMeasure(double value) { return new IFCPHMeasure(value);}
		public static implicit operator double(IFCPHMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcParameterValue = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCParameterValue : REAL, IFCMeasureValue, IFCTrimmingSelect, Global.IFCParameterValue
	{
		public IFCParameterValue() : base () { }
		public IFCParameterValue(double value) : base (value) { }
		public static implicit operator IFCParameterValue(double value) { return new IFCParameterValue(value);}
		public static implicit operator double(IFCParameterValue value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPlanarForceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCPlanarForceMeasure : REAL, IFCDerivedMeasureValue, Global.IFCPlanarForceMeasure
	{
		public IFCPlanarForceMeasure() : base () { }
		public IFCPlanarForceMeasure(double value) : base (value) { }
		public static implicit operator IFCPlanarForceMeasure(double value) { return new IFCPlanarForceMeasure(value);}
		public static implicit operator double(IFCPlanarForceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPlaneAngleMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCPlaneAngleMeasure : REAL, IFCMeasureValue, IFCOrientationSelect, Global.IFCPlaneAngleMeasure
	{
		public IFCPlaneAngleMeasure() : base () { }
		public IFCPlaneAngleMeasure(double value) : base (value) { }
		public static implicit operator IFCPlaneAngleMeasure(double value) { return new IFCPlaneAngleMeasure(value);}
		public static implicit operator double(IFCPlaneAngleMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPositiveLengthMeasure = IfcLengthMeasure;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IFCPositiveLengthMeasure : IFCLengthMeasure, IFCHatchLineDistanceSelect, IFCMeasureValue, IFCSizeSelect, Global.IFCPositiveLengthMeasure
	{
		public IFCPositiveLengthMeasure() : base () { }
		public IFCPositiveLengthMeasure(double value) : base (value) { }
		public static implicit operator IFCPositiveLengthMeasure(double value) { return new IFCPositiveLengthMeasure(value);}
		public static implicit operator double(IFCPositiveLengthMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPositivePlaneAngleMeasure = IfcPlaneAngleMeasure;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IFCPositivePlaneAngleMeasure : IFCPlaneAngleMeasure, IFCMeasureValue, Global.IFCPositivePlaneAngleMeasure
	{
		public IFCPositivePlaneAngleMeasure() : base () { }
		public IFCPositivePlaneAngleMeasure(double value) : base (value) { }
		public static implicit operator IFCPositivePlaneAngleMeasure(double value) { return new IFCPositivePlaneAngleMeasure(value);}
		public static implicit operator double(IFCPositivePlaneAngleMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPositiveRatioMeasure = IfcRatioMeasure;
	/// WHERE
	/// WR1 : SELF > 0.;
	/// END_TYPE;
	/// <summary>
	public class IFCPositiveRatioMeasure : IFCRatioMeasure, IFCMeasureValue, IFCSizeSelect, Global.IFCPositiveRatioMeasure
	{
		public IFCPositiveRatioMeasure() : base () { }
		public IFCPositiveRatioMeasure(double value) : base (value) { }
		public static implicit operator IFCPositiveRatioMeasure(double value) { return new IFCPositiveRatioMeasure(value);}
		public static implicit operator double(IFCPositiveRatioMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPowerMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCPowerMeasure : REAL, IFCDerivedMeasureValue, Global.IFCPowerMeasure
	{
		public IFCPowerMeasure() : base () { }
		public IFCPowerMeasure(double value) : base (value) { }
		public static implicit operator IFCPowerMeasure(double value) { return new IFCPowerMeasure(value);}
		public static implicit operator double(IFCPowerMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPresentableText = STRING;
	/// END_TYPE;
	/// <summary>
	public class IFCPresentableText : STRING, Global.IFCPresentableText
	{
		public IFCPresentableText() : base () { }
		public IFCPresentableText(string value) : base (value) { }
		public static implicit operator IFCPresentableText(string value) { return new IFCPresentableText(value);}
		public static implicit operator string(IFCPresentableText value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPressureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCPressureMeasure : REAL, IFCDerivedMeasureValue, Global.IFCPressureMeasure
	{
		public IFCPressureMeasure() : base () { }
		public IFCPressureMeasure(double value) : base (value) { }
		public static implicit operator IFCPressureMeasure(double value) { return new IFCPressureMeasure(value);}
		public static implicit operator double(IFCPressureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRadioActivityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCRadioActivityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCRadioActivityMeasure
	{
		public IFCRadioActivityMeasure() : base () { }
		public IFCRadioActivityMeasure(double value) : base (value) { }
		public static implicit operator IFCRadioActivityMeasure(double value) { return new IFCRadioActivityMeasure(value);}
		public static implicit operator double(IFCRadioActivityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRatioMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCRatioMeasure : REAL, IFCAppliedValueSelect, IFCMeasureValue, IFCSizeSelect, Global.IFCRatioMeasure
	{
		public IFCRatioMeasure() : base () { }
		public IFCRatioMeasure(double value) : base (value) { }
		public static implicit operator IFCRatioMeasure(double value) { return new IFCRatioMeasure(value);}
		public static implicit operator double(IFCRatioMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReal = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCReal : REAL, IFCSimpleValue, Global.IFCReal
	{
		public IFCReal() : base () { }
		public IFCReal(double value) : base (value) { }
		public static implicit operator IFCReal(double value) { return new IFCReal(value);}
		public static implicit operator double(IFCReal value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRotationalFrequencyMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCRotationalFrequencyMeasure : REAL, IFCDerivedMeasureValue, Global.IFCRotationalFrequencyMeasure
	{
		public IFCRotationalFrequencyMeasure() : base () { }
		public IFCRotationalFrequencyMeasure(double value) : base (value) { }
		public static implicit operator IFCRotationalFrequencyMeasure(double value) { return new IFCRotationalFrequencyMeasure(value);}
		public static implicit operator double(IFCRotationalFrequencyMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRotationalMassMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCRotationalMassMeasure : REAL, IFCDerivedMeasureValue, Global.IFCRotationalMassMeasure
	{
		public IFCRotationalMassMeasure() : base () { }
		public IFCRotationalMassMeasure(double value) : base (value) { }
		public static implicit operator IFCRotationalMassMeasure(double value) { return new IFCRotationalMassMeasure(value);}
		public static implicit operator double(IFCRotationalMassMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRotationalStiffnessMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCRotationalStiffnessMeasure : REAL, IFCDerivedMeasureValue, Global.IFCRotationalStiffnessMeasure
	{
		public IFCRotationalStiffnessMeasure() : base () { }
		public IFCRotationalStiffnessMeasure(double value) : base (value) { }
		public static implicit operator IFCRotationalStiffnessMeasure(double value) { return new IFCRotationalStiffnessMeasure(value);}
		public static implicit operator double(IFCRotationalStiffnessMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSecondInMinute = REAL;
	/// WHERE
	/// WR1 : { 0. <= SELF < 60. };
	/// END_TYPE;
	/// <summary>
	public class IFCSecondInMinute : REAL, Global.IFCSecondInMinute
	{
		public IFCSecondInMinute() : base () { }
		public IFCSecondInMinute(double value) : base (value) { }
		public static implicit operator IFCSecondInMinute(double value) { return new IFCSecondInMinute(value);}
		public static implicit operator double(IFCSecondInMinute value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSectionModulusMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCSectionModulusMeasure : REAL, IFCDerivedMeasureValue, Global.IFCSectionModulusMeasure
	{
		public IFCSectionModulusMeasure() : base () { }
		public IFCSectionModulusMeasure(double value) : base (value) { }
		public static implicit operator IFCSectionModulusMeasure(double value) { return new IFCSectionModulusMeasure(value);}
		public static implicit operator double(IFCSectionModulusMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSectionalAreaIntegralMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCSectionalAreaIntegralMeasure : REAL, IFCDerivedMeasureValue, Global.IFCSectionalAreaIntegralMeasure
	{
		public IFCSectionalAreaIntegralMeasure() : base () { }
		public IFCSectionalAreaIntegralMeasure(double value) : base (value) { }
		public static implicit operator IFCSectionalAreaIntegralMeasure(double value) { return new IFCSectionalAreaIntegralMeasure(value);}
		public static implicit operator double(IFCSectionalAreaIntegralMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcShearModulusMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCShearModulusMeasure : REAL, IFCDerivedMeasureValue, Global.IFCShearModulusMeasure
	{
		public IFCShearModulusMeasure() : base () { }
		public IFCShearModulusMeasure(double value) : base (value) { }
		public static implicit operator IFCShearModulusMeasure(double value) { return new IFCShearModulusMeasure(value);}
		public static implicit operator double(IFCShearModulusMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSolidAngleMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCSolidAngleMeasure : REAL, IFCMeasureValue, Global.IFCSolidAngleMeasure
	{
		public IFCSolidAngleMeasure() : base () { }
		public IFCSolidAngleMeasure(double value) : base (value) { }
		public static implicit operator IFCSolidAngleMeasure(double value) { return new IFCSolidAngleMeasure(value);}
		public static implicit operator double(IFCSolidAngleMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSoundPowerMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCSoundPowerMeasure : REAL, IFCDerivedMeasureValue, Global.IFCSoundPowerMeasure
	{
		public IFCSoundPowerMeasure() : base () { }
		public IFCSoundPowerMeasure(double value) : base (value) { }
		public static implicit operator IFCSoundPowerMeasure(double value) { return new IFCSoundPowerMeasure(value);}
		public static implicit operator double(IFCSoundPowerMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSoundPressureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCSoundPressureMeasure : REAL, IFCDerivedMeasureValue, Global.IFCSoundPressureMeasure
	{
		public IFCSoundPressureMeasure() : base () { }
		public IFCSoundPressureMeasure(double value) : base (value) { }
		public static implicit operator IFCSoundPressureMeasure(double value) { return new IFCSoundPressureMeasure(value);}
		public static implicit operator double(IFCSoundPressureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpecificHeatCapacityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCSpecificHeatCapacityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCSpecificHeatCapacityMeasure
	{
		public IFCSpecificHeatCapacityMeasure() : base () { }
		public IFCSpecificHeatCapacityMeasure(double value) : base (value) { }
		public static implicit operator IFCSpecificHeatCapacityMeasure(double value) { return new IFCSpecificHeatCapacityMeasure(value);}
		public static implicit operator double(IFCSpecificHeatCapacityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpecularExponent = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCSpecularExponent : REAL, IFCSpecularHighlightSelect, Global.IFCSpecularExponent
	{
		public IFCSpecularExponent() : base () { }
		public IFCSpecularExponent(double value) : base (value) { }
		public static implicit operator IFCSpecularExponent(double value) { return new IFCSpecularExponent(value);}
		public static implicit operator double(IFCSpecularExponent value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpecularRoughness = REAL;
	/// WHERE
	/// WR1 : {0.0 <= SELF <= 1.0};
	/// END_TYPE;
	/// <summary>
	public class IFCSpecularRoughness : REAL, IFCSpecularHighlightSelect, Global.IFCSpecularRoughness
	{
		public IFCSpecularRoughness() : base () { }
		public IFCSpecularRoughness(double value) : base (value) { }
		public static implicit operator IFCSpecularRoughness(double value) { return new IFCSpecularRoughness(value);}
		public static implicit operator double(IFCSpecularRoughness value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTemperatureGradientMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCTemperatureGradientMeasure : REAL, IFCDerivedMeasureValue, Global.IFCTemperatureGradientMeasure
	{
		public IFCTemperatureGradientMeasure() : base () { }
		public IFCTemperatureGradientMeasure(double value) : base (value) { }
		public static implicit operator IFCTemperatureGradientMeasure(double value) { return new IFCTemperatureGradientMeasure(value);}
		public static implicit operator double(IFCTemperatureGradientMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcText = STRING;
	/// END_TYPE;
	/// <summary>
	public class IFCText : STRING, IFCMetricValueSelect, IFCSimpleValue, Global.IFCText
	{
		public IFCText() : base () { }
		public IFCText(string value) : base (value) { }
		public static implicit operator IFCText(string value) { return new IFCText(value);}
		public static implicit operator string(IFCText value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextAlignment = STRING;
	/// WHERE
	/// WR1 : SELF IN ['left', 'right', 'center', 'justify'];
	/// END_TYPE;
	/// <summary>
	public class IFCTextAlignment : STRING, Global.IFCTextAlignment
	{
		public IFCTextAlignment() : base () { }
		public IFCTextAlignment(string value) : base (value) { }
		public static implicit operator IFCTextAlignment(string value) { return new IFCTextAlignment(value);}
		public static implicit operator string(IFCTextAlignment value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextDecoration = STRING;
	/// WHERE
	/// WR1 : SELF IN ['none', 'underline', 'overline', 'line-through', 'blink'];
	/// END_TYPE;
	/// <summary>
	public class IFCTextDecoration : STRING, Global.IFCTextDecoration
	{
		public IFCTextDecoration() : base () { }
		public IFCTextDecoration(string value) : base (value) { }
		public static implicit operator IFCTextDecoration(string value) { return new IFCTextDecoration(value);}
		public static implicit operator string(IFCTextDecoration value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextFontName = STRING;
	/// END_TYPE;
	/// <summary>
	public class IFCTextFontName : STRING, Global.IFCTextFontName
	{
		public IFCTextFontName() : base () { }
		public IFCTextFontName(string value) : base (value) { }
		public static implicit operator IFCTextFontName(string value) { return new IFCTextFontName(value);}
		public static implicit operator string(IFCTextFontName value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextTransformation = STRING;
	/// WHERE
	/// WR1 : SELF IN ['capitalize', 'uppercase', 'lowercase', 'none'];
	/// END_TYPE;
	/// <summary>
	public class IFCTextTransformation : STRING, Global.IFCTextTransformation
	{
		public IFCTextTransformation() : base () { }
		public IFCTextTransformation(string value) : base (value) { }
		public static implicit operator IFCTextTransformation(string value) { return new IFCTextTransformation(value);}
		public static implicit operator string(IFCTextTransformation value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalAdmittanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCThermalAdmittanceMeasure : REAL, IFCDerivedMeasureValue, Global.IFCThermalAdmittanceMeasure
	{
		public IFCThermalAdmittanceMeasure() : base () { }
		public IFCThermalAdmittanceMeasure(double value) : base (value) { }
		public static implicit operator IFCThermalAdmittanceMeasure(double value) { return new IFCThermalAdmittanceMeasure(value);}
		public static implicit operator double(IFCThermalAdmittanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalConductivityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCThermalConductivityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCThermalConductivityMeasure
	{
		public IFCThermalConductivityMeasure() : base () { }
		public IFCThermalConductivityMeasure(double value) : base (value) { }
		public static implicit operator IFCThermalConductivityMeasure(double value) { return new IFCThermalConductivityMeasure(value);}
		public static implicit operator double(IFCThermalConductivityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalExpansionCoefficientMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCThermalExpansionCoefficientMeasure : REAL, IFCDerivedMeasureValue, Global.IFCThermalExpansionCoefficientMeasure
	{
		public IFCThermalExpansionCoefficientMeasure() : base () { }
		public IFCThermalExpansionCoefficientMeasure(double value) : base (value) { }
		public static implicit operator IFCThermalExpansionCoefficientMeasure(double value) { return new IFCThermalExpansionCoefficientMeasure(value);}
		public static implicit operator double(IFCThermalExpansionCoefficientMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalResistanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCThermalResistanceMeasure : REAL, IFCDerivedMeasureValue, Global.IFCThermalResistanceMeasure
	{
		public IFCThermalResistanceMeasure() : base () { }
		public IFCThermalResistanceMeasure(double value) : base (value) { }
		public static implicit operator IFCThermalResistanceMeasure(double value) { return new IFCThermalResistanceMeasure(value);}
		public static implicit operator double(IFCThermalResistanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalTransmittanceMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCThermalTransmittanceMeasure : REAL, IFCDerivedMeasureValue, Global.IFCThermalTransmittanceMeasure
	{
		public IFCThermalTransmittanceMeasure() : base () { }
		public IFCThermalTransmittanceMeasure(double value) : base (value) { }
		public static implicit operator IFCThermalTransmittanceMeasure(double value) { return new IFCThermalTransmittanceMeasure(value);}
		public static implicit operator double(IFCThermalTransmittanceMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermodynamicTemperatureMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCThermodynamicTemperatureMeasure : REAL, IFCMeasureValue, Global.IFCThermodynamicTemperatureMeasure
	{
		public IFCThermodynamicTemperatureMeasure() : base () { }
		public IFCThermodynamicTemperatureMeasure(double value) : base (value) { }
		public static implicit operator IFCThermodynamicTemperatureMeasure(double value) { return new IFCThermodynamicTemperatureMeasure(value);}
		public static implicit operator double(IFCThermodynamicTemperatureMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTimeMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCTimeMeasure : REAL, IFCMeasureValue, Global.IFCTimeMeasure
	{
		public IFCTimeMeasure() : base () { }
		public IFCTimeMeasure(double value) : base (value) { }
		public static implicit operator IFCTimeMeasure(double value) { return new IFCTimeMeasure(value);}
		public static implicit operator double(IFCTimeMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTimeStamp = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IFCTimeStamp : INTEGER, IFCDerivedMeasureValue, Global.IFCTimeStamp
	{
		public IFCTimeStamp() : base () { }
		public IFCTimeStamp(int value) : base (value) { }
		public static implicit operator IFCTimeStamp(int value) { return new IFCTimeStamp(value);}
		public static implicit operator int(IFCTimeStamp value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTorqueMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCTorqueMeasure : REAL, IFCDerivedMeasureValue, Global.IFCTorqueMeasure
	{
		public IFCTorqueMeasure() : base () { }
		public IFCTorqueMeasure(double value) : base (value) { }
		public static implicit operator IFCTorqueMeasure(double value) { return new IFCTorqueMeasure(value);}
		public static implicit operator double(IFCTorqueMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVaporPermeabilityMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCVaporPermeabilityMeasure : REAL, IFCDerivedMeasureValue, Global.IFCVaporPermeabilityMeasure
	{
		public IFCVaporPermeabilityMeasure() : base () { }
		public IFCVaporPermeabilityMeasure(double value) : base (value) { }
		public static implicit operator IFCVaporPermeabilityMeasure(double value) { return new IFCVaporPermeabilityMeasure(value);}
		public static implicit operator double(IFCVaporPermeabilityMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVolumeMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCVolumeMeasure : REAL, IFCMeasureValue, Global.IFCVolumeMeasure
	{
		public IFCVolumeMeasure() : base () { }
		public IFCVolumeMeasure(double value) : base (value) { }
		public static implicit operator IFCVolumeMeasure(double value) { return new IFCVolumeMeasure(value);}
		public static implicit operator double(IFCVolumeMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVolumetricFlowRateMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCVolumetricFlowRateMeasure : REAL, IFCDerivedMeasureValue, Global.IFCVolumetricFlowRateMeasure
	{
		public IFCVolumetricFlowRateMeasure() : base () { }
		public IFCVolumetricFlowRateMeasure(double value) : base (value) { }
		public static implicit operator IFCVolumetricFlowRateMeasure(double value) { return new IFCVolumetricFlowRateMeasure(value);}
		public static implicit operator double(IFCVolumetricFlowRateMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWarpingConstantMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCWarpingConstantMeasure : REAL, IFCDerivedMeasureValue, Global.IFCWarpingConstantMeasure
	{
		public IFCWarpingConstantMeasure() : base () { }
		public IFCWarpingConstantMeasure(double value) : base (value) { }
		public static implicit operator IFCWarpingConstantMeasure(double value) { return new IFCWarpingConstantMeasure(value);}
		public static implicit operator double(IFCWarpingConstantMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWarpingMomentMeasure = REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCWarpingMomentMeasure : REAL, IFCDerivedMeasureValue, Global.IFCWarpingMomentMeasure
	{
		public IFCWarpingMomentMeasure() : base () { }
		public IFCWarpingMomentMeasure(double value) : base (value) { }
		public static implicit operator IFCWarpingMomentMeasure(double value) { return new IFCWarpingMomentMeasure(value);}
		public static implicit operator double(IFCWarpingMomentMeasure value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcYearNumber = INTEGER;
	/// END_TYPE;
	/// <summary>
	public class IFCYearNumber : INTEGER, Global.IFCYearNumber
	{
		public IFCYearNumber() : base () { }
		public IFCYearNumber(int value) : base (value) { }
		public static implicit operator IFCYearNumber(int value) { return new IFCYearNumber(value);}
		public static implicit operator int(IFCYearNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcComplexNumber = ARRAY [1:2] OF REAL;
	/// END_TYPE;
	/// <summary>
	public class IFCComplexNumber : List<REAL>, Global.IFCComplexNumber
	{
		public List<double> Value
		{
			get
			{
				List<double> values = new List<double> ();
				foreach(var value in this)
				{
					values.Add(value);
				}
				return values;
			}
			set
			{
				Value = value;
			}
		}
		public IFCComplexNumber() : base () { }
		public IFCComplexNumber(List<double> value)
		{
			foreach(var v in value)
			{
				Add(v);
			}
		}
		public static implicit operator IFCComplexNumber(List<double> value) { return new IFCComplexNumber(value);}
		public static implicit operator List<double>(IFCComplexNumber value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCompoundPlaneAngleMeasure = LIST [3:4] OF INTEGER;
	/// WHERE
	/// WR1 : { -360 <= SELF[1] < 360 };
	/// WR2 : { -60 <= SELF[2] < 60 };
	/// WR3 : { -60 <= SELF[3] < 60 };
	/// WR4 : ((SELF[1] >= 0) AND (SELF[2] >= 0) AND (SELF[3] >= 0)) OR ((SELF[1] <= 0) AND (SELF[2] <= 0) AND (SELF[3] <= 0));
	/// END_TYPE;
	/// <summary>
	public class IFCCompoundPlaneAngleMeasure : List<INTEGER>, Global.IFCCompoundPlaneAngleMeasure
	{
		public List<int> Value
		{
			get
			{
				List<int> values = new List<int> ();
				foreach(var value in this)
				{
					values.Add(value);
				}
				return values;
			}
			set
			{
				Value = value;
			}
		}
		public IFCCompoundPlaneAngleMeasure() : base () { }
		public IFCCompoundPlaneAngleMeasure(List<int> value)
		{
			foreach(var v in value)
			{
				Add(v);
			}
		}
		public static implicit operator IFCCompoundPlaneAngleMeasure(List<int> value) { return new IFCCompoundPlaneAngleMeasure(value);}
		public static implicit operator List<int>(IFCCompoundPlaneAngleMeasure value) { return value.Value;}
	}
	#endregion

	#region ---- ENUMERATION TYPES ----
	/// <summary>
	/// TYPE IfcActionSourceTypeEnum = ENUMERATION OF
	/// (DEAD_LOAD_G
	/// ,COMPLETION_G1
	/// ,LIVE_LOAD_Q
	/// ,SNOW_S
	/// ,WIND_W
	/// ,PRESTRESSING_P
	/// ,SETTLEMENT_U
	/// ,TEMPERATURE_T
	/// ,EARTHQUAKE_E
	/// ,FIRE
	/// ,IMPULSE
	/// ,IMPACT
	/// ,TRANSPORT
	/// ,ERECTION
	/// ,PROPPING
	/// ,SYSTEM_IMPERFECTION
	/// ,SHRINKAGE
	/// ,CREEP
	/// ,LACK_OF_FIT
	/// ,BUOYANCY
	/// ,ICE
	/// ,CURRENT
	/// ,WAVE
	/// ,RAIN
	/// ,BRAKES
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCActionSourceTypeEnum : IFC_Enum, Global.IFCActionSourceTypeEnum
	{
		public static string DEAD_LOAD_G { get { return ".DEAD_LOAD_G."; } private set { } }
		public static string COMPLETION_G1 { get { return ".COMPLETION_G1."; } private set { } }
		public static string LIVE_LOAD_Q { get { return ".LIVE_LOAD_Q."; } private set { } }
		public static string SNOW_S { get { return ".SNOW_S."; } private set { } }
		public static string WIND_W { get { return ".WIND_W."; } private set { } }
		public static string PRESTRESSING_P { get { return ".PRESTRESSING_P."; } private set { } }
		public static string SETTLEMENT_U { get { return ".SETTLEMENT_U."; } private set { } }
		public static string TEMPERATURE_T { get { return ".TEMPERATURE_T."; } private set { } }
		public static string EARTHQUAKE_E { get { return ".EARTHQUAKE_E."; } private set { } }
		public static string FIRE { get { return ".FIRE."; } private set { } }
		public static string IMPULSE { get { return ".IMPULSE."; } private set { } }
		public static string IMPACT { get { return ".IMPACT."; } private set { } }
		public static string TRANSPORT { get { return ".TRANSPORT."; } private set { } }
		public static string ERECTION { get { return ".ERECTION."; } private set { } }
		public static string PROPPING { get { return ".PROPPING."; } private set { } }
		public static string SYSTEM_IMPERFECTION { get { return ".SYSTEM_IMPERFECTION."; } private set { } }
		public static string SHRINKAGE { get { return ".SHRINKAGE."; } private set { } }
		public static string CREEP { get { return ".CREEP."; } private set { } }
		public static string LACK_OF_FIT { get { return ".LACK_OF_FIT."; } private set { } }
		public static string BUOYANCY { get { return ".BUOYANCY."; } private set { } }
		public static string ICE { get { return ".ICE."; } private set { } }
		public static string CURRENT { get { return ".CURRENT."; } private set { } }
		public static string WAVE { get { return ".WAVE."; } private set { } }
		public static string RAIN { get { return ".RAIN."; } private set { } }
		public static string BRAKES { get { return ".BRAKES."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCActionSourceTypeEnum() { Value = ".DEAD_LOAD_G.";}
		public IFCActionSourceTypeEnum(string value) { Value = value; }
		public static implicit operator IFCActionSourceTypeEnum(string value) { return new IFCActionSourceTypeEnum(value);}
		public static implicit operator string(IFCActionSourceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcActionTypeEnum = ENUMERATION OF
	/// (PERMANENT_G
	/// ,VARIABLE_Q
	/// ,EXTRAORDINARY_A
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCActionTypeEnum : IFC_Enum, Global.IFCActionTypeEnum
	{
		public static string PERMANENT_G { get { return ".PERMANENT_G."; } private set { } }
		public static string VARIABLE_Q { get { return ".VARIABLE_Q."; } private set { } }
		public static string EXTRAORDINARY_A { get { return ".EXTRAORDINARY_A."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCActionTypeEnum() { Value = ".PERMANENT_G.";}
		public IFCActionTypeEnum(string value) { Value = value; }
		public static implicit operator IFCActionTypeEnum(string value) { return new IFCActionTypeEnum(value);}
		public static implicit operator string(IFCActionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcActuatorTypeEnum = ENUMERATION OF
	/// (ELECTRICACTUATOR
	/// ,HANDOPERATEDACTUATOR
	/// ,HYDRAULICACTUATOR
	/// ,PNEUMATICACTUATOR
	/// ,THERMOSTATICACTUATOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCActuatorTypeEnum : IFC_Enum, Global.IFCActuatorTypeEnum
	{
		public static string ELECTRICACTUATOR { get { return ".ELECTRICACTUATOR."; } private set { } }
		public static string HANDOPERATEDACTUATOR { get { return ".HANDOPERATEDACTUATOR."; } private set { } }
		public static string HYDRAULICACTUATOR { get { return ".HYDRAULICACTUATOR."; } private set { } }
		public static string PNEUMATICACTUATOR { get { return ".PNEUMATICACTUATOR."; } private set { } }
		public static string THERMOSTATICACTUATOR { get { return ".THERMOSTATICACTUATOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCActuatorTypeEnum() { Value = ".ELECTRICACTUATOR.";}
		public IFCActuatorTypeEnum(string value) { Value = value; }
		public static implicit operator IFCActuatorTypeEnum(string value) { return new IFCActuatorTypeEnum(value);}
		public static implicit operator string(IFCActuatorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAddressTypeEnum = ENUMERATION OF
	/// (OFFICE
	/// ,SITE
	/// ,HOME
	/// ,DISTRIBUTIONPOINT
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCAddressTypeEnum : IFC_Enum, Global.IFCAddressTypeEnum
	{
		public static string OFFICE { get { return ".OFFICE."; } private set { } }
		public static string SITE { get { return ".SITE."; } private set { } }
		public static string HOME { get { return ".HOME."; } private set { } }
		public static string DISTRIBUTIONPOINT { get { return ".DISTRIBUTIONPOINT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCAddressTypeEnum() { Value = ".OFFICE.";}
		public IFCAddressTypeEnum(string value) { Value = value; }
		public static implicit operator IFCAddressTypeEnum(string value) { return new IFCAddressTypeEnum(value);}
		public static implicit operator string(IFCAddressTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAheadOrBehind = ENUMERATION OF
	/// (AHEAD
	/// ,BEHIND);
	/// END_TYPE;
	/// <summary>
	public class IFCAheadOrBehind : IFC_Enum, Global.IFCAheadOrBehind
	{
		public static string AHEAD { get { return ".AHEAD."; } private set { } }
		public static string BEHIND { get { return ".BEHIND."; } private set { } }
		public string Value {get; set;}
		public IFCAheadOrBehind() { Value = ".AHEAD.";}
		public IFCAheadOrBehind(string value) { Value = value; }
		public static implicit operator IFCAheadOrBehind(string value) { return new IFCAheadOrBehind(value);}
		public static implicit operator string(IFCAheadOrBehind value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAirTerminalBoxTypeEnum = ENUMERATION OF
	/// (CONSTANTFLOW
	/// ,VARIABLEFLOWPRESSUREDEPENDANT
	/// ,VARIABLEFLOWPRESSUREINDEPENDANT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCAirTerminalBoxTypeEnum : IFC_Enum, Global.IFCAirTerminalBoxTypeEnum
	{
		public static string CONSTANTFLOW { get { return ".CONSTANTFLOW."; } private set { } }
		public static string VARIABLEFLOWPRESSUREDEPENDANT { get { return ".VARIABLEFLOWPRESSUREDEPENDANT."; } private set { } }
		public static string VARIABLEFLOWPRESSUREINDEPENDANT { get { return ".VARIABLEFLOWPRESSUREINDEPENDANT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCAirTerminalBoxTypeEnum() { Value = ".CONSTANTFLOW.";}
		public IFCAirTerminalBoxTypeEnum(string value) { Value = value; }
		public static implicit operator IFCAirTerminalBoxTypeEnum(string value) { return new IFCAirTerminalBoxTypeEnum(value);}
		public static implicit operator string(IFCAirTerminalBoxTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAirTerminalTypeEnum = ENUMERATION OF
	/// (GRILLE
	/// ,REGISTER
	/// ,DIFFUSER
	/// ,EYEBALL
	/// ,IRIS
	/// ,LINEARGRILLE
	/// ,LINEARDIFFUSER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCAirTerminalTypeEnum : IFC_Enum, Global.IFCAirTerminalTypeEnum
	{
		public static string GRILLE { get { return ".GRILLE."; } private set { } }
		public static string REGISTER { get { return ".REGISTER."; } private set { } }
		public static string DIFFUSER { get { return ".DIFFUSER."; } private set { } }
		public static string EYEBALL { get { return ".EYEBALL."; } private set { } }
		public static string IRIS { get { return ".IRIS."; } private set { } }
		public static string LINEARGRILLE { get { return ".LINEARGRILLE."; } private set { } }
		public static string LINEARDIFFUSER { get { return ".LINEARDIFFUSER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCAirTerminalTypeEnum() { Value = ".GRILLE.";}
		public IFCAirTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IFCAirTerminalTypeEnum(string value) { return new IFCAirTerminalTypeEnum(value);}
		public static implicit operator string(IFCAirTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAirToAirHeatRecoveryTypeEnum = ENUMERATION OF
	/// (FIXEDPLATECOUNTERFLOWEXCHANGER
	/// ,FIXEDPLATECROSSFLOWEXCHANGER
	/// ,FIXEDPLATEPARALLELFLOWEXCHANGER
	/// ,ROTARYWHEEL
	/// ,RUNAROUNDCOILLOOP
	/// ,HEATPIPE
	/// ,TWINTOWERENTHALPYRECOVERYLOOPS
	/// ,THERMOSIPHONSEALEDTUBEHEATEXCHANGERS
	/// ,THERMOSIPHONCOILTYPEHEATEXCHANGERS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCAirToAirHeatRecoveryTypeEnum : IFC_Enum, Global.IFCAirToAirHeatRecoveryTypeEnum
	{
		public static string FIXEDPLATECOUNTERFLOWEXCHANGER { get { return ".FIXEDPLATECOUNTERFLOWEXCHANGER."; } private set { } }
		public static string FIXEDPLATECROSSFLOWEXCHANGER { get { return ".FIXEDPLATECROSSFLOWEXCHANGER."; } private set { } }
		public static string FIXEDPLATEPARALLELFLOWEXCHANGER { get { return ".FIXEDPLATEPARALLELFLOWEXCHANGER."; } private set { } }
		public static string ROTARYWHEEL { get { return ".ROTARYWHEEL."; } private set { } }
		public static string RUNAROUNDCOILLOOP { get { return ".RUNAROUNDCOILLOOP."; } private set { } }
		public static string HEATPIPE { get { return ".HEATPIPE."; } private set { } }
		public static string TWINTOWERENTHALPYRECOVERYLOOPS { get { return ".TWINTOWERENTHALPYRECOVERYLOOPS."; } private set { } }
		public static string THERMOSIPHONSEALEDTUBEHEATEXCHANGERS { get { return ".THERMOSIPHONSEALEDTUBEHEATEXCHANGERS."; } private set { } }
		public static string THERMOSIPHONCOILTYPEHEATEXCHANGERS { get { return ".THERMOSIPHONCOILTYPEHEATEXCHANGERS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCAirToAirHeatRecoveryTypeEnum() { Value = ".FIXEDPLATECOUNTERFLOWEXCHANGER.";}
		public IFCAirToAirHeatRecoveryTypeEnum(string value) { Value = value; }
		public static implicit operator IFCAirToAirHeatRecoveryTypeEnum(string value) { return new IFCAirToAirHeatRecoveryTypeEnum(value);}
		public static implicit operator string(IFCAirToAirHeatRecoveryTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAlarmTypeEnum = ENUMERATION OF
	/// (BELL
	/// ,BREAKGLASSBUTTON
	/// ,LIGHT
	/// ,MANUALPULLBOX
	/// ,SIREN
	/// ,WHISTLE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCAlarmTypeEnum : IFC_Enum, Global.IFCAlarmTypeEnum
	{
		public static string BELL { get { return ".BELL."; } private set { } }
		public static string BREAKGLASSBUTTON { get { return ".BREAKGLASSBUTTON."; } private set { } }
		public static string LIGHT { get { return ".LIGHT."; } private set { } }
		public static string MANUALPULLBOX { get { return ".MANUALPULLBOX."; } private set { } }
		public static string SIREN { get { return ".SIREN."; } private set { } }
		public static string WHISTLE { get { return ".WHISTLE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCAlarmTypeEnum() { Value = ".BELL.";}
		public IFCAlarmTypeEnum(string value) { Value = value; }
		public static implicit operator IFCAlarmTypeEnum(string value) { return new IFCAlarmTypeEnum(value);}
		public static implicit operator string(IFCAlarmTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAnalysisModelTypeEnum = ENUMERATION OF
	/// (IN_PLANE_LOADING_2D
	/// ,OUT_PLANE_LOADING_2D
	/// ,LOADING_3D
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCAnalysisModelTypeEnum : IFC_Enum, Global.IFCAnalysisModelTypeEnum
	{
		public static string IN_PLANE_LOADING_2D { get { return ".IN_PLANE_LOADING_2D."; } private set { } }
		public static string OUT_PLANE_LOADING_2D { get { return ".OUT_PLANE_LOADING_2D."; } private set { } }
		public static string LOADING_3D { get { return ".LOADING_3D."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCAnalysisModelTypeEnum() { Value = ".IN_PLANE_LOADING_2D.";}
		public IFCAnalysisModelTypeEnum(string value) { Value = value; }
		public static implicit operator IFCAnalysisModelTypeEnum(string value) { return new IFCAnalysisModelTypeEnum(value);}
		public static implicit operator string(IFCAnalysisModelTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAnalysisTheoryTypeEnum = ENUMERATION OF
	/// (FIRST_ORDER_THEORY
	/// ,SECOND_ORDER_THEORY
	/// ,THIRD_ORDER_THEORY
	/// ,FULL_NONLINEAR_THEORY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCAnalysisTheoryTypeEnum : IFC_Enum, Global.IFCAnalysisTheoryTypeEnum
	{
		public static string FIRST_ORDER_THEORY { get { return ".FIRST_ORDER_THEORY."; } private set { } }
		public static string SECOND_ORDER_THEORY { get { return ".SECOND_ORDER_THEORY."; } private set { } }
		public static string THIRD_ORDER_THEORY { get { return ".THIRD_ORDER_THEORY."; } private set { } }
		public static string FULL_NONLINEAR_THEORY { get { return ".FULL_NONLINEAR_THEORY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCAnalysisTheoryTypeEnum() { Value = ".FIRST_ORDER_THEORY.";}
		public IFCAnalysisTheoryTypeEnum(string value) { Value = value; }
		public static implicit operator IFCAnalysisTheoryTypeEnum(string value) { return new IFCAnalysisTheoryTypeEnum(value);}
		public static implicit operator string(IFCAnalysisTheoryTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcArithmeticOperatorEnum = ENUMERATION OF
	/// (ADD
	/// ,DIVIDE
	/// ,MULTIPLY
	/// ,SUBTRACT);
	/// END_TYPE;
	/// <summary>
	public class IFCArithmeticOperatorEnum : IFC_Enum, Global.IFCArithmeticOperatorEnum
	{
		public static string ADD { get { return ".ADD."; } private set { } }
		public static string DIVIDE { get { return ".DIVIDE."; } private set { } }
		public static string MULTIPLY { get { return ".MULTIPLY."; } private set { } }
		public static string SUBTRACT { get { return ".SUBTRACT."; } private set { } }
		public string Value {get; set;}
		public IFCArithmeticOperatorEnum() { Value = ".ADD.";}
		public IFCArithmeticOperatorEnum(string value) { Value = value; }
		public static implicit operator IFCArithmeticOperatorEnum(string value) { return new IFCArithmeticOperatorEnum(value);}
		public static implicit operator string(IFCArithmeticOperatorEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcAssemblyPlaceEnum = ENUMERATION OF
	/// (SITE
	/// ,FACTORY
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCAssemblyPlaceEnum : IFC_Enum, Global.IFCAssemblyPlaceEnum
	{
		public static string SITE { get { return ".SITE."; } private set { } }
		public static string FACTORY { get { return ".FACTORY."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCAssemblyPlaceEnum() { Value = ".SITE.";}
		public IFCAssemblyPlaceEnum(string value) { Value = value; }
		public static implicit operator IFCAssemblyPlaceEnum(string value) { return new IFCAssemblyPlaceEnum(value);}
		public static implicit operator string(IFCAssemblyPlaceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBSplineCurveForm = ENUMERATION OF
	/// (POLYLINE_FORM
	/// ,CIRCULAR_ARC
	/// ,ELLIPTIC_ARC
	/// ,PARABOLIC_ARC
	/// ,HYPERBOLIC_ARC
	/// ,UNSPECIFIED);
	/// END_TYPE;
	/// <summary>
	public class IFCBSplineCurveForm : IFC_Enum, Global.IFCBSplineCurveForm
	{
		public static string POLYLINE_FORM { get { return ".POLYLINE_FORM."; } private set { } }
		public static string CIRCULAR_ARC { get { return ".CIRCULAR_ARC."; } private set { } }
		public static string ELLIPTIC_ARC { get { return ".ELLIPTIC_ARC."; } private set { } }
		public static string PARABOLIC_ARC { get { return ".PARABOLIC_ARC."; } private set { } }
		public static string HYPERBOLIC_ARC { get { return ".HYPERBOLIC_ARC."; } private set { } }
		public static string UNSPECIFIED { get { return ".UNSPECIFIED."; } private set { } }
		public string Value {get; set;}
		public IFCBSplineCurveForm() { Value = ".POLYLINE_FORM.";}
		public IFCBSplineCurveForm(string value) { Value = value; }
		public static implicit operator IFCBSplineCurveForm(string value) { return new IFCBSplineCurveForm(value);}
		public static implicit operator string(IFCBSplineCurveForm value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBeamTypeEnum = ENUMERATION OF
	/// (BEAM
	/// ,JOIST
	/// ,LINTEL
	/// ,T_BEAM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCBeamTypeEnum : IFC_Enum, Global.IFCBeamTypeEnum
	{
		public static string BEAM { get { return ".BEAM."; } private set { } }
		public static string JOIST { get { return ".JOIST."; } private set { } }
		public static string LINTEL { get { return ".LINTEL."; } private set { } }
		public static string T_BEAM { get { return ".T_BEAM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCBeamTypeEnum() { Value = ".BEAM.";}
		public IFCBeamTypeEnum(string value) { Value = value; }
		public static implicit operator IFCBeamTypeEnum(string value) { return new IFCBeamTypeEnum(value);}
		public static implicit operator string(IFCBeamTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBenchmarkEnum = ENUMERATION OF
	/// (GREATERTHAN
	/// ,GREATERTHANOREQUALTO
	/// ,LESSTHAN
	/// ,LESSTHANOREQUALTO
	/// ,EQUALTO
	/// ,NOTEQUALTO);
	/// END_TYPE;
	/// <summary>
	public class IFCBenchmarkEnum : IFC_Enum, Global.IFCBenchmarkEnum
	{
		public static string GREATERTHAN { get { return ".GREATERTHAN."; } private set { } }
		public static string GREATERTHANOREQUALTO { get { return ".GREATERTHANOREQUALTO."; } private set { } }
		public static string LESSTHAN { get { return ".LESSTHAN."; } private set { } }
		public static string LESSTHANOREQUALTO { get { return ".LESSTHANOREQUALTO."; } private set { } }
		public static string EQUALTO { get { return ".EQUALTO."; } private set { } }
		public static string NOTEQUALTO { get { return ".NOTEQUALTO."; } private set { } }
		public string Value {get; set;}
		public IFCBenchmarkEnum() { Value = ".GREATERTHAN.";}
		public IFCBenchmarkEnum(string value) { Value = value; }
		public static implicit operator IFCBenchmarkEnum(string value) { return new IFCBenchmarkEnum(value);}
		public static implicit operator string(IFCBenchmarkEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBoilerTypeEnum = ENUMERATION OF
	/// (WATER
	/// ,STEAM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCBoilerTypeEnum : IFC_Enum, Global.IFCBoilerTypeEnum
	{
		public static string WATER { get { return ".WATER."; } private set { } }
		public static string STEAM { get { return ".STEAM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCBoilerTypeEnum() { Value = ".WATER.";}
		public IFCBoilerTypeEnum(string value) { Value = value; }
		public static implicit operator IFCBoilerTypeEnum(string value) { return new IFCBoilerTypeEnum(value);}
		public static implicit operator string(IFCBoilerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBooleanOperator = ENUMERATION OF
	/// (UNION
	/// ,INTERSECTION
	/// ,DIFFERENCE);
	/// END_TYPE;
	/// <summary>
	public class IFCBooleanOperator : IFC_Enum, Global.IFCBooleanOperator
	{
		public static string UNION { get { return ".UNION."; } private set { } }
		public static string INTERSECTION { get { return ".INTERSECTION."; } private set { } }
		public static string DIFFERENCE { get { return ".DIFFERENCE."; } private set { } }
		public string Value {get; set;}
		public IFCBooleanOperator() { Value = ".UNION.";}
		public IFCBooleanOperator(string value) { Value = value; }
		public static implicit operator IFCBooleanOperator(string value) { return new IFCBooleanOperator(value);}
		public static implicit operator string(IFCBooleanOperator value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcBuildingElementProxyTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCBuildingElementProxyTypeEnum : IFC_Enum, Global.IFCBuildingElementProxyTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCBuildingElementProxyTypeEnum() { Value = ".USERDEFINED.";}
		public IFCBuildingElementProxyTypeEnum(string value) { Value = value; }
		public static implicit operator IFCBuildingElementProxyTypeEnum(string value) { return new IFCBuildingElementProxyTypeEnum(value);}
		public static implicit operator string(IFCBuildingElementProxyTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCableCarrierFittingTypeEnum = ENUMERATION OF
	/// (BEND
	/// ,CROSS
	/// ,REDUCER
	/// ,TEE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCCableCarrierFittingTypeEnum : IFC_Enum, Global.IFCCableCarrierFittingTypeEnum
	{
		public static string BEND { get { return ".BEND."; } private set { } }
		public static string CROSS { get { return ".CROSS."; } private set { } }
		public static string REDUCER { get { return ".REDUCER."; } private set { } }
		public static string TEE { get { return ".TEE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCCableCarrierFittingTypeEnum() { Value = ".BEND.";}
		public IFCCableCarrierFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IFCCableCarrierFittingTypeEnum(string value) { return new IFCCableCarrierFittingTypeEnum(value);}
		public static implicit operator string(IFCCableCarrierFittingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCableCarrierSegmentTypeEnum = ENUMERATION OF
	/// (CABLELADDERSEGMENT
	/// ,CABLETRAYSEGMENT
	/// ,CABLETRUNKINGSEGMENT
	/// ,CONDUITSEGMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCCableCarrierSegmentTypeEnum : IFC_Enum, Global.IFCCableCarrierSegmentTypeEnum
	{
		public static string CABLELADDERSEGMENT { get { return ".CABLELADDERSEGMENT."; } private set { } }
		public static string CABLETRAYSEGMENT { get { return ".CABLETRAYSEGMENT."; } private set { } }
		public static string CABLETRUNKINGSEGMENT { get { return ".CABLETRUNKINGSEGMENT."; } private set { } }
		public static string CONDUITSEGMENT { get { return ".CONDUITSEGMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCCableCarrierSegmentTypeEnum() { Value = ".CABLELADDERSEGMENT.";}
		public IFCCableCarrierSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IFCCableCarrierSegmentTypeEnum(string value) { return new IFCCableCarrierSegmentTypeEnum(value);}
		public static implicit operator string(IFCCableCarrierSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCableSegmentTypeEnum = ENUMERATION OF
	/// (CABLESEGMENT
	/// ,CONDUCTORSEGMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCCableSegmentTypeEnum : IFC_Enum, Global.IFCCableSegmentTypeEnum
	{
		public static string CABLESEGMENT { get { return ".CABLESEGMENT."; } private set { } }
		public static string CONDUCTORSEGMENT { get { return ".CONDUCTORSEGMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCCableSegmentTypeEnum() { Value = ".CABLESEGMENT.";}
		public IFCCableSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IFCCableSegmentTypeEnum(string value) { return new IFCCableSegmentTypeEnum(value);}
		public static implicit operator string(IFCCableSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcChangeActionEnum = ENUMERATION OF
	/// (NOCHANGE
	/// ,MODIFIED
	/// ,ADDED
	/// ,DELETED
	/// ,MODIFIEDADDED
	/// ,MODIFIEDDELETED);
	/// END_TYPE;
	/// <summary>
	public class IFCChangeActionEnum : IFC_Enum, Global.IFCChangeActionEnum
	{
		public static string NOCHANGE { get { return ".NOCHANGE."; } private set { } }
		public static string MODIFIED { get { return ".MODIFIED."; } private set { } }
		public static string ADDED { get { return ".ADDED."; } private set { } }
		public static string DELETED { get { return ".DELETED."; } private set { } }
		public static string MODIFIEDADDED { get { return ".MODIFIEDADDED."; } private set { } }
		public static string MODIFIEDDELETED { get { return ".MODIFIEDDELETED."; } private set { } }
		public string Value {get; set;}
		public IFCChangeActionEnum() { Value = ".NOCHANGE.";}
		public IFCChangeActionEnum(string value) { Value = value; }
		public static implicit operator IFCChangeActionEnum(string value) { return new IFCChangeActionEnum(value);}
		public static implicit operator string(IFCChangeActionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcChillerTypeEnum = ENUMERATION OF
	/// (AIRCOOLED
	/// ,WATERCOOLED
	/// ,HEATRECOVERY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCChillerTypeEnum : IFC_Enum, Global.IFCChillerTypeEnum
	{
		public static string AIRCOOLED { get { return ".AIRCOOLED."; } private set { } }
		public static string WATERCOOLED { get { return ".WATERCOOLED."; } private set { } }
		public static string HEATRECOVERY { get { return ".HEATRECOVERY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCChillerTypeEnum() { Value = ".AIRCOOLED.";}
		public IFCChillerTypeEnum(string value) { Value = value; }
		public static implicit operator IFCChillerTypeEnum(string value) { return new IFCChillerTypeEnum(value);}
		public static implicit operator string(IFCChillerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCoilTypeEnum = ENUMERATION OF
	/// (DXCOOLINGCOIL
	/// ,WATERCOOLINGCOIL
	/// ,STEAMHEATINGCOIL
	/// ,WATERHEATINGCOIL
	/// ,ELECTRICHEATINGCOIL
	/// ,GASHEATINGCOIL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCCoilTypeEnum : IFC_Enum, Global.IFCCoilTypeEnum
	{
		public static string DXCOOLINGCOIL { get { return ".DXCOOLINGCOIL."; } private set { } }
		public static string WATERCOOLINGCOIL { get { return ".WATERCOOLINGCOIL."; } private set { } }
		public static string STEAMHEATINGCOIL { get { return ".STEAMHEATINGCOIL."; } private set { } }
		public static string WATERHEATINGCOIL { get { return ".WATERHEATINGCOIL."; } private set { } }
		public static string ELECTRICHEATINGCOIL { get { return ".ELECTRICHEATINGCOIL."; } private set { } }
		public static string GASHEATINGCOIL { get { return ".GASHEATINGCOIL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCCoilTypeEnum() { Value = ".DXCOOLINGCOIL.";}
		public IFCCoilTypeEnum(string value) { Value = value; }
		public static implicit operator IFCCoilTypeEnum(string value) { return new IFCCoilTypeEnum(value);}
		public static implicit operator string(IFCCoilTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcColumnTypeEnum = ENUMERATION OF
	/// (COLUMN
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCColumnTypeEnum : IFC_Enum, Global.IFCColumnTypeEnum
	{
		public static string COLUMN { get { return ".COLUMN."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCColumnTypeEnum() { Value = ".COLUMN.";}
		public IFCColumnTypeEnum(string value) { Value = value; }
		public static implicit operator IFCColumnTypeEnum(string value) { return new IFCColumnTypeEnum(value);}
		public static implicit operator string(IFCColumnTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCompressorTypeEnum = ENUMERATION OF
	/// (DYNAMIC
	/// ,RECIPROCATING
	/// ,ROTARY
	/// ,SCROLL
	/// ,TROCHOIDAL
	/// ,SINGLESTAGE
	/// ,BOOSTER
	/// ,OPENTYPE
	/// ,HERMETIC
	/// ,SEMIHERMETIC
	/// ,WELDEDSHELLHERMETIC
	/// ,ROLLINGPISTON
	/// ,ROTARYVANE
	/// ,SINGLESCREW
	/// ,TWINSCREW
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCCompressorTypeEnum : IFC_Enum, Global.IFCCompressorTypeEnum
	{
		public static string DYNAMIC { get { return ".DYNAMIC."; } private set { } }
		public static string RECIPROCATING { get { return ".RECIPROCATING."; } private set { } }
		public static string ROTARY { get { return ".ROTARY."; } private set { } }
		public static string SCROLL { get { return ".SCROLL."; } private set { } }
		public static string TROCHOIDAL { get { return ".TROCHOIDAL."; } private set { } }
		public static string SINGLESTAGE { get { return ".SINGLESTAGE."; } private set { } }
		public static string BOOSTER { get { return ".BOOSTER."; } private set { } }
		public static string OPENTYPE { get { return ".OPENTYPE."; } private set { } }
		public static string HERMETIC { get { return ".HERMETIC."; } private set { } }
		public static string SEMIHERMETIC { get { return ".SEMIHERMETIC."; } private set { } }
		public static string WELDEDSHELLHERMETIC { get { return ".WELDEDSHELLHERMETIC."; } private set { } }
		public static string ROLLINGPISTON { get { return ".ROLLINGPISTON."; } private set { } }
		public static string ROTARYVANE { get { return ".ROTARYVANE."; } private set { } }
		public static string SINGLESCREW { get { return ".SINGLESCREW."; } private set { } }
		public static string TWINSCREW { get { return ".TWINSCREW."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCCompressorTypeEnum() { Value = ".DYNAMIC.";}
		public IFCCompressorTypeEnum(string value) { Value = value; }
		public static implicit operator IFCCompressorTypeEnum(string value) { return new IFCCompressorTypeEnum(value);}
		public static implicit operator string(IFCCompressorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCondenserTypeEnum = ENUMERATION OF
	/// (WATERCOOLEDSHELLTUBE
	/// ,WATERCOOLEDSHELLCOIL
	/// ,WATERCOOLEDTUBEINTUBE
	/// ,WATERCOOLEDBRAZEDPLATE
	/// ,AIRCOOLED
	/// ,EVAPORATIVECOOLED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCCondenserTypeEnum : IFC_Enum, Global.IFCCondenserTypeEnum
	{
		public static string WATERCOOLEDSHELLTUBE { get { return ".WATERCOOLEDSHELLTUBE."; } private set { } }
		public static string WATERCOOLEDSHELLCOIL { get { return ".WATERCOOLEDSHELLCOIL."; } private set { } }
		public static string WATERCOOLEDTUBEINTUBE { get { return ".WATERCOOLEDTUBEINTUBE."; } private set { } }
		public static string WATERCOOLEDBRAZEDPLATE { get { return ".WATERCOOLEDBRAZEDPLATE."; } private set { } }
		public static string AIRCOOLED { get { return ".AIRCOOLED."; } private set { } }
		public static string EVAPORATIVECOOLED { get { return ".EVAPORATIVECOOLED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCCondenserTypeEnum() { Value = ".WATERCOOLEDSHELLTUBE.";}
		public IFCCondenserTypeEnum(string value) { Value = value; }
		public static implicit operator IFCCondenserTypeEnum(string value) { return new IFCCondenserTypeEnum(value);}
		public static implicit operator string(IFCCondenserTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcConnectionTypeEnum = ENUMERATION OF
	/// (ATPATH
	/// ,ATSTART
	/// ,ATEND
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCConnectionTypeEnum : IFC_Enum, Global.IFCConnectionTypeEnum
	{
		public static string ATPATH { get { return ".ATPATH."; } private set { } }
		public static string ATSTART { get { return ".ATSTART."; } private set { } }
		public static string ATEND { get { return ".ATEND."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCConnectionTypeEnum() { Value = ".ATPATH.";}
		public IFCConnectionTypeEnum(string value) { Value = value; }
		public static implicit operator IFCConnectionTypeEnum(string value) { return new IFCConnectionTypeEnum(value);}
		public static implicit operator string(IFCConnectionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcConstraintEnum = ENUMERATION OF
	/// (HARD
	/// ,SOFT
	/// ,ADVISORY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCConstraintEnum : IFC_Enum, Global.IFCConstraintEnum
	{
		public static string HARD { get { return ".HARD."; } private set { } }
		public static string SOFT { get { return ".SOFT."; } private set { } }
		public static string ADVISORY { get { return ".ADVISORY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCConstraintEnum() { Value = ".HARD.";}
		public IFCConstraintEnum(string value) { Value = value; }
		public static implicit operator IFCConstraintEnum(string value) { return new IFCConstraintEnum(value);}
		public static implicit operator string(IFCConstraintEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcControllerTypeEnum = ENUMERATION OF
	/// (FLOATING
	/// ,PROPORTIONAL
	/// ,PROPORTIONALINTEGRAL
	/// ,PROPORTIONALINTEGRALDERIVATIVE
	/// ,TIMEDTWOPOSITION
	/// ,TWOPOSITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCControllerTypeEnum : IFC_Enum, Global.IFCControllerTypeEnum
	{
		public static string FLOATING { get { return ".FLOATING."; } private set { } }
		public static string PROPORTIONAL { get { return ".PROPORTIONAL."; } private set { } }
		public static string PROPORTIONALINTEGRAL { get { return ".PROPORTIONALINTEGRAL."; } private set { } }
		public static string PROPORTIONALINTEGRALDERIVATIVE { get { return ".PROPORTIONALINTEGRALDERIVATIVE."; } private set { } }
		public static string TIMEDTWOPOSITION { get { return ".TIMEDTWOPOSITION."; } private set { } }
		public static string TWOPOSITION { get { return ".TWOPOSITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCControllerTypeEnum() { Value = ".FLOATING.";}
		public IFCControllerTypeEnum(string value) { Value = value; }
		public static implicit operator IFCControllerTypeEnum(string value) { return new IFCControllerTypeEnum(value);}
		public static implicit operator string(IFCControllerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCooledBeamTypeEnum = ENUMERATION OF
	/// (ACTIVE
	/// ,PASSIVE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCCooledBeamTypeEnum : IFC_Enum, Global.IFCCooledBeamTypeEnum
	{
		public static string ACTIVE { get { return ".ACTIVE."; } private set { } }
		public static string PASSIVE { get { return ".PASSIVE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCCooledBeamTypeEnum() { Value = ".ACTIVE.";}
		public IFCCooledBeamTypeEnum(string value) { Value = value; }
		public static implicit operator IFCCooledBeamTypeEnum(string value) { return new IFCCooledBeamTypeEnum(value);}
		public static implicit operator string(IFCCooledBeamTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCoolingTowerTypeEnum = ENUMERATION OF
	/// (NATURALDRAFT
	/// ,MECHANICALINDUCEDDRAFT
	/// ,MECHANICALFORCEDDRAFT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCCoolingTowerTypeEnum : IFC_Enum, Global.IFCCoolingTowerTypeEnum
	{
		public static string NATURALDRAFT { get { return ".NATURALDRAFT."; } private set { } }
		public static string MECHANICALINDUCEDDRAFT { get { return ".MECHANICALINDUCEDDRAFT."; } private set { } }
		public static string MECHANICALFORCEDDRAFT { get { return ".MECHANICALFORCEDDRAFT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCCoolingTowerTypeEnum() { Value = ".NATURALDRAFT.";}
		public IFCCoolingTowerTypeEnum(string value) { Value = value; }
		public static implicit operator IFCCoolingTowerTypeEnum(string value) { return new IFCCoolingTowerTypeEnum(value);}
		public static implicit operator string(IFCCoolingTowerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCostScheduleTypeEnum = ENUMERATION OF
	/// (BUDGET
	/// ,COSTPLAN
	/// ,ESTIMATE
	/// ,TENDER
	/// ,PRICEDBILLOFQUANTITIES
	/// ,UNPRICEDBILLOFQUANTITIES
	/// ,SCHEDULEOFRATES
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCCostScheduleTypeEnum : IFC_Enum, Global.IFCCostScheduleTypeEnum
	{
		public static string BUDGET { get { return ".BUDGET."; } private set { } }
		public static string COSTPLAN { get { return ".COSTPLAN."; } private set { } }
		public static string ESTIMATE { get { return ".ESTIMATE."; } private set { } }
		public static string TENDER { get { return ".TENDER."; } private set { } }
		public static string PRICEDBILLOFQUANTITIES { get { return ".PRICEDBILLOFQUANTITIES."; } private set { } }
		public static string UNPRICEDBILLOFQUANTITIES { get { return ".UNPRICEDBILLOFQUANTITIES."; } private set { } }
		public static string SCHEDULEOFRATES { get { return ".SCHEDULEOFRATES."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCCostScheduleTypeEnum() { Value = ".BUDGET.";}
		public IFCCostScheduleTypeEnum(string value) { Value = value; }
		public static implicit operator IFCCostScheduleTypeEnum(string value) { return new IFCCostScheduleTypeEnum(value);}
		public static implicit operator string(IFCCostScheduleTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCoveringTypeEnum = ENUMERATION OF
	/// (CEILING
	/// ,FLOORING
	/// ,CLADDING
	/// ,ROOFING
	/// ,INSULATION
	/// ,MEMBRANE
	/// ,SLEEVING
	/// ,WRAPPING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCCoveringTypeEnum : IFC_Enum, Global.IFCCoveringTypeEnum
	{
		public static string CEILING { get { return ".CEILING."; } private set { } }
		public static string FLOORING { get { return ".FLOORING."; } private set { } }
		public static string CLADDING { get { return ".CLADDING."; } private set { } }
		public static string ROOFING { get { return ".ROOFING."; } private set { } }
		public static string INSULATION { get { return ".INSULATION."; } private set { } }
		public static string MEMBRANE { get { return ".MEMBRANE."; } private set { } }
		public static string SLEEVING { get { return ".SLEEVING."; } private set { } }
		public static string WRAPPING { get { return ".WRAPPING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCCoveringTypeEnum() { Value = ".CEILING.";}
		public IFCCoveringTypeEnum(string value) { Value = value; }
		public static implicit operator IFCCoveringTypeEnum(string value) { return new IFCCoveringTypeEnum(value);}
		public static implicit operator string(IFCCoveringTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCurrencyEnum = ENUMERATION OF
	/// (AED
	/// ,AES
	/// ,ATS
	/// ,AUD
	/// ,BBD
	/// ,BEG
	/// ,BGL
	/// ,BHD
	/// ,BMD
	/// ,BND
	/// ,BRL
	/// ,BSD
	/// ,BWP
	/// ,BZD
	/// ,CAD
	/// ,CBD
	/// ,CHF
	/// ,CLP
	/// ,CNY
	/// ,CYS
	/// ,CZK
	/// ,DDP
	/// ,DEM
	/// ,DKK
	/// ,EGL
	/// ,EST
	/// ,EUR
	/// ,FAK
	/// ,FIM
	/// ,FJD
	/// ,FKP
	/// ,FRF
	/// ,GBP
	/// ,GIP
	/// ,GMD
	/// ,GRX
	/// ,HKD
	/// ,HUF
	/// ,ICK
	/// ,IDR
	/// ,ILS
	/// ,INR
	/// ,IRP
	/// ,ITL
	/// ,JMD
	/// ,JOD
	/// ,JPY
	/// ,KES
	/// ,KRW
	/// ,KWD
	/// ,KYD
	/// ,LKR
	/// ,LUF
	/// ,MTL
	/// ,MUR
	/// ,MXN
	/// ,MYR
	/// ,NLG
	/// ,NZD
	/// ,OMR
	/// ,PGK
	/// ,PHP
	/// ,PKR
	/// ,PLN
	/// ,PTN
	/// ,QAR
	/// ,RUR
	/// ,SAR
	/// ,SCR
	/// ,SEK
	/// ,SGD
	/// ,SKP
	/// ,THB
	/// ,TRL
	/// ,TTD
	/// ,TWD
	/// ,USD
	/// ,VEB
	/// ,VND
	/// ,XEU
	/// ,ZAR
	/// ,ZWD
	/// ,NOK);
	/// END_TYPE;
	/// <summary>
	public class IFCCurrencyEnum : IFC_Enum, Global.IFCCurrencyEnum
	{
		public static string AED { get { return ".AED."; } private set { } }
		public static string AES { get { return ".AES."; } private set { } }
		public static string ATS { get { return ".ATS."; } private set { } }
		public static string AUD { get { return ".AUD."; } private set { } }
		public static string BBD { get { return ".BBD."; } private set { } }
		public static string BEG { get { return ".BEG."; } private set { } }
		public static string BGL { get { return ".BGL."; } private set { } }
		public static string BHD { get { return ".BHD."; } private set { } }
		public static string BMD { get { return ".BMD."; } private set { } }
		public static string BND { get { return ".BND."; } private set { } }
		public static string BRL { get { return ".BRL."; } private set { } }
		public static string BSD { get { return ".BSD."; } private set { } }
		public static string BWP { get { return ".BWP."; } private set { } }
		public static string BZD { get { return ".BZD."; } private set { } }
		public static string CAD { get { return ".CAD."; } private set { } }
		public static string CBD { get { return ".CBD."; } private set { } }
		public static string CHF { get { return ".CHF."; } private set { } }
		public static string CLP { get { return ".CLP."; } private set { } }
		public static string CNY { get { return ".CNY."; } private set { } }
		public static string CYS { get { return ".CYS."; } private set { } }
		public static string CZK { get { return ".CZK."; } private set { } }
		public static string DDP { get { return ".DDP."; } private set { } }
		public static string DEM { get { return ".DEM."; } private set { } }
		public static string DKK { get { return ".DKK."; } private set { } }
		public static string EGL { get { return ".EGL."; } private set { } }
		public static string EST { get { return ".EST."; } private set { } }
		public static string EUR { get { return ".EUR."; } private set { } }
		public static string FAK { get { return ".FAK."; } private set { } }
		public static string FIM { get { return ".FIM."; } private set { } }
		public static string FJD { get { return ".FJD."; } private set { } }
		public static string FKP { get { return ".FKP."; } private set { } }
		public static string FRF { get { return ".FRF."; } private set { } }
		public static string GBP { get { return ".GBP."; } private set { } }
		public static string GIP { get { return ".GIP."; } private set { } }
		public static string GMD { get { return ".GMD."; } private set { } }
		public static string GRX { get { return ".GRX."; } private set { } }
		public static string HKD { get { return ".HKD."; } private set { } }
		public static string HUF { get { return ".HUF."; } private set { } }
		public static string ICK { get { return ".ICK."; } private set { } }
		public static string IDR { get { return ".IDR."; } private set { } }
		public static string ILS { get { return ".ILS."; } private set { } }
		public static string INR { get { return ".INR."; } private set { } }
		public static string IRP { get { return ".IRP."; } private set { } }
		public static string ITL { get { return ".ITL."; } private set { } }
		public static string JMD { get { return ".JMD."; } private set { } }
		public static string JOD { get { return ".JOD."; } private set { } }
		public static string JPY { get { return ".JPY."; } private set { } }
		public static string KES { get { return ".KES."; } private set { } }
		public static string KRW { get { return ".KRW."; } private set { } }
		public static string KWD { get { return ".KWD."; } private set { } }
		public static string KYD { get { return ".KYD."; } private set { } }
		public static string LKR { get { return ".LKR."; } private set { } }
		public static string LUF { get { return ".LUF."; } private set { } }
		public static string MTL { get { return ".MTL."; } private set { } }
		public static string MUR { get { return ".MUR."; } private set { } }
		public static string MXN { get { return ".MXN."; } private set { } }
		public static string MYR { get { return ".MYR."; } private set { } }
		public static string NLG { get { return ".NLG."; } private set { } }
		public static string NZD { get { return ".NZD."; } private set { } }
		public static string OMR { get { return ".OMR."; } private set { } }
		public static string PGK { get { return ".PGK."; } private set { } }
		public static string PHP { get { return ".PHP."; } private set { } }
		public static string PKR { get { return ".PKR."; } private set { } }
		public static string PLN { get { return ".PLN."; } private set { } }
		public static string PTN { get { return ".PTN."; } private set { } }
		public static string QAR { get { return ".QAR."; } private set { } }
		public static string RUR { get { return ".RUR."; } private set { } }
		public static string SAR { get { return ".SAR."; } private set { } }
		public static string SCR { get { return ".SCR."; } private set { } }
		public static string SEK { get { return ".SEK."; } private set { } }
		public static string SGD { get { return ".SGD."; } private set { } }
		public static string SKP { get { return ".SKP."; } private set { } }
		public static string THB { get { return ".THB."; } private set { } }
		public static string TRL { get { return ".TRL."; } private set { } }
		public static string TTD { get { return ".TTD."; } private set { } }
		public static string TWD { get { return ".TWD."; } private set { } }
		public static string USD { get { return ".USD."; } private set { } }
		public static string VEB { get { return ".VEB."; } private set { } }
		public static string VND { get { return ".VND."; } private set { } }
		public static string XEU { get { return ".XEU."; } private set { } }
		public static string ZAR { get { return ".ZAR."; } private set { } }
		public static string ZWD { get { return ".ZWD."; } private set { } }
		public static string NOK { get { return ".NOK."; } private set { } }
		public string Value {get; set;}
		public IFCCurrencyEnum() { Value = ".AED.";}
		public IFCCurrencyEnum(string value) { Value = value; }
		public static implicit operator IFCCurrencyEnum(string value) { return new IFCCurrencyEnum(value);}
		public static implicit operator string(IFCCurrencyEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcCurtainWallTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCCurtainWallTypeEnum : IFC_Enum, Global.IFCCurtainWallTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCCurtainWallTypeEnum() { Value = ".USERDEFINED.";}
		public IFCCurtainWallTypeEnum(string value) { Value = value; }
		public static implicit operator IFCCurtainWallTypeEnum(string value) { return new IFCCurtainWallTypeEnum(value);}
		public static implicit operator string(IFCCurtainWallTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDamperTypeEnum = ENUMERATION OF
	/// (CONTROLDAMPER
	/// ,FIREDAMPER
	/// ,SMOKEDAMPER
	/// ,FIRESMOKEDAMPER
	/// ,BACKDRAFTDAMPER
	/// ,RELIEFDAMPER
	/// ,BLASTDAMPER
	/// ,GRAVITYDAMPER
	/// ,GRAVITYRELIEFDAMPER
	/// ,BALANCINGDAMPER
	/// ,FUMEHOODEXHAUST
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDamperTypeEnum : IFC_Enum, Global.IFCDamperTypeEnum
	{
		public static string CONTROLDAMPER { get { return ".CONTROLDAMPER."; } private set { } }
		public static string FIREDAMPER { get { return ".FIREDAMPER."; } private set { } }
		public static string SMOKEDAMPER { get { return ".SMOKEDAMPER."; } private set { } }
		public static string FIRESMOKEDAMPER { get { return ".FIRESMOKEDAMPER."; } private set { } }
		public static string BACKDRAFTDAMPER { get { return ".BACKDRAFTDAMPER."; } private set { } }
		public static string RELIEFDAMPER { get { return ".RELIEFDAMPER."; } private set { } }
		public static string BLASTDAMPER { get { return ".BLASTDAMPER."; } private set { } }
		public static string GRAVITYDAMPER { get { return ".GRAVITYDAMPER."; } private set { } }
		public static string GRAVITYRELIEFDAMPER { get { return ".GRAVITYRELIEFDAMPER."; } private set { } }
		public static string BALANCINGDAMPER { get { return ".BALANCINGDAMPER."; } private set { } }
		public static string FUMEHOODEXHAUST { get { return ".FUMEHOODEXHAUST."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDamperTypeEnum() { Value = ".CONTROLDAMPER.";}
		public IFCDamperTypeEnum(string value) { Value = value; }
		public static implicit operator IFCDamperTypeEnum(string value) { return new IFCDamperTypeEnum(value);}
		public static implicit operator string(IFCDamperTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDataOriginEnum = ENUMERATION OF
	/// (MEASURED
	/// ,PREDICTED
	/// ,SIMULATED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDataOriginEnum : IFC_Enum, Global.IFCDataOriginEnum
	{
		public static string MEASURED { get { return ".MEASURED."; } private set { } }
		public static string PREDICTED { get { return ".PREDICTED."; } private set { } }
		public static string SIMULATED { get { return ".SIMULATED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDataOriginEnum() { Value = ".MEASURED.";}
		public IFCDataOriginEnum(string value) { Value = value; }
		public static implicit operator IFCDataOriginEnum(string value) { return new IFCDataOriginEnum(value);}
		public static implicit operator string(IFCDataOriginEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDerivedUnitEnum = ENUMERATION OF
	/// (ANGULARVELOCITYUNIT
	/// ,COMPOUNDPLANEANGLEUNIT
	/// ,DYNAMICVISCOSITYUNIT
	/// ,HEATFLUXDENSITYUNIT
	/// ,INTEGERCOUNTRATEUNIT
	/// ,ISOTHERMALMOISTURECAPACITYUNIT
	/// ,KINEMATICVISCOSITYUNIT
	/// ,LINEARVELOCITYUNIT
	/// ,MASSDENSITYUNIT
	/// ,MASSFLOWRATEUNIT
	/// ,MOISTUREDIFFUSIVITYUNIT
	/// ,MOLECULARWEIGHTUNIT
	/// ,SPECIFICHEATCAPACITYUNIT
	/// ,THERMALADMITTANCEUNIT
	/// ,THERMALCONDUCTANCEUNIT
	/// ,THERMALRESISTANCEUNIT
	/// ,THERMALTRANSMITTANCEUNIT
	/// ,VAPORPERMEABILITYUNIT
	/// ,VOLUMETRICFLOWRATEUNIT
	/// ,ROTATIONALFREQUENCYUNIT
	/// ,TORQUEUNIT
	/// ,MOMENTOFINERTIAUNIT
	/// ,LINEARMOMENTUNIT
	/// ,LINEARFORCEUNIT
	/// ,PLANARFORCEUNIT
	/// ,MODULUSOFELASTICITYUNIT
	/// ,SHEARMODULUSUNIT
	/// ,LINEARSTIFFNESSUNIT
	/// ,ROTATIONALSTIFFNESSUNIT
	/// ,MODULUSOFSUBGRADEREACTIONUNIT
	/// ,ACCELERATIONUNIT
	/// ,CURVATUREUNIT
	/// ,HEATINGVALUEUNIT
	/// ,IONCONCENTRATIONUNIT
	/// ,LUMINOUSINTENSITYDISTRIBUTIONUNIT
	/// ,MASSPERLENGTHUNIT
	/// ,MODULUSOFLINEARSUBGRADEREACTIONUNIT
	/// ,MODULUSOFROTATIONALSUBGRADEREACTIONUNIT
	/// ,PHUNIT
	/// ,ROTATIONALMASSUNIT
	/// ,SECTIONAREAINTEGRALUNIT
	/// ,SECTIONMODULUSUNIT
	/// ,SOUNDPOWERUNIT
	/// ,SOUNDPRESSUREUNIT
	/// ,TEMPERATUREGRADIENTUNIT
	/// ,THERMALEXPANSIONCOEFFICIENTUNIT
	/// ,WARPINGCONSTANTUNIT
	/// ,WARPINGMOMENTUNIT
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDerivedUnitEnum : IFC_Enum, Global.IFCDerivedUnitEnum
	{
		public static string ANGULARVELOCITYUNIT { get { return ".ANGULARVELOCITYUNIT."; } private set { } }
		public static string COMPOUNDPLANEANGLEUNIT { get { return ".COMPOUNDPLANEANGLEUNIT."; } private set { } }
		public static string DYNAMICVISCOSITYUNIT { get { return ".DYNAMICVISCOSITYUNIT."; } private set { } }
		public static string HEATFLUXDENSITYUNIT { get { return ".HEATFLUXDENSITYUNIT."; } private set { } }
		public static string INTEGERCOUNTRATEUNIT { get { return ".INTEGERCOUNTRATEUNIT."; } private set { } }
		public static string ISOTHERMALMOISTURECAPACITYUNIT { get { return ".ISOTHERMALMOISTURECAPACITYUNIT."; } private set { } }
		public static string KINEMATICVISCOSITYUNIT { get { return ".KINEMATICVISCOSITYUNIT."; } private set { } }
		public static string LINEARVELOCITYUNIT { get { return ".LINEARVELOCITYUNIT."; } private set { } }
		public static string MASSDENSITYUNIT { get { return ".MASSDENSITYUNIT."; } private set { } }
		public static string MASSFLOWRATEUNIT { get { return ".MASSFLOWRATEUNIT."; } private set { } }
		public static string MOISTUREDIFFUSIVITYUNIT { get { return ".MOISTUREDIFFUSIVITYUNIT."; } private set { } }
		public static string MOLECULARWEIGHTUNIT { get { return ".MOLECULARWEIGHTUNIT."; } private set { } }
		public static string SPECIFICHEATCAPACITYUNIT { get { return ".SPECIFICHEATCAPACITYUNIT."; } private set { } }
		public static string THERMALADMITTANCEUNIT { get { return ".THERMALADMITTANCEUNIT."; } private set { } }
		public static string THERMALCONDUCTANCEUNIT { get { return ".THERMALCONDUCTANCEUNIT."; } private set { } }
		public static string THERMALRESISTANCEUNIT { get { return ".THERMALRESISTANCEUNIT."; } private set { } }
		public static string THERMALTRANSMITTANCEUNIT { get { return ".THERMALTRANSMITTANCEUNIT."; } private set { } }
		public static string VAPORPERMEABILITYUNIT { get { return ".VAPORPERMEABILITYUNIT."; } private set { } }
		public static string VOLUMETRICFLOWRATEUNIT { get { return ".VOLUMETRICFLOWRATEUNIT."; } private set { } }
		public static string ROTATIONALFREQUENCYUNIT { get { return ".ROTATIONALFREQUENCYUNIT."; } private set { } }
		public static string TORQUEUNIT { get { return ".TORQUEUNIT."; } private set { } }
		public static string MOMENTOFINERTIAUNIT { get { return ".MOMENTOFINERTIAUNIT."; } private set { } }
		public static string LINEARMOMENTUNIT { get { return ".LINEARMOMENTUNIT."; } private set { } }
		public static string LINEARFORCEUNIT { get { return ".LINEARFORCEUNIT."; } private set { } }
		public static string PLANARFORCEUNIT { get { return ".PLANARFORCEUNIT."; } private set { } }
		public static string MODULUSOFELASTICITYUNIT { get { return ".MODULUSOFELASTICITYUNIT."; } private set { } }
		public static string SHEARMODULUSUNIT { get { return ".SHEARMODULUSUNIT."; } private set { } }
		public static string LINEARSTIFFNESSUNIT { get { return ".LINEARSTIFFNESSUNIT."; } private set { } }
		public static string ROTATIONALSTIFFNESSUNIT { get { return ".ROTATIONALSTIFFNESSUNIT."; } private set { } }
		public static string MODULUSOFSUBGRADEREACTIONUNIT { get { return ".MODULUSOFSUBGRADEREACTIONUNIT."; } private set { } }
		public static string ACCELERATIONUNIT { get { return ".ACCELERATIONUNIT."; } private set { } }
		public static string CURVATUREUNIT { get { return ".CURVATUREUNIT."; } private set { } }
		public static string HEATINGVALUEUNIT { get { return ".HEATINGVALUEUNIT."; } private set { } }
		public static string IONCONCENTRATIONUNIT { get { return ".IONCONCENTRATIONUNIT."; } private set { } }
		public static string LUMINOUSINTENSITYDISTRIBUTIONUNIT { get { return ".LUMINOUSINTENSITYDISTRIBUTIONUNIT."; } private set { } }
		public static string MASSPERLENGTHUNIT { get { return ".MASSPERLENGTHUNIT."; } private set { } }
		public static string MODULUSOFLINEARSUBGRADEREACTIONUNIT { get { return ".MODULUSOFLINEARSUBGRADEREACTIONUNIT."; } private set { } }
		public static string MODULUSOFROTATIONALSUBGRADEREACTIONUNIT { get { return ".MODULUSOFROTATIONALSUBGRADEREACTIONUNIT."; } private set { } }
		public static string PHUNIT { get { return ".PHUNIT."; } private set { } }
		public static string ROTATIONALMASSUNIT { get { return ".ROTATIONALMASSUNIT."; } private set { } }
		public static string SECTIONAREAINTEGRALUNIT { get { return ".SECTIONAREAINTEGRALUNIT."; } private set { } }
		public static string SECTIONMODULUSUNIT { get { return ".SECTIONMODULUSUNIT."; } private set { } }
		public static string SOUNDPOWERUNIT { get { return ".SOUNDPOWERUNIT."; } private set { } }
		public static string SOUNDPRESSUREUNIT { get { return ".SOUNDPRESSUREUNIT."; } private set { } }
		public static string TEMPERATUREGRADIENTUNIT { get { return ".TEMPERATUREGRADIENTUNIT."; } private set { } }
		public static string THERMALEXPANSIONCOEFFICIENTUNIT { get { return ".THERMALEXPANSIONCOEFFICIENTUNIT."; } private set { } }
		public static string WARPINGCONSTANTUNIT { get { return ".WARPINGCONSTANTUNIT."; } private set { } }
		public static string WARPINGMOMENTUNIT { get { return ".WARPINGMOMENTUNIT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDerivedUnitEnum() { Value = ".ANGULARVELOCITYUNIT.";}
		public IFCDerivedUnitEnum(string value) { Value = value; }
		public static implicit operator IFCDerivedUnitEnum(string value) { return new IFCDerivedUnitEnum(value);}
		public static implicit operator string(IFCDerivedUnitEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDimensionExtentUsage = ENUMERATION OF
	/// (ORIGIN
	/// ,TARGET);
	/// END_TYPE;
	/// <summary>
	public class IFCDimensionExtentUsage : IFC_Enum, Global.IFCDimensionExtentUsage
	{
		public static string ORIGIN { get { return ".ORIGIN."; } private set { } }
		public static string TARGET { get { return ".TARGET."; } private set { } }
		public string Value {get; set;}
		public IFCDimensionExtentUsage() { Value = ".ORIGIN.";}
		public IFCDimensionExtentUsage(string value) { Value = value; }
		public static implicit operator IFCDimensionExtentUsage(string value) { return new IFCDimensionExtentUsage(value);}
		public static implicit operator string(IFCDimensionExtentUsage value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDirectionSenseEnum = ENUMERATION OF
	/// (POSITIVE
	/// ,NEGATIVE);
	/// END_TYPE;
	/// <summary>
	public class IFCDirectionSenseEnum : IFC_Enum, Global.IFCDirectionSenseEnum
	{
		public static string POSITIVE { get { return ".POSITIVE."; } private set { } }
		public static string NEGATIVE { get { return ".NEGATIVE."; } private set { } }
		public string Value {get; set;}
		public IFCDirectionSenseEnum() { Value = ".POSITIVE.";}
		public IFCDirectionSenseEnum(string value) { Value = value; }
		public static implicit operator IFCDirectionSenseEnum(string value) { return new IFCDirectionSenseEnum(value);}
		public static implicit operator string(IFCDirectionSenseEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDistributionChamberElementTypeEnum = ENUMERATION OF
	/// (FORMEDDUCT
	/// ,INSPECTIONCHAMBER
	/// ,INSPECTIONPIT
	/// ,MANHOLE
	/// ,METERCHAMBER
	/// ,SUMP
	/// ,TRENCH
	/// ,VALVECHAMBER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDistributionChamberElementTypeEnum : IFC_Enum, Global.IFCDistributionChamberElementTypeEnum
	{
		public static string FORMEDDUCT { get { return ".FORMEDDUCT."; } private set { } }
		public static string INSPECTIONCHAMBER { get { return ".INSPECTIONCHAMBER."; } private set { } }
		public static string INSPECTIONPIT { get { return ".INSPECTIONPIT."; } private set { } }
		public static string MANHOLE { get { return ".MANHOLE."; } private set { } }
		public static string METERCHAMBER { get { return ".METERCHAMBER."; } private set { } }
		public static string SUMP { get { return ".SUMP."; } private set { } }
		public static string TRENCH { get { return ".TRENCH."; } private set { } }
		public static string VALVECHAMBER { get { return ".VALVECHAMBER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDistributionChamberElementTypeEnum() { Value = ".FORMEDDUCT.";}
		public IFCDistributionChamberElementTypeEnum(string value) { Value = value; }
		public static implicit operator IFCDistributionChamberElementTypeEnum(string value) { return new IFCDistributionChamberElementTypeEnum(value);}
		public static implicit operator string(IFCDistributionChamberElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDocumentConfidentialityEnum = ENUMERATION OF
	/// (PUBLIC
	/// ,RESTRICTED
	/// ,CONFIDENTIAL
	/// ,PERSONAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDocumentConfidentialityEnum : IFC_Enum, Global.IFCDocumentConfidentialityEnum
	{
		public static string PUBLIC { get { return ".PUBLIC."; } private set { } }
		public static string RESTRICTED { get { return ".RESTRICTED."; } private set { } }
		public static string CONFIDENTIAL { get { return ".CONFIDENTIAL."; } private set { } }
		public static string PERSONAL { get { return ".PERSONAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDocumentConfidentialityEnum() { Value = ".PUBLIC.";}
		public IFCDocumentConfidentialityEnum(string value) { Value = value; }
		public static implicit operator IFCDocumentConfidentialityEnum(string value) { return new IFCDocumentConfidentialityEnum(value);}
		public static implicit operator string(IFCDocumentConfidentialityEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDocumentStatusEnum = ENUMERATION OF
	/// (DRAFT
	/// ,FINALDRAFT
	/// ,FINAL
	/// ,REVISION
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDocumentStatusEnum : IFC_Enum, Global.IFCDocumentStatusEnum
	{
		public static string DRAFT { get { return ".DRAFT."; } private set { } }
		public static string FINALDRAFT { get { return ".FINALDRAFT."; } private set { } }
		public static string FINAL { get { return ".FINAL."; } private set { } }
		public static string REVISION { get { return ".REVISION."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDocumentStatusEnum() { Value = ".DRAFT.";}
		public IFCDocumentStatusEnum(string value) { Value = value; }
		public static implicit operator IFCDocumentStatusEnum(string value) { return new IFCDocumentStatusEnum(value);}
		public static implicit operator string(IFCDocumentStatusEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorPanelOperationEnum = ENUMERATION OF
	/// (SWINGING
	/// ,DOUBLE_ACTING
	/// ,SLIDING
	/// ,FOLDING
	/// ,REVOLVING
	/// ,ROLLINGUP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDoorPanelOperationEnum : IFC_Enum, Global.IFCDoorPanelOperationEnum
	{
		public static string SWINGING { get { return ".SWINGING."; } private set { } }
		public static string DOUBLE_ACTING { get { return ".DOUBLE_ACTING."; } private set { } }
		public static string SLIDING { get { return ".SLIDING."; } private set { } }
		public static string FOLDING { get { return ".FOLDING."; } private set { } }
		public static string REVOLVING { get { return ".REVOLVING."; } private set { } }
		public static string ROLLINGUP { get { return ".ROLLINGUP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDoorPanelOperationEnum() { Value = ".SWINGING.";}
		public IFCDoorPanelOperationEnum(string value) { Value = value; }
		public static implicit operator IFCDoorPanelOperationEnum(string value) { return new IFCDoorPanelOperationEnum(value);}
		public static implicit operator string(IFCDoorPanelOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorPanelPositionEnum = ENUMERATION OF
	/// (LEFT
	/// ,MIDDLE
	/// ,RIGHT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDoorPanelPositionEnum : IFC_Enum, Global.IFCDoorPanelPositionEnum
	{
		public static string LEFT { get { return ".LEFT."; } private set { } }
		public static string MIDDLE { get { return ".MIDDLE."; } private set { } }
		public static string RIGHT { get { return ".RIGHT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDoorPanelPositionEnum() { Value = ".LEFT.";}
		public IFCDoorPanelPositionEnum(string value) { Value = value; }
		public static implicit operator IFCDoorPanelPositionEnum(string value) { return new IFCDoorPanelPositionEnum(value);}
		public static implicit operator string(IFCDoorPanelPositionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorStyleConstructionEnum = ENUMERATION OF
	/// (ALUMINIUM
	/// ,HIGH_GRADE_STEEL
	/// ,STEEL
	/// ,WOOD
	/// ,ALUMINIUM_WOOD
	/// ,ALUMINIUM_PLASTIC
	/// ,PLASTIC
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDoorStyleConstructionEnum : IFC_Enum, Global.IFCDoorStyleConstructionEnum
	{
		public static string ALUMINIUM { get { return ".ALUMINIUM."; } private set { } }
		public static string HIGH_GRADE_STEEL { get { return ".HIGH_GRADE_STEEL."; } private set { } }
		public static string STEEL { get { return ".STEEL."; } private set { } }
		public static string WOOD { get { return ".WOOD."; } private set { } }
		public static string ALUMINIUM_WOOD { get { return ".ALUMINIUM_WOOD."; } private set { } }
		public static string ALUMINIUM_PLASTIC { get { return ".ALUMINIUM_PLASTIC."; } private set { } }
		public static string PLASTIC { get { return ".PLASTIC."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDoorStyleConstructionEnum() { Value = ".ALUMINIUM.";}
		public IFCDoorStyleConstructionEnum(string value) { Value = value; }
		public static implicit operator IFCDoorStyleConstructionEnum(string value) { return new IFCDoorStyleConstructionEnum(value);}
		public static implicit operator string(IFCDoorStyleConstructionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDoorStyleOperationEnum = ENUMERATION OF
	/// (SINGLE_SWING_LEFT
	/// ,SINGLE_SWING_RIGHT
	/// ,DOUBLE_DOOR_SINGLE_SWING
	/// ,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT
	/// ,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT
	/// ,DOUBLE_SWING_LEFT
	/// ,DOUBLE_SWING_RIGHT
	/// ,DOUBLE_DOOR_DOUBLE_SWING
	/// ,SLIDING_TO_LEFT
	/// ,SLIDING_TO_RIGHT
	/// ,DOUBLE_DOOR_SLIDING
	/// ,FOLDING_TO_LEFT
	/// ,FOLDING_TO_RIGHT
	/// ,DOUBLE_DOOR_FOLDING
	/// ,REVOLVING
	/// ,ROLLINGUP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDoorStyleOperationEnum : IFC_Enum, Global.IFCDoorStyleOperationEnum
	{
		public static string SINGLE_SWING_LEFT { get { return ".SINGLE_SWING_LEFT."; } private set { } }
		public static string SINGLE_SWING_RIGHT { get { return ".SINGLE_SWING_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING { get { return ".DOUBLE_DOOR_SINGLE_SWING."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT { get { return ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT."; } private set { } }
		public static string DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT { get { return ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT."; } private set { } }
		public static string DOUBLE_SWING_LEFT { get { return ".DOUBLE_SWING_LEFT."; } private set { } }
		public static string DOUBLE_SWING_RIGHT { get { return ".DOUBLE_SWING_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_DOUBLE_SWING { get { return ".DOUBLE_DOOR_DOUBLE_SWING."; } private set { } }
		public static string SLIDING_TO_LEFT { get { return ".SLIDING_TO_LEFT."; } private set { } }
		public static string SLIDING_TO_RIGHT { get { return ".SLIDING_TO_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_SLIDING { get { return ".DOUBLE_DOOR_SLIDING."; } private set { } }
		public static string FOLDING_TO_LEFT { get { return ".FOLDING_TO_LEFT."; } private set { } }
		public static string FOLDING_TO_RIGHT { get { return ".FOLDING_TO_RIGHT."; } private set { } }
		public static string DOUBLE_DOOR_FOLDING { get { return ".DOUBLE_DOOR_FOLDING."; } private set { } }
		public static string REVOLVING { get { return ".REVOLVING."; } private set { } }
		public static string ROLLINGUP { get { return ".ROLLINGUP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDoorStyleOperationEnum() { Value = ".SINGLE_SWING_LEFT.";}
		public IFCDoorStyleOperationEnum(string value) { Value = value; }
		public static implicit operator IFCDoorStyleOperationEnum(string value) { return new IFCDoorStyleOperationEnum(value);}
		public static implicit operator string(IFCDoorStyleOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDuctFittingTypeEnum = ENUMERATION OF
	/// (BEND
	/// ,CONNECTOR
	/// ,ENTRY
	/// ,EXIT
	/// ,JUNCTION
	/// ,OBSTRUCTION
	/// ,TRANSITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDuctFittingTypeEnum : IFC_Enum, Global.IFCDuctFittingTypeEnum
	{
		public static string BEND { get { return ".BEND."; } private set { } }
		public static string CONNECTOR { get { return ".CONNECTOR."; } private set { } }
		public static string ENTRY { get { return ".ENTRY."; } private set { } }
		public static string EXIT { get { return ".EXIT."; } private set { } }
		public static string JUNCTION { get { return ".JUNCTION."; } private set { } }
		public static string OBSTRUCTION { get { return ".OBSTRUCTION."; } private set { } }
		public static string TRANSITION { get { return ".TRANSITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDuctFittingTypeEnum() { Value = ".BEND.";}
		public IFCDuctFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IFCDuctFittingTypeEnum(string value) { return new IFCDuctFittingTypeEnum(value);}
		public static implicit operator string(IFCDuctFittingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDuctSegmentTypeEnum = ENUMERATION OF
	/// (RIGIDSEGMENT
	/// ,FLEXIBLESEGMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDuctSegmentTypeEnum : IFC_Enum, Global.IFCDuctSegmentTypeEnum
	{
		public static string RIGIDSEGMENT { get { return ".RIGIDSEGMENT."; } private set { } }
		public static string FLEXIBLESEGMENT { get { return ".FLEXIBLESEGMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDuctSegmentTypeEnum() { Value = ".RIGIDSEGMENT.";}
		public IFCDuctSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IFCDuctSegmentTypeEnum(string value) { return new IFCDuctSegmentTypeEnum(value);}
		public static implicit operator string(IFCDuctSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcDuctSilencerTypeEnum = ENUMERATION OF
	/// (FLATOVAL
	/// ,RECTANGULAR
	/// ,ROUND
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCDuctSilencerTypeEnum : IFC_Enum, Global.IFCDuctSilencerTypeEnum
	{
		public static string FLATOVAL { get { return ".FLATOVAL."; } private set { } }
		public static string RECTANGULAR { get { return ".RECTANGULAR."; } private set { } }
		public static string ROUND { get { return ".ROUND."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCDuctSilencerTypeEnum() { Value = ".FLATOVAL.";}
		public IFCDuctSilencerTypeEnum(string value) { Value = value; }
		public static implicit operator IFCDuctSilencerTypeEnum(string value) { return new IFCDuctSilencerTypeEnum(value);}
		public static implicit operator string(IFCDuctSilencerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricApplianceTypeEnum = ENUMERATION OF
	/// (COMPUTER
	/// ,DIRECTWATERHEATER
	/// ,DISHWASHER
	/// ,ELECTRICCOOKER
	/// ,ELECTRICHEATER
	/// ,FACSIMILE
	/// ,FREESTANDINGFAN
	/// ,FREEZER
	/// ,FRIDGE_FREEZER
	/// ,HANDDRYER
	/// ,INDIRECTWATERHEATER
	/// ,MICROWAVE
	/// ,PHOTOCOPIER
	/// ,PRINTER
	/// ,REFRIGERATOR
	/// ,RADIANTHEATER
	/// ,SCANNER
	/// ,TELEPHONE
	/// ,TUMBLEDRYER
	/// ,TV
	/// ,VENDINGMACHINE
	/// ,WASHINGMACHINE
	/// ,WATERHEATER
	/// ,WATERCOOLER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCElectricApplianceTypeEnum : IFC_Enum, Global.IFCElectricApplianceTypeEnum
	{
		public static string COMPUTER { get { return ".COMPUTER."; } private set { } }
		public static string DIRECTWATERHEATER { get { return ".DIRECTWATERHEATER."; } private set { } }
		public static string DISHWASHER { get { return ".DISHWASHER."; } private set { } }
		public static string ELECTRICCOOKER { get { return ".ELECTRICCOOKER."; } private set { } }
		public static string ELECTRICHEATER { get { return ".ELECTRICHEATER."; } private set { } }
		public static string FACSIMILE { get { return ".FACSIMILE."; } private set { } }
		public static string FREESTANDINGFAN { get { return ".FREESTANDINGFAN."; } private set { } }
		public static string FREEZER { get { return ".FREEZER."; } private set { } }
		public static string FRIDGE_FREEZER { get { return ".FRIDGE_FREEZER."; } private set { } }
		public static string HANDDRYER { get { return ".HANDDRYER."; } private set { } }
		public static string INDIRECTWATERHEATER { get { return ".INDIRECTWATERHEATER."; } private set { } }
		public static string MICROWAVE { get { return ".MICROWAVE."; } private set { } }
		public static string PHOTOCOPIER { get { return ".PHOTOCOPIER."; } private set { } }
		public static string PRINTER { get { return ".PRINTER."; } private set { } }
		public static string REFRIGERATOR { get { return ".REFRIGERATOR."; } private set { } }
		public static string RADIANTHEATER { get { return ".RADIANTHEATER."; } private set { } }
		public static string SCANNER { get { return ".SCANNER."; } private set { } }
		public static string TELEPHONE { get { return ".TELEPHONE."; } private set { } }
		public static string TUMBLEDRYER { get { return ".TUMBLEDRYER."; } private set { } }
		public static string TV { get { return ".TV."; } private set { } }
		public static string VENDINGMACHINE { get { return ".VENDINGMACHINE."; } private set { } }
		public static string WASHINGMACHINE { get { return ".WASHINGMACHINE."; } private set { } }
		public static string WATERHEATER { get { return ".WATERHEATER."; } private set { } }
		public static string WATERCOOLER { get { return ".WATERCOOLER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCElectricApplianceTypeEnum() { Value = ".COMPUTER.";}
		public IFCElectricApplianceTypeEnum(string value) { Value = value; }
		public static implicit operator IFCElectricApplianceTypeEnum(string value) { return new IFCElectricApplianceTypeEnum(value);}
		public static implicit operator string(IFCElectricApplianceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricCurrentEnum = ENUMERATION OF
	/// (ALTERNATING
	/// ,DIRECT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCElectricCurrentEnum : IFC_Enum, Global.IFCElectricCurrentEnum
	{
		public static string ALTERNATING { get { return ".ALTERNATING."; } private set { } }
		public static string DIRECT { get { return ".DIRECT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCElectricCurrentEnum() { Value = ".ALTERNATING.";}
		public IFCElectricCurrentEnum(string value) { Value = value; }
		public static implicit operator IFCElectricCurrentEnum(string value) { return new IFCElectricCurrentEnum(value);}
		public static implicit operator string(IFCElectricCurrentEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricDistributionPointFunctionEnum = ENUMERATION OF
	/// (ALARMPANEL
	/// ,CONSUMERUNIT
	/// ,CONTROLPANEL
	/// ,DISTRIBUTIONBOARD
	/// ,GASDETECTORPANEL
	/// ,INDICATORPANEL
	/// ,MIMICPANEL
	/// ,MOTORCONTROLCENTRE
	/// ,SWITCHBOARD
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCElectricDistributionPointFunctionEnum : IFC_Enum, Global.IFCElectricDistributionPointFunctionEnum
	{
		public static string ALARMPANEL { get { return ".ALARMPANEL."; } private set { } }
		public static string CONSUMERUNIT { get { return ".CONSUMERUNIT."; } private set { } }
		public static string CONTROLPANEL { get { return ".CONTROLPANEL."; } private set { } }
		public static string DISTRIBUTIONBOARD { get { return ".DISTRIBUTIONBOARD."; } private set { } }
		public static string GASDETECTORPANEL { get { return ".GASDETECTORPANEL."; } private set { } }
		public static string INDICATORPANEL { get { return ".INDICATORPANEL."; } private set { } }
		public static string MIMICPANEL { get { return ".MIMICPANEL."; } private set { } }
		public static string MOTORCONTROLCENTRE { get { return ".MOTORCONTROLCENTRE."; } private set { } }
		public static string SWITCHBOARD { get { return ".SWITCHBOARD."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCElectricDistributionPointFunctionEnum() { Value = ".ALARMPANEL.";}
		public IFCElectricDistributionPointFunctionEnum(string value) { Value = value; }
		public static implicit operator IFCElectricDistributionPointFunctionEnum(string value) { return new IFCElectricDistributionPointFunctionEnum(value);}
		public static implicit operator string(IFCElectricDistributionPointFunctionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricFlowStorageDeviceTypeEnum = ENUMERATION OF
	/// (BATTERY
	/// ,CAPACITORBANK
	/// ,HARMONICFILTER
	/// ,INDUCTORBANK
	/// ,UPS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCElectricFlowStorageDeviceTypeEnum : IFC_Enum, Global.IFCElectricFlowStorageDeviceTypeEnum
	{
		public static string BATTERY { get { return ".BATTERY."; } private set { } }
		public static string CAPACITORBANK { get { return ".CAPACITORBANK."; } private set { } }
		public static string HARMONICFILTER { get { return ".HARMONICFILTER."; } private set { } }
		public static string INDUCTORBANK { get { return ".INDUCTORBANK."; } private set { } }
		public static string UPS { get { return ".UPS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCElectricFlowStorageDeviceTypeEnum() { Value = ".BATTERY.";}
		public IFCElectricFlowStorageDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IFCElectricFlowStorageDeviceTypeEnum(string value) { return new IFCElectricFlowStorageDeviceTypeEnum(value);}
		public static implicit operator string(IFCElectricFlowStorageDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricGeneratorTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCElectricGeneratorTypeEnum : IFC_Enum, Global.IFCElectricGeneratorTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCElectricGeneratorTypeEnum() { Value = ".USERDEFINED.";}
		public IFCElectricGeneratorTypeEnum(string value) { Value = value; }
		public static implicit operator IFCElectricGeneratorTypeEnum(string value) { return new IFCElectricGeneratorTypeEnum(value);}
		public static implicit operator string(IFCElectricGeneratorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricHeaterTypeEnum = ENUMERATION OF
	/// (ELECTRICPOINTHEATER
	/// ,ELECTRICCABLEHEATER
	/// ,ELECTRICMATHEATER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCElectricHeaterTypeEnum : IFC_Enum, Global.IFCElectricHeaterTypeEnum
	{
		public static string ELECTRICPOINTHEATER { get { return ".ELECTRICPOINTHEATER."; } private set { } }
		public static string ELECTRICCABLEHEATER { get { return ".ELECTRICCABLEHEATER."; } private set { } }
		public static string ELECTRICMATHEATER { get { return ".ELECTRICMATHEATER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCElectricHeaterTypeEnum() { Value = ".ELECTRICPOINTHEATER.";}
		public IFCElectricHeaterTypeEnum(string value) { Value = value; }
		public static implicit operator IFCElectricHeaterTypeEnum(string value) { return new IFCElectricHeaterTypeEnum(value);}
		public static implicit operator string(IFCElectricHeaterTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricMotorTypeEnum = ENUMERATION OF
	/// (DC
	/// ,INDUCTION
	/// ,POLYPHASE
	/// ,RELUCTANCESYNCHRONOUS
	/// ,SYNCHRONOUS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCElectricMotorTypeEnum : IFC_Enum, Global.IFCElectricMotorTypeEnum
	{
		public static string DC { get { return ".DC."; } private set { } }
		public static string INDUCTION { get { return ".INDUCTION."; } private set { } }
		public static string POLYPHASE { get { return ".POLYPHASE."; } private set { } }
		public static string RELUCTANCESYNCHRONOUS { get { return ".RELUCTANCESYNCHRONOUS."; } private set { } }
		public static string SYNCHRONOUS { get { return ".SYNCHRONOUS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCElectricMotorTypeEnum() { Value = ".DC.";}
		public IFCElectricMotorTypeEnum(string value) { Value = value; }
		public static implicit operator IFCElectricMotorTypeEnum(string value) { return new IFCElectricMotorTypeEnum(value);}
		public static implicit operator string(IFCElectricMotorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElectricTimeControlTypeEnum = ENUMERATION OF
	/// (TIMECLOCK
	/// ,TIMEDELAY
	/// ,RELAY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCElectricTimeControlTypeEnum : IFC_Enum, Global.IFCElectricTimeControlTypeEnum
	{
		public static string TIMECLOCK { get { return ".TIMECLOCK."; } private set { } }
		public static string TIMEDELAY { get { return ".TIMEDELAY."; } private set { } }
		public static string RELAY { get { return ".RELAY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCElectricTimeControlTypeEnum() { Value = ".TIMECLOCK.";}
		public IFCElectricTimeControlTypeEnum(string value) { Value = value; }
		public static implicit operator IFCElectricTimeControlTypeEnum(string value) { return new IFCElectricTimeControlTypeEnum(value);}
		public static implicit operator string(IFCElectricTimeControlTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElementAssemblyTypeEnum = ENUMERATION OF
	/// (ACCESSORY_ASSEMBLY
	/// ,ARCH
	/// ,BEAM_GRID
	/// ,BRACED_FRAME
	/// ,GIRDER
	/// ,REINFORCEMENT_UNIT
	/// ,RIGID_FRAME
	/// ,SLAB_FIELD
	/// ,TRUSS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCElementAssemblyTypeEnum : IFC_Enum, Global.IFCElementAssemblyTypeEnum
	{
		public static string ACCESSORY_ASSEMBLY { get { return ".ACCESSORY_ASSEMBLY."; } private set { } }
		public static string ARCH { get { return ".ARCH."; } private set { } }
		public static string BEAM_GRID { get { return ".BEAM_GRID."; } private set { } }
		public static string BRACED_FRAME { get { return ".BRACED_FRAME."; } private set { } }
		public static string GIRDER { get { return ".GIRDER."; } private set { } }
		public static string REINFORCEMENT_UNIT { get { return ".REINFORCEMENT_UNIT."; } private set { } }
		public static string RIGID_FRAME { get { return ".RIGID_FRAME."; } private set { } }
		public static string SLAB_FIELD { get { return ".SLAB_FIELD."; } private set { } }
		public static string TRUSS { get { return ".TRUSS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCElementAssemblyTypeEnum() { Value = ".ACCESSORY_ASSEMBLY.";}
		public IFCElementAssemblyTypeEnum(string value) { Value = value; }
		public static implicit operator IFCElementAssemblyTypeEnum(string value) { return new IFCElementAssemblyTypeEnum(value);}
		public static implicit operator string(IFCElementAssemblyTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcElementCompositionEnum = ENUMERATION OF
	/// (COMPLEX
	/// ,ELEMENT
	/// ,PARTIAL);
	/// END_TYPE;
	/// <summary>
	public class IFCElementCompositionEnum : IFC_Enum, Global.IFCElementCompositionEnum
	{
		public static string COMPLEX { get { return ".COMPLEX."; } private set { } }
		public static string ELEMENT { get { return ".ELEMENT."; } private set { } }
		public static string PARTIAL { get { return ".PARTIAL."; } private set { } }
		public string Value {get; set;}
		public IFCElementCompositionEnum() { Value = ".COMPLEX.";}
		public IFCElementCompositionEnum(string value) { Value = value; }
		public static implicit operator IFCElementCompositionEnum(string value) { return new IFCElementCompositionEnum(value);}
		public static implicit operator string(IFCElementCompositionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEnergySequenceEnum = ENUMERATION OF
	/// (PRIMARY
	/// ,SECONDARY
	/// ,TERTIARY
	/// ,AUXILIARY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCEnergySequenceEnum : IFC_Enum, Global.IFCEnergySequenceEnum
	{
		public static string PRIMARY { get { return ".PRIMARY."; } private set { } }
		public static string SECONDARY { get { return ".SECONDARY."; } private set { } }
		public static string TERTIARY { get { return ".TERTIARY."; } private set { } }
		public static string AUXILIARY { get { return ".AUXILIARY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCEnergySequenceEnum() { Value = ".PRIMARY.";}
		public IFCEnergySequenceEnum(string value) { Value = value; }
		public static implicit operator IFCEnergySequenceEnum(string value) { return new IFCEnergySequenceEnum(value);}
		public static implicit operator string(IFCEnergySequenceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEnvironmentalImpactCategoryEnum = ENUMERATION OF
	/// (COMBINEDVALUE
	/// ,DISPOSAL
	/// ,EXTRACTION
	/// ,INSTALLATION
	/// ,MANUFACTURE
	/// ,TRANSPORTATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCEnvironmentalImpactCategoryEnum : IFC_Enum, Global.IFCEnvironmentalImpactCategoryEnum
	{
		public static string COMBINEDVALUE { get { return ".COMBINEDVALUE."; } private set { } }
		public static string DISPOSAL { get { return ".DISPOSAL."; } private set { } }
		public static string EXTRACTION { get { return ".EXTRACTION."; } private set { } }
		public static string INSTALLATION { get { return ".INSTALLATION."; } private set { } }
		public static string MANUFACTURE { get { return ".MANUFACTURE."; } private set { } }
		public static string TRANSPORTATION { get { return ".TRANSPORTATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCEnvironmentalImpactCategoryEnum() { Value = ".COMBINEDVALUE.";}
		public IFCEnvironmentalImpactCategoryEnum(string value) { Value = value; }
		public static implicit operator IFCEnvironmentalImpactCategoryEnum(string value) { return new IFCEnvironmentalImpactCategoryEnum(value);}
		public static implicit operator string(IFCEnvironmentalImpactCategoryEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEvaporativeCoolerTypeEnum = ENUMERATION OF
	/// (DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER
	/// ,DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER
	/// ,DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER
	/// ,DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER
	/// ,DIRECTEVAPORATIVEAIRWASHER
	/// ,INDIRECTEVAPORATIVEPACKAGEAIRCOOLER
	/// ,INDIRECTEVAPORATIVEWETCOIL
	/// ,INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER
	/// ,INDIRECTDIRECTCOMBINATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCEvaporativeCoolerTypeEnum : IFC_Enum, Global.IFCEvaporativeCoolerTypeEnum
	{
		public static string DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER { get { return ".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER { get { return ".DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER { get { return ".DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER { get { return ".DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER."; } private set { } }
		public static string DIRECTEVAPORATIVEAIRWASHER { get { return ".DIRECTEVAPORATIVEAIRWASHER."; } private set { } }
		public static string INDIRECTEVAPORATIVEPACKAGEAIRCOOLER { get { return ".INDIRECTEVAPORATIVEPACKAGEAIRCOOLER."; } private set { } }
		public static string INDIRECTEVAPORATIVEWETCOIL { get { return ".INDIRECTEVAPORATIVEWETCOIL."; } private set { } }
		public static string INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER { get { return ".INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER."; } private set { } }
		public static string INDIRECTDIRECTCOMBINATION { get { return ".INDIRECTDIRECTCOMBINATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCEvaporativeCoolerTypeEnum() { Value = ".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER.";}
		public IFCEvaporativeCoolerTypeEnum(string value) { Value = value; }
		public static implicit operator IFCEvaporativeCoolerTypeEnum(string value) { return new IFCEvaporativeCoolerTypeEnum(value);}
		public static implicit operator string(IFCEvaporativeCoolerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcEvaporatorTypeEnum = ENUMERATION OF
	/// (DIRECTEXPANSIONSHELLANDTUBE
	/// ,DIRECTEXPANSIONTUBEINTUBE
	/// ,DIRECTEXPANSIONBRAZEDPLATE
	/// ,FLOODEDSHELLANDTUBE
	/// ,SHELLANDCOIL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCEvaporatorTypeEnum : IFC_Enum, Global.IFCEvaporatorTypeEnum
	{
		public static string DIRECTEXPANSIONSHELLANDTUBE { get { return ".DIRECTEXPANSIONSHELLANDTUBE."; } private set { } }
		public static string DIRECTEXPANSIONTUBEINTUBE { get { return ".DIRECTEXPANSIONTUBEINTUBE."; } private set { } }
		public static string DIRECTEXPANSIONBRAZEDPLATE { get { return ".DIRECTEXPANSIONBRAZEDPLATE."; } private set { } }
		public static string FLOODEDSHELLANDTUBE { get { return ".FLOODEDSHELLANDTUBE."; } private set { } }
		public static string SHELLANDCOIL { get { return ".SHELLANDCOIL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCEvaporatorTypeEnum() { Value = ".DIRECTEXPANSIONSHELLANDTUBE.";}
		public IFCEvaporatorTypeEnum(string value) { Value = value; }
		public static implicit operator IFCEvaporatorTypeEnum(string value) { return new IFCEvaporatorTypeEnum(value);}
		public static implicit operator string(IFCEvaporatorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFanTypeEnum = ENUMERATION OF
	/// (CENTRIFUGALFORWARDCURVED
	/// ,CENTRIFUGALRADIAL
	/// ,CENTRIFUGALBACKWARDINCLINEDCURVED
	/// ,CENTRIFUGALAIRFOIL
	/// ,TUBEAXIAL
	/// ,VANEAXIAL
	/// ,PROPELLORAXIAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCFanTypeEnum : IFC_Enum, Global.IFCFanTypeEnum
	{
		public static string CENTRIFUGALFORWARDCURVED { get { return ".CENTRIFUGALFORWARDCURVED."; } private set { } }
		public static string CENTRIFUGALRADIAL { get { return ".CENTRIFUGALRADIAL."; } private set { } }
		public static string CENTRIFUGALBACKWARDINCLINEDCURVED { get { return ".CENTRIFUGALBACKWARDINCLINEDCURVED."; } private set { } }
		public static string CENTRIFUGALAIRFOIL { get { return ".CENTRIFUGALAIRFOIL."; } private set { } }
		public static string TUBEAXIAL { get { return ".TUBEAXIAL."; } private set { } }
		public static string VANEAXIAL { get { return ".VANEAXIAL."; } private set { } }
		public static string PROPELLORAXIAL { get { return ".PROPELLORAXIAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCFanTypeEnum() { Value = ".CENTRIFUGALFORWARDCURVED.";}
		public IFCFanTypeEnum(string value) { Value = value; }
		public static implicit operator IFCFanTypeEnum(string value) { return new IFCFanTypeEnum(value);}
		public static implicit operator string(IFCFanTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFilterTypeEnum = ENUMERATION OF
	/// (AIRPARTICLEFILTER
	/// ,ODORFILTER
	/// ,OILFILTER
	/// ,STRAINER
	/// ,WATERFILTER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCFilterTypeEnum : IFC_Enum, Global.IFCFilterTypeEnum
	{
		public static string AIRPARTICLEFILTER { get { return ".AIRPARTICLEFILTER."; } private set { } }
		public static string ODORFILTER { get { return ".ODORFILTER."; } private set { } }
		public static string OILFILTER { get { return ".OILFILTER."; } private set { } }
		public static string STRAINER { get { return ".STRAINER."; } private set { } }
		public static string WATERFILTER { get { return ".WATERFILTER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCFilterTypeEnum() { Value = ".AIRPARTICLEFILTER.";}
		public IFCFilterTypeEnum(string value) { Value = value; }
		public static implicit operator IFCFilterTypeEnum(string value) { return new IFCFilterTypeEnum(value);}
		public static implicit operator string(IFCFilterTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFireSuppressionTerminalTypeEnum = ENUMERATION OF
	/// (BREECHINGINLET
	/// ,FIREHYDRANT
	/// ,HOSEREEL
	/// ,SPRINKLER
	/// ,SPRINKLERDEFLECTOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCFireSuppressionTerminalTypeEnum : IFC_Enum, Global.IFCFireSuppressionTerminalTypeEnum
	{
		public static string BREECHINGINLET { get { return ".BREECHINGINLET."; } private set { } }
		public static string FIREHYDRANT { get { return ".FIREHYDRANT."; } private set { } }
		public static string HOSEREEL { get { return ".HOSEREEL."; } private set { } }
		public static string SPRINKLER { get { return ".SPRINKLER."; } private set { } }
		public static string SPRINKLERDEFLECTOR { get { return ".SPRINKLERDEFLECTOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCFireSuppressionTerminalTypeEnum() { Value = ".BREECHINGINLET.";}
		public IFCFireSuppressionTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IFCFireSuppressionTerminalTypeEnum(string value) { return new IFCFireSuppressionTerminalTypeEnum(value);}
		public static implicit operator string(IFCFireSuppressionTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFlowDirectionEnum = ENUMERATION OF
	/// (SOURCE
	/// ,SINK
	/// ,SOURCEANDSINK
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCFlowDirectionEnum : IFC_Enum, Global.IFCFlowDirectionEnum
	{
		public static string SOURCE { get { return ".SOURCE."; } private set { } }
		public static string SINK { get { return ".SINK."; } private set { } }
		public static string SOURCEANDSINK { get { return ".SOURCEANDSINK."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCFlowDirectionEnum() { Value = ".SOURCE.";}
		public IFCFlowDirectionEnum(string value) { Value = value; }
		public static implicit operator IFCFlowDirectionEnum(string value) { return new IFCFlowDirectionEnum(value);}
		public static implicit operator string(IFCFlowDirectionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFlowInstrumentTypeEnum = ENUMERATION OF
	/// (PRESSUREGAUGE
	/// ,THERMOMETER
	/// ,AMMETER
	/// ,FREQUENCYMETER
	/// ,POWERFACTORMETER
	/// ,PHASEANGLEMETER
	/// ,VOLTMETER_PEAK
	/// ,VOLTMETER_RMS
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCFlowInstrumentTypeEnum : IFC_Enum, Global.IFCFlowInstrumentTypeEnum
	{
		public static string PRESSUREGAUGE { get { return ".PRESSUREGAUGE."; } private set { } }
		public static string THERMOMETER { get { return ".THERMOMETER."; } private set { } }
		public static string AMMETER { get { return ".AMMETER."; } private set { } }
		public static string FREQUENCYMETER { get { return ".FREQUENCYMETER."; } private set { } }
		public static string POWERFACTORMETER { get { return ".POWERFACTORMETER."; } private set { } }
		public static string PHASEANGLEMETER { get { return ".PHASEANGLEMETER."; } private set { } }
		public static string VOLTMETER_PEAK { get { return ".VOLTMETER_PEAK."; } private set { } }
		public static string VOLTMETER_RMS { get { return ".VOLTMETER_RMS."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCFlowInstrumentTypeEnum() { Value = ".PRESSUREGAUGE.";}
		public IFCFlowInstrumentTypeEnum(string value) { Value = value; }
		public static implicit operator IFCFlowInstrumentTypeEnum(string value) { return new IFCFlowInstrumentTypeEnum(value);}
		public static implicit operator string(IFCFlowInstrumentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFlowMeterTypeEnum = ENUMERATION OF
	/// (ELECTRICMETER
	/// ,ENERGYMETER
	/// ,FLOWMETER
	/// ,GASMETER
	/// ,OILMETER
	/// ,WATERMETER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCFlowMeterTypeEnum : IFC_Enum, Global.IFCFlowMeterTypeEnum
	{
		public static string ELECTRICMETER { get { return ".ELECTRICMETER."; } private set { } }
		public static string ENERGYMETER { get { return ".ENERGYMETER."; } private set { } }
		public static string FLOWMETER { get { return ".FLOWMETER."; } private set { } }
		public static string GASMETER { get { return ".GASMETER."; } private set { } }
		public static string OILMETER { get { return ".OILMETER."; } private set { } }
		public static string WATERMETER { get { return ".WATERMETER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCFlowMeterTypeEnum() { Value = ".ELECTRICMETER.";}
		public IFCFlowMeterTypeEnum(string value) { Value = value; }
		public static implicit operator IFCFlowMeterTypeEnum(string value) { return new IFCFlowMeterTypeEnum(value);}
		public static implicit operator string(IFCFlowMeterTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcFootingTypeEnum = ENUMERATION OF
	/// (FOOTING_BEAM
	/// ,PAD_FOOTING
	/// ,PILE_CAP
	/// ,STRIP_FOOTING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCFootingTypeEnum : IFC_Enum, Global.IFCFootingTypeEnum
	{
		public static string FOOTING_BEAM { get { return ".FOOTING_BEAM."; } private set { } }
		public static string PAD_FOOTING { get { return ".PAD_FOOTING."; } private set { } }
		public static string PILE_CAP { get { return ".PILE_CAP."; } private set { } }
		public static string STRIP_FOOTING { get { return ".STRIP_FOOTING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCFootingTypeEnum() { Value = ".FOOTING_BEAM.";}
		public IFCFootingTypeEnum(string value) { Value = value; }
		public static implicit operator IFCFootingTypeEnum(string value) { return new IFCFootingTypeEnum(value);}
		public static implicit operator string(IFCFootingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGasTerminalTypeEnum = ENUMERATION OF
	/// (GASAPPLIANCE
	/// ,GASBOOSTER
	/// ,GASBURNER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCGasTerminalTypeEnum : IFC_Enum, Global.IFCGasTerminalTypeEnum
	{
		public static string GASAPPLIANCE { get { return ".GASAPPLIANCE."; } private set { } }
		public static string GASBOOSTER { get { return ".GASBOOSTER."; } private set { } }
		public static string GASBURNER { get { return ".GASBURNER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCGasTerminalTypeEnum() { Value = ".GASAPPLIANCE.";}
		public IFCGasTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IFCGasTerminalTypeEnum(string value) { return new IFCGasTerminalTypeEnum(value);}
		public static implicit operator string(IFCGasTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGeometricProjectionEnum = ENUMERATION OF
	/// (GRAPH_VIEW
	/// ,SKETCH_VIEW
	/// ,MODEL_VIEW
	/// ,PLAN_VIEW
	/// ,REFLECTED_PLAN_VIEW
	/// ,SECTION_VIEW
	/// ,ELEVATION_VIEW
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCGeometricProjectionEnum : IFC_Enum, Global.IFCGeometricProjectionEnum
	{
		public static string GRAPH_VIEW { get { return ".GRAPH_VIEW."; } private set { } }
		public static string SKETCH_VIEW { get { return ".SKETCH_VIEW."; } private set { } }
		public static string MODEL_VIEW { get { return ".MODEL_VIEW."; } private set { } }
		public static string PLAN_VIEW { get { return ".PLAN_VIEW."; } private set { } }
		public static string REFLECTED_PLAN_VIEW { get { return ".REFLECTED_PLAN_VIEW."; } private set { } }
		public static string SECTION_VIEW { get { return ".SECTION_VIEW."; } private set { } }
		public static string ELEVATION_VIEW { get { return ".ELEVATION_VIEW."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCGeometricProjectionEnum() { Value = ".GRAPH_VIEW.";}
		public IFCGeometricProjectionEnum(string value) { Value = value; }
		public static implicit operator IFCGeometricProjectionEnum(string value) { return new IFCGeometricProjectionEnum(value);}
		public static implicit operator string(IFCGeometricProjectionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcGlobalOrLocalEnum = ENUMERATION OF
	/// (GLOBAL_COORDS
	/// ,LOCAL_COORDS);
	/// END_TYPE;
	/// <summary>
	public class IFCGlobalOrLocalEnum : IFC_Enum, Global.IFCGlobalOrLocalEnum
	{
		public static string GLOBAL_COORDS { get { return ".GLOBAL_COORDS."; } private set { } }
		public static string LOCAL_COORDS { get { return ".LOCAL_COORDS."; } private set { } }
		public string Value {get; set;}
		public IFCGlobalOrLocalEnum() { Value = ".GLOBAL_COORDS.";}
		public IFCGlobalOrLocalEnum(string value) { Value = value; }
		public static implicit operator IFCGlobalOrLocalEnum(string value) { return new IFCGlobalOrLocalEnum(value);}
		public static implicit operator string(IFCGlobalOrLocalEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHeatExchangerTypeEnum = ENUMERATION OF
	/// (PLATE
	/// ,SHELLANDTUBE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCHeatExchangerTypeEnum : IFC_Enum, Global.IFCHeatExchangerTypeEnum
	{
		public static string PLATE { get { return ".PLATE."; } private set { } }
		public static string SHELLANDTUBE { get { return ".SHELLANDTUBE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCHeatExchangerTypeEnum() { Value = ".PLATE.";}
		public IFCHeatExchangerTypeEnum(string value) { Value = value; }
		public static implicit operator IFCHeatExchangerTypeEnum(string value) { return new IFCHeatExchangerTypeEnum(value);}
		public static implicit operator string(IFCHeatExchangerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcHumidifierTypeEnum = ENUMERATION OF
	/// (STEAMINJECTION
	/// ,ADIABATICAIRWASHER
	/// ,ADIABATICPAN
	/// ,ADIABATICWETTEDELEMENT
	/// ,ADIABATICATOMIZING
	/// ,ADIABATICULTRASONIC
	/// ,ADIABATICRIGIDMEDIA
	/// ,ADIABATICCOMPRESSEDAIRNOZZLE
	/// ,ASSISTEDELECTRIC
	/// ,ASSISTEDNATURALGAS
	/// ,ASSISTEDPROPANE
	/// ,ASSISTEDBUTANE
	/// ,ASSISTEDSTEAM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCHumidifierTypeEnum : IFC_Enum, Global.IFCHumidifierTypeEnum
	{
		public static string STEAMINJECTION { get { return ".STEAMINJECTION."; } private set { } }
		public static string ADIABATICAIRWASHER { get { return ".ADIABATICAIRWASHER."; } private set { } }
		public static string ADIABATICPAN { get { return ".ADIABATICPAN."; } private set { } }
		public static string ADIABATICWETTEDELEMENT { get { return ".ADIABATICWETTEDELEMENT."; } private set { } }
		public static string ADIABATICATOMIZING { get { return ".ADIABATICATOMIZING."; } private set { } }
		public static string ADIABATICULTRASONIC { get { return ".ADIABATICULTRASONIC."; } private set { } }
		public static string ADIABATICRIGIDMEDIA { get { return ".ADIABATICRIGIDMEDIA."; } private set { } }
		public static string ADIABATICCOMPRESSEDAIRNOZZLE { get { return ".ADIABATICCOMPRESSEDAIRNOZZLE."; } private set { } }
		public static string ASSISTEDELECTRIC { get { return ".ASSISTEDELECTRIC."; } private set { } }
		public static string ASSISTEDNATURALGAS { get { return ".ASSISTEDNATURALGAS."; } private set { } }
		public static string ASSISTEDPROPANE { get { return ".ASSISTEDPROPANE."; } private set { } }
		public static string ASSISTEDBUTANE { get { return ".ASSISTEDBUTANE."; } private set { } }
		public static string ASSISTEDSTEAM { get { return ".ASSISTEDSTEAM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCHumidifierTypeEnum() { Value = ".STEAMINJECTION.";}
		public IFCHumidifierTypeEnum(string value) { Value = value; }
		public static implicit operator IFCHumidifierTypeEnum(string value) { return new IFCHumidifierTypeEnum(value);}
		public static implicit operator string(IFCHumidifierTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInternalOrExternalEnum = ENUMERATION OF
	/// (INTERNAL
	/// ,EXTERNAL
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCInternalOrExternalEnum : IFC_Enum, Global.IFCInternalOrExternalEnum
	{
		public static string INTERNAL { get { return ".INTERNAL."; } private set { } }
		public static string EXTERNAL { get { return ".EXTERNAL."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCInternalOrExternalEnum() { Value = ".INTERNAL.";}
		public IFCInternalOrExternalEnum(string value) { Value = value; }
		public static implicit operator IFCInternalOrExternalEnum(string value) { return new IFCInternalOrExternalEnum(value);}
		public static implicit operator string(IFCInternalOrExternalEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcInventoryTypeEnum = ENUMERATION OF
	/// (ASSETINVENTORY
	/// ,SPACEINVENTORY
	/// ,FURNITUREINVENTORY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCInventoryTypeEnum : IFC_Enum, Global.IFCInventoryTypeEnum
	{
		public static string ASSETINVENTORY { get { return ".ASSETINVENTORY."; } private set { } }
		public static string SPACEINVENTORY { get { return ".SPACEINVENTORY."; } private set { } }
		public static string FURNITUREINVENTORY { get { return ".FURNITUREINVENTORY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCInventoryTypeEnum() { Value = ".ASSETINVENTORY.";}
		public IFCInventoryTypeEnum(string value) { Value = value; }
		public static implicit operator IFCInventoryTypeEnum(string value) { return new IFCInventoryTypeEnum(value);}
		public static implicit operator string(IFCInventoryTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcJunctionBoxTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCJunctionBoxTypeEnum : IFC_Enum, Global.IFCJunctionBoxTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCJunctionBoxTypeEnum() { Value = ".USERDEFINED.";}
		public IFCJunctionBoxTypeEnum(string value) { Value = value; }
		public static implicit operator IFCJunctionBoxTypeEnum(string value) { return new IFCJunctionBoxTypeEnum(value);}
		public static implicit operator string(IFCJunctionBoxTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLampTypeEnum = ENUMERATION OF
	/// (COMPACTFLUORESCENT
	/// ,FLUORESCENT
	/// ,HIGHPRESSUREMERCURY
	/// ,HIGHPRESSURESODIUM
	/// ,METALHALIDE
	/// ,TUNGSTENFILAMENT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCLampTypeEnum : IFC_Enum, Global.IFCLampTypeEnum
	{
		public static string COMPACTFLUORESCENT { get { return ".COMPACTFLUORESCENT."; } private set { } }
		public static string FLUORESCENT { get { return ".FLUORESCENT."; } private set { } }
		public static string HIGHPRESSUREMERCURY { get { return ".HIGHPRESSUREMERCURY."; } private set { } }
		public static string HIGHPRESSURESODIUM { get { return ".HIGHPRESSURESODIUM."; } private set { } }
		public static string METALHALIDE { get { return ".METALHALIDE."; } private set { } }
		public static string TUNGSTENFILAMENT { get { return ".TUNGSTENFILAMENT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCLampTypeEnum() { Value = ".COMPACTFLUORESCENT.";}
		public IFCLampTypeEnum(string value) { Value = value; }
		public static implicit operator IFCLampTypeEnum(string value) { return new IFCLampTypeEnum(value);}
		public static implicit operator string(IFCLampTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLayerSetDirectionEnum = ENUMERATION OF
	/// (AXIS1
	/// ,AXIS2
	/// ,AXIS3);
	/// END_TYPE;
	/// <summary>
	public class IFCLayerSetDirectionEnum : IFC_Enum, Global.IFCLayerSetDirectionEnum
	{
		public static string AXIS1 { get { return ".AXIS1."; } private set { } }
		public static string AXIS2 { get { return ".AXIS2."; } private set { } }
		public static string AXIS3 { get { return ".AXIS3."; } private set { } }
		public string Value {get; set;}
		public IFCLayerSetDirectionEnum() { Value = ".AXIS1.";}
		public IFCLayerSetDirectionEnum(string value) { Value = value; }
		public static implicit operator IFCLayerSetDirectionEnum(string value) { return new IFCLayerSetDirectionEnum(value);}
		public static implicit operator string(IFCLayerSetDirectionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLightDistributionCurveEnum = ENUMERATION OF
	/// (TYPE_A
	/// ,TYPE_B
	/// ,TYPE_C
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCLightDistributionCurveEnum : IFC_Enum, Global.IFCLightDistributionCurveEnum
	{
		public static string TYPE_A { get { return ".TYPE_A."; } private set { } }
		public static string TYPE_B { get { return ".TYPE_B."; } private set { } }
		public static string TYPE_C { get { return ".TYPE_C."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCLightDistributionCurveEnum() { Value = ".TYPE_A.";}
		public IFCLightDistributionCurveEnum(string value) { Value = value; }
		public static implicit operator IFCLightDistributionCurveEnum(string value) { return new IFCLightDistributionCurveEnum(value);}
		public static implicit operator string(IFCLightDistributionCurveEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLightEmissionSourceEnum = ENUMERATION OF
	/// (COMPACTFLUORESCENT
	/// ,FLUORESCENT
	/// ,HIGHPRESSUREMERCURY
	/// ,HIGHPRESSURESODIUM
	/// ,LIGHTEMITTINGDIODE
	/// ,LOWPRESSURESODIUM
	/// ,LOWVOLTAGEHALOGEN
	/// ,MAINVOLTAGEHALOGEN
	/// ,METALHALIDE
	/// ,TUNGSTENFILAMENT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCLightEmissionSourceEnum : IFC_Enum, Global.IFCLightEmissionSourceEnum
	{
		public static string COMPACTFLUORESCENT { get { return ".COMPACTFLUORESCENT."; } private set { } }
		public static string FLUORESCENT { get { return ".FLUORESCENT."; } private set { } }
		public static string HIGHPRESSUREMERCURY { get { return ".HIGHPRESSUREMERCURY."; } private set { } }
		public static string HIGHPRESSURESODIUM { get { return ".HIGHPRESSURESODIUM."; } private set { } }
		public static string LIGHTEMITTINGDIODE { get { return ".LIGHTEMITTINGDIODE."; } private set { } }
		public static string LOWPRESSURESODIUM { get { return ".LOWPRESSURESODIUM."; } private set { } }
		public static string LOWVOLTAGEHALOGEN { get { return ".LOWVOLTAGEHALOGEN."; } private set { } }
		public static string MAINVOLTAGEHALOGEN { get { return ".MAINVOLTAGEHALOGEN."; } private set { } }
		public static string METALHALIDE { get { return ".METALHALIDE."; } private set { } }
		public static string TUNGSTENFILAMENT { get { return ".TUNGSTENFILAMENT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCLightEmissionSourceEnum() { Value = ".COMPACTFLUORESCENT.";}
		public IFCLightEmissionSourceEnum(string value) { Value = value; }
		public static implicit operator IFCLightEmissionSourceEnum(string value) { return new IFCLightEmissionSourceEnum(value);}
		public static implicit operator string(IFCLightEmissionSourceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLightFixtureTypeEnum = ENUMERATION OF
	/// (POINTSOURCE
	/// ,DIRECTIONSOURCE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCLightFixtureTypeEnum : IFC_Enum, Global.IFCLightFixtureTypeEnum
	{
		public static string POINTSOURCE { get { return ".POINTSOURCE."; } private set { } }
		public static string DIRECTIONSOURCE { get { return ".DIRECTIONSOURCE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCLightFixtureTypeEnum() { Value = ".POINTSOURCE.";}
		public IFCLightFixtureTypeEnum(string value) { Value = value; }
		public static implicit operator IFCLightFixtureTypeEnum(string value) { return new IFCLightFixtureTypeEnum(value);}
		public static implicit operator string(IFCLightFixtureTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLoadGroupTypeEnum = ENUMERATION OF
	/// (LOAD_GROUP
	/// ,LOAD_CASE
	/// ,LOAD_COMBINATION_GROUP
	/// ,LOAD_COMBINATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCLoadGroupTypeEnum : IFC_Enum, Global.IFCLoadGroupTypeEnum
	{
		public static string LOAD_GROUP { get { return ".LOAD_GROUP."; } private set { } }
		public static string LOAD_CASE { get { return ".LOAD_CASE."; } private set { } }
		public static string LOAD_COMBINATION_GROUP { get { return ".LOAD_COMBINATION_GROUP."; } private set { } }
		public static string LOAD_COMBINATION { get { return ".LOAD_COMBINATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCLoadGroupTypeEnum() { Value = ".LOAD_GROUP.";}
		public IFCLoadGroupTypeEnum(string value) { Value = value; }
		public static implicit operator IFCLoadGroupTypeEnum(string value) { return new IFCLoadGroupTypeEnum(value);}
		public static implicit operator string(IFCLoadGroupTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcLogicalOperatorEnum = ENUMERATION OF
	/// (LOGICALAND
	/// ,LOGICALOR);
	/// END_TYPE;
	/// <summary>
	public class IFCLogicalOperatorEnum : IFC_Enum, Global.IFCLogicalOperatorEnum
	{
		public static string LOGICALAND { get { return ".LOGICALAND."; } private set { } }
		public static string LOGICALOR { get { return ".LOGICALOR."; } private set { } }
		public string Value {get; set;}
		public IFCLogicalOperatorEnum() { Value = ".LOGICALAND.";}
		public IFCLogicalOperatorEnum(string value) { Value = value; }
		public static implicit operator IFCLogicalOperatorEnum(string value) { return new IFCLogicalOperatorEnum(value);}
		public static implicit operator string(IFCLogicalOperatorEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMemberTypeEnum = ENUMERATION OF
	/// (BRACE
	/// ,CHORD
	/// ,COLLAR
	/// ,MEMBER
	/// ,MULLION
	/// ,PLATE
	/// ,POST
	/// ,PURLIN
	/// ,RAFTER
	/// ,STRINGER
	/// ,STRUT
	/// ,STUD
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCMemberTypeEnum : IFC_Enum, Global.IFCMemberTypeEnum
	{
		public static string BRACE { get { return ".BRACE."; } private set { } }
		public static string CHORD { get { return ".CHORD."; } private set { } }
		public static string COLLAR { get { return ".COLLAR."; } private set { } }
		public static string MEMBER { get { return ".MEMBER."; } private set { } }
		public static string MULLION { get { return ".MULLION."; } private set { } }
		public static string PLATE { get { return ".PLATE."; } private set { } }
		public static string POST { get { return ".POST."; } private set { } }
		public static string PURLIN { get { return ".PURLIN."; } private set { } }
		public static string RAFTER { get { return ".RAFTER."; } private set { } }
		public static string STRINGER { get { return ".STRINGER."; } private set { } }
		public static string STRUT { get { return ".STRUT."; } private set { } }
		public static string STUD { get { return ".STUD."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCMemberTypeEnum() { Value = ".BRACE.";}
		public IFCMemberTypeEnum(string value) { Value = value; }
		public static implicit operator IFCMemberTypeEnum(string value) { return new IFCMemberTypeEnum(value);}
		public static implicit operator string(IFCMemberTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcMotorConnectionTypeEnum = ENUMERATION OF
	/// (BELTDRIVE
	/// ,COUPLING
	/// ,DIRECTDRIVE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCMotorConnectionTypeEnum : IFC_Enum, Global.IFCMotorConnectionTypeEnum
	{
		public static string BELTDRIVE { get { return ".BELTDRIVE."; } private set { } }
		public static string COUPLING { get { return ".COUPLING."; } private set { } }
		public static string DIRECTDRIVE { get { return ".DIRECTDRIVE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCMotorConnectionTypeEnum() { Value = ".BELTDRIVE.";}
		public IFCMotorConnectionTypeEnum(string value) { Value = value; }
		public static implicit operator IFCMotorConnectionTypeEnum(string value) { return new IFCMotorConnectionTypeEnum(value);}
		public static implicit operator string(IFCMotorConnectionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcNullStyle = ENUMERATION OF
	/// (NULL);
	/// END_TYPE;
	/// <summary>
	public class IFCNullStyle : IFC_Enum, IFCPresentationStyleSelect, Global.IFCNullStyle
	{
		public static string NULL { get { return ".NULL."; } private set { } }
		public virtual IFCLabel? Name {get; set;}
		public string Value {get; set;}
		public IFCNullStyle() { Value = ".NULL.";}
		public IFCNullStyle(string value) { Value = value; }
		public static implicit operator IFCNullStyle(string value) { return new IFCNullStyle(value);}
		public static implicit operator string(IFCNullStyle value) { return value.Value;}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// TYPE IfcObjectTypeEnum = ENUMERATION OF
	/// (PRODUCT
	/// ,PROCESS
	/// ,CONTROL
	/// ,RESOURCE
	/// ,ACTOR
	/// ,GROUP
	/// ,PROJECT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCObjectTypeEnum : IFC_Enum, Global.IFCObjectTypeEnum
	{
		public static string PRODUCT { get { return ".PRODUCT."; } private set { } }
		public static string PROCESS { get { return ".PROCESS."; } private set { } }
		public static string CONTROL { get { return ".CONTROL."; } private set { } }
		public static string RESOURCE { get { return ".RESOURCE."; } private set { } }
		public static string ACTOR { get { return ".ACTOR."; } private set { } }
		public static string GROUP { get { return ".GROUP."; } private set { } }
		public static string PROJECT { get { return ".PROJECT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCObjectTypeEnum() { Value = ".PRODUCT.";}
		public IFCObjectTypeEnum(string value) { Value = value; }
		public static implicit operator IFCObjectTypeEnum(string value) { return new IFCObjectTypeEnum(value);}
		public static implicit operator string(IFCObjectTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcObjectiveEnum = ENUMERATION OF
	/// (CODECOMPLIANCE
	/// ,DESIGNINTENT
	/// ,HEALTHANDSAFETY
	/// ,REQUIREMENT
	/// ,SPECIFICATION
	/// ,TRIGGERCONDITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCObjectiveEnum : IFC_Enum, Global.IFCObjectiveEnum
	{
		public static string CODECOMPLIANCE { get { return ".CODECOMPLIANCE."; } private set { } }
		public static string DESIGNINTENT { get { return ".DESIGNINTENT."; } private set { } }
		public static string HEALTHANDSAFETY { get { return ".HEALTHANDSAFETY."; } private set { } }
		public static string REQUIREMENT { get { return ".REQUIREMENT."; } private set { } }
		public static string SPECIFICATION { get { return ".SPECIFICATION."; } private set { } }
		public static string TRIGGERCONDITION { get { return ".TRIGGERCONDITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCObjectiveEnum() { Value = ".CODECOMPLIANCE.";}
		public IFCObjectiveEnum(string value) { Value = value; }
		public static implicit operator IFCObjectiveEnum(string value) { return new IFCObjectiveEnum(value);}
		public static implicit operator string(IFCObjectiveEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcOccupantTypeEnum = ENUMERATION OF
	/// (ASSIGNEE
	/// ,ASSIGNOR
	/// ,LESSEE
	/// ,LESSOR
	/// ,LETTINGAGENT
	/// ,OWNER
	/// ,TENANT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCOccupantTypeEnum : IFC_Enum, Global.IFCOccupantTypeEnum
	{
		public static string ASSIGNEE { get { return ".ASSIGNEE."; } private set { } }
		public static string ASSIGNOR { get { return ".ASSIGNOR."; } private set { } }
		public static string LESSEE { get { return ".LESSEE."; } private set { } }
		public static string LESSOR { get { return ".LESSOR."; } private set { } }
		public static string LETTINGAGENT { get { return ".LETTINGAGENT."; } private set { } }
		public static string OWNER { get { return ".OWNER."; } private set { } }
		public static string TENANT { get { return ".TENANT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCOccupantTypeEnum() { Value = ".ASSIGNEE.";}
		public IFCOccupantTypeEnum(string value) { Value = value; }
		public static implicit operator IFCOccupantTypeEnum(string value) { return new IFCOccupantTypeEnum(value);}
		public static implicit operator string(IFCOccupantTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcOutletTypeEnum = ENUMERATION OF
	/// (AUDIOVISUALOUTLET
	/// ,COMMUNICATIONSOUTLET
	/// ,POWEROUTLET
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCOutletTypeEnum : IFC_Enum, Global.IFCOutletTypeEnum
	{
		public static string AUDIOVISUALOUTLET { get { return ".AUDIOVISUALOUTLET."; } private set { } }
		public static string COMMUNICATIONSOUTLET { get { return ".COMMUNICATIONSOUTLET."; } private set { } }
		public static string POWEROUTLET { get { return ".POWEROUTLET."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCOutletTypeEnum() { Value = ".AUDIOVISUALOUTLET.";}
		public IFCOutletTypeEnum(string value) { Value = value; }
		public static implicit operator IFCOutletTypeEnum(string value) { return new IFCOutletTypeEnum(value);}
		public static implicit operator string(IFCOutletTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPermeableCoveringOperationEnum = ENUMERATION OF
	/// (GRILL
	/// ,LOUVER
	/// ,SCREEN
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCPermeableCoveringOperationEnum : IFC_Enum, Global.IFCPermeableCoveringOperationEnum
	{
		public static string GRILL { get { return ".GRILL."; } private set { } }
		public static string LOUVER { get { return ".LOUVER."; } private set { } }
		public static string SCREEN { get { return ".SCREEN."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCPermeableCoveringOperationEnum() { Value = ".GRILL.";}
		public IFCPermeableCoveringOperationEnum(string value) { Value = value; }
		public static implicit operator IFCPermeableCoveringOperationEnum(string value) { return new IFCPermeableCoveringOperationEnum(value);}
		public static implicit operator string(IFCPermeableCoveringOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPhysicalOrVirtualEnum = ENUMERATION OF
	/// (PHYSICAL
	/// ,VIRTUAL
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCPhysicalOrVirtualEnum : IFC_Enum, Global.IFCPhysicalOrVirtualEnum
	{
		public static string PHYSICAL { get { return ".PHYSICAL."; } private set { } }
		public static string VIRTUAL { get { return ".VIRTUAL."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCPhysicalOrVirtualEnum() { Value = ".PHYSICAL.";}
		public IFCPhysicalOrVirtualEnum(string value) { Value = value; }
		public static implicit operator IFCPhysicalOrVirtualEnum(string value) { return new IFCPhysicalOrVirtualEnum(value);}
		public static implicit operator string(IFCPhysicalOrVirtualEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPileConstructionEnum = ENUMERATION OF
	/// (CAST_IN_PLACE
	/// ,COMPOSITE
	/// ,PRECAST_CONCRETE
	/// ,PREFAB_STEEL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCPileConstructionEnum : IFC_Enum, Global.IFCPileConstructionEnum
	{
		public static string CAST_IN_PLACE { get { return ".CAST_IN_PLACE."; } private set { } }
		public static string COMPOSITE { get { return ".COMPOSITE."; } private set { } }
		public static string PRECAST_CONCRETE { get { return ".PRECAST_CONCRETE."; } private set { } }
		public static string PREFAB_STEEL { get { return ".PREFAB_STEEL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCPileConstructionEnum() { Value = ".CAST_IN_PLACE.";}
		public IFCPileConstructionEnum(string value) { Value = value; }
		public static implicit operator IFCPileConstructionEnum(string value) { return new IFCPileConstructionEnum(value);}
		public static implicit operator string(IFCPileConstructionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPileTypeEnum = ENUMERATION OF
	/// (COHESION
	/// ,FRICTION
	/// ,SUPPORT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCPileTypeEnum : IFC_Enum, Global.IFCPileTypeEnum
	{
		public static string COHESION { get { return ".COHESION."; } private set { } }
		public static string FRICTION { get { return ".FRICTION."; } private set { } }
		public static string SUPPORT { get { return ".SUPPORT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCPileTypeEnum() { Value = ".COHESION.";}
		public IFCPileTypeEnum(string value) { Value = value; }
		public static implicit operator IFCPileTypeEnum(string value) { return new IFCPileTypeEnum(value);}
		public static implicit operator string(IFCPileTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPipeFittingTypeEnum = ENUMERATION OF
	/// (BEND
	/// ,CONNECTOR
	/// ,ENTRY
	/// ,EXIT
	/// ,JUNCTION
	/// ,OBSTRUCTION
	/// ,TRANSITION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCPipeFittingTypeEnum : IFC_Enum, Global.IFCPipeFittingTypeEnum
	{
		public static string BEND { get { return ".BEND."; } private set { } }
		public static string CONNECTOR { get { return ".CONNECTOR."; } private set { } }
		public static string ENTRY { get { return ".ENTRY."; } private set { } }
		public static string EXIT { get { return ".EXIT."; } private set { } }
		public static string JUNCTION { get { return ".JUNCTION."; } private set { } }
		public static string OBSTRUCTION { get { return ".OBSTRUCTION."; } private set { } }
		public static string TRANSITION { get { return ".TRANSITION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCPipeFittingTypeEnum() { Value = ".BEND.";}
		public IFCPipeFittingTypeEnum(string value) { Value = value; }
		public static implicit operator IFCPipeFittingTypeEnum(string value) { return new IFCPipeFittingTypeEnum(value);}
		public static implicit operator string(IFCPipeFittingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPipeSegmentTypeEnum = ENUMERATION OF
	/// (FLEXIBLESEGMENT
	/// ,RIGIDSEGMENT
	/// ,GUTTER
	/// ,SPOOL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCPipeSegmentTypeEnum : IFC_Enum, Global.IFCPipeSegmentTypeEnum
	{
		public static string FLEXIBLESEGMENT { get { return ".FLEXIBLESEGMENT."; } private set { } }
		public static string RIGIDSEGMENT { get { return ".RIGIDSEGMENT."; } private set { } }
		public static string GUTTER { get { return ".GUTTER."; } private set { } }
		public static string SPOOL { get { return ".SPOOL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCPipeSegmentTypeEnum() { Value = ".FLEXIBLESEGMENT.";}
		public IFCPipeSegmentTypeEnum(string value) { Value = value; }
		public static implicit operator IFCPipeSegmentTypeEnum(string value) { return new IFCPipeSegmentTypeEnum(value);}
		public static implicit operator string(IFCPipeSegmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPlateTypeEnum = ENUMERATION OF
	/// (CURTAIN_PANEL
	/// ,SHEET
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCPlateTypeEnum : IFC_Enum, Global.IFCPlateTypeEnum
	{
		public static string CURTAIN_PANEL { get { return ".CURTAIN_PANEL."; } private set { } }
		public static string SHEET { get { return ".SHEET."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCPlateTypeEnum() { Value = ".CURTAIN_PANEL.";}
		public IFCPlateTypeEnum(string value) { Value = value; }
		public static implicit operator IFCPlateTypeEnum(string value) { return new IFCPlateTypeEnum(value);}
		public static implicit operator string(IFCPlateTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProcedureTypeEnum = ENUMERATION OF
	/// (ADVICE_CAUTION
	/// ,ADVICE_NOTE
	/// ,ADVICE_WARNING
	/// ,CALIBRATION
	/// ,DIAGNOSTIC
	/// ,SHUTDOWN
	/// ,STARTUP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCProcedureTypeEnum : IFC_Enum, Global.IFCProcedureTypeEnum
	{
		public static string ADVICE_CAUTION { get { return ".ADVICE_CAUTION."; } private set { } }
		public static string ADVICE_NOTE { get { return ".ADVICE_NOTE."; } private set { } }
		public static string ADVICE_WARNING { get { return ".ADVICE_WARNING."; } private set { } }
		public static string CALIBRATION { get { return ".CALIBRATION."; } private set { } }
		public static string DIAGNOSTIC { get { return ".DIAGNOSTIC."; } private set { } }
		public static string SHUTDOWN { get { return ".SHUTDOWN."; } private set { } }
		public static string STARTUP { get { return ".STARTUP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCProcedureTypeEnum() { Value = ".ADVICE_CAUTION.";}
		public IFCProcedureTypeEnum(string value) { Value = value; }
		public static implicit operator IFCProcedureTypeEnum(string value) { return new IFCProcedureTypeEnum(value);}
		public static implicit operator string(IFCProcedureTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProfileTypeEnum = ENUMERATION OF
	/// (CURVE
	/// ,AREA);
	/// END_TYPE;
	/// <summary>
	public class IFCProfileTypeEnum : IFC_Enum, Global.IFCProfileTypeEnum
	{
		public static string CURVE { get { return ".CURVE."; } private set { } }
		public static string AREA { get { return ".AREA."; } private set { } }
		public string Value {get; set;}
		public IFCProfileTypeEnum() { Value = ".CURVE.";}
		public IFCProfileTypeEnum(string value) { Value = value; }
		public static implicit operator IFCProfileTypeEnum(string value) { return new IFCProfileTypeEnum(value);}
		public static implicit operator string(IFCProfileTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProjectOrderRecordTypeEnum = ENUMERATION OF
	/// (CHANGE
	/// ,MAINTENANCE
	/// ,MOVE
	/// ,PURCHASE
	/// ,WORK
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCProjectOrderRecordTypeEnum : IFC_Enum, Global.IFCProjectOrderRecordTypeEnum
	{
		public static string CHANGE { get { return ".CHANGE."; } private set { } }
		public static string MAINTENANCE { get { return ".MAINTENANCE."; } private set { } }
		public static string MOVE { get { return ".MOVE."; } private set { } }
		public static string PURCHASE { get { return ".PURCHASE."; } private set { } }
		public static string WORK { get { return ".WORK."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCProjectOrderRecordTypeEnum() { Value = ".CHANGE.";}
		public IFCProjectOrderRecordTypeEnum(string value) { Value = value; }
		public static implicit operator IFCProjectOrderRecordTypeEnum(string value) { return new IFCProjectOrderRecordTypeEnum(value);}
		public static implicit operator string(IFCProjectOrderRecordTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProjectOrderTypeEnum = ENUMERATION OF
	/// (CHANGEORDER
	/// ,MAINTENANCEWORKORDER
	/// ,MOVEORDER
	/// ,PURCHASEORDER
	/// ,WORKORDER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCProjectOrderTypeEnum : IFC_Enum, Global.IFCProjectOrderTypeEnum
	{
		public static string CHANGEORDER { get { return ".CHANGEORDER."; } private set { } }
		public static string MAINTENANCEWORKORDER { get { return ".MAINTENANCEWORKORDER."; } private set { } }
		public static string MOVEORDER { get { return ".MOVEORDER."; } private set { } }
		public static string PURCHASEORDER { get { return ".PURCHASEORDER."; } private set { } }
		public static string WORKORDER { get { return ".WORKORDER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCProjectOrderTypeEnum() { Value = ".CHANGEORDER.";}
		public IFCProjectOrderTypeEnum(string value) { Value = value; }
		public static implicit operator IFCProjectOrderTypeEnum(string value) { return new IFCProjectOrderTypeEnum(value);}
		public static implicit operator string(IFCProjectOrderTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProjectedOrTrueLengthEnum = ENUMERATION OF
	/// (PROJECTED_LENGTH
	/// ,TRUE_LENGTH);
	/// END_TYPE;
	/// <summary>
	public class IFCProjectedOrTrueLengthEnum : IFC_Enum, Global.IFCProjectedOrTrueLengthEnum
	{
		public static string PROJECTED_LENGTH { get { return ".PROJECTED_LENGTH."; } private set { } }
		public static string TRUE_LENGTH { get { return ".TRUE_LENGTH."; } private set { } }
		public string Value {get; set;}
		public IFCProjectedOrTrueLengthEnum() { Value = ".PROJECTED_LENGTH.";}
		public IFCProjectedOrTrueLengthEnum(string value) { Value = value; }
		public static implicit operator IFCProjectedOrTrueLengthEnum(string value) { return new IFCProjectedOrTrueLengthEnum(value);}
		public static implicit operator string(IFCProjectedOrTrueLengthEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPropertySourceEnum = ENUMERATION OF
	/// (DESIGN
	/// ,DESIGNMAXIMUM
	/// ,DESIGNMINIMUM
	/// ,SIMULATED
	/// ,ASBUILT
	/// ,COMMISSIONING
	/// ,MEASURED
	/// ,USERDEFINED
	/// ,NOTKNOWN);
	/// END_TYPE;
	/// <summary>
	public class IFCPropertySourceEnum : IFC_Enum, Global.IFCPropertySourceEnum
	{
		public static string DESIGN { get { return ".DESIGN."; } private set { } }
		public static string DESIGNMAXIMUM { get { return ".DESIGNMAXIMUM."; } private set { } }
		public static string DESIGNMINIMUM { get { return ".DESIGNMINIMUM."; } private set { } }
		public static string SIMULATED { get { return ".SIMULATED."; } private set { } }
		public static string ASBUILT { get { return ".ASBUILT."; } private set { } }
		public static string COMMISSIONING { get { return ".COMMISSIONING."; } private set { } }
		public static string MEASURED { get { return ".MEASURED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTKNOWN { get { return ".NOTKNOWN."; } private set { } }
		public string Value {get; set;}
		public IFCPropertySourceEnum() { Value = ".DESIGN.";}
		public IFCPropertySourceEnum(string value) { Value = value; }
		public static implicit operator IFCPropertySourceEnum(string value) { return new IFCPropertySourceEnum(value);}
		public static implicit operator string(IFCPropertySourceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcProtectiveDeviceTypeEnum = ENUMERATION OF
	/// (FUSEDISCONNECTOR
	/// ,CIRCUITBREAKER
	/// ,EARTHFAILUREDEVICE
	/// ,RESIDUALCURRENTCIRCUITBREAKER
	/// ,RESIDUALCURRENTSWITCH
	/// ,VARISTOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCProtectiveDeviceTypeEnum : IFC_Enum, Global.IFCProtectiveDeviceTypeEnum
	{
		public static string FUSEDISCONNECTOR { get { return ".FUSEDISCONNECTOR."; } private set { } }
		public static string CIRCUITBREAKER { get { return ".CIRCUITBREAKER."; } private set { } }
		public static string EARTHFAILUREDEVICE { get { return ".EARTHFAILUREDEVICE."; } private set { } }
		public static string RESIDUALCURRENTCIRCUITBREAKER { get { return ".RESIDUALCURRENTCIRCUITBREAKER."; } private set { } }
		public static string RESIDUALCURRENTSWITCH { get { return ".RESIDUALCURRENTSWITCH."; } private set { } }
		public static string VARISTOR { get { return ".VARISTOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCProtectiveDeviceTypeEnum() { Value = ".FUSEDISCONNECTOR.";}
		public IFCProtectiveDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IFCProtectiveDeviceTypeEnum(string value) { return new IFCProtectiveDeviceTypeEnum(value);}
		public static implicit operator string(IFCProtectiveDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcPumpTypeEnum = ENUMERATION OF
	/// (CIRCULATOR
	/// ,ENDSUCTION
	/// ,SPLITCASE
	/// ,VERTICALINLINE
	/// ,VERTICALTURBINE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCPumpTypeEnum : IFC_Enum, Global.IFCPumpTypeEnum
	{
		public static string CIRCULATOR { get { return ".CIRCULATOR."; } private set { } }
		public static string ENDSUCTION { get { return ".ENDSUCTION."; } private set { } }
		public static string SPLITCASE { get { return ".SPLITCASE."; } private set { } }
		public static string VERTICALINLINE { get { return ".VERTICALINLINE."; } private set { } }
		public static string VERTICALTURBINE { get { return ".VERTICALTURBINE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCPumpTypeEnum() { Value = ".CIRCULATOR.";}
		public IFCPumpTypeEnum(string value) { Value = value; }
		public static implicit operator IFCPumpTypeEnum(string value) { return new IFCPumpTypeEnum(value);}
		public static implicit operator string(IFCPumpTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRailingTypeEnum = ENUMERATION OF
	/// (HANDRAIL
	/// ,GUARDRAIL
	/// ,BALUSTRADE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCRailingTypeEnum : IFC_Enum, Global.IFCRailingTypeEnum
	{
		public static string HANDRAIL { get { return ".HANDRAIL."; } private set { } }
		public static string GUARDRAIL { get { return ".GUARDRAIL."; } private set { } }
		public static string BALUSTRADE { get { return ".BALUSTRADE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCRailingTypeEnum() { Value = ".HANDRAIL.";}
		public IFCRailingTypeEnum(string value) { Value = value; }
		public static implicit operator IFCRailingTypeEnum(string value) { return new IFCRailingTypeEnum(value);}
		public static implicit operator string(IFCRailingTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRampFlightTypeEnum = ENUMERATION OF
	/// (STRAIGHT
	/// ,SPIRAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCRampFlightTypeEnum : IFC_Enum, Global.IFCRampFlightTypeEnum
	{
		public static string STRAIGHT { get { return ".STRAIGHT."; } private set { } }
		public static string SPIRAL { get { return ".SPIRAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCRampFlightTypeEnum() { Value = ".STRAIGHT.";}
		public IFCRampFlightTypeEnum(string value) { Value = value; }
		public static implicit operator IFCRampFlightTypeEnum(string value) { return new IFCRampFlightTypeEnum(value);}
		public static implicit operator string(IFCRampFlightTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRampTypeEnum = ENUMERATION OF
	/// (STRAIGHT_RUN_RAMP
	/// ,TWO_STRAIGHT_RUN_RAMP
	/// ,QUARTER_TURN_RAMP
	/// ,TWO_QUARTER_TURN_RAMP
	/// ,HALF_TURN_RAMP
	/// ,SPIRAL_RAMP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCRampTypeEnum : IFC_Enum, Global.IFCRampTypeEnum
	{
		public static string STRAIGHT_RUN_RAMP { get { return ".STRAIGHT_RUN_RAMP."; } private set { } }
		public static string TWO_STRAIGHT_RUN_RAMP { get { return ".TWO_STRAIGHT_RUN_RAMP."; } private set { } }
		public static string QUARTER_TURN_RAMP { get { return ".QUARTER_TURN_RAMP."; } private set { } }
		public static string TWO_QUARTER_TURN_RAMP { get { return ".TWO_QUARTER_TURN_RAMP."; } private set { } }
		public static string HALF_TURN_RAMP { get { return ".HALF_TURN_RAMP."; } private set { } }
		public static string SPIRAL_RAMP { get { return ".SPIRAL_RAMP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCRampTypeEnum() { Value = ".STRAIGHT_RUN_RAMP.";}
		public IFCRampTypeEnum(string value) { Value = value; }
		public static implicit operator IFCRampTypeEnum(string value) { return new IFCRampTypeEnum(value);}
		public static implicit operator string(IFCRampTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReflectanceMethodEnum = ENUMERATION OF
	/// (BLINN
	/// ,FLAT
	/// ,GLASS
	/// ,MATT
	/// ,METAL
	/// ,MIRROR
	/// ,PHONG
	/// ,PLASTIC
	/// ,STRAUSS
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCReflectanceMethodEnum : IFC_Enum, Global.IFCReflectanceMethodEnum
	{
		public static string BLINN { get { return ".BLINN."; } private set { } }
		public static string FLAT { get { return ".FLAT."; } private set { } }
		public static string GLASS { get { return ".GLASS."; } private set { } }
		public static string MATT { get { return ".MATT."; } private set { } }
		public static string METAL { get { return ".METAL."; } private set { } }
		public static string MIRROR { get { return ".MIRROR."; } private set { } }
		public static string PHONG { get { return ".PHONG."; } private set { } }
		public static string PLASTIC { get { return ".PLASTIC."; } private set { } }
		public static string STRAUSS { get { return ".STRAUSS."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCReflectanceMethodEnum() { Value = ".BLINN.";}
		public IFCReflectanceMethodEnum(string value) { Value = value; }
		public static implicit operator IFCReflectanceMethodEnum(string value) { return new IFCReflectanceMethodEnum(value);}
		public static implicit operator string(IFCReflectanceMethodEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReinforcingBarRoleEnum = ENUMERATION OF
	/// (MAIN
	/// ,SHEAR
	/// ,LIGATURE
	/// ,STUD
	/// ,PUNCHING
	/// ,EDGE
	/// ,RING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCReinforcingBarRoleEnum : IFC_Enum, Global.IFCReinforcingBarRoleEnum
	{
		public static string MAIN { get { return ".MAIN."; } private set { } }
		public static string SHEAR { get { return ".SHEAR."; } private set { } }
		public static string LIGATURE { get { return ".LIGATURE."; } private set { } }
		public static string STUD { get { return ".STUD."; } private set { } }
		public static string PUNCHING { get { return ".PUNCHING."; } private set { } }
		public static string EDGE { get { return ".EDGE."; } private set { } }
		public static string RING { get { return ".RING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCReinforcingBarRoleEnum() { Value = ".MAIN.";}
		public IFCReinforcingBarRoleEnum(string value) { Value = value; }
		public static implicit operator IFCReinforcingBarRoleEnum(string value) { return new IFCReinforcingBarRoleEnum(value);}
		public static implicit operator string(IFCReinforcingBarRoleEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcReinforcingBarSurfaceEnum = ENUMERATION OF
	/// (PLAIN
	/// ,TEXTURED);
	/// END_TYPE;
	/// <summary>
	public class IFCReinforcingBarSurfaceEnum : IFC_Enum, Global.IFCReinforcingBarSurfaceEnum
	{
		public static string PLAIN { get { return ".PLAIN."; } private set { } }
		public static string TEXTURED { get { return ".TEXTURED."; } private set { } }
		public string Value {get; set;}
		public IFCReinforcingBarSurfaceEnum() { Value = ".PLAIN.";}
		public IFCReinforcingBarSurfaceEnum(string value) { Value = value; }
		public static implicit operator IFCReinforcingBarSurfaceEnum(string value) { return new IFCReinforcingBarSurfaceEnum(value);}
		public static implicit operator string(IFCReinforcingBarSurfaceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcResourceConsumptionEnum = ENUMERATION OF
	/// (CONSUMED
	/// ,PARTIALLYCONSUMED
	/// ,NOTCONSUMED
	/// ,OCCUPIED
	/// ,PARTIALLYOCCUPIED
	/// ,NOTOCCUPIED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCResourceConsumptionEnum : IFC_Enum, Global.IFCResourceConsumptionEnum
	{
		public static string CONSUMED { get { return ".CONSUMED."; } private set { } }
		public static string PARTIALLYCONSUMED { get { return ".PARTIALLYCONSUMED."; } private set { } }
		public static string NOTCONSUMED { get { return ".NOTCONSUMED."; } private set { } }
		public static string OCCUPIED { get { return ".OCCUPIED."; } private set { } }
		public static string PARTIALLYOCCUPIED { get { return ".PARTIALLYOCCUPIED."; } private set { } }
		public static string NOTOCCUPIED { get { return ".NOTOCCUPIED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCResourceConsumptionEnum() { Value = ".CONSUMED.";}
		public IFCResourceConsumptionEnum(string value) { Value = value; }
		public static implicit operator IFCResourceConsumptionEnum(string value) { return new IFCResourceConsumptionEnum(value);}
		public static implicit operator string(IFCResourceConsumptionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRibPlateDirectionEnum = ENUMERATION OF
	/// (DIRECTION_X
	/// ,DIRECTION_Y);
	/// END_TYPE;
	/// <summary>
	public class IFCRibPlateDirectionEnum : IFC_Enum, Global.IFCRibPlateDirectionEnum
	{
		public static string DIRECTION_X { get { return ".DIRECTION_X."; } private set { } }
		public static string DIRECTION_Y { get { return ".DIRECTION_Y."; } private set { } }
		public string Value {get; set;}
		public IFCRibPlateDirectionEnum() { Value = ".DIRECTION_X.";}
		public IFCRibPlateDirectionEnum(string value) { Value = value; }
		public static implicit operator IFCRibPlateDirectionEnum(string value) { return new IFCRibPlateDirectionEnum(value);}
		public static implicit operator string(IFCRibPlateDirectionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRoleEnum = ENUMERATION OF
	/// (SUPPLIER
	/// ,MANUFACTURER
	/// ,CONTRACTOR
	/// ,SUBCONTRACTOR
	/// ,ARCHITECT
	/// ,STRUCTURALENGINEER
	/// ,COSTENGINEER
	/// ,CLIENT
	/// ,BUILDINGOWNER
	/// ,BUILDINGOPERATOR
	/// ,MECHANICALENGINEER
	/// ,ELECTRICALENGINEER
	/// ,PROJECTMANAGER
	/// ,FACILITIESMANAGER
	/// ,CIVILENGINEER
	/// ,COMISSIONINGENGINEER
	/// ,ENGINEER
	/// ,OWNER
	/// ,CONSULTANT
	/// ,CONSTRUCTIONMANAGER
	/// ,FIELDCONSTRUCTIONMANAGER
	/// ,RESELLER
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCRoleEnum : IFC_Enum, Global.IFCRoleEnum
	{
		public static string SUPPLIER { get { return ".SUPPLIER."; } private set { } }
		public static string MANUFACTURER { get { return ".MANUFACTURER."; } private set { } }
		public static string CONTRACTOR { get { return ".CONTRACTOR."; } private set { } }
		public static string SUBCONTRACTOR { get { return ".SUBCONTRACTOR."; } private set { } }
		public static string ARCHITECT { get { return ".ARCHITECT."; } private set { } }
		public static string STRUCTURALENGINEER { get { return ".STRUCTURALENGINEER."; } private set { } }
		public static string COSTENGINEER { get { return ".COSTENGINEER."; } private set { } }
		public static string CLIENT { get { return ".CLIENT."; } private set { } }
		public static string BUILDINGOWNER { get { return ".BUILDINGOWNER."; } private set { } }
		public static string BUILDINGOPERATOR { get { return ".BUILDINGOPERATOR."; } private set { } }
		public static string MECHANICALENGINEER { get { return ".MECHANICALENGINEER."; } private set { } }
		public static string ELECTRICALENGINEER { get { return ".ELECTRICALENGINEER."; } private set { } }
		public static string PROJECTMANAGER { get { return ".PROJECTMANAGER."; } private set { } }
		public static string FACILITIESMANAGER { get { return ".FACILITIESMANAGER."; } private set { } }
		public static string CIVILENGINEER { get { return ".CIVILENGINEER."; } private set { } }
		public static string COMISSIONINGENGINEER { get { return ".COMISSIONINGENGINEER."; } private set { } }
		public static string ENGINEER { get { return ".ENGINEER."; } private set { } }
		public static string OWNER { get { return ".OWNER."; } private set { } }
		public static string CONSULTANT { get { return ".CONSULTANT."; } private set { } }
		public static string CONSTRUCTIONMANAGER { get { return ".CONSTRUCTIONMANAGER."; } private set { } }
		public static string FIELDCONSTRUCTIONMANAGER { get { return ".FIELDCONSTRUCTIONMANAGER."; } private set { } }
		public static string RESELLER { get { return ".RESELLER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCRoleEnum() { Value = ".SUPPLIER.";}
		public IFCRoleEnum(string value) { Value = value; }
		public static implicit operator IFCRoleEnum(string value) { return new IFCRoleEnum(value);}
		public static implicit operator string(IFCRoleEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcRoofTypeEnum = ENUMERATION OF
	/// (FLAT_ROOF
	/// ,SHED_ROOF
	/// ,GABLE_ROOF
	/// ,HIP_ROOF
	/// ,HIPPED_GABLE_ROOF
	/// ,GAMBREL_ROOF
	/// ,MANSARD_ROOF
	/// ,BARREL_ROOF
	/// ,RAINBOW_ROOF
	/// ,BUTTERFLY_ROOF
	/// ,PAVILION_ROOF
	/// ,DOME_ROOF
	/// ,FREEFORM
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCRoofTypeEnum : IFC_Enum, Global.IFCRoofTypeEnum
	{
		public static string FLAT_ROOF { get { return ".FLAT_ROOF."; } private set { } }
		public static string SHED_ROOF { get { return ".SHED_ROOF."; } private set { } }
		public static string GABLE_ROOF { get { return ".GABLE_ROOF."; } private set { } }
		public static string HIP_ROOF { get { return ".HIP_ROOF."; } private set { } }
		public static string HIPPED_GABLE_ROOF { get { return ".HIPPED_GABLE_ROOF."; } private set { } }
		public static string GAMBREL_ROOF { get { return ".GAMBREL_ROOF."; } private set { } }
		public static string MANSARD_ROOF { get { return ".MANSARD_ROOF."; } private set { } }
		public static string BARREL_ROOF { get { return ".BARREL_ROOF."; } private set { } }
		public static string RAINBOW_ROOF { get { return ".RAINBOW_ROOF."; } private set { } }
		public static string BUTTERFLY_ROOF { get { return ".BUTTERFLY_ROOF."; } private set { } }
		public static string PAVILION_ROOF { get { return ".PAVILION_ROOF."; } private set { } }
		public static string DOME_ROOF { get { return ".DOME_ROOF."; } private set { } }
		public static string FREEFORM { get { return ".FREEFORM."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCRoofTypeEnum() { Value = ".FLAT_ROOF.";}
		public IFCRoofTypeEnum(string value) { Value = value; }
		public static implicit operator IFCRoofTypeEnum(string value) { return new IFCRoofTypeEnum(value);}
		public static implicit operator string(IFCRoofTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSIPrefix = ENUMERATION OF
	/// (EXA
	/// ,PETA
	/// ,TERA
	/// ,GIGA
	/// ,MEGA
	/// ,KILO
	/// ,HECTO
	/// ,DECA
	/// ,DECI
	/// ,CENTI
	/// ,MILLI
	/// ,MICRO
	/// ,NANO
	/// ,PICO
	/// ,FEMTO
	/// ,ATTO);
	/// END_TYPE;
	/// <summary>
	public class IFCSIPrefix : IFC_Enum, Global.IFCSIPrefix
	{
		public static string EXA { get { return ".EXA."; } private set { } }
		public static string PETA { get { return ".PETA."; } private set { } }
		public static string TERA { get { return ".TERA."; } private set { } }
		public static string GIGA { get { return ".GIGA."; } private set { } }
		public static string MEGA { get { return ".MEGA."; } private set { } }
		public static string KILO { get { return ".KILO."; } private set { } }
		public static string HECTO { get { return ".HECTO."; } private set { } }
		public static string DECA { get { return ".DECA."; } private set { } }
		public static string DECI { get { return ".DECI."; } private set { } }
		public static string CENTI { get { return ".CENTI."; } private set { } }
		public static string MILLI { get { return ".MILLI."; } private set { } }
		public static string MICRO { get { return ".MICRO."; } private set { } }
		public static string NANO { get { return ".NANO."; } private set { } }
		public static string PICO { get { return ".PICO."; } private set { } }
		public static string FEMTO { get { return ".FEMTO."; } private set { } }
		public static string ATTO { get { return ".ATTO."; } private set { } }
		public string Value {get; set;}
		public IFCSIPrefix() { Value = ".EXA.";}
		public IFCSIPrefix(string value) { Value = value; }
		public static implicit operator IFCSIPrefix(string value) { return new IFCSIPrefix(value);}
		public static implicit operator string(IFCSIPrefix value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSIUnitName = ENUMERATION OF
	/// (AMPERE
	/// ,BECQUEREL
	/// ,CANDELA
	/// ,COULOMB
	/// ,CUBIC_METRE
	/// ,DEGREE_CELSIUS
	/// ,FARAD
	/// ,GRAM
	/// ,GRAY
	/// ,HENRY
	/// ,HERTZ
	/// ,JOULE
	/// ,KELVIN
	/// ,LUMEN
	/// ,LUX
	/// ,METRE
	/// ,MOLE
	/// ,NEWTON
	/// ,OHM
	/// ,PASCAL
	/// ,RADIAN
	/// ,SECOND
	/// ,SIEMENS
	/// ,SIEVERT
	/// ,SQUARE_METRE
	/// ,STERADIAN
	/// ,TESLA
	/// ,VOLT
	/// ,WATT
	/// ,WEBER);
	/// END_TYPE;
	/// <summary>
	public class IFCSIUnitName : IFC_Enum, Global.IFCSIUnitName
	{
		public static string AMPERE { get { return ".AMPERE."; } private set { } }
		public static string BECQUEREL { get { return ".BECQUEREL."; } private set { } }
		public static string CANDELA { get { return ".CANDELA."; } private set { } }
		public static string COULOMB { get { return ".COULOMB."; } private set { } }
		public static string CUBIC_METRE { get { return ".CUBIC_METRE."; } private set { } }
		public static string DEGREE_CELSIUS { get { return ".DEGREE_CELSIUS."; } private set { } }
		public static string FARAD { get { return ".FARAD."; } private set { } }
		public static string GRAM { get { return ".GRAM."; } private set { } }
		public static string GRAY { get { return ".GRAY."; } private set { } }
		public static string HENRY { get { return ".HENRY."; } private set { } }
		public static string HERTZ { get { return ".HERTZ."; } private set { } }
		public static string JOULE { get { return ".JOULE."; } private set { } }
		public static string KELVIN { get { return ".KELVIN."; } private set { } }
		public static string LUMEN { get { return ".LUMEN."; } private set { } }
		public static string LUX { get { return ".LUX."; } private set { } }
		public static string METRE { get { return ".METRE."; } private set { } }
		public static string MOLE { get { return ".MOLE."; } private set { } }
		public static string NEWTON { get { return ".NEWTON."; } private set { } }
		public static string OHM { get { return ".OHM."; } private set { } }
		public static string PASCAL { get { return ".PASCAL."; } private set { } }
		public static string RADIAN { get { return ".RADIAN."; } private set { } }
		public static string SECOND { get { return ".SECOND."; } private set { } }
		public static string SIEMENS { get { return ".SIEMENS."; } private set { } }
		public static string SIEVERT { get { return ".SIEVERT."; } private set { } }
		public static string SQUARE_METRE { get { return ".SQUARE_METRE."; } private set { } }
		public static string STERADIAN { get { return ".STERADIAN."; } private set { } }
		public static string TESLA { get { return ".TESLA."; } private set { } }
		public static string VOLT { get { return ".VOLT."; } private set { } }
		public static string WATT { get { return ".WATT."; } private set { } }
		public static string WEBER { get { return ".WEBER."; } private set { } }
		public string Value {get; set;}
		public IFCSIUnitName() { Value = ".AMPERE.";}
		public IFCSIUnitName(string value) { Value = value; }
		public static implicit operator IFCSIUnitName(string value) { return new IFCSIUnitName(value);}
		public static implicit operator string(IFCSIUnitName value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSanitaryTerminalTypeEnum = ENUMERATION OF
	/// (BATH
	/// ,BIDET
	/// ,CISTERN
	/// ,SHOWER
	/// ,SINK
	/// ,SANITARYFOUNTAIN
	/// ,TOILETPAN
	/// ,URINAL
	/// ,WASHHANDBASIN
	/// ,WCSEAT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCSanitaryTerminalTypeEnum : IFC_Enum, Global.IFCSanitaryTerminalTypeEnum
	{
		public static string BATH { get { return ".BATH."; } private set { } }
		public static string BIDET { get { return ".BIDET."; } private set { } }
		public static string CISTERN { get { return ".CISTERN."; } private set { } }
		public static string SHOWER { get { return ".SHOWER."; } private set { } }
		public static string SINK { get { return ".SINK."; } private set { } }
		public static string SANITARYFOUNTAIN { get { return ".SANITARYFOUNTAIN."; } private set { } }
		public static string TOILETPAN { get { return ".TOILETPAN."; } private set { } }
		public static string URINAL { get { return ".URINAL."; } private set { } }
		public static string WASHHANDBASIN { get { return ".WASHHANDBASIN."; } private set { } }
		public static string WCSEAT { get { return ".WCSEAT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCSanitaryTerminalTypeEnum() { Value = ".BATH.";}
		public IFCSanitaryTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IFCSanitaryTerminalTypeEnum(string value) { return new IFCSanitaryTerminalTypeEnum(value);}
		public static implicit operator string(IFCSanitaryTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSectionTypeEnum = ENUMERATION OF
	/// (UNIFORM
	/// ,TAPERED);
	/// END_TYPE;
	/// <summary>
	public class IFCSectionTypeEnum : IFC_Enum, Global.IFCSectionTypeEnum
	{
		public static string UNIFORM { get { return ".UNIFORM."; } private set { } }
		public static string TAPERED { get { return ".TAPERED."; } private set { } }
		public string Value {get; set;}
		public IFCSectionTypeEnum() { Value = ".UNIFORM.";}
		public IFCSectionTypeEnum(string value) { Value = value; }
		public static implicit operator IFCSectionTypeEnum(string value) { return new IFCSectionTypeEnum(value);}
		public static implicit operator string(IFCSectionTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSensorTypeEnum = ENUMERATION OF
	/// (CO2SENSOR
	/// ,FIRESENSOR
	/// ,FLOWSENSOR
	/// ,GASSENSOR
	/// ,HEATSENSOR
	/// ,HUMIDITYSENSOR
	/// ,LIGHTSENSOR
	/// ,MOISTURESENSOR
	/// ,MOVEMENTSENSOR
	/// ,PRESSURESENSOR
	/// ,SMOKESENSOR
	/// ,SOUNDSENSOR
	/// ,TEMPERATURESENSOR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCSensorTypeEnum : IFC_Enum, Global.IFCSensorTypeEnum
	{
		public static string CO2SENSOR { get { return ".CO2SENSOR."; } private set { } }
		public static string FIRESENSOR { get { return ".FIRESENSOR."; } private set { } }
		public static string FLOWSENSOR { get { return ".FLOWSENSOR."; } private set { } }
		public static string GASSENSOR { get { return ".GASSENSOR."; } private set { } }
		public static string HEATSENSOR { get { return ".HEATSENSOR."; } private set { } }
		public static string HUMIDITYSENSOR { get { return ".HUMIDITYSENSOR."; } private set { } }
		public static string LIGHTSENSOR { get { return ".LIGHTSENSOR."; } private set { } }
		public static string MOISTURESENSOR { get { return ".MOISTURESENSOR."; } private set { } }
		public static string MOVEMENTSENSOR { get { return ".MOVEMENTSENSOR."; } private set { } }
		public static string PRESSURESENSOR { get { return ".PRESSURESENSOR."; } private set { } }
		public static string SMOKESENSOR { get { return ".SMOKESENSOR."; } private set { } }
		public static string SOUNDSENSOR { get { return ".SOUNDSENSOR."; } private set { } }
		public static string TEMPERATURESENSOR { get { return ".TEMPERATURESENSOR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCSensorTypeEnum() { Value = ".CO2SENSOR.";}
		public IFCSensorTypeEnum(string value) { Value = value; }
		public static implicit operator IFCSensorTypeEnum(string value) { return new IFCSensorTypeEnum(value);}
		public static implicit operator string(IFCSensorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSequenceEnum = ENUMERATION OF
	/// (START_START
	/// ,START_FINISH
	/// ,FINISH_START
	/// ,FINISH_FINISH
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCSequenceEnum : IFC_Enum, Global.IFCSequenceEnum
	{
		public static string START_START { get { return ".START_START."; } private set { } }
		public static string START_FINISH { get { return ".START_FINISH."; } private set { } }
		public static string FINISH_START { get { return ".FINISH_START."; } private set { } }
		public static string FINISH_FINISH { get { return ".FINISH_FINISH."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCSequenceEnum() { Value = ".START_START.";}
		public IFCSequenceEnum(string value) { Value = value; }
		public static implicit operator IFCSequenceEnum(string value) { return new IFCSequenceEnum(value);}
		public static implicit operator string(IFCSequenceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcServiceLifeFactorTypeEnum = ENUMERATION OF
	/// (A_QUALITYOFCOMPONENTS
	/// ,B_DESIGNLEVEL
	/// ,C_WORKEXECUTIONLEVEL
	/// ,D_INDOORENVIRONMENT
	/// ,E_OUTDOORENVIRONMENT
	/// ,F_INUSECONDITIONS
	/// ,G_MAINTENANCELEVEL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCServiceLifeFactorTypeEnum : IFC_Enum, Global.IFCServiceLifeFactorTypeEnum
	{
		public static string A_QUALITYOFCOMPONENTS { get { return ".A_QUALITYOFCOMPONENTS."; } private set { } }
		public static string B_DESIGNLEVEL { get { return ".B_DESIGNLEVEL."; } private set { } }
		public static string C_WORKEXECUTIONLEVEL { get { return ".C_WORKEXECUTIONLEVEL."; } private set { } }
		public static string D_INDOORENVIRONMENT { get { return ".D_INDOORENVIRONMENT."; } private set { } }
		public static string E_OUTDOORENVIRONMENT { get { return ".E_OUTDOORENVIRONMENT."; } private set { } }
		public static string F_INUSECONDITIONS { get { return ".F_INUSECONDITIONS."; } private set { } }
		public static string G_MAINTENANCELEVEL { get { return ".G_MAINTENANCELEVEL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCServiceLifeFactorTypeEnum() { Value = ".A_QUALITYOFCOMPONENTS.";}
		public IFCServiceLifeFactorTypeEnum(string value) { Value = value; }
		public static implicit operator IFCServiceLifeFactorTypeEnum(string value) { return new IFCServiceLifeFactorTypeEnum(value);}
		public static implicit operator string(IFCServiceLifeFactorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcServiceLifeTypeEnum = ENUMERATION OF
	/// (ACTUALSERVICELIFE
	/// ,EXPECTEDSERVICELIFE
	/// ,OPTIMISTICREFERENCESERVICELIFE
	/// ,PESSIMISTICREFERENCESERVICELIFE
	/// ,REFERENCESERVICELIFE);
	/// END_TYPE;
	/// <summary>
	public class IFCServiceLifeTypeEnum : IFC_Enum, Global.IFCServiceLifeTypeEnum
	{
		public static string ACTUALSERVICELIFE { get { return ".ACTUALSERVICELIFE."; } private set { } }
		public static string EXPECTEDSERVICELIFE { get { return ".EXPECTEDSERVICELIFE."; } private set { } }
		public static string OPTIMISTICREFERENCESERVICELIFE { get { return ".OPTIMISTICREFERENCESERVICELIFE."; } private set { } }
		public static string PESSIMISTICREFERENCESERVICELIFE { get { return ".PESSIMISTICREFERENCESERVICELIFE."; } private set { } }
		public static string REFERENCESERVICELIFE { get { return ".REFERENCESERVICELIFE."; } private set { } }
		public string Value {get; set;}
		public IFCServiceLifeTypeEnum() { Value = ".ACTUALSERVICELIFE.";}
		public IFCServiceLifeTypeEnum(string value) { Value = value; }
		public static implicit operator IFCServiceLifeTypeEnum(string value) { return new IFCServiceLifeTypeEnum(value);}
		public static implicit operator string(IFCServiceLifeTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSlabTypeEnum = ENUMERATION OF
	/// (FLOOR
	/// ,ROOF
	/// ,LANDING
	/// ,BASESLAB
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCSlabTypeEnum : IFC_Enum, Global.IFCSlabTypeEnum
	{
		public static string FLOOR { get { return ".FLOOR."; } private set { } }
		public static string ROOF { get { return ".ROOF."; } private set { } }
		public static string LANDING { get { return ".LANDING."; } private set { } }
		public static string BASESLAB { get { return ".BASESLAB."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCSlabTypeEnum() { Value = ".FLOOR.";}
		public IFCSlabTypeEnum(string value) { Value = value; }
		public static implicit operator IFCSlabTypeEnum(string value) { return new IFCSlabTypeEnum(value);}
		public static implicit operator string(IFCSlabTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSoundScaleEnum = ENUMERATION OF
	/// (DBA
	/// ,DBB
	/// ,DBC
	/// ,NC
	/// ,NR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCSoundScaleEnum : IFC_Enum, Global.IFCSoundScaleEnum
	{
		public static string DBA { get { return ".DBA."; } private set { } }
		public static string DBB { get { return ".DBB."; } private set { } }
		public static string DBC { get { return ".DBC."; } private set { } }
		public static string NC { get { return ".NC."; } private set { } }
		public static string NR { get { return ".NR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCSoundScaleEnum() { Value = ".DBA.";}
		public IFCSoundScaleEnum(string value) { Value = value; }
		public static implicit operator IFCSoundScaleEnum(string value) { return new IFCSoundScaleEnum(value);}
		public static implicit operator string(IFCSoundScaleEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpaceHeaterTypeEnum = ENUMERATION OF
	/// (SECTIONALRADIATOR
	/// ,PANELRADIATOR
	/// ,TUBULARRADIATOR
	/// ,CONVECTOR
	/// ,BASEBOARDHEATER
	/// ,FINNEDTUBEUNIT
	/// ,UNITHEATER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCSpaceHeaterTypeEnum : IFC_Enum, Global.IFCSpaceHeaterTypeEnum
	{
		public static string SECTIONALRADIATOR { get { return ".SECTIONALRADIATOR."; } private set { } }
		public static string PANELRADIATOR { get { return ".PANELRADIATOR."; } private set { } }
		public static string TUBULARRADIATOR { get { return ".TUBULARRADIATOR."; } private set { } }
		public static string CONVECTOR { get { return ".CONVECTOR."; } private set { } }
		public static string BASEBOARDHEATER { get { return ".BASEBOARDHEATER."; } private set { } }
		public static string FINNEDTUBEUNIT { get { return ".FINNEDTUBEUNIT."; } private set { } }
		public static string UNITHEATER { get { return ".UNITHEATER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCSpaceHeaterTypeEnum() { Value = ".SECTIONALRADIATOR.";}
		public IFCSpaceHeaterTypeEnum(string value) { Value = value; }
		public static implicit operator IFCSpaceHeaterTypeEnum(string value) { return new IFCSpaceHeaterTypeEnum(value);}
		public static implicit operator string(IFCSpaceHeaterTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSpaceTypeEnum = ENUMERATION OF
	/// (USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCSpaceTypeEnum : IFC_Enum, Global.IFCSpaceTypeEnum
	{
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCSpaceTypeEnum() { Value = ".USERDEFINED.";}
		public IFCSpaceTypeEnum(string value) { Value = value; }
		public static implicit operator IFCSpaceTypeEnum(string value) { return new IFCSpaceTypeEnum(value);}
		public static implicit operator string(IFCSpaceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStackTerminalTypeEnum = ENUMERATION OF
	/// (BIRDCAGE
	/// ,COWL
	/// ,RAINWATERHOPPER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCStackTerminalTypeEnum : IFC_Enum, Global.IFCStackTerminalTypeEnum
	{
		public static string BIRDCAGE { get { return ".BIRDCAGE."; } private set { } }
		public static string COWL { get { return ".COWL."; } private set { } }
		public static string RAINWATERHOPPER { get { return ".RAINWATERHOPPER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCStackTerminalTypeEnum() { Value = ".BIRDCAGE.";}
		public IFCStackTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IFCStackTerminalTypeEnum(string value) { return new IFCStackTerminalTypeEnum(value);}
		public static implicit operator string(IFCStackTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStairFlightTypeEnum = ENUMERATION OF
	/// (STRAIGHT
	/// ,WINDER
	/// ,SPIRAL
	/// ,CURVED
	/// ,FREEFORM
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCStairFlightTypeEnum : IFC_Enum, Global.IFCStairFlightTypeEnum
	{
		public static string STRAIGHT { get { return ".STRAIGHT."; } private set { } }
		public static string WINDER { get { return ".WINDER."; } private set { } }
		public static string SPIRAL { get { return ".SPIRAL."; } private set { } }
		public static string CURVED { get { return ".CURVED."; } private set { } }
		public static string FREEFORM { get { return ".FREEFORM."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCStairFlightTypeEnum() { Value = ".STRAIGHT.";}
		public IFCStairFlightTypeEnum(string value) { Value = value; }
		public static implicit operator IFCStairFlightTypeEnum(string value) { return new IFCStairFlightTypeEnum(value);}
		public static implicit operator string(IFCStairFlightTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStairTypeEnum = ENUMERATION OF
	/// (STRAIGHT_RUN_STAIR
	/// ,TWO_STRAIGHT_RUN_STAIR
	/// ,QUARTER_WINDING_STAIR
	/// ,QUARTER_TURN_STAIR
	/// ,HALF_WINDING_STAIR
	/// ,HALF_TURN_STAIR
	/// ,TWO_QUARTER_WINDING_STAIR
	/// ,TWO_QUARTER_TURN_STAIR
	/// ,THREE_QUARTER_WINDING_STAIR
	/// ,THREE_QUARTER_TURN_STAIR
	/// ,SPIRAL_STAIR
	/// ,DOUBLE_RETURN_STAIR
	/// ,CURVED_RUN_STAIR
	/// ,TWO_CURVED_RUN_STAIR
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCStairTypeEnum : IFC_Enum, Global.IFCStairTypeEnum
	{
		public static string STRAIGHT_RUN_STAIR { get { return ".STRAIGHT_RUN_STAIR."; } private set { } }
		public static string TWO_STRAIGHT_RUN_STAIR { get { return ".TWO_STRAIGHT_RUN_STAIR."; } private set { } }
		public static string QUARTER_WINDING_STAIR { get { return ".QUARTER_WINDING_STAIR."; } private set { } }
		public static string QUARTER_TURN_STAIR { get { return ".QUARTER_TURN_STAIR."; } private set { } }
		public static string HALF_WINDING_STAIR { get { return ".HALF_WINDING_STAIR."; } private set { } }
		public static string HALF_TURN_STAIR { get { return ".HALF_TURN_STAIR."; } private set { } }
		public static string TWO_QUARTER_WINDING_STAIR { get { return ".TWO_QUARTER_WINDING_STAIR."; } private set { } }
		public static string TWO_QUARTER_TURN_STAIR { get { return ".TWO_QUARTER_TURN_STAIR."; } private set { } }
		public static string THREE_QUARTER_WINDING_STAIR { get { return ".THREE_QUARTER_WINDING_STAIR."; } private set { } }
		public static string THREE_QUARTER_TURN_STAIR { get { return ".THREE_QUARTER_TURN_STAIR."; } private set { } }
		public static string SPIRAL_STAIR { get { return ".SPIRAL_STAIR."; } private set { } }
		public static string DOUBLE_RETURN_STAIR { get { return ".DOUBLE_RETURN_STAIR."; } private set { } }
		public static string CURVED_RUN_STAIR { get { return ".CURVED_RUN_STAIR."; } private set { } }
		public static string TWO_CURVED_RUN_STAIR { get { return ".TWO_CURVED_RUN_STAIR."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCStairTypeEnum() { Value = ".STRAIGHT_RUN_STAIR.";}
		public IFCStairTypeEnum(string value) { Value = value; }
		public static implicit operator IFCStairTypeEnum(string value) { return new IFCStairTypeEnum(value);}
		public static implicit operator string(IFCStairTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStateEnum = ENUMERATION OF
	/// (READWRITE
	/// ,READONLY
	/// ,LOCKED
	/// ,READWRITELOCKED
	/// ,READONLYLOCKED);
	/// END_TYPE;
	/// <summary>
	public class IFCStateEnum : IFC_Enum, Global.IFCStateEnum
	{
		public static string READWRITE { get { return ".READWRITE."; } private set { } }
		public static string READONLY { get { return ".READONLY."; } private set { } }
		public static string LOCKED { get { return ".LOCKED."; } private set { } }
		public static string READWRITELOCKED { get { return ".READWRITELOCKED."; } private set { } }
		public static string READONLYLOCKED { get { return ".READONLYLOCKED."; } private set { } }
		public string Value {get; set;}
		public IFCStateEnum() { Value = ".READWRITE.";}
		public IFCStateEnum(string value) { Value = value; }
		public static implicit operator IFCStateEnum(string value) { return new IFCStateEnum(value);}
		public static implicit operator string(IFCStateEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStructuralCurveTypeEnum = ENUMERATION OF
	/// (RIGID_JOINED_MEMBER
	/// ,PIN_JOINED_MEMBER
	/// ,CABLE
	/// ,TENSION_MEMBER
	/// ,COMPRESSION_MEMBER
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCStructuralCurveTypeEnum : IFC_Enum, Global.IFCStructuralCurveTypeEnum
	{
		public static string RIGID_JOINED_MEMBER { get { return ".RIGID_JOINED_MEMBER."; } private set { } }
		public static string PIN_JOINED_MEMBER { get { return ".PIN_JOINED_MEMBER."; } private set { } }
		public static string CABLE { get { return ".CABLE."; } private set { } }
		public static string TENSION_MEMBER { get { return ".TENSION_MEMBER."; } private set { } }
		public static string COMPRESSION_MEMBER { get { return ".COMPRESSION_MEMBER."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCStructuralCurveTypeEnum() { Value = ".RIGID_JOINED_MEMBER.";}
		public IFCStructuralCurveTypeEnum(string value) { Value = value; }
		public static implicit operator IFCStructuralCurveTypeEnum(string value) { return new IFCStructuralCurveTypeEnum(value);}
		public static implicit operator string(IFCStructuralCurveTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcStructuralSurfaceTypeEnum = ENUMERATION OF
	/// (BENDING_ELEMENT
	/// ,MEMBRANE_ELEMENT
	/// ,SHELL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCStructuralSurfaceTypeEnum : IFC_Enum, Global.IFCStructuralSurfaceTypeEnum
	{
		public static string BENDING_ELEMENT { get { return ".BENDING_ELEMENT."; } private set { } }
		public static string MEMBRANE_ELEMENT { get { return ".MEMBRANE_ELEMENT."; } private set { } }
		public static string SHELL { get { return ".SHELL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCStructuralSurfaceTypeEnum() { Value = ".BENDING_ELEMENT.";}
		public IFCStructuralSurfaceTypeEnum(string value) { Value = value; }
		public static implicit operator IFCStructuralSurfaceTypeEnum(string value) { return new IFCStructuralSurfaceTypeEnum(value);}
		public static implicit operator string(IFCStructuralSurfaceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSurfaceSide = ENUMERATION OF
	/// (POSITIVE
	/// ,NEGATIVE
	/// ,BOTH);
	/// END_TYPE;
	/// <summary>
	public class IFCSurfaceSide : IFC_Enum, Global.IFCSurfaceSide
	{
		public static string POSITIVE { get { return ".POSITIVE."; } private set { } }
		public static string NEGATIVE { get { return ".NEGATIVE."; } private set { } }
		public static string BOTH { get { return ".BOTH."; } private set { } }
		public string Value {get; set;}
		public IFCSurfaceSide() { Value = ".POSITIVE.";}
		public IFCSurfaceSide(string value) { Value = value; }
		public static implicit operator IFCSurfaceSide(string value) { return new IFCSurfaceSide(value);}
		public static implicit operator string(IFCSurfaceSide value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSurfaceTextureEnum = ENUMERATION OF
	/// (BUMP
	/// ,OPACITY
	/// ,REFLECTION
	/// ,SELFILLUMINATION
	/// ,SHININESS
	/// ,SPECULAR
	/// ,TEXTURE
	/// ,TRANSPARENCYMAP
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCSurfaceTextureEnum : IFC_Enum, Global.IFCSurfaceTextureEnum
	{
		public static string BUMP { get { return ".BUMP."; } private set { } }
		public static string OPACITY { get { return ".OPACITY."; } private set { } }
		public static string REFLECTION { get { return ".REFLECTION."; } private set { } }
		public static string SELFILLUMINATION { get { return ".SELFILLUMINATION."; } private set { } }
		public static string SHININESS { get { return ".SHININESS."; } private set { } }
		public static string SPECULAR { get { return ".SPECULAR."; } private set { } }
		public static string TEXTURE { get { return ".TEXTURE."; } private set { } }
		public static string TRANSPARENCYMAP { get { return ".TRANSPARENCYMAP."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCSurfaceTextureEnum() { Value = ".BUMP.";}
		public IFCSurfaceTextureEnum(string value) { Value = value; }
		public static implicit operator IFCSurfaceTextureEnum(string value) { return new IFCSurfaceTextureEnum(value);}
		public static implicit operator string(IFCSurfaceTextureEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcSwitchingDeviceTypeEnum = ENUMERATION OF
	/// (CONTACTOR
	/// ,EMERGENCYSTOP
	/// ,STARTER
	/// ,SWITCHDISCONNECTOR
	/// ,TOGGLESWITCH
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCSwitchingDeviceTypeEnum : IFC_Enum, Global.IFCSwitchingDeviceTypeEnum
	{
		public static string CONTACTOR { get { return ".CONTACTOR."; } private set { } }
		public static string EMERGENCYSTOP { get { return ".EMERGENCYSTOP."; } private set { } }
		public static string STARTER { get { return ".STARTER."; } private set { } }
		public static string SWITCHDISCONNECTOR { get { return ".SWITCHDISCONNECTOR."; } private set { } }
		public static string TOGGLESWITCH { get { return ".TOGGLESWITCH."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCSwitchingDeviceTypeEnum() { Value = ".CONTACTOR.";}
		public IFCSwitchingDeviceTypeEnum(string value) { Value = value; }
		public static implicit operator IFCSwitchingDeviceTypeEnum(string value) { return new IFCSwitchingDeviceTypeEnum(value);}
		public static implicit operator string(IFCSwitchingDeviceTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTankTypeEnum = ENUMERATION OF
	/// (PREFORMED
	/// ,SECTIONAL
	/// ,EXPANSION
	/// ,PRESSUREVESSEL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCTankTypeEnum : IFC_Enum, Global.IFCTankTypeEnum
	{
		public static string PREFORMED { get { return ".PREFORMED."; } private set { } }
		public static string SECTIONAL { get { return ".SECTIONAL."; } private set { } }
		public static string EXPANSION { get { return ".EXPANSION."; } private set { } }
		public static string PRESSUREVESSEL { get { return ".PRESSUREVESSEL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCTankTypeEnum() { Value = ".PREFORMED.";}
		public IFCTankTypeEnum(string value) { Value = value; }
		public static implicit operator IFCTankTypeEnum(string value) { return new IFCTankTypeEnum(value);}
		public static implicit operator string(IFCTankTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTendonTypeEnum = ENUMERATION OF
	/// (STRAND
	/// ,WIRE
	/// ,BAR
	/// ,COATED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCTendonTypeEnum : IFC_Enum, Global.IFCTendonTypeEnum
	{
		public static string STRAND { get { return ".STRAND."; } private set { } }
		public static string WIRE { get { return ".WIRE."; } private set { } }
		public static string BAR { get { return ".BAR."; } private set { } }
		public static string COATED { get { return ".COATED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCTendonTypeEnum() { Value = ".STRAND.";}
		public IFCTendonTypeEnum(string value) { Value = value; }
		public static implicit operator IFCTendonTypeEnum(string value) { return new IFCTendonTypeEnum(value);}
		public static implicit operator string(IFCTendonTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTextPath = ENUMERATION OF
	/// (LEFT
	/// ,RIGHT
	/// ,UP
	/// ,DOWN);
	/// END_TYPE;
	/// <summary>
	public class IFCTextPath : IFC_Enum, Global.IFCTextPath
	{
		public static string LEFT { get { return ".LEFT."; } private set { } }
		public static string RIGHT { get { return ".RIGHT."; } private set { } }
		public static string UP { get { return ".UP."; } private set { } }
		public static string DOWN { get { return ".DOWN."; } private set { } }
		public string Value {get; set;}
		public IFCTextPath() { Value = ".LEFT.";}
		public IFCTextPath(string value) { Value = value; }
		public static implicit operator IFCTextPath(string value) { return new IFCTextPath(value);}
		public static implicit operator string(IFCTextPath value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalLoadSourceEnum = ENUMERATION OF
	/// (PEOPLE
	/// ,LIGHTING
	/// ,EQUIPMENT
	/// ,VENTILATIONINDOORAIR
	/// ,VENTILATIONOUTSIDEAIR
	/// ,RECIRCULATEDAIR
	/// ,EXHAUSTAIR
	/// ,AIREXCHANGERATE
	/// ,DRYBULBTEMPERATURE
	/// ,RELATIVEHUMIDITY
	/// ,INFILTRATION
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCThermalLoadSourceEnum : IFC_Enum, Global.IFCThermalLoadSourceEnum
	{
		public static string PEOPLE { get { return ".PEOPLE."; } private set { } }
		public static string LIGHTING { get { return ".LIGHTING."; } private set { } }
		public static string EQUIPMENT { get { return ".EQUIPMENT."; } private set { } }
		public static string VENTILATIONINDOORAIR { get { return ".VENTILATIONINDOORAIR."; } private set { } }
		public static string VENTILATIONOUTSIDEAIR { get { return ".VENTILATIONOUTSIDEAIR."; } private set { } }
		public static string RECIRCULATEDAIR { get { return ".RECIRCULATEDAIR."; } private set { } }
		public static string EXHAUSTAIR { get { return ".EXHAUSTAIR."; } private set { } }
		public static string AIREXCHANGERATE { get { return ".AIREXCHANGERATE."; } private set { } }
		public static string DRYBULBTEMPERATURE { get { return ".DRYBULBTEMPERATURE."; } private set { } }
		public static string RELATIVEHUMIDITY { get { return ".RELATIVEHUMIDITY."; } private set { } }
		public static string INFILTRATION { get { return ".INFILTRATION."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCThermalLoadSourceEnum() { Value = ".PEOPLE.";}
		public IFCThermalLoadSourceEnum(string value) { Value = value; }
		public static implicit operator IFCThermalLoadSourceEnum(string value) { return new IFCThermalLoadSourceEnum(value);}
		public static implicit operator string(IFCThermalLoadSourceEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcThermalLoadTypeEnum = ENUMERATION OF
	/// (SENSIBLE
	/// ,LATENT
	/// ,RADIANT
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCThermalLoadTypeEnum : IFC_Enum, Global.IFCThermalLoadTypeEnum
	{
		public static string SENSIBLE { get { return ".SENSIBLE."; } private set { } }
		public static string LATENT { get { return ".LATENT."; } private set { } }
		public static string RADIANT { get { return ".RADIANT."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCThermalLoadTypeEnum() { Value = ".SENSIBLE.";}
		public IFCThermalLoadTypeEnum(string value) { Value = value; }
		public static implicit operator IFCThermalLoadTypeEnum(string value) { return new IFCThermalLoadTypeEnum(value);}
		public static implicit operator string(IFCThermalLoadTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTimeSeriesDataTypeEnum = ENUMERATION OF
	/// (CONTINUOUS
	/// ,DISCRETE
	/// ,DISCRETEBINARY
	/// ,PIECEWISEBINARY
	/// ,PIECEWISECONSTANT
	/// ,PIECEWISECONTINUOUS
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCTimeSeriesDataTypeEnum : IFC_Enum, Global.IFCTimeSeriesDataTypeEnum
	{
		public static string CONTINUOUS { get { return ".CONTINUOUS."; } private set { } }
		public static string DISCRETE { get { return ".DISCRETE."; } private set { } }
		public static string DISCRETEBINARY { get { return ".DISCRETEBINARY."; } private set { } }
		public static string PIECEWISEBINARY { get { return ".PIECEWISEBINARY."; } private set { } }
		public static string PIECEWISECONSTANT { get { return ".PIECEWISECONSTANT."; } private set { } }
		public static string PIECEWISECONTINUOUS { get { return ".PIECEWISECONTINUOUS."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCTimeSeriesDataTypeEnum() { Value = ".CONTINUOUS.";}
		public IFCTimeSeriesDataTypeEnum(string value) { Value = value; }
		public static implicit operator IFCTimeSeriesDataTypeEnum(string value) { return new IFCTimeSeriesDataTypeEnum(value);}
		public static implicit operator string(IFCTimeSeriesDataTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTimeSeriesScheduleTypeEnum = ENUMERATION OF
	/// (ANNUAL
	/// ,MONTHLY
	/// ,WEEKLY
	/// ,DAILY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCTimeSeriesScheduleTypeEnum : IFC_Enum, Global.IFCTimeSeriesScheduleTypeEnum
	{
		public static string ANNUAL { get { return ".ANNUAL."; } private set { } }
		public static string MONTHLY { get { return ".MONTHLY."; } private set { } }
		public static string WEEKLY { get { return ".WEEKLY."; } private set { } }
		public static string DAILY { get { return ".DAILY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCTimeSeriesScheduleTypeEnum() { Value = ".ANNUAL.";}
		public IFCTimeSeriesScheduleTypeEnum(string value) { Value = value; }
		public static implicit operator IFCTimeSeriesScheduleTypeEnum(string value) { return new IFCTimeSeriesScheduleTypeEnum(value);}
		public static implicit operator string(IFCTimeSeriesScheduleTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTransformerTypeEnum = ENUMERATION OF
	/// (CURRENT
	/// ,FREQUENCY
	/// ,VOLTAGE
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCTransformerTypeEnum : IFC_Enum, Global.IFCTransformerTypeEnum
	{
		public static string CURRENT { get { return ".CURRENT."; } private set { } }
		public static string FREQUENCY { get { return ".FREQUENCY."; } private set { } }
		public static string VOLTAGE { get { return ".VOLTAGE."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCTransformerTypeEnum() { Value = ".CURRENT.";}
		public IFCTransformerTypeEnum(string value) { Value = value; }
		public static implicit operator IFCTransformerTypeEnum(string value) { return new IFCTransformerTypeEnum(value);}
		public static implicit operator string(IFCTransformerTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTransitionCode = ENUMERATION OF
	/// (DISCONTINUOUS
	/// ,CONTINUOUS
	/// ,CONTSAMEGRADIENT
	/// ,CONTSAMEGRADIENTSAMECURVATURE);
	/// END_TYPE;
	/// <summary>
	public class IFCTransitionCode : IFC_Enum, Global.IFCTransitionCode
	{
		public static string DISCONTINUOUS { get { return ".DISCONTINUOUS."; } private set { } }
		public static string CONTINUOUS { get { return ".CONTINUOUS."; } private set { } }
		public static string CONTSAMEGRADIENT { get { return ".CONTSAMEGRADIENT."; } private set { } }
		public static string CONTSAMEGRADIENTSAMECURVATURE { get { return ".CONTSAMEGRADIENTSAMECURVATURE."; } private set { } }
		public string Value {get; set;}
		public IFCTransitionCode() { Value = ".DISCONTINUOUS.";}
		public IFCTransitionCode(string value) { Value = value; }
		public static implicit operator IFCTransitionCode(string value) { return new IFCTransitionCode(value);}
		public static implicit operator string(IFCTransitionCode value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTransportElementTypeEnum = ENUMERATION OF
	/// (ELEVATOR
	/// ,ESCALATOR
	/// ,MOVINGWALKWAY
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCTransportElementTypeEnum : IFC_Enum, Global.IFCTransportElementTypeEnum
	{
		public static string ELEVATOR { get { return ".ELEVATOR."; } private set { } }
		public static string ESCALATOR { get { return ".ESCALATOR."; } private set { } }
		public static string MOVINGWALKWAY { get { return ".MOVINGWALKWAY."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCTransportElementTypeEnum() { Value = ".ELEVATOR.";}
		public IFCTransportElementTypeEnum(string value) { Value = value; }
		public static implicit operator IFCTransportElementTypeEnum(string value) { return new IFCTransportElementTypeEnum(value);}
		public static implicit operator string(IFCTransportElementTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTrimmingPreference = ENUMERATION OF
	/// (CARTESIAN
	/// ,PARAMETER
	/// ,UNSPECIFIED);
	/// END_TYPE;
	/// <summary>
	public class IFCTrimmingPreference : IFC_Enum, Global.IFCTrimmingPreference
	{
		public static string CARTESIAN { get { return ".CARTESIAN."; } private set { } }
		public static string PARAMETER { get { return ".PARAMETER."; } private set { } }
		public static string UNSPECIFIED { get { return ".UNSPECIFIED."; } private set { } }
		public string Value {get; set;}
		public IFCTrimmingPreference() { Value = ".CARTESIAN.";}
		public IFCTrimmingPreference(string value) { Value = value; }
		public static implicit operator IFCTrimmingPreference(string value) { return new IFCTrimmingPreference(value);}
		public static implicit operator string(IFCTrimmingPreference value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcTubeBundleTypeEnum = ENUMERATION OF
	/// (FINNED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCTubeBundleTypeEnum : IFC_Enum, Global.IFCTubeBundleTypeEnum
	{
		public static string FINNED { get { return ".FINNED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCTubeBundleTypeEnum() { Value = ".FINNED.";}
		public IFCTubeBundleTypeEnum(string value) { Value = value; }
		public static implicit operator IFCTubeBundleTypeEnum(string value) { return new IFCTubeBundleTypeEnum(value);}
		public static implicit operator string(IFCTubeBundleTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcUnitEnum = ENUMERATION OF
	/// (ABSORBEDDOSEUNIT
	/// ,AMOUNTOFSUBSTANCEUNIT
	/// ,AREAUNIT
	/// ,DOSEEQUIVALENTUNIT
	/// ,ELECTRICCAPACITANCEUNIT
	/// ,ELECTRICCHARGEUNIT
	/// ,ELECTRICCONDUCTANCEUNIT
	/// ,ELECTRICCURRENTUNIT
	/// ,ELECTRICRESISTANCEUNIT
	/// ,ELECTRICVOLTAGEUNIT
	/// ,ENERGYUNIT
	/// ,FORCEUNIT
	/// ,FREQUENCYUNIT
	/// ,ILLUMINANCEUNIT
	/// ,INDUCTANCEUNIT
	/// ,LENGTHUNIT
	/// ,LUMINOUSFLUXUNIT
	/// ,LUMINOUSINTENSITYUNIT
	/// ,MAGNETICFLUXDENSITYUNIT
	/// ,MAGNETICFLUXUNIT
	/// ,MASSUNIT
	/// ,PLANEANGLEUNIT
	/// ,POWERUNIT
	/// ,PRESSUREUNIT
	/// ,RADIOACTIVITYUNIT
	/// ,SOLIDANGLEUNIT
	/// ,THERMODYNAMICTEMPERATUREUNIT
	/// ,TIMEUNIT
	/// ,VOLUMEUNIT
	/// ,USERDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCUnitEnum : IFC_Enum, Global.IFCUnitEnum
	{
		public static string ABSORBEDDOSEUNIT { get { return ".ABSORBEDDOSEUNIT."; } private set { } }
		public static string AMOUNTOFSUBSTANCEUNIT { get { return ".AMOUNTOFSUBSTANCEUNIT."; } private set { } }
		public static string AREAUNIT { get { return ".AREAUNIT."; } private set { } }
		public static string DOSEEQUIVALENTUNIT { get { return ".DOSEEQUIVALENTUNIT."; } private set { } }
		public static string ELECTRICCAPACITANCEUNIT { get { return ".ELECTRICCAPACITANCEUNIT."; } private set { } }
		public static string ELECTRICCHARGEUNIT { get { return ".ELECTRICCHARGEUNIT."; } private set { } }
		public static string ELECTRICCONDUCTANCEUNIT { get { return ".ELECTRICCONDUCTANCEUNIT."; } private set { } }
		public static string ELECTRICCURRENTUNIT { get { return ".ELECTRICCURRENTUNIT."; } private set { } }
		public static string ELECTRICRESISTANCEUNIT { get { return ".ELECTRICRESISTANCEUNIT."; } private set { } }
		public static string ELECTRICVOLTAGEUNIT { get { return ".ELECTRICVOLTAGEUNIT."; } private set { } }
		public static string ENERGYUNIT { get { return ".ENERGYUNIT."; } private set { } }
		public static string FORCEUNIT { get { return ".FORCEUNIT."; } private set { } }
		public static string FREQUENCYUNIT { get { return ".FREQUENCYUNIT."; } private set { } }
		public static string ILLUMINANCEUNIT { get { return ".ILLUMINANCEUNIT."; } private set { } }
		public static string INDUCTANCEUNIT { get { return ".INDUCTANCEUNIT."; } private set { } }
		public static string LENGTHUNIT { get { return ".LENGTHUNIT."; } private set { } }
		public static string LUMINOUSFLUXUNIT { get { return ".LUMINOUSFLUXUNIT."; } private set { } }
		public static string LUMINOUSINTENSITYUNIT { get { return ".LUMINOUSINTENSITYUNIT."; } private set { } }
		public static string MAGNETICFLUXDENSITYUNIT { get { return ".MAGNETICFLUXDENSITYUNIT."; } private set { } }
		public static string MAGNETICFLUXUNIT { get { return ".MAGNETICFLUXUNIT."; } private set { } }
		public static string MASSUNIT { get { return ".MASSUNIT."; } private set { } }
		public static string PLANEANGLEUNIT { get { return ".PLANEANGLEUNIT."; } private set { } }
		public static string POWERUNIT { get { return ".POWERUNIT."; } private set { } }
		public static string PRESSUREUNIT { get { return ".PRESSUREUNIT."; } private set { } }
		public static string RADIOACTIVITYUNIT { get { return ".RADIOACTIVITYUNIT."; } private set { } }
		public static string SOLIDANGLEUNIT { get { return ".SOLIDANGLEUNIT."; } private set { } }
		public static string THERMODYNAMICTEMPERATUREUNIT { get { return ".THERMODYNAMICTEMPERATUREUNIT."; } private set { } }
		public static string TIMEUNIT { get { return ".TIMEUNIT."; } private set { } }
		public static string VOLUMEUNIT { get { return ".VOLUMEUNIT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCUnitEnum() { Value = ".ABSORBEDDOSEUNIT.";}
		public IFCUnitEnum(string value) { Value = value; }
		public static implicit operator IFCUnitEnum(string value) { return new IFCUnitEnum(value);}
		public static implicit operator string(IFCUnitEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcUnitaryEquipmentTypeEnum = ENUMERATION OF
	/// (AIRHANDLER
	/// ,AIRCONDITIONINGUNIT
	/// ,SPLITSYSTEM
	/// ,ROOFTOPUNIT
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCUnitaryEquipmentTypeEnum : IFC_Enum, Global.IFCUnitaryEquipmentTypeEnum
	{
		public static string AIRHANDLER { get { return ".AIRHANDLER."; } private set { } }
		public static string AIRCONDITIONINGUNIT { get { return ".AIRCONDITIONINGUNIT."; } private set { } }
		public static string SPLITSYSTEM { get { return ".SPLITSYSTEM."; } private set { } }
		public static string ROOFTOPUNIT { get { return ".ROOFTOPUNIT."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCUnitaryEquipmentTypeEnum() { Value = ".AIRHANDLER.";}
		public IFCUnitaryEquipmentTypeEnum(string value) { Value = value; }
		public static implicit operator IFCUnitaryEquipmentTypeEnum(string value) { return new IFCUnitaryEquipmentTypeEnum(value);}
		public static implicit operator string(IFCUnitaryEquipmentTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcValveTypeEnum = ENUMERATION OF
	/// (AIRRELEASE
	/// ,ANTIVACUUM
	/// ,CHANGEOVER
	/// ,CHECK
	/// ,COMMISSIONING
	/// ,DIVERTING
	/// ,DRAWOFFCOCK
	/// ,DOUBLECHECK
	/// ,DOUBLEREGULATING
	/// ,FAUCET
	/// ,FLUSHING
	/// ,GASCOCK
	/// ,GASTAP
	/// ,ISOLATING
	/// ,MIXING
	/// ,PRESSUREREDUCING
	/// ,PRESSURERELIEF
	/// ,REGULATING
	/// ,SAFETYCUTOFF
	/// ,STEAMTRAP
	/// ,STOPCOCK
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCValveTypeEnum : IFC_Enum, Global.IFCValveTypeEnum
	{
		public static string AIRRELEASE { get { return ".AIRRELEASE."; } private set { } }
		public static string ANTIVACUUM { get { return ".ANTIVACUUM."; } private set { } }
		public static string CHANGEOVER { get { return ".CHANGEOVER."; } private set { } }
		public static string CHECK { get { return ".CHECK."; } private set { } }
		public static string COMMISSIONING { get { return ".COMMISSIONING."; } private set { } }
		public static string DIVERTING { get { return ".DIVERTING."; } private set { } }
		public static string DRAWOFFCOCK { get { return ".DRAWOFFCOCK."; } private set { } }
		public static string DOUBLECHECK { get { return ".DOUBLECHECK."; } private set { } }
		public static string DOUBLEREGULATING { get { return ".DOUBLEREGULATING."; } private set { } }
		public static string FAUCET { get { return ".FAUCET."; } private set { } }
		public static string FLUSHING { get { return ".FLUSHING."; } private set { } }
		public static string GASCOCK { get { return ".GASCOCK."; } private set { } }
		public static string GASTAP { get { return ".GASTAP."; } private set { } }
		public static string ISOLATING { get { return ".ISOLATING."; } private set { } }
		public static string MIXING { get { return ".MIXING."; } private set { } }
		public static string PRESSUREREDUCING { get { return ".PRESSUREREDUCING."; } private set { } }
		public static string PRESSURERELIEF { get { return ".PRESSURERELIEF."; } private set { } }
		public static string REGULATING { get { return ".REGULATING."; } private set { } }
		public static string SAFETYCUTOFF { get { return ".SAFETYCUTOFF."; } private set { } }
		public static string STEAMTRAP { get { return ".STEAMTRAP."; } private set { } }
		public static string STOPCOCK { get { return ".STOPCOCK."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCValveTypeEnum() { Value = ".AIRRELEASE.";}
		public IFCValveTypeEnum(string value) { Value = value; }
		public static implicit operator IFCValveTypeEnum(string value) { return new IFCValveTypeEnum(value);}
		public static implicit operator string(IFCValveTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcVibrationIsolatorTypeEnum = ENUMERATION OF
	/// (COMPRESSION
	/// ,SPRING
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCVibrationIsolatorTypeEnum : IFC_Enum, Global.IFCVibrationIsolatorTypeEnum
	{
		public static string COMPRESSION { get { return ".COMPRESSION."; } private set { } }
		public static string SPRING { get { return ".SPRING."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCVibrationIsolatorTypeEnum() { Value = ".COMPRESSION.";}
		public IFCVibrationIsolatorTypeEnum(string value) { Value = value; }
		public static implicit operator IFCVibrationIsolatorTypeEnum(string value) { return new IFCVibrationIsolatorTypeEnum(value);}
		public static implicit operator string(IFCVibrationIsolatorTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWallTypeEnum = ENUMERATION OF
	/// (STANDARD
	/// ,POLYGONAL
	/// ,SHEAR
	/// ,ELEMENTEDWALL
	/// ,PLUMBINGWALL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCWallTypeEnum : IFC_Enum, Global.IFCWallTypeEnum
	{
		public static string STANDARD { get { return ".STANDARD."; } private set { } }
		public static string POLYGONAL { get { return ".POLYGONAL."; } private set { } }
		public static string SHEAR { get { return ".SHEAR."; } private set { } }
		public static string ELEMENTEDWALL { get { return ".ELEMENTEDWALL."; } private set { } }
		public static string PLUMBINGWALL { get { return ".PLUMBINGWALL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCWallTypeEnum() { Value = ".STANDARD.";}
		public IFCWallTypeEnum(string value) { Value = value; }
		public static implicit operator IFCWallTypeEnum(string value) { return new IFCWallTypeEnum(value);}
		public static implicit operator string(IFCWallTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWasteTerminalTypeEnum = ENUMERATION OF
	/// (FLOORTRAP
	/// ,FLOORWASTE
	/// ,GULLYSUMP
	/// ,GULLYTRAP
	/// ,GREASEINTERCEPTOR
	/// ,OILINTERCEPTOR
	/// ,PETROLINTERCEPTOR
	/// ,ROOFDRAIN
	/// ,WASTEDISPOSALUNIT
	/// ,WASTETRAP
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCWasteTerminalTypeEnum : IFC_Enum, Global.IFCWasteTerminalTypeEnum
	{
		public static string FLOORTRAP { get { return ".FLOORTRAP."; } private set { } }
		public static string FLOORWASTE { get { return ".FLOORWASTE."; } private set { } }
		public static string GULLYSUMP { get { return ".GULLYSUMP."; } private set { } }
		public static string GULLYTRAP { get { return ".GULLYTRAP."; } private set { } }
		public static string GREASEINTERCEPTOR { get { return ".GREASEINTERCEPTOR."; } private set { } }
		public static string OILINTERCEPTOR { get { return ".OILINTERCEPTOR."; } private set { } }
		public static string PETROLINTERCEPTOR { get { return ".PETROLINTERCEPTOR."; } private set { } }
		public static string ROOFDRAIN { get { return ".ROOFDRAIN."; } private set { } }
		public static string WASTEDISPOSALUNIT { get { return ".WASTEDISPOSALUNIT."; } private set { } }
		public static string WASTETRAP { get { return ".WASTETRAP."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCWasteTerminalTypeEnum() { Value = ".FLOORTRAP.";}
		public IFCWasteTerminalTypeEnum(string value) { Value = value; }
		public static implicit operator IFCWasteTerminalTypeEnum(string value) { return new IFCWasteTerminalTypeEnum(value);}
		public static implicit operator string(IFCWasteTerminalTypeEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowPanelOperationEnum = ENUMERATION OF
	/// (SIDEHUNGRIGHTHAND
	/// ,SIDEHUNGLEFTHAND
	/// ,TILTANDTURNRIGHTHAND
	/// ,TILTANDTURNLEFTHAND
	/// ,TOPHUNG
	/// ,BOTTOMHUNG
	/// ,PIVOTHORIZONTAL
	/// ,PIVOTVERTICAL
	/// ,SLIDINGHORIZONTAL
	/// ,SLIDINGVERTICAL
	/// ,REMOVABLECASEMENT
	/// ,FIXEDCASEMENT
	/// ,OTHEROPERATION
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCWindowPanelOperationEnum : IFC_Enum, Global.IFCWindowPanelOperationEnum
	{
		public static string SIDEHUNGRIGHTHAND { get { return ".SIDEHUNGRIGHTHAND."; } private set { } }
		public static string SIDEHUNGLEFTHAND { get { return ".SIDEHUNGLEFTHAND."; } private set { } }
		public static string TILTANDTURNRIGHTHAND { get { return ".TILTANDTURNRIGHTHAND."; } private set { } }
		public static string TILTANDTURNLEFTHAND { get { return ".TILTANDTURNLEFTHAND."; } private set { } }
		public static string TOPHUNG { get { return ".TOPHUNG."; } private set { } }
		public static string BOTTOMHUNG { get { return ".BOTTOMHUNG."; } private set { } }
		public static string PIVOTHORIZONTAL { get { return ".PIVOTHORIZONTAL."; } private set { } }
		public static string PIVOTVERTICAL { get { return ".PIVOTVERTICAL."; } private set { } }
		public static string SLIDINGHORIZONTAL { get { return ".SLIDINGHORIZONTAL."; } private set { } }
		public static string SLIDINGVERTICAL { get { return ".SLIDINGVERTICAL."; } private set { } }
		public static string REMOVABLECASEMENT { get { return ".REMOVABLECASEMENT."; } private set { } }
		public static string FIXEDCASEMENT { get { return ".FIXEDCASEMENT."; } private set { } }
		public static string OTHEROPERATION { get { return ".OTHEROPERATION."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCWindowPanelOperationEnum() { Value = ".SIDEHUNGRIGHTHAND.";}
		public IFCWindowPanelOperationEnum(string value) { Value = value; }
		public static implicit operator IFCWindowPanelOperationEnum(string value) { return new IFCWindowPanelOperationEnum(value);}
		public static implicit operator string(IFCWindowPanelOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowPanelPositionEnum = ENUMERATION OF
	/// (LEFT
	/// ,MIDDLE
	/// ,RIGHT
	/// ,BOTTOM
	/// ,TOP
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCWindowPanelPositionEnum : IFC_Enum, Global.IFCWindowPanelPositionEnum
	{
		public static string LEFT { get { return ".LEFT."; } private set { } }
		public static string MIDDLE { get { return ".MIDDLE."; } private set { } }
		public static string RIGHT { get { return ".RIGHT."; } private set { } }
		public static string BOTTOM { get { return ".BOTTOM."; } private set { } }
		public static string TOP { get { return ".TOP."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCWindowPanelPositionEnum() { Value = ".LEFT.";}
		public IFCWindowPanelPositionEnum(string value) { Value = value; }
		public static implicit operator IFCWindowPanelPositionEnum(string value) { return new IFCWindowPanelPositionEnum(value);}
		public static implicit operator string(IFCWindowPanelPositionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowStyleConstructionEnum = ENUMERATION OF
	/// (ALUMINIUM
	/// ,HIGH_GRADE_STEEL
	/// ,STEEL
	/// ,WOOD
	/// ,ALUMINIUM_WOOD
	/// ,PLASTIC
	/// ,OTHER_CONSTRUCTION
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCWindowStyleConstructionEnum : IFC_Enum, Global.IFCWindowStyleConstructionEnum
	{
		public static string ALUMINIUM { get { return ".ALUMINIUM."; } private set { } }
		public static string HIGH_GRADE_STEEL { get { return ".HIGH_GRADE_STEEL."; } private set { } }
		public static string STEEL { get { return ".STEEL."; } private set { } }
		public static string WOOD { get { return ".WOOD."; } private set { } }
		public static string ALUMINIUM_WOOD { get { return ".ALUMINIUM_WOOD."; } private set { } }
		public static string PLASTIC { get { return ".PLASTIC."; } private set { } }
		public static string OTHER_CONSTRUCTION { get { return ".OTHER_CONSTRUCTION."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCWindowStyleConstructionEnum() { Value = ".ALUMINIUM.";}
		public IFCWindowStyleConstructionEnum(string value) { Value = value; }
		public static implicit operator IFCWindowStyleConstructionEnum(string value) { return new IFCWindowStyleConstructionEnum(value);}
		public static implicit operator string(IFCWindowStyleConstructionEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWindowStyleOperationEnum = ENUMERATION OF
	/// (SINGLE_PANEL
	/// ,DOUBLE_PANEL_VERTICAL
	/// ,DOUBLE_PANEL_HORIZONTAL
	/// ,TRIPLE_PANEL_VERTICAL
	/// ,TRIPLE_PANEL_BOTTOM
	/// ,TRIPLE_PANEL_TOP
	/// ,TRIPLE_PANEL_LEFT
	/// ,TRIPLE_PANEL_RIGHT
	/// ,TRIPLE_PANEL_HORIZONTAL
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCWindowStyleOperationEnum : IFC_Enum, Global.IFCWindowStyleOperationEnum
	{
		public static string SINGLE_PANEL { get { return ".SINGLE_PANEL."; } private set { } }
		public static string DOUBLE_PANEL_VERTICAL { get { return ".DOUBLE_PANEL_VERTICAL."; } private set { } }
		public static string DOUBLE_PANEL_HORIZONTAL { get { return ".DOUBLE_PANEL_HORIZONTAL."; } private set { } }
		public static string TRIPLE_PANEL_VERTICAL { get { return ".TRIPLE_PANEL_VERTICAL."; } private set { } }
		public static string TRIPLE_PANEL_BOTTOM { get { return ".TRIPLE_PANEL_BOTTOM."; } private set { } }
		public static string TRIPLE_PANEL_TOP { get { return ".TRIPLE_PANEL_TOP."; } private set { } }
		public static string TRIPLE_PANEL_LEFT { get { return ".TRIPLE_PANEL_LEFT."; } private set { } }
		public static string TRIPLE_PANEL_RIGHT { get { return ".TRIPLE_PANEL_RIGHT."; } private set { } }
		public static string TRIPLE_PANEL_HORIZONTAL { get { return ".TRIPLE_PANEL_HORIZONTAL."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCWindowStyleOperationEnum() { Value = ".SINGLE_PANEL.";}
		public IFCWindowStyleOperationEnum(string value) { Value = value; }
		public static implicit operator IFCWindowStyleOperationEnum(string value) { return new IFCWindowStyleOperationEnum(value);}
		public static implicit operator string(IFCWindowStyleOperationEnum value) { return value.Value;}
	}
	/// <summary>
	/// TYPE IfcWorkControlTypeEnum = ENUMERATION OF
	/// (ACTUAL
	/// ,BASELINE
	/// ,PLANNED
	/// ,USERDEFINED
	/// ,NOTDEFINED);
	/// END_TYPE;
	/// <summary>
	public class IFCWorkControlTypeEnum : IFC_Enum, Global.IFCWorkControlTypeEnum
	{
		public static string ACTUAL { get { return ".ACTUAL."; } private set { } }
		public static string BASELINE { get { return ".BASELINE."; } private set { } }
		public static string PLANNED { get { return ".PLANNED."; } private set { } }
		public static string USERDEFINED { get { return ".USERDEFINED."; } private set { } }
		public static string NOTDEFINED { get { return ".NOTDEFINED."; } private set { } }
		public string Value {get; set;}
		public IFCWorkControlTypeEnum() { Value = ".ACTUAL.";}
		public IFCWorkControlTypeEnum(string value) { Value = value; }
		public static implicit operator IFCWorkControlTypeEnum(string value) { return new IFCWorkControlTypeEnum(value);}
		public static implicit operator string(IFCWorkControlTypeEnum value) { return value.Value;}
	}
	#endregion

	#region ---- INTERFACES ----
	/// <summary>
	/// TYPE IfcActorSelect = SELECT
	/// (IfcOrganization
	/// ,IfcPerson
	/// ,IfcPersonAndOrganization);
	/// END_TYPE;
	/// <summary>
	public interface IFCActorSelect: IFC_Attribute, Global.IFCActorSelect
	{
		public IFC_Attributes<IFCActorRole>? Roles {get; set;}
	}
	/// <summary>
	/// TYPE IfcAppliedValueSelect = SELECT
	/// (IfcRatioMeasure
	/// ,IfcMeasureWithUnit
	/// ,IfcMonetaryMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IFCAppliedValueSelect: IFC_Attribute, Global.IFCAppliedValueSelect
	{
	}
	/// <summary>
	/// TYPE IfcAxis2Placement = SELECT
	/// (IfcAxis2Placement2D
	/// ,IfcAxis2Placement3D);
	/// END_TYPE;
	/// <summary>
	public interface IFCAxis2Placement: IFC_Attribute, Global.IFCAxis2Placement
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get; }
		public IFCCartesianPoint? Location {get; set;}
		public IFCDimensionCount? Dim {get; }
		public IFCDirection? RefDirection {get; set;}
		public IFC_Attributes<IFCDirection>? P {get; }
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual Global.IFCCartesianPoint? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IFCCartesianPoint val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
	}
	/// <summary>
	/// TYPE IfcBooleanOperand = SELECT
	/// (IfcSolidModel
	/// ,IfcHalfSpaceSolid
	/// ,IfcBooleanResult
	/// ,IfcCsgPrimitive3D);
	/// END_TYPE;
	/// <summary>
	public interface IFCBooleanOperand: IFC_Attribute, Global.IFCBooleanOperand
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get; }
		public IFCDimensionCount? Dim {get; }
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcCharacterStyleSelect = SELECT
	/// (IfcTextStyleForDefinedFont);
	/// END_TYPE;
	/// <summary>
	public interface IFCCharacterStyleSelect: IFC_Attribute, Global.IFCCharacterStyleSelect
	{
		public IFCColour? Colour {get; set;}
		public IFCColour? BackgroundColour {get; set;}
	}
	/// <summary>
	/// TYPE IfcClassificationNotationSelect = SELECT
	/// (IfcClassificationNotation
	/// ,IfcClassificationReference);
	/// END_TYPE;
	/// <summary>
	public interface IFCClassificationNotationSelect: IFC_Attribute, Global.IFCClassificationNotationSelect
	{
	}
	/// <summary>
	/// TYPE IfcColour = SELECT
	/// (IfcColourSpecification
	/// ,IfcPreDefinedColour);
	/// END_TYPE;
	/// <summary>
	public interface IFCColour: IFC_Attribute, IFCFillStyleSelect, IFCSymbolStyleSelect, Global.IFCColour
	{
	}
	/// <summary>
	/// TYPE IfcColourOrFactor = SELECT
	/// (IfcColourRgb
	/// ,IfcNormalisedRatioMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IFCColourOrFactor: IFC_Attribute, Global.IFCColourOrFactor
	{
	}
	/// <summary>
	/// TYPE IfcConditionCriterionSelect = SELECT
	/// (IfcLabel
	/// ,IfcMeasureWithUnit);
	/// END_TYPE;
	/// <summary>
	public interface IFCConditionCriterionSelect: IFC_Attribute, Global.IFCConditionCriterionSelect
	{
	}
	/// <summary>
	/// TYPE IfcCsgSelect = SELECT
	/// (IfcBooleanResult
	/// ,IfcCsgPrimitive3D);
	/// END_TYPE;
	/// <summary>
	public interface IFCCsgSelect: IFC_Attribute, Global.IFCCsgSelect
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get; }
		public IFCDimensionCount? Dim {get; }
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcCurveFontOrScaledCurveFontSelect = SELECT
	/// (IfcCurveStyleFontSelect
	/// ,IfcCurveStyleFontAndScaling);
	/// END_TYPE;
	/// <summary>
	public interface IFCCurveFontOrScaledCurveFontSelect: IFC_Attribute, Global.IFCCurveFontOrScaledCurveFontSelect
	{
		public IFCLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcCurveOrEdgeCurve = SELECT
	/// (IfcBoundedCurve
	/// ,IfcEdgeCurve);
	/// END_TYPE;
	/// <summary>
	public interface IFCCurveOrEdgeCurve: IFC_Attribute, Global.IFCCurveOrEdgeCurve
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get; }
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcCurveStyleFontSelect = SELECT
	/// (IfcPreDefinedCurveFont
	/// ,IfcCurveStyleFont);
	/// END_TYPE;
	/// <summary>
	public interface IFCCurveStyleFontSelect: IFC_Attribute, IFCCurveFontOrScaledCurveFontSelect, Global.IFCCurveStyleFontSelect
	{
	}
	/// <summary>
	/// TYPE IfcDateTimeSelect = SELECT
	/// (IfcCalendarDate
	/// ,IfcLocalTime
	/// ,IfcDateAndTime);
	/// END_TYPE;
	/// <summary>
	public interface IFCDateTimeSelect: IFC_Attribute, IFCMetricValueSelect, Global.IFCDateTimeSelect
	{
	}
	/// <summary>
	/// TYPE IfcDefinedSymbolSelect = SELECT
	/// (IfcPreDefinedSymbol
	/// ,IfcExternallyDefinedSymbol);
	/// END_TYPE;
	/// <summary>
	public interface IFCDefinedSymbolSelect: IFC_Attribute, Global.IFCDefinedSymbolSelect
	{
		public IFCLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcDerivedMeasureValue = SELECT
	/// (IfcVolumetricFlowRateMeasure
	/// ,IfcTimeStamp
	/// ,IfcThermalTransmittanceMeasure
	/// ,IfcThermalResistanceMeasure
	/// ,IfcThermalAdmittanceMeasure
	/// ,IfcPressureMeasure
	/// ,IfcPowerMeasure
	/// ,IfcMassFlowRateMeasure
	/// ,IfcMassDensityMeasure
	/// ,IfcLinearVelocityMeasure
	/// ,IfcKinematicViscosityMeasure
	/// ,IfcIntegerCountRateMeasure
	/// ,IfcHeatFluxDensityMeasure
	/// ,IfcFrequencyMeasure
	/// ,IfcEnergyMeasure
	/// ,IfcElectricVoltageMeasure
	/// ,IfcDynamicViscosityMeasure
	/// ,IfcCompoundPlaneAngleMeasure
	/// ,IfcAngularVelocityMeasure
	/// ,IfcThermalConductivityMeasure
	/// ,IfcMolecularWeightMeasure
	/// ,IfcVaporPermeabilityMeasure
	/// ,IfcMoistureDiffusivityMeasure
	/// ,IfcIsothermalMoistureCapacityMeasure
	/// ,IfcSpecificHeatCapacityMeasure
	/// ,IfcMonetaryMeasure
	/// ,IfcMagneticFluxDensityMeasure
	/// ,IfcMagneticFluxMeasure
	/// ,IfcLuminousFluxMeasure
	/// ,IfcForceMeasure
	/// ,IfcInductanceMeasure
	/// ,IfcIlluminanceMeasure
	/// ,IfcElectricResistanceMeasure
	/// ,IfcElectricConductanceMeasure
	/// ,IfcElectricChargeMeasure
	/// ,IfcDoseEquivalentMeasure
	/// ,IfcElectricCapacitanceMeasure
	/// ,IfcAbsorbedDoseMeasure
	/// ,IfcRadioActivityMeasure
	/// ,IfcRotationalFrequencyMeasure
	/// ,IfcTorqueMeasure
	/// ,IfcAccelerationMeasure
	/// ,IfcLinearForceMeasure
	/// ,IfcLinearStiffnessMeasure
	/// ,IfcModulusOfSubgradeReactionMeasure
	/// ,IfcModulusOfElasticityMeasure
	/// ,IfcMomentOfInertiaMeasure
	/// ,IfcPlanarForceMeasure
	/// ,IfcRotationalStiffnessMeasure
	/// ,IfcShearModulusMeasure
	/// ,IfcLinearMomentMeasure
	/// ,IfcLuminousIntensityDistributionMeasure
	/// ,IfcCurvatureMeasure
	/// ,IfcMassPerLengthMeasure
	/// ,IfcModulusOfLinearSubgradeReactionMeasure
	/// ,IfcModulusOfRotationalSubgradeReactionMeasure
	/// ,IfcRotationalMassMeasure
	/// ,IfcSectionalAreaIntegralMeasure
	/// ,IfcSectionModulusMeasure
	/// ,IfcTemperatureGradientMeasure
	/// ,IfcThermalExpansionCoefficientMeasure
	/// ,IfcWarpingConstantMeasure
	/// ,IfcWarpingMomentMeasure
	/// ,IfcSoundPowerMeasure
	/// ,IfcSoundPressureMeasure
	/// ,IfcHeatingValueMeasure
	/// ,IfcPHMeasure
	/// ,IfcIonConcentrationMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IFCDerivedMeasureValue: IFC_Attribute, IFCValue, Global.IFCDerivedMeasureValue
	{
	}
	/// <summary>
	/// TYPE IfcDocumentSelect = SELECT
	/// (IfcDocumentReference
	/// ,IfcDocumentInformation);
	/// END_TYPE;
	/// <summary>
	public interface IFCDocumentSelect: IFC_Attribute, Global.IFCDocumentSelect
	{
		public IFCLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcDraughtingCalloutElement = SELECT
	/// (IfcAnnotationCurveOccurrence
	/// ,IfcAnnotationTextOccurrence
	/// ,IfcAnnotationSymbolOccurrence);
	/// END_TYPE;
	/// <summary>
	public interface IFCDraughtingCalloutElement: IFC_Attribute, Global.IFCDraughtingCalloutElement
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get; }
		public IFCRepresentationItem? Item {get; set;}
		public IFC_Attributes<IFCPresentationStyleAssignment>? Styles {get; set;}
		public IFCLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcFillAreaStyleTileShapeSelect = SELECT
	/// (IfcFillAreaStyleTileSymbolWithStyle);
	/// END_TYPE;
	/// <summary>
	public interface IFCFillAreaStyleTileShapeSelect: IFC_Attribute, Global.IFCFillAreaStyleTileShapeSelect
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get; }
		public IFCAnnotationSymbolOccurrence? Symbol {get; set;}
	}
	/// <summary>
	/// TYPE IfcFillStyleSelect = SELECT
	/// (IfcFillAreaStyleHatching
	/// ,IfcFillAreaStyleTiles
	/// ,IfcColour
	/// ,IfcExternallyDefinedHatchStyle);
	/// END_TYPE;
	/// <summary>
	public interface IFCFillStyleSelect: IFC_Attribute, Global.IFCFillStyleSelect
	{
	}
	/// <summary>
	/// TYPE IfcGeometricSetSelect = SELECT
	/// (IfcPoint
	/// ,IfcCurve
	/// ,IfcSurface);
	/// END_TYPE;
	/// <summary>
	public interface IFCGeometricSetSelect: IFC_Attribute, Global.IFCGeometricSetSelect
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get; }
		public IFCDimensionCount? Dim {get; }
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcHatchLineDistanceSelect = SELECT
	/// (IfcOneDirectionRepeatFactor
	/// ,IfcPositiveLengthMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IFCHatchLineDistanceSelect: IFC_Attribute, Global.IFCHatchLineDistanceSelect
	{
	}
	/// <summary>
	/// TYPE IfcLayeredItem = SELECT
	/// (IfcRepresentationItem
	/// ,IfcRepresentation);
	/// END_TYPE;
	/// <summary>
	public interface IFCLayeredItem: IFC_Attribute, Global.IFCLayeredItem
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcLibrarySelect = SELECT
	/// (IfcLibraryReference
	/// ,IfcLibraryInformation);
	/// END_TYPE;
	/// <summary>
	public interface IFCLibrarySelect: IFC_Attribute, Global.IFCLibrarySelect
	{
		public IFCLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcLightDistributionDataSourceSelect = SELECT
	/// (IfcExternalReference
	/// ,IfcLightIntensityDistribution);
	/// END_TYPE;
	/// <summary>
	public interface IFCLightDistributionDataSourceSelect: IFC_Attribute, Global.IFCLightDistributionDataSourceSelect
	{
	}
	/// <summary>
	/// TYPE IfcMaterialSelect = SELECT
	/// (IfcMaterial
	/// ,IfcMaterialList
	/// ,IfcMaterialLayerSetUsage
	/// ,IfcMaterialLayerSet
	/// ,IfcMaterialLayer);
	/// END_TYPE;
	/// <summary>
	public interface IFCMaterialSelect: IFC_Attribute, Global.IFCMaterialSelect
	{
	}
	/// <summary>
	/// TYPE IfcMeasureValue = SELECT
	/// (IfcVolumeMeasure
	/// ,IfcTimeMeasure
	/// ,IfcThermodynamicTemperatureMeasure
	/// ,IfcSolidAngleMeasure
	/// ,IfcPositiveRatioMeasure
	/// ,IfcRatioMeasure
	/// ,IfcPositivePlaneAngleMeasure
	/// ,IfcPlaneAngleMeasure
	/// ,IfcParameterValue
	/// ,IfcNumericMeasure
	/// ,IfcMassMeasure
	/// ,IfcPositiveLengthMeasure
	/// ,IfcLengthMeasure
	/// ,IfcElectricCurrentMeasure
	/// ,IfcDescriptiveMeasure
	/// ,IfcCountMeasure
	/// ,IfcContextDependentMeasure
	/// ,IfcAreaMeasure
	/// ,IfcAmountOfSubstanceMeasure
	/// ,IfcLuminousIntensityMeasure
	/// ,IfcNormalisedRatioMeasure
	/// ,IfcComplexNumber);
	/// END_TYPE;
	/// <summary>
	public interface IFCMeasureValue: IFC_Attribute, IFCValue, Global.IFCMeasureValue
	{
	}
	/// <summary>
	/// TYPE IfcMetricValueSelect = SELECT
	/// (IfcDateTimeSelect
	/// ,IfcMeasureWithUnit
	/// ,IfcTable
	/// ,IfcText
	/// ,IfcTimeSeries
	/// ,IfcCostValue);
	/// END_TYPE;
	/// <summary>
	public interface IFCMetricValueSelect: IFC_Attribute, Global.IFCMetricValueSelect
	{
	}
	/// <summary>
	/// TYPE IfcObjectReferenceSelect = SELECT
	/// (IfcMaterial
	/// ,IfcPerson
	/// ,IfcDateAndTime
	/// ,IfcMaterialList
	/// ,IfcOrganization
	/// ,IfcCalendarDate
	/// ,IfcLocalTime
	/// ,IfcPersonAndOrganization
	/// ,IfcMaterialLayer
	/// ,IfcExternalReference
	/// ,IfcTimeSeries
	/// ,IfcAddress
	/// ,IfcAppliedValue);
	/// END_TYPE;
	/// <summary>
	public interface IFCObjectReferenceSelect: IFC_Attribute, Global.IFCObjectReferenceSelect
	{
	}
	/// <summary>
	/// TYPE IfcOrientationSelect = SELECT
	/// (IfcPlaneAngleMeasure
	/// ,IfcDirection);
	/// END_TYPE;
	/// <summary>
	public interface IFCOrientationSelect: IFC_Attribute, Global.IFCOrientationSelect
	{
	}
	/// <summary>
	/// TYPE IfcPointOrVertexPoint = SELECT
	/// (IfcPoint
	/// ,IfcVertexPoint);
	/// END_TYPE;
	/// <summary>
	public interface IFCPointOrVertexPoint: IFC_Attribute, Global.IFCPointOrVertexPoint
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get; }
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcPresentationStyleSelect = SELECT
	/// (IfcNullStyle
	/// ,IfcCurveStyle
	/// ,IfcSymbolStyle
	/// ,IfcFillAreaStyle
	/// ,IfcTextStyle
	/// ,IfcSurfaceStyle);
	/// END_TYPE;
	/// <summary>
	public interface IFCPresentationStyleSelect: IFC_Attribute, Global.IFCPresentationStyleSelect
	{
		public IFCLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcShell = SELECT
	/// (IfcClosedShell
	/// ,IfcOpenShell);
	/// END_TYPE;
	/// <summary>
	public interface IFCShell: IFC_Attribute, Global.IFCShell
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get; }
		public IFC_Attributes<IFCFace>? CfsFaces {get; set;}
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcSimpleValue = SELECT
	/// (IfcInteger
	/// ,IfcReal
	/// ,IfcBoolean
	/// ,IfcIdentifier
	/// ,IfcText
	/// ,IfcLabel
	/// ,IfcLogical);
	/// END_TYPE;
	/// <summary>
	public interface IFCSimpleValue: IFC_Attribute, IFCValue, Global.IFCSimpleValue
	{
	}
	/// <summary>
	/// TYPE IfcSizeSelect = SELECT
	/// (IfcRatioMeasure
	/// ,IfcLengthMeasure
	/// ,IfcDescriptiveMeasure
	/// ,IfcPositiveLengthMeasure
	/// ,IfcNormalisedRatioMeasure
	/// ,IfcPositiveRatioMeasure);
	/// END_TYPE;
	/// <summary>
	public interface IFCSizeSelect: IFC_Attribute, Global.IFCSizeSelect
	{
	}
	/// <summary>
	/// TYPE IfcSpecularHighlightSelect = SELECT
	/// (IfcSpecularExponent
	/// ,IfcSpecularRoughness);
	/// END_TYPE;
	/// <summary>
	public interface IFCSpecularHighlightSelect: IFC_Attribute, Global.IFCSpecularHighlightSelect
	{
	}
	/// <summary>
	/// TYPE IfcStructuralActivityAssignmentSelect = SELECT
	/// (IfcStructuralItem
	/// ,IfcElement);
	/// END_TYPE;
	/// <summary>
	public interface IFCStructuralActivityAssignmentSelect: IFC_Attribute, Global.IFCStructuralActivityAssignmentSelect
	{
		public IFCGloballyUniqueId? GlobalId {get; set;}
		public IFCOwnerHistory? OwnerHistory {get; set;}
		public IFCLabel? Name {get; set;}
		public IFCText? Description {get; set;}
		public IFC_Attributes<IFCRelAssigns>? HasAssignments {get; }
		public IFC_Attributes<IFCRelDecomposes>? IsDecomposedBy {get; }
		public IFC_Attributes<IFCRelDecomposes>? Decomposes {get; }
		public IFC_Attributes<IFCRelAssociates>? HasAssociations {get; }
		public IFCLabel? ObjectType {get; set;}
		public IFC_Attributes<IFCRelDefines>? IsDefinedBy {get; }
		public IFCObjectPlacement? ObjectPlacement {get; set;}
		public IFCProductRepresentation? Representation {get; set;}
		public IFC_Attributes<IFCRelAssignsToProduct>? ReferencedBy {get; }
		public virtual IFC_Attributes<Global.IFCRelDecomposes>? _IsDecomposedBy
		{
			get
			{
				if(IsDecomposedBy != null)
				{
					IFC_Attributes<Global.IFCRelDecomposes>? items = new IFC_Attributes<Global.IFCRelDecomposes>();
					foreach (IFCRelDecomposes item in IsDecomposedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelDecomposes>? _Decomposes
		{
			get
			{
				if(Decomposes != null)
				{
					IFC_Attributes<Global.IFCRelDecomposes>? items = new IFC_Attributes<Global.IFCRelDecomposes>();
					foreach (IFCRelDecomposes item in Decomposes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelDefines>? _IsDefinedBy
		{
			get
			{
				if(IsDefinedBy != null)
				{
					IFC_Attributes<Global.IFCRelDefines>? items = new IFC_Attributes<Global.IFCRelDefines>();
					foreach (IFCRelDefines item in IsDefinedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcSurfaceOrFaceSurface = SELECT
	/// (IfcSurface
	/// ,IfcFaceSurface
	/// ,IfcFaceBasedSurfaceModel);
	/// END_TYPE;
	/// <summary>
	public interface IFCSurfaceOrFaceSurface: IFC_Attribute, Global.IFCSurfaceOrFaceSurface
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get; }
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// TYPE IfcSurfaceStyleElementSelect = SELECT
	/// (IfcSurfaceStyleShading
	/// ,IfcSurfaceStyleLighting
	/// ,IfcSurfaceStyleWithTextures
	/// ,IfcExternallyDefinedSurfaceStyle
	/// ,IfcSurfaceStyleRefraction);
	/// END_TYPE;
	/// <summary>
	public interface IFCSurfaceStyleElementSelect: IFC_Attribute, Global.IFCSurfaceStyleElementSelect
	{
	}
	/// <summary>
	/// TYPE IfcSymbolStyleSelect = SELECT
	/// (IfcColour);
	/// END_TYPE;
	/// <summary>
	public interface IFCSymbolStyleSelect: IFC_Attribute, Global.IFCSymbolStyleSelect
	{
		public IFCLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcTextFontSelect = SELECT
	/// (IfcPreDefinedTextFont
	/// ,IfcExternallyDefinedTextFont);
	/// END_TYPE;
	/// <summary>
	public interface IFCTextFontSelect: IFC_Attribute, Global.IFCTextFontSelect
	{
		public IFCLabel? Name {get; set;}
	}
	/// <summary>
	/// TYPE IfcTextStyleSelect = SELECT
	/// (IfcTextStyleWithBoxCharacteristics
	/// ,IfcTextStyleTextModel);
	/// END_TYPE;
	/// <summary>
	public interface IFCTextStyleSelect: IFC_Attribute, Global.IFCTextStyleSelect
	{
	}
	/// <summary>
	/// TYPE IfcTrimmingSelect = SELECT
	/// (IfcCartesianPoint
	/// ,IfcParameterValue);
	/// END_TYPE;
	/// <summary>
	public interface IFCTrimmingSelect: IFC_Attribute, Global.IFCTrimmingSelect
	{
	}
	/// <summary>
	/// TYPE IfcUnit = SELECT
	/// (IfcDerivedUnit
	/// ,IfcNamedUnit
	/// ,IfcMonetaryUnit);
	/// END_TYPE;
	/// <summary>
	public interface IFCUnit: IFC_Attribute, Global.IFCUnit
	{
	}
	/// <summary>
	/// TYPE IfcValue = SELECT
	/// (IfcMeasureValue
	/// ,IfcSimpleValue
	/// ,IfcDerivedMeasureValue);
	/// END_TYPE;
	/// <summary>
	public interface IFCValue: IFC_Attribute, Global.IFCValue
	{
	}
	/// <summary>
	/// TYPE IfcVectorOrDirection = SELECT
	/// (IfcDirection
	/// ,IfcVector);
	/// END_TYPE;
	/// <summary>
	public interface IFCVectorOrDirection: IFC_Attribute, Global.IFCVectorOrDirection
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get; }
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get; }
		public IFCDimensionCount? Dim {get; }
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	#endregion

	#region ---- ENTITY ----
	/// <summary>
	/// ENTITY Ifc2DCompositeCurve
	/// SUBTYPE OF (IfcCompositeCurve);
	/// WHERE
	/// WR1 : SELF\IfcCompositeCurve.ClosedCurve;
	/// WR2 : SELF\IfcCurve.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class IFC2DCompositeCurve : IFCCompositeCurve, Global.IFC2DCompositeCurve
	{
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFC2DCompositeCurve() : base()
		{
		}
		public IFC2DCompositeCurve(IFC_Attributes<IFCCompositeCurveSegment>? Segments, LOGICAL? SelfIntersect) : base (Segments, SelfIntersect)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Segments", Segments},
				{"SelfIntersect", SelfIntersect}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim},
				{"NSegments", NSegments},
				{"ClosedCurve", ClosedCurve}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41},
				{"is_WR42", is_WR42},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcActionRequest
	/// SUBTYPE OF (IfcControl);
	/// RequestID : IfcIdentifier;
	/// UNIQUE
	/// UR2 : RequestID;
	/// END_ENTITY;
	/// <summary>
	public class IFCActionRequest : IFCControl, Global.IFCActionRequest
	{
		public virtual IFCIdentifier? RequestID { get; set; }
		public IFCActionRequest() : base()
		{
		}
		public IFCActionRequest(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? RequestID) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.RequestID = RequestID;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"RequestID", RequestID}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCIdentifier? _RequestID
		{
			get
			{
				return RequestID;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					RequestID = val;
				}
				else if(value == null)
				{
					RequestID = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcActor
	/// SUPERTYPE OF (ONEOF
	/// (IfcOccupant))
	/// SUBTYPE OF (IfcObject);
	/// TheActor : IfcActorSelect;
	/// INVERSE
	/// IsActingUpon : SET [0:?] OF IfcRelAssignsToActor FOR RelatingActor;
	/// END_ENTITY;
	/// <summary>
	public class IFCActor : IFCObject, Global.IFCActor
	{
		public virtual IFCActorSelect? TheActor { get; set; }
		public IFC_Attributes<IFCRelAssignsToActor>? IsActingUpon {get{return new IFC_Attributes<IFCRelAssignsToActor>(Model?.GetItems<IFCRelAssignsToActor>().Where(x => x.RelatingActor != null && x.RelatingActor == this).ToList());}}
		public IFCActor() : base()
		{
		}
		public IFCActor(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCActorSelect? TheActor) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.TheActor = TheActor;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"TheActor", TheActor}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsActingUpon", IsActingUpon}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCActorSelect? _TheActor
		{
			get
			{
				return TheActor;
			}
			set
			{
				if(value is IFCActorSelect val)
				{
					TheActor = val;
				}
				else if(value == null)
				{
					TheActor = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelAssignsToActor>? _IsActingUpon
		{
			get
			{
				if(IsActingUpon != null)
				{
					IFC_Attributes<Global.IFCRelAssignsToActor>? items = new IFC_Attributes<Global.IFCRelAssignsToActor>();
					foreach (IFCRelAssignsToActor item in IsActingUpon)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcActorRole;
	/// Role : IfcRoleEnum;
	/// UserDefinedRole : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// WHERE
	/// WR1 : (Role <> IfcRoleEnum.USERDEFINED) OR
	/// ((Role = IfcRoleEnum.USERDEFINED) AND
	/// EXISTS(SELF.UserDefinedRole));
	/// END_ENTITY;
	/// <summary>
	public class IFCActorRole : IFC_ClassEntity, Global.IFCActorRole
	{
		public virtual IFCRoleEnum? Role { get; set; }
		public virtual IFCLabel? UserDefinedRole { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCActorRole() : base()
		{
		}
		public IFCActorRole(IFCRoleEnum? Role, IFCLabel? UserDefinedRole, IFCText? Description) : base ()
		{
			this.Role = Role;
			this.UserDefinedRole = UserDefinedRole;
			this.Description = Description;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Role", Role},
				{"UserDefinedRole", UserDefinedRole},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCRoleEnum? _Role
		{
			get
			{
				return Role;
			}
			set
			{
				if(value is IFCRoleEnum val)
				{
					Role = val;
				}
				else if(value == null)
				{
					Role = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedRole
		{
			get
			{
				return UserDefinedRole;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedRole = val;
				}
				else if(value == null)
				{
					UserDefinedRole = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcActuatorType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcActuatorTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCActuatorType : IFCDistributionControlElementType, Global.IFCActuatorType
	{
		public virtual IFCActuatorTypeEnum? PredefinedType { get; set; }
		public IFCActuatorType() : base()
		{
		}
		public IFCActuatorType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCActuatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCActuatorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCActuatorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAddress
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPostalAddress
	/// ,IfcTelecomAddress));
	/// Purpose : OPTIONAL IfcAddressTypeEnum;
	/// Description : OPTIONAL IfcText;
	/// UserDefinedPurpose : OPTIONAL IfcLabel;
	/// INVERSE
	/// OfPerson : SET [0:?] OF IfcPerson FOR Addresses;
	/// OfOrganization : SET [0:?] OF IfcOrganization FOR Addresses;
	/// WHERE
	/// WR1 : (NOT(EXISTS(Purpose))) OR
	/// ((Purpose <> IfcAddressTypeEnum.USERDEFINED) OR
	/// ((Purpose = IfcAddressTypeEnum.USERDEFINED) AND
	/// EXISTS(SELF.UserDefinedPurpose)));
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCAddress : IFC_ClassEntity, IFCObjectReferenceSelect, Global.IFCAddress
	{
		public virtual IFCAddressTypeEnum? Purpose { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFCLabel? UserDefinedPurpose { get; set; }
		public IFC_Attributes<IFCPerson>? OfPerson {get{return new IFC_Attributes<IFCPerson>(Model?.GetItems<IFCPerson>().Where(x => x.Addresses != null && x.Addresses.Contains(this)).ToList());}}
		public IFC_Attributes<IFCOrganization>? OfOrganization {get{return new IFC_Attributes<IFCOrganization>(Model?.GetItems<IFCOrganization>().Where(x => x.Addresses != null && x.Addresses.Contains(this)).ToList());}}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCAddress() : base()
		{
		}
		public IFCAddress(IFCAddressTypeEnum? Purpose, IFCText? Description, IFCLabel? UserDefinedPurpose) : base ()
		{
			this.Purpose = Purpose;
			this.Description = Description;
			this.UserDefinedPurpose = UserDefinedPurpose;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Purpose", Purpose},
				{"Description", Description},
				{"UserDefinedPurpose", UserDefinedPurpose}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"OfPerson", OfPerson},
				{"OfOrganization", OfOrganization}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCAddressTypeEnum? _Purpose
		{
			get
			{
				return Purpose;
			}
			set
			{
				if(value is IFCAddressTypeEnum val)
				{
					Purpose = val;
				}
				else if(value == null)
				{
					Purpose = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedPurpose
		{
			get
			{
				return UserDefinedPurpose;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedPurpose = val;
				}
				else if(value == null)
				{
					UserDefinedPurpose = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPerson>? _OfPerson
		{
			get
			{
				if(OfPerson != null)
				{
					IFC_Attributes<Global.IFCPerson>? items = new IFC_Attributes<Global.IFCPerson>();
					foreach (IFCPerson item in OfPerson)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCOrganization>? _OfOrganization
		{
			get
			{
				if(OfOrganization != null)
				{
					IFC_Attributes<Global.IFCOrganization>? items = new IFC_Attributes<Global.IFCOrganization>();
					foreach (IFCOrganization item in OfOrganization)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAirTerminalBoxType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcAirTerminalBoxTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcAirTerminalBoxTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirTerminalBoxTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCAirTerminalBoxType : IFCFlowControllerType, Global.IFCAirTerminalBoxType
	{
		public virtual IFCAirTerminalBoxTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCAirTerminalBoxType() : base()
		{
		}
		public IFCAirTerminalBoxType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCAirTerminalBoxTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCAirTerminalBoxTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCAirTerminalBoxTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAirTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcAirTerminalTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcAirTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirTerminalTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCAirTerminalType : IFCFlowTerminalType, Global.IFCAirTerminalType
	{
		public virtual IFCAirTerminalTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCAirTerminalType() : base()
		{
		}
		public IFCAirTerminalType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCAirTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCAirTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCAirTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAirToAirHeatRecoveryType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcAirToAirHeatRecoveryTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcAirToAirHeatRecoveryTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcAirToAirHeatRecoveryTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCAirToAirHeatRecoveryType : IFCEnergyConversionDeviceType, Global.IFCAirToAirHeatRecoveryType
	{
		public virtual IFCAirToAirHeatRecoveryTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCAirToAirHeatRecoveryType() : base()
		{
		}
		public IFCAirToAirHeatRecoveryType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCAirToAirHeatRecoveryTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCAirToAirHeatRecoveryTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCAirToAirHeatRecoveryTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAlarmType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcAlarmTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCAlarmType : IFCDistributionControlElementType, Global.IFCAlarmType
	{
		public virtual IFCAlarmTypeEnum? PredefinedType { get; set; }
		public IFCAlarmType() : base()
		{
		}
		public IFCAlarmType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCAlarmTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCAlarmTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCAlarmTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAngularDimension
	/// SUBTYPE OF (IfcDimensionCurveDirectedCallout);
	/// END_ENTITY;
	/// <summary>
	public class IFCAngularDimension : IFCDimensionCurveDirectedCallout, Global.IFCAngularDimension
	{
		public IFCAngularDimension() : base()
		{
		}
		public IFCAngularDimension(IFC_Attributes<IFCDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Contents", Contents}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem},
				{"IsRelatedFromCallout", IsRelatedFromCallout},
				{"IsRelatedToCallout", IsRelatedToCallout}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41},
				{"is_WR42", is_WR42}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotation
	/// SUBTYPE OF (IfcProduct);
	/// INVERSE
	/// ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
	/// END_ENTITY;
	/// <summary>
	public class IFCAnnotation : IFCProduct, Global.IFCAnnotation
	{
		public IFC_Attributes<IFCRelContainedInSpatialStructure>? ContainedInStructure {get{return new IFC_Attributes<IFCRelContainedInSpatialStructure>(Model?.GetItems<IFCRelContainedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList());}}
		public IFCAnnotation() : base()
		{
		}
		public IFCAnnotation(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCRelContainedInSpatialStructure>? _ContainedInStructure
		{
			get
			{
				if(ContainedInStructure != null)
				{
					IFC_Attributes<Global.IFCRelContainedInSpatialStructure>? items = new IFC_Attributes<Global.IFCRelContainedInSpatialStructure>();
					foreach (IFCRelContainedInSpatialStructure item in ContainedInStructure)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationCurveOccurrence
	/// SUPERTYPE OF (ONEOF
	/// (IfcDimensionCurve
	/// ,IfcProjectionCurve))
	/// SUBTYPE OF (IfcAnnotationOccurrence);
	/// WHERE
	/// WR31 : NOT(EXISTS(SELF\IfcStyledItem.Item)) OR
	/// ('IFC2X3.IFCCURVE' IN TYPEOF (SELF\IfcStyledItem.Item));
	/// END_ENTITY;
	/// <summary>
	public class IFCAnnotationCurveOccurrence : IFCAnnotationOccurrence, IFCDraughtingCalloutElement, Global.IFCAnnotationCurveOccurrence
	{
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCAnnotationCurveOccurrence() : base()
		{
		}
		public IFCAnnotationCurveOccurrence(IFCRepresentationItem? Item, IFC_Attributes<IFCPresentationStyleAssignment>? Styles, IFCLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"Styles", Styles},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationFillArea
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// OuterBoundary : IfcCurve;
	/// InnerBoundaries : OPTIONAL SET [1:?] OF IfcCurve;
	/// END_ENTITY;
	/// <summary>
	public class IFCAnnotationFillArea : IFCGeometricRepresentationItem, Global.IFCAnnotationFillArea
	{
		public virtual IFCCurve? OuterBoundary { get; set; }
		public virtual IFC_Attributes<IFCCurve>? InnerBoundaries { get; set; }
		public IFCAnnotationFillArea() : base()
		{
		}
		public IFCAnnotationFillArea(IFCCurve? OuterBoundary, IFC_Attributes<IFCCurve>? InnerBoundaries) : base ()
		{
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"OuterBoundary", OuterBoundary},
				{"InnerBoundaries", InnerBoundaries}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCurve? _OuterBoundary
		{
			get
			{
				return OuterBoundary;
			}
			set
			{
				if(value is IFCCurve val)
				{
					OuterBoundary = val;
				}
				else if(value == null)
				{
					OuterBoundary = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCCurve>? _InnerBoundaries
		{
			get
			{
				if(InnerBoundaries != null)
				{
					IFC_Attributes<Global.IFCCurve>? items = new IFC_Attributes<Global.IFCCurve>();
					foreach (IFCCurve item in InnerBoundaries)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					InnerBoundaries = null;
				}
				else
				{
					InnerBoundaries = new IFC_Attributes<IFCCurve>();
					foreach(var val in value)
					{
						if(val is IFCCurve v)
						{
							InnerBoundaries.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationFillAreaOccurrence
	/// SUBTYPE OF (IfcAnnotationOccurrence);
	/// FillStyleTarget : OPTIONAL IfcPoint;
	/// GlobalOrLocal : OPTIONAL IfcGlobalOrLocalEnum;
	/// WHERE
	/// WR31 : NOT(EXISTS(SELF\IfcStyledItem.Item)) OR
	/// ('IFC2X3.IFCANNOTATIONFILLAREA' IN TYPEOF (SELF\IfcStyledItem.Item));
	/// END_ENTITY;
	/// <summary>
	public class IFCAnnotationFillAreaOccurrence : IFCAnnotationOccurrence, Global.IFCAnnotationFillAreaOccurrence
	{
		public virtual IFCPoint? FillStyleTarget { get; set; }
		public virtual IFCGlobalOrLocalEnum? GlobalOrLocal { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCAnnotationFillAreaOccurrence() : base()
		{
		}
		public IFCAnnotationFillAreaOccurrence(IFCRepresentationItem? Item, IFC_Attributes<IFCPresentationStyleAssignment>? Styles, IFCLabel? Name, IFCPoint? FillStyleTarget, IFCGlobalOrLocalEnum? GlobalOrLocal) : base (Item, Styles, Name)
		{
			this.FillStyleTarget = FillStyleTarget;
			this.GlobalOrLocal = GlobalOrLocal;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"Styles", Styles},
				{"Name", Name},
				{"FillStyleTarget", FillStyleTarget},
				{"GlobalOrLocal", GlobalOrLocal}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR31", is_WR31}
			};
		}
		public virtual Global.IFCPoint? _FillStyleTarget
		{
			get
			{
				return FillStyleTarget;
			}
			set
			{
				if(value is IFCPoint val)
				{
					FillStyleTarget = val;
				}
				else if(value == null)
				{
					FillStyleTarget = null;
				}
			}
		}
		public virtual Global.IFCGlobalOrLocalEnum? _GlobalOrLocal
		{
			get
			{
				return GlobalOrLocal;
			}
			set
			{
				if(value is IFCGlobalOrLocalEnum val)
				{
					GlobalOrLocal = val;
				}
				else if(value == null)
				{
					GlobalOrLocal = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationOccurrence
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAnnotationCurveOccurrence
	/// ,IfcAnnotationFillAreaOccurrence
	/// ,IfcAnnotationSurfaceOccurrence
	/// ,IfcAnnotationSymbolOccurrence
	/// ,IfcAnnotationTextOccurrence))
	/// SUBTYPE OF (IfcStyledItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCAnnotationOccurrence : IFCStyledItem, Global.IFCAnnotationOccurrence
	{
		public IFCAnnotationOccurrence() : base()
		{
		}
		public IFCAnnotationOccurrence(IFCRepresentationItem? Item, IFC_Attributes<IFCPresentationStyleAssignment>? Styles, IFCLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"Styles", Styles},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationSurface
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Item : IfcGeometricRepresentationItem;
	/// TextureCoordinates : OPTIONAL IfcTextureCoordinate;
	/// WHERE
	/// WR01 : SIZEOF([
	/// 'IFC2X3.IFCSURFACE',
	/// 'IFC2X3.IFCSHELLBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCFACEBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCSOLIDMODEL',
	/// 'IFC2X3.IFCBOOLEANRESULT',
	/// 'IFC2X3.IFCCSGPRIMITIVE3D']
	/// * TYPEOF(Item)
	/// ) >= 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCAnnotationSurface : IFCGeometricRepresentationItem, Global.IFCAnnotationSurface
	{
		public virtual IFCGeometricRepresentationItem? Item { get; set; }
		public virtual IFCTextureCoordinate? TextureCoordinates { get; set; }
		public virtual bool is_WR01
		{
			get
			{
				return true;
			}
		}
		public IFCAnnotationSurface() : base()
		{
		}
		public IFCAnnotationSurface(IFCGeometricRepresentationItem? Item, IFCTextureCoordinate? TextureCoordinates) : base ()
		{
			this.Item = Item;
			this.TextureCoordinates = TextureCoordinates;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"TextureCoordinates", TextureCoordinates}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR01", is_WR01}
			};
		}
		public virtual Global.IFCGeometricRepresentationItem? _Item
		{
			get
			{
				return Item;
			}
			set
			{
				if(value is IFCGeometricRepresentationItem val)
				{
					Item = val;
				}
				else if(value == null)
				{
					Item = null;
				}
			}
		}
		public virtual Global.IFCTextureCoordinate? _TextureCoordinates
		{
			get
			{
				return TextureCoordinates;
			}
			set
			{
				if(value is IFCTextureCoordinate val)
				{
					TextureCoordinates = val;
				}
				else if(value == null)
				{
					TextureCoordinates = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationSurfaceOccurrence
	/// SUBTYPE OF (IfcAnnotationOccurrence);
	/// WHERE
	/// WR31 : NOT(EXISTS(SELF\IfcStyledItem.Item)) OR
	/// (SIZEOF(
	/// ['IFC2X3.IFCSURFACE',
	/// 'IFC2X3.IFCFACEBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCSHELLBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCSOLIDMODEL'] *
	/// TYPEOF(SELF\IfcStyledItem.Item)) > 0);
	/// END_ENTITY;
	/// <summary>
	public class IFCAnnotationSurfaceOccurrence : IFCAnnotationOccurrence, Global.IFCAnnotationSurfaceOccurrence
	{
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCAnnotationSurfaceOccurrence() : base()
		{
		}
		public IFCAnnotationSurfaceOccurrence(IFCRepresentationItem? Item, IFC_Attributes<IFCPresentationStyleAssignment>? Styles, IFCLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"Styles", Styles},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationSymbolOccurrence
	/// SUPERTYPE OF (ONEOF
	/// (IfcTerminatorSymbol))
	/// SUBTYPE OF (IfcAnnotationOccurrence);
	/// WHERE
	/// WR31 : NOT(EXISTS(SELF\IfcStyledItem.Item)) OR
	/// ('IFC2X3.IFCDEFINEDSYMBOL' IN TYPEOF (SELF\IfcStyledItem.Item));
	/// END_ENTITY;
	/// <summary>
	public class IFCAnnotationSymbolOccurrence : IFCAnnotationOccurrence, IFCDraughtingCalloutElement, Global.IFCAnnotationSymbolOccurrence
	{
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCAnnotationSymbolOccurrence() : base()
		{
		}
		public IFCAnnotationSymbolOccurrence(IFCRepresentationItem? Item, IFC_Attributes<IFCPresentationStyleAssignment>? Styles, IFCLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"Styles", Styles},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcAnnotationTextOccurrence
	/// SUBTYPE OF (IfcAnnotationOccurrence);
	/// WHERE
	/// WR31 : NOT(EXISTS(SELF\IfcStyledItem.Item)) OR
	/// ('IFC2X3.IFCTEXTLITERAL' IN TYPEOF (SELF\IfcStyledItem.Item));
	/// END_ENTITY;
	/// <summary>
	public class IFCAnnotationTextOccurrence : IFCAnnotationOccurrence, IFCDraughtingCalloutElement, Global.IFCAnnotationTextOccurrence
	{
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCAnnotationTextOccurrence() : base()
		{
		}
		public IFCAnnotationTextOccurrence(IFCRepresentationItem? Item, IFC_Attributes<IFCPresentationStyleAssignment>? Styles, IFCLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"Styles", Styles},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcApplication;
	/// ApplicationDeveloper : IfcOrganization;
	/// Version : IfcLabel;
	/// ApplicationFullName : IfcLabel;
	/// ApplicationIdentifier : IfcIdentifier;
	/// UNIQUE
	/// UR1 : ApplicationIdentifier;
	/// UR2 : ApplicationFullName, Version;
	/// END_ENTITY;
	/// <summary>
	public class IFCApplication : IFC_ClassEntity, Global.IFCApplication
	{
		public virtual IFCOrganization? ApplicationDeveloper { get; set; }
		public virtual IFCLabel? Version { get; set; }
		public virtual IFCLabel? ApplicationFullName { get; set; }
		public virtual IFCIdentifier? ApplicationIdentifier { get; set; }
		public IFCApplication() : base()
		{
		}
		public IFCApplication(IFCOrganization? ApplicationDeveloper, IFCLabel? Version, IFCLabel? ApplicationFullName, IFCIdentifier? ApplicationIdentifier) : base ()
		{
			this.ApplicationDeveloper = ApplicationDeveloper;
			this.Version = Version;
			this.ApplicationFullName = ApplicationFullName;
			this.ApplicationIdentifier = ApplicationIdentifier;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ApplicationDeveloper", ApplicationDeveloper},
				{"Version", Version},
				{"ApplicationFullName", ApplicationFullName},
				{"ApplicationIdentifier", ApplicationIdentifier}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCOrganization? _ApplicationDeveloper
		{
			get
			{
				return ApplicationDeveloper;
			}
			set
			{
				if(value is IFCOrganization val)
				{
					ApplicationDeveloper = val;
				}
				else if(value == null)
				{
					ApplicationDeveloper = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Version
		{
			get
			{
				return Version;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Version = val;
				}
				else if(value == null)
				{
					Version = null;
				}
			}
		}
		public virtual Global.IFCLabel? _ApplicationFullName
		{
			get
			{
				return ApplicationFullName;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ApplicationFullName = val;
				}
				else if(value == null)
				{
					ApplicationFullName = null;
				}
			}
		}
		public virtual Global.IFCIdentifier? _ApplicationIdentifier
		{
			get
			{
				return ApplicationIdentifier;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					ApplicationIdentifier = val;
				}
				else if(value == null)
				{
					ApplicationIdentifier = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAppliedValue
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCostValue
	/// ,IfcEnvironmentalImpactValue));
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// AppliedValue : OPTIONAL IfcAppliedValueSelect;
	/// UnitBasis : OPTIONAL IfcMeasureWithUnit;
	/// ApplicableDate : OPTIONAL IfcDateTimeSelect;
	/// FixedUntilDate : OPTIONAL IfcDateTimeSelect;
	/// INVERSE
	/// ValuesReferenced : SET [0:?] OF IfcReferencesValueDocument FOR ReferencingValues;
	/// ValueOfComponents : SET [0:?] OF IfcAppliedValueRelationship FOR ComponentOfTotal;
	/// IsComponentIn : SET [0:?] OF IfcAppliedValueRelationship FOR Components;
	/// WHERE
	/// WR1 : EXISTS (AppliedValue) OR
	/// EXISTS (ValueOfComponents);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCAppliedValue : IFC_ClassEntity, IFCObjectReferenceSelect, Global.IFCAppliedValue
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFCAppliedValueSelect? AppliedValue { get; set; }
		public virtual IFCMeasureWithUnit? UnitBasis { get; set; }
		public virtual IFCDateTimeSelect? ApplicableDate { get; set; }
		public virtual IFCDateTimeSelect? FixedUntilDate { get; set; }
		public IFC_Attributes<IFCReferencesValueDocument>? ValuesReferenced {get{return new IFC_Attributes<IFCReferencesValueDocument>(Model?.GetItems<IFCReferencesValueDocument>().Where(x => x.ReferencingValues != null && x.ReferencingValues.Contains(this)).ToList());}}
		public IFC_Attributes<IFCAppliedValueRelationship>? ValueOfComponents {get{return new IFC_Attributes<IFCAppliedValueRelationship>(Model?.GetItems<IFCAppliedValueRelationship>().Where(x => x.ComponentOfTotal != null && x.ComponentOfTotal == this).ToList());}}
		public IFC_Attributes<IFCAppliedValueRelationship>? IsComponentIn {get{return new IFC_Attributes<IFCAppliedValueRelationship>(Model?.GetItems<IFCAppliedValueRelationship>().Where(x => x.Components != null && x.Components.Contains(this)).ToList());}}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCAppliedValue() : base()
		{
		}
		public IFCAppliedValue(IFCLabel? Name, IFCText? Description, IFCAppliedValueSelect? AppliedValue, IFCMeasureWithUnit? UnitBasis, IFCDateTimeSelect? ApplicableDate, IFCDateTimeSelect? FixedUntilDate) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.AppliedValue = AppliedValue;
			this.UnitBasis = UnitBasis;
			this.ApplicableDate = ApplicableDate;
			this.FixedUntilDate = FixedUntilDate;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"AppliedValue", AppliedValue},
				{"UnitBasis", UnitBasis},
				{"ApplicableDate", ApplicableDate},
				{"FixedUntilDate", FixedUntilDate}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ValuesReferenced", ValuesReferenced},
				{"ValueOfComponents", ValueOfComponents},
				{"IsComponentIn", IsComponentIn}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCAppliedValueSelect? _AppliedValue
		{
			get
			{
				return AppliedValue;
			}
			set
			{
				if(value is IFCAppliedValueSelect val)
				{
					AppliedValue = val;
				}
				else if(value == null)
				{
					AppliedValue = null;
				}
			}
		}
		public virtual Global.IFCMeasureWithUnit? _UnitBasis
		{
			get
			{
				return UnitBasis;
			}
			set
			{
				if(value is IFCMeasureWithUnit val)
				{
					UnitBasis = val;
				}
				else if(value == null)
				{
					UnitBasis = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _ApplicableDate
		{
			get
			{
				return ApplicableDate;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					ApplicableDate = val;
				}
				else if(value == null)
				{
					ApplicableDate = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _FixedUntilDate
		{
			get
			{
				return FixedUntilDate;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					FixedUntilDate = val;
				}
				else if(value == null)
				{
					FixedUntilDate = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCReferencesValueDocument>? _ValuesReferenced
		{
			get
			{
				if(ValuesReferenced != null)
				{
					IFC_Attributes<Global.IFCReferencesValueDocument>? items = new IFC_Attributes<Global.IFCReferencesValueDocument>();
					foreach (IFCReferencesValueDocument item in ValuesReferenced)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCAppliedValueRelationship>? _ValueOfComponents
		{
			get
			{
				if(ValueOfComponents != null)
				{
					IFC_Attributes<Global.IFCAppliedValueRelationship>? items = new IFC_Attributes<Global.IFCAppliedValueRelationship>();
					foreach (IFCAppliedValueRelationship item in ValueOfComponents)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCAppliedValueRelationship>? _IsComponentIn
		{
			get
			{
				if(IsComponentIn != null)
				{
					IFC_Attributes<Global.IFCAppliedValueRelationship>? items = new IFC_Attributes<Global.IFCAppliedValueRelationship>();
					foreach (IFCAppliedValueRelationship item in IsComponentIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAppliedValueRelationship;
	/// ComponentOfTotal : IfcAppliedValue;
	/// Components : SET [1:?] OF IfcAppliedValue;
	/// ArithmeticOperator : IfcArithmeticOperatorEnum;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IFCAppliedValueRelationship : IFC_ClassEntity, Global.IFCAppliedValueRelationship
	{
		public virtual IFCAppliedValue? ComponentOfTotal { get; set; }
		public virtual IFC_Attributes<IFCAppliedValue>? Components { get; set; }
		public virtual IFCArithmeticOperatorEnum? ArithmeticOperator { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public IFCAppliedValueRelationship() : base()
		{
		}
		public IFCAppliedValueRelationship(IFCAppliedValue? ComponentOfTotal, IFC_Attributes<IFCAppliedValue>? Components, IFCArithmeticOperatorEnum? ArithmeticOperator, IFCLabel? Name, IFCText? Description) : base ()
		{
			this.ComponentOfTotal = ComponentOfTotal;
			this.Components = Components;
			this.ArithmeticOperator = ArithmeticOperator;
			this.Name = Name;
			this.Description = Description;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ComponentOfTotal", ComponentOfTotal},
				{"Components", Components},
				{"ArithmeticOperator", ArithmeticOperator},
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCAppliedValue? _ComponentOfTotal
		{
			get
			{
				return ComponentOfTotal;
			}
			set
			{
				if(value is IFCAppliedValue val)
				{
					ComponentOfTotal = val;
				}
				else if(value == null)
				{
					ComponentOfTotal = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCAppliedValue>? _Components
		{
			get
			{
				if(Components != null)
				{
					IFC_Attributes<Global.IFCAppliedValue>? items = new IFC_Attributes<Global.IFCAppliedValue>();
					foreach (IFCAppliedValue item in Components)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Components = null;
				}
				else
				{
					Components = new IFC_Attributes<IFCAppliedValue>();
					foreach(var val in value)
					{
						if(val is IFCAppliedValue v)
						{
							Components.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCArithmeticOperatorEnum? _ArithmeticOperator
		{
			get
			{
				return ArithmeticOperator;
			}
			set
			{
				if(value is IFCArithmeticOperatorEnum val)
				{
					ArithmeticOperator = val;
				}
				else if(value == null)
				{
					ArithmeticOperator = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcApproval;
	/// Description : OPTIONAL IfcText;
	/// ApprovalDateTime : IfcDateTimeSelect;
	/// ApprovalStatus : OPTIONAL IfcLabel;
	/// ApprovalLevel : OPTIONAL IfcLabel;
	/// ApprovalQualifier : OPTIONAL IfcText;
	/// Name : IfcLabel;
	/// Identifier : IfcIdentifier;
	/// INVERSE
	/// Actors : SET [0:?] OF IfcApprovalActorRelationship FOR Approval;
	/// IsRelatedWith : SET [0:?] OF IfcApprovalRelationship FOR RelatedApproval;
	/// Relates : SET [0:?] OF IfcApprovalRelationship FOR RelatingApproval;
	/// END_ENTITY;
	/// <summary>
	public class IFCApproval : IFC_ClassEntity, Global.IFCApproval
	{
		public virtual IFCText? Description { get; set; }
		public virtual IFCDateTimeSelect? ApprovalDateTime { get; set; }
		public virtual IFCLabel? ApprovalStatus { get; set; }
		public virtual IFCLabel? ApprovalLevel { get; set; }
		public virtual IFCText? ApprovalQualifier { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCIdentifier? Identifier { get; set; }
		public IFC_Attributes<IFCApprovalActorRelationship>? Actors {get{return new IFC_Attributes<IFCApprovalActorRelationship>(Model?.GetItems<IFCApprovalActorRelationship>().Where(x => x.Approval != null && x.Approval == this).ToList());}}
		public IFC_Attributes<IFCApprovalRelationship>? IsRelatedWith {get{return new IFC_Attributes<IFCApprovalRelationship>(Model?.GetItems<IFCApprovalRelationship>().Where(x => x.RelatedApproval != null && x.RelatedApproval == this).ToList());}}
		public IFC_Attributes<IFCApprovalRelationship>? Relates {get{return new IFC_Attributes<IFCApprovalRelationship>(Model?.GetItems<IFCApprovalRelationship>().Where(x => x.RelatingApproval != null && x.RelatingApproval == this).ToList());}}
		public IFCApproval() : base()
		{
		}
		public IFCApproval(IFCText? Description, IFCDateTimeSelect? ApprovalDateTime, IFCLabel? ApprovalStatus, IFCLabel? ApprovalLevel, IFCText? ApprovalQualifier, IFCLabel? Name, IFCIdentifier? Identifier) : base ()
		{
			this.Description = Description;
			this.ApprovalDateTime = ApprovalDateTime;
			this.ApprovalStatus = ApprovalStatus;
			this.ApprovalLevel = ApprovalLevel;
			this.ApprovalQualifier = ApprovalQualifier;
			this.Name = Name;
			this.Identifier = Identifier;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Description", Description},
				{"ApprovalDateTime", ApprovalDateTime},
				{"ApprovalStatus", ApprovalStatus},
				{"ApprovalLevel", ApprovalLevel},
				{"ApprovalQualifier", ApprovalQualifier},
				{"Name", Name},
				{"Identifier", Identifier}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Actors", Actors},
				{"IsRelatedWith", IsRelatedWith},
				{"Relates", Relates}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _ApprovalDateTime
		{
			get
			{
				return ApprovalDateTime;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					ApprovalDateTime = val;
				}
				else if(value == null)
				{
					ApprovalDateTime = null;
				}
			}
		}
		public virtual Global.IFCLabel? _ApprovalStatus
		{
			get
			{
				return ApprovalStatus;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ApprovalStatus = val;
				}
				else if(value == null)
				{
					ApprovalStatus = null;
				}
			}
		}
		public virtual Global.IFCLabel? _ApprovalLevel
		{
			get
			{
				return ApprovalLevel;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ApprovalLevel = val;
				}
				else if(value == null)
				{
					ApprovalLevel = null;
				}
			}
		}
		public virtual Global.IFCText? _ApprovalQualifier
		{
			get
			{
				return ApprovalQualifier;
			}
			set
			{
				if(value is IFCText val)
				{
					ApprovalQualifier = val;
				}
				else if(value == null)
				{
					ApprovalQualifier = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCIdentifier? _Identifier
		{
			get
			{
				return Identifier;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					Identifier = val;
				}
				else if(value == null)
				{
					Identifier = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCApprovalActorRelationship>? _Actors
		{
			get
			{
				if(Actors != null)
				{
					IFC_Attributes<Global.IFCApprovalActorRelationship>? items = new IFC_Attributes<Global.IFCApprovalActorRelationship>();
					foreach (IFCApprovalActorRelationship item in Actors)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCApprovalRelationship>? _IsRelatedWith
		{
			get
			{
				if(IsRelatedWith != null)
				{
					IFC_Attributes<Global.IFCApprovalRelationship>? items = new IFC_Attributes<Global.IFCApprovalRelationship>();
					foreach (IFCApprovalRelationship item in IsRelatedWith)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCApprovalRelationship>? _Relates
		{
			get
			{
				if(Relates != null)
				{
					IFC_Attributes<Global.IFCApprovalRelationship>? items = new IFC_Attributes<Global.IFCApprovalRelationship>();
					foreach (IFCApprovalRelationship item in Relates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcApprovalActorRelationship;
	/// Actor : IfcActorSelect;
	/// Approval : IfcApproval;
	/// Role : IfcActorRole;
	/// END_ENTITY;
	/// <summary>
	public class IFCApprovalActorRelationship : IFC_ClassEntity, Global.IFCApprovalActorRelationship
	{
		public virtual IFCActorSelect? Actor { get; set; }
		public virtual IFCApproval? Approval { get; set; }
		public virtual IFCActorRole? Role { get; set; }
		public IFCApprovalActorRelationship() : base()
		{
		}
		public IFCApprovalActorRelationship(IFCActorSelect? Actor, IFCApproval? Approval, IFCActorRole? Role) : base ()
		{
			this.Actor = Actor;
			this.Approval = Approval;
			this.Role = Role;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Actor", Actor},
				{"Approval", Approval},
				{"Role", Role}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCActorSelect? _Actor
		{
			get
			{
				return Actor;
			}
			set
			{
				if(value is IFCActorSelect val)
				{
					Actor = val;
				}
				else if(value == null)
				{
					Actor = null;
				}
			}
		}
		public virtual Global.IFCApproval? _Approval
		{
			get
			{
				return Approval;
			}
			set
			{
				if(value is IFCApproval val)
				{
					Approval = val;
				}
				else if(value == null)
				{
					Approval = null;
				}
			}
		}
		public virtual Global.IFCActorRole? _Role
		{
			get
			{
				return Role;
			}
			set
			{
				if(value is IFCActorRole val)
				{
					Role = val;
				}
				else if(value == null)
				{
					Role = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcApprovalPropertyRelationship;
	/// ApprovedProperties : SET [1:?] OF IfcProperty;
	/// Approval : IfcApproval;
	/// END_ENTITY;
	/// <summary>
	public class IFCApprovalPropertyRelationship : IFC_ClassEntity, Global.IFCApprovalPropertyRelationship
	{
		public virtual IFC_Attributes<IFCProperty>? ApprovedProperties { get; set; }
		public virtual IFCApproval? Approval { get; set; }
		public IFCApprovalPropertyRelationship() : base()
		{
		}
		public IFCApprovalPropertyRelationship(IFC_Attributes<IFCProperty>? ApprovedProperties, IFCApproval? Approval) : base ()
		{
			this.ApprovedProperties = ApprovedProperties;
			this.Approval = Approval;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ApprovedProperties", ApprovedProperties},
				{"Approval", Approval}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCProperty>? _ApprovedProperties
		{
			get
			{
				if(ApprovedProperties != null)
				{
					IFC_Attributes<Global.IFCProperty>? items = new IFC_Attributes<Global.IFCProperty>();
					foreach (IFCProperty item in ApprovedProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ApprovedProperties = null;
				}
				else
				{
					ApprovedProperties = new IFC_Attributes<IFCProperty>();
					foreach(var val in value)
					{
						if(val is IFCProperty v)
						{
							ApprovedProperties.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCApproval? _Approval
		{
			get
			{
				return Approval;
			}
			set
			{
				if(value is IFCApproval val)
				{
					Approval = val;
				}
				else if(value == null)
				{
					Approval = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcApprovalRelationship;
	/// RelatedApproval : IfcApproval;
	/// RelatingApproval : IfcApproval;
	/// Description : OPTIONAL IfcText;
	/// Name : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IFCApprovalRelationship : IFC_ClassEntity, Global.IFCApprovalRelationship
	{
		public virtual IFCApproval? RelatedApproval { get; set; }
		public virtual IFCApproval? RelatingApproval { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public IFCApprovalRelationship() : base()
		{
		}
		public IFCApprovalRelationship(IFCApproval? RelatedApproval, IFCApproval? RelatingApproval, IFCText? Description, IFCLabel? Name) : base ()
		{
			this.RelatedApproval = RelatedApproval;
			this.RelatingApproval = RelatingApproval;
			this.Description = Description;
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RelatedApproval", RelatedApproval},
				{"RelatingApproval", RelatingApproval},
				{"Description", Description},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCApproval? _RelatedApproval
		{
			get
			{
				return RelatedApproval;
			}
			set
			{
				if(value is IFCApproval val)
				{
					RelatedApproval = val;
				}
				else if(value == null)
				{
					RelatedApproval = null;
				}
			}
		}
		public virtual Global.IFCApproval? _RelatingApproval
		{
			get
			{
				return RelatingApproval;
			}
			set
			{
				if(value is IFCApproval val)
				{
					RelatingApproval = val;
				}
				else if(value == null)
				{
					RelatingApproval = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcArbitraryClosedProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcArbitraryProfileDefWithVoids))
	/// SUBTYPE OF (IfcProfileDef);
	/// OuterCurve : IfcCurve;
	/// WHERE
	/// WR1 : OuterCurve.Dim = 2;
	/// WR2 : NOT('IFC2X3.IFCLINE' IN TYPEOF(OuterCurve));
	/// WR3 : NOT('IFC2X3.IFCOFFSETCURVE2D' IN TYPEOF(OuterCurve));
	/// END_ENTITY;
	/// <summary>
	public class IFCArbitraryClosedProfileDef : IFCProfileDef, Global.IFCArbitraryClosedProfileDef
	{
		public virtual IFCCurve? OuterCurve { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCArbitraryClosedProfileDef() : base()
		{
		}
		public IFCArbitraryClosedProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCCurve? OuterCurve) : base (ProfileType, ProfileName)
		{
			this.OuterCurve = OuterCurve;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"OuterCurve", OuterCurve}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual Global.IFCCurve? _OuterCurve
		{
			get
			{
				return OuterCurve;
			}
			set
			{
				if(value is IFCCurve val)
				{
					OuterCurve = val;
				}
				else if(value == null)
				{
					OuterCurve = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcArbitraryOpenProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcCenterLineProfileDef))
	/// SUBTYPE OF (IfcProfileDef);
	/// Curve : IfcBoundedCurve;
	/// WHERE
	/// WR11 : ('IFC2X3.IFCCENTERLINEPROFILEDEF' IN TYPEOF(SELF)) OR
	/// (SELF\IfcProfileDef.ProfileType = IfcProfileTypeEnum.CURVE);
	/// WR12 : Curve.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class IFCArbitraryOpenProfileDef : IFCProfileDef, Global.IFCArbitraryOpenProfileDef
	{
		public virtual IFCBoundedCurve? Curve { get; set; }
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR12
		{
			get
			{
				return true;
			}
		}
		public IFCArbitraryOpenProfileDef() : base()
		{
		}
		public IFCArbitraryOpenProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCBoundedCurve? Curve) : base (ProfileType, ProfileName)
		{
			this.Curve = Curve;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Curve", Curve}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12}
			};
		}
		public virtual Global.IFCBoundedCurve? _Curve
		{
			get
			{
				return Curve;
			}
			set
			{
				if(value is IFCBoundedCurve val)
				{
					Curve = val;
				}
				else if(value == null)
				{
					Curve = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcArbitraryProfileDefWithVoids
	/// SUBTYPE OF (IfcArbitraryClosedProfileDef);
	/// InnerCurves : SET [1:?] OF IfcCurve;
	/// WHERE
	/// WR1 : SELF\IfcProfileDef.ProfileType = AREA;
	/// WR2 : SIZEOF(QUERY(temp <* InnerCurves | temp.Dim <> 2)) = 0;
	/// WR3 : SIZEOF(QUERY(temp <* InnerCurves | 'IFC2X3.IFCLINE' IN TYPEOF(temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCArbitraryProfileDefWithVoids : IFCArbitraryClosedProfileDef, Global.IFCArbitraryProfileDefWithVoids
	{
		public virtual IFC_Attributes<IFCCurve>? InnerCurves { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public override bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public override bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCArbitraryProfileDefWithVoids() : base()
		{
		}
		public IFCArbitraryProfileDefWithVoids(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCCurve? OuterCurve, IFC_Attributes<IFCCurve>? InnerCurves) : base (ProfileType, ProfileName, OuterCurve)
		{
			this.InnerCurves = InnerCurves;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"OuterCurve", OuterCurve},
				{"InnerCurves", InnerCurves}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual IFC_Attributes<Global.IFCCurve>? _InnerCurves
		{
			get
			{
				if(InnerCurves != null)
				{
					IFC_Attributes<Global.IFCCurve>? items = new IFC_Attributes<Global.IFCCurve>();
					foreach (IFCCurve item in InnerCurves)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					InnerCurves = null;
				}
				else
				{
					InnerCurves = new IFC_Attributes<IFCCurve>();
					foreach(var val in value)
					{
						if(val is IFCCurve v)
						{
							InnerCurves.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAsset
	/// SUBTYPE OF (IfcGroup);
	/// AssetID : IfcIdentifier;
	/// OriginalValue : IfcCostValue;
	/// CurrentValue : IfcCostValue;
	/// TotalReplacementCost : IfcCostValue;
	/// Owner : IfcActorSelect;
	/// User : IfcActorSelect;
	/// ResponsiblePerson : IfcPerson;
	/// IncorporationDate : IfcCalendarDate;
	/// DepreciatedValue : IfcCostValue;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects | NOT('IFC2X3.IFCELEMENT' IN TYPEOF(Temp)))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCAsset : IFCGroup, Global.IFCAsset
	{
		public virtual IFCIdentifier? AssetID { get; set; }
		public virtual IFCCostValue? OriginalValue { get; set; }
		public virtual IFCCostValue? CurrentValue { get; set; }
		public virtual IFCCostValue? TotalReplacementCost { get; set; }
		public virtual IFCActorSelect? Owner { get; set; }
		public virtual IFCActorSelect? User { get; set; }
		public virtual IFCPerson? ResponsiblePerson { get; set; }
		public virtual IFCCalendarDate? IncorporationDate { get; set; }
		public virtual IFCCostValue? DepreciatedValue { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCAsset() : base()
		{
		}
		public IFCAsset(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? AssetID, IFCCostValue? OriginalValue, IFCCostValue? CurrentValue, IFCCostValue? TotalReplacementCost, IFCActorSelect? Owner, IFCActorSelect? User, IFCPerson? ResponsiblePerson, IFCCalendarDate? IncorporationDate, IFCCostValue? DepreciatedValue) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.AssetID = AssetID;
			this.OriginalValue = OriginalValue;
			this.CurrentValue = CurrentValue;
			this.TotalReplacementCost = TotalReplacementCost;
			this.Owner = Owner;
			this.User = User;
			this.ResponsiblePerson = ResponsiblePerson;
			this.IncorporationDate = IncorporationDate;
			this.DepreciatedValue = DepreciatedValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"AssetID", AssetID},
				{"OriginalValue", OriginalValue},
				{"CurrentValue", CurrentValue},
				{"TotalReplacementCost", TotalReplacementCost},
				{"Owner", Owner},
				{"User", User},
				{"ResponsiblePerson", ResponsiblePerson},
				{"IncorporationDate", IncorporationDate},
				{"DepreciatedValue", DepreciatedValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsGroupedBy", IsGroupedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCIdentifier? _AssetID
		{
			get
			{
				return AssetID;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					AssetID = val;
				}
				else if(value == null)
				{
					AssetID = null;
				}
			}
		}
		public virtual Global.IFCCostValue? _OriginalValue
		{
			get
			{
				return OriginalValue;
			}
			set
			{
				if(value is IFCCostValue val)
				{
					OriginalValue = val;
				}
				else if(value == null)
				{
					OriginalValue = null;
				}
			}
		}
		public virtual Global.IFCCostValue? _CurrentValue
		{
			get
			{
				return CurrentValue;
			}
			set
			{
				if(value is IFCCostValue val)
				{
					CurrentValue = val;
				}
				else if(value == null)
				{
					CurrentValue = null;
				}
			}
		}
		public virtual Global.IFCCostValue? _TotalReplacementCost
		{
			get
			{
				return TotalReplacementCost;
			}
			set
			{
				if(value is IFCCostValue val)
				{
					TotalReplacementCost = val;
				}
				else if(value == null)
				{
					TotalReplacementCost = null;
				}
			}
		}
		public virtual Global.IFCActorSelect? _Owner
		{
			get
			{
				return Owner;
			}
			set
			{
				if(value is IFCActorSelect val)
				{
					Owner = val;
				}
				else if(value == null)
				{
					Owner = null;
				}
			}
		}
		public virtual Global.IFCActorSelect? _User
		{
			get
			{
				return User;
			}
			set
			{
				if(value is IFCActorSelect val)
				{
					User = val;
				}
				else if(value == null)
				{
					User = null;
				}
			}
		}
		public virtual Global.IFCPerson? _ResponsiblePerson
		{
			get
			{
				return ResponsiblePerson;
			}
			set
			{
				if(value is IFCPerson val)
				{
					ResponsiblePerson = val;
				}
				else if(value == null)
				{
					ResponsiblePerson = null;
				}
			}
		}
		public virtual Global.IFCCalendarDate? _IncorporationDate
		{
			get
			{
				return IncorporationDate;
			}
			set
			{
				if(value is IFCCalendarDate val)
				{
					IncorporationDate = val;
				}
				else if(value == null)
				{
					IncorporationDate = null;
				}
			}
		}
		public virtual Global.IFCCostValue? _DepreciatedValue
		{
			get
			{
				return DepreciatedValue;
			}
			set
			{
				if(value is IFCCostValue val)
				{
					DepreciatedValue = val;
				}
				else if(value == null)
				{
					DepreciatedValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAsymmetricIShapeProfileDef
	/// SUBTYPE OF (IfcIShapeProfileDef);
	/// TopFlangeWidth : IfcPositiveLengthMeasure;
	/// TopFlangeThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// TopFlangeFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCAsymmetricIShapeProfileDef : IFCIShapeProfileDef, Global.IFCAsymmetricIShapeProfileDef
	{
		public virtual IFCPositiveLengthMeasure? TopFlangeWidth { get; set; }
		public virtual IFCPositiveLengthMeasure? TopFlangeThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? TopFlangeFilletRadius { get; set; }
		public virtual IFCPositiveLengthMeasure? CentreOfGravityInY { get; set; }
		public IFCAsymmetricIShapeProfileDef() : base()
		{
		}
		public IFCAsymmetricIShapeProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? OverallWidth, IFCPositiveLengthMeasure? OverallDepth, IFCPositiveLengthMeasure? WebThickness, IFCPositiveLengthMeasure? FlangeThickness, IFCPositiveLengthMeasure? FilletRadius, IFCPositiveLengthMeasure? TopFlangeWidth, IFCPositiveLengthMeasure? TopFlangeThickness, IFCPositiveLengthMeasure? TopFlangeFilletRadius, IFCPositiveLengthMeasure? CentreOfGravityInY) : base (ProfileType, ProfileName, Position, OverallWidth, OverallDepth, WebThickness, FlangeThickness, FilletRadius)
		{
			this.TopFlangeWidth = TopFlangeWidth;
			this.TopFlangeThickness = TopFlangeThickness;
			this.TopFlangeFilletRadius = TopFlangeFilletRadius;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"OverallWidth", OverallWidth},
				{"OverallDepth", OverallDepth},
				{"WebThickness", WebThickness},
				{"FlangeThickness", FlangeThickness},
				{"FilletRadius", FilletRadius},
				{"TopFlangeWidth", TopFlangeWidth},
				{"TopFlangeThickness", TopFlangeThickness},
				{"TopFlangeFilletRadius", TopFlangeFilletRadius},
				{"CentreOfGravityInY", CentreOfGravityInY}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _TopFlangeWidth
		{
			get
			{
				return TopFlangeWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					TopFlangeWidth = val;
				}
				else if(value == null)
				{
					TopFlangeWidth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _TopFlangeThickness
		{
			get
			{
				return TopFlangeThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					TopFlangeThickness = val;
				}
				else if(value == null)
				{
					TopFlangeThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _TopFlangeFilletRadius
		{
			get
			{
				return TopFlangeFilletRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					TopFlangeFilletRadius = val;
				}
				else if(value == null)
				{
					TopFlangeFilletRadius = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _CentreOfGravityInY
		{
			get
			{
				return CentreOfGravityInY;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					CentreOfGravityInY = val;
				}
				else if(value == null)
				{
					CentreOfGravityInY = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAxis1Placement
	/// SUBTYPE OF (IfcPlacement);
	/// Axis : OPTIONAL IfcDirection;
	/// DERIVE
	/// Z : IfcDirection := NVL (IfcNormalise(Axis), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
	/// WHERE
	/// WR1 : (NOT (EXISTS (Axis))) OR (Axis.Dim = 3);
	/// WR2 : SELF\IfcPlacement.Location.Dim = 3;
	/// END_ENTITY;
	/// <summary>
	public class IFCAxis1Placement : IFCPlacement, Global.IFCAxis1Placement
	{
		public virtual IFCDirection? Axis { get; set; }
		public virtual IFCDirection? Z
		{
			get
			{
				//MANUAL : IFC2x3.IFCAxis1Placement.Z
				// NVL (IfcNormalise(Axis), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCAxis1Placement() : base()
		{
		}
		public IFCAxis1Placement(IFCCartesianPoint? Location, IFCDirection? Axis) : base (Location)
		{
			this.Axis = Axis;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location},
				{"Axis", Axis}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim},
				{"Z", Z}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual Global.IFCDirection? _Axis
		{
			get
			{
				return Axis;
			}
			set
			{
				if(value is IFCDirection val)
				{
					Axis = val;
				}
				else if(value == null)
				{
					Axis = null;
				}
			}
		}
		public virtual Global.IFCDirection? _Z
		{
			get
			{
				return Z;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAxis2Placement2D
	/// SUBTYPE OF (IfcPlacement);
	/// RefDirection : OPTIONAL IfcDirection;
	/// DERIVE
	/// P : LIST [2:2] OF IfcDirection := IfcBuild2Axes(RefDirection);
	/// WHERE
	/// WR1 : (NOT (EXISTS (RefDirection))) OR (RefDirection.Dim = 2);
	/// WR2 : SELF\IfcPlacement.Location.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class IFCAxis2Placement2D : IFCPlacement, IFCAxis2Placement, Global.IFCAxis2Placement2D
	{
		public virtual IFCDirection? RefDirection { get; set; }
		public virtual IFC_Attributes<IFCDirection>? P
		{
			get
			{
				//MANUAL : IFC2x3.IFCAxis2Placement2D.P
				// IfcBuild2Axes(RefDirection);
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCAxis2Placement2D() : base()
		{
		}
		public IFCAxis2Placement2D(IFCCartesianPoint? Location, IFCDirection? RefDirection) : base (Location)
		{
			this.RefDirection = RefDirection;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location},
				{"RefDirection", RefDirection}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim},
				{"P", P}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual Global.IFCDirection? _RefDirection
		{
			get
			{
				return RefDirection;
			}
			set
			{
				if(value is IFCDirection val)
				{
					RefDirection = val;
				}
				else if(value == null)
				{
					RefDirection = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCDirection>? _P
		{
			get
			{
				if(P != null)
				{
					IFC_Attributes<Global.IFCDirection>? items = new IFC_Attributes<Global.IFCDirection>();
					foreach (IFCDirection item in P)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcAxis2Placement3D
	/// SUBTYPE OF (IfcPlacement);
	/// Axis : OPTIONAL IfcDirection;
	/// RefDirection : OPTIONAL IfcDirection;
	/// DERIVE
	/// P : LIST [3:3] OF IfcDirection := IfcBuildAxes(Axis, RefDirection);
	/// WHERE
	/// WR1 : SELF\IfcPlacement.Location.Dim = 3;
	/// WR2 : (NOT (EXISTS (Axis))) OR (Axis.Dim = 3);
	/// WR3 : (NOT (EXISTS (RefDirection))) OR (RefDirection.Dim = 3);
	/// WR4 : (NOT (EXISTS (Axis))) OR (NOT (EXISTS (RefDirection))) OR (IfcCrossProduct(Axis,RefDirection).Magnitude > 0.0);
	/// WR5 : NOT ((EXISTS (Axis)) XOR (EXISTS (RefDirection)));
	/// END_ENTITY;
	/// <summary>
	public class IFCAxis2Placement3D : IFCPlacement, IFCAxis2Placement, Global.IFCAxis2Placement3D
	{
		public virtual IFCDirection? Axis { get; set; }
		public virtual IFCDirection? RefDirection { get; set; }
		public virtual IFC_Attributes<IFCDirection>? P
		{
			get
			{
				//MANUAL : IFC2x3.IFCAxis2Placement3D.P
				// IfcBuildAxes(Axis, RefDirection);
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR4
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR5
		{
			get
			{
				return true;
			}
		}
		public IFCAxis2Placement3D() : base()
		{
		}
		public IFCAxis2Placement3D(IFCCartesianPoint? Location, IFCDirection? Axis, IFCDirection? RefDirection) : base (Location)
		{
			this.Axis = Axis;
			this.RefDirection = RefDirection;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location},
				{"Axis", Axis},
				{"RefDirection", RefDirection}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim},
				{"P", P}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3},
				{"is_WR4", is_WR4},
				{"is_WR5", is_WR5}
			};
		}
		public virtual Global.IFCDirection? _Axis
		{
			get
			{
				return Axis;
			}
			set
			{
				if(value is IFCDirection val)
				{
					Axis = val;
				}
				else if(value == null)
				{
					Axis = null;
				}
			}
		}
		public virtual Global.IFCDirection? _RefDirection
		{
			get
			{
				return RefDirection;
			}
			set
			{
				if(value is IFCDirection val)
				{
					RefDirection = val;
				}
				else if(value == null)
				{
					RefDirection = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCDirection>? _P
		{
			get
			{
				if(P != null)
				{
					IFC_Attributes<Global.IFCDirection>? items = new IFC_Attributes<Global.IFCDirection>();
					foreach (IFCDirection item in P)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBSplineCurve
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBezierCurve))
	/// SUBTYPE OF (IfcBoundedCurve);
	/// Degree : INTEGER;
	/// ControlPointsList : LIST [2:?] OF IfcCartesianPoint;
	/// CurveForm : IfcBSplineCurveForm;
	/// ClosedCurve : LOGICAL;
	/// SelfIntersect : LOGICAL;
	/// DERIVE
	/// ControlPoints : ARRAY [0:255] OF IfcCartesianPoint := IfcListToArray(ControlPointsList,0,UpperIndexOnControlPoints);
	/// UpperIndexOnControlPoints : INTEGER := (SIZEOF(ControlPointsList) - 1);
	/// WHERE
	/// WR41 : SIZEOF(QUERY(Temp <* ControlPointsList |
	/// Temp.Dim <> ControlPointsList[1].Dim))
	/// = 0;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCBSplineCurve : IFCBoundedCurve, Global.IFCBSplineCurve
	{
		public virtual INTEGER? Degree { get; set; }
		public virtual IFC_Attributes<IFCCartesianPoint>? ControlPointsList { get; set; }
		public virtual IFCBSplineCurveForm? CurveForm { get; set; }
		public virtual LOGICAL? ClosedCurve { get; set; }
		public virtual LOGICAL? SelfIntersect { get; set; }
		public virtual IFC_Attributes<IFCCartesianPoint>? ControlPoints
		{
			get
			{
				//MANUAL : IFC2x3.IFCBSplineCurve.ControlPoints
				// IfcListToArray(ControlPointsList,0,UpperIndexOnControlPoints);
				return null;
				//END_MANUAL
			}
		}
		public virtual INTEGER? UpperIndexOnControlPoints
		{
			get
			{
				//MANUAL : IFC2x3.IFCBSplineCurve.UpperIndexOnControlPoints
				// (SIZEOF(ControlPointsList) - 1);
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public IFCBSplineCurve() : base()
		{
		}
		public IFCBSplineCurve(INTEGER? Degree, IFC_Attributes<IFCCartesianPoint>? ControlPointsList, IFCBSplineCurveForm? CurveForm, LOGICAL? ClosedCurve, LOGICAL? SelfIntersect) : base ()
		{
			this.Degree = Degree;
			this.ControlPointsList = ControlPointsList;
			this.CurveForm = CurveForm;
			this.ClosedCurve = ClosedCurve;
			this.SelfIntersect = SelfIntersect;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Degree", Degree},
				{"ControlPointsList", ControlPointsList},
				{"CurveForm", CurveForm},
				{"ClosedCurve", ClosedCurve},
				{"SelfIntersect", SelfIntersect}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim},
				{"ControlPoints", ControlPoints},
				{"UpperIndexOnControlPoints", UpperIndexOnControlPoints}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41}
			};
		}
		public virtual INTEGER? _Degree
		{
			get
			{
				return Degree;
			}
			set
			{
				if(value is INTEGER val)
				{
					Degree = val;
				}
				else if(value == null)
				{
					Degree = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCCartesianPoint>? _ControlPointsList
		{
			get
			{
				if(ControlPointsList != null)
				{
					IFC_Attributes<Global.IFCCartesianPoint>? items = new IFC_Attributes<Global.IFCCartesianPoint>();
					foreach (IFCCartesianPoint item in ControlPointsList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ControlPointsList = null;
				}
				else
				{
					ControlPointsList = new IFC_Attributes<IFCCartesianPoint>();
					foreach(var val in value)
					{
						if(val is IFCCartesianPoint v)
						{
							ControlPointsList.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCBSplineCurveForm? _CurveForm
		{
			get
			{
				return CurveForm;
			}
			set
			{
				if(value is IFCBSplineCurveForm val)
				{
					CurveForm = val;
				}
				else if(value == null)
				{
					CurveForm = null;
				}
			}
		}
		public virtual LOGICAL? _ClosedCurve
		{
			get
			{
				return ClosedCurve;
			}
			set
			{
				if(value is LOGICAL val)
				{
					ClosedCurve = val;
				}
				else if(value == null)
				{
					ClosedCurve = null;
				}
			}
		}
		public virtual LOGICAL? _SelfIntersect
		{
			get
			{
				return SelfIntersect;
			}
			set
			{
				if(value is LOGICAL val)
				{
					SelfIntersect = val;
				}
				else if(value == null)
				{
					SelfIntersect = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCCartesianPoint>? _ControlPoints
		{
			get
			{
				if(ControlPoints != null)
				{
					IFC_Attributes<Global.IFCCartesianPoint>? items = new IFC_Attributes<Global.IFCCartesianPoint>();
					foreach (IFCCartesianPoint item in ControlPoints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual INTEGER? _UpperIndexOnControlPoints
		{
			get
			{
				return UpperIndexOnControlPoints;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBeam
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCBeam : IFCBuildingElement, Global.IFCBeam
	{
		public IFCBeam() : base()
		{
		}
		public IFCBeam(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBeamType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcBeamTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCBeamType : IFCBuildingElementType, Global.IFCBeamType
	{
		public virtual IFCBeamTypeEnum? PredefinedType { get; set; }
		public IFCBeamType() : base()
		{
		}
		public IFCBeamType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCBeamTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCBeamTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCBeamTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBezierCurve
	/// SUPERTYPE OF (ONEOF
	/// (IfcRationalBezierCurve))
	/// SUBTYPE OF (IfcBSplineCurve);
	/// END_ENTITY;
	/// <summary>
	public class IFCBezierCurve : IFCBSplineCurve, Global.IFCBezierCurve
	{
		public IFCBezierCurve() : base()
		{
		}
		public IFCBezierCurve(INTEGER? Degree, IFC_Attributes<IFCCartesianPoint>? ControlPointsList, IFCBSplineCurveForm? CurveForm, LOGICAL? ClosedCurve, LOGICAL? SelfIntersect) : base (Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Degree", Degree},
				{"ControlPointsList", ControlPointsList},
				{"CurveForm", CurveForm},
				{"ClosedCurve", ClosedCurve},
				{"SelfIntersect", SelfIntersect}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim},
				{"ControlPoints", ControlPoints},
				{"UpperIndexOnControlPoints", UpperIndexOnControlPoints}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBlobTexture
	/// SUBTYPE OF (IfcSurfaceTexture);
	/// RasterFormat : IfcIdentifier;
	/// RasterCode : BOOLEAN;
	/// WHERE
	/// WR11 : SELF.RasterFormat IN ['BMP', 'JPG', 'GIF', 'PNG'];
	/// END_ENTITY;
	/// <summary>
	public class IFCBlobTexture : IFCSurfaceTexture, Global.IFCBlobTexture
	{
		public virtual IFCIdentifier? RasterFormat { get; set; }
		public virtual BOOLEAN? RasterCode { get; set; }
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public IFCBlobTexture() : base()
		{
		}
		public IFCBlobTexture(BOOLEAN? RepeatS, BOOLEAN? RepeatT, IFCSurfaceTextureEnum? TextureType, IFCCartesianTransformationOperator2D? TextureTransform, IFCIdentifier? RasterFormat, BOOLEAN? RasterCode) : base (RepeatS, RepeatT, TextureType, TextureTransform)
		{
			this.RasterFormat = RasterFormat;
			this.RasterCode = RasterCode;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepeatS", RepeatS},
				{"RepeatT", RepeatT},
				{"TextureType", TextureType},
				{"TextureTransform", TextureTransform},
				{"RasterFormat", RasterFormat},
				{"RasterCode", RasterCode}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11}
			};
		}
		public virtual Global.IFCIdentifier? _RasterFormat
		{
			get
			{
				return RasterFormat;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					RasterFormat = val;
				}
				else if(value == null)
				{
					RasterFormat = null;
				}
			}
		}
		public virtual BOOLEAN? _RasterCode
		{
			get
			{
				return RasterCode;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					RasterCode = val;
				}
				else if(value == null)
				{
					RasterCode = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBlock
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// XLength : IfcPositiveLengthMeasure;
	/// YLength : IfcPositiveLengthMeasure;
	/// ZLength : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCBlock : IFCCsgPrimitive3D, Global.IFCBlock
	{
		public virtual IFCPositiveLengthMeasure? XLength { get; set; }
		public virtual IFCPositiveLengthMeasure? YLength { get; set; }
		public virtual IFCPositiveLengthMeasure? ZLength { get; set; }
		public IFCBlock() : base()
		{
		}
		public IFCBlock(IFCAxis2Placement3D? Position, IFCPositiveLengthMeasure? XLength, IFCPositiveLengthMeasure? YLength, IFCPositiveLengthMeasure? ZLength) : base (Position)
		{
			this.XLength = XLength;
			this.YLength = YLength;
			this.ZLength = ZLength;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Position", Position},
				{"XLength", XLength},
				{"YLength", YLength},
				{"ZLength", ZLength}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _XLength
		{
			get
			{
				return XLength;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					XLength = val;
				}
				else if(value == null)
				{
					XLength = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _YLength
		{
			get
			{
				return YLength;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					YLength = val;
				}
				else if(value == null)
				{
					YLength = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _ZLength
		{
			get
			{
				return ZLength;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					ZLength = val;
				}
				else if(value == null)
				{
					ZLength = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoilerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcBoilerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcBoilerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcBoilerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCBoilerType : IFCEnergyConversionDeviceType, Global.IFCBoilerType
	{
		public virtual IFCBoilerTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCBoilerType() : base()
		{
		}
		public IFCBoilerType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCBoilerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCBoilerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCBoilerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBooleanClippingResult
	/// SUBTYPE OF (IfcBooleanResult);
	/// WHERE
	/// WR1 : ('IFC2X3.IFCSWEPTAREASOLID' IN TYPEOF(FirstOperand)) OR ('IFC2X3.IFCBOOLEANCLIPPINGRESULT' IN TYPEOF(FirstOperand));
	/// WR2 : ('IFC2X3.IFCHALFSPACESOLID' IN TYPEOF(SecondOperand));
	/// WR3 : Operator = DIFFERENCE;
	/// END_ENTITY;
	/// <summary>
	public class IFCBooleanClippingResult : IFCBooleanResult, Global.IFCBooleanClippingResult
	{
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCBooleanClippingResult() : base()
		{
		}
		public IFCBooleanClippingResult(IFCBooleanOperator? Operator, IFCBooleanOperand? FirstOperand, IFCBooleanOperand? SecondOperand) : base (Operator, FirstOperand, SecondOperand)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Operator", Operator},
				{"FirstOperand", FirstOperand},
				{"SecondOperand", SecondOperand}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBooleanResult
	/// SUPERTYPE OF (ONEOF
	/// (IfcBooleanClippingResult))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Operator : IfcBooleanOperator;
	/// FirstOperand : IfcBooleanOperand;
	/// SecondOperand : IfcBooleanOperand;
	/// DERIVE
	/// Dim : IfcDimensionCount := FirstOperand.Dim;
	/// WHERE
	/// WR1 : FirstOperand.Dim = SecondOperand.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IFCBooleanResult : IFCGeometricRepresentationItem, IFCBooleanOperand, IFCCsgSelect, Global.IFCBooleanResult
	{
		public virtual IFCBooleanOperator? Operator { get; set; }
		public virtual IFCBooleanOperand? FirstOperand { get; set; }
		public virtual IFCBooleanOperand? SecondOperand { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCBooleanResult.Dim
				// FirstOperand.Dim;
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCBooleanResult() : base()
		{
		}
		public IFCBooleanResult(IFCBooleanOperator? Operator, IFCBooleanOperand? FirstOperand, IFCBooleanOperand? SecondOperand) : base ()
		{
			this.Operator = Operator;
			this.FirstOperand = FirstOperand;
			this.SecondOperand = SecondOperand;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Operator", Operator},
				{"FirstOperand", FirstOperand},
				{"SecondOperand", SecondOperand}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCBooleanOperator? _Operator
		{
			get
			{
				return Operator;
			}
			set
			{
				if(value is IFCBooleanOperator val)
				{
					Operator = val;
				}
				else if(value == null)
				{
					Operator = null;
				}
			}
		}
		public virtual Global.IFCBooleanOperand? _FirstOperand
		{
			get
			{
				return FirstOperand;
			}
			set
			{
				if(value is IFCBooleanOperand val)
				{
					FirstOperand = val;
				}
				else if(value == null)
				{
					FirstOperand = null;
				}
			}
		}
		public virtual Global.IFCBooleanOperand? _SecondOperand
		{
			get
			{
				return SecondOperand;
			}
			set
			{
				if(value is IFCBooleanOperand val)
				{
					SecondOperand = val;
				}
				else if(value == null)
				{
					SecondOperand = null;
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundaryCondition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBoundaryEdgeCondition
	/// ,IfcBoundaryFaceCondition
	/// ,IfcBoundaryNodeCondition));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCBoundaryCondition : IFC_ClassEntity, Global.IFCBoundaryCondition
	{
		public virtual IFCLabel? Name { get; set; }
		public IFCBoundaryCondition() : base()
		{
		}
		public IFCBoundaryCondition(IFCLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundaryEdgeCondition
	/// SUBTYPE OF (IfcBoundaryCondition);
	/// LinearStiffnessByLengthX : OPTIONAL IfcModulusOfLinearSubgradeReactionMeasure;
	/// LinearStiffnessByLengthY : OPTIONAL IfcModulusOfLinearSubgradeReactionMeasure;
	/// LinearStiffnessByLengthZ : OPTIONAL IfcModulusOfLinearSubgradeReactionMeasure;
	/// RotationalStiffnessByLengthX : OPTIONAL IfcModulusOfRotationalSubgradeReactionMeasure;
	/// RotationalStiffnessByLengthY : OPTIONAL IfcModulusOfRotationalSubgradeReactionMeasure;
	/// RotationalStiffnessByLengthZ : OPTIONAL IfcModulusOfRotationalSubgradeReactionMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCBoundaryEdgeCondition : IFCBoundaryCondition, Global.IFCBoundaryEdgeCondition
	{
		public virtual IFCModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthX { get; set; }
		public virtual IFCModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthY { get; set; }
		public virtual IFCModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthZ { get; set; }
		public virtual IFCModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthX { get; set; }
		public virtual IFCModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthY { get; set; }
		public virtual IFCModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthZ { get; set; }
		public IFCBoundaryEdgeCondition() : base()
		{
		}
		public IFCBoundaryEdgeCondition(IFCLabel? Name, IFCModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthX, IFCModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthY, IFCModulusOfLinearSubgradeReactionMeasure? LinearStiffnessByLengthZ, IFCModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthX, IFCModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthY, IFCModulusOfRotationalSubgradeReactionMeasure? RotationalStiffnessByLengthZ) : base (Name)
		{
			this.LinearStiffnessByLengthX = LinearStiffnessByLengthX;
			this.LinearStiffnessByLengthY = LinearStiffnessByLengthY;
			this.LinearStiffnessByLengthZ = LinearStiffnessByLengthZ;
			this.RotationalStiffnessByLengthX = RotationalStiffnessByLengthX;
			this.RotationalStiffnessByLengthY = RotationalStiffnessByLengthY;
			this.RotationalStiffnessByLengthZ = RotationalStiffnessByLengthZ;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"LinearStiffnessByLengthX", LinearStiffnessByLengthX},
				{"LinearStiffnessByLengthY", LinearStiffnessByLengthY},
				{"LinearStiffnessByLengthZ", LinearStiffnessByLengthZ},
				{"RotationalStiffnessByLengthX", RotationalStiffnessByLengthX},
				{"RotationalStiffnessByLengthY", RotationalStiffnessByLengthY},
				{"RotationalStiffnessByLengthZ", RotationalStiffnessByLengthZ}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCModulusOfLinearSubgradeReactionMeasure? _LinearStiffnessByLengthX
		{
			get
			{
				return LinearStiffnessByLengthX;
			}
			set
			{
				if(value is IFCModulusOfLinearSubgradeReactionMeasure val)
				{
					LinearStiffnessByLengthX = val;
				}
				else if(value == null)
				{
					LinearStiffnessByLengthX = null;
				}
			}
		}
		public virtual Global.IFCModulusOfLinearSubgradeReactionMeasure? _LinearStiffnessByLengthY
		{
			get
			{
				return LinearStiffnessByLengthY;
			}
			set
			{
				if(value is IFCModulusOfLinearSubgradeReactionMeasure val)
				{
					LinearStiffnessByLengthY = val;
				}
				else if(value == null)
				{
					LinearStiffnessByLengthY = null;
				}
			}
		}
		public virtual Global.IFCModulusOfLinearSubgradeReactionMeasure? _LinearStiffnessByLengthZ
		{
			get
			{
				return LinearStiffnessByLengthZ;
			}
			set
			{
				if(value is IFCModulusOfLinearSubgradeReactionMeasure val)
				{
					LinearStiffnessByLengthZ = val;
				}
				else if(value == null)
				{
					LinearStiffnessByLengthZ = null;
				}
			}
		}
		public virtual Global.IFCModulusOfRotationalSubgradeReactionMeasure? _RotationalStiffnessByLengthX
		{
			get
			{
				return RotationalStiffnessByLengthX;
			}
			set
			{
				if(value is IFCModulusOfRotationalSubgradeReactionMeasure val)
				{
					RotationalStiffnessByLengthX = val;
				}
				else if(value == null)
				{
					RotationalStiffnessByLengthX = null;
				}
			}
		}
		public virtual Global.IFCModulusOfRotationalSubgradeReactionMeasure? _RotationalStiffnessByLengthY
		{
			get
			{
				return RotationalStiffnessByLengthY;
			}
			set
			{
				if(value is IFCModulusOfRotationalSubgradeReactionMeasure val)
				{
					RotationalStiffnessByLengthY = val;
				}
				else if(value == null)
				{
					RotationalStiffnessByLengthY = null;
				}
			}
		}
		public virtual Global.IFCModulusOfRotationalSubgradeReactionMeasure? _RotationalStiffnessByLengthZ
		{
			get
			{
				return RotationalStiffnessByLengthZ;
			}
			set
			{
				if(value is IFCModulusOfRotationalSubgradeReactionMeasure val)
				{
					RotationalStiffnessByLengthZ = val;
				}
				else if(value == null)
				{
					RotationalStiffnessByLengthZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundaryFaceCondition
	/// SUBTYPE OF (IfcBoundaryCondition);
	/// LinearStiffnessByAreaX : OPTIONAL IfcModulusOfSubgradeReactionMeasure;
	/// LinearStiffnessByAreaY : OPTIONAL IfcModulusOfSubgradeReactionMeasure;
	/// LinearStiffnessByAreaZ : OPTIONAL IfcModulusOfSubgradeReactionMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCBoundaryFaceCondition : IFCBoundaryCondition, Global.IFCBoundaryFaceCondition
	{
		public virtual IFCModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaX { get; set; }
		public virtual IFCModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaY { get; set; }
		public virtual IFCModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaZ { get; set; }
		public IFCBoundaryFaceCondition() : base()
		{
		}
		public IFCBoundaryFaceCondition(IFCLabel? Name, IFCModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaX, IFCModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaY, IFCModulusOfSubgradeReactionMeasure? LinearStiffnessByAreaZ) : base (Name)
		{
			this.LinearStiffnessByAreaX = LinearStiffnessByAreaX;
			this.LinearStiffnessByAreaY = LinearStiffnessByAreaY;
			this.LinearStiffnessByAreaZ = LinearStiffnessByAreaZ;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"LinearStiffnessByAreaX", LinearStiffnessByAreaX},
				{"LinearStiffnessByAreaY", LinearStiffnessByAreaY},
				{"LinearStiffnessByAreaZ", LinearStiffnessByAreaZ}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCModulusOfSubgradeReactionMeasure? _LinearStiffnessByAreaX
		{
			get
			{
				return LinearStiffnessByAreaX;
			}
			set
			{
				if(value is IFCModulusOfSubgradeReactionMeasure val)
				{
					LinearStiffnessByAreaX = val;
				}
				else if(value == null)
				{
					LinearStiffnessByAreaX = null;
				}
			}
		}
		public virtual Global.IFCModulusOfSubgradeReactionMeasure? _LinearStiffnessByAreaY
		{
			get
			{
				return LinearStiffnessByAreaY;
			}
			set
			{
				if(value is IFCModulusOfSubgradeReactionMeasure val)
				{
					LinearStiffnessByAreaY = val;
				}
				else if(value == null)
				{
					LinearStiffnessByAreaY = null;
				}
			}
		}
		public virtual Global.IFCModulusOfSubgradeReactionMeasure? _LinearStiffnessByAreaZ
		{
			get
			{
				return LinearStiffnessByAreaZ;
			}
			set
			{
				if(value is IFCModulusOfSubgradeReactionMeasure val)
				{
					LinearStiffnessByAreaZ = val;
				}
				else if(value == null)
				{
					LinearStiffnessByAreaZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundaryNodeCondition
	/// SUPERTYPE OF (ONEOF
	/// (IfcBoundaryNodeConditionWarping))
	/// SUBTYPE OF (IfcBoundaryCondition);
	/// LinearStiffnessX : OPTIONAL IfcLinearStiffnessMeasure;
	/// LinearStiffnessY : OPTIONAL IfcLinearStiffnessMeasure;
	/// LinearStiffnessZ : OPTIONAL IfcLinearStiffnessMeasure;
	/// RotationalStiffnessX : OPTIONAL IfcRotationalStiffnessMeasure;
	/// RotationalStiffnessY : OPTIONAL IfcRotationalStiffnessMeasure;
	/// RotationalStiffnessZ : OPTIONAL IfcRotationalStiffnessMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCBoundaryNodeCondition : IFCBoundaryCondition, Global.IFCBoundaryNodeCondition
	{
		public virtual IFCLinearStiffnessMeasure? LinearStiffnessX { get; set; }
		public virtual IFCLinearStiffnessMeasure? LinearStiffnessY { get; set; }
		public virtual IFCLinearStiffnessMeasure? LinearStiffnessZ { get; set; }
		public virtual IFCRotationalStiffnessMeasure? RotationalStiffnessX { get; set; }
		public virtual IFCRotationalStiffnessMeasure? RotationalStiffnessY { get; set; }
		public virtual IFCRotationalStiffnessMeasure? RotationalStiffnessZ { get; set; }
		public IFCBoundaryNodeCondition() : base()
		{
		}
		public IFCBoundaryNodeCondition(IFCLabel? Name, IFCLinearStiffnessMeasure? LinearStiffnessX, IFCLinearStiffnessMeasure? LinearStiffnessY, IFCLinearStiffnessMeasure? LinearStiffnessZ, IFCRotationalStiffnessMeasure? RotationalStiffnessX, IFCRotationalStiffnessMeasure? RotationalStiffnessY, IFCRotationalStiffnessMeasure? RotationalStiffnessZ) : base (Name)
		{
			this.LinearStiffnessX = LinearStiffnessX;
			this.LinearStiffnessY = LinearStiffnessY;
			this.LinearStiffnessZ = LinearStiffnessZ;
			this.RotationalStiffnessX = RotationalStiffnessX;
			this.RotationalStiffnessY = RotationalStiffnessY;
			this.RotationalStiffnessZ = RotationalStiffnessZ;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"LinearStiffnessX", LinearStiffnessX},
				{"LinearStiffnessY", LinearStiffnessY},
				{"LinearStiffnessZ", LinearStiffnessZ},
				{"RotationalStiffnessX", RotationalStiffnessX},
				{"RotationalStiffnessY", RotationalStiffnessY},
				{"RotationalStiffnessZ", RotationalStiffnessZ}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLinearStiffnessMeasure? _LinearStiffnessX
		{
			get
			{
				return LinearStiffnessX;
			}
			set
			{
				if(value is IFCLinearStiffnessMeasure val)
				{
					LinearStiffnessX = val;
				}
				else if(value == null)
				{
					LinearStiffnessX = null;
				}
			}
		}
		public virtual Global.IFCLinearStiffnessMeasure? _LinearStiffnessY
		{
			get
			{
				return LinearStiffnessY;
			}
			set
			{
				if(value is IFCLinearStiffnessMeasure val)
				{
					LinearStiffnessY = val;
				}
				else if(value == null)
				{
					LinearStiffnessY = null;
				}
			}
		}
		public virtual Global.IFCLinearStiffnessMeasure? _LinearStiffnessZ
		{
			get
			{
				return LinearStiffnessZ;
			}
			set
			{
				if(value is IFCLinearStiffnessMeasure val)
				{
					LinearStiffnessZ = val;
				}
				else if(value == null)
				{
					LinearStiffnessZ = null;
				}
			}
		}
		public virtual Global.IFCRotationalStiffnessMeasure? _RotationalStiffnessX
		{
			get
			{
				return RotationalStiffnessX;
			}
			set
			{
				if(value is IFCRotationalStiffnessMeasure val)
				{
					RotationalStiffnessX = val;
				}
				else if(value == null)
				{
					RotationalStiffnessX = null;
				}
			}
		}
		public virtual Global.IFCRotationalStiffnessMeasure? _RotationalStiffnessY
		{
			get
			{
				return RotationalStiffnessY;
			}
			set
			{
				if(value is IFCRotationalStiffnessMeasure val)
				{
					RotationalStiffnessY = val;
				}
				else if(value == null)
				{
					RotationalStiffnessY = null;
				}
			}
		}
		public virtual Global.IFCRotationalStiffnessMeasure? _RotationalStiffnessZ
		{
			get
			{
				return RotationalStiffnessZ;
			}
			set
			{
				if(value is IFCRotationalStiffnessMeasure val)
				{
					RotationalStiffnessZ = val;
				}
				else if(value == null)
				{
					RotationalStiffnessZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundaryNodeConditionWarping
	/// SUBTYPE OF (IfcBoundaryNodeCondition);
	/// WarpingStiffness : OPTIONAL IfcWarpingMomentMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCBoundaryNodeConditionWarping : IFCBoundaryNodeCondition, Global.IFCBoundaryNodeConditionWarping
	{
		public virtual IFCWarpingMomentMeasure? WarpingStiffness { get; set; }
		public IFCBoundaryNodeConditionWarping() : base()
		{
		}
		public IFCBoundaryNodeConditionWarping(IFCLabel? Name, IFCLinearStiffnessMeasure? LinearStiffnessX, IFCLinearStiffnessMeasure? LinearStiffnessY, IFCLinearStiffnessMeasure? LinearStiffnessZ, IFCRotationalStiffnessMeasure? RotationalStiffnessX, IFCRotationalStiffnessMeasure? RotationalStiffnessY, IFCRotationalStiffnessMeasure? RotationalStiffnessZ, IFCWarpingMomentMeasure? WarpingStiffness) : base (Name, LinearStiffnessX, LinearStiffnessY, LinearStiffnessZ, RotationalStiffnessX, RotationalStiffnessY, RotationalStiffnessZ)
		{
			this.WarpingStiffness = WarpingStiffness;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"LinearStiffnessX", LinearStiffnessX},
				{"LinearStiffnessY", LinearStiffnessY},
				{"LinearStiffnessZ", LinearStiffnessZ},
				{"RotationalStiffnessX", RotationalStiffnessX},
				{"RotationalStiffnessY", RotationalStiffnessY},
				{"RotationalStiffnessZ", RotationalStiffnessZ},
				{"WarpingStiffness", WarpingStiffness}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCWarpingMomentMeasure? _WarpingStiffness
		{
			get
			{
				return WarpingStiffness;
			}
			set
			{
				if(value is IFCWarpingMomentMeasure val)
				{
					WarpingStiffness = val;
				}
				else if(value == null)
				{
					WarpingStiffness = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoundedCurve
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBSplineCurve
	/// ,IfcCompositeCurve
	/// ,IfcPolyline
	/// ,IfcTrimmedCurve))
	/// SUBTYPE OF (IfcCurve);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCBoundedCurve : IFCCurve, IFCCurveOrEdgeCurve, Global.IFCBoundedCurve
	{
		public IFCBoundedCurve() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBoundedSurface
	/// SUPERTYPE OF (ONEOF
	/// (IfcCurveBoundedPlane
	/// ,IfcRectangularTrimmedSurface))
	/// SUBTYPE OF (IfcSurface);
	/// END_ENTITY;
	/// <summary>
	public class IFCBoundedSurface : IFCSurface, Global.IFCBoundedSurface
	{
		public IFCBoundedSurface() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBoundingBox
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Corner : IfcCartesianPoint;
	/// XDim : IfcPositiveLengthMeasure;
	/// YDim : IfcPositiveLengthMeasure;
	/// ZDim : IfcPositiveLengthMeasure;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IFCBoundingBox : IFCGeometricRepresentationItem, Global.IFCBoundingBox
	{
		public virtual IFCCartesianPoint? Corner { get; set; }
		public virtual IFCPositiveLengthMeasure? XDim { get; set; }
		public virtual IFCPositiveLengthMeasure? YDim { get; set; }
		public virtual IFCPositiveLengthMeasure? ZDim { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCBoundingBox.Dim
				// 3;
				return null;
				//END_MANUAL
			}
		}
		public IFCBoundingBox() : base()
		{
		}
		public IFCBoundingBox(IFCCartesianPoint? Corner, IFCPositiveLengthMeasure? XDim, IFCPositiveLengthMeasure? YDim, IFCPositiveLengthMeasure? ZDim) : base ()
		{
			this.Corner = Corner;
			this.XDim = XDim;
			this.YDim = YDim;
			this.ZDim = ZDim;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Corner", Corner},
				{"XDim", XDim},
				{"YDim", YDim},
				{"ZDim", ZDim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCartesianPoint? _Corner
		{
			get
			{
				return Corner;
			}
			set
			{
				if(value is IFCCartesianPoint val)
				{
					Corner = val;
				}
				else if(value == null)
				{
					Corner = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _XDim
		{
			get
			{
				return XDim;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					XDim = val;
				}
				else if(value == null)
				{
					XDim = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _YDim
		{
			get
			{
				return YDim;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					YDim = val;
				}
				else if(value == null)
				{
					YDim = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _ZDim
		{
			get
			{
				return ZDim;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					ZDim = val;
				}
				else if(value == null)
				{
					ZDim = null;
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBoxedHalfSpace
	/// SUBTYPE OF (IfcHalfSpaceSolid);
	/// Enclosure : IfcBoundingBox;
	/// WHERE
	/// WR1 : NOT ('IFC2X3.IFCCURVEBOUNDEDPLANE' IN TYPEOF(SELF\IfcHalfSpaceSolid.BaseSurface));
	/// END_ENTITY;
	/// <summary>
	public class IFCBoxedHalfSpace : IFCHalfSpaceSolid, Global.IFCBoxedHalfSpace
	{
		public virtual IFCBoundingBox? Enclosure { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCBoxedHalfSpace() : base()
		{
		}
		public IFCBoxedHalfSpace(IFCSurface? BaseSurface, BOOLEAN? AgreementFlag, IFCBoundingBox? Enclosure) : base (BaseSurface, AgreementFlag)
		{
			this.Enclosure = Enclosure;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"BaseSurface", BaseSurface},
				{"AgreementFlag", AgreementFlag},
				{"Enclosure", Enclosure}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCBoundingBox? _Enclosure
		{
			get
			{
				return Enclosure;
			}
			set
			{
				if(value is IFCBoundingBox val)
				{
					Enclosure = val;
				}
				else if(value == null)
				{
					Enclosure = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBuilding
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// ElevationOfRefHeight : OPTIONAL IfcLengthMeasure;
	/// ElevationOfTerrain : OPTIONAL IfcLengthMeasure;
	/// BuildingAddress : OPTIONAL IfcPostalAddress;
	/// END_ENTITY;
	/// <summary>
	public class IFCBuilding : IFCSpatialStructureElement, Global.IFCBuilding
	{
		public virtual IFCLengthMeasure? ElevationOfRefHeight { get; set; }
		public virtual IFCLengthMeasure? ElevationOfTerrain { get; set; }
		public virtual IFCPostalAddress? BuildingAddress { get; set; }
		public IFCBuilding() : base()
		{
		}
		public IFCBuilding(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCLabel? LongName, IFCElementCompositionEnum? CompositionType, IFCLengthMeasure? ElevationOfRefHeight, IFCLengthMeasure? ElevationOfTerrain, IFCPostalAddress? BuildingAddress) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.ElevationOfRefHeight = ElevationOfRefHeight;
			this.ElevationOfTerrain = ElevationOfTerrain;
			this.BuildingAddress = BuildingAddress;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"LongName", LongName},
				{"CompositionType", CompositionType},
				{"ElevationOfRefHeight", ElevationOfRefHeight},
				{"ElevationOfTerrain", ElevationOfTerrain},
				{"BuildingAddress", BuildingAddress}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"ReferencesElements", ReferencesElements},
				{"ServicedBySystems", ServicedBySystems},
				{"ContainsElements", ContainsElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCLengthMeasure? _ElevationOfRefHeight
		{
			get
			{
				return ElevationOfRefHeight;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					ElevationOfRefHeight = val;
				}
				else if(value == null)
				{
					ElevationOfRefHeight = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _ElevationOfTerrain
		{
			get
			{
				return ElevationOfTerrain;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					ElevationOfTerrain = val;
				}
				else if(value == null)
				{
					ElevationOfTerrain = null;
				}
			}
		}
		public virtual Global.IFCPostalAddress? _BuildingAddress
		{
			get
			{
				return BuildingAddress;
			}
			set
			{
				if(value is IFCPostalAddress val)
				{
					BuildingAddress = val;
				}
				else if(value == null)
				{
					BuildingAddress = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBeam
	/// ,IfcBuildingElementComponent
	/// ,IfcBuildingElementProxy
	/// ,IfcColumn
	/// ,IfcCovering
	/// ,IfcCurtainWall
	/// ,IfcDoor
	/// ,IfcFooting
	/// ,IfcMember
	/// ,IfcPile
	/// ,IfcPlate
	/// ,IfcRailing
	/// ,IfcRamp
	/// ,IfcRampFlight
	/// ,IfcRoof
	/// ,IfcSlab
	/// ,IfcStair
	/// ,IfcStairFlight
	/// ,IfcWall
	/// ,IfcWindow))
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCBuildingElement : IFCElement, Global.IFCBuildingElement
	{
		public IFCBuildingElement() : base()
		{
		}
		public IFCBuildingElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementComponent
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuildingElementPart
	/// ,IfcReinforcingElement))
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCBuildingElementComponent : IFCBuildingElement, Global.IFCBuildingElementComponent
	{
		public IFCBuildingElementComponent() : base()
		{
		}
		public IFCBuildingElementComponent(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementPart
	/// SUBTYPE OF (IfcBuildingElementComponent);
	/// END_ENTITY;
	/// <summary>
	public class IFCBuildingElementPart : IFCBuildingElementComponent, Global.IFCBuildingElementPart
	{
		public IFCBuildingElementPart() : base()
		{
		}
		public IFCBuildingElementPart(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementProxy
	/// SUBTYPE OF (IfcBuildingElement);
	/// CompositionType : OPTIONAL IfcElementCompositionEnum;
	/// WHERE
	/// WR1 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IFCBuildingElementProxy : IFCBuildingElement, Global.IFCBuildingElementProxy
	{
		public virtual IFCElementCompositionEnum? CompositionType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCBuildingElementProxy() : base()
		{
		}
		public IFCBuildingElementProxy(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCElementCompositionEnum? CompositionType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.CompositionType = CompositionType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"CompositionType", CompositionType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCElementCompositionEnum? _CompositionType
		{
			get
			{
				return CompositionType;
			}
			set
			{
				if(value is IFCElementCompositionEnum val)
				{
					CompositionType = val;
				}
				else if(value == null)
				{
					CompositionType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementProxyType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcBuildingElementProxyTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCBuildingElementProxyType : IFCBuildingElementType, Global.IFCBuildingElementProxyType
	{
		public virtual IFCBuildingElementProxyTypeEnum? PredefinedType { get; set; }
		public IFCBuildingElementProxyType() : base()
		{
		}
		public IFCBuildingElementProxyType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCBuildingElementProxyTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCBuildingElementProxyTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCBuildingElementProxyTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBeamType
	/// ,IfcBuildingElementProxyType
	/// ,IfcColumnType
	/// ,IfcCoveringType
	/// ,IfcCurtainWallType
	/// ,IfcMemberType
	/// ,IfcPlateType
	/// ,IfcRailingType
	/// ,IfcRampFlightType
	/// ,IfcSlabType
	/// ,IfcStairFlightType
	/// ,IfcWallType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCBuildingElementType : IFCElementType, Global.IFCBuildingElementType
	{
		public IFCBuildingElementType() : base()
		{
		}
		public IFCBuildingElementType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcBuildingStorey
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// Elevation : OPTIONAL IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCBuildingStorey : IFCSpatialStructureElement, Global.IFCBuildingStorey
	{
		public virtual IFCLengthMeasure? Elevation { get; set; }
		public IFCBuildingStorey() : base()
		{
		}
		public IFCBuildingStorey(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCLabel? LongName, IFCElementCompositionEnum? CompositionType, IFCLengthMeasure? Elevation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.Elevation = Elevation;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"LongName", LongName},
				{"CompositionType", CompositionType},
				{"Elevation", Elevation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"ReferencesElements", ReferencesElements},
				{"ServicedBySystems", ServicedBySystems},
				{"ContainsElements", ContainsElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCLengthMeasure? _Elevation
		{
			get
			{
				return Elevation;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					Elevation = val;
				}
				else if(value == null)
				{
					Elevation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// Width : IfcPositiveLengthMeasure;
	/// WallThickness : IfcPositiveLengthMeasure;
	/// Girth : IfcPositiveLengthMeasure;
	/// InternalFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// CentreOfGravityInX : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR1 : Girth < (Depth / 2.);
	/// WR2 : NOT(EXISTS(InternalFilletRadius)) OR
	/// ((InternalFilletRadius <= Width/2.) AND (InternalFilletRadius <= Depth/2.));
	/// WR3 : (WallThickness < Width/2.) AND (WallThickness < Depth/2.);
	/// END_ENTITY;
	/// <summary>
	public class IFCCShapeProfileDef : IFCParameterizedProfileDef, Global.IFCCShapeProfileDef
	{
		public virtual IFCPositiveLengthMeasure? Depth { get; set; }
		public virtual IFCPositiveLengthMeasure? Width { get; set; }
		public virtual IFCPositiveLengthMeasure? WallThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? Girth { get; set; }
		public virtual IFCPositiveLengthMeasure? InternalFilletRadius { get; set; }
		public virtual IFCPositiveLengthMeasure? CentreOfGravityInX { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCCShapeProfileDef() : base()
		{
		}
		public IFCCShapeProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? Depth, IFCPositiveLengthMeasure? Width, IFCPositiveLengthMeasure? WallThickness, IFCPositiveLengthMeasure? Girth, IFCPositiveLengthMeasure? InternalFilletRadius, IFCPositiveLengthMeasure? CentreOfGravityInX) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.Width = Width;
			this.WallThickness = WallThickness;
			this.Girth = Girth;
			this.InternalFilletRadius = InternalFilletRadius;
			this.CentreOfGravityInX = CentreOfGravityInX;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"Depth", Depth},
				{"Width", Width},
				{"WallThickness", WallThickness},
				{"Girth", Girth},
				{"InternalFilletRadius", InternalFilletRadius},
				{"CentreOfGravityInX", CentreOfGravityInX}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Width
		{
			get
			{
				return Width;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Width = val;
				}
				else if(value == null)
				{
					Width = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _WallThickness
		{
			get
			{
				return WallThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					WallThickness = val;
				}
				else if(value == null)
				{
					WallThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Girth
		{
			get
			{
				return Girth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Girth = val;
				}
				else if(value == null)
				{
					Girth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _InternalFilletRadius
		{
			get
			{
				return InternalFilletRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					InternalFilletRadius = val;
				}
				else if(value == null)
				{
					InternalFilletRadius = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _CentreOfGravityInX
		{
			get
			{
				return CentreOfGravityInX;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					CentreOfGravityInX = val;
				}
				else if(value == null)
				{
					CentreOfGravityInX = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCableCarrierFittingType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcCableCarrierFittingTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCableCarrierFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCableCarrierFittingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCCableCarrierFittingType : IFCFlowFittingType, Global.IFCCableCarrierFittingType
	{
		public virtual IFCCableCarrierFittingTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCCableCarrierFittingType() : base()
		{
		}
		public IFCCableCarrierFittingType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCCableCarrierFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCCableCarrierFittingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCableCarrierFittingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCableCarrierSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcCableCarrierSegmentTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCCableCarrierSegmentType : IFCFlowSegmentType, Global.IFCCableCarrierSegmentType
	{
		public virtual IFCCableCarrierSegmentTypeEnum? PredefinedType { get; set; }
		public IFCCableCarrierSegmentType() : base()
		{
		}
		public IFCCableCarrierSegmentType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCCableCarrierSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCCableCarrierSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCableCarrierSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCableSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcCableSegmentTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCCableSegmentType : IFCFlowSegmentType, Global.IFCCableSegmentType
	{
		public virtual IFCCableSegmentTypeEnum? PredefinedType { get; set; }
		public IFCCableSegmentType() : base()
		{
		}
		public IFCCableSegmentType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCCableSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCCableSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCableSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCalendarDate;
	/// DayComponent : IfcDayInMonthNumber;
	/// MonthComponent : IfcMonthInYearNumber;
	/// YearComponent : IfcYearNumber;
	/// WHERE
	/// WR21 : IfcValidCalendarDate (SELF);
	/// END_ENTITY;
	/// <summary>
	public class IFCCalendarDate : IFC_ClassEntity, IFCDateTimeSelect, IFCObjectReferenceSelect, Global.IFCCalendarDate
	{
		public virtual IFCDayInMonthNumber? DayComponent { get; set; }
		public virtual IFCMonthInYearNumber? MonthComponent { get; set; }
		public virtual IFCYearNumber? YearComponent { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public IFCCalendarDate() : base()
		{
		}
		public IFCCalendarDate(IFCDayInMonthNumber? DayComponent, IFCMonthInYearNumber? MonthComponent, IFCYearNumber? YearComponent) : base ()
		{
			this.DayComponent = DayComponent;
			this.MonthComponent = MonthComponent;
			this.YearComponent = YearComponent;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"DayComponent", DayComponent},
				{"MonthComponent", MonthComponent},
				{"YearComponent", YearComponent}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCDayInMonthNumber? _DayComponent
		{
			get
			{
				return DayComponent;
			}
			set
			{
				if(value is IFCDayInMonthNumber val)
				{
					DayComponent = val;
				}
				else if(value == null)
				{
					DayComponent = null;
				}
			}
		}
		public virtual Global.IFCMonthInYearNumber? _MonthComponent
		{
			get
			{
				return MonthComponent;
			}
			set
			{
				if(value is IFCMonthInYearNumber val)
				{
					MonthComponent = val;
				}
				else if(value == null)
				{
					MonthComponent = null;
				}
			}
		}
		public virtual Global.IFCYearNumber? _YearComponent
		{
			get
			{
				return YearComponent;
			}
			set
			{
				if(value is IFCYearNumber val)
				{
					YearComponent = val;
				}
				else if(value == null)
				{
					YearComponent = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianPoint
	/// SUBTYPE OF (IfcPoint);
	/// Coordinates : LIST [1:3] OF IfcLengthMeasure;
	/// DERIVE
	/// Dim : IfcDimensionCount := HIINDEX(Coordinates);
	/// WHERE
	/// WR1 : HIINDEX(Coordinates) >= 2;
	/// END_ENTITY;
	/// <summary>
	public class IFCCartesianPoint : IFCPoint, IFCTrimmingSelect, Global.IFCCartesianPoint
	{
		public virtual IFC_Attributes<IFCLengthMeasure>? Coordinates { get; set; }
		public override IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCCartesianPoint.Dim
				// HIINDEX(Coordinates);
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCCartesianPoint() : base()
		{
		}
		public IFCCartesianPoint(IFC_Attributes<IFCLengthMeasure>? Coordinates) : base ()
		{
			this.Coordinates = Coordinates;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Coordinates", Coordinates}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCLengthMeasure>? _Coordinates
		{
			get
			{
				if(Coordinates != null)
				{
					IFC_Attributes<Global.IFCLengthMeasure>? items = new IFC_Attributes<Global.IFCLengthMeasure>();
					foreach (IFCLengthMeasure item in Coordinates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Coordinates = null;
				}
				else
				{
					Coordinates = new IFC_Attributes<IFCLengthMeasure>();
					foreach(var val in value)
					{
						if(val is IFCLengthMeasure v)
						{
							Coordinates.Add(v);
						}
					}
				}
			}
		}
		public override Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCartesianTransformationOperator2D
	/// ,IfcCartesianTransformationOperator3D))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Axis1 : OPTIONAL IfcDirection;
	/// Axis2 : OPTIONAL IfcDirection;
	/// LocalOrigin : IfcCartesianPoint;
	/// Scale : OPTIONAL REAL;
	/// DERIVE
	/// Scl : REAL := NVL(Scale, 1.0);
	/// Dim : IfcDimensionCount := LocalOrigin.Dim;
	/// WHERE
	/// WR1 : Scl > 0.0;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCCartesianTransformationOperator : IFCGeometricRepresentationItem, Global.IFCCartesianTransformationOperator
	{
		public virtual IFCDirection? Axis1 { get; set; }
		public virtual IFCDirection? Axis2 { get; set; }
		public virtual IFCCartesianPoint? LocalOrigin { get; set; }
		public virtual REAL? Scale { get; set; }
		public virtual REAL? Scl
		{
			get
			{
				//MANUAL : IFC2x3.IFCCartesianTransformationOperator.Scl
				// NVL(Scale, 1.0);
				return null;
				//END_MANUAL
			}
		}
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCCartesianTransformationOperator.Dim
				// LocalOrigin.Dim;
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCCartesianTransformationOperator() : base()
		{
		}
		public IFCCartesianTransformationOperator(IFCDirection? Axis1, IFCDirection? Axis2, IFCCartesianPoint? LocalOrigin, REAL? Scale) : base ()
		{
			this.Axis1 = Axis1;
			this.Axis2 = Axis2;
			this.LocalOrigin = LocalOrigin;
			this.Scale = Scale;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Axis1", Axis1},
				{"Axis2", Axis2},
				{"LocalOrigin", LocalOrigin},
				{"Scale", Scale}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Scl", Scl},
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCDirection? _Axis1
		{
			get
			{
				return Axis1;
			}
			set
			{
				if(value is IFCDirection val)
				{
					Axis1 = val;
				}
				else if(value == null)
				{
					Axis1 = null;
				}
			}
		}
		public virtual Global.IFCDirection? _Axis2
		{
			get
			{
				return Axis2;
			}
			set
			{
				if(value is IFCDirection val)
				{
					Axis2 = val;
				}
				else if(value == null)
				{
					Axis2 = null;
				}
			}
		}
		public virtual Global.IFCCartesianPoint? _LocalOrigin
		{
			get
			{
				return LocalOrigin;
			}
			set
			{
				if(value is IFCCartesianPoint val)
				{
					LocalOrigin = val;
				}
				else if(value == null)
				{
					LocalOrigin = null;
				}
			}
		}
		public virtual REAL? _Scale
		{
			get
			{
				return Scale;
			}
			set
			{
				if(value is REAL val)
				{
					Scale = val;
				}
				else if(value == null)
				{
					Scale = null;
				}
			}
		}
		public virtual REAL? _Scl
		{
			get
			{
				return Scl;
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator2D
	/// SUPERTYPE OF (ONEOF
	/// (IfcCartesianTransformationOperator2DnonUniform))
	/// SUBTYPE OF (IfcCartesianTransformationOperator);
	/// DERIVE
	/// U : LIST [2:2] OF IfcDirection := IfcBaseAxis(2,SELF\IfcCartesianTransformationOperator.Axis1,
	/// SELF\IfcCartesianTransformationOperator.Axis2,?);
	/// WHERE
	/// WR1 : SELF\IfcCartesianTransformationOperator.Dim = 2;
	/// WR2 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis1)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 2);
	/// WR3 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis2)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 2);
	/// END_ENTITY;
	/// <summary>
	public class IFCCartesianTransformationOperator2D : IFCCartesianTransformationOperator, Global.IFCCartesianTransformationOperator2D
	{
		public virtual IFC_Attributes<IFCDirection>? U
		{
			get
			{
				//MANUAL : IFC2x3.IFCCartesianTransformationOperator2D.U
				// IfcBaseAxis(2,SELF\IfcCartesianTransformationOperator.Axis1,
				return null;
				//END_MANUAL
			}
		}
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCCartesianTransformationOperator2D() : base()
		{
		}
		public IFCCartesianTransformationOperator2D(IFCDirection? Axis1, IFCDirection? Axis2, IFCCartesianPoint? LocalOrigin, REAL? Scale) : base (Axis1, Axis2, LocalOrigin, Scale)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Axis1", Axis1},
				{"Axis2", Axis2},
				{"LocalOrigin", LocalOrigin},
				{"Scale", Scale}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Scl", Scl},
				{"Dim", Dim},
				{"U", U}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual IFC_Attributes<Global.IFCDirection>? _U
		{
			get
			{
				if(U != null)
				{
					IFC_Attributes<Global.IFCDirection>? items = new IFC_Attributes<Global.IFCDirection>();
					foreach (IFCDirection item in U)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator2DnonUniform
	/// SUBTYPE OF (IfcCartesianTransformationOperator2D);
	/// Scale2 : OPTIONAL REAL;
	/// DERIVE
	/// Scl2 : REAL := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
	/// WHERE
	/// WR1 : Scl2 > 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IFCCartesianTransformationOperator2DnonUniform : IFCCartesianTransformationOperator2D, Global.IFCCartesianTransformationOperator2DnonUniform
	{
		public virtual REAL? Scale2 { get; set; }
		public virtual REAL? Scl2
		{
			get
			{
				//MANUAL : IFC2x3.IFCCartesianTransformationOperator2DnonUniform.Scl2
				// NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
				return null;
				//END_MANUAL
			}
		}
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCCartesianTransformationOperator2DnonUniform() : base()
		{
		}
		public IFCCartesianTransformationOperator2DnonUniform(IFCDirection? Axis1, IFCDirection? Axis2, IFCCartesianPoint? LocalOrigin, REAL? Scale, REAL? Scale2) : base (Axis1, Axis2, LocalOrigin, Scale)
		{
			this.Scale2 = Scale2;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Axis1", Axis1},
				{"Axis2", Axis2},
				{"LocalOrigin", LocalOrigin},
				{"Scale", Scale},
				{"Scale2", Scale2}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Scl", Scl},
				{"Dim", Dim},
				{"U", U},
				{"Scl2", Scl2}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3},
				{"is_WR1", is_WR1}
			};
		}
		public virtual REAL? _Scale2
		{
			get
			{
				return Scale2;
			}
			set
			{
				if(value is REAL val)
				{
					Scale2 = val;
				}
				else if(value == null)
				{
					Scale2 = null;
				}
			}
		}
		public virtual REAL? _Scl2
		{
			get
			{
				return Scl2;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator3D
	/// SUPERTYPE OF (ONEOF
	/// (IfcCartesianTransformationOperator3DnonUniform))
	/// SUBTYPE OF (IfcCartesianTransformationOperator);
	/// Axis3 : OPTIONAL IfcDirection;
	/// DERIVE
	/// U : LIST [3:3] OF IfcDirection := IfcBaseAxis(3,SELF\IfcCartesianTransformationOperator.Axis1,
	/// SELF\IfcCartesianTransformationOperator.Axis2,Axis3);
	/// WHERE
	/// WR1 : SELF\IfcCartesianTransformationOperator.Dim = 3;
	/// WR2 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis1)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 3);
	/// WR3 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis2)) OR
	/// (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 3);
	/// WR4 : NOT(EXISTS(Axis3)) OR (Axis3.Dim = 3);
	/// END_ENTITY;
	/// <summary>
	public class IFCCartesianTransformationOperator3D : IFCCartesianTransformationOperator, Global.IFCCartesianTransformationOperator3D
	{
		public virtual IFCDirection? Axis3 { get; set; }
		public virtual IFC_Attributes<IFCDirection>? U
		{
			get
			{
				//MANUAL : IFC2x3.IFCCartesianTransformationOperator3D.U
				// IfcBaseAxis(3,SELF\IfcCartesianTransformationOperator.Axis1,
				return null;
				//END_MANUAL
			}
		}
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR4
		{
			get
			{
				return true;
			}
		}
		public IFCCartesianTransformationOperator3D() : base()
		{
		}
		public IFCCartesianTransformationOperator3D(IFCDirection? Axis1, IFCDirection? Axis2, IFCCartesianPoint? LocalOrigin, REAL? Scale, IFCDirection? Axis3) : base (Axis1, Axis2, LocalOrigin, Scale)
		{
			this.Axis3 = Axis3;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Axis1", Axis1},
				{"Axis2", Axis2},
				{"LocalOrigin", LocalOrigin},
				{"Scale", Scale},
				{"Axis3", Axis3}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Scl", Scl},
				{"Dim", Dim},
				{"U", U}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3},
				{"is_WR4", is_WR4}
			};
		}
		public virtual Global.IFCDirection? _Axis3
		{
			get
			{
				return Axis3;
			}
			set
			{
				if(value is IFCDirection val)
				{
					Axis3 = val;
				}
				else if(value == null)
				{
					Axis3 = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCDirection>? _U
		{
			get
			{
				if(U != null)
				{
					IFC_Attributes<Global.IFCDirection>? items = new IFC_Attributes<Global.IFCDirection>();
					foreach (IFCDirection item in U)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCartesianTransformationOperator3DnonUniform
	/// SUBTYPE OF (IfcCartesianTransformationOperator3D);
	/// Scale2 : OPTIONAL REAL;
	/// Scale3 : OPTIONAL REAL;
	/// DERIVE
	/// Scl2 : REAL := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
	/// Scl3 : REAL := NVL(Scale3, SELF\IfcCartesianTransformationOperator.Scl);
	/// WHERE
	/// WR1 : Scl2 > 0.0;
	/// WR2 : Scl3 > 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IFCCartesianTransformationOperator3DnonUniform : IFCCartesianTransformationOperator3D, Global.IFCCartesianTransformationOperator3DnonUniform
	{
		public virtual REAL? Scale2 { get; set; }
		public virtual REAL? Scale3 { get; set; }
		public virtual REAL? Scl2
		{
			get
			{
				//MANUAL : IFC2x3.IFCCartesianTransformationOperator3DnonUniform.Scl2
				// NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
				return null;
				//END_MANUAL
			}
		}
		public virtual REAL? Scl3
		{
			get
			{
				//MANUAL : IFC2x3.IFCCartesianTransformationOperator3DnonUniform.Scl3
				// NVL(Scale3, SELF\IfcCartesianTransformationOperator.Scl);
				return null;
				//END_MANUAL
			}
		}
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public override bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCCartesianTransformationOperator3DnonUniform() : base()
		{
		}
		public IFCCartesianTransformationOperator3DnonUniform(IFCDirection? Axis1, IFCDirection? Axis2, IFCCartesianPoint? LocalOrigin, REAL? Scale, IFCDirection? Axis3, REAL? Scale2, REAL? Scale3) : base (Axis1, Axis2, LocalOrigin, Scale, Axis3)
		{
			this.Scale2 = Scale2;
			this.Scale3 = Scale3;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Axis1", Axis1},
				{"Axis2", Axis2},
				{"LocalOrigin", LocalOrigin},
				{"Scale", Scale},
				{"Axis3", Axis3},
				{"Scale2", Scale2},
				{"Scale3", Scale3}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Scl", Scl},
				{"Dim", Dim},
				{"U", U},
				{"Scl2", Scl2},
				{"Scl3", Scl3}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3},
				{"is_WR4", is_WR4},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual REAL? _Scale2
		{
			get
			{
				return Scale2;
			}
			set
			{
				if(value is REAL val)
				{
					Scale2 = val;
				}
				else if(value == null)
				{
					Scale2 = null;
				}
			}
		}
		public virtual REAL? _Scale3
		{
			get
			{
				return Scale3;
			}
			set
			{
				if(value is REAL val)
				{
					Scale3 = val;
				}
				else if(value == null)
				{
					Scale3 = null;
				}
			}
		}
		public virtual REAL? _Scl2
		{
			get
			{
				return Scl2;
			}
		}
		public virtual REAL? _Scl3
		{
			get
			{
				return Scl3;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCenterLineProfileDef
	/// SUBTYPE OF (IfcArbitraryOpenProfileDef);
	/// Thickness : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCCenterLineProfileDef : IFCArbitraryOpenProfileDef, Global.IFCCenterLineProfileDef
	{
		public virtual IFCPositiveLengthMeasure? Thickness { get; set; }
		public IFCCenterLineProfileDef() : base()
		{
		}
		public IFCCenterLineProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCBoundedCurve? Curve, IFCPositiveLengthMeasure? Thickness) : base (ProfileType, ProfileName, Curve)
		{
			this.Thickness = Thickness;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Curve", Curve},
				{"Thickness", Thickness}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Thickness
		{
			get
			{
				return Thickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Thickness = val;
				}
				else if(value == null)
				{
					Thickness = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcChamferEdgeFeature
	/// SUBTYPE OF (IfcEdgeFeature);
	/// Width : OPTIONAL IfcPositiveLengthMeasure;
	/// Height : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCChamferEdgeFeature : IFCEdgeFeature, Global.IFCChamferEdgeFeature
	{
		public virtual IFCPositiveLengthMeasure? Width { get; set; }
		public virtual IFCPositiveLengthMeasure? Height { get; set; }
		public IFCChamferEdgeFeature() : base()
		{
		}
		public IFCChamferEdgeFeature(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCPositiveLengthMeasure? FeatureLength, IFCPositiveLengthMeasure? Width, IFCPositiveLengthMeasure? Height) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, FeatureLength)
		{
			this.Width = Width;
			this.Height = Height;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"FeatureLength", FeatureLength},
				{"Width", Width},
				{"Height", Height}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"VoidsElements", VoidsElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Width
		{
			get
			{
				return Width;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Width = val;
				}
				else if(value == null)
				{
					Width = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Height
		{
			get
			{
				return Height;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Height = val;
				}
				else if(value == null)
				{
					Height = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcChillerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcChillerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcChillerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcChillerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCChillerType : IFCEnergyConversionDeviceType, Global.IFCChillerType
	{
		public virtual IFCChillerTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCChillerType() : base()
		{
		}
		public IFCChillerType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCChillerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCChillerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCChillerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCircle
	/// SUBTYPE OF (IfcConic);
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCCircle : IFCConic, Global.IFCCircle
	{
		public virtual IFCPositiveLengthMeasure? Radius { get; set; }
		public IFCCircle() : base()
		{
		}
		public IFCCircle(IFCAxis2Placement? Position, IFCPositiveLengthMeasure? Radius) : base (Position)
		{
			this.Radius = Radius;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Position", Position},
				{"Radius", Radius}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCircleHollowProfileDef
	/// SUBTYPE OF (IfcCircleProfileDef);
	/// WallThickness : IfcPositiveLengthMeasure;
	/// WHERE
	/// WR1 : WallThickness < SELF\IfcCircleProfileDef.Radius;
	/// END_ENTITY;
	/// <summary>
	public class IFCCircleHollowProfileDef : IFCCircleProfileDef, Global.IFCCircleHollowProfileDef
	{
		public virtual IFCPositiveLengthMeasure? WallThickness { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCCircleHollowProfileDef() : base()
		{
		}
		public IFCCircleHollowProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? Radius, IFCPositiveLengthMeasure? WallThickness) : base (ProfileType, ProfileName, Position, Radius)
		{
			this.WallThickness = WallThickness;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"Radius", Radius},
				{"WallThickness", WallThickness}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _WallThickness
		{
			get
			{
				return WallThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					WallThickness = val;
				}
				else if(value == null)
				{
					WallThickness = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCircleProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcCircleHollowProfileDef))
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCCircleProfileDef : IFCParameterizedProfileDef, Global.IFCCircleProfileDef
	{
		public virtual IFCPositiveLengthMeasure? Radius { get; set; }
		public IFCCircleProfileDef() : base()
		{
		}
		public IFCCircleProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? Radius) : base (ProfileType, ProfileName, Position)
		{
			this.Radius = Radius;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"Radius", Radius}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClassification;
	/// Source : IfcLabel;
	/// Edition : IfcLabel;
	/// EditionDate : OPTIONAL IfcCalendarDate;
	/// Name : IfcLabel;
	/// INVERSE
	/// Contains : SET [0:?] OF IfcClassificationItem FOR ItemOf;
	/// END_ENTITY;
	/// <summary>
	public class IFCClassification : IFC_ClassEntity, Global.IFCClassification
	{
		public virtual IFCLabel? Source { get; set; }
		public virtual IFCLabel? Edition { get; set; }
		public virtual IFCCalendarDate? EditionDate { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public IFC_Attributes<IFCClassificationItem>? Contains {get{return new IFC_Attributes<IFCClassificationItem>(Model?.GetItems<IFCClassificationItem>().Where(x => x.ItemOf != null && x.ItemOf == this).ToList());}}
		public IFCClassification() : base()
		{
		}
		public IFCClassification(IFCLabel? Source, IFCLabel? Edition, IFCCalendarDate? EditionDate, IFCLabel? Name) : base ()
		{
			this.Source = Source;
			this.Edition = Edition;
			this.EditionDate = EditionDate;
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Source", Source},
				{"Edition", Edition},
				{"EditionDate", EditionDate},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Contains", Contains}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Source
		{
			get
			{
				return Source;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Source = val;
				}
				else if(value == null)
				{
					Source = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Edition
		{
			get
			{
				return Edition;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Edition = val;
				}
				else if(value == null)
				{
					Edition = null;
				}
			}
		}
		public virtual Global.IFCCalendarDate? _EditionDate
		{
			get
			{
				return EditionDate;
			}
			set
			{
				if(value is IFCCalendarDate val)
				{
					EditionDate = val;
				}
				else if(value == null)
				{
					EditionDate = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCClassificationItem>? _Contains
		{
			get
			{
				if(Contains != null)
				{
					IFC_Attributes<Global.IFCClassificationItem>? items = new IFC_Attributes<Global.IFCClassificationItem>();
					foreach (IFCClassificationItem item in Contains)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClassificationItem;
	/// Notation : IfcClassificationNotationFacet;
	/// ItemOf : OPTIONAL IfcClassification;
	/// Title : IfcLabel;
	/// INVERSE
	/// IsClassifiedItemIn : SET [0:1] OF IfcClassificationItemRelationship FOR RelatedItems;
	/// IsClassifyingItemIn : SET [0:1] OF IfcClassificationItemRelationship FOR RelatingItem;
	/// END_ENTITY;
	/// <summary>
	public class IFCClassificationItem : IFC_ClassEntity, Global.IFCClassificationItem
	{
		public virtual IFCClassificationNotationFacet? Notation { get; set; }
		public virtual IFCClassification? ItemOf { get; set; }
		public virtual IFCLabel? Title { get; set; }
		public IFC_Attributes<IFCClassificationItemRelationship>? IsClassifiedItemIn {get{return new IFC_Attributes<IFCClassificationItemRelationship>(Model?.GetItems<IFCClassificationItemRelationship>().Where(x => x.RelatedItems != null && x.RelatedItems.Contains(this)).ToList());}}
		public IFC_Attributes<IFCClassificationItemRelationship>? IsClassifyingItemIn {get{return new IFC_Attributes<IFCClassificationItemRelationship>(Model?.GetItems<IFCClassificationItemRelationship>().Where(x => x.RelatingItem != null && x.RelatingItem == this).ToList());}}
		public IFCClassificationItem() : base()
		{
		}
		public IFCClassificationItem(IFCClassificationNotationFacet? Notation, IFCClassification? ItemOf, IFCLabel? Title) : base ()
		{
			this.Notation = Notation;
			this.ItemOf = ItemOf;
			this.Title = Title;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Notation", Notation},
				{"ItemOf", ItemOf},
				{"Title", Title}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"IsClassifiedItemIn", IsClassifiedItemIn},
				{"IsClassifyingItemIn", IsClassifyingItemIn}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCClassificationNotationFacet? _Notation
		{
			get
			{
				return Notation;
			}
			set
			{
				if(value is IFCClassificationNotationFacet val)
				{
					Notation = val;
				}
				else if(value == null)
				{
					Notation = null;
				}
			}
		}
		public virtual Global.IFCClassification? _ItemOf
		{
			get
			{
				return ItemOf;
			}
			set
			{
				if(value is IFCClassification val)
				{
					ItemOf = val;
				}
				else if(value == null)
				{
					ItemOf = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Title
		{
			get
			{
				return Title;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Title = val;
				}
				else if(value == null)
				{
					Title = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCClassificationItemRelationship>? _IsClassifiedItemIn
		{
			get
			{
				if(IsClassifiedItemIn != null)
				{
					IFC_Attributes<Global.IFCClassificationItemRelationship>? items = new IFC_Attributes<Global.IFCClassificationItemRelationship>();
					foreach (IFCClassificationItemRelationship item in IsClassifiedItemIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCClassificationItemRelationship>? _IsClassifyingItemIn
		{
			get
			{
				if(IsClassifyingItemIn != null)
				{
					IFC_Attributes<Global.IFCClassificationItemRelationship>? items = new IFC_Attributes<Global.IFCClassificationItemRelationship>();
					foreach (IFCClassificationItemRelationship item in IsClassifyingItemIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClassificationItemRelationship;
	/// RelatingItem : IfcClassificationItem;
	/// RelatedItems : SET [1:?] OF IfcClassificationItem;
	/// END_ENTITY;
	/// <summary>
	public class IFCClassificationItemRelationship : IFC_ClassEntity, Global.IFCClassificationItemRelationship
	{
		public virtual IFCClassificationItem? RelatingItem { get; set; }
		public virtual IFC_Attributes<IFCClassificationItem>? RelatedItems { get; set; }
		public IFCClassificationItemRelationship() : base()
		{
		}
		public IFCClassificationItemRelationship(IFCClassificationItem? RelatingItem, IFC_Attributes<IFCClassificationItem>? RelatedItems) : base ()
		{
			this.RelatingItem = RelatingItem;
			this.RelatedItems = RelatedItems;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RelatingItem", RelatingItem},
				{"RelatedItems", RelatedItems}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCClassificationItem? _RelatingItem
		{
			get
			{
				return RelatingItem;
			}
			set
			{
				if(value is IFCClassificationItem val)
				{
					RelatingItem = val;
				}
				else if(value == null)
				{
					RelatingItem = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCClassificationItem>? _RelatedItems
		{
			get
			{
				if(RelatedItems != null)
				{
					IFC_Attributes<Global.IFCClassificationItem>? items = new IFC_Attributes<Global.IFCClassificationItem>();
					foreach (IFCClassificationItem item in RelatedItems)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedItems = null;
				}
				else
				{
					RelatedItems = new IFC_Attributes<IFCClassificationItem>();
					foreach(var val in value)
					{
						if(val is IFCClassificationItem v)
						{
							RelatedItems.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClassificationNotation;
	/// NotationFacets : SET [1:?] OF IfcClassificationNotationFacet;
	/// END_ENTITY;
	/// <summary>
	public class IFCClassificationNotation : IFC_ClassEntity, IFCClassificationNotationSelect, Global.IFCClassificationNotation
	{
		public virtual IFC_Attributes<IFCClassificationNotationFacet>? NotationFacets { get; set; }
		public IFCClassificationNotation() : base()
		{
		}
		public IFCClassificationNotation(IFC_Attributes<IFCClassificationNotationFacet>? NotationFacets) : base ()
		{
			this.NotationFacets = NotationFacets;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"NotationFacets", NotationFacets}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCClassificationNotationFacet>? _NotationFacets
		{
			get
			{
				if(NotationFacets != null)
				{
					IFC_Attributes<Global.IFCClassificationNotationFacet>? items = new IFC_Attributes<Global.IFCClassificationNotationFacet>();
					foreach (IFCClassificationNotationFacet item in NotationFacets)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					NotationFacets = null;
				}
				else
				{
					NotationFacets = new IFC_Attributes<IFCClassificationNotationFacet>();
					foreach(var val in value)
					{
						if(val is IFCClassificationNotationFacet v)
						{
							NotationFacets.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClassificationNotationFacet;
	/// NotationValue : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IFCClassificationNotationFacet : IFC_ClassEntity, Global.IFCClassificationNotationFacet
	{
		public virtual IFCLabel? NotationValue { get; set; }
		public IFCClassificationNotationFacet() : base()
		{
		}
		public IFCClassificationNotationFacet(IFCLabel? NotationValue) : base ()
		{
			this.NotationValue = NotationValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"NotationValue", NotationValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _NotationValue
		{
			get
			{
				return NotationValue;
			}
			set
			{
				if(value is IFCLabel val)
				{
					NotationValue = val;
				}
				else if(value == null)
				{
					NotationValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClassificationReference
	/// SUBTYPE OF (IfcExternalReference);
	/// ReferencedSource : OPTIONAL IfcClassification;
	/// END_ENTITY;
	/// <summary>
	public class IFCClassificationReference : IFCExternalReference, IFCClassificationNotationSelect, Global.IFCClassificationReference
	{
		public virtual IFCClassification? ReferencedSource { get; set; }
		public IFCClassificationReference() : base()
		{
		}
		public IFCClassificationReference(IFCLabel? Location, IFCIdentifier? ItemReference, IFCLabel? Name, IFCClassification? ReferencedSource) : base (Location, ItemReference, Name)
		{
			this.ReferencedSource = ReferencedSource;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location},
				{"ItemReference", ItemReference},
				{"Name", Name},
				{"ReferencedSource", ReferencedSource}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCClassification? _ReferencedSource
		{
			get
			{
				return ReferencedSource;
			}
			set
			{
				if(value is IFCClassification val)
				{
					ReferencedSource = val;
				}
				else if(value == null)
				{
					ReferencedSource = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcClosedShell
	/// SUBTYPE OF (IfcConnectedFaceSet);
	/// END_ENTITY;
	/// <summary>
	public class IFCClosedShell : IFCConnectedFaceSet, IFCShell, Global.IFCClosedShell
	{
		public IFCClosedShell() : base()
		{
		}
		public IFCClosedShell(IFC_Attributes<IFCFace>? CfsFaces) : base (CfsFaces)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"CfsFaces", CfsFaces}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcCoilType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCoilTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCoilTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoilTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCCoilType : IFCEnergyConversionDeviceType, Global.IFCCoilType
	{
		public virtual IFCCoilTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCCoilType() : base()
		{
		}
		public IFCCoilType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCCoilTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCCoilTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCoilTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcColourRgb
	/// SUBTYPE OF (IfcColourSpecification);
	/// Red : IfcNormalisedRatioMeasure;
	/// Green : IfcNormalisedRatioMeasure;
	/// Blue : IfcNormalisedRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCColourRgb : IFCColourSpecification, IFCColourOrFactor, Global.IFCColourRgb
	{
		public virtual IFCNormalisedRatioMeasure? Red { get; set; }
		public virtual IFCNormalisedRatioMeasure? Green { get; set; }
		public virtual IFCNormalisedRatioMeasure? Blue { get; set; }
		public IFCColourRgb() : base()
		{
		}
		public IFCColourRgb(IFCLabel? Name, IFCNormalisedRatioMeasure? Red, IFCNormalisedRatioMeasure? Green, IFCNormalisedRatioMeasure? Blue) : base (Name)
		{
			this.Red = Red;
			this.Green = Green;
			this.Blue = Blue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Red", Red},
				{"Green", Green},
				{"Blue", Blue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCNormalisedRatioMeasure? _Red
		{
			get
			{
				return Red;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					Red = val;
				}
				else if(value == null)
				{
					Red = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _Green
		{
			get
			{
				return Green;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					Green = val;
				}
				else if(value == null)
				{
					Green = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _Blue
		{
			get
			{
				return Blue;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					Blue = val;
				}
				else if(value == null)
				{
					Blue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcColourSpecification
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcColourRgb));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCColourSpecification : IFC_ClassEntity, IFCColour, Global.IFCColourSpecification
	{
		public virtual IFCLabel? Name { get; set; }
		public IFCColourSpecification() : base()
		{
		}
		public IFCColourSpecification(IFCLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcColumn
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCColumn : IFCBuildingElement, Global.IFCColumn
	{
		public IFCColumn() : base()
		{
		}
		public IFCColumn(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcColumnType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcColumnTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCColumnType : IFCBuildingElementType, Global.IFCColumnType
	{
		public virtual IFCColumnTypeEnum? PredefinedType { get; set; }
		public IFCColumnType() : base()
		{
		}
		public IFCColumnType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCColumnTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCColumnTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCColumnTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcComplexProperty
	/// SUBTYPE OF (IfcProperty);
	/// UsageName : IfcIdentifier;
	/// HasProperties : SET [1:?] OF IfcProperty;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* HasProperties | SELF :=: temp)) = 0;
	/// WR22 : IfcUniquePropertyName(HasProperties);
	/// END_ENTITY;
	/// <summary>
	public class IFCComplexProperty : IFCProperty, Global.IFCComplexProperty
	{
		public virtual IFCIdentifier? UsageName { get; set; }
		public virtual IFC_Attributes<IFCProperty>? HasProperties { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCComplexProperty() : base()
		{
		}
		public IFCComplexProperty(IFCIdentifier? Name, IFCText? Description, IFCIdentifier? UsageName, IFC_Attributes<IFCProperty>? HasProperties) : base (Name, Description)
		{
			this.UsageName = UsageName;
			this.HasProperties = HasProperties;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"UsageName", UsageName},
				{"HasProperties", HasProperties}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PropertyForDependance", PropertyForDependance},
				{"PropertyDependsOn", PropertyDependsOn},
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCIdentifier? _UsageName
		{
			get
			{
				return UsageName;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					UsageName = val;
				}
				else if(value == null)
				{
					UsageName = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCProperty>? _HasProperties
		{
			get
			{
				if(HasProperties != null)
				{
					IFC_Attributes<Global.IFCProperty>? items = new IFC_Attributes<Global.IFCProperty>();
					foreach (IFCProperty item in HasProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasProperties = null;
				}
				else
				{
					HasProperties = new IFC_Attributes<IFCProperty>();
					foreach(var val in value)
					{
						if(val is IFCProperty v)
						{
							HasProperties.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompositeCurve
	/// SUPERTYPE OF (ONEOF
	/// (Ifc2DCompositeCurve))
	/// SUBTYPE OF (IfcBoundedCurve);
	/// Segments : LIST [1:?] OF IfcCompositeCurveSegment;
	/// SelfIntersect : LOGICAL;
	/// DERIVE
	/// NSegments : INTEGER := SIZEOF(Segments);
	/// ClosedCurve : LOGICAL := Segments[NSegments].Transition <> Discontinuous;
	/// WHERE
	/// WR41 : ((NOT ClosedCurve) AND (SIZEOF(QUERY(Temp <* Segments | Temp.Transition = Discontinuous)) = 1)) OR ((ClosedCurve) AND (SIZEOF(QUERY(Temp <* Segments | Temp.Transition = Discontinuous)) = 0));
	/// WR42 : SIZEOF( QUERY( Temp <* Segments | Temp.Dim <> Segments[1].Dim)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCCompositeCurve : IFCBoundedCurve, Global.IFCCompositeCurve
	{
		public virtual IFC_Attributes<IFCCompositeCurveSegment>? Segments { get; set; }
		public virtual LOGICAL? SelfIntersect { get; set; }
		public virtual INTEGER? NSegments
		{
			get
			{
				//MANUAL : IFC2x3.IFCCompositeCurve.NSegments
				// SIZEOF(Segments);
				return null;
				//END_MANUAL
			}
		}
		public virtual LOGICAL? ClosedCurve
		{
			get
			{
				//MANUAL : IFC2x3.IFCCompositeCurve.ClosedCurve
				// Segments[NSegments].Transition <> Discontinuous;
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR42
		{
			get
			{
				return true;
			}
		}
		public IFCCompositeCurve() : base()
		{
		}
		public IFCCompositeCurve(IFC_Attributes<IFCCompositeCurveSegment>? Segments, LOGICAL? SelfIntersect) : base ()
		{
			this.Segments = Segments;
			this.SelfIntersect = SelfIntersect;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Segments", Segments},
				{"SelfIntersect", SelfIntersect}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim},
				{"NSegments", NSegments},
				{"ClosedCurve", ClosedCurve}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41},
				{"is_WR42", is_WR42}
			};
		}
		public virtual IFC_Attributes<Global.IFCCompositeCurveSegment>? _Segments
		{
			get
			{
				if(Segments != null)
				{
					IFC_Attributes<Global.IFCCompositeCurveSegment>? items = new IFC_Attributes<Global.IFCCompositeCurveSegment>();
					foreach (IFCCompositeCurveSegment item in Segments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Segments = null;
				}
				else
				{
					Segments = new IFC_Attributes<IFCCompositeCurveSegment>();
					foreach(var val in value)
					{
						if(val is IFCCompositeCurveSegment v)
						{
							Segments.Add(v);
						}
					}
				}
			}
		}
		public virtual LOGICAL? _SelfIntersect
		{
			get
			{
				return SelfIntersect;
			}
			set
			{
				if(value is LOGICAL val)
				{
					SelfIntersect = val;
				}
				else if(value == null)
				{
					SelfIntersect = null;
				}
			}
		}
		public virtual INTEGER? _NSegments
		{
			get
			{
				return NSegments;
			}
		}
		public virtual LOGICAL? _ClosedCurve
		{
			get
			{
				return ClosedCurve;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompositeCurveSegment
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Transition : IfcTransitionCode;
	/// SameSense : BOOLEAN;
	/// ParentCurve : IfcCurve;
	/// DERIVE
	/// Dim : IfcDimensionCount := ParentCurve.Dim;
	/// INVERSE
	/// UsingCurves : SET [1:?] OF IfcCompositeCurve FOR Segments;
	/// WHERE
	/// WR1 : ('IFC2X3.IFCBOUNDEDCURVE' IN TYPEOF(ParentCurve));
	/// END_ENTITY;
	/// <summary>
	public class IFCCompositeCurveSegment : IFCGeometricRepresentationItem, Global.IFCCompositeCurveSegment
	{
		public virtual IFCTransitionCode? Transition { get; set; }
		public virtual BOOLEAN? SameSense { get; set; }
		public virtual IFCCurve? ParentCurve { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCCompositeCurveSegment.Dim
				// ParentCurve.Dim;
				return null;
				//END_MANUAL
			}
		}
		public IFC_Attributes<IFCCompositeCurve>? UsingCurves {get{return new IFC_Attributes<IFCCompositeCurve>(Model?.GetItems<IFCCompositeCurve>().Where(x => x.Segments != null && x.Segments.Contains(this)).ToList());}}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCCompositeCurveSegment() : base()
		{
		}
		public IFCCompositeCurveSegment(IFCTransitionCode? Transition, BOOLEAN? SameSense, IFCCurve? ParentCurve) : base ()
		{
			this.Transition = Transition;
			this.SameSense = SameSense;
			this.ParentCurve = ParentCurve;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Transition", Transition},
				{"SameSense", SameSense},
				{"ParentCurve", ParentCurve}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem},
				{"UsingCurves", UsingCurves}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCTransitionCode? _Transition
		{
			get
			{
				return Transition;
			}
			set
			{
				if(value is IFCTransitionCode val)
				{
					Transition = val;
				}
				else if(value == null)
				{
					Transition = null;
				}
			}
		}
		public virtual BOOLEAN? _SameSense
		{
			get
			{
				return SameSense;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					SameSense = val;
				}
				else if(value == null)
				{
					SameSense = null;
				}
			}
		}
		public virtual Global.IFCCurve? _ParentCurve
		{
			get
			{
				return ParentCurve;
			}
			set
			{
				if(value is IFCCurve val)
				{
					ParentCurve = val;
				}
				else if(value == null)
				{
					ParentCurve = null;
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
		public virtual IFC_Attributes<Global.IFCCompositeCurve>? _UsingCurves
		{
			get
			{
				if(UsingCurves != null)
				{
					IFC_Attributes<Global.IFCCompositeCurve>? items = new IFC_Attributes<Global.IFCCompositeCurve>();
					foreach (IFCCompositeCurve item in UsingCurves)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompositeProfileDef
	/// SUBTYPE OF (IfcProfileDef);
	/// Profiles : SET [2:?] OF IfcProfileDef;
	/// Label : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(temp <* Profiles | temp.ProfileType <> Profiles[1].ProfileType)) = 0;
	/// WR2 : SIZEOF(QUERY(temp <* Profiles | 'IFC2X3.IFCCOMPOSITEPROFILEDEF' IN TYPEOF(temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCCompositeProfileDef : IFCProfileDef, Global.IFCCompositeProfileDef
	{
		public virtual IFC_Attributes<IFCProfileDef>? Profiles { get; set; }
		public virtual IFCLabel? Label { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCCompositeProfileDef() : base()
		{
		}
		public IFCCompositeProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFC_Attributes<IFCProfileDef>? Profiles, IFCLabel? Label) : base (ProfileType, ProfileName)
		{
			this.Profiles = Profiles;
			this.Label = Label;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Profiles", Profiles},
				{"Label", Label}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual IFC_Attributes<Global.IFCProfileDef>? _Profiles
		{
			get
			{
				if(Profiles != null)
				{
					IFC_Attributes<Global.IFCProfileDef>? items = new IFC_Attributes<Global.IFCProfileDef>();
					foreach (IFCProfileDef item in Profiles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Profiles = null;
				}
				else
				{
					Profiles = new IFC_Attributes<IFCProfileDef>();
					foreach(var val in value)
					{
						if(val is IFCProfileDef v)
						{
							Profiles.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _Label
		{
			get
			{
				return Label;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Label = val;
				}
				else if(value == null)
				{
					Label = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCompressorType
	/// SUBTYPE OF (IfcFlowMovingDeviceType);
	/// PredefinedType : IfcCompressorTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCompressorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCompressorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCCompressorType : IFCFlowMovingDeviceType, Global.IFCCompressorType
	{
		public virtual IFCCompressorTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCCompressorType() : base()
		{
		}
		public IFCCompressorType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCCompressorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCCompressorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCompressorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCondenserType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCondenserTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCondenserTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCondenserTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCCondenserType : IFCEnergyConversionDeviceType, Global.IFCCondenserType
	{
		public virtual IFCCondenserTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCCondenserType() : base()
		{
		}
		public IFCCondenserType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCCondenserTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCCondenserTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCondenserTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCondition
	/// SUBTYPE OF (IfcGroup);
	/// END_ENTITY;
	/// <summary>
	public class IFCCondition : IFCGroup, Global.IFCCondition
	{
		public IFCCondition() : base()
		{
		}
		public IFCCondition(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsGroupedBy", IsGroupedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcConditionCriterion
	/// SUBTYPE OF (IfcControl);
	/// Criterion : IfcConditionCriterionSelect;
	/// CriterionDateTime : IfcDateTimeSelect;
	/// WHERE
	/// WR1 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IFCConditionCriterion : IFCControl, Global.IFCConditionCriterion
	{
		public virtual IFCConditionCriterionSelect? Criterion { get; set; }
		public virtual IFCDateTimeSelect? CriterionDateTime { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCConditionCriterion() : base()
		{
		}
		public IFCConditionCriterion(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCConditionCriterionSelect? Criterion, IFCDateTimeSelect? CriterionDateTime) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.Criterion = Criterion;
			this.CriterionDateTime = CriterionDateTime;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"Criterion", Criterion},
				{"CriterionDateTime", CriterionDateTime}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCConditionCriterionSelect? _Criterion
		{
			get
			{
				return Criterion;
			}
			set
			{
				if(value is IFCConditionCriterionSelect val)
				{
					Criterion = val;
				}
				else if(value == null)
				{
					Criterion = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _CriterionDateTime
		{
			get
			{
				return CriterionDateTime;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					CriterionDateTime = val;
				}
				else if(value == null)
				{
					CriterionDateTime = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConic
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCircle
	/// ,IfcEllipse))
	/// SUBTYPE OF (IfcCurve);
	/// Position : IfcAxis2Placement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCConic : IFCCurve, Global.IFCConic
	{
		public virtual IFCAxis2Placement? Position { get; set; }
		public IFCConic() : base()
		{
		}
		public IFCConic(IFCAxis2Placement? Position) : base ()
		{
			this.Position = Position;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Position", Position}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCAxis2Placement? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IFCAxis2Placement val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectedFaceSet
	/// SUPERTYPE OF (ONEOF
	/// (IfcClosedShell
	/// ,IfcOpenShell))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// CfsFaces : SET [1:?] OF IfcFace;
	/// END_ENTITY;
	/// <summary>
	public class IFCConnectedFaceSet : IFCTopologicalRepresentationItem, Global.IFCConnectedFaceSet
	{
		public virtual IFC_Attributes<IFCFace>? CfsFaces { get; set; }
		public IFCConnectedFaceSet() : base()
		{
		}
		public IFCConnectedFaceSet(IFC_Attributes<IFCFace>? CfsFaces) : base ()
		{
			this.CfsFaces = CfsFaces;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"CfsFaces", CfsFaces}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCFace>? _CfsFaces
		{
			get
			{
				if(CfsFaces != null)
				{
					IFC_Attributes<Global.IFCFace>? items = new IFC_Attributes<Global.IFCFace>();
					foreach (IFCFace item in CfsFaces)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CfsFaces = null;
				}
				else
				{
					CfsFaces = new IFC_Attributes<IFCFace>();
					foreach(var val in value)
					{
						if(val is IFCFace v)
						{
							CfsFaces.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionCurveGeometry
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// CurveOnRelatingElement : IfcCurveOrEdgeCurve;
	/// CurveOnRelatedElement : OPTIONAL IfcCurveOrEdgeCurve;
	/// END_ENTITY;
	/// <summary>
	public class IFCConnectionCurveGeometry : IFCConnectionGeometry, Global.IFCConnectionCurveGeometry
	{
		public virtual IFCCurveOrEdgeCurve? CurveOnRelatingElement { get; set; }
		public virtual IFCCurveOrEdgeCurve? CurveOnRelatedElement { get; set; }
		public IFCConnectionCurveGeometry() : base()
		{
		}
		public IFCConnectionCurveGeometry(IFCCurveOrEdgeCurve? CurveOnRelatingElement, IFCCurveOrEdgeCurve? CurveOnRelatedElement) : base ()
		{
			this.CurveOnRelatingElement = CurveOnRelatingElement;
			this.CurveOnRelatedElement = CurveOnRelatedElement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"CurveOnRelatingElement", CurveOnRelatingElement},
				{"CurveOnRelatedElement", CurveOnRelatedElement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCurveOrEdgeCurve? _CurveOnRelatingElement
		{
			get
			{
				return CurveOnRelatingElement;
			}
			set
			{
				if(value is IFCCurveOrEdgeCurve val)
				{
					CurveOnRelatingElement = val;
				}
				else if(value == null)
				{
					CurveOnRelatingElement = null;
				}
			}
		}
		public virtual Global.IFCCurveOrEdgeCurve? _CurveOnRelatedElement
		{
			get
			{
				return CurveOnRelatedElement;
			}
			set
			{
				if(value is IFCCurveOrEdgeCurve val)
				{
					CurveOnRelatedElement = val;
				}
				else if(value == null)
				{
					CurveOnRelatedElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionGeometry
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConnectionCurveGeometry
	/// ,IfcConnectionPointGeometry
	/// ,IfcConnectionPortGeometry
	/// ,IfcConnectionSurfaceGeometry));
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCConnectionGeometry : IFC_ClassEntity, Global.IFCConnectionGeometry
	{
		public IFCConnectionGeometry() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionPointEccentricity
	/// SUBTYPE OF (IfcConnectionPointGeometry);
	/// EccentricityInX : OPTIONAL IfcLengthMeasure;
	/// EccentricityInY : OPTIONAL IfcLengthMeasure;
	/// EccentricityInZ : OPTIONAL IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCConnectionPointEccentricity : IFCConnectionPointGeometry, Global.IFCConnectionPointEccentricity
	{
		public virtual IFCLengthMeasure? EccentricityInX { get; set; }
		public virtual IFCLengthMeasure? EccentricityInY { get; set; }
		public virtual IFCLengthMeasure? EccentricityInZ { get; set; }
		public IFCConnectionPointEccentricity() : base()
		{
		}
		public IFCConnectionPointEccentricity(IFCPointOrVertexPoint? PointOnRelatingElement, IFCPointOrVertexPoint? PointOnRelatedElement, IFCLengthMeasure? EccentricityInX, IFCLengthMeasure? EccentricityInY, IFCLengthMeasure? EccentricityInZ) : base (PointOnRelatingElement, PointOnRelatedElement)
		{
			this.EccentricityInX = EccentricityInX;
			this.EccentricityInY = EccentricityInY;
			this.EccentricityInZ = EccentricityInZ;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PointOnRelatingElement", PointOnRelatingElement},
				{"PointOnRelatedElement", PointOnRelatedElement},
				{"EccentricityInX", EccentricityInX},
				{"EccentricityInY", EccentricityInY},
				{"EccentricityInZ", EccentricityInZ}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLengthMeasure? _EccentricityInX
		{
			get
			{
				return EccentricityInX;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					EccentricityInX = val;
				}
				else if(value == null)
				{
					EccentricityInX = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _EccentricityInY
		{
			get
			{
				return EccentricityInY;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					EccentricityInY = val;
				}
				else if(value == null)
				{
					EccentricityInY = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _EccentricityInZ
		{
			get
			{
				return EccentricityInZ;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					EccentricityInZ = val;
				}
				else if(value == null)
				{
					EccentricityInZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionPointGeometry
	/// SUPERTYPE OF (ONEOF
	/// (IfcConnectionPointEccentricity))
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// PointOnRelatingElement : IfcPointOrVertexPoint;
	/// PointOnRelatedElement : OPTIONAL IfcPointOrVertexPoint;
	/// END_ENTITY;
	/// <summary>
	public class IFCConnectionPointGeometry : IFCConnectionGeometry, Global.IFCConnectionPointGeometry
	{
		public virtual IFCPointOrVertexPoint? PointOnRelatingElement { get; set; }
		public virtual IFCPointOrVertexPoint? PointOnRelatedElement { get; set; }
		public IFCConnectionPointGeometry() : base()
		{
		}
		public IFCConnectionPointGeometry(IFCPointOrVertexPoint? PointOnRelatingElement, IFCPointOrVertexPoint? PointOnRelatedElement) : base ()
		{
			this.PointOnRelatingElement = PointOnRelatingElement;
			this.PointOnRelatedElement = PointOnRelatedElement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PointOnRelatingElement", PointOnRelatingElement},
				{"PointOnRelatedElement", PointOnRelatedElement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPointOrVertexPoint? _PointOnRelatingElement
		{
			get
			{
				return PointOnRelatingElement;
			}
			set
			{
				if(value is IFCPointOrVertexPoint val)
				{
					PointOnRelatingElement = val;
				}
				else if(value == null)
				{
					PointOnRelatingElement = null;
				}
			}
		}
		public virtual Global.IFCPointOrVertexPoint? _PointOnRelatedElement
		{
			get
			{
				return PointOnRelatedElement;
			}
			set
			{
				if(value is IFCPointOrVertexPoint val)
				{
					PointOnRelatedElement = val;
				}
				else if(value == null)
				{
					PointOnRelatedElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionPortGeometry
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// LocationAtRelatingElement : IfcAxis2Placement;
	/// LocationAtRelatedElement : OPTIONAL IfcAxis2Placement;
	/// ProfileOfPort : IfcProfileDef;
	/// END_ENTITY;
	/// <summary>
	public class IFCConnectionPortGeometry : IFCConnectionGeometry, Global.IFCConnectionPortGeometry
	{
		public virtual IFCAxis2Placement? LocationAtRelatingElement { get; set; }
		public virtual IFCAxis2Placement? LocationAtRelatedElement { get; set; }
		public virtual IFCProfileDef? ProfileOfPort { get; set; }
		public IFCConnectionPortGeometry() : base()
		{
		}
		public IFCConnectionPortGeometry(IFCAxis2Placement? LocationAtRelatingElement, IFCAxis2Placement? LocationAtRelatedElement, IFCProfileDef? ProfileOfPort) : base ()
		{
			this.LocationAtRelatingElement = LocationAtRelatingElement;
			this.LocationAtRelatedElement = LocationAtRelatedElement;
			this.ProfileOfPort = ProfileOfPort;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LocationAtRelatingElement", LocationAtRelatingElement},
				{"LocationAtRelatedElement", LocationAtRelatedElement},
				{"ProfileOfPort", ProfileOfPort}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCAxis2Placement? _LocationAtRelatingElement
		{
			get
			{
				return LocationAtRelatingElement;
			}
			set
			{
				if(value is IFCAxis2Placement val)
				{
					LocationAtRelatingElement = val;
				}
				else if(value == null)
				{
					LocationAtRelatingElement = null;
				}
			}
		}
		public virtual Global.IFCAxis2Placement? _LocationAtRelatedElement
		{
			get
			{
				return LocationAtRelatedElement;
			}
			set
			{
				if(value is IFCAxis2Placement val)
				{
					LocationAtRelatedElement = val;
				}
				else if(value == null)
				{
					LocationAtRelatedElement = null;
				}
			}
		}
		public virtual Global.IFCProfileDef? _ProfileOfPort
		{
			get
			{
				return ProfileOfPort;
			}
			set
			{
				if(value is IFCProfileDef val)
				{
					ProfileOfPort = val;
				}
				else if(value == null)
				{
					ProfileOfPort = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConnectionSurfaceGeometry
	/// SUBTYPE OF (IfcConnectionGeometry);
	/// SurfaceOnRelatingElement : IfcSurfaceOrFaceSurface;
	/// SurfaceOnRelatedElement : OPTIONAL IfcSurfaceOrFaceSurface;
	/// END_ENTITY;
	/// <summary>
	public class IFCConnectionSurfaceGeometry : IFCConnectionGeometry, Global.IFCConnectionSurfaceGeometry
	{
		public virtual IFCSurfaceOrFaceSurface? SurfaceOnRelatingElement { get; set; }
		public virtual IFCSurfaceOrFaceSurface? SurfaceOnRelatedElement { get; set; }
		public IFCConnectionSurfaceGeometry() : base()
		{
		}
		public IFCConnectionSurfaceGeometry(IFCSurfaceOrFaceSurface? SurfaceOnRelatingElement, IFCSurfaceOrFaceSurface? SurfaceOnRelatedElement) : base ()
		{
			this.SurfaceOnRelatingElement = SurfaceOnRelatingElement;
			this.SurfaceOnRelatedElement = SurfaceOnRelatedElement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SurfaceOnRelatingElement", SurfaceOnRelatingElement},
				{"SurfaceOnRelatedElement", SurfaceOnRelatedElement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCSurfaceOrFaceSurface? _SurfaceOnRelatingElement
		{
			get
			{
				return SurfaceOnRelatingElement;
			}
			set
			{
				if(value is IFCSurfaceOrFaceSurface val)
				{
					SurfaceOnRelatingElement = val;
				}
				else if(value == null)
				{
					SurfaceOnRelatingElement = null;
				}
			}
		}
		public virtual Global.IFCSurfaceOrFaceSurface? _SurfaceOnRelatedElement
		{
			get
			{
				return SurfaceOnRelatedElement;
			}
			set
			{
				if(value is IFCSurfaceOrFaceSurface val)
				{
					SurfaceOnRelatedElement = val;
				}
				else if(value == null)
				{
					SurfaceOnRelatedElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstraint
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcMetric
	/// ,IfcObjective));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// ConstraintGrade : IfcConstraintEnum;
	/// ConstraintSource : OPTIONAL IfcLabel;
	/// CreatingActor : OPTIONAL IfcActorSelect;
	/// CreationTime : OPTIONAL IfcDateTimeSelect;
	/// UserDefinedGrade : OPTIONAL IfcLabel;
	/// INVERSE
	/// ClassifiedAs : SET [0:?] OF IfcConstraintClassificationRelationship FOR ClassifiedConstraint;
	/// RelatesConstraints : SET [0:?] OF IfcConstraintRelationship FOR RelatingConstraint;
	/// IsRelatedWith : SET [0:?] OF IfcConstraintRelationship FOR RelatedConstraints;
	/// PropertiesForConstraint : SET [0:?] OF IfcPropertyConstraintRelationship FOR RelatingConstraint;
	/// Aggregates : SET [0:?] OF IfcConstraintAggregationRelationship FOR RelatingConstraint;
	/// IsAggregatedIn : SET [0:?] OF IfcConstraintAggregationRelationship FOR RelatedConstraints;
	/// WHERE
	/// WR11 : (ConstraintGrade <> IfcConstraintEnum.USERDEFINED) OR
	/// ((ConstraintGrade = IfcConstraintEnum.USERDEFINED) AND EXISTS(SELF\IfcConstraint.UserDefinedGrade));
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCConstraint : IFC_ClassEntity, Global.IFCConstraint
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFCConstraintEnum? ConstraintGrade { get; set; }
		public virtual IFCLabel? ConstraintSource { get; set; }
		public virtual IFCActorSelect? CreatingActor { get; set; }
		public virtual IFCDateTimeSelect? CreationTime { get; set; }
		public virtual IFCLabel? UserDefinedGrade { get; set; }
		public IFC_Attributes<IFCConstraintClassificationRelationship>? ClassifiedAs {get{return new IFC_Attributes<IFCConstraintClassificationRelationship>(Model?.GetItems<IFCConstraintClassificationRelationship>().Where(x => x.ClassifiedConstraint != null && x.ClassifiedConstraint == this).ToList());}}
		public IFC_Attributes<IFCConstraintRelationship>? RelatesConstraints {get{return new IFC_Attributes<IFCConstraintRelationship>(Model?.GetItems<IFCConstraintRelationship>().Where(x => x.RelatingConstraint != null && x.RelatingConstraint == this).ToList());}}
		public IFC_Attributes<IFCConstraintRelationship>? IsRelatedWith {get{return new IFC_Attributes<IFCConstraintRelationship>(Model?.GetItems<IFCConstraintRelationship>().Where(x => x.RelatedConstraints != null && x.RelatedConstraints.Contains(this)).ToList());}}
		public IFC_Attributes<IFCPropertyConstraintRelationship>? PropertiesForConstraint {get{return new IFC_Attributes<IFCPropertyConstraintRelationship>(Model?.GetItems<IFCPropertyConstraintRelationship>().Where(x => x.RelatingConstraint != null && x.RelatingConstraint == this).ToList());}}
		public IFC_Attributes<IFCConstraintAggregationRelationship>? Aggregates {get{return new IFC_Attributes<IFCConstraintAggregationRelationship>(Model?.GetItems<IFCConstraintAggregationRelationship>().Where(x => x.RelatingConstraint != null && x.RelatingConstraint == this).ToList());}}
		public IFC_Attributes<IFCConstraintAggregationRelationship>? IsAggregatedIn {get{return new IFC_Attributes<IFCConstraintAggregationRelationship>(Model?.GetItems<IFCConstraintAggregationRelationship>().Where(x => x.RelatedConstraints != null && x.RelatedConstraints.Contains(this)).ToList());}}
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public IFCConstraint() : base()
		{
		}
		public IFCConstraint(IFCLabel? Name, IFCText? Description, IFCConstraintEnum? ConstraintGrade, IFCLabel? ConstraintSource, IFCActorSelect? CreatingActor, IFCDateTimeSelect? CreationTime, IFCLabel? UserDefinedGrade) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.ConstraintGrade = ConstraintGrade;
			this.ConstraintSource = ConstraintSource;
			this.CreatingActor = CreatingActor;
			this.CreationTime = CreationTime;
			this.UserDefinedGrade = UserDefinedGrade;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"ConstraintGrade", ConstraintGrade},
				{"ConstraintSource", ConstraintSource},
				{"CreatingActor", CreatingActor},
				{"CreationTime", CreationTime},
				{"UserDefinedGrade", UserDefinedGrade}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ClassifiedAs", ClassifiedAs},
				{"RelatesConstraints", RelatesConstraints},
				{"IsRelatedWith", IsRelatedWith},
				{"PropertiesForConstraint", PropertiesForConstraint},
				{"Aggregates", Aggregates},
				{"IsAggregatedIn", IsAggregatedIn}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11}
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCConstraintEnum? _ConstraintGrade
		{
			get
			{
				return ConstraintGrade;
			}
			set
			{
				if(value is IFCConstraintEnum val)
				{
					ConstraintGrade = val;
				}
				else if(value == null)
				{
					ConstraintGrade = null;
				}
			}
		}
		public virtual Global.IFCLabel? _ConstraintSource
		{
			get
			{
				return ConstraintSource;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ConstraintSource = val;
				}
				else if(value == null)
				{
					ConstraintSource = null;
				}
			}
		}
		public virtual Global.IFCActorSelect? _CreatingActor
		{
			get
			{
				return CreatingActor;
			}
			set
			{
				if(value is IFCActorSelect val)
				{
					CreatingActor = val;
				}
				else if(value == null)
				{
					CreatingActor = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _CreationTime
		{
			get
			{
				return CreationTime;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					CreationTime = val;
				}
				else if(value == null)
				{
					CreationTime = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedGrade
		{
			get
			{
				return UserDefinedGrade;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedGrade = val;
				}
				else if(value == null)
				{
					UserDefinedGrade = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCConstraintClassificationRelationship>? _ClassifiedAs
		{
			get
			{
				if(ClassifiedAs != null)
				{
					IFC_Attributes<Global.IFCConstraintClassificationRelationship>? items = new IFC_Attributes<Global.IFCConstraintClassificationRelationship>();
					foreach (IFCConstraintClassificationRelationship item in ClassifiedAs)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCConstraintRelationship>? _RelatesConstraints
		{
			get
			{
				if(RelatesConstraints != null)
				{
					IFC_Attributes<Global.IFCConstraintRelationship>? items = new IFC_Attributes<Global.IFCConstraintRelationship>();
					foreach (IFCConstraintRelationship item in RelatesConstraints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCConstraintRelationship>? _IsRelatedWith
		{
			get
			{
				if(IsRelatedWith != null)
				{
					IFC_Attributes<Global.IFCConstraintRelationship>? items = new IFC_Attributes<Global.IFCConstraintRelationship>();
					foreach (IFCConstraintRelationship item in IsRelatedWith)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCPropertyConstraintRelationship>? _PropertiesForConstraint
		{
			get
			{
				if(PropertiesForConstraint != null)
				{
					IFC_Attributes<Global.IFCPropertyConstraintRelationship>? items = new IFC_Attributes<Global.IFCPropertyConstraintRelationship>();
					foreach (IFCPropertyConstraintRelationship item in PropertiesForConstraint)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCConstraintAggregationRelationship>? _Aggregates
		{
			get
			{
				if(Aggregates != null)
				{
					IFC_Attributes<Global.IFCConstraintAggregationRelationship>? items = new IFC_Attributes<Global.IFCConstraintAggregationRelationship>();
					foreach (IFCConstraintAggregationRelationship item in Aggregates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCConstraintAggregationRelationship>? _IsAggregatedIn
		{
			get
			{
				if(IsAggregatedIn != null)
				{
					IFC_Attributes<Global.IFCConstraintAggregationRelationship>? items = new IFC_Attributes<Global.IFCConstraintAggregationRelationship>();
					foreach (IFCConstraintAggregationRelationship item in IsAggregatedIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstraintAggregationRelationship;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// RelatingConstraint : IfcConstraint;
	/// RelatedConstraints : LIST [1:?] OF UNIQUE IfcConstraint;
	/// LogicalAggregator : IfcLogicalOperatorEnum;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(temp <* RelatedConstraints |
	/// temp :=: RelatingConstraint
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCConstraintAggregationRelationship : IFC_ClassEntity, Global.IFCConstraintAggregationRelationship
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFCConstraint? RelatingConstraint { get; set; }
		public virtual IFC_Attributes<IFCConstraint>? RelatedConstraints { get; set; }
		public virtual IFCLogicalOperatorEnum? LogicalAggregator { get; set; }
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_temp
		{
			get
			{
				return true;
			}
		}
		public IFCConstraintAggregationRelationship() : base()
		{
		}
		public IFCConstraintAggregationRelationship(IFCLabel? Name, IFCText? Description, IFCConstraint? RelatingConstraint, IFC_Attributes<IFCConstraint>? RelatedConstraints, IFCLogicalOperatorEnum? LogicalAggregator) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedConstraints = RelatedConstraints;
			this.LogicalAggregator = LogicalAggregator;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"RelatingConstraint", RelatingConstraint},
				{"RelatedConstraints", RelatedConstraints},
				{"LogicalAggregator", LogicalAggregator}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_temp", is_temp}
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCConstraint? _RelatingConstraint
		{
			get
			{
				return RelatingConstraint;
			}
			set
			{
				if(value is IFCConstraint val)
				{
					RelatingConstraint = val;
				}
				else if(value == null)
				{
					RelatingConstraint = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCConstraint>? _RelatedConstraints
		{
			get
			{
				if(RelatedConstraints != null)
				{
					IFC_Attributes<Global.IFCConstraint>? items = new IFC_Attributes<Global.IFCConstraint>();
					foreach (IFCConstraint item in RelatedConstraints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedConstraints = null;
				}
				else
				{
					RelatedConstraints = new IFC_Attributes<IFCConstraint>();
					foreach(var val in value)
					{
						if(val is IFCConstraint v)
						{
							RelatedConstraints.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLogicalOperatorEnum? _LogicalAggregator
		{
			get
			{
				return LogicalAggregator;
			}
			set
			{
				if(value is IFCLogicalOperatorEnum val)
				{
					LogicalAggregator = val;
				}
				else if(value == null)
				{
					LogicalAggregator = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstraintClassificationRelationship;
	/// ClassifiedConstraint : IfcConstraint;
	/// RelatedClassifications : SET [1:?] OF IfcClassificationNotationSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCConstraintClassificationRelationship : IFC_ClassEntity, Global.IFCConstraintClassificationRelationship
	{
		public virtual IFCConstraint? ClassifiedConstraint { get; set; }
		public virtual IFC_Attributes<IFCClassificationNotationSelect>? RelatedClassifications { get; set; }
		public IFCConstraintClassificationRelationship() : base()
		{
		}
		public IFCConstraintClassificationRelationship(IFCConstraint? ClassifiedConstraint, IFC_Attributes<IFCClassificationNotationSelect>? RelatedClassifications) : base ()
		{
			this.ClassifiedConstraint = ClassifiedConstraint;
			this.RelatedClassifications = RelatedClassifications;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ClassifiedConstraint", ClassifiedConstraint},
				{"RelatedClassifications", RelatedClassifications}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCConstraint? _ClassifiedConstraint
		{
			get
			{
				return ClassifiedConstraint;
			}
			set
			{
				if(value is IFCConstraint val)
				{
					ClassifiedConstraint = val;
				}
				else if(value == null)
				{
					ClassifiedConstraint = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCClassificationNotationSelect>? _RelatedClassifications
		{
			get
			{
				if(RelatedClassifications != null)
				{
					IFC_Attributes<Global.IFCClassificationNotationSelect>? items = new IFC_Attributes<Global.IFCClassificationNotationSelect>();
					foreach (IFCClassificationNotationSelect item in RelatedClassifications)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedClassifications = null;
				}
				else
				{
					RelatedClassifications = new IFC_Attributes<IFCClassificationNotationSelect>();
					foreach(var val in value)
					{
						if(val is IFCClassificationNotationSelect v)
						{
							RelatedClassifications.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstraintRelationship;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// RelatingConstraint : IfcConstraint;
	/// RelatedConstraints : SET [1:?] OF IfcConstraint;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(temp <* RelatedConstraints | temp :=: RelatingConstraint )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCConstraintRelationship : IFC_ClassEntity, Global.IFCConstraintRelationship
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFCConstraint? RelatingConstraint { get; set; }
		public virtual IFC_Attributes<IFCConstraint>? RelatedConstraints { get; set; }
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public IFCConstraintRelationship() : base()
		{
		}
		public IFCConstraintRelationship(IFCLabel? Name, IFCText? Description, IFCConstraint? RelatingConstraint, IFC_Attributes<IFCConstraint>? RelatedConstraints) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedConstraints = RelatedConstraints;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"RelatingConstraint", RelatingConstraint},
				{"RelatedConstraints", RelatedConstraints}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11}
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCConstraint? _RelatingConstraint
		{
			get
			{
				return RelatingConstraint;
			}
			set
			{
				if(value is IFCConstraint val)
				{
					RelatingConstraint = val;
				}
				else if(value == null)
				{
					RelatingConstraint = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCConstraint>? _RelatedConstraints
		{
			get
			{
				if(RelatedConstraints != null)
				{
					IFC_Attributes<Global.IFCConstraint>? items = new IFC_Attributes<Global.IFCConstraint>();
					foreach (IFCConstraint item in RelatedConstraints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedConstraints = null;
				}
				else
				{
					RelatedConstraints = new IFC_Attributes<IFCConstraint>();
					foreach(var val in value)
					{
						if(val is IFCConstraint v)
						{
							RelatedConstraints.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionEquipmentResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// END_ENTITY;
	/// <summary>
	public class IFCConstructionEquipmentResource : IFCConstructionResource, Global.IFCConstructionEquipmentResource
	{
		public IFCConstructionEquipmentResource() : base()
		{
		}
		public IFCConstructionEquipmentResource(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? ResourceIdentifier, IFCLabel? ResourceGroup, IFCResourceConsumptionEnum? ResourceConsumption, IFCMeasureWithUnit? BaseQuantity) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ResourceIdentifier", ResourceIdentifier},
				{"ResourceGroup", ResourceGroup},
				{"ResourceConsumption", ResourceConsumption},
				{"BaseQuantity", BaseQuantity}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ResourceOf", ResourceOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionMaterialResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// Suppliers : OPTIONAL SET [1:?] OF IfcActorSelect;
	/// UsageRatio : OPTIONAL IfcRatioMeasure;
	/// WHERE
	/// WR1 : SIZEOF(SELF\IfcResource.ResourceOf) <=1;
	/// WR2 : NOT(EXISTS(SELF\IfcResource.ResourceOf[1])) OR
	/// (SELF\IfcResource.ResourceOf[1].RelatedObjectsType = IfcObjectTypeEnum.PRODUCT);
	/// END_ENTITY;
	/// <summary>
	public class IFCConstructionMaterialResource : IFCConstructionResource, Global.IFCConstructionMaterialResource
	{
		public virtual IFC_Attributes<IFCActorSelect>? Suppliers { get; set; }
		public virtual IFCRatioMeasure? UsageRatio { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCConstructionMaterialResource() : base()
		{
		}
		public IFCConstructionMaterialResource(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? ResourceIdentifier, IFCLabel? ResourceGroup, IFCResourceConsumptionEnum? ResourceConsumption, IFCMeasureWithUnit? BaseQuantity, IFC_Attributes<IFCActorSelect>? Suppliers, IFCRatioMeasure? UsageRatio) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
			this.Suppliers = Suppliers;
			this.UsageRatio = UsageRatio;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ResourceIdentifier", ResourceIdentifier},
				{"ResourceGroup", ResourceGroup},
				{"ResourceConsumption", ResourceConsumption},
				{"BaseQuantity", BaseQuantity},
				{"Suppliers", Suppliers},
				{"UsageRatio", UsageRatio}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ResourceOf", ResourceOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual IFC_Attributes<Global.IFCActorSelect>? _Suppliers
		{
			get
			{
				if(Suppliers != null)
				{
					IFC_Attributes<Global.IFCActorSelect>? items = new IFC_Attributes<Global.IFCActorSelect>();
					foreach (IFCActorSelect item in Suppliers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Suppliers = null;
				}
				else
				{
					Suppliers = new IFC_Attributes<IFCActorSelect>();
					foreach(var val in value)
					{
						if(val is IFCActorSelect v)
						{
							Suppliers.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCRatioMeasure? _UsageRatio
		{
			get
			{
				return UsageRatio;
			}
			set
			{
				if(value is IFCRatioMeasure val)
				{
					UsageRatio = val;
				}
				else if(value == null)
				{
					UsageRatio = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionProductResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// WHERE
	/// WR1 : SIZEOF(SELF\IfcResource.ResourceOf) <=1;
	/// WR2 : NOT(EXISTS(SELF\IfcResource.ResourceOf[1])) OR
	/// (SELF\IfcResource.ResourceOf[1].RelatedObjectsType = IfcObjectTypeEnum.PRODUCT);
	/// END_ENTITY;
	/// <summary>
	public class IFCConstructionProductResource : IFCConstructionResource, Global.IFCConstructionProductResource
	{
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCConstructionProductResource() : base()
		{
		}
		public IFCConstructionProductResource(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? ResourceIdentifier, IFCLabel? ResourceGroup, IFCResourceConsumptionEnum? ResourceConsumption, IFCMeasureWithUnit? BaseQuantity) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ResourceIdentifier", ResourceIdentifier},
				{"ResourceGroup", ResourceGroup},
				{"ResourceConsumption", ResourceConsumption},
				{"BaseQuantity", BaseQuantity}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ResourceOf", ResourceOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcConstructionResource
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConstructionEquipmentResource
	/// ,IfcConstructionMaterialResource
	/// ,IfcConstructionProductResource
	/// ,IfcCrewResource
	/// ,IfcLaborResource
	/// ,IfcSubContractResource))
	/// SUBTYPE OF (IfcResource);
	/// ResourceIdentifier : OPTIONAL IfcIdentifier;
	/// ResourceGroup : OPTIONAL IfcLabel;
	/// ResourceConsumption : OPTIONAL IfcResourceConsumptionEnum;
	/// BaseQuantity : OPTIONAL IfcMeasureWithUnit;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCConstructionResource : IFCResource, Global.IFCConstructionResource
	{
		public virtual IFCIdentifier? ResourceIdentifier { get; set; }
		public virtual IFCLabel? ResourceGroup { get; set; }
		public virtual IFCResourceConsumptionEnum? ResourceConsumption { get; set; }
		public virtual IFCMeasureWithUnit? BaseQuantity { get; set; }
		public IFCConstructionResource() : base()
		{
		}
		public IFCConstructionResource(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? ResourceIdentifier, IFCLabel? ResourceGroup, IFCResourceConsumptionEnum? ResourceConsumption, IFCMeasureWithUnit? BaseQuantity) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ResourceIdentifier = ResourceIdentifier;
			this.ResourceGroup = ResourceGroup;
			this.ResourceConsumption = ResourceConsumption;
			this.BaseQuantity = BaseQuantity;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ResourceIdentifier", ResourceIdentifier},
				{"ResourceGroup", ResourceGroup},
				{"ResourceConsumption", ResourceConsumption},
				{"BaseQuantity", BaseQuantity}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ResourceOf", ResourceOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCIdentifier? _ResourceIdentifier
		{
			get
			{
				return ResourceIdentifier;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					ResourceIdentifier = val;
				}
				else if(value == null)
				{
					ResourceIdentifier = null;
				}
			}
		}
		public virtual Global.IFCLabel? _ResourceGroup
		{
			get
			{
				return ResourceGroup;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ResourceGroup = val;
				}
				else if(value == null)
				{
					ResourceGroup = null;
				}
			}
		}
		public virtual Global.IFCResourceConsumptionEnum? _ResourceConsumption
		{
			get
			{
				return ResourceConsumption;
			}
			set
			{
				if(value is IFCResourceConsumptionEnum val)
				{
					ResourceConsumption = val;
				}
				else if(value == null)
				{
					ResourceConsumption = null;
				}
			}
		}
		public virtual Global.IFCMeasureWithUnit? _BaseQuantity
		{
			get
			{
				return BaseQuantity;
			}
			set
			{
				if(value is IFCMeasureWithUnit val)
				{
					BaseQuantity = val;
				}
				else if(value == null)
				{
					BaseQuantity = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcContextDependentUnit
	/// SUBTYPE OF (IfcNamedUnit);
	/// Name : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IFCContextDependentUnit : IFCNamedUnit, Global.IFCContextDependentUnit
	{
		public virtual IFCLabel? Name { get; set; }
		public IFCContextDependentUnit() : base()
		{
		}
		public IFCContextDependentUnit(IFCDimensionalExponents? Dimensions, IFCUnitEnum? UnitType, IFCLabel? Name) : base (Dimensions, UnitType)
		{
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dimensions", Dimensions},
				{"UnitType", UnitType},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcControl
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcActionRequest
	/// ,IfcConditionCriterion
	/// ,IfcCostItem
	/// ,IfcCostSchedule
	/// ,IfcEquipmentStandard
	/// ,IfcFurnitureStandard
	/// ,IfcPerformanceHistory
	/// ,IfcPermit
	/// ,IfcProjectOrder
	/// ,IfcProjectOrderRecord
	/// ,IfcScheduleTimeControl
	/// ,IfcServiceLife
	/// ,IfcSpaceProgram
	/// ,IfcTimeSeriesSchedule
	/// ,IfcWorkControl))
	/// SUBTYPE OF (IfcObject);
	/// INVERSE
	/// Controls : SET [0:?] OF IfcRelAssignsToControl FOR RelatingControl;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCControl : IFCObject, Global.IFCControl
	{
		public IFC_Attributes<IFCRelAssignsToControl>? Controls {get{return new IFC_Attributes<IFCRelAssignsToControl>(Model?.GetItems<IFCRelAssignsToControl>().Where(x => x.RelatingControl != null && x.RelatingControl == this).ToList());}}
		public IFCControl() : base()
		{
		}
		public IFCControl(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCRelAssignsToControl>? _Controls
		{
			get
			{
				if(Controls != null)
				{
					IFC_Attributes<Global.IFCRelAssignsToControl>? items = new IFC_Attributes<Global.IFCRelAssignsToControl>();
					foreach (IFCRelAssignsToControl item in Controls)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcControllerType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcControllerTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCControllerType : IFCDistributionControlElementType, Global.IFCControllerType
	{
		public virtual IFCControllerTypeEnum? PredefinedType { get; set; }
		public IFCControllerType() : base()
		{
		}
		public IFCControllerType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCControllerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCControllerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCControllerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcConversionBasedUnit
	/// SUBTYPE OF (IfcNamedUnit);
	/// Name : IfcLabel;
	/// ConversionFactor : IfcMeasureWithUnit;
	/// END_ENTITY;
	/// <summary>
	public class IFCConversionBasedUnit : IFCNamedUnit, Global.IFCConversionBasedUnit
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCMeasureWithUnit? ConversionFactor { get; set; }
		public IFCConversionBasedUnit() : base()
		{
		}
		public IFCConversionBasedUnit(IFCDimensionalExponents? Dimensions, IFCUnitEnum? UnitType, IFCLabel? Name, IFCMeasureWithUnit? ConversionFactor) : base (Dimensions, UnitType)
		{
			this.Name = Name;
			this.ConversionFactor = ConversionFactor;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dimensions", Dimensions},
				{"UnitType", UnitType},
				{"Name", Name},
				{"ConversionFactor", ConversionFactor}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCMeasureWithUnit? _ConversionFactor
		{
			get
			{
				return ConversionFactor;
			}
			set
			{
				if(value is IFCMeasureWithUnit val)
				{
					ConversionFactor = val;
				}
				else if(value == null)
				{
					ConversionFactor = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCooledBeamType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCooledBeamTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCooledBeamTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCooledBeamTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCCooledBeamType : IFCEnergyConversionDeviceType, Global.IFCCooledBeamType
	{
		public virtual IFCCooledBeamTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCCooledBeamType() : base()
		{
		}
		public IFCCooledBeamType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCCooledBeamTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCCooledBeamTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCooledBeamTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCoolingTowerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcCoolingTowerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcCoolingTowerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoolingTowerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCCoolingTowerType : IFCEnergyConversionDeviceType, Global.IFCCoolingTowerType
	{
		public virtual IFCCoolingTowerTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCCoolingTowerType() : base()
		{
		}
		public IFCCoolingTowerType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCCoolingTowerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCCoolingTowerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCoolingTowerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCoordinatedUniversalTimeOffset;
	/// HourOffset : IfcHourInDay;
	/// MinuteOffset : OPTIONAL IfcMinuteInHour;
	/// Sense : IfcAheadOrBehind;
	/// END_ENTITY;
	/// <summary>
	public class IFCCoordinatedUniversalTimeOffset : IFC_ClassEntity, Global.IFCCoordinatedUniversalTimeOffset
	{
		public virtual IFCHourInDay? HourOffset { get; set; }
		public virtual IFCMinuteInHour? MinuteOffset { get; set; }
		public virtual IFCAheadOrBehind? Sense { get; set; }
		public IFCCoordinatedUniversalTimeOffset() : base()
		{
		}
		public IFCCoordinatedUniversalTimeOffset(IFCHourInDay? HourOffset, IFCMinuteInHour? MinuteOffset, IFCAheadOrBehind? Sense) : base ()
		{
			this.HourOffset = HourOffset;
			this.MinuteOffset = MinuteOffset;
			this.Sense = Sense;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HourOffset", HourOffset},
				{"MinuteOffset", MinuteOffset},
				{"Sense", Sense}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCHourInDay? _HourOffset
		{
			get
			{
				return HourOffset;
			}
			set
			{
				if(value is IFCHourInDay val)
				{
					HourOffset = val;
				}
				else if(value == null)
				{
					HourOffset = null;
				}
			}
		}
		public virtual Global.IFCMinuteInHour? _MinuteOffset
		{
			get
			{
				return MinuteOffset;
			}
			set
			{
				if(value is IFCMinuteInHour val)
				{
					MinuteOffset = val;
				}
				else if(value == null)
				{
					MinuteOffset = null;
				}
			}
		}
		public virtual Global.IFCAheadOrBehind? _Sense
		{
			get
			{
				return Sense;
			}
			set
			{
				if(value is IFCAheadOrBehind val)
				{
					Sense = val;
				}
				else if(value == null)
				{
					Sense = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCostItem
	/// SUBTYPE OF (IfcControl);
	/// END_ENTITY;
	/// <summary>
	public class IFCCostItem : IFCControl, Global.IFCCostItem
	{
		public IFCCostItem() : base()
		{
		}
		public IFCCostItem(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcCostSchedule
	/// SUBTYPE OF (IfcControl);
	/// SubmittedBy : OPTIONAL IfcActorSelect;
	/// PreparedBy : OPTIONAL IfcActorSelect;
	/// SubmittedOn : OPTIONAL IfcDateTimeSelect;
	/// Status : OPTIONAL IfcLabel;
	/// TargetUsers : OPTIONAL SET [1:?] OF IfcActorSelect;
	/// UpdateDate : OPTIONAL IfcDateTimeSelect;
	/// ID : IfcIdentifier;
	/// PredefinedType : IfcCostScheduleTypeEnum;
	/// UNIQUE
	/// UR2 : ID;
	/// END_ENTITY;
	/// <summary>
	public class IFCCostSchedule : IFCControl, Global.IFCCostSchedule
	{
		public virtual IFCActorSelect? SubmittedBy { get; set; }
		public virtual IFCActorSelect? PreparedBy { get; set; }
		public virtual IFCDateTimeSelect? SubmittedOn { get; set; }
		public virtual IFCLabel? Status { get; set; }
		public virtual IFC_Attributes<IFCActorSelect>? TargetUsers { get; set; }
		public virtual IFCDateTimeSelect? UpdateDate { get; set; }
		public virtual IFCIdentifier? ID { get; set; }
		public virtual IFCCostScheduleTypeEnum? PredefinedType { get; set; }
		public IFCCostSchedule() : base()
		{
		}
		public IFCCostSchedule(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCActorSelect? SubmittedBy, IFCActorSelect? PreparedBy, IFCDateTimeSelect? SubmittedOn, IFCLabel? Status, IFC_Attributes<IFCActorSelect>? TargetUsers, IFCDateTimeSelect? UpdateDate, IFCIdentifier? ID, IFCCostScheduleTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.SubmittedBy = SubmittedBy;
			this.PreparedBy = PreparedBy;
			this.SubmittedOn = SubmittedOn;
			this.Status = Status;
			this.TargetUsers = TargetUsers;
			this.UpdateDate = UpdateDate;
			this.ID = ID;
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"SubmittedBy", SubmittedBy},
				{"PreparedBy", PreparedBy},
				{"SubmittedOn", SubmittedOn},
				{"Status", Status},
				{"TargetUsers", TargetUsers},
				{"UpdateDate", UpdateDate},
				{"ID", ID},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCActorSelect? _SubmittedBy
		{
			get
			{
				return SubmittedBy;
			}
			set
			{
				if(value is IFCActorSelect val)
				{
					SubmittedBy = val;
				}
				else if(value == null)
				{
					SubmittedBy = null;
				}
			}
		}
		public virtual Global.IFCActorSelect? _PreparedBy
		{
			get
			{
				return PreparedBy;
			}
			set
			{
				if(value is IFCActorSelect val)
				{
					PreparedBy = val;
				}
				else if(value == null)
				{
					PreparedBy = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _SubmittedOn
		{
			get
			{
				return SubmittedOn;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					SubmittedOn = val;
				}
				else if(value == null)
				{
					SubmittedOn = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Status
		{
			get
			{
				return Status;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Status = val;
				}
				else if(value == null)
				{
					Status = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCActorSelect>? _TargetUsers
		{
			get
			{
				if(TargetUsers != null)
				{
					IFC_Attributes<Global.IFCActorSelect>? items = new IFC_Attributes<Global.IFCActorSelect>();
					foreach (IFCActorSelect item in TargetUsers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					TargetUsers = null;
				}
				else
				{
					TargetUsers = new IFC_Attributes<IFCActorSelect>();
					foreach(var val in value)
					{
						if(val is IFCActorSelect v)
						{
							TargetUsers.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _UpdateDate
		{
			get
			{
				return UpdateDate;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					UpdateDate = val;
				}
				else if(value == null)
				{
					UpdateDate = null;
				}
			}
		}
		public virtual Global.IFCIdentifier? _ID
		{
			get
			{
				return ID;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					ID = val;
				}
				else if(value == null)
				{
					ID = null;
				}
			}
		}
		public virtual Global.IFCCostScheduleTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCostScheduleTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCostValue
	/// SUBTYPE OF (IfcAppliedValue);
	/// CostType : IfcLabel;
	/// Condition : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IFCCostValue : IFCAppliedValue, IFCMetricValueSelect, Global.IFCCostValue
	{
		public virtual IFCLabel? CostType { get; set; }
		public virtual IFCText? Condition { get; set; }
		public IFCCostValue() : base()
		{
		}
		public IFCCostValue(IFCLabel? Name, IFCText? Description, IFCAppliedValueSelect? AppliedValue, IFCMeasureWithUnit? UnitBasis, IFCDateTimeSelect? ApplicableDate, IFCDateTimeSelect? FixedUntilDate, IFCLabel? CostType, IFCText? Condition) : base (Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate)
		{
			this.CostType = CostType;
			this.Condition = Condition;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"AppliedValue", AppliedValue},
				{"UnitBasis", UnitBasis},
				{"ApplicableDate", ApplicableDate},
				{"FixedUntilDate", FixedUntilDate},
				{"CostType", CostType},
				{"Condition", Condition}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ValuesReferenced", ValuesReferenced},
				{"ValueOfComponents", ValueOfComponents},
				{"IsComponentIn", IsComponentIn}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _CostType
		{
			get
			{
				return CostType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					CostType = val;
				}
				else if(value == null)
				{
					CostType = null;
				}
			}
		}
		public virtual Global.IFCText? _Condition
		{
			get
			{
				return Condition;
			}
			set
			{
				if(value is IFCText val)
				{
					Condition = val;
				}
				else if(value == null)
				{
					Condition = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCovering
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcCoveringTypeEnum;
	/// INVERSE
	/// CoversSpaces : SET [0:1] OF IfcRelCoversSpaces FOR RelatedCoverings;
	/// Covers : SET [0:1] OF IfcRelCoversBldgElements FOR RelatedCoverings;
	/// WHERE
	/// WR61 : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcCoveringTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcCoveringTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IFCCovering : IFCBuildingElement, Global.IFCCovering
	{
		public virtual IFCCoveringTypeEnum? PredefinedType { get; set; }
		public IFC_Attributes<IFCRelCoversSpaces>? CoversSpaces {get{return new IFC_Attributes<IFCRelCoversSpaces>(Model?.GetItems<IFCRelCoversSpaces>().Where(x => x.RelatedCoverings != null && x.RelatedCoverings.Contains(this)).ToList());}}
		public IFC_Attributes<IFCRelCoversBldgElements>? Covers {get{return new IFC_Attributes<IFCRelCoversBldgElements>(Model?.GetItems<IFCRelCoversBldgElements>().Where(x => x.RelatedCoverings != null && x.RelatedCoverings.Contains(this)).ToList());}}
		public virtual bool is_WR61
		{
			get
			{
				return true;
			}
		}
		public IFCCovering() : base()
		{
		}
		public IFCCovering(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCCoveringTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"CoversSpaces", CoversSpaces},
				{"Covers", Covers}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR61", is_WR61}
			};
		}
		public virtual Global.IFCCoveringTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCoveringTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelCoversSpaces>? _CoversSpaces
		{
			get
			{
				if(CoversSpaces != null)
				{
					IFC_Attributes<Global.IFCRelCoversSpaces>? items = new IFC_Attributes<Global.IFCRelCoversSpaces>();
					foreach (IFCRelCoversSpaces item in CoversSpaces)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelCoversBldgElements>? _Covers
		{
			get
			{
				if(Covers != null)
				{
					IFC_Attributes<Global.IFCRelCoversBldgElements>? items = new IFC_Attributes<Global.IFCRelCoversBldgElements>();
					foreach (IFCRelCoversBldgElements item in Covers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCoveringType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcCoveringTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCCoveringType : IFCBuildingElementType, Global.IFCCoveringType
	{
		public virtual IFCCoveringTypeEnum? PredefinedType { get; set; }
		public IFCCoveringType() : base()
		{
		}
		public IFCCoveringType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCCoveringTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCCoveringTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCoveringTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCraneRailAShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// OverallHeight : IfcPositiveLengthMeasure;
	/// BaseWidth2 : IfcPositiveLengthMeasure;
	/// Radius : OPTIONAL IfcPositiveLengthMeasure;
	/// HeadWidth : IfcPositiveLengthMeasure;
	/// HeadDepth2 : IfcPositiveLengthMeasure;
	/// HeadDepth3 : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// BaseWidth4 : IfcPositiveLengthMeasure;
	/// BaseDepth1 : IfcPositiveLengthMeasure;
	/// BaseDepth2 : IfcPositiveLengthMeasure;
	/// BaseDepth3 : IfcPositiveLengthMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCCraneRailAShapeProfileDef : IFCParameterizedProfileDef, Global.IFCCraneRailAShapeProfileDef
	{
		public virtual IFCPositiveLengthMeasure? OverallHeight { get; set; }
		public virtual IFCPositiveLengthMeasure? BaseWidth2 { get; set; }
		public virtual IFCPositiveLengthMeasure? Radius { get; set; }
		public virtual IFCPositiveLengthMeasure? HeadWidth { get; set; }
		public virtual IFCPositiveLengthMeasure? HeadDepth2 { get; set; }
		public virtual IFCPositiveLengthMeasure? HeadDepth3 { get; set; }
		public virtual IFCPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? BaseWidth4 { get; set; }
		public virtual IFCPositiveLengthMeasure? BaseDepth1 { get; set; }
		public virtual IFCPositiveLengthMeasure? BaseDepth2 { get; set; }
		public virtual IFCPositiveLengthMeasure? BaseDepth3 { get; set; }
		public virtual IFCPositiveLengthMeasure? CentreOfGravityInY { get; set; }
		public IFCCraneRailAShapeProfileDef() : base()
		{
		}
		public IFCCraneRailAShapeProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? OverallHeight, IFCPositiveLengthMeasure? BaseWidth2, IFCPositiveLengthMeasure? Radius, IFCPositiveLengthMeasure? HeadWidth, IFCPositiveLengthMeasure? HeadDepth2, IFCPositiveLengthMeasure? HeadDepth3, IFCPositiveLengthMeasure? WebThickness, IFCPositiveLengthMeasure? BaseWidth4, IFCPositiveLengthMeasure? BaseDepth1, IFCPositiveLengthMeasure? BaseDepth2, IFCPositiveLengthMeasure? BaseDepth3, IFCPositiveLengthMeasure? CentreOfGravityInY) : base (ProfileType, ProfileName, Position)
		{
			this.OverallHeight = OverallHeight;
			this.BaseWidth2 = BaseWidth2;
			this.Radius = Radius;
			this.HeadWidth = HeadWidth;
			this.HeadDepth2 = HeadDepth2;
			this.HeadDepth3 = HeadDepth3;
			this.WebThickness = WebThickness;
			this.BaseWidth4 = BaseWidth4;
			this.BaseDepth1 = BaseDepth1;
			this.BaseDepth2 = BaseDepth2;
			this.BaseDepth3 = BaseDepth3;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"OverallHeight", OverallHeight},
				{"BaseWidth2", BaseWidth2},
				{"Radius", Radius},
				{"HeadWidth", HeadWidth},
				{"HeadDepth2", HeadDepth2},
				{"HeadDepth3", HeadDepth3},
				{"WebThickness", WebThickness},
				{"BaseWidth4", BaseWidth4},
				{"BaseDepth1", BaseDepth1},
				{"BaseDepth2", BaseDepth2},
				{"BaseDepth3", BaseDepth3},
				{"CentreOfGravityInY", CentreOfGravityInY}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _OverallHeight
		{
			get
			{
				return OverallHeight;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					OverallHeight = val;
				}
				else if(value == null)
				{
					OverallHeight = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _BaseWidth2
		{
			get
			{
				return BaseWidth2;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BaseWidth2 = val;
				}
				else if(value == null)
				{
					BaseWidth2 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _HeadWidth
		{
			get
			{
				return HeadWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					HeadWidth = val;
				}
				else if(value == null)
				{
					HeadWidth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _HeadDepth2
		{
			get
			{
				return HeadDepth2;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					HeadDepth2 = val;
				}
				else if(value == null)
				{
					HeadDepth2 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _HeadDepth3
		{
			get
			{
				return HeadDepth3;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					HeadDepth3 = val;
				}
				else if(value == null)
				{
					HeadDepth3 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _WebThickness
		{
			get
			{
				return WebThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					WebThickness = val;
				}
				else if(value == null)
				{
					WebThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _BaseWidth4
		{
			get
			{
				return BaseWidth4;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BaseWidth4 = val;
				}
				else if(value == null)
				{
					BaseWidth4 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _BaseDepth1
		{
			get
			{
				return BaseDepth1;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BaseDepth1 = val;
				}
				else if(value == null)
				{
					BaseDepth1 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _BaseDepth2
		{
			get
			{
				return BaseDepth2;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BaseDepth2 = val;
				}
				else if(value == null)
				{
					BaseDepth2 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _BaseDepth3
		{
			get
			{
				return BaseDepth3;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BaseDepth3 = val;
				}
				else if(value == null)
				{
					BaseDepth3 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _CentreOfGravityInY
		{
			get
			{
				return CentreOfGravityInY;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					CentreOfGravityInY = val;
				}
				else if(value == null)
				{
					CentreOfGravityInY = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCraneRailFShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// OverallHeight : IfcPositiveLengthMeasure;
	/// HeadWidth : IfcPositiveLengthMeasure;
	/// Radius : OPTIONAL IfcPositiveLengthMeasure;
	/// HeadDepth2 : IfcPositiveLengthMeasure;
	/// HeadDepth3 : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// BaseDepth1 : IfcPositiveLengthMeasure;
	/// BaseDepth2 : IfcPositiveLengthMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCCraneRailFShapeProfileDef : IFCParameterizedProfileDef, Global.IFCCraneRailFShapeProfileDef
	{
		public virtual IFCPositiveLengthMeasure? OverallHeight { get; set; }
		public virtual IFCPositiveLengthMeasure? HeadWidth { get; set; }
		public virtual IFCPositiveLengthMeasure? Radius { get; set; }
		public virtual IFCPositiveLengthMeasure? HeadDepth2 { get; set; }
		public virtual IFCPositiveLengthMeasure? HeadDepth3 { get; set; }
		public virtual IFCPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? BaseDepth1 { get; set; }
		public virtual IFCPositiveLengthMeasure? BaseDepth2 { get; set; }
		public virtual IFCPositiveLengthMeasure? CentreOfGravityInY { get; set; }
		public IFCCraneRailFShapeProfileDef() : base()
		{
		}
		public IFCCraneRailFShapeProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? OverallHeight, IFCPositiveLengthMeasure? HeadWidth, IFCPositiveLengthMeasure? Radius, IFCPositiveLengthMeasure? HeadDepth2, IFCPositiveLengthMeasure? HeadDepth3, IFCPositiveLengthMeasure? WebThickness, IFCPositiveLengthMeasure? BaseDepth1, IFCPositiveLengthMeasure? BaseDepth2, IFCPositiveLengthMeasure? CentreOfGravityInY) : base (ProfileType, ProfileName, Position)
		{
			this.OverallHeight = OverallHeight;
			this.HeadWidth = HeadWidth;
			this.Radius = Radius;
			this.HeadDepth2 = HeadDepth2;
			this.HeadDepth3 = HeadDepth3;
			this.WebThickness = WebThickness;
			this.BaseDepth1 = BaseDepth1;
			this.BaseDepth2 = BaseDepth2;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"OverallHeight", OverallHeight},
				{"HeadWidth", HeadWidth},
				{"Radius", Radius},
				{"HeadDepth2", HeadDepth2},
				{"HeadDepth3", HeadDepth3},
				{"WebThickness", WebThickness},
				{"BaseDepth1", BaseDepth1},
				{"BaseDepth2", BaseDepth2},
				{"CentreOfGravityInY", CentreOfGravityInY}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _OverallHeight
		{
			get
			{
				return OverallHeight;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					OverallHeight = val;
				}
				else if(value == null)
				{
					OverallHeight = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _HeadWidth
		{
			get
			{
				return HeadWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					HeadWidth = val;
				}
				else if(value == null)
				{
					HeadWidth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _HeadDepth2
		{
			get
			{
				return HeadDepth2;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					HeadDepth2 = val;
				}
				else if(value == null)
				{
					HeadDepth2 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _HeadDepth3
		{
			get
			{
				return HeadDepth3;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					HeadDepth3 = val;
				}
				else if(value == null)
				{
					HeadDepth3 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _WebThickness
		{
			get
			{
				return WebThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					WebThickness = val;
				}
				else if(value == null)
				{
					WebThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _BaseDepth1
		{
			get
			{
				return BaseDepth1;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BaseDepth1 = val;
				}
				else if(value == null)
				{
					BaseDepth1 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _BaseDepth2
		{
			get
			{
				return BaseDepth2;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BaseDepth2 = val;
				}
				else if(value == null)
				{
					BaseDepth2 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _CentreOfGravityInY
		{
			get
			{
				return CentreOfGravityInY;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					CentreOfGravityInY = val;
				}
				else if(value == null)
				{
					CentreOfGravityInY = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCrewResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// END_ENTITY;
	/// <summary>
	public class IFCCrewResource : IFCConstructionResource, Global.IFCCrewResource
	{
		public IFCCrewResource() : base()
		{
		}
		public IFCCrewResource(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? ResourceIdentifier, IFCLabel? ResourceGroup, IFCResourceConsumptionEnum? ResourceConsumption, IFCMeasureWithUnit? BaseQuantity) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ResourceIdentifier", ResourceIdentifier},
				{"ResourceGroup", ResourceGroup},
				{"ResourceConsumption", ResourceConsumption},
				{"BaseQuantity", BaseQuantity}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ResourceOf", ResourceOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcCsgPrimitive3D
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBlock
	/// ,IfcRectangularPyramid
	/// ,IfcRightCircularCone
	/// ,IfcRightCircularCylinder
	/// ,IfcSphere))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Position : IfcAxis2Placement3D;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCCsgPrimitive3D : IFCGeometricRepresentationItem, IFCBooleanOperand, IFCCsgSelect, Global.IFCCsgPrimitive3D
	{
		public virtual IFCAxis2Placement3D? Position { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCCsgPrimitive3D.Dim
				// 3;
				return null;
				//END_MANUAL
			}
		}
		public IFCCsgPrimitive3D() : base()
		{
		}
		public IFCCsgPrimitive3D(IFCAxis2Placement3D? Position) : base ()
		{
			this.Position = Position;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Position", Position}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IFCAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCsgSolid
	/// SUBTYPE OF (IfcSolidModel);
	/// TreeRootExpression : IfcCsgSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCCsgSolid : IFCSolidModel, Global.IFCCsgSolid
	{
		public virtual IFCCsgSelect? TreeRootExpression { get; set; }
		public IFCCsgSolid() : base()
		{
		}
		public IFCCsgSolid(IFCCsgSelect? TreeRootExpression) : base ()
		{
			this.TreeRootExpression = TreeRootExpression;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"TreeRootExpression", TreeRootExpression}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCsgSelect? _TreeRootExpression
		{
			get
			{
				return TreeRootExpression;
			}
			set
			{
				if(value is IFCCsgSelect val)
				{
					TreeRootExpression = val;
				}
				else if(value == null)
				{
					TreeRootExpression = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurrencyRelationship;
	/// RelatingMonetaryUnit : IfcMonetaryUnit;
	/// RelatedMonetaryUnit : IfcMonetaryUnit;
	/// ExchangeRate : IfcPositiveRatioMeasure;
	/// RateDateTime : IfcDateAndTime;
	/// RateSource : OPTIONAL IfcLibraryInformation;
	/// END_ENTITY;
	/// <summary>
	public class IFCCurrencyRelationship : IFC_ClassEntity, Global.IFCCurrencyRelationship
	{
		public virtual IFCMonetaryUnit? RelatingMonetaryUnit { get; set; }
		public virtual IFCMonetaryUnit? RelatedMonetaryUnit { get; set; }
		public virtual IFCPositiveRatioMeasure? ExchangeRate { get; set; }
		public virtual IFCDateAndTime? RateDateTime { get; set; }
		public virtual IFCLibraryInformation? RateSource { get; set; }
		public IFCCurrencyRelationship() : base()
		{
		}
		public IFCCurrencyRelationship(IFCMonetaryUnit? RelatingMonetaryUnit, IFCMonetaryUnit? RelatedMonetaryUnit, IFCPositiveRatioMeasure? ExchangeRate, IFCDateAndTime? RateDateTime, IFCLibraryInformation? RateSource) : base ()
		{
			this.RelatingMonetaryUnit = RelatingMonetaryUnit;
			this.RelatedMonetaryUnit = RelatedMonetaryUnit;
			this.ExchangeRate = ExchangeRate;
			this.RateDateTime = RateDateTime;
			this.RateSource = RateSource;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RelatingMonetaryUnit", RelatingMonetaryUnit},
				{"RelatedMonetaryUnit", RelatedMonetaryUnit},
				{"ExchangeRate", ExchangeRate},
				{"RateDateTime", RateDateTime},
				{"RateSource", RateSource}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCMonetaryUnit? _RelatingMonetaryUnit
		{
			get
			{
				return RelatingMonetaryUnit;
			}
			set
			{
				if(value is IFCMonetaryUnit val)
				{
					RelatingMonetaryUnit = val;
				}
				else if(value == null)
				{
					RelatingMonetaryUnit = null;
				}
			}
		}
		public virtual Global.IFCMonetaryUnit? _RelatedMonetaryUnit
		{
			get
			{
				return RelatedMonetaryUnit;
			}
			set
			{
				if(value is IFCMonetaryUnit val)
				{
					RelatedMonetaryUnit = val;
				}
				else if(value == null)
				{
					RelatedMonetaryUnit = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _ExchangeRate
		{
			get
			{
				return ExchangeRate;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					ExchangeRate = val;
				}
				else if(value == null)
				{
					ExchangeRate = null;
				}
			}
		}
		public virtual Global.IFCDateAndTime? _RateDateTime
		{
			get
			{
				return RateDateTime;
			}
			set
			{
				if(value is IFCDateAndTime val)
				{
					RateDateTime = val;
				}
				else if(value == null)
				{
					RateDateTime = null;
				}
			}
		}
		public virtual Global.IFCLibraryInformation? _RateSource
		{
			get
			{
				return RateSource;
			}
			set
			{
				if(value is IFCLibraryInformation val)
				{
					RateSource = val;
				}
				else if(value == null)
				{
					RateSource = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurtainWall
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCCurtainWall : IFCBuildingElement, Global.IFCCurtainWall
	{
		public IFCCurtainWall() : base()
		{
		}
		public IFCCurtainWall(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcCurtainWallType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcCurtainWallTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCCurtainWallType : IFCBuildingElementType, Global.IFCCurtainWallType
	{
		public virtual IFCCurtainWallTypeEnum? PredefinedType { get; set; }
		public IFCCurtainWallType() : base()
		{
		}
		public IFCCurtainWallType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCCurtainWallTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCCurtainWallTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCCurtainWallTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurve
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBoundedCurve
	/// ,IfcConic
	/// ,IfcLine
	/// ,IfcOffsetCurve2D
	/// ,IfcOffsetCurve3D))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// DERIVE
	/// Dim : IfcDimensionCount := IfcCurveDim(SELF);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCCurve : IFCGeometricRepresentationItem, IFCGeometricSetSelect, Global.IFCCurve
	{
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCCurve.Dim
				// IfcCurveDim(SELF);
				return null;
				//END_MANUAL
			}
		}
		public IFCCurve() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveBoundedPlane
	/// SUBTYPE OF (IfcBoundedSurface);
	/// BasisSurface : IfcPlane;
	/// OuterBoundary : IfcCurve;
	/// InnerBoundaries : SET [0:?] OF IfcCurve;
	/// DERIVE
	/// Dim : IfcDimensionCount := BasisSurface.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IFCCurveBoundedPlane : IFCBoundedSurface, Global.IFCCurveBoundedPlane
	{
		public virtual IFCPlane? BasisSurface { get; set; }
		public virtual IFCCurve? OuterBoundary { get; set; }
		public virtual IFC_Attributes<IFCCurve>? InnerBoundaries { get; set; }
		public override IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCCurveBoundedPlane.Dim
				// BasisSurface.Dim;
				return null;
				//END_MANUAL
			}
		}
		public IFCCurveBoundedPlane() : base()
		{
		}
		public IFCCurveBoundedPlane(IFCPlane? BasisSurface, IFCCurve? OuterBoundary, IFC_Attributes<IFCCurve>? InnerBoundaries) : base ()
		{
			this.BasisSurface = BasisSurface;
			this.OuterBoundary = OuterBoundary;
			this.InnerBoundaries = InnerBoundaries;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"BasisSurface", BasisSurface},
				{"OuterBoundary", OuterBoundary},
				{"InnerBoundaries", InnerBoundaries}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPlane? _BasisSurface
		{
			get
			{
				return BasisSurface;
			}
			set
			{
				if(value is IFCPlane val)
				{
					BasisSurface = val;
				}
				else if(value == null)
				{
					BasisSurface = null;
				}
			}
		}
		public virtual Global.IFCCurve? _OuterBoundary
		{
			get
			{
				return OuterBoundary;
			}
			set
			{
				if(value is IFCCurve val)
				{
					OuterBoundary = val;
				}
				else if(value == null)
				{
					OuterBoundary = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCCurve>? _InnerBoundaries
		{
			get
			{
				if(InnerBoundaries != null)
				{
					IFC_Attributes<Global.IFCCurve>? items = new IFC_Attributes<Global.IFCCurve>();
					foreach (IFCCurve item in InnerBoundaries)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					InnerBoundaries = null;
				}
				else
				{
					InnerBoundaries = new IFC_Attributes<IFCCurve>();
					foreach(var val in value)
					{
						if(val is IFCCurve v)
						{
							InnerBoundaries.Add(v);
						}
					}
				}
			}
		}
		public override Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// CurveFont : OPTIONAL IfcCurveFontOrScaledCurveFontSelect;
	/// CurveWidth : OPTIONAL IfcSizeSelect;
	/// CurveColour : OPTIONAL IfcColour;
	/// WHERE
	/// WR11 : (NOT(EXISTS(CurveWidth))) OR
	/// ('IFC2X3.IFCPOSITIVELENGTHMEASURE' IN TYPEOF(CurveWidth)) OR
	/// (('IFC2X3.IFCDESCRIPTIVEMEASURE' IN TYPEOF(CurveWidth)) AND
	/// (CurveWidth = 'by layer'));
	/// END_ENTITY;
	/// <summary>
	public class IFCCurveStyle : IFCPresentationStyle, IFCPresentationStyleSelect, Global.IFCCurveStyle
	{
		public virtual IFCCurveFontOrScaledCurveFontSelect? CurveFont { get; set; }
		public virtual IFCSizeSelect? CurveWidth { get; set; }
		public virtual IFCColour? CurveColour { get; set; }
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public IFCCurveStyle() : base()
		{
		}
		public IFCCurveStyle(IFCLabel? Name, IFCCurveFontOrScaledCurveFontSelect? CurveFont, IFCSizeSelect? CurveWidth, IFCColour? CurveColour) : base (Name)
		{
			this.CurveFont = CurveFont;
			this.CurveWidth = CurveWidth;
			this.CurveColour = CurveColour;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"CurveFont", CurveFont},
				{"CurveWidth", CurveWidth},
				{"CurveColour", CurveColour}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11}
			};
		}
		public virtual Global.IFCCurveFontOrScaledCurveFontSelect? _CurveFont
		{
			get
			{
				return CurveFont;
			}
			set
			{
				if(value is IFCCurveFontOrScaledCurveFontSelect val)
				{
					CurveFont = val;
				}
				else if(value == null)
				{
					CurveFont = null;
				}
			}
		}
		public virtual Global.IFCSizeSelect? _CurveWidth
		{
			get
			{
				return CurveWidth;
			}
			set
			{
				if(value is IFCSizeSelect val)
				{
					CurveWidth = val;
				}
				else if(value == null)
				{
					CurveWidth = null;
				}
			}
		}
		public virtual Global.IFCColour? _CurveColour
		{
			get
			{
				return CurveColour;
			}
			set
			{
				if(value is IFCColour val)
				{
					CurveColour = val;
				}
				else if(value == null)
				{
					CurveColour = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveStyleFont;
	/// Name : OPTIONAL IfcLabel;
	/// PatternList : LIST [1:?] OF IfcCurveStyleFontPattern;
	/// END_ENTITY;
	/// <summary>
	public class IFCCurveStyleFont : IFC_ClassEntity, IFCCurveStyleFontSelect, Global.IFCCurveStyleFont
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFC_Attributes<IFCCurveStyleFontPattern>? PatternList { get; set; }
		public IFCCurveStyleFont() : base()
		{
		}
		public IFCCurveStyleFont(IFCLabel? Name, IFC_Attributes<IFCCurveStyleFontPattern>? PatternList) : base ()
		{
			this.Name = Name;
			this.PatternList = PatternList;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"PatternList", PatternList}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCCurveStyleFontPattern>? _PatternList
		{
			get
			{
				if(PatternList != null)
				{
					IFC_Attributes<Global.IFCCurveStyleFontPattern>? items = new IFC_Attributes<Global.IFCCurveStyleFontPattern>();
					foreach (IFCCurveStyleFontPattern item in PatternList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					PatternList = null;
				}
				else
				{
					PatternList = new IFC_Attributes<IFCCurveStyleFontPattern>();
					foreach(var val in value)
					{
						if(val is IFCCurveStyleFontPattern v)
						{
							PatternList.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveStyleFontAndScaling;
	/// Name : OPTIONAL IfcLabel;
	/// CurveFont : IfcCurveStyleFontSelect;
	/// CurveFontScaling : IfcPositiveRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCCurveStyleFontAndScaling : IFC_ClassEntity, IFCCurveFontOrScaledCurveFontSelect, Global.IFCCurveStyleFontAndScaling
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCCurveStyleFontSelect? CurveFont { get; set; }
		public virtual IFCPositiveRatioMeasure? CurveFontScaling { get; set; }
		public IFCCurveStyleFontAndScaling() : base()
		{
		}
		public IFCCurveStyleFontAndScaling(IFCLabel? Name, IFCCurveStyleFontSelect? CurveFont, IFCPositiveRatioMeasure? CurveFontScaling) : base ()
		{
			this.Name = Name;
			this.CurveFont = CurveFont;
			this.CurveFontScaling = CurveFontScaling;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"CurveFont", CurveFont},
				{"CurveFontScaling", CurveFontScaling}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCCurveStyleFontSelect? _CurveFont
		{
			get
			{
				return CurveFont;
			}
			set
			{
				if(value is IFCCurveStyleFontSelect val)
				{
					CurveFont = val;
				}
				else if(value == null)
				{
					CurveFont = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _CurveFontScaling
		{
			get
			{
				return CurveFontScaling;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					CurveFontScaling = val;
				}
				else if(value == null)
				{
					CurveFontScaling = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcCurveStyleFontPattern;
	/// VisibleSegmentLength : IfcLengthMeasure;
	/// InvisibleSegmentLength : IfcPositiveLengthMeasure;
	/// WHERE
	/// WR01 : VisibleSegmentLength >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IFCCurveStyleFontPattern : IFC_ClassEntity, Global.IFCCurveStyleFontPattern
	{
		public virtual IFCLengthMeasure? VisibleSegmentLength { get; set; }
		public virtual IFCPositiveLengthMeasure? InvisibleSegmentLength { get; set; }
		public virtual bool is_WR01
		{
			get
			{
				return true;
			}
		}
		public IFCCurveStyleFontPattern() : base()
		{
		}
		public IFCCurveStyleFontPattern(IFCLengthMeasure? VisibleSegmentLength, IFCPositiveLengthMeasure? InvisibleSegmentLength) : base ()
		{
			this.VisibleSegmentLength = VisibleSegmentLength;
			this.InvisibleSegmentLength = InvisibleSegmentLength;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"VisibleSegmentLength", VisibleSegmentLength},
				{"InvisibleSegmentLength", InvisibleSegmentLength}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR01", is_WR01}
			};
		}
		public virtual Global.IFCLengthMeasure? _VisibleSegmentLength
		{
			get
			{
				return VisibleSegmentLength;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					VisibleSegmentLength = val;
				}
				else if(value == null)
				{
					VisibleSegmentLength = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _InvisibleSegmentLength
		{
			get
			{
				return InvisibleSegmentLength;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					InvisibleSegmentLength = val;
				}
				else if(value == null)
				{
					InvisibleSegmentLength = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDamperType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcDamperTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcDamperTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDamperTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCDamperType : IFCFlowControllerType, Global.IFCDamperType
	{
		public virtual IFCDamperTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCDamperType() : base()
		{
		}
		public IFCDamperType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCDamperTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCDamperTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCDamperTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDateAndTime;
	/// DateComponent : IfcCalendarDate;
	/// TimeComponent : IfcLocalTime;
	/// END_ENTITY;
	/// <summary>
	public class IFCDateAndTime : IFC_ClassEntity, IFCDateTimeSelect, IFCObjectReferenceSelect, Global.IFCDateAndTime
	{
		public virtual IFCCalendarDate? DateComponent { get; set; }
		public virtual IFCLocalTime? TimeComponent { get; set; }
		public IFCDateAndTime() : base()
		{
		}
		public IFCDateAndTime(IFCCalendarDate? DateComponent, IFCLocalTime? TimeComponent) : base ()
		{
			this.DateComponent = DateComponent;
			this.TimeComponent = TimeComponent;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"DateComponent", DateComponent},
				{"TimeComponent", TimeComponent}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCalendarDate? _DateComponent
		{
			get
			{
				return DateComponent;
			}
			set
			{
				if(value is IFCCalendarDate val)
				{
					DateComponent = val;
				}
				else if(value == null)
				{
					DateComponent = null;
				}
			}
		}
		public virtual Global.IFCLocalTime? _TimeComponent
		{
			get
			{
				return TimeComponent;
			}
			set
			{
				if(value is IFCLocalTime val)
				{
					TimeComponent = val;
				}
				else if(value == null)
				{
					TimeComponent = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDefinedSymbol
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Definition : IfcDefinedSymbolSelect;
	/// Target : IfcCartesianTransformationOperator2D;
	/// END_ENTITY;
	/// <summary>
	public class IFCDefinedSymbol : IFCGeometricRepresentationItem, Global.IFCDefinedSymbol
	{
		public virtual IFCDefinedSymbolSelect? Definition { get; set; }
		public virtual IFCCartesianTransformationOperator2D? Target { get; set; }
		public IFCDefinedSymbol() : base()
		{
		}
		public IFCDefinedSymbol(IFCDefinedSymbolSelect? Definition, IFCCartesianTransformationOperator2D? Target) : base ()
		{
			this.Definition = Definition;
			this.Target = Target;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Definition", Definition},
				{"Target", Target}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCDefinedSymbolSelect? _Definition
		{
			get
			{
				return Definition;
			}
			set
			{
				if(value is IFCDefinedSymbolSelect val)
				{
					Definition = val;
				}
				else if(value == null)
				{
					Definition = null;
				}
			}
		}
		public virtual Global.IFCCartesianTransformationOperator2D? _Target
		{
			get
			{
				return Target;
			}
			set
			{
				if(value is IFCCartesianTransformationOperator2D val)
				{
					Target = val;
				}
				else if(value == null)
				{
					Target = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDerivedProfileDef
	/// SUBTYPE OF (IfcProfileDef);
	/// ParentProfile : IfcProfileDef;
	/// Operator : IfcCartesianTransformationOperator2D;
	/// Label : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : SELF\IfcProfileDef.ProfileType = ParentProfile.ProfileType;
	/// END_ENTITY;
	/// <summary>
	public class IFCDerivedProfileDef : IFCProfileDef, Global.IFCDerivedProfileDef
	{
		public virtual IFCProfileDef? ParentProfile { get; set; }
		public virtual IFCCartesianTransformationOperator2D? Operator { get; set; }
		public virtual IFCLabel? Label { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCDerivedProfileDef() : base()
		{
		}
		public IFCDerivedProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCProfileDef? ParentProfile, IFCCartesianTransformationOperator2D? Operator, IFCLabel? Label) : base (ProfileType, ProfileName)
		{
			this.ParentProfile = ParentProfile;
			this.Operator = Operator;
			this.Label = Label;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"ParentProfile", ParentProfile},
				{"Operator", Operator},
				{"Label", Label}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCProfileDef? _ParentProfile
		{
			get
			{
				return ParentProfile;
			}
			set
			{
				if(value is IFCProfileDef val)
				{
					ParentProfile = val;
				}
				else if(value == null)
				{
					ParentProfile = null;
				}
			}
		}
		public virtual Global.IFCCartesianTransformationOperator2D? _Operator
		{
			get
			{
				return Operator;
			}
			set
			{
				if(value is IFCCartesianTransformationOperator2D val)
				{
					Operator = val;
				}
				else if(value == null)
				{
					Operator = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Label
		{
			get
			{
				return Label;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Label = val;
				}
				else if(value == null)
				{
					Label = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDerivedUnit;
	/// Elements : SET [1:?] OF IfcDerivedUnitElement;
	/// UnitType : IfcDerivedUnitEnum;
	/// UserDefinedType : OPTIONAL IfcLabel;
	/// DERIVE
	/// Dimensions : IfcDimensionalExponents := IfcDeriveDimensionalExponents(Elements);
	/// WHERE
	/// WR1 : (SIZEOF (Elements) > 1) OR ((SIZEOF (Elements) = 1) AND (Elements[1].Exponent <> 1 ));
	/// WR2 : (UnitType <> IfcDerivedUnitEnum.USERDEFINED) OR
	/// ((UnitType = IfcDerivedUnitEnum.USERDEFINED) AND
	/// (EXISTS(SELF.UserDefinedType)));
	/// END_ENTITY;
	/// <summary>
	public class IFCDerivedUnit : IFC_ClassEntity, IFCUnit, Global.IFCDerivedUnit
	{
		public virtual IFC_Attributes<IFCDerivedUnitElement>? Elements { get; set; }
		public virtual IFCDerivedUnitEnum? UnitType { get; set; }
		public virtual IFCLabel? UserDefinedType { get; set; }
		public virtual IFCDimensionalExponents? Dimensions
		{
			get
			{
				//MANUAL : IFC2x3.IFCDerivedUnit.Dimensions
				// IfcDeriveDimensionalExponents(Elements);
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCDerivedUnit() : base()
		{
		}
		public IFCDerivedUnit(IFC_Attributes<IFCDerivedUnitElement>? Elements, IFCDerivedUnitEnum? UnitType, IFCLabel? UserDefinedType) : base ()
		{
			this.Elements = Elements;
			this.UnitType = UnitType;
			this.UserDefinedType = UserDefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Elements", Elements},
				{"UnitType", UnitType},
				{"UserDefinedType", UserDefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dimensions", Dimensions}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual IFC_Attributes<Global.IFCDerivedUnitElement>? _Elements
		{
			get
			{
				if(Elements != null)
				{
					IFC_Attributes<Global.IFCDerivedUnitElement>? items = new IFC_Attributes<Global.IFCDerivedUnitElement>();
					foreach (IFCDerivedUnitElement item in Elements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Elements = null;
				}
				else
				{
					Elements = new IFC_Attributes<IFCDerivedUnitElement>();
					foreach(var val in value)
					{
						if(val is IFCDerivedUnitElement v)
						{
							Elements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCDerivedUnitEnum? _UnitType
		{
			get
			{
				return UnitType;
			}
			set
			{
				if(value is IFCDerivedUnitEnum val)
				{
					UnitType = val;
				}
				else if(value == null)
				{
					UnitType = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedType
		{
			get
			{
				return UserDefinedType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedType = val;
				}
				else if(value == null)
				{
					UserDefinedType = null;
				}
			}
		}
		public virtual Global.IFCDimensionalExponents? _Dimensions
		{
			get
			{
				return Dimensions;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDerivedUnitElement;
	/// Unit : IfcNamedUnit;
	/// Exponent : INTEGER;
	/// END_ENTITY;
	/// <summary>
	public class IFCDerivedUnitElement : IFC_ClassEntity, Global.IFCDerivedUnitElement
	{
		public virtual IFCNamedUnit? Unit { get; set; }
		public virtual INTEGER? Exponent { get; set; }
		public IFCDerivedUnitElement() : base()
		{
		}
		public IFCDerivedUnitElement(IFCNamedUnit? Unit, INTEGER? Exponent) : base ()
		{
			this.Unit = Unit;
			this.Exponent = Exponent;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Unit", Unit},
				{"Exponent", Exponent}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCNamedUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IFCNamedUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
		public virtual INTEGER? _Exponent
		{
			get
			{
				return Exponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					Exponent = val;
				}
				else if(value == null)
				{
					Exponent = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDiameterDimension
	/// SUBTYPE OF (IfcDimensionCurveDirectedCallout);
	/// END_ENTITY;
	/// <summary>
	public class IFCDiameterDimension : IFCDimensionCurveDirectedCallout, Global.IFCDiameterDimension
	{
		public IFCDiameterDimension() : base()
		{
		}
		public IFCDiameterDimension(IFC_Attributes<IFCDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Contents", Contents}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem},
				{"IsRelatedFromCallout", IsRelatedFromCallout},
				{"IsRelatedToCallout", IsRelatedToCallout}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41},
				{"is_WR42", is_WR42}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionCalloutRelationship
	/// SUBTYPE OF (IfcDraughtingCalloutRelationship);
	/// WHERE
	/// WR11 : SELF\IfcDraughtingCalloutRelationship.Name IN ['primary','secondary'];
	/// WR12 : SIZEOF(TYPEOF(SELF\IfcDraughtingCalloutRelationship.RelatingDraughtingCallout) * [
	/// 'IFC2X3.IFCANGULARDIMENSION',
	/// 'IFC2X3.IFCDIAMETERDIMENSION',
	/// 'IFC2X3.IFCLINEARDIMENSION',
	/// 'IFC2X3.IFCRADIUSDIMENSION']) = 1;
	/// WR13 : NOT ('IFC2X3.IFCDIMENSIONCURVEDIRECTEDCALLOUT'
	/// IN TYPEOF (SELF\IfcDraughtingCalloutRelationship.RelatedDraughtingCallout));
	/// END_ENTITY;
	/// <summary>
	public class IFCDimensionCalloutRelationship : IFCDraughtingCalloutRelationship, Global.IFCDimensionCalloutRelationship
	{
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR12
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR13
		{
			get
			{
				return true;
			}
		}
		public IFCDimensionCalloutRelationship() : base()
		{
		}
		public IFCDimensionCalloutRelationship(IFCLabel? Name, IFCText? Description, IFCDraughtingCallout? RelatingDraughtingCallout, IFCDraughtingCallout? RelatedDraughtingCallout) : base (Name, Description, RelatingDraughtingCallout, RelatedDraughtingCallout)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"RelatingDraughtingCallout", RelatingDraughtingCallout},
				{"RelatedDraughtingCallout", RelatedDraughtingCallout}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR13", is_WR13}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionCurve
	/// SUBTYPE OF (IfcAnnotationCurveOccurrence);
	/// INVERSE
	/// AnnotatedBySymbols : SET [0:2] OF IfcTerminatorSymbol FOR AnnotatedCurve;
	/// WHERE
	/// WR51 : SIZEOF(USEDIN(SELF,'IFC2X3.IFCDRAUGHTINGCALLOUT.CONTENTS'))
	/// >= 1;
	/// WR52 : (SIZEOF(QUERY (Dct1 <* USEDIN(SELF,'IFC2X3.' +
	/// 'IFCTERMINATORSYMBOL.ANNOTATEDCURVE') | (Dct1.Role = IfcDimensionExtentUsage.ORIGIN))) <= 1)
	/// AND
	/// (SIZEOF(QUERY (Dct2 <* USEDIN(SELF,'IFC2X3.' +
	/// 'IFCTERMINATORSYMBOL.ANNOTATEDCURVE') | (Dct2.Role = IfcDimensionExtentUsage.TARGET))) <= 1);
	/// WR53 : SIZEOF(QUERY (Dct <* AnnotatedBySymbols |
	/// NOT('IFC2X3.IFCDIMENSIONCURVETERMINATOR' IN TYPEOF(Dct))))
	/// = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCDimensionCurve : IFCAnnotationCurveOccurrence, Global.IFCDimensionCurve
	{
		public IFC_Attributes<IFCTerminatorSymbol>? AnnotatedBySymbols {get{return new IFC_Attributes<IFCTerminatorSymbol>(Model?.GetItems<IFCTerminatorSymbol>().Where(x => x.AnnotatedCurve != null && x.AnnotatedCurve == this).ToList());}}
		public virtual bool is_WR51
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR52
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR53
		{
			get
			{
				return true;
			}
		}
		public IFCDimensionCurve() : base()
		{
		}
		public IFCDimensionCurve(IFCRepresentationItem? Item, IFC_Attributes<IFCPresentationStyleAssignment>? Styles, IFCLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"Styles", Styles},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem},
				{"AnnotatedBySymbols", AnnotatedBySymbols}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR31", is_WR31},
				{"is_WR51", is_WR51},
				{"is_WR52", is_WR52},
				{"is_WR53", is_WR53}
			};
		}
		public virtual IFC_Attributes<Global.IFCTerminatorSymbol>? _AnnotatedBySymbols
		{
			get
			{
				if(AnnotatedBySymbols != null)
				{
					IFC_Attributes<Global.IFCTerminatorSymbol>? items = new IFC_Attributes<Global.IFCTerminatorSymbol>();
					foreach (IFCTerminatorSymbol item in AnnotatedBySymbols)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionCurveDirectedCallout
	/// SUPERTYPE OF (ONEOF
	/// (IfcAngularDimension
	/// ,IfcDiameterDimension
	/// ,IfcLinearDimension
	/// ,IfcRadiusDimension))
	/// SUBTYPE OF (IfcDraughtingCallout);
	/// WHERE
	/// WR41 : SIZEOF(QUERY (Dc <* SELF\IfcDraughtingCallout.Contents | (
	/// 'IFC2X3.IFCDIMENSIONCURVE' IN TYPEOF(Dc))))
	/// = 1;
	/// WR42 : SIZEOF (QUERY (Dc <* SELF.contents |
	/// ('IFC2X3.IFCPROJECTIONCURVE' IN
	/// TYPEOF (Dc)))) <= 2;
	/// END_ENTITY;
	/// <summary>
	public class IFCDimensionCurveDirectedCallout : IFCDraughtingCallout, Global.IFCDimensionCurveDirectedCallout
	{
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR42
		{
			get
			{
				return true;
			}
		}
		public IFCDimensionCurveDirectedCallout() : base()
		{
		}
		public IFCDimensionCurveDirectedCallout(IFC_Attributes<IFCDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Contents", Contents}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem},
				{"IsRelatedFromCallout", IsRelatedFromCallout},
				{"IsRelatedToCallout", IsRelatedToCallout}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41},
				{"is_WR42", is_WR42}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionCurveTerminator
	/// SUBTYPE OF (IfcTerminatorSymbol);
	/// Role : IfcDimensionExtentUsage;
	/// WHERE
	/// WR61 : 'IFC2X3.IFCDIMENSIONCURVE' IN TYPEOF
	/// (SELF\IfcTerminatorSymbol.AnnotatedCurve);
	/// END_ENTITY;
	/// <summary>
	public class IFCDimensionCurveTerminator : IFCTerminatorSymbol, Global.IFCDimensionCurveTerminator
	{
		public virtual IFCDimensionExtentUsage? Role { get; set; }
		public virtual bool is_WR61
		{
			get
			{
				return true;
			}
		}
		public IFCDimensionCurveTerminator() : base()
		{
		}
		public IFCDimensionCurveTerminator(IFCRepresentationItem? Item, IFC_Attributes<IFCPresentationStyleAssignment>? Styles, IFCLabel? Name, IFCAnnotationCurveOccurrence? AnnotatedCurve, IFCDimensionExtentUsage? Role) : base (Item, Styles, Name, AnnotatedCurve)
		{
			this.Role = Role;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"Styles", Styles},
				{"Name", Name},
				{"AnnotatedCurve", AnnotatedCurve},
				{"Role", Role}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR31", is_WR31},
				{"is_WR61", is_WR61}
			};
		}
		public virtual Global.IFCDimensionExtentUsage? _Role
		{
			get
			{
				return Role;
			}
			set
			{
				if(value is IFCDimensionExtentUsage val)
				{
					Role = val;
				}
				else if(value == null)
				{
					Role = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionPair
	/// SUBTYPE OF (IfcDraughtingCalloutRelationship);
	/// WHERE
	/// WR11 : SELF.Name IN ['chained','parallel'];
	/// WR12 : SIZEOF(TYPEOF(SELF.RelatingDraughtingCallout) * [
	/// 'IFC2X3.IFCANGULARDIMENSION',
	/// 'IFC2X3.IFCDIAMETERDIMENSION',
	/// 'IFC2X3.IFCLINEARDIMENSION',
	/// 'IFC2X3.IFCRADIUSDIMENSION']) = 1;
	/// WR13 : SIZEOF(TYPEOF(SELF.RelatedDraughtingCallout) * [
	/// 'IFC2X3.IFCANGULARDIMENSION',
	/// 'IFC2X3.IFCDIAMETERDIMENSION',
	/// 'IFC2X3.IFCLINEARDIMENSION',
	/// 'IFC2X3.IFCRADIUSDIMENSION']) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCDimensionPair : IFCDraughtingCalloutRelationship, Global.IFCDimensionPair
	{
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR12
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR13
		{
			get
			{
				return true;
			}
		}
		public IFCDimensionPair() : base()
		{
		}
		public IFCDimensionPair(IFCLabel? Name, IFCText? Description, IFCDraughtingCallout? RelatingDraughtingCallout, IFCDraughtingCallout? RelatedDraughtingCallout) : base (Name, Description, RelatingDraughtingCallout, RelatedDraughtingCallout)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"RelatingDraughtingCallout", RelatingDraughtingCallout},
				{"RelatedDraughtingCallout", RelatedDraughtingCallout}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR13", is_WR13}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDimensionalExponents;
	/// LengthExponent : INTEGER;
	/// MassExponent : INTEGER;
	/// TimeExponent : INTEGER;
	/// ElectricCurrentExponent : INTEGER;
	/// ThermodynamicTemperatureExponent : INTEGER;
	/// AmountOfSubstanceExponent : INTEGER;
	/// LuminousIntensityExponent : INTEGER;
	/// END_ENTITY;
	/// <summary>
	public class IFCDimensionalExponents : IFC_ClassEntity, Global.IFCDimensionalExponents
	{
		public virtual INTEGER? LengthExponent { get; set; }
		public virtual INTEGER? MassExponent { get; set; }
		public virtual INTEGER? TimeExponent { get; set; }
		public virtual INTEGER? ElectricCurrentExponent { get; set; }
		public virtual INTEGER? ThermodynamicTemperatureExponent { get; set; }
		public virtual INTEGER? AmountOfSubstanceExponent { get; set; }
		public virtual INTEGER? LuminousIntensityExponent { get; set; }
		public IFCDimensionalExponents() : base()
		{
		}
		public IFCDimensionalExponents(INTEGER? LengthExponent, INTEGER? MassExponent, INTEGER? TimeExponent, INTEGER? ElectricCurrentExponent, INTEGER? ThermodynamicTemperatureExponent, INTEGER? AmountOfSubstanceExponent, INTEGER? LuminousIntensityExponent) : base ()
		{
			this.LengthExponent = LengthExponent;
			this.MassExponent = MassExponent;
			this.TimeExponent = TimeExponent;
			this.ElectricCurrentExponent = ElectricCurrentExponent;
			this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
			this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
			this.LuminousIntensityExponent = LuminousIntensityExponent;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LengthExponent", LengthExponent},
				{"MassExponent", MassExponent},
				{"TimeExponent", TimeExponent},
				{"ElectricCurrentExponent", ElectricCurrentExponent},
				{"ThermodynamicTemperatureExponent", ThermodynamicTemperatureExponent},
				{"AmountOfSubstanceExponent", AmountOfSubstanceExponent},
				{"LuminousIntensityExponent", LuminousIntensityExponent}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual INTEGER? _LengthExponent
		{
			get
			{
				return LengthExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					LengthExponent = val;
				}
				else if(value == null)
				{
					LengthExponent = null;
				}
			}
		}
		public virtual INTEGER? _MassExponent
		{
			get
			{
				return MassExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					MassExponent = val;
				}
				else if(value == null)
				{
					MassExponent = null;
				}
			}
		}
		public virtual INTEGER? _TimeExponent
		{
			get
			{
				return TimeExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					TimeExponent = val;
				}
				else if(value == null)
				{
					TimeExponent = null;
				}
			}
		}
		public virtual INTEGER? _ElectricCurrentExponent
		{
			get
			{
				return ElectricCurrentExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					ElectricCurrentExponent = val;
				}
				else if(value == null)
				{
					ElectricCurrentExponent = null;
				}
			}
		}
		public virtual INTEGER? _ThermodynamicTemperatureExponent
		{
			get
			{
				return ThermodynamicTemperatureExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					ThermodynamicTemperatureExponent = val;
				}
				else if(value == null)
				{
					ThermodynamicTemperatureExponent = null;
				}
			}
		}
		public virtual INTEGER? _AmountOfSubstanceExponent
		{
			get
			{
				return AmountOfSubstanceExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					AmountOfSubstanceExponent = val;
				}
				else if(value == null)
				{
					AmountOfSubstanceExponent = null;
				}
			}
		}
		public virtual INTEGER? _LuminousIntensityExponent
		{
			get
			{
				return LuminousIntensityExponent;
			}
			set
			{
				if(value is INTEGER val)
				{
					LuminousIntensityExponent = val;
				}
				else if(value == null)
				{
					LuminousIntensityExponent = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDirection
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// DirectionRatios : LIST [2:3] OF REAL;
	/// DERIVE
	/// Dim : IfcDimensionCount := HIINDEX(DirectionRatios);
	/// END_ENTITY;
	/// <summary>
	public class IFCDirection : IFCGeometricRepresentationItem, IFCOrientationSelect, IFCVectorOrDirection, Global.IFCDirection
	{
		public virtual IFC_Attributes<REAL>? DirectionRatios { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCDirection.Dim
				// HIINDEX(DirectionRatios);
				return null;
				//END_MANUAL
			}
		}
		public IFCDirection() : base()
		{
		}
		public IFCDirection(IFC_Attributes<REAL>? DirectionRatios) : base ()
		{
			this.DirectionRatios = DirectionRatios;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"DirectionRatios", DirectionRatios}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<REAL>? _DirectionRatios
		{
			get
			{
				if(DirectionRatios != null)
				{
					IFC_Attributes<REAL>? items = new IFC_Attributes<REAL>();
					foreach (REAL item in DirectionRatios)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					DirectionRatios = null;
				}
				else
				{
					DirectionRatios = new IFC_Attributes<REAL>();
					foreach(var val in value)
					{
						if(val is REAL v)
						{
							DirectionRatios.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDiscreteAccessory
	/// SUBTYPE OF (IfcElementComponent);
	/// END_ENTITY;
	/// <summary>
	public class IFCDiscreteAccessory : IFCElementComponent, Global.IFCDiscreteAccessory
	{
		public IFCDiscreteAccessory() : base()
		{
		}
		public IFCDiscreteAccessory(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDiscreteAccessoryType
	/// SUPERTYPE OF (ONEOF
	/// (IfcVibrationIsolatorType))
	/// SUBTYPE OF (IfcElementComponentType);
	/// END_ENTITY;
	/// <summary>
	public class IFCDiscreteAccessoryType : IFCElementComponentType, Global.IFCDiscreteAccessoryType
	{
		public IFCDiscreteAccessoryType() : base()
		{
		}
		public IFCDiscreteAccessoryType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionChamberElement
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCDistributionChamberElement : IFCDistributionFlowElement, Global.IFCDistributionChamberElement
	{
		public IFCDistributionChamberElement() : base()
		{
		}
		public IFCDistributionChamberElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"HasControlElements", HasControlElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionChamberElementType
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// PredefinedType : IfcDistributionChamberElementTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCDistributionChamberElementType : IFCDistributionFlowElementType, Global.IFCDistributionChamberElementType
	{
		public virtual IFCDistributionChamberElementTypeEnum? PredefinedType { get; set; }
		public IFCDistributionChamberElementType() : base()
		{
		}
		public IFCDistributionChamberElementType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCDistributionChamberElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCDistributionChamberElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCDistributionChamberElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionControlElement
	/// SUBTYPE OF (IfcDistributionElement);
	/// ControlElementId : OPTIONAL IfcIdentifier;
	/// INVERSE
	/// AssignedToFlowElement : SET [0:1] OF IfcRelFlowControlElements FOR RelatedControlElements;
	/// END_ENTITY;
	/// <summary>
	public class IFCDistributionControlElement : IFCDistributionElement, Global.IFCDistributionControlElement
	{
		public virtual IFCIdentifier? ControlElementId { get; set; }
		public IFC_Attributes<IFCRelFlowControlElements>? AssignedToFlowElement {get{return new IFC_Attributes<IFCRelFlowControlElements>(Model?.GetItems<IFCRelFlowControlElements>().Where(x => x.RelatedControlElements != null && x.RelatedControlElements.Contains(this)).ToList());}}
		public IFCDistributionControlElement() : base()
		{
		}
		public IFCDistributionControlElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCIdentifier? ControlElementId) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.ControlElementId = ControlElementId;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"ControlElementId", ControlElementId}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"AssignedToFlowElement", AssignedToFlowElement}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCIdentifier? _ControlElementId
		{
			get
			{
				return ControlElementId;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					ControlElementId = val;
				}
				else if(value == null)
				{
					ControlElementId = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelFlowControlElements>? _AssignedToFlowElement
		{
			get
			{
				if(AssignedToFlowElement != null)
				{
					IFC_Attributes<Global.IFCRelFlowControlElements>? items = new IFC_Attributes<Global.IFCRelFlowControlElements>();
					foreach (IFCRelFlowControlElements item in AssignedToFlowElement)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionControlElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcActuatorType
	/// ,IfcAlarmType
	/// ,IfcControllerType
	/// ,IfcFlowInstrumentType
	/// ,IfcSensorType))
	/// SUBTYPE OF (IfcDistributionElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCDistributionControlElementType : IFCDistributionElementType, Global.IFCDistributionControlElementType
	{
		public IFCDistributionControlElementType() : base()
		{
		}
		public IFCDistributionControlElementType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionElement
	/// SUPERTYPE OF (ONEOF
	/// (IfcDistributionControlElement
	/// ,IfcDistributionFlowElement))
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCDistributionElement : IFCElement, Global.IFCDistributionElement
	{
		public IFCDistributionElement() : base()
		{
		}
		public IFCDistributionElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionElementType
	/// SUPERTYPE OF (ONEOF
	/// (IfcDistributionControlElementType
	/// ,IfcDistributionFlowElementType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public class IFCDistributionElementType : IFCElementType, Global.IFCDistributionElementType
	{
		public IFCDistributionElementType() : base()
		{
		}
		public IFCDistributionElementType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionFlowElement
	/// SUPERTYPE OF (ONEOF
	/// (IfcDistributionChamberElement
	/// ,IfcEnergyConversionDevice
	/// ,IfcFlowController
	/// ,IfcFlowFitting
	/// ,IfcFlowMovingDevice
	/// ,IfcFlowSegment
	/// ,IfcFlowStorageDevice
	/// ,IfcFlowTerminal
	/// ,IfcFlowTreatmentDevice))
	/// SUBTYPE OF (IfcDistributionElement);
	/// INVERSE
	/// HasControlElements : SET [0:1] OF IfcRelFlowControlElements FOR RelatingFlowElement;
	/// END_ENTITY;
	/// <summary>
	public class IFCDistributionFlowElement : IFCDistributionElement, Global.IFCDistributionFlowElement
	{
		public IFC_Attributes<IFCRelFlowControlElements>? HasControlElements {get{return new IFC_Attributes<IFCRelFlowControlElements>(Model?.GetItems<IFCRelFlowControlElements>().Where(x => x.RelatingFlowElement != null && x.RelatingFlowElement == this).ToList());}}
		public IFCDistributionFlowElement() : base()
		{
		}
		public IFCDistributionFlowElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"HasControlElements", HasControlElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCRelFlowControlElements>? _HasControlElements
		{
			get
			{
				if(HasControlElements != null)
				{
					IFC_Attributes<Global.IFCRelFlowControlElements>? items = new IFC_Attributes<Global.IFCRelFlowControlElements>();
					foreach (IFCRelFlowControlElements item in HasControlElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionFlowElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDistributionChamberElementType
	/// ,IfcEnergyConversionDeviceType
	/// ,IfcFlowControllerType
	/// ,IfcFlowFittingType
	/// ,IfcFlowMovingDeviceType
	/// ,IfcFlowSegmentType
	/// ,IfcFlowStorageDeviceType
	/// ,IfcFlowTerminalType
	/// ,IfcFlowTreatmentDeviceType))
	/// SUBTYPE OF (IfcDistributionElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCDistributionFlowElementType : IFCDistributionElementType, Global.IFCDistributionFlowElementType
	{
		public IFCDistributionFlowElementType() : base()
		{
		}
		public IFCDistributionFlowElementType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDistributionPort
	/// SUBTYPE OF (IfcPort);
	/// FlowDirection : OPTIONAL IfcFlowDirectionEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCDistributionPort : IFCPort, Global.IFCDistributionPort
	{
		public virtual IFCFlowDirectionEnum? FlowDirection { get; set; }
		public IFCDistributionPort() : base()
		{
		}
		public IFCDistributionPort(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCFlowDirectionEnum? FlowDirection) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.FlowDirection = FlowDirection;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"FlowDirection", FlowDirection}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"ContainedIn", ContainedIn},
				{"ConnectedFrom", ConnectedFrom},
				{"ConnectedTo", ConnectedTo}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCFlowDirectionEnum? _FlowDirection
		{
			get
			{
				return FlowDirection;
			}
			set
			{
				if(value is IFCFlowDirectionEnum val)
				{
					FlowDirection = val;
				}
				else if(value == null)
				{
					FlowDirection = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDocumentElectronicFormat;
	/// FileExtension : OPTIONAL IfcLabel;
	/// MimeContentType : OPTIONAL IfcLabel;
	/// MimeSubtype : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS(FileExtension) OR EXISTS(MimeContentType);
	/// END_ENTITY;
	/// <summary>
	public class IFCDocumentElectronicFormat : IFC_ClassEntity, Global.IFCDocumentElectronicFormat
	{
		public virtual IFCLabel? FileExtension { get; set; }
		public virtual IFCLabel? MimeContentType { get; set; }
		public virtual IFCLabel? MimeSubtype { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCDocumentElectronicFormat() : base()
		{
		}
		public IFCDocumentElectronicFormat(IFCLabel? FileExtension, IFCLabel? MimeContentType, IFCLabel? MimeSubtype) : base ()
		{
			this.FileExtension = FileExtension;
			this.MimeContentType = MimeContentType;
			this.MimeSubtype = MimeSubtype;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"FileExtension", FileExtension},
				{"MimeContentType", MimeContentType},
				{"MimeSubtype", MimeSubtype}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _FileExtension
		{
			get
			{
				return FileExtension;
			}
			set
			{
				if(value is IFCLabel val)
				{
					FileExtension = val;
				}
				else if(value == null)
				{
					FileExtension = null;
				}
			}
		}
		public virtual Global.IFCLabel? _MimeContentType
		{
			get
			{
				return MimeContentType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					MimeContentType = val;
				}
				else if(value == null)
				{
					MimeContentType = null;
				}
			}
		}
		public virtual Global.IFCLabel? _MimeSubtype
		{
			get
			{
				return MimeSubtype;
			}
			set
			{
				if(value is IFCLabel val)
				{
					MimeSubtype = val;
				}
				else if(value == null)
				{
					MimeSubtype = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDocumentInformation;
	/// DocumentId : IfcIdentifier;
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// DocumentReferences : OPTIONAL SET [1:?] OF IfcDocumentReference;
	/// Purpose : OPTIONAL IfcText;
	/// IntendedUse : OPTIONAL IfcText;
	/// Scope : OPTIONAL IfcText;
	/// Revision : OPTIONAL IfcLabel;
	/// DocumentOwner : OPTIONAL IfcActorSelect;
	/// Editors : OPTIONAL SET [1:?] OF IfcActorSelect;
	/// CreationTime : OPTIONAL IfcDateAndTime;
	/// LastRevisionTime : OPTIONAL IfcDateAndTime;
	/// ElectronicFormat : OPTIONAL IfcDocumentElectronicFormat;
	/// ValidFrom : OPTIONAL IfcCalendarDate;
	/// ValidUntil : OPTIONAL IfcCalendarDate;
	/// Confidentiality : OPTIONAL IfcDocumentConfidentialityEnum;
	/// Status : OPTIONAL IfcDocumentStatusEnum;
	/// INVERSE
	/// IsPointedTo : SET [0:?] OF IfcDocumentInformationRelationship FOR RelatedDocuments;
	/// IsPointer : SET [0:1] OF IfcDocumentInformationRelationship FOR RelatingDocument;
	/// END_ENTITY;
	/// <summary>
	public class IFCDocumentInformation : IFC_ClassEntity, IFCDocumentSelect, Global.IFCDocumentInformation
	{
		public virtual IFCIdentifier? DocumentId { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFC_Attributes<IFCDocumentReference>? DocumentReferences { get; set; }
		public virtual IFCText? Purpose { get; set; }
		public virtual IFCText? IntendedUse { get; set; }
		public virtual IFCText? Scope { get; set; }
		public virtual IFCLabel? Revision { get; set; }
		public virtual IFCActorSelect? DocumentOwner { get; set; }
		public virtual IFC_Attributes<IFCActorSelect>? Editors { get; set; }
		public virtual IFCDateAndTime? CreationTime { get; set; }
		public virtual IFCDateAndTime? LastRevisionTime { get; set; }
		public virtual IFCDocumentElectronicFormat? ElectronicFormat { get; set; }
		public virtual IFCCalendarDate? ValidFrom { get; set; }
		public virtual IFCCalendarDate? ValidUntil { get; set; }
		public virtual IFCDocumentConfidentialityEnum? Confidentiality { get; set; }
		public virtual IFCDocumentStatusEnum? Status { get; set; }
		public IFC_Attributes<IFCDocumentInformationRelationship>? IsPointedTo {get{return new IFC_Attributes<IFCDocumentInformationRelationship>(Model?.GetItems<IFCDocumentInformationRelationship>().Where(x => x.RelatedDocuments != null && x.RelatedDocuments.Contains(this)).ToList());}}
		public IFC_Attributes<IFCDocumentInformationRelationship>? IsPointer {get{return new IFC_Attributes<IFCDocumentInformationRelationship>(Model?.GetItems<IFCDocumentInformationRelationship>().Where(x => x.RelatingDocument != null && x.RelatingDocument == this).ToList());}}
		public IFCDocumentInformation() : base()
		{
		}
		public IFCDocumentInformation(IFCIdentifier? DocumentId, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCDocumentReference>? DocumentReferences, IFCText? Purpose, IFCText? IntendedUse, IFCText? Scope, IFCLabel? Revision, IFCActorSelect? DocumentOwner, IFC_Attributes<IFCActorSelect>? Editors, IFCDateAndTime? CreationTime, IFCDateAndTime? LastRevisionTime, IFCDocumentElectronicFormat? ElectronicFormat, IFCCalendarDate? ValidFrom, IFCCalendarDate? ValidUntil, IFCDocumentConfidentialityEnum? Confidentiality, IFCDocumentStatusEnum? Status) : base ()
		{
			this.DocumentId = DocumentId;
			this.Name = Name;
			this.Description = Description;
			this.DocumentReferences = DocumentReferences;
			this.Purpose = Purpose;
			this.IntendedUse = IntendedUse;
			this.Scope = Scope;
			this.Revision = Revision;
			this.DocumentOwner = DocumentOwner;
			this.Editors = Editors;
			this.CreationTime = CreationTime;
			this.LastRevisionTime = LastRevisionTime;
			this.ElectronicFormat = ElectronicFormat;
			this.ValidFrom = ValidFrom;
			this.ValidUntil = ValidUntil;
			this.Confidentiality = Confidentiality;
			this.Status = Status;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"DocumentId", DocumentId},
				{"Name", Name},
				{"Description", Description},
				{"DocumentReferences", DocumentReferences},
				{"Purpose", Purpose},
				{"IntendedUse", IntendedUse},
				{"Scope", Scope},
				{"Revision", Revision},
				{"DocumentOwner", DocumentOwner},
				{"Editors", Editors},
				{"CreationTime", CreationTime},
				{"LastRevisionTime", LastRevisionTime},
				{"ElectronicFormat", ElectronicFormat},
				{"ValidFrom", ValidFrom},
				{"ValidUntil", ValidUntil},
				{"Confidentiality", Confidentiality},
				{"Status", Status}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"IsPointedTo", IsPointedTo},
				{"IsPointer", IsPointer}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCIdentifier? _DocumentId
		{
			get
			{
				return DocumentId;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					DocumentId = val;
				}
				else if(value == null)
				{
					DocumentId = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCDocumentReference>? _DocumentReferences
		{
			get
			{
				if(DocumentReferences != null)
				{
					IFC_Attributes<Global.IFCDocumentReference>? items = new IFC_Attributes<Global.IFCDocumentReference>();
					foreach (IFCDocumentReference item in DocumentReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					DocumentReferences = null;
				}
				else
				{
					DocumentReferences = new IFC_Attributes<IFCDocumentReference>();
					foreach(var val in value)
					{
						if(val is IFCDocumentReference v)
						{
							DocumentReferences.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCText? _Purpose
		{
			get
			{
				return Purpose;
			}
			set
			{
				if(value is IFCText val)
				{
					Purpose = val;
				}
				else if(value == null)
				{
					Purpose = null;
				}
			}
		}
		public virtual Global.IFCText? _IntendedUse
		{
			get
			{
				return IntendedUse;
			}
			set
			{
				if(value is IFCText val)
				{
					IntendedUse = val;
				}
				else if(value == null)
				{
					IntendedUse = null;
				}
			}
		}
		public virtual Global.IFCText? _Scope
		{
			get
			{
				return Scope;
			}
			set
			{
				if(value is IFCText val)
				{
					Scope = val;
				}
				else if(value == null)
				{
					Scope = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Revision
		{
			get
			{
				return Revision;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Revision = val;
				}
				else if(value == null)
				{
					Revision = null;
				}
			}
		}
		public virtual Global.IFCActorSelect? _DocumentOwner
		{
			get
			{
				return DocumentOwner;
			}
			set
			{
				if(value is IFCActorSelect val)
				{
					DocumentOwner = val;
				}
				else if(value == null)
				{
					DocumentOwner = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCActorSelect>? _Editors
		{
			get
			{
				if(Editors != null)
				{
					IFC_Attributes<Global.IFCActorSelect>? items = new IFC_Attributes<Global.IFCActorSelect>();
					foreach (IFCActorSelect item in Editors)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Editors = null;
				}
				else
				{
					Editors = new IFC_Attributes<IFCActorSelect>();
					foreach(var val in value)
					{
						if(val is IFCActorSelect v)
						{
							Editors.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCDateAndTime? _CreationTime
		{
			get
			{
				return CreationTime;
			}
			set
			{
				if(value is IFCDateAndTime val)
				{
					CreationTime = val;
				}
				else if(value == null)
				{
					CreationTime = null;
				}
			}
		}
		public virtual Global.IFCDateAndTime? _LastRevisionTime
		{
			get
			{
				return LastRevisionTime;
			}
			set
			{
				if(value is IFCDateAndTime val)
				{
					LastRevisionTime = val;
				}
				else if(value == null)
				{
					LastRevisionTime = null;
				}
			}
		}
		public virtual Global.IFCDocumentElectronicFormat? _ElectronicFormat
		{
			get
			{
				return ElectronicFormat;
			}
			set
			{
				if(value is IFCDocumentElectronicFormat val)
				{
					ElectronicFormat = val;
				}
				else if(value == null)
				{
					ElectronicFormat = null;
				}
			}
		}
		public virtual Global.IFCCalendarDate? _ValidFrom
		{
			get
			{
				return ValidFrom;
			}
			set
			{
				if(value is IFCCalendarDate val)
				{
					ValidFrom = val;
				}
				else if(value == null)
				{
					ValidFrom = null;
				}
			}
		}
		public virtual Global.IFCCalendarDate? _ValidUntil
		{
			get
			{
				return ValidUntil;
			}
			set
			{
				if(value is IFCCalendarDate val)
				{
					ValidUntil = val;
				}
				else if(value == null)
				{
					ValidUntil = null;
				}
			}
		}
		public virtual Global.IFCDocumentConfidentialityEnum? _Confidentiality
		{
			get
			{
				return Confidentiality;
			}
			set
			{
				if(value is IFCDocumentConfidentialityEnum val)
				{
					Confidentiality = val;
				}
				else if(value == null)
				{
					Confidentiality = null;
				}
			}
		}
		public virtual Global.IFCDocumentStatusEnum? _Status
		{
			get
			{
				return Status;
			}
			set
			{
				if(value is IFCDocumentStatusEnum val)
				{
					Status = val;
				}
				else if(value == null)
				{
					Status = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCDocumentInformationRelationship>? _IsPointedTo
		{
			get
			{
				if(IsPointedTo != null)
				{
					IFC_Attributes<Global.IFCDocumentInformationRelationship>? items = new IFC_Attributes<Global.IFCDocumentInformationRelationship>();
					foreach (IFCDocumentInformationRelationship item in IsPointedTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCDocumentInformationRelationship>? _IsPointer
		{
			get
			{
				if(IsPointer != null)
				{
					IFC_Attributes<Global.IFCDocumentInformationRelationship>? items = new IFC_Attributes<Global.IFCDocumentInformationRelationship>();
					foreach (IFCDocumentInformationRelationship item in IsPointer)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDocumentInformationRelationship;
	/// RelatingDocument : IfcDocumentInformation;
	/// RelatedDocuments : SET [1:?] OF IfcDocumentInformation;
	/// RelationshipType : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IFCDocumentInformationRelationship : IFC_ClassEntity, Global.IFCDocumentInformationRelationship
	{
		public virtual IFCDocumentInformation? RelatingDocument { get; set; }
		public virtual IFC_Attributes<IFCDocumentInformation>? RelatedDocuments { get; set; }
		public virtual IFCLabel? RelationshipType { get; set; }
		public IFCDocumentInformationRelationship() : base()
		{
		}
		public IFCDocumentInformationRelationship(IFCDocumentInformation? RelatingDocument, IFC_Attributes<IFCDocumentInformation>? RelatedDocuments, IFCLabel? RelationshipType) : base ()
		{
			this.RelatingDocument = RelatingDocument;
			this.RelatedDocuments = RelatedDocuments;
			this.RelationshipType = RelationshipType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RelatingDocument", RelatingDocument},
				{"RelatedDocuments", RelatedDocuments},
				{"RelationshipType", RelationshipType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCDocumentInformation? _RelatingDocument
		{
			get
			{
				return RelatingDocument;
			}
			set
			{
				if(value is IFCDocumentInformation val)
				{
					RelatingDocument = val;
				}
				else if(value == null)
				{
					RelatingDocument = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCDocumentInformation>? _RelatedDocuments
		{
			get
			{
				if(RelatedDocuments != null)
				{
					IFC_Attributes<Global.IFCDocumentInformation>? items = new IFC_Attributes<Global.IFCDocumentInformation>();
					foreach (IFCDocumentInformation item in RelatedDocuments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedDocuments = null;
				}
				else
				{
					RelatedDocuments = new IFC_Attributes<IFCDocumentInformation>();
					foreach(var val in value)
					{
						if(val is IFCDocumentInformation v)
						{
							RelatedDocuments.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _RelationshipType
		{
			get
			{
				return RelationshipType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					RelationshipType = val;
				}
				else if(value == null)
				{
					RelationshipType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDocumentReference
	/// SUBTYPE OF (IfcExternalReference);
	/// INVERSE
	/// ReferenceToDocument : SET [0:1] OF IfcDocumentInformation FOR DocumentReferences;
	/// WHERE
	/// WR1 : EXISTS(Name) XOR EXISTS(ReferenceToDocument[1]);
	/// END_ENTITY;
	/// <summary>
	public class IFCDocumentReference : IFCExternalReference, IFCDocumentSelect, Global.IFCDocumentReference
	{
		public IFC_Attributes<IFCDocumentInformation>? ReferenceToDocument {get{return new IFC_Attributes<IFCDocumentInformation>(Model?.GetItems<IFCDocumentInformation>().Where(x => x.DocumentReferences != null && x.DocumentReferences.Contains(this)).ToList());}}
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCDocumentReference() : base()
		{
		}
		public IFCDocumentReference(IFCLabel? Location, IFCIdentifier? ItemReference, IFCLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location},
				{"ItemReference", ItemReference},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ReferenceToDocument", ReferenceToDocument}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCDocumentInformation>? _ReferenceToDocument
		{
			get
			{
				if(ReferenceToDocument != null)
				{
					IFC_Attributes<Global.IFCDocumentInformation>? items = new IFC_Attributes<Global.IFCDocumentInformation>();
					foreach (IFCDocumentInformation item in ReferenceToDocument)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDoor
	/// SUBTYPE OF (IfcBuildingElement);
	/// OverallHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// OverallWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCDoor : IFCBuildingElement, Global.IFCDoor
	{
		public virtual IFCPositiveLengthMeasure? OverallHeight { get; set; }
		public virtual IFCPositiveLengthMeasure? OverallWidth { get; set; }
		public IFCDoor() : base()
		{
		}
		public IFCDoor(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCPositiveLengthMeasure? OverallHeight, IFCPositiveLengthMeasure? OverallWidth) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"OverallHeight", OverallHeight},
				{"OverallWidth", OverallWidth}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _OverallHeight
		{
			get
			{
				return OverallHeight;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					OverallHeight = val;
				}
				else if(value == null)
				{
					OverallHeight = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _OverallWidth
		{
			get
			{
				return OverallWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					OverallWidth = val;
				}
				else if(value == null)
				{
					OverallWidth = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDoorLiningProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// LiningDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// LiningThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// ThresholdDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// ThresholdThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// TransomThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// TransomOffset : OPTIONAL IfcLengthMeasure;
	/// LiningOffset : OPTIONAL IfcLengthMeasure;
	/// ThresholdOffset : OPTIONAL IfcLengthMeasure;
	/// CasingThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// CasingDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// WHERE
	/// WR31 : NOT(NOT(EXISTS(LiningDepth)) AND EXISTS(LiningThickness));
	/// WR32 : NOT(NOT(EXISTS(ThresholdDepth)) AND EXISTS(ThresholdThickness));
	/// WR33 : (EXISTS(TransomOffset) AND EXISTS(TransomThickness)) XOR
	/// (NOT(EXISTS(TransomOffset)) AND NOT(EXISTS(TransomThickness)));
	/// WR34 : (EXISTS(CasingDepth) AND EXISTS(CasingThickness)) XOR
	/// (NOT(EXISTS(CasingDepth)) AND NOT(EXISTS(CasingThickness)));
	/// WR35 : EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]) AND
	/// ('IFC2X3.IFCDOORSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]));
	/// END_ENTITY;
	/// <summary>
	public class IFCDoorLiningProperties : IFCPropertySetDefinition, Global.IFCDoorLiningProperties
	{
		public virtual IFCPositiveLengthMeasure? LiningDepth { get; set; }
		public virtual IFCPositiveLengthMeasure? LiningThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? ThresholdDepth { get; set; }
		public virtual IFCPositiveLengthMeasure? ThresholdThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? TransomThickness { get; set; }
		public virtual IFCLengthMeasure? TransomOffset { get; set; }
		public virtual IFCLengthMeasure? LiningOffset { get; set; }
		public virtual IFCLengthMeasure? ThresholdOffset { get; set; }
		public virtual IFCPositiveLengthMeasure? CasingThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? CasingDepth { get; set; }
		public virtual IFCShapeAspect? ShapeAspectStyle { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR32
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR33
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR34
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR35
		{
			get
			{
				return true;
			}
		}
		public IFCDoorLiningProperties() : base()
		{
		}
		public IFCDoorLiningProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCPositiveLengthMeasure? LiningDepth, IFCPositiveLengthMeasure? LiningThickness, IFCPositiveLengthMeasure? ThresholdDepth, IFCPositiveLengthMeasure? ThresholdThickness, IFCPositiveLengthMeasure? TransomThickness, IFCLengthMeasure? TransomOffset, IFCLengthMeasure? LiningOffset, IFCLengthMeasure? ThresholdOffset, IFCPositiveLengthMeasure? CasingThickness, IFCPositiveLengthMeasure? CasingDepth, IFCShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.ThresholdDepth = ThresholdDepth;
			this.ThresholdThickness = ThresholdThickness;
			this.TransomThickness = TransomThickness;
			this.TransomOffset = TransomOffset;
			this.LiningOffset = LiningOffset;
			this.ThresholdOffset = ThresholdOffset;
			this.CasingThickness = CasingThickness;
			this.CasingDepth = CasingDepth;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"LiningDepth", LiningDepth},
				{"LiningThickness", LiningThickness},
				{"ThresholdDepth", ThresholdDepth},
				{"ThresholdThickness", ThresholdThickness},
				{"TransomThickness", TransomThickness},
				{"TransomOffset", TransomOffset},
				{"LiningOffset", LiningOffset},
				{"ThresholdOffset", ThresholdOffset},
				{"CasingThickness", CasingThickness},
				{"CasingDepth", CasingDepth},
				{"ShapeAspectStyle", ShapeAspectStyle}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31},
				{"is_WR32", is_WR32},
				{"is_WR33", is_WR33},
				{"is_WR34", is_WR34},
				{"is_WR35", is_WR35}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _LiningDepth
		{
			get
			{
				return LiningDepth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					LiningDepth = val;
				}
				else if(value == null)
				{
					LiningDepth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _LiningThickness
		{
			get
			{
				return LiningThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					LiningThickness = val;
				}
				else if(value == null)
				{
					LiningThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _ThresholdDepth
		{
			get
			{
				return ThresholdDepth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					ThresholdDepth = val;
				}
				else if(value == null)
				{
					ThresholdDepth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _ThresholdThickness
		{
			get
			{
				return ThresholdThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					ThresholdThickness = val;
				}
				else if(value == null)
				{
					ThresholdThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _TransomThickness
		{
			get
			{
				return TransomThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					TransomThickness = val;
				}
				else if(value == null)
				{
					TransomThickness = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _TransomOffset
		{
			get
			{
				return TransomOffset;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					TransomOffset = val;
				}
				else if(value == null)
				{
					TransomOffset = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _LiningOffset
		{
			get
			{
				return LiningOffset;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					LiningOffset = val;
				}
				else if(value == null)
				{
					LiningOffset = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _ThresholdOffset
		{
			get
			{
				return ThresholdOffset;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					ThresholdOffset = val;
				}
				else if(value == null)
				{
					ThresholdOffset = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _CasingThickness
		{
			get
			{
				return CasingThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					CasingThickness = val;
				}
				else if(value == null)
				{
					CasingThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _CasingDepth
		{
			get
			{
				return CasingDepth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					CasingDepth = val;
				}
				else if(value == null)
				{
					CasingDepth = null;
				}
			}
		}
		public virtual Global.IFCShapeAspect? _ShapeAspectStyle
		{
			get
			{
				return ShapeAspectStyle;
			}
			set
			{
				if(value is IFCShapeAspect val)
				{
					ShapeAspectStyle = val;
				}
				else if(value == null)
				{
					ShapeAspectStyle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDoorPanelProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// PanelDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// PanelOperation : IfcDoorPanelOperationEnum;
	/// PanelWidth : OPTIONAL IfcNormalisedRatioMeasure;
	/// PanelPosition : IfcDoorPanelPositionEnum;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// WHERE
	/// WR31 : EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]) AND
	/// ('IFC2X3.IFCDOORSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]));
	/// END_ENTITY;
	/// <summary>
	public class IFCDoorPanelProperties : IFCPropertySetDefinition, Global.IFCDoorPanelProperties
	{
		public virtual IFCPositiveLengthMeasure? PanelDepth { get; set; }
		public virtual IFCDoorPanelOperationEnum? PanelOperation { get; set; }
		public virtual IFCNormalisedRatioMeasure? PanelWidth { get; set; }
		public virtual IFCDoorPanelPositionEnum? PanelPosition { get; set; }
		public virtual IFCShapeAspect? ShapeAspectStyle { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCDoorPanelProperties() : base()
		{
		}
		public IFCDoorPanelProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCPositiveLengthMeasure? PanelDepth, IFCDoorPanelOperationEnum? PanelOperation, IFCNormalisedRatioMeasure? PanelWidth, IFCDoorPanelPositionEnum? PanelPosition, IFCShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.PanelDepth = PanelDepth;
			this.PanelOperation = PanelOperation;
			this.PanelWidth = PanelWidth;
			this.PanelPosition = PanelPosition;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"PanelDepth", PanelDepth},
				{"PanelOperation", PanelOperation},
				{"PanelWidth", PanelWidth},
				{"PanelPosition", PanelPosition},
				{"ShapeAspectStyle", ShapeAspectStyle}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _PanelDepth
		{
			get
			{
				return PanelDepth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					PanelDepth = val;
				}
				else if(value == null)
				{
					PanelDepth = null;
				}
			}
		}
		public virtual Global.IFCDoorPanelOperationEnum? _PanelOperation
		{
			get
			{
				return PanelOperation;
			}
			set
			{
				if(value is IFCDoorPanelOperationEnum val)
				{
					PanelOperation = val;
				}
				else if(value == null)
				{
					PanelOperation = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _PanelWidth
		{
			get
			{
				return PanelWidth;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					PanelWidth = val;
				}
				else if(value == null)
				{
					PanelWidth = null;
				}
			}
		}
		public virtual Global.IFCDoorPanelPositionEnum? _PanelPosition
		{
			get
			{
				return PanelPosition;
			}
			set
			{
				if(value is IFCDoorPanelPositionEnum val)
				{
					PanelPosition = val;
				}
				else if(value == null)
				{
					PanelPosition = null;
				}
			}
		}
		public virtual Global.IFCShapeAspect? _ShapeAspectStyle
		{
			get
			{
				return ShapeAspectStyle;
			}
			set
			{
				if(value is IFCShapeAspect val)
				{
					ShapeAspectStyle = val;
				}
				else if(value == null)
				{
					ShapeAspectStyle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDoorStyle
	/// SUBTYPE OF (IfcTypeProduct);
	/// OperationType : IfcDoorStyleOperationEnum;
	/// ConstructionType : IfcDoorStyleConstructionEnum;
	/// ParameterTakesPrecedence : BOOLEAN;
	/// Sizeable : BOOLEAN;
	/// END_ENTITY;
	/// <summary>
	public class IFCDoorStyle : IFCTypeProduct, Global.IFCDoorStyle
	{
		public virtual IFCDoorStyleOperationEnum? OperationType { get; set; }
		public virtual IFCDoorStyleConstructionEnum? ConstructionType { get; set; }
		public virtual BOOLEAN? ParameterTakesPrecedence { get; set; }
		public virtual BOOLEAN? Sizeable { get; set; }
		public IFCDoorStyle() : base()
		{
		}
		public IFCDoorStyle(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCDoorStyleOperationEnum? OperationType, IFCDoorStyleConstructionEnum? ConstructionType, BOOLEAN? ParameterTakesPrecedence, BOOLEAN? Sizeable) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag)
		{
			this.OperationType = OperationType;
			this.ConstructionType = ConstructionType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"OperationType", OperationType},
				{"ConstructionType", ConstructionType},
				{"ParameterTakesPrecedence", ParameterTakesPrecedence},
				{"Sizeable", Sizeable}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCDoorStyleOperationEnum? _OperationType
		{
			get
			{
				return OperationType;
			}
			set
			{
				if(value is IFCDoorStyleOperationEnum val)
				{
					OperationType = val;
				}
				else if(value == null)
				{
					OperationType = null;
				}
			}
		}
		public virtual Global.IFCDoorStyleConstructionEnum? _ConstructionType
		{
			get
			{
				return ConstructionType;
			}
			set
			{
				if(value is IFCDoorStyleConstructionEnum val)
				{
					ConstructionType = val;
				}
				else if(value == null)
				{
					ConstructionType = null;
				}
			}
		}
		public virtual BOOLEAN? _ParameterTakesPrecedence
		{
			get
			{
				return ParameterTakesPrecedence;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					ParameterTakesPrecedence = val;
				}
				else if(value == null)
				{
					ParameterTakesPrecedence = null;
				}
			}
		}
		public virtual BOOLEAN? _Sizeable
		{
			get
			{
				return Sizeable;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					Sizeable = val;
				}
				else if(value == null)
				{
					Sizeable = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDraughtingCallout
	/// SUPERTYPE OF (ONEOF
	/// (IfcDimensionCurveDirectedCallout
	/// ,IfcStructuredDimensionCallout))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Contents : SET [1:?] OF IfcDraughtingCalloutElement;
	/// INVERSE
	/// IsRelatedFromCallout : SET [0:?] OF IfcDraughtingCalloutRelationship FOR RelatedDraughtingCallout;
	/// IsRelatedToCallout : SET [0:?] OF IfcDraughtingCalloutRelationship FOR RelatingDraughtingCallout;
	/// END_ENTITY;
	/// <summary>
	public class IFCDraughtingCallout : IFCGeometricRepresentationItem, Global.IFCDraughtingCallout
	{
		public virtual IFC_Attributes<IFCDraughtingCalloutElement>? Contents { get; set; }
		public IFC_Attributes<IFCDraughtingCalloutRelationship>? IsRelatedFromCallout {get{return new IFC_Attributes<IFCDraughtingCalloutRelationship>(Model?.GetItems<IFCDraughtingCalloutRelationship>().Where(x => x.RelatedDraughtingCallout != null && x.RelatedDraughtingCallout == this).ToList());}}
		public IFC_Attributes<IFCDraughtingCalloutRelationship>? IsRelatedToCallout {get{return new IFC_Attributes<IFCDraughtingCalloutRelationship>(Model?.GetItems<IFCDraughtingCalloutRelationship>().Where(x => x.RelatingDraughtingCallout != null && x.RelatingDraughtingCallout == this).ToList());}}
		public IFCDraughtingCallout() : base()
		{
		}
		public IFCDraughtingCallout(IFC_Attributes<IFCDraughtingCalloutElement>? Contents) : base ()
		{
			this.Contents = Contents;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Contents", Contents}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem},
				{"IsRelatedFromCallout", IsRelatedFromCallout},
				{"IsRelatedToCallout", IsRelatedToCallout}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCDraughtingCalloutElement>? _Contents
		{
			get
			{
				if(Contents != null)
				{
					IFC_Attributes<Global.IFCDraughtingCalloutElement>? items = new IFC_Attributes<Global.IFCDraughtingCalloutElement>();
					foreach (IFCDraughtingCalloutElement item in Contents)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Contents = null;
				}
				else
				{
					Contents = new IFC_Attributes<IFCDraughtingCalloutElement>();
					foreach(var val in value)
					{
						if(val is IFCDraughtingCalloutElement v)
						{
							Contents.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCDraughtingCalloutRelationship>? _IsRelatedFromCallout
		{
			get
			{
				if(IsRelatedFromCallout != null)
				{
					IFC_Attributes<Global.IFCDraughtingCalloutRelationship>? items = new IFC_Attributes<Global.IFCDraughtingCalloutRelationship>();
					foreach (IFCDraughtingCalloutRelationship item in IsRelatedFromCallout)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCDraughtingCalloutRelationship>? _IsRelatedToCallout
		{
			get
			{
				if(IsRelatedToCallout != null)
				{
					IFC_Attributes<Global.IFCDraughtingCalloutRelationship>? items = new IFC_Attributes<Global.IFCDraughtingCalloutRelationship>();
					foreach (IFCDraughtingCalloutRelationship item in IsRelatedToCallout)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDraughtingCalloutRelationship
	/// SUPERTYPE OF (ONEOF
	/// (IfcDimensionCalloutRelationship
	/// ,IfcDimensionPair));
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// RelatingDraughtingCallout : IfcDraughtingCallout;
	/// RelatedDraughtingCallout : IfcDraughtingCallout;
	/// END_ENTITY;
	/// <summary>
	public class IFCDraughtingCalloutRelationship : IFC_ClassEntity, Global.IFCDraughtingCalloutRelationship
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFCDraughtingCallout? RelatingDraughtingCallout { get; set; }
		public virtual IFCDraughtingCallout? RelatedDraughtingCallout { get; set; }
		public IFCDraughtingCalloutRelationship() : base()
		{
		}
		public IFCDraughtingCalloutRelationship(IFCLabel? Name, IFCText? Description, IFCDraughtingCallout? RelatingDraughtingCallout, IFCDraughtingCallout? RelatedDraughtingCallout) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingDraughtingCallout = RelatingDraughtingCallout;
			this.RelatedDraughtingCallout = RelatedDraughtingCallout;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"RelatingDraughtingCallout", RelatingDraughtingCallout},
				{"RelatedDraughtingCallout", RelatedDraughtingCallout}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCDraughtingCallout? _RelatingDraughtingCallout
		{
			get
			{
				return RelatingDraughtingCallout;
			}
			set
			{
				if(value is IFCDraughtingCallout val)
				{
					RelatingDraughtingCallout = val;
				}
				else if(value == null)
				{
					RelatingDraughtingCallout = null;
				}
			}
		}
		public virtual Global.IFCDraughtingCallout? _RelatedDraughtingCallout
		{
			get
			{
				return RelatedDraughtingCallout;
			}
			set
			{
				if(value is IFCDraughtingCallout val)
				{
					RelatedDraughtingCallout = val;
				}
				else if(value == null)
				{
					RelatedDraughtingCallout = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDraughtingPreDefinedColour
	/// SUBTYPE OF (IfcPreDefinedColour);
	/// WHERE
	/// WR31 : SELF\IfcPreDefinedItem.Name IN ['black','red','green','blue','yellow',
	/// 'magenta','cyan','white','by layer'];
	/// END_ENTITY;
	/// <summary>
	public class IFCDraughtingPreDefinedColour : IFCPreDefinedColour, Global.IFCDraughtingPreDefinedColour
	{
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCDraughtingPreDefinedColour() : base()
		{
		}
		public IFCDraughtingPreDefinedColour(IFCLabel? Name) : base (Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDraughtingPreDefinedCurveFont
	/// SUBTYPE OF (IfcPreDefinedCurveFont);
	/// WHERE
	/// WR31 : SELF\IfcPredefinedItem.Name IN
	/// ['continuous',
	/// 'chain',
	/// 'chain double dash',
	/// 'dashed',
	/// 'dotted',
	/// 'by layer'];
	/// END_ENTITY;
	/// <summary>
	public class IFCDraughtingPreDefinedCurveFont : IFCPreDefinedCurveFont, Global.IFCDraughtingPreDefinedCurveFont
	{
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCDraughtingPreDefinedCurveFont() : base()
		{
		}
		public IFCDraughtingPreDefinedCurveFont(IFCLabel? Name) : base (Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDraughtingPreDefinedTextFont
	/// SUBTYPE OF (IfcPreDefinedTextFont);
	/// WHERE
	/// WR31 : SELF\IfcPreDefinedItem.Name IN ['ISO 3098-1 font A','ISO 3098-1 font B'];
	/// END_ENTITY;
	/// <summary>
	public class IFCDraughtingPreDefinedTextFont : IFCPreDefinedTextFont, Global.IFCDraughtingPreDefinedTextFont
	{
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCDraughtingPreDefinedTextFont() : base()
		{
		}
		public IFCDraughtingPreDefinedTextFont(IFCLabel? Name) : base (Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcDuctFittingType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcDuctFittingTypeEnum;
	/// WHERE
	/// WR2 : (PredefinedType <> IfcDuctFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctFittingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCDuctFittingType : IFCFlowFittingType, Global.IFCDuctFittingType
	{
		public virtual IFCDuctFittingTypeEnum? PredefinedType { get; set; }
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCDuctFittingType() : base()
		{
		}
		public IFCDuctFittingType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCDuctFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR2", is_WR2}
			};
		}
		public virtual Global.IFCDuctFittingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCDuctFittingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDuctSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcDuctSegmentTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcDuctSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctSegmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCDuctSegmentType : IFCFlowSegmentType, Global.IFCDuctSegmentType
	{
		public virtual IFCDuctSegmentTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCDuctSegmentType() : base()
		{
		}
		public IFCDuctSegmentType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCDuctSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCDuctSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCDuctSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcDuctSilencerType
	/// SUBTYPE OF (IfcFlowTreatmentDeviceType);
	/// PredefinedType : IfcDuctSilencerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcDuctSilencerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcDuctSilencerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCDuctSilencerType : IFCFlowTreatmentDeviceType, Global.IFCDuctSilencerType
	{
		public virtual IFCDuctSilencerTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCDuctSilencerType() : base()
		{
		}
		public IFCDuctSilencerType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCDuctSilencerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCDuctSilencerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCDuctSilencerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEdge
	/// SUPERTYPE OF (ONEOF
	/// (IfcEdgeCurve
	/// ,IfcOrientedEdge
	/// ,IfcSubedge))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// EdgeStart : IfcVertex;
	/// EdgeEnd : IfcVertex;
	/// END_ENTITY;
	/// <summary>
	public class IFCEdge : IFCTopologicalRepresentationItem, Global.IFCEdge
	{
		public virtual IFCVertex? EdgeStart { get; set; }
		public virtual IFCVertex? EdgeEnd { get; set; }
		public IFCEdge() : base()
		{
		}
		public IFCEdge(IFCVertex? EdgeStart, IFCVertex? EdgeEnd) : base ()
		{
			this.EdgeStart = EdgeStart;
			this.EdgeEnd = EdgeEnd;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"EdgeStart", EdgeStart},
				{"EdgeEnd", EdgeEnd}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCVertex? _EdgeStart
		{
			get
			{
				return EdgeStart;
			}
			set
			{
				if(value is IFCVertex val)
				{
					EdgeStart = val;
				}
				else if(value == null)
				{
					EdgeStart = null;
				}
			}
		}
		public virtual Global.IFCVertex? _EdgeEnd
		{
			get
			{
				return EdgeEnd;
			}
			set
			{
				if(value is IFCVertex val)
				{
					EdgeEnd = val;
				}
				else if(value == null)
				{
					EdgeEnd = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEdgeCurve
	/// SUBTYPE OF (IfcEdge);
	/// EdgeGeometry : IfcCurve;
	/// SameSense : BOOLEAN;
	/// END_ENTITY;
	/// <summary>
	public class IFCEdgeCurve : IFCEdge, IFCCurveOrEdgeCurve, Global.IFCEdgeCurve
	{
		public virtual IFCCurve? EdgeGeometry { get; set; }
		public virtual BOOLEAN? SameSense { get; set; }
		public IFCEdgeCurve() : base()
		{
		}
		public IFCEdgeCurve(IFCVertex? EdgeStart, IFCVertex? EdgeEnd, IFCCurve? EdgeGeometry, BOOLEAN? SameSense) : base (EdgeStart, EdgeEnd)
		{
			this.EdgeGeometry = EdgeGeometry;
			this.SameSense = SameSense;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"EdgeStart", EdgeStart},
				{"EdgeEnd", EdgeEnd},
				{"EdgeGeometry", EdgeGeometry},
				{"SameSense", SameSense}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCurve? _EdgeGeometry
		{
			get
			{
				return EdgeGeometry;
			}
			set
			{
				if(value is IFCCurve val)
				{
					EdgeGeometry = val;
				}
				else if(value == null)
				{
					EdgeGeometry = null;
				}
			}
		}
		public virtual BOOLEAN? _SameSense
		{
			get
			{
				return SameSense;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					SameSense = val;
				}
				else if(value == null)
				{
					SameSense = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEdgeFeature
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcChamferEdgeFeature
	/// ,IfcRoundedEdgeFeature))
	/// SUBTYPE OF (IfcFeatureElementSubtraction);
	/// FeatureLength : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCEdgeFeature : IFCFeatureElementSubtraction, Global.IFCEdgeFeature
	{
		public virtual IFCPositiveLengthMeasure? FeatureLength { get; set; }
		public IFCEdgeFeature() : base()
		{
		}
		public IFCEdgeFeature(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCPositiveLengthMeasure? FeatureLength) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.FeatureLength = FeatureLength;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"FeatureLength", FeatureLength}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"VoidsElements", VoidsElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _FeatureLength
		{
			get
			{
				return FeatureLength;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FeatureLength = val;
				}
				else if(value == null)
				{
					FeatureLength = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEdgeLoop
	/// SUBTYPE OF (IfcLoop);
	/// EdgeList : LIST [1:?] OF IfcOrientedEdge;
	/// DERIVE
	/// Ne : INTEGER := SIZEOF(EdgeList);
	/// WHERE
	/// WR1 : (EdgeList[1].EdgeStart) :=: (EdgeList[Ne].EdgeEnd);
	/// WR2 : IfcLoopHeadToTail(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IFCEdgeLoop : IFCLoop, Global.IFCEdgeLoop
	{
		public virtual IFC_Attributes<IFCOrientedEdge>? EdgeList { get; set; }
		public virtual INTEGER? Ne
		{
			get
			{
				//MANUAL : IFC2x3.IFCEdgeLoop.Ne
				// SIZEOF(EdgeList);
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCEdgeLoop() : base()
		{
		}
		public IFCEdgeLoop(IFC_Attributes<IFCOrientedEdge>? EdgeList) : base ()
		{
			this.EdgeList = EdgeList;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"EdgeList", EdgeList}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Ne", Ne}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual IFC_Attributes<Global.IFCOrientedEdge>? _EdgeList
		{
			get
			{
				if(EdgeList != null)
				{
					IFC_Attributes<Global.IFCOrientedEdge>? items = new IFC_Attributes<Global.IFCOrientedEdge>();
					foreach (IFCOrientedEdge item in EdgeList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					EdgeList = null;
				}
				else
				{
					EdgeList = new IFC_Attributes<IFCOrientedEdge>();
					foreach(var val in value)
					{
						if(val is IFCOrientedEdge v)
						{
							EdgeList.Add(v);
						}
					}
				}
			}
		}
		public virtual INTEGER? _Ne
		{
			get
			{
				return Ne;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricApplianceType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcElectricApplianceTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCElectricApplianceType : IFCFlowTerminalType, Global.IFCElectricApplianceType
	{
		public virtual IFCElectricApplianceTypeEnum? PredefinedType { get; set; }
		public IFCElectricApplianceType() : base()
		{
		}
		public IFCElectricApplianceType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCElectricApplianceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCElectricApplianceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCElectricApplianceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricDistributionPoint
	/// SUBTYPE OF (IfcFlowController);
	/// DistributionPointFunction : IfcElectricDistributionPointFunctionEnum;
	/// UserDefinedFunction : OPTIONAL IfcLabel;
	/// WHERE
	/// WR31 : (DistributionPointFunction <> IfcElectricDistributionPointFunctionEnum.USERDEFINED) OR
	/// ((DistributionPointFunction = IfcElectricDistributionPointFunctionEnum.USERDEFINED) AND EXISTS(SELF\IfcElectricDistributionPoint.UserDefinedFunction));
	/// END_ENTITY;
	/// <summary>
	public class IFCElectricDistributionPoint : IFCFlowController, Global.IFCElectricDistributionPoint
	{
		public virtual IFCElectricDistributionPointFunctionEnum? DistributionPointFunction { get; set; }
		public virtual IFCLabel? UserDefinedFunction { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCElectricDistributionPoint() : base()
		{
		}
		public IFCElectricDistributionPoint(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCElectricDistributionPointFunctionEnum? DistributionPointFunction, IFCLabel? UserDefinedFunction) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.DistributionPointFunction = DistributionPointFunction;
			this.UserDefinedFunction = UserDefinedFunction;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"DistributionPointFunction", DistributionPointFunction},
				{"UserDefinedFunction", UserDefinedFunction}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"HasControlElements", HasControlElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR31", is_WR31}
			};
		}
		public virtual Global.IFCElectricDistributionPointFunctionEnum? _DistributionPointFunction
		{
			get
			{
				return DistributionPointFunction;
			}
			set
			{
				if(value is IFCElectricDistributionPointFunctionEnum val)
				{
					DistributionPointFunction = val;
				}
				else if(value == null)
				{
					DistributionPointFunction = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedFunction
		{
			get
			{
				return UserDefinedFunction;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedFunction = val;
				}
				else if(value == null)
				{
					UserDefinedFunction = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricFlowStorageDeviceType
	/// SUBTYPE OF (IfcFlowStorageDeviceType);
	/// PredefinedType : IfcElectricFlowStorageDeviceTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCElectricFlowStorageDeviceType : IFCFlowStorageDeviceType, Global.IFCElectricFlowStorageDeviceType
	{
		public virtual IFCElectricFlowStorageDeviceTypeEnum? PredefinedType { get; set; }
		public IFCElectricFlowStorageDeviceType() : base()
		{
		}
		public IFCElectricFlowStorageDeviceType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCElectricFlowStorageDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCElectricFlowStorageDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCElectricFlowStorageDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricGeneratorType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcElectricGeneratorTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCElectricGeneratorType : IFCEnergyConversionDeviceType, Global.IFCElectricGeneratorType
	{
		public virtual IFCElectricGeneratorTypeEnum? PredefinedType { get; set; }
		public IFCElectricGeneratorType() : base()
		{
		}
		public IFCElectricGeneratorType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCElectricGeneratorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCElectricGeneratorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCElectricGeneratorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricHeaterType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcElectricHeaterTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCElectricHeaterType : IFCFlowTerminalType, Global.IFCElectricHeaterType
	{
		public virtual IFCElectricHeaterTypeEnum? PredefinedType { get; set; }
		public IFCElectricHeaterType() : base()
		{
		}
		public IFCElectricHeaterType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCElectricHeaterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCElectricHeaterTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCElectricHeaterTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricMotorType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcElectricMotorTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCElectricMotorType : IFCEnergyConversionDeviceType, Global.IFCElectricMotorType
	{
		public virtual IFCElectricMotorTypeEnum? PredefinedType { get; set; }
		public IFCElectricMotorType() : base()
		{
		}
		public IFCElectricMotorType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCElectricMotorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCElectricMotorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCElectricMotorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricTimeControlType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcElectricTimeControlTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCElectricTimeControlType : IFCFlowControllerType, Global.IFCElectricTimeControlType
	{
		public virtual IFCElectricTimeControlTypeEnum? PredefinedType { get; set; }
		public IFCElectricTimeControlType() : base()
		{
		}
		public IFCElectricTimeControlType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCElectricTimeControlTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCElectricTimeControlTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCElectricTimeControlTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricalBaseProperties
	/// SUBTYPE OF (IfcEnergyProperties);
	/// ElectricCurrentType : OPTIONAL IfcElectricCurrentEnum;
	/// InputVoltage : IfcElectricVoltageMeasure;
	/// InputFrequency : IfcFrequencyMeasure;
	/// FullLoadCurrent : OPTIONAL IfcElectricCurrentMeasure;
	/// MinimumCircuitCurrent : OPTIONAL IfcElectricCurrentMeasure;
	/// MaximumPowerInput : OPTIONAL IfcPowerMeasure;
	/// RatedPowerInput : OPTIONAL IfcPowerMeasure;
	/// InputPhase : INTEGER;
	/// END_ENTITY;
	/// <summary>
	public class IFCElectricalBaseProperties : IFCEnergyProperties, Global.IFCElectricalBaseProperties
	{
		public virtual IFCElectricCurrentEnum? ElectricCurrentType { get; set; }
		public virtual IFCElectricVoltageMeasure? InputVoltage { get; set; }
		public virtual IFCFrequencyMeasure? InputFrequency { get; set; }
		public virtual IFCElectricCurrentMeasure? FullLoadCurrent { get; set; }
		public virtual IFCElectricCurrentMeasure? MinimumCircuitCurrent { get; set; }
		public virtual IFCPowerMeasure? MaximumPowerInput { get; set; }
		public virtual IFCPowerMeasure? RatedPowerInput { get; set; }
		public virtual INTEGER? InputPhase { get; set; }
		public IFCElectricalBaseProperties() : base()
		{
		}
		public IFCElectricalBaseProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCEnergySequenceEnum? EnergySequence, IFCLabel? UserDefinedEnergySequence, IFCElectricCurrentEnum? ElectricCurrentType, IFCElectricVoltageMeasure? InputVoltage, IFCFrequencyMeasure? InputFrequency, IFCElectricCurrentMeasure? FullLoadCurrent, IFCElectricCurrentMeasure? MinimumCircuitCurrent, IFCPowerMeasure? MaximumPowerInput, IFCPowerMeasure? RatedPowerInput, INTEGER? InputPhase) : base (GlobalId, OwnerHistory, Name, Description, EnergySequence, UserDefinedEnergySequence)
		{
			this.ElectricCurrentType = ElectricCurrentType;
			this.InputVoltage = InputVoltage;
			this.InputFrequency = InputFrequency;
			this.FullLoadCurrent = FullLoadCurrent;
			this.MinimumCircuitCurrent = MinimumCircuitCurrent;
			this.MaximumPowerInput = MaximumPowerInput;
			this.RatedPowerInput = RatedPowerInput;
			this.InputPhase = InputPhase;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"EnergySequence", EnergySequence},
				{"UserDefinedEnergySequence", UserDefinedEnergySequence},
				{"ElectricCurrentType", ElectricCurrentType},
				{"InputVoltage", InputVoltage},
				{"InputFrequency", InputFrequency},
				{"FullLoadCurrent", FullLoadCurrent},
				{"MinimumCircuitCurrent", MinimumCircuitCurrent},
				{"MaximumPowerInput", MaximumPowerInput},
				{"RatedPowerInput", RatedPowerInput},
				{"InputPhase", InputPhase}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCElectricCurrentEnum? _ElectricCurrentType
		{
			get
			{
				return ElectricCurrentType;
			}
			set
			{
				if(value is IFCElectricCurrentEnum val)
				{
					ElectricCurrentType = val;
				}
				else if(value == null)
				{
					ElectricCurrentType = null;
				}
			}
		}
		public virtual Global.IFCElectricVoltageMeasure? _InputVoltage
		{
			get
			{
				return InputVoltage;
			}
			set
			{
				if(value is IFCElectricVoltageMeasure val)
				{
					InputVoltage = val;
				}
				else if(value == null)
				{
					InputVoltage = null;
				}
			}
		}
		public virtual Global.IFCFrequencyMeasure? _InputFrequency
		{
			get
			{
				return InputFrequency;
			}
			set
			{
				if(value is IFCFrequencyMeasure val)
				{
					InputFrequency = val;
				}
				else if(value == null)
				{
					InputFrequency = null;
				}
			}
		}
		public virtual Global.IFCElectricCurrentMeasure? _FullLoadCurrent
		{
			get
			{
				return FullLoadCurrent;
			}
			set
			{
				if(value is IFCElectricCurrentMeasure val)
				{
					FullLoadCurrent = val;
				}
				else if(value == null)
				{
					FullLoadCurrent = null;
				}
			}
		}
		public virtual Global.IFCElectricCurrentMeasure? _MinimumCircuitCurrent
		{
			get
			{
				return MinimumCircuitCurrent;
			}
			set
			{
				if(value is IFCElectricCurrentMeasure val)
				{
					MinimumCircuitCurrent = val;
				}
				else if(value == null)
				{
					MinimumCircuitCurrent = null;
				}
			}
		}
		public virtual Global.IFCPowerMeasure? _MaximumPowerInput
		{
			get
			{
				return MaximumPowerInput;
			}
			set
			{
				if(value is IFCPowerMeasure val)
				{
					MaximumPowerInput = val;
				}
				else if(value == null)
				{
					MaximumPowerInput = null;
				}
			}
		}
		public virtual Global.IFCPowerMeasure? _RatedPowerInput
		{
			get
			{
				return RatedPowerInput;
			}
			set
			{
				if(value is IFCPowerMeasure val)
				{
					RatedPowerInput = val;
				}
				else if(value == null)
				{
					RatedPowerInput = null;
				}
			}
		}
		public virtual INTEGER? _InputPhase
		{
			get
			{
				return InputPhase;
			}
			set
			{
				if(value is INTEGER val)
				{
					InputPhase = val;
				}
				else if(value == null)
				{
					InputPhase = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElectricalCircuit
	/// SUBTYPE OF (IfcSystem);
	/// END_ENTITY;
	/// <summary>
	public class IFCElectricalCircuit : IFCSystem, Global.IFCElectricalCircuit
	{
		public IFCElectricalCircuit() : base()
		{
		}
		public IFCElectricalCircuit(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsGroupedBy", IsGroupedBy},
				{"ServicesBuildings", ServicesBuildings}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcElectricalElement
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCElectricalElement : IFCElement, Global.IFCElectricalElement
	{
		public IFCElectricalElement() : base()
		{
		}
		public IFCElectricalElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuildingElement
	/// ,IfcDistributionElement
	/// ,IfcElectricalElement
	/// ,IfcElementAssembly
	/// ,IfcElementComponent
	/// ,IfcEquipmentElement
	/// ,IfcFeatureElement
	/// ,IfcFurnishingElement
	/// ,IfcTransportElement
	/// ,IfcVirtualElement))
	/// SUBTYPE OF (IfcProduct);
	/// Tag : OPTIONAL IfcIdentifier;
	/// INVERSE
	/// HasStructuralMember : SET [0:?] OF IfcRelConnectsStructuralElement FOR RelatingElement;
	/// FillsVoids : SET [0:1] OF IfcRelFillsElement FOR RelatedBuildingElement;
	/// ConnectedTo : SET [0:?] OF IfcRelConnectsElements FOR RelatingElement;
	/// HasCoverings : SET [0:?] OF IfcRelCoversBldgElements FOR RelatingBuildingElement;
	/// HasProjections : SET [0:?] OF IfcRelProjectsElement FOR RelatingElement;
	/// ReferencedInStructures : SET [0:?] OF IfcRelReferencedInSpatialStructure FOR RelatedElements;
	/// HasPorts : SET [0:?] OF IfcRelConnectsPortToElement FOR RelatedElement;
	/// HasOpenings : SET [0:?] OF IfcRelVoidsElement FOR RelatingBuildingElement;
	/// IsConnectionRealization : SET [0:?] OF IfcRelConnectsWithRealizingElements FOR RealizingElements;
	/// ProvidesBoundaries : SET [0:?] OF IfcRelSpaceBoundary FOR RelatedBuildingElement;
	/// ConnectedFrom : SET [0:?] OF IfcRelConnectsElements FOR RelatedElement;
	/// ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCElement : IFCProduct, IFCStructuralActivityAssignmentSelect, Global.IFCElement
	{
		public virtual IFCIdentifier? Tag { get; set; }
		public IFC_Attributes<IFCRelConnectsStructuralElement>? HasStructuralMember {get{return new IFC_Attributes<IFCRelConnectsStructuralElement>(Model?.GetItems<IFCRelConnectsStructuralElement>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList());}}
		public IFC_Attributes<IFCRelFillsElement>? FillsVoids {get{return new IFC_Attributes<IFCRelFillsElement>(Model?.GetItems<IFCRelFillsElement>().Where(x => x.RelatedBuildingElement != null && x.RelatedBuildingElement == this).ToList());}}
		public IFC_Attributes<IFCRelConnectsElements>? ConnectedTo {get{return new IFC_Attributes<IFCRelConnectsElements>(Model?.GetItems<IFCRelConnectsElements>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList());}}
		public IFC_Attributes<IFCRelCoversBldgElements>? HasCoverings {get{return new IFC_Attributes<IFCRelCoversBldgElements>(Model?.GetItems<IFCRelCoversBldgElements>().Where(x => x.RelatingBuildingElement != null && x.RelatingBuildingElement == this).ToList());}}
		public IFC_Attributes<IFCRelProjectsElement>? HasProjections {get{return new IFC_Attributes<IFCRelProjectsElement>(Model?.GetItems<IFCRelProjectsElement>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList());}}
		public IFC_Attributes<IFCRelReferencedInSpatialStructure>? ReferencedInStructures {get{return new IFC_Attributes<IFCRelReferencedInSpatialStructure>(Model?.GetItems<IFCRelReferencedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList());}}
		public IFC_Attributes<IFCRelConnectsPortToElement>? HasPorts {get{return new IFC_Attributes<IFCRelConnectsPortToElement>(Model?.GetItems<IFCRelConnectsPortToElement>().Where(x => x.RelatedElement != null && x.RelatedElement == this).ToList());}}
		public IFC_Attributes<IFCRelVoidsElement>? HasOpenings {get{return new IFC_Attributes<IFCRelVoidsElement>(Model?.GetItems<IFCRelVoidsElement>().Where(x => x.RelatingBuildingElement != null && x.RelatingBuildingElement == this).ToList());}}
		public IFC_Attributes<IFCRelConnectsWithRealizingElements>? IsConnectionRealization {get{return new IFC_Attributes<IFCRelConnectsWithRealizingElements>(Model?.GetItems<IFCRelConnectsWithRealizingElements>().Where(x => x.RealizingElements != null && x.RealizingElements.Contains(this)).ToList());}}
		public IFC_Attributes<IFCRelSpaceBoundary>? ProvidesBoundaries {get{return new IFC_Attributes<IFCRelSpaceBoundary>(Model?.GetItems<IFCRelSpaceBoundary>().Where(x => x.RelatedBuildingElement != null && x.RelatedBuildingElement == this).ToList());}}
		public IFC_Attributes<IFCRelConnectsElements>? ConnectedFrom {get{return new IFC_Attributes<IFCRelConnectsElements>(Model?.GetItems<IFCRelConnectsElements>().Where(x => x.RelatedElement != null && x.RelatedElement == this).ToList());}}
		public IFC_Attributes<IFCRelContainedInSpatialStructure>? ContainedInStructure {get{return new IFC_Attributes<IFCRelContainedInSpatialStructure>(Model?.GetItems<IFCRelContainedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList());}}
		public IFCElement() : base()
		{
		}
		public IFCElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.Tag = Tag;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCIdentifier? _Tag
		{
			get
			{
				return Tag;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					Tag = val;
				}
				else if(value == null)
				{
					Tag = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelConnectsStructuralElement>? _HasStructuralMember
		{
			get
			{
				if(HasStructuralMember != null)
				{
					IFC_Attributes<Global.IFCRelConnectsStructuralElement>? items = new IFC_Attributes<Global.IFCRelConnectsStructuralElement>();
					foreach (IFCRelConnectsStructuralElement item in HasStructuralMember)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelFillsElement>? _FillsVoids
		{
			get
			{
				if(FillsVoids != null)
				{
					IFC_Attributes<Global.IFCRelFillsElement>? items = new IFC_Attributes<Global.IFCRelFillsElement>();
					foreach (IFCRelFillsElement item in FillsVoids)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelConnectsElements>? _ConnectedTo
		{
			get
			{
				if(ConnectedTo != null)
				{
					IFC_Attributes<Global.IFCRelConnectsElements>? items = new IFC_Attributes<Global.IFCRelConnectsElements>();
					foreach (IFCRelConnectsElements item in ConnectedTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelCoversBldgElements>? _HasCoverings
		{
			get
			{
				if(HasCoverings != null)
				{
					IFC_Attributes<Global.IFCRelCoversBldgElements>? items = new IFC_Attributes<Global.IFCRelCoversBldgElements>();
					foreach (IFCRelCoversBldgElements item in HasCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelProjectsElement>? _HasProjections
		{
			get
			{
				if(HasProjections != null)
				{
					IFC_Attributes<Global.IFCRelProjectsElement>? items = new IFC_Attributes<Global.IFCRelProjectsElement>();
					foreach (IFCRelProjectsElement item in HasProjections)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelReferencedInSpatialStructure>? _ReferencedInStructures
		{
			get
			{
				if(ReferencedInStructures != null)
				{
					IFC_Attributes<Global.IFCRelReferencedInSpatialStructure>? items = new IFC_Attributes<Global.IFCRelReferencedInSpatialStructure>();
					foreach (IFCRelReferencedInSpatialStructure item in ReferencedInStructures)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelConnectsPortToElement>? _HasPorts
		{
			get
			{
				if(HasPorts != null)
				{
					IFC_Attributes<Global.IFCRelConnectsPortToElement>? items = new IFC_Attributes<Global.IFCRelConnectsPortToElement>();
					foreach (IFCRelConnectsPortToElement item in HasPorts)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelVoidsElement>? _HasOpenings
		{
			get
			{
				if(HasOpenings != null)
				{
					IFC_Attributes<Global.IFCRelVoidsElement>? items = new IFC_Attributes<Global.IFCRelVoidsElement>();
					foreach (IFCRelVoidsElement item in HasOpenings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelConnectsWithRealizingElements>? _IsConnectionRealization
		{
			get
			{
				if(IsConnectionRealization != null)
				{
					IFC_Attributes<Global.IFCRelConnectsWithRealizingElements>? items = new IFC_Attributes<Global.IFCRelConnectsWithRealizingElements>();
					foreach (IFCRelConnectsWithRealizingElements item in IsConnectionRealization)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelSpaceBoundary>? _ProvidesBoundaries
		{
			get
			{
				if(ProvidesBoundaries != null)
				{
					IFC_Attributes<Global.IFCRelSpaceBoundary>? items = new IFC_Attributes<Global.IFCRelSpaceBoundary>();
					foreach (IFCRelSpaceBoundary item in ProvidesBoundaries)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelConnectsElements>? _ConnectedFrom
		{
			get
			{
				if(ConnectedFrom != null)
				{
					IFC_Attributes<Global.IFCRelConnectsElements>? items = new IFC_Attributes<Global.IFCRelConnectsElements>();
					foreach (IFCRelConnectsElements item in ConnectedFrom)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelContainedInSpatialStructure>? _ContainedInStructure
		{
			get
			{
				if(ContainedInStructure != null)
				{
					IFC_Attributes<Global.IFCRelContainedInSpatialStructure>? items = new IFC_Attributes<Global.IFCRelContainedInSpatialStructure>();
					foreach (IFCRelContainedInSpatialStructure item in ContainedInStructure)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElementAssembly
	/// SUBTYPE OF (IfcElement);
	/// AssemblyPlace : OPTIONAL IfcAssemblyPlaceEnum;
	/// PredefinedType : IfcElementAssemblyTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcElementAssemblyTypeEnum.USERDEFINED) OR ((PredefinedType = IfcElementAssemblyTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IFCElementAssembly : IFCElement, Global.IFCElementAssembly
	{
		public virtual IFCAssemblyPlaceEnum? AssemblyPlace { get; set; }
		public virtual IFCElementAssemblyTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCElementAssembly() : base()
		{
		}
		public IFCElementAssembly(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCAssemblyPlaceEnum? AssemblyPlace, IFCElementAssemblyTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.AssemblyPlace = AssemblyPlace;
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"AssemblyPlace", AssemblyPlace},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCAssemblyPlaceEnum? _AssemblyPlace
		{
			get
			{
				return AssemblyPlace;
			}
			set
			{
				if(value is IFCAssemblyPlaceEnum val)
				{
					AssemblyPlace = val;
				}
				else if(value == null)
				{
					AssemblyPlace = null;
				}
			}
		}
		public virtual Global.IFCElementAssemblyTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCElementAssemblyTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElementComponent
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDiscreteAccessory
	/// ,IfcFastener))
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCElementComponent : IFCElement, Global.IFCElementComponent
	{
		public IFCElementComponent() : base()
		{
		}
		public IFCElementComponent(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcElementComponentType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDiscreteAccessoryType
	/// ,IfcFastenerType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCElementComponentType : IFCElementType, Global.IFCElementComponentType
	{
		public IFCElementComponentType() : base()
		{
		}
		public IFCElementComponentType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcElementQuantity
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// MethodOfMeasurement : OPTIONAL IfcLabel;
	/// Quantities : SET [1:?] OF IfcPhysicalQuantity;
	/// END_ENTITY;
	/// <summary>
	public class IFCElementQuantity : IFCPropertySetDefinition, Global.IFCElementQuantity
	{
		public virtual IFCLabel? MethodOfMeasurement { get; set; }
		public virtual IFC_Attributes<IFCPhysicalQuantity>? Quantities { get; set; }
		public IFCElementQuantity() : base()
		{
		}
		public IFCElementQuantity(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? MethodOfMeasurement, IFC_Attributes<IFCPhysicalQuantity>? Quantities) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.MethodOfMeasurement = MethodOfMeasurement;
			this.Quantities = Quantities;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"MethodOfMeasurement", MethodOfMeasurement},
				{"Quantities", Quantities}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _MethodOfMeasurement
		{
			get
			{
				return MethodOfMeasurement;
			}
			set
			{
				if(value is IFCLabel val)
				{
					MethodOfMeasurement = val;
				}
				else if(value == null)
				{
					MethodOfMeasurement = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPhysicalQuantity>? _Quantities
		{
			get
			{
				if(Quantities != null)
				{
					IFC_Attributes<Global.IFCPhysicalQuantity>? items = new IFC_Attributes<Global.IFCPhysicalQuantity>();
					foreach (IFCPhysicalQuantity item in Quantities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Quantities = null;
				}
				else
				{
					Quantities = new IFC_Attributes<IFCPhysicalQuantity>();
					foreach(var val in value)
					{
						if(val is IFCPhysicalQuantity v)
						{
							Quantities.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuildingElementType
	/// ,IfcDistributionElementType
	/// ,IfcElementComponentType
	/// ,IfcFurnishingElementType
	/// ,IfcSpatialStructureElementType
	/// ,IfcTransportElementType))
	/// SUBTYPE OF (IfcTypeProduct);
	/// ElementType : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCElementType : IFCTypeProduct, Global.IFCElementType
	{
		public virtual IFCLabel? ElementType { get; set; }
		public IFCElementType() : base()
		{
		}
		public IFCElementType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag)
		{
			this.ElementType = ElementType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCLabel? _ElementType
		{
			get
			{
				return ElementType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ElementType = val;
				}
				else if(value == null)
				{
					ElementType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcElementarySurface
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPlane))
	/// SUBTYPE OF (IfcSurface);
	/// Position : IfcAxis2Placement3D;
	/// DERIVE
	/// Dim : IfcDimensionCount := Position.Dim;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCElementarySurface : IFCSurface, Global.IFCElementarySurface
	{
		public virtual IFCAxis2Placement3D? Position { get; set; }
		public override IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCElementarySurface.Dim
				// Position.Dim;
				return null;
				//END_MANUAL
			}
		}
		public IFCElementarySurface() : base()
		{
		}
		public IFCElementarySurface(IFCAxis2Placement3D? Position) : base ()
		{
			this.Position = Position;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Position", Position}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IFCAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
		public override Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEllipse
	/// SUBTYPE OF (IfcConic);
	/// SemiAxis1 : IfcPositiveLengthMeasure;
	/// SemiAxis2 : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCEllipse : IFCConic, Global.IFCEllipse
	{
		public virtual IFCPositiveLengthMeasure? SemiAxis1 { get; set; }
		public virtual IFCPositiveLengthMeasure? SemiAxis2 { get; set; }
		public IFCEllipse() : base()
		{
		}
		public IFCEllipse(IFCAxis2Placement? Position, IFCPositiveLengthMeasure? SemiAxis1, IFCPositiveLengthMeasure? SemiAxis2) : base (Position)
		{
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Position", Position},
				{"SemiAxis1", SemiAxis1},
				{"SemiAxis2", SemiAxis2}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _SemiAxis1
		{
			get
			{
				return SemiAxis1;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					SemiAxis1 = val;
				}
				else if(value == null)
				{
					SemiAxis1 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _SemiAxis2
		{
			get
			{
				return SemiAxis2;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					SemiAxis2 = val;
				}
				else if(value == null)
				{
					SemiAxis2 = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEllipseProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// SemiAxis1 : IfcPositiveLengthMeasure;
	/// SemiAxis2 : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCEllipseProfileDef : IFCParameterizedProfileDef, Global.IFCEllipseProfileDef
	{
		public virtual IFCPositiveLengthMeasure? SemiAxis1 { get; set; }
		public virtual IFCPositiveLengthMeasure? SemiAxis2 { get; set; }
		public IFCEllipseProfileDef() : base()
		{
		}
		public IFCEllipseProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? SemiAxis1, IFCPositiveLengthMeasure? SemiAxis2) : base (ProfileType, ProfileName, Position)
		{
			this.SemiAxis1 = SemiAxis1;
			this.SemiAxis2 = SemiAxis2;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"SemiAxis1", SemiAxis1},
				{"SemiAxis2", SemiAxis2}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _SemiAxis1
		{
			get
			{
				return SemiAxis1;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					SemiAxis1 = val;
				}
				else if(value == null)
				{
					SemiAxis1 = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _SemiAxis2
		{
			get
			{
				return SemiAxis2;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					SemiAxis2 = val;
				}
				else if(value == null)
				{
					SemiAxis2 = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEnergyConversionDevice
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCEnergyConversionDevice : IFCDistributionFlowElement, Global.IFCEnergyConversionDevice
	{
		public IFCEnergyConversionDevice() : base()
		{
		}
		public IFCEnergyConversionDevice(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"HasControlElements", HasControlElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcEnergyConversionDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAirToAirHeatRecoveryType
	/// ,IfcBoilerType
	/// ,IfcChillerType
	/// ,IfcCoilType
	/// ,IfcCondenserType
	/// ,IfcCooledBeamType
	/// ,IfcCoolingTowerType
	/// ,IfcElectricGeneratorType
	/// ,IfcElectricMotorType
	/// ,IfcEvaporativeCoolerType
	/// ,IfcEvaporatorType
	/// ,IfcHeatExchangerType
	/// ,IfcHumidifierType
	/// ,IfcMotorConnectionType
	/// ,IfcSpaceHeaterType
	/// ,IfcTransformerType
	/// ,IfcTubeBundleType
	/// ,IfcUnitaryEquipmentType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCEnergyConversionDeviceType : IFCDistributionFlowElementType, Global.IFCEnergyConversionDeviceType
	{
		public IFCEnergyConversionDeviceType() : base()
		{
		}
		public IFCEnergyConversionDeviceType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcEnergyProperties
	/// SUPERTYPE OF (ONEOF
	/// (IfcElectricalBaseProperties))
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// EnergySequence : OPTIONAL IfcEnergySequenceEnum;
	/// UserDefinedEnergySequence : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IFCEnergyProperties : IFCPropertySetDefinition, Global.IFCEnergyProperties
	{
		public virtual IFCEnergySequenceEnum? EnergySequence { get; set; }
		public virtual IFCLabel? UserDefinedEnergySequence { get; set; }
		public IFCEnergyProperties() : base()
		{
		}
		public IFCEnergyProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCEnergySequenceEnum? EnergySequence, IFCLabel? UserDefinedEnergySequence) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.EnergySequence = EnergySequence;
			this.UserDefinedEnergySequence = UserDefinedEnergySequence;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"EnergySequence", EnergySequence},
				{"UserDefinedEnergySequence", UserDefinedEnergySequence}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCEnergySequenceEnum? _EnergySequence
		{
			get
			{
				return EnergySequence;
			}
			set
			{
				if(value is IFCEnergySequenceEnum val)
				{
					EnergySequence = val;
				}
				else if(value == null)
				{
					EnergySequence = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedEnergySequence
		{
			get
			{
				return UserDefinedEnergySequence;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedEnergySequence = val;
				}
				else if(value == null)
				{
					UserDefinedEnergySequence = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEnvironmentalImpactValue
	/// SUBTYPE OF (IfcAppliedValue);
	/// ImpactType : IfcLabel;
	/// Category : IfcEnvironmentalImpactCategoryEnum;
	/// UserDefinedCategory : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : (Category <> IfcEnvironmentalImpactCategoryEnum.USERDEFINED) OR
	/// ((Category = IfcEnvironmentalImpactCategoryEnum.USERDEFINED) AND EXISTS(SELF\IfcEnvironmentalImpactValue.UserDefinedCategory));
	/// END_ENTITY;
	/// <summary>
	public class IFCEnvironmentalImpactValue : IFCAppliedValue, Global.IFCEnvironmentalImpactValue
	{
		public virtual IFCLabel? ImpactType { get; set; }
		public virtual IFCEnvironmentalImpactCategoryEnum? Category { get; set; }
		public virtual IFCLabel? UserDefinedCategory { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCEnvironmentalImpactValue() : base()
		{
		}
		public IFCEnvironmentalImpactValue(IFCLabel? Name, IFCText? Description, IFCAppliedValueSelect? AppliedValue, IFCMeasureWithUnit? UnitBasis, IFCDateTimeSelect? ApplicableDate, IFCDateTimeSelect? FixedUntilDate, IFCLabel? ImpactType, IFCEnvironmentalImpactCategoryEnum? Category, IFCLabel? UserDefinedCategory) : base (Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate)
		{
			this.ImpactType = ImpactType;
			this.Category = Category;
			this.UserDefinedCategory = UserDefinedCategory;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"AppliedValue", AppliedValue},
				{"UnitBasis", UnitBasis},
				{"ApplicableDate", ApplicableDate},
				{"FixedUntilDate", FixedUntilDate},
				{"ImpactType", ImpactType},
				{"Category", Category},
				{"UserDefinedCategory", UserDefinedCategory}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ValuesReferenced", ValuesReferenced},
				{"ValueOfComponents", ValueOfComponents},
				{"IsComponentIn", IsComponentIn}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _ImpactType
		{
			get
			{
				return ImpactType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ImpactType = val;
				}
				else if(value == null)
				{
					ImpactType = null;
				}
			}
		}
		public virtual Global.IFCEnvironmentalImpactCategoryEnum? _Category
		{
			get
			{
				return Category;
			}
			set
			{
				if(value is IFCEnvironmentalImpactCategoryEnum val)
				{
					Category = val;
				}
				else if(value == null)
				{
					Category = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedCategory
		{
			get
			{
				return UserDefinedCategory;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedCategory = val;
				}
				else if(value == null)
				{
					UserDefinedCategory = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEquipmentElement
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCEquipmentElement : IFCElement, Global.IFCEquipmentElement
	{
		public IFCEquipmentElement() : base()
		{
		}
		public IFCEquipmentElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcEquipmentStandard
	/// SUBTYPE OF (IfcControl);
	/// END_ENTITY;
	/// <summary>
	public class IFCEquipmentStandard : IFCControl, Global.IFCEquipmentStandard
	{
		public IFCEquipmentStandard() : base()
		{
		}
		public IFCEquipmentStandard(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcEvaporativeCoolerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcEvaporativeCoolerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcEvaporativeCoolerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcEvaporativeCoolerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCEvaporativeCoolerType : IFCEnergyConversionDeviceType, Global.IFCEvaporativeCoolerType
	{
		public virtual IFCEvaporativeCoolerTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCEvaporativeCoolerType() : base()
		{
		}
		public IFCEvaporativeCoolerType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCEvaporativeCoolerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCEvaporativeCoolerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCEvaporativeCoolerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcEvaporatorType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcEvaporatorTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcEvaporatorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcEvaporatorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCEvaporatorType : IFCEnergyConversionDeviceType, Global.IFCEvaporatorType
	{
		public virtual IFCEvaporatorTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCEvaporatorType() : base()
		{
		}
		public IFCEvaporatorType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCEvaporatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCEvaporatorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCEvaporatorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcExtendedMaterialProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// ExtendedProperties : SET [1:?] OF IfcProperty;
	/// Description : OPTIONAL IfcText;
	/// Name : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IFCExtendedMaterialProperties : IFCMaterialProperties, Global.IFCExtendedMaterialProperties
	{
		public virtual IFC_Attributes<IFCProperty>? ExtendedProperties { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public IFCExtendedMaterialProperties() : base()
		{
		}
		public IFCExtendedMaterialProperties(IFCMaterial? Material, IFC_Attributes<IFCProperty>? ExtendedProperties, IFCText? Description, IFCLabel? Name) : base (Material)
		{
			this.ExtendedProperties = ExtendedProperties;
			this.Description = Description;
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"ExtendedProperties", ExtendedProperties},
				{"Description", Description},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCProperty>? _ExtendedProperties
		{
			get
			{
				if(ExtendedProperties != null)
				{
					IFC_Attributes<Global.IFCProperty>? items = new IFC_Attributes<Global.IFCProperty>();
					foreach (IFCProperty item in ExtendedProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ExtendedProperties = null;
				}
				else
				{
					ExtendedProperties = new IFC_Attributes<IFCProperty>();
					foreach(var val in value)
					{
						if(val is IFCProperty v)
						{
							ExtendedProperties.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcExternalReference
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcClassificationReference
	/// ,IfcDocumentReference
	/// ,IfcExternallyDefinedHatchStyle
	/// ,IfcExternallyDefinedSurfaceStyle
	/// ,IfcExternallyDefinedSymbol
	/// ,IfcExternallyDefinedTextFont
	/// ,IfcLibraryReference));
	/// Location : OPTIONAL IfcLabel;
	/// ItemReference : OPTIONAL IfcIdentifier;
	/// Name : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS(ItemReference) OR EXISTS(Location) OR EXISTS(Name);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCExternalReference : IFC_ClassEntity, IFCLightDistributionDataSourceSelect, IFCObjectReferenceSelect, Global.IFCExternalReference
	{
		public virtual IFCLabel? Location { get; set; }
		public virtual IFCIdentifier? ItemReference { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCExternalReference() : base()
		{
		}
		public IFCExternalReference(IFCLabel? Location, IFCIdentifier? ItemReference, IFCLabel? Name) : base ()
		{
			this.Location = Location;
			this.ItemReference = ItemReference;
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location},
				{"ItemReference", ItemReference},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
		public virtual Global.IFCIdentifier? _ItemReference
		{
			get
			{
				return ItemReference;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					ItemReference = val;
				}
				else if(value == null)
				{
					ItemReference = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcExternallyDefinedHatchStyle
	/// SUBTYPE OF (IfcExternalReference);
	/// END_ENTITY;
	/// <summary>
	public class IFCExternallyDefinedHatchStyle : IFCExternalReference, IFCFillStyleSelect, Global.IFCExternallyDefinedHatchStyle
	{
		public IFCExternallyDefinedHatchStyle() : base()
		{
		}
		public IFCExternallyDefinedHatchStyle(IFCLabel? Location, IFCIdentifier? ItemReference, IFCLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location},
				{"ItemReference", ItemReference},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExternallyDefinedSurfaceStyle
	/// SUBTYPE OF (IfcExternalReference);
	/// END_ENTITY;
	/// <summary>
	public class IFCExternallyDefinedSurfaceStyle : IFCExternalReference, IFCSurfaceStyleElementSelect, Global.IFCExternallyDefinedSurfaceStyle
	{
		public IFCExternallyDefinedSurfaceStyle() : base()
		{
		}
		public IFCExternallyDefinedSurfaceStyle(IFCLabel? Location, IFCIdentifier? ItemReference, IFCLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location},
				{"ItemReference", ItemReference},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExternallyDefinedSymbol
	/// SUBTYPE OF (IfcExternalReference);
	/// END_ENTITY;
	/// <summary>
	public class IFCExternallyDefinedSymbol : IFCExternalReference, IFCDefinedSymbolSelect, Global.IFCExternallyDefinedSymbol
	{
		public IFCExternallyDefinedSymbol() : base()
		{
		}
		public IFCExternallyDefinedSymbol(IFCLabel? Location, IFCIdentifier? ItemReference, IFCLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location},
				{"ItemReference", ItemReference},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExternallyDefinedTextFont
	/// SUBTYPE OF (IfcExternalReference);
	/// END_ENTITY;
	/// <summary>
	public class IFCExternallyDefinedTextFont : IFCExternalReference, IFCTextFontSelect, Global.IFCExternallyDefinedTextFont
	{
		public IFCExternallyDefinedTextFont() : base()
		{
		}
		public IFCExternallyDefinedTextFont(IFCLabel? Location, IFCIdentifier? ItemReference, IFCLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location},
				{"ItemReference", ItemReference},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcExtrudedAreaSolid
	/// SUBTYPE OF (IfcSweptAreaSolid);
	/// ExtrudedDirection : IfcDirection;
	/// Depth : IfcPositiveLengthMeasure;
	/// WHERE
	/// WR31 : IfcDotProduct(IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcDirection([0.0,0.0,1.0]), SELF.ExtrudedDirection) <> 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IFCExtrudedAreaSolid : IFCSweptAreaSolid, Global.IFCExtrudedAreaSolid
	{
		public virtual IFCDirection? ExtrudedDirection { get; set; }
		public virtual IFCPositiveLengthMeasure? Depth { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCExtrudedAreaSolid() : base()
		{
		}
		public IFCExtrudedAreaSolid(IFCProfileDef? SweptArea, IFCAxis2Placement3D? Position, IFCDirection? ExtrudedDirection, IFCPositiveLengthMeasure? Depth) : base (SweptArea, Position)
		{
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SweptArea", SweptArea},
				{"Position", Position},
				{"ExtrudedDirection", ExtrudedDirection},
				{"Depth", Depth}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR22", is_WR22},
				{"is_WR31", is_WR31}
			};
		}
		public virtual Global.IFCDirection? _ExtrudedDirection
		{
			get
			{
				return ExtrudedDirection;
			}
			set
			{
				if(value is IFCDirection val)
				{
					ExtrudedDirection = val;
				}
				else if(value == null)
				{
					ExtrudedDirection = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFace
	/// SUPERTYPE OF (ONEOF
	/// (IfcFaceSurface))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// Bounds : SET [1:?] OF IfcFaceBound;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(temp <* Bounds | 'IFC2X3.IFCFACEOUTERBOUND' IN TYPEOF(temp))) <= 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCFace : IFCTopologicalRepresentationItem, Global.IFCFace
	{
		public virtual IFC_Attributes<IFCFaceBound>? Bounds { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCFace() : base()
		{
		}
		public IFCFace(IFC_Attributes<IFCFaceBound>? Bounds) : base ()
		{
			this.Bounds = Bounds;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Bounds", Bounds}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCFaceBound>? _Bounds
		{
			get
			{
				if(Bounds != null)
				{
					IFC_Attributes<Global.IFCFaceBound>? items = new IFC_Attributes<Global.IFCFaceBound>();
					foreach (IFCFaceBound item in Bounds)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Bounds = null;
				}
				else
				{
					Bounds = new IFC_Attributes<IFCFaceBound>();
					foreach(var val in value)
					{
						if(val is IFCFaceBound v)
						{
							Bounds.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFaceBasedSurfaceModel
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// FbsmFaces : SET [1:?] OF IfcConnectedFaceSet;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IFCFaceBasedSurfaceModel : IFCGeometricRepresentationItem, IFCSurfaceOrFaceSurface, Global.IFCFaceBasedSurfaceModel
	{
		public virtual IFC_Attributes<IFCConnectedFaceSet>? FbsmFaces { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCFaceBasedSurfaceModel.Dim
				// 3;
				return null;
				//END_MANUAL
			}
		}
		public IFCFaceBasedSurfaceModel() : base()
		{
		}
		public IFCFaceBasedSurfaceModel(IFC_Attributes<IFCConnectedFaceSet>? FbsmFaces) : base ()
		{
			this.FbsmFaces = FbsmFaces;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"FbsmFaces", FbsmFaces}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCConnectedFaceSet>? _FbsmFaces
		{
			get
			{
				if(FbsmFaces != null)
				{
					IFC_Attributes<Global.IFCConnectedFaceSet>? items = new IFC_Attributes<Global.IFCConnectedFaceSet>();
					foreach (IFCConnectedFaceSet item in FbsmFaces)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					FbsmFaces = null;
				}
				else
				{
					FbsmFaces = new IFC_Attributes<IFCConnectedFaceSet>();
					foreach(var val in value)
					{
						if(val is IFCConnectedFaceSet v)
						{
							FbsmFaces.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFaceBound
	/// SUPERTYPE OF (ONEOF
	/// (IfcFaceOuterBound))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// Bound : IfcLoop;
	/// Orientation : BOOLEAN;
	/// END_ENTITY;
	/// <summary>
	public class IFCFaceBound : IFCTopologicalRepresentationItem, Global.IFCFaceBound
	{
		public virtual IFCLoop? Bound { get; set; }
		public virtual BOOLEAN? Orientation { get; set; }
		public IFCFaceBound() : base()
		{
		}
		public IFCFaceBound(IFCLoop? Bound, BOOLEAN? Orientation) : base ()
		{
			this.Bound = Bound;
			this.Orientation = Orientation;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Bound", Bound},
				{"Orientation", Orientation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLoop? _Bound
		{
			get
			{
				return Bound;
			}
			set
			{
				if(value is IFCLoop val)
				{
					Bound = val;
				}
				else if(value == null)
				{
					Bound = null;
				}
			}
		}
		public virtual BOOLEAN? _Orientation
		{
			get
			{
				return Orientation;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					Orientation = val;
				}
				else if(value == null)
				{
					Orientation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFaceOuterBound
	/// SUBTYPE OF (IfcFaceBound);
	/// END_ENTITY;
	/// <summary>
	public class IFCFaceOuterBound : IFCFaceBound, Global.IFCFaceOuterBound
	{
		public IFCFaceOuterBound() : base()
		{
		}
		public IFCFaceOuterBound(IFCLoop? Bound, BOOLEAN? Orientation) : base (Bound, Orientation)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Bound", Bound},
				{"Orientation", Orientation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFaceSurface
	/// SUBTYPE OF (IfcFace);
	/// FaceSurface : IfcSurface;
	/// SameSense : BOOLEAN;
	/// END_ENTITY;
	/// <summary>
	public class IFCFaceSurface : IFCFace, IFCSurfaceOrFaceSurface, Global.IFCFaceSurface
	{
		public virtual IFCSurface? FaceSurface { get; set; }
		public virtual BOOLEAN? SameSense { get; set; }
		public IFCFaceSurface() : base()
		{
		}
		public IFCFaceSurface(IFC_Attributes<IFCFaceBound>? Bounds, IFCSurface? FaceSurface, BOOLEAN? SameSense) : base (Bounds)
		{
			this.FaceSurface = FaceSurface;
			this.SameSense = SameSense;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Bounds", Bounds},
				{"FaceSurface", FaceSurface},
				{"SameSense", SameSense}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCSurface? _FaceSurface
		{
			get
			{
				return FaceSurface;
			}
			set
			{
				if(value is IFCSurface val)
				{
					FaceSurface = val;
				}
				else if(value == null)
				{
					FaceSurface = null;
				}
			}
		}
		public virtual BOOLEAN? _SameSense
		{
			get
			{
				return SameSense;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					SameSense = val;
				}
				else if(value == null)
				{
					SameSense = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFacetedBrep
	/// SUBTYPE OF (IfcManifoldSolidBrep);
	/// END_ENTITY;
	/// <summary>
	public class IFCFacetedBrep : IFCManifoldSolidBrep, Global.IFCFacetedBrep
	{
		public IFCFacetedBrep() : base()
		{
		}
		public IFCFacetedBrep(IFCClosedShell? Outer) : base (Outer)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Outer", Outer}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFacetedBrepWithVoids
	/// SUBTYPE OF (IfcManifoldSolidBrep);
	/// Voids : SET [1:?] OF IfcClosedShell;
	/// END_ENTITY;
	/// <summary>
	public class IFCFacetedBrepWithVoids : IFCManifoldSolidBrep, Global.IFCFacetedBrepWithVoids
	{
		public virtual IFC_Attributes<IFCClosedShell>? Voids { get; set; }
		public IFCFacetedBrepWithVoids() : base()
		{
		}
		public IFCFacetedBrepWithVoids(IFCClosedShell? Outer, IFC_Attributes<IFCClosedShell>? Voids) : base (Outer)
		{
			this.Voids = Voids;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Outer", Outer},
				{"Voids", Voids}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCClosedShell>? _Voids
		{
			get
			{
				if(Voids != null)
				{
					IFC_Attributes<Global.IFCClosedShell>? items = new IFC_Attributes<Global.IFCClosedShell>();
					foreach (IFCClosedShell item in Voids)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Voids = null;
				}
				else
				{
					Voids = new IFC_Attributes<IFCClosedShell>();
					foreach(var val in value)
					{
						if(val is IFCClosedShell v)
						{
							Voids.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFailureConnectionCondition
	/// SUBTYPE OF (IfcStructuralConnectionCondition);
	/// TensionFailureX : OPTIONAL IfcForceMeasure;
	/// TensionFailureY : OPTIONAL IfcForceMeasure;
	/// TensionFailureZ : OPTIONAL IfcForceMeasure;
	/// CompressionFailureX : OPTIONAL IfcForceMeasure;
	/// CompressionFailureY : OPTIONAL IfcForceMeasure;
	/// CompressionFailureZ : OPTIONAL IfcForceMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCFailureConnectionCondition : IFCStructuralConnectionCondition, Global.IFCFailureConnectionCondition
	{
		public virtual IFCForceMeasure? TensionFailureX { get; set; }
		public virtual IFCForceMeasure? TensionFailureY { get; set; }
		public virtual IFCForceMeasure? TensionFailureZ { get; set; }
		public virtual IFCForceMeasure? CompressionFailureX { get; set; }
		public virtual IFCForceMeasure? CompressionFailureY { get; set; }
		public virtual IFCForceMeasure? CompressionFailureZ { get; set; }
		public IFCFailureConnectionCondition() : base()
		{
		}
		public IFCFailureConnectionCondition(IFCLabel? Name, IFCForceMeasure? TensionFailureX, IFCForceMeasure? TensionFailureY, IFCForceMeasure? TensionFailureZ, IFCForceMeasure? CompressionFailureX, IFCForceMeasure? CompressionFailureY, IFCForceMeasure? CompressionFailureZ) : base (Name)
		{
			this.TensionFailureX = TensionFailureX;
			this.TensionFailureY = TensionFailureY;
			this.TensionFailureZ = TensionFailureZ;
			this.CompressionFailureX = CompressionFailureX;
			this.CompressionFailureY = CompressionFailureY;
			this.CompressionFailureZ = CompressionFailureZ;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"TensionFailureX", TensionFailureX},
				{"TensionFailureY", TensionFailureY},
				{"TensionFailureZ", TensionFailureZ},
				{"CompressionFailureX", CompressionFailureX},
				{"CompressionFailureY", CompressionFailureY},
				{"CompressionFailureZ", CompressionFailureZ}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCForceMeasure? _TensionFailureX
		{
			get
			{
				return TensionFailureX;
			}
			set
			{
				if(value is IFCForceMeasure val)
				{
					TensionFailureX = val;
				}
				else if(value == null)
				{
					TensionFailureX = null;
				}
			}
		}
		public virtual Global.IFCForceMeasure? _TensionFailureY
		{
			get
			{
				return TensionFailureY;
			}
			set
			{
				if(value is IFCForceMeasure val)
				{
					TensionFailureY = val;
				}
				else if(value == null)
				{
					TensionFailureY = null;
				}
			}
		}
		public virtual Global.IFCForceMeasure? _TensionFailureZ
		{
			get
			{
				return TensionFailureZ;
			}
			set
			{
				if(value is IFCForceMeasure val)
				{
					TensionFailureZ = val;
				}
				else if(value == null)
				{
					TensionFailureZ = null;
				}
			}
		}
		public virtual Global.IFCForceMeasure? _CompressionFailureX
		{
			get
			{
				return CompressionFailureX;
			}
			set
			{
				if(value is IFCForceMeasure val)
				{
					CompressionFailureX = val;
				}
				else if(value == null)
				{
					CompressionFailureX = null;
				}
			}
		}
		public virtual Global.IFCForceMeasure? _CompressionFailureY
		{
			get
			{
				return CompressionFailureY;
			}
			set
			{
				if(value is IFCForceMeasure val)
				{
					CompressionFailureY = val;
				}
				else if(value == null)
				{
					CompressionFailureY = null;
				}
			}
		}
		public virtual Global.IFCForceMeasure? _CompressionFailureZ
		{
			get
			{
				return CompressionFailureZ;
			}
			set
			{
				if(value is IFCForceMeasure val)
				{
					CompressionFailureZ = val;
				}
				else if(value == null)
				{
					CompressionFailureZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFanType
	/// SUBTYPE OF (IfcFlowMovingDeviceType);
	/// PredefinedType : IfcFanTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcFanTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFanTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCFanType : IFCFlowMovingDeviceType, Global.IFCFanType
	{
		public virtual IFCFanTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCFanType() : base()
		{
		}
		public IFCFanType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCFanTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCFanTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCFanTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFastener
	/// SUPERTYPE OF (ONEOF
	/// (IfcMechanicalFastener))
	/// SUBTYPE OF (IfcElementComponent);
	/// END_ENTITY;
	/// <summary>
	public class IFCFastener : IFCElementComponent, Global.IFCFastener
	{
		public IFCFastener() : base()
		{
		}
		public IFCFastener(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFastenerType
	/// SUPERTYPE OF (ONEOF
	/// (IfcMechanicalFastenerType))
	/// SUBTYPE OF (IfcElementComponentType);
	/// END_ENTITY;
	/// <summary>
	public class IFCFastenerType : IFCElementComponentType, Global.IFCFastenerType
	{
		public IFCFastenerType() : base()
		{
		}
		public IFCFastenerType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFeatureElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcFeatureElementAddition
	/// ,IfcFeatureElementSubtraction))
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCFeatureElement : IFCElement, Global.IFCFeatureElement
	{
		public IFCFeatureElement() : base()
		{
		}
		public IFCFeatureElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFeatureElementAddition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcProjectionElement))
	/// SUBTYPE OF (IfcFeatureElement);
	/// INVERSE
	/// ProjectsElements : IfcRelProjectsElement FOR RelatedFeatureElement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCFeatureElementAddition : IFCFeatureElement, Global.IFCFeatureElementAddition
	{
		public IFCRelProjectsElement? ProjectsElements {get{return Model?.GetItems<IFCRelProjectsElement>().FirstOrDefault(x => x.RelatedFeatureElement != null && x.RelatedFeatureElement == this);}}
		public IFCFeatureElementAddition() : base()
		{
		}
		public IFCFeatureElementAddition(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"ProjectsElements", ProjectsElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCRelProjectsElement? _ProjectsElements
		{
			get
			{
				return ProjectsElements;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFeatureElementSubtraction
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcEdgeFeature
	/// ,IfcOpeningElement))
	/// SUBTYPE OF (IfcFeatureElement);
	/// INVERSE
	/// VoidsElements : IfcRelVoidsElement FOR RelatedOpeningElement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCFeatureElementSubtraction : IFCFeatureElement, Global.IFCFeatureElementSubtraction
	{
		public IFCRelVoidsElement? VoidsElements {get{return Model?.GetItems<IFCRelVoidsElement>().FirstOrDefault(x => x.RelatedOpeningElement != null && x.RelatedOpeningElement == this);}}
		public IFCFeatureElementSubtraction() : base()
		{
		}
		public IFCFeatureElementSubtraction(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"VoidsElements", VoidsElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCRelVoidsElement? _VoidsElements
		{
			get
			{
				return VoidsElements;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFillAreaStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// FillStyles : SET [1:?] OF IfcFillStyleSelect;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(Style <* SELF.FillStyles |
	/// 'IFC2X3.IFCCOLOUR' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR12 : SIZEOF(QUERY(Style <* SELF.FillStyles |
	/// 'IFC2X3.IFCEXTERNALLYDEFINEDHATCHSTYLE' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR13 : IfcCorrectFillAreaStyle(SELF.FillStyles);
	/// END_ENTITY;
	/// <summary>
	public class IFCFillAreaStyle : IFCPresentationStyle, IFCPresentationStyleSelect, Global.IFCFillAreaStyle
	{
		public virtual IFC_Attributes<IFCFillStyleSelect>? FillStyles { get; set; }
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR12
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR13
		{
			get
			{
				return true;
			}
		}
		public IFCFillAreaStyle() : base()
		{
		}
		public IFCFillAreaStyle(IFCLabel? Name, IFC_Attributes<IFCFillStyleSelect>? FillStyles) : base (Name)
		{
			this.FillStyles = FillStyles;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"FillStyles", FillStyles}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR13", is_WR13}
			};
		}
		public virtual IFC_Attributes<Global.IFCFillStyleSelect>? _FillStyles
		{
			get
			{
				if(FillStyles != null)
				{
					IFC_Attributes<Global.IFCFillStyleSelect>? items = new IFC_Attributes<Global.IFCFillStyleSelect>();
					foreach (IFCFillStyleSelect item in FillStyles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					FillStyles = null;
				}
				else
				{
					FillStyles = new IFC_Attributes<IFCFillStyleSelect>();
					foreach(var val in value)
					{
						if(val is IFCFillStyleSelect v)
						{
							FillStyles.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFillAreaStyleHatching
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// HatchLineAppearance : IfcCurveStyle;
	/// StartOfNextHatchLine : IfcHatchLineDistanceSelect;
	/// PointOfReferenceHatchLine : OPTIONAL IfcCartesianPoint;
	/// PatternStart : OPTIONAL IfcCartesianPoint;
	/// HatchLineAngle : IfcPlaneAngleMeasure;
	/// WHERE
	/// WR21 : NOT(
	/// 'IFC2X3.IFCTWODIRECTIONREPEATFACTOR'
	/// IN TYPEOF(StartOfNextHatchLine)
	/// );
	/// WR22 : NOT(EXISTS(PatternStart))
	/// OR (PatternStart.Dim = 2);
	/// WR23 : NOT(EXISTS(PointOfReferenceHatchLine))
	/// OR (PointOfReferenceHatchLine.Dim = 2);
	/// END_ENTITY;
	/// <summary>
	public class IFCFillAreaStyleHatching : IFCGeometricRepresentationItem, IFCFillStyleSelect, Global.IFCFillAreaStyleHatching
	{
		public virtual IFCCurveStyle? HatchLineAppearance { get; set; }
		public virtual IFCHatchLineDistanceSelect? StartOfNextHatchLine { get; set; }
		public virtual IFCCartesianPoint? PointOfReferenceHatchLine { get; set; }
		public virtual IFCCartesianPoint? PatternStart { get; set; }
		public virtual IFCPlaneAngleMeasure? HatchLineAngle { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR23
		{
			get
			{
				return true;
			}
		}
		public IFCFillAreaStyleHatching() : base()
		{
		}
		public IFCFillAreaStyleHatching(IFCCurveStyle? HatchLineAppearance, IFCHatchLineDistanceSelect? StartOfNextHatchLine, IFCCartesianPoint? PointOfReferenceHatchLine, IFCCartesianPoint? PatternStart, IFCPlaneAngleMeasure? HatchLineAngle) : base ()
		{
			this.HatchLineAppearance = HatchLineAppearance;
			this.StartOfNextHatchLine = StartOfNextHatchLine;
			this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
			this.PatternStart = PatternStart;
			this.HatchLineAngle = HatchLineAngle;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HatchLineAppearance", HatchLineAppearance},
				{"StartOfNextHatchLine", StartOfNextHatchLine},
				{"PointOfReferenceHatchLine", PointOfReferenceHatchLine},
				{"PatternStart", PatternStart},
				{"HatchLineAngle", HatchLineAngle}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22},
				{"is_WR23", is_WR23}
			};
		}
		public virtual Global.IFCCurveStyle? _HatchLineAppearance
		{
			get
			{
				return HatchLineAppearance;
			}
			set
			{
				if(value is IFCCurveStyle val)
				{
					HatchLineAppearance = val;
				}
				else if(value == null)
				{
					HatchLineAppearance = null;
				}
			}
		}
		public virtual Global.IFCHatchLineDistanceSelect? _StartOfNextHatchLine
		{
			get
			{
				return StartOfNextHatchLine;
			}
			set
			{
				if(value is IFCHatchLineDistanceSelect val)
				{
					StartOfNextHatchLine = val;
				}
				else if(value == null)
				{
					StartOfNextHatchLine = null;
				}
			}
		}
		public virtual Global.IFCCartesianPoint? _PointOfReferenceHatchLine
		{
			get
			{
				return PointOfReferenceHatchLine;
			}
			set
			{
				if(value is IFCCartesianPoint val)
				{
					PointOfReferenceHatchLine = val;
				}
				else if(value == null)
				{
					PointOfReferenceHatchLine = null;
				}
			}
		}
		public virtual Global.IFCCartesianPoint? _PatternStart
		{
			get
			{
				return PatternStart;
			}
			set
			{
				if(value is IFCCartesianPoint val)
				{
					PatternStart = val;
				}
				else if(value == null)
				{
					PatternStart = null;
				}
			}
		}
		public virtual Global.IFCPlaneAngleMeasure? _HatchLineAngle
		{
			get
			{
				return HatchLineAngle;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					HatchLineAngle = val;
				}
				else if(value == null)
				{
					HatchLineAngle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFillAreaStyleTileSymbolWithStyle
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Symbol : IfcAnnotationSymbolOccurrence;
	/// END_ENTITY;
	/// <summary>
	public class IFCFillAreaStyleTileSymbolWithStyle : IFCGeometricRepresentationItem, IFCFillAreaStyleTileShapeSelect, Global.IFCFillAreaStyleTileSymbolWithStyle
	{
		public virtual IFCAnnotationSymbolOccurrence? Symbol { get; set; }
		public IFCFillAreaStyleTileSymbolWithStyle() : base()
		{
		}
		public IFCFillAreaStyleTileSymbolWithStyle(IFCAnnotationSymbolOccurrence? Symbol) : base ()
		{
			this.Symbol = Symbol;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Symbol", Symbol}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCAnnotationSymbolOccurrence? _Symbol
		{
			get
			{
				return Symbol;
			}
			set
			{
				if(value is IFCAnnotationSymbolOccurrence val)
				{
					Symbol = val;
				}
				else if(value == null)
				{
					Symbol = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFillAreaStyleTiles
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// TilingPattern : IfcOneDirectionRepeatFactor;
	/// Tiles : SET [1:?] OF IfcFillAreaStyleTileShapeSelect;
	/// TilingScale : IfcPositiveRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCFillAreaStyleTiles : IFCGeometricRepresentationItem, IFCFillStyleSelect, Global.IFCFillAreaStyleTiles
	{
		public virtual IFCOneDirectionRepeatFactor? TilingPattern { get; set; }
		public virtual IFC_Attributes<IFCFillAreaStyleTileShapeSelect>? Tiles { get; set; }
		public virtual IFCPositiveRatioMeasure? TilingScale { get; set; }
		public IFCFillAreaStyleTiles() : base()
		{
		}
		public IFCFillAreaStyleTiles(IFCOneDirectionRepeatFactor? TilingPattern, IFC_Attributes<IFCFillAreaStyleTileShapeSelect>? Tiles, IFCPositiveRatioMeasure? TilingScale) : base ()
		{
			this.TilingPattern = TilingPattern;
			this.Tiles = Tiles;
			this.TilingScale = TilingScale;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"TilingPattern", TilingPattern},
				{"Tiles", Tiles},
				{"TilingScale", TilingScale}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCOneDirectionRepeatFactor? _TilingPattern
		{
			get
			{
				return TilingPattern;
			}
			set
			{
				if(value is IFCOneDirectionRepeatFactor val)
				{
					TilingPattern = val;
				}
				else if(value == null)
				{
					TilingPattern = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCFillAreaStyleTileShapeSelect>? _Tiles
		{
			get
			{
				if(Tiles != null)
				{
					IFC_Attributes<Global.IFCFillAreaStyleTileShapeSelect>? items = new IFC_Attributes<Global.IFCFillAreaStyleTileShapeSelect>();
					foreach (IFCFillAreaStyleTileShapeSelect item in Tiles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Tiles = null;
				}
				else
				{
					Tiles = new IFC_Attributes<IFCFillAreaStyleTileShapeSelect>();
					foreach(var val in value)
					{
						if(val is IFCFillAreaStyleTileShapeSelect v)
						{
							Tiles.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _TilingScale
		{
			get
			{
				return TilingScale;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					TilingScale = val;
				}
				else if(value == null)
				{
					TilingScale = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFilterType
	/// SUBTYPE OF (IfcFlowTreatmentDeviceType);
	/// PredefinedType : IfcFilterTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcFilterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFilterTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCFilterType : IFCFlowTreatmentDeviceType, Global.IFCFilterType
	{
		public virtual IFCFilterTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCFilterType() : base()
		{
		}
		public IFCFilterType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCFilterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCFilterTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCFilterTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFireSuppressionTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcFireSuppressionTerminalTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCFireSuppressionTerminalType : IFCFlowTerminalType, Global.IFCFireSuppressionTerminalType
	{
		public virtual IFCFireSuppressionTerminalTypeEnum? PredefinedType { get; set; }
		public IFCFireSuppressionTerminalType() : base()
		{
		}
		public IFCFireSuppressionTerminalType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCFireSuppressionTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCFireSuppressionTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCFireSuppressionTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFlowController
	/// SUPERTYPE OF (ONEOF
	/// (IfcElectricDistributionPoint))
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCFlowController : IFCDistributionFlowElement, Global.IFCFlowController
	{
		public IFCFlowController() : base()
		{
		}
		public IFCFlowController(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"HasControlElements", HasControlElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowControllerType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAirTerminalBoxType
	/// ,IfcDamperType
	/// ,IfcElectricTimeControlType
	/// ,IfcFlowMeterType
	/// ,IfcProtectiveDeviceType
	/// ,IfcSwitchingDeviceType
	/// ,IfcValveType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCFlowControllerType : IFCDistributionFlowElementType, Global.IFCFlowControllerType
	{
		public IFCFlowControllerType() : base()
		{
		}
		public IFCFlowControllerType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowFitting
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCFlowFitting : IFCDistributionFlowElement, Global.IFCFlowFitting
	{
		public IFCFlowFitting() : base()
		{
		}
		public IFCFlowFitting(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"HasControlElements", HasControlElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowFittingType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCableCarrierFittingType
	/// ,IfcDuctFittingType
	/// ,IfcJunctionBoxType
	/// ,IfcPipeFittingType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCFlowFittingType : IFCDistributionFlowElementType, Global.IFCFlowFittingType
	{
		public IFCFlowFittingType() : base()
		{
		}
		public IFCFlowFittingType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowInstrumentType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcFlowInstrumentTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCFlowInstrumentType : IFCDistributionControlElementType, Global.IFCFlowInstrumentType
	{
		public virtual IFCFlowInstrumentTypeEnum? PredefinedType { get; set; }
		public IFCFlowInstrumentType() : base()
		{
		}
		public IFCFlowInstrumentType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCFlowInstrumentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCFlowInstrumentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCFlowInstrumentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFlowMeterType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcFlowMeterTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcFlowMeterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcFlowMeterTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCFlowMeterType : IFCFlowControllerType, Global.IFCFlowMeterType
	{
		public virtual IFCFlowMeterTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCFlowMeterType() : base()
		{
		}
		public IFCFlowMeterType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCFlowMeterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCFlowMeterTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCFlowMeterTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFlowMovingDevice
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCFlowMovingDevice : IFCDistributionFlowElement, Global.IFCFlowMovingDevice
	{
		public IFCFlowMovingDevice() : base()
		{
		}
		public IFCFlowMovingDevice(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"HasControlElements", HasControlElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowMovingDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCompressorType
	/// ,IfcFanType
	/// ,IfcPumpType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCFlowMovingDeviceType : IFCDistributionFlowElementType, Global.IFCFlowMovingDeviceType
	{
		public IFCFlowMovingDeviceType() : base()
		{
		}
		public IFCFlowMovingDeviceType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowSegment
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCFlowSegment : IFCDistributionFlowElement, Global.IFCFlowSegment
	{
		public IFCFlowSegment() : base()
		{
		}
		public IFCFlowSegment(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"HasControlElements", HasControlElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowSegmentType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCableCarrierSegmentType
	/// ,IfcCableSegmentType
	/// ,IfcDuctSegmentType
	/// ,IfcPipeSegmentType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCFlowSegmentType : IFCDistributionFlowElementType, Global.IFCFlowSegmentType
	{
		public IFCFlowSegmentType() : base()
		{
		}
		public IFCFlowSegmentType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowStorageDevice
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCFlowStorageDevice : IFCDistributionFlowElement, Global.IFCFlowStorageDevice
	{
		public IFCFlowStorageDevice() : base()
		{
		}
		public IFCFlowStorageDevice(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"HasControlElements", HasControlElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowStorageDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcElectricFlowStorageDeviceType
	/// ,IfcTankType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCFlowStorageDeviceType : IFCDistributionFlowElementType, Global.IFCFlowStorageDeviceType
	{
		public IFCFlowStorageDeviceType() : base()
		{
		}
		public IFCFlowStorageDeviceType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTerminal
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCFlowTerminal : IFCDistributionFlowElement, Global.IFCFlowTerminal
	{
		public IFCFlowTerminal() : base()
		{
		}
		public IFCFlowTerminal(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"HasControlElements", HasControlElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTerminalType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAirTerminalType
	/// ,IfcElectricApplianceType
	/// ,IfcElectricHeaterType
	/// ,IfcFireSuppressionTerminalType
	/// ,IfcGasTerminalType
	/// ,IfcLampType
	/// ,IfcLightFixtureType
	/// ,IfcOutletType
	/// ,IfcSanitaryTerminalType
	/// ,IfcStackTerminalType
	/// ,IfcWasteTerminalType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCFlowTerminalType : IFCDistributionFlowElementType, Global.IFCFlowTerminalType
	{
		public IFCFlowTerminalType() : base()
		{
		}
		public IFCFlowTerminalType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTreatmentDevice
	/// SUBTYPE OF (IfcDistributionFlowElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCFlowTreatmentDevice : IFCDistributionFlowElement, Global.IFCFlowTreatmentDevice
	{
		public IFCFlowTreatmentDevice() : base()
		{
		}
		public IFCFlowTreatmentDevice(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"HasControlElements", HasControlElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFlowTreatmentDeviceType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDuctSilencerType
	/// ,IfcFilterType))
	/// SUBTYPE OF (IfcDistributionFlowElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCFlowTreatmentDeviceType : IFCDistributionFlowElementType, Global.IFCFlowTreatmentDeviceType
	{
		public IFCFlowTreatmentDeviceType() : base()
		{
		}
		public IFCFlowTreatmentDeviceType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFluidFlowProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// PropertySource : IfcPropertySourceEnum;
	/// FlowConditionTimeSeries : OPTIONAL IfcTimeSeries;
	/// VelocityTimeSeries : OPTIONAL IfcTimeSeries;
	/// FlowrateTimeSeries : OPTIONAL IfcTimeSeries;
	/// Fluid : IfcMaterial;
	/// PressureTimeSeries : OPTIONAL IfcTimeSeries;
	/// UserDefinedPropertySource : OPTIONAL IfcLabel;
	/// TemperatureSingleValue : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// WetBulbTemperatureSingleValue : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// WetBulbTemperatureTimeSeries : OPTIONAL IfcTimeSeries;
	/// TemperatureTimeSeries : OPTIONAL IfcTimeSeries;
	/// FlowrateSingleValue : OPTIONAL IfcDerivedMeasureValue;
	/// FlowConditionSingleValue : OPTIONAL IfcPositiveRatioMeasure;
	/// VelocitySingleValue : OPTIONAL IfcLinearVelocityMeasure;
	/// PressureSingleValue : OPTIONAL IfcPressureMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCFluidFlowProperties : IFCPropertySetDefinition, Global.IFCFluidFlowProperties
	{
		public virtual IFCPropertySourceEnum? PropertySource { get; set; }
		public virtual IFCTimeSeries? FlowConditionTimeSeries { get; set; }
		public virtual IFCTimeSeries? VelocityTimeSeries { get; set; }
		public virtual IFCTimeSeries? FlowrateTimeSeries { get; set; }
		public virtual IFCMaterial? Fluid { get; set; }
		public virtual IFCTimeSeries? PressureTimeSeries { get; set; }
		public virtual IFCLabel? UserDefinedPropertySource { get; set; }
		public virtual IFCThermodynamicTemperatureMeasure? TemperatureSingleValue { get; set; }
		public virtual IFCThermodynamicTemperatureMeasure? WetBulbTemperatureSingleValue { get; set; }
		public virtual IFCTimeSeries? WetBulbTemperatureTimeSeries { get; set; }
		public virtual IFCTimeSeries? TemperatureTimeSeries { get; set; }
		public virtual IFCDerivedMeasureValue? FlowrateSingleValue { get; set; }
		public virtual IFCPositiveRatioMeasure? FlowConditionSingleValue { get; set; }
		public virtual IFCLinearVelocityMeasure? VelocitySingleValue { get; set; }
		public virtual IFCPressureMeasure? PressureSingleValue { get; set; }
		public IFCFluidFlowProperties() : base()
		{
		}
		public IFCFluidFlowProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCPropertySourceEnum? PropertySource, IFCTimeSeries? FlowConditionTimeSeries, IFCTimeSeries? VelocityTimeSeries, IFCTimeSeries? FlowrateTimeSeries, IFCMaterial? Fluid, IFCTimeSeries? PressureTimeSeries, IFCLabel? UserDefinedPropertySource, IFCThermodynamicTemperatureMeasure? TemperatureSingleValue, IFCThermodynamicTemperatureMeasure? WetBulbTemperatureSingleValue, IFCTimeSeries? WetBulbTemperatureTimeSeries, IFCTimeSeries? TemperatureTimeSeries, IFCDerivedMeasureValue? FlowrateSingleValue, IFCPositiveRatioMeasure? FlowConditionSingleValue, IFCLinearVelocityMeasure? VelocitySingleValue, IFCPressureMeasure? PressureSingleValue) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.PropertySource = PropertySource;
			this.FlowConditionTimeSeries = FlowConditionTimeSeries;
			this.VelocityTimeSeries = VelocityTimeSeries;
			this.FlowrateTimeSeries = FlowrateTimeSeries;
			this.Fluid = Fluid;
			this.PressureTimeSeries = PressureTimeSeries;
			this.UserDefinedPropertySource = UserDefinedPropertySource;
			this.TemperatureSingleValue = TemperatureSingleValue;
			this.WetBulbTemperatureSingleValue = WetBulbTemperatureSingleValue;
			this.WetBulbTemperatureTimeSeries = WetBulbTemperatureTimeSeries;
			this.TemperatureTimeSeries = TemperatureTimeSeries;
			this.FlowrateSingleValue = FlowrateSingleValue;
			this.FlowConditionSingleValue = FlowConditionSingleValue;
			this.VelocitySingleValue = VelocitySingleValue;
			this.PressureSingleValue = PressureSingleValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"PropertySource", PropertySource},
				{"FlowConditionTimeSeries", FlowConditionTimeSeries},
				{"VelocityTimeSeries", VelocityTimeSeries},
				{"FlowrateTimeSeries", FlowrateTimeSeries},
				{"Fluid", Fluid},
				{"PressureTimeSeries", PressureTimeSeries},
				{"UserDefinedPropertySource", UserDefinedPropertySource},
				{"TemperatureSingleValue", TemperatureSingleValue},
				{"WetBulbTemperatureSingleValue", WetBulbTemperatureSingleValue},
				{"WetBulbTemperatureTimeSeries", WetBulbTemperatureTimeSeries},
				{"TemperatureTimeSeries", TemperatureTimeSeries},
				{"FlowrateSingleValue", FlowrateSingleValue},
				{"FlowConditionSingleValue", FlowConditionSingleValue},
				{"VelocitySingleValue", VelocitySingleValue},
				{"PressureSingleValue", PressureSingleValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPropertySourceEnum? _PropertySource
		{
			get
			{
				return PropertySource;
			}
			set
			{
				if(value is IFCPropertySourceEnum val)
				{
					PropertySource = val;
				}
				else if(value == null)
				{
					PropertySource = null;
				}
			}
		}
		public virtual Global.IFCTimeSeries? _FlowConditionTimeSeries
		{
			get
			{
				return FlowConditionTimeSeries;
			}
			set
			{
				if(value is IFCTimeSeries val)
				{
					FlowConditionTimeSeries = val;
				}
				else if(value == null)
				{
					FlowConditionTimeSeries = null;
				}
			}
		}
		public virtual Global.IFCTimeSeries? _VelocityTimeSeries
		{
			get
			{
				return VelocityTimeSeries;
			}
			set
			{
				if(value is IFCTimeSeries val)
				{
					VelocityTimeSeries = val;
				}
				else if(value == null)
				{
					VelocityTimeSeries = null;
				}
			}
		}
		public virtual Global.IFCTimeSeries? _FlowrateTimeSeries
		{
			get
			{
				return FlowrateTimeSeries;
			}
			set
			{
				if(value is IFCTimeSeries val)
				{
					FlowrateTimeSeries = val;
				}
				else if(value == null)
				{
					FlowrateTimeSeries = null;
				}
			}
		}
		public virtual Global.IFCMaterial? _Fluid
		{
			get
			{
				return Fluid;
			}
			set
			{
				if(value is IFCMaterial val)
				{
					Fluid = val;
				}
				else if(value == null)
				{
					Fluid = null;
				}
			}
		}
		public virtual Global.IFCTimeSeries? _PressureTimeSeries
		{
			get
			{
				return PressureTimeSeries;
			}
			set
			{
				if(value is IFCTimeSeries val)
				{
					PressureTimeSeries = val;
				}
				else if(value == null)
				{
					PressureTimeSeries = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedPropertySource
		{
			get
			{
				return UserDefinedPropertySource;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedPropertySource = val;
				}
				else if(value == null)
				{
					UserDefinedPropertySource = null;
				}
			}
		}
		public virtual Global.IFCThermodynamicTemperatureMeasure? _TemperatureSingleValue
		{
			get
			{
				return TemperatureSingleValue;
			}
			set
			{
				if(value is IFCThermodynamicTemperatureMeasure val)
				{
					TemperatureSingleValue = val;
				}
				else if(value == null)
				{
					TemperatureSingleValue = null;
				}
			}
		}
		public virtual Global.IFCThermodynamicTemperatureMeasure? _WetBulbTemperatureSingleValue
		{
			get
			{
				return WetBulbTemperatureSingleValue;
			}
			set
			{
				if(value is IFCThermodynamicTemperatureMeasure val)
				{
					WetBulbTemperatureSingleValue = val;
				}
				else if(value == null)
				{
					WetBulbTemperatureSingleValue = null;
				}
			}
		}
		public virtual Global.IFCTimeSeries? _WetBulbTemperatureTimeSeries
		{
			get
			{
				return WetBulbTemperatureTimeSeries;
			}
			set
			{
				if(value is IFCTimeSeries val)
				{
					WetBulbTemperatureTimeSeries = val;
				}
				else if(value == null)
				{
					WetBulbTemperatureTimeSeries = null;
				}
			}
		}
		public virtual Global.IFCTimeSeries? _TemperatureTimeSeries
		{
			get
			{
				return TemperatureTimeSeries;
			}
			set
			{
				if(value is IFCTimeSeries val)
				{
					TemperatureTimeSeries = val;
				}
				else if(value == null)
				{
					TemperatureTimeSeries = null;
				}
			}
		}
		public virtual Global.IFCDerivedMeasureValue? _FlowrateSingleValue
		{
			get
			{
				return FlowrateSingleValue;
			}
			set
			{
				if(value is IFCDerivedMeasureValue val)
				{
					FlowrateSingleValue = val;
				}
				else if(value == null)
				{
					FlowrateSingleValue = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _FlowConditionSingleValue
		{
			get
			{
				return FlowConditionSingleValue;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					FlowConditionSingleValue = val;
				}
				else if(value == null)
				{
					FlowConditionSingleValue = null;
				}
			}
		}
		public virtual Global.IFCLinearVelocityMeasure? _VelocitySingleValue
		{
			get
			{
				return VelocitySingleValue;
			}
			set
			{
				if(value is IFCLinearVelocityMeasure val)
				{
					VelocitySingleValue = val;
				}
				else if(value == null)
				{
					VelocitySingleValue = null;
				}
			}
		}
		public virtual Global.IFCPressureMeasure? _PressureSingleValue
		{
			get
			{
				return PressureSingleValue;
			}
			set
			{
				if(value is IFCPressureMeasure val)
				{
					PressureSingleValue = val;
				}
				else if(value == null)
				{
					PressureSingleValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFooting
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : IfcFootingTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcFootingTypeEnum.USERDEFINED) OR ((PredefinedType = IfcFootingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IFCFooting : IFCBuildingElement, Global.IFCFooting
	{
		public virtual IFCFootingTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCFooting() : base()
		{
		}
		public IFCFooting(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCFootingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCFootingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCFootingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFuelProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// CombustionTemperature : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// CarbonContent : OPTIONAL IfcPositiveRatioMeasure;
	/// LowerHeatingValue : OPTIONAL IfcHeatingValueMeasure;
	/// HigherHeatingValue : OPTIONAL IfcHeatingValueMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IFCFuelProperties : IFCMaterialProperties, Global.IFCFuelProperties
	{
		public virtual IFCThermodynamicTemperatureMeasure? CombustionTemperature { get; set; }
		public virtual IFCPositiveRatioMeasure? CarbonContent { get; set; }
		public virtual IFCHeatingValueMeasure? LowerHeatingValue { get; set; }
		public virtual IFCHeatingValueMeasure? HigherHeatingValue { get; set; }
		public IFCFuelProperties() : base()
		{
		}
		public IFCFuelProperties(IFCMaterial? Material, IFCThermodynamicTemperatureMeasure? CombustionTemperature, IFCPositiveRatioMeasure? CarbonContent, IFCHeatingValueMeasure? LowerHeatingValue, IFCHeatingValueMeasure? HigherHeatingValue) : base (Material)
		{
			this.CombustionTemperature = CombustionTemperature;
			this.CarbonContent = CarbonContent;
			this.LowerHeatingValue = LowerHeatingValue;
			this.HigherHeatingValue = HigherHeatingValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"CombustionTemperature", CombustionTemperature},
				{"CarbonContent", CarbonContent},
				{"LowerHeatingValue", LowerHeatingValue},
				{"HigherHeatingValue", HigherHeatingValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCThermodynamicTemperatureMeasure? _CombustionTemperature
		{
			get
			{
				return CombustionTemperature;
			}
			set
			{
				if(value is IFCThermodynamicTemperatureMeasure val)
				{
					CombustionTemperature = val;
				}
				else if(value == null)
				{
					CombustionTemperature = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _CarbonContent
		{
			get
			{
				return CarbonContent;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					CarbonContent = val;
				}
				else if(value == null)
				{
					CarbonContent = null;
				}
			}
		}
		public virtual Global.IFCHeatingValueMeasure? _LowerHeatingValue
		{
			get
			{
				return LowerHeatingValue;
			}
			set
			{
				if(value is IFCHeatingValueMeasure val)
				{
					LowerHeatingValue = val;
				}
				else if(value == null)
				{
					LowerHeatingValue = null;
				}
			}
		}
		public virtual Global.IFCHeatingValueMeasure? _HigherHeatingValue
		{
			get
			{
				return HigherHeatingValue;
			}
			set
			{
				if(value is IFCHeatingValueMeasure val)
				{
					HigherHeatingValue = val;
				}
				else if(value == null)
				{
					HigherHeatingValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcFurnishingElement
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCFurnishingElement : IFCElement, Global.IFCFurnishingElement
	{
		public IFCFurnishingElement() : base()
		{
		}
		public IFCFurnishingElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFurnishingElementType
	/// SUPERTYPE OF (ONEOF
	/// (IfcFurnitureType
	/// ,IfcSystemFurnitureElementType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public class IFCFurnishingElementType : IFCElementType, Global.IFCFurnishingElementType
	{
		public IFCFurnishingElementType() : base()
		{
		}
		public IFCFurnishingElementType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFurnitureStandard
	/// SUBTYPE OF (IfcControl);
	/// END_ENTITY;
	/// <summary>
	public class IFCFurnitureStandard : IFCControl, Global.IFCFurnitureStandard
	{
		public IFCFurnitureStandard() : base()
		{
		}
		public IFCFurnitureStandard(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcFurnitureType
	/// SUBTYPE OF (IfcFurnishingElementType);
	/// AssemblyPlace : IfcAssemblyPlaceEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCFurnitureType : IFCFurnishingElementType, Global.IFCFurnitureType
	{
		public virtual IFCAssemblyPlaceEnum? AssemblyPlace { get; set; }
		public IFCFurnitureType() : base()
		{
		}
		public IFCFurnitureType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCAssemblyPlaceEnum? AssemblyPlace) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.AssemblyPlace = AssemblyPlace;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"AssemblyPlace", AssemblyPlace}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCAssemblyPlaceEnum? _AssemblyPlace
		{
			get
			{
				return AssemblyPlace;
			}
			set
			{
				if(value is IFCAssemblyPlaceEnum val)
				{
					AssemblyPlace = val;
				}
				else if(value == null)
				{
					AssemblyPlace = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGasTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcGasTerminalTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcGasTerminalTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcGasTerminalTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCGasTerminalType : IFCFlowTerminalType, Global.IFCGasTerminalType
	{
		public virtual IFCGasTerminalTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCGasTerminalType() : base()
		{
		}
		public IFCGasTerminalType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCGasTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCGasTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCGasTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGeneralMaterialProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// MolecularWeight : OPTIONAL IfcMolecularWeightMeasure;
	/// Porosity : OPTIONAL IfcNormalisedRatioMeasure;
	/// MassDensity : OPTIONAL IfcMassDensityMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IFCGeneralMaterialProperties : IFCMaterialProperties, Global.IFCGeneralMaterialProperties
	{
		public virtual IFCMolecularWeightMeasure? MolecularWeight { get; set; }
		public virtual IFCNormalisedRatioMeasure? Porosity { get; set; }
		public virtual IFCMassDensityMeasure? MassDensity { get; set; }
		public IFCGeneralMaterialProperties() : base()
		{
		}
		public IFCGeneralMaterialProperties(IFCMaterial? Material, IFCMolecularWeightMeasure? MolecularWeight, IFCNormalisedRatioMeasure? Porosity, IFCMassDensityMeasure? MassDensity) : base (Material)
		{
			this.MolecularWeight = MolecularWeight;
			this.Porosity = Porosity;
			this.MassDensity = MassDensity;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"MolecularWeight", MolecularWeight},
				{"Porosity", Porosity},
				{"MassDensity", MassDensity}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCMolecularWeightMeasure? _MolecularWeight
		{
			get
			{
				return MolecularWeight;
			}
			set
			{
				if(value is IFCMolecularWeightMeasure val)
				{
					MolecularWeight = val;
				}
				else if(value == null)
				{
					MolecularWeight = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _Porosity
		{
			get
			{
				return Porosity;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					Porosity = val;
				}
				else if(value == null)
				{
					Porosity = null;
				}
			}
		}
		public virtual Global.IFCMassDensityMeasure? _MassDensity
		{
			get
			{
				return MassDensity;
			}
			set
			{
				if(value is IFCMassDensityMeasure val)
				{
					MassDensity = val;
				}
				else if(value == null)
				{
					MassDensity = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGeneralProfileProperties
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralProfileProperties))
	/// SUBTYPE OF (IfcProfileProperties);
	/// PhysicalWeight : OPTIONAL IfcMassPerLengthMeasure;
	/// Perimeter : OPTIONAL IfcPositiveLengthMeasure;
	/// MinimumPlateThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// MaximumPlateThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// CrossSectionArea : OPTIONAL IfcAreaMeasure;
	/// WHERE
	/// WR1 : NOT(EXISTS(CrossSectionArea)) OR (CrossSectionArea > 0.);
	/// END_ENTITY;
	/// <summary>
	public class IFCGeneralProfileProperties : IFCProfileProperties, Global.IFCGeneralProfileProperties
	{
		public virtual IFCMassPerLengthMeasure? PhysicalWeight { get; set; }
		public virtual IFCPositiveLengthMeasure? Perimeter { get; set; }
		public virtual IFCPositiveLengthMeasure? MinimumPlateThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? MaximumPlateThickness { get; set; }
		public virtual IFCAreaMeasure? CrossSectionArea { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCGeneralProfileProperties() : base()
		{
		}
		public IFCGeneralProfileProperties(IFCLabel? ProfileName, IFCProfileDef? ProfileDefinition, IFCMassPerLengthMeasure? PhysicalWeight, IFCPositiveLengthMeasure? Perimeter, IFCPositiveLengthMeasure? MinimumPlateThickness, IFCPositiveLengthMeasure? MaximumPlateThickness, IFCAreaMeasure? CrossSectionArea) : base (ProfileName, ProfileDefinition)
		{
			this.PhysicalWeight = PhysicalWeight;
			this.Perimeter = Perimeter;
			this.MinimumPlateThickness = MinimumPlateThickness;
			this.MaximumPlateThickness = MaximumPlateThickness;
			this.CrossSectionArea = CrossSectionArea;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileName", ProfileName},
				{"ProfileDefinition", ProfileDefinition},
				{"PhysicalWeight", PhysicalWeight},
				{"Perimeter", Perimeter},
				{"MinimumPlateThickness", MinimumPlateThickness},
				{"MaximumPlateThickness", MaximumPlateThickness},
				{"CrossSectionArea", CrossSectionArea}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCMassPerLengthMeasure? _PhysicalWeight
		{
			get
			{
				return PhysicalWeight;
			}
			set
			{
				if(value is IFCMassPerLengthMeasure val)
				{
					PhysicalWeight = val;
				}
				else if(value == null)
				{
					PhysicalWeight = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Perimeter
		{
			get
			{
				return Perimeter;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Perimeter = val;
				}
				else if(value == null)
				{
					Perimeter = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _MinimumPlateThickness
		{
			get
			{
				return MinimumPlateThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					MinimumPlateThickness = val;
				}
				else if(value == null)
				{
					MinimumPlateThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _MaximumPlateThickness
		{
			get
			{
				return MaximumPlateThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					MaximumPlateThickness = val;
				}
				else if(value == null)
				{
					MaximumPlateThickness = null;
				}
			}
		}
		public virtual Global.IFCAreaMeasure? _CrossSectionArea
		{
			get
			{
				return CrossSectionArea;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					CrossSectionArea = val;
				}
				else if(value == null)
				{
					CrossSectionArea = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricCurveSet
	/// SUBTYPE OF (IfcGeometricSet);
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcGeometricSet.Elements |
	/// 'IFC2X3.IFCSURFACE' IN TYPEOF(Temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCGeometricCurveSet : IFCGeometricSet, Global.IFCGeometricCurveSet
	{
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCGeometricCurveSet() : base()
		{
		}
		public IFCGeometricCurveSet(IFC_Attributes<IFCGeometricSetSelect>? Elements) : base (Elements)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Elements", Elements}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricRepresentationContext
	/// SUPERTYPE OF (ONEOF
	/// (IfcGeometricRepresentationSubContext))
	/// SUBTYPE OF (IfcRepresentationContext);
	/// CoordinateSpaceDimension : IfcDimensionCount;
	/// Precision : OPTIONAL REAL;
	/// WorldCoordinateSystem : IfcAxis2Placement;
	/// TrueNorth : OPTIONAL IfcDirection;
	/// INVERSE
	/// HasSubContexts : SET [0:?] OF IfcGeometricRepresentationSubContext FOR ParentContext;
	/// END_ENTITY;
	/// <summary>
	public class IFCGeometricRepresentationContext : IFCRepresentationContext, Global.IFCGeometricRepresentationContext
	{
		public virtual IFCDimensionCount? CoordinateSpaceDimension { get; set; }
		public virtual REAL? Precision { get; set; }
		public virtual IFCAxis2Placement? WorldCoordinateSystem { get; set; }
		public virtual IFCDirection? TrueNorth { get; set; }
		public IFC_Attributes<IFCGeometricRepresentationSubContext>? HasSubContexts {get{return new IFC_Attributes<IFCGeometricRepresentationSubContext>(Model?.GetItems<IFCGeometricRepresentationSubContext>().Where(x => x.ParentContext != null && x.ParentContext == this).ToList());}}
		public IFCGeometricRepresentationContext() : base()
		{
		}
		public IFCGeometricRepresentationContext(IFCLabel? ContextIdentifier, IFCLabel? ContextType, IFCDimensionCount? CoordinateSpaceDimension, REAL? Precision, IFCAxis2Placement? WorldCoordinateSystem, IFCDirection? TrueNorth) : base (ContextIdentifier, ContextType)
		{
			this.CoordinateSpaceDimension = CoordinateSpaceDimension;
			this.Precision = Precision;
			this.WorldCoordinateSystem = WorldCoordinateSystem;
			this.TrueNorth = TrueNorth;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ContextIdentifier", ContextIdentifier},
				{"ContextType", ContextType},
				{"CoordinateSpaceDimension", CoordinateSpaceDimension},
				{"Precision", Precision},
				{"WorldCoordinateSystem", WorldCoordinateSystem},
				{"TrueNorth", TrueNorth}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepresentationsInContext", RepresentationsInContext},
				{"HasSubContexts", HasSubContexts}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCDimensionCount? _CoordinateSpaceDimension
		{
			get
			{
				return CoordinateSpaceDimension;
			}
			set
			{
				if(value is IFCDimensionCount val)
				{
					CoordinateSpaceDimension = val;
				}
				else if(value == null)
				{
					CoordinateSpaceDimension = null;
				}
			}
		}
		public virtual REAL? _Precision
		{
			get
			{
				return Precision;
			}
			set
			{
				if(value is REAL val)
				{
					Precision = val;
				}
				else if(value == null)
				{
					Precision = null;
				}
			}
		}
		public virtual Global.IFCAxis2Placement? _WorldCoordinateSystem
		{
			get
			{
				return WorldCoordinateSystem;
			}
			set
			{
				if(value is IFCAxis2Placement val)
				{
					WorldCoordinateSystem = val;
				}
				else if(value == null)
				{
					WorldCoordinateSystem = null;
				}
			}
		}
		public virtual Global.IFCDirection? _TrueNorth
		{
			get
			{
				return TrueNorth;
			}
			set
			{
				if(value is IFCDirection val)
				{
					TrueNorth = val;
				}
				else if(value == null)
				{
					TrueNorth = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCGeometricRepresentationSubContext>? _HasSubContexts
		{
			get
			{
				if(HasSubContexts != null)
				{
					IFC_Attributes<Global.IFCGeometricRepresentationSubContext>? items = new IFC_Attributes<Global.IFCGeometricRepresentationSubContext>();
					foreach (IFCGeometricRepresentationSubContext item in HasSubContexts)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricRepresentationItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAnnotationFillArea
	/// ,IfcAnnotationSurface
	/// ,IfcBooleanResult
	/// ,IfcBoundingBox
	/// ,IfcCartesianTransformationOperator
	/// ,IfcCompositeCurveSegment
	/// ,IfcCsgPrimitive3D
	/// ,IfcCurve
	/// ,IfcDefinedSymbol
	/// ,IfcDirection
	/// ,IfcDraughtingCallout
	/// ,IfcFaceBasedSurfaceModel
	/// ,IfcFillAreaStyleHatching
	/// ,IfcFillAreaStyleTileSymbolWithStyle
	/// ,IfcFillAreaStyleTiles
	/// ,IfcGeometricSet
	/// ,IfcHalfSpaceSolid
	/// ,IfcLightSource
	/// ,IfcOneDirectionRepeatFactor
	/// ,IfcPlacement
	/// ,IfcPlanarExtent
	/// ,IfcPoint
	/// ,IfcSectionedSpine
	/// ,IfcShellBasedSurfaceModel
	/// ,IfcSolidModel
	/// ,IfcSurface
	/// ,IfcTextLiteral
	/// ,IfcVector))
	/// SUBTYPE OF (IfcRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCGeometricRepresentationItem : IFCRepresentationItem, Global.IFCGeometricRepresentationItem
	{
		public IFCGeometricRepresentationItem() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricRepresentationSubContext
	/// SUBTYPE OF (IfcGeometricRepresentationContext);
	/// ParentContext : IfcGeometricRepresentationContext;
	/// TargetScale : OPTIONAL IfcPositiveRatioMeasure;
	/// TargetView : IfcGeometricProjectionEnum;
	/// UserDefinedTargetView : OPTIONAL IfcLabel;
	/// DERIVE
	/// SELF\IfcGeometricRepresentationContext.WorldCoordinateSystem : IfcAxis2Placement := ParentContext.WorldCoordinateSystem;
	/// SELF\IfcGeometricRepresentationContext.CoordinateSpaceDimension : IfcDimensionCount := ParentContext.CoordinateSpaceDimension;
	/// SELF\IfcGeometricRepresentationContext.TrueNorth : IfcDirection := NVL(ParentContext.TrueNorth,SELF.WorldCoordinateSystem.P[2]);
	/// SELF\IfcGeometricRepresentationContext.Precision : REAL := NVL(ParentContext.Precision,1.E-5);
	/// WHERE
	/// WR31 : NOT('IFC2X3.IFCGEOMETRICREPRESENTATIONSUBCONTEXT' IN TYPEOF(ParentContext));
	/// WR32 : (TargetView <> IfcGeometricProjectionEnum.USERDEFINED) OR
	/// ((TargetView =  IfcGeometricProjectionEnum.USERDEFINED) AND
	/// EXISTS(UserDefinedTargetView));
	/// END_ENTITY;
	/// <summary>
	public class IFCGeometricRepresentationSubContext : IFCGeometricRepresentationContext, Global.IFCGeometricRepresentationSubContext
	{
		public virtual IFCGeometricRepresentationContext? ParentContext { get; set; }
		public virtual IFCPositiveRatioMeasure? TargetScale { get; set; }
		public virtual IFCGeometricProjectionEnum? TargetView { get; set; }
		public virtual IFCLabel? UserDefinedTargetView { get; set; }
		public override IFCAxis2Placement? WorldCoordinateSystem
		{
			get
			{
				//MANUAL : IFC2x3.IFCGeometricRepresentationSubContext.WorldCoordinateSystem
				// ParentContext.WorldCoordinateSystem;
				return null;
				//END_MANUAL
			}
		}
		public override IFCDimensionCount? CoordinateSpaceDimension
		{
			get
			{
				//MANUAL : IFC2x3.IFCGeometricRepresentationSubContext.CoordinateSpaceDimension
				// ParentContext.CoordinateSpaceDimension;
				return null;
				//END_MANUAL
			}
		}
		public override IFCDirection? TrueNorth
		{
			get
			{
				//MANUAL : IFC2x3.IFCGeometricRepresentationSubContext.TrueNorth
				// NVL(ParentContext.TrueNorth,SELF.WorldCoordinateSystem.P[2]);
				return null;
				//END_MANUAL
			}
		}
		public override REAL? Precision
		{
			get
			{
				//MANUAL : IFC2x3.IFCGeometricRepresentationSubContext.Precision
				// NVL(ParentContext.Precision,1.E-5);
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR32
		{
			get
			{
				return true;
			}
		}
		public IFCGeometricRepresentationSubContext() : base()
		{
		}
		public IFCGeometricRepresentationSubContext(IFCLabel? ContextIdentifier, IFCLabel? ContextType, IFCDimensionCount? CoordinateSpaceDimension, REAL? Precision, IFCAxis2Placement? WorldCoordinateSystem, IFCDirection? TrueNorth, IFCGeometricRepresentationContext? ParentContext, IFCPositiveRatioMeasure? TargetScale, IFCGeometricProjectionEnum? TargetView, IFCLabel? UserDefinedTargetView) : base (ContextIdentifier, ContextType, CoordinateSpaceDimension, Precision, WorldCoordinateSystem, TrueNorth)
		{
			this.ParentContext = ParentContext;
			this.TargetScale = TargetScale;
			this.TargetView = TargetView;
			this.UserDefinedTargetView = UserDefinedTargetView;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ContextIdentifier", ContextIdentifier},
				{"ContextType", ContextType},
				{"CoordinateSpaceDimension", CoordinateSpaceDimension},
				{"Precision", Precision},
				{"WorldCoordinateSystem", WorldCoordinateSystem},
				{"TrueNorth", TrueNorth},
				{"ParentContext", ParentContext},
				{"TargetScale", TargetScale},
				{"TargetView", TargetView},
				{"UserDefinedTargetView", UserDefinedTargetView}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"WorldCoordinateSystem", WorldCoordinateSystem},
				{"CoordinateSpaceDimension", CoordinateSpaceDimension},
				{"TrueNorth", TrueNorth},
				{"Precision", Precision}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepresentationsInContext", RepresentationsInContext},
				{"HasSubContexts", HasSubContexts}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31},
				{"is_WR32", is_WR32}
			};
		}
		public virtual Global.IFCGeometricRepresentationContext? _ParentContext
		{
			get
			{
				return ParentContext;
			}
			set
			{
				if(value is IFCGeometricRepresentationContext val)
				{
					ParentContext = val;
				}
				else if(value == null)
				{
					ParentContext = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _TargetScale
		{
			get
			{
				return TargetScale;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					TargetScale = val;
				}
				else if(value == null)
				{
					TargetScale = null;
				}
			}
		}
		public virtual Global.IFCGeometricProjectionEnum? _TargetView
		{
			get
			{
				return TargetView;
			}
			set
			{
				if(value is IFCGeometricProjectionEnum val)
				{
					TargetView = val;
				}
				else if(value == null)
				{
					TargetView = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedTargetView
		{
			get
			{
				return UserDefinedTargetView;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedTargetView = val;
				}
				else if(value == null)
				{
					UserDefinedTargetView = null;
				}
			}
		}
		public override Global.IFCAxis2Placement? _WorldCoordinateSystem
		{
			get
			{
				return WorldCoordinateSystem;
			}
		}
		public override Global.IFCDimensionCount? _CoordinateSpaceDimension
		{
			get
			{
				return CoordinateSpaceDimension;
			}
		}
		public override Global.IFCDirection? _TrueNorth
		{
			get
			{
				return TrueNorth;
			}
		}
		public override REAL? _Precision
		{
			get
			{
				return Precision;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGeometricSet
	/// SUPERTYPE OF (ONEOF
	/// (IfcGeometricCurveSet))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Elements : SET [1:?] OF IfcGeometricSetSelect;
	/// DERIVE
	/// Dim : IfcDimensionCount := Elements[1].Dim;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(Temp <* Elements |
	/// Temp.Dim <> Elements[1].Dim))
	/// = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCGeometricSet : IFCGeometricRepresentationItem, Global.IFCGeometricSet
	{
		public virtual IFC_Attributes<IFCGeometricSetSelect>? Elements { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCGeometricSet.Dim
				// Elements[1].Dim;
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public IFCGeometricSet() : base()
		{
		}
		public IFCGeometricSet(IFC_Attributes<IFCGeometricSetSelect>? Elements) : base ()
		{
			this.Elements = Elements;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Elements", Elements}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual IFC_Attributes<Global.IFCGeometricSetSelect>? _Elements
		{
			get
			{
				if(Elements != null)
				{
					IFC_Attributes<Global.IFCGeometricSetSelect>? items = new IFC_Attributes<Global.IFCGeometricSetSelect>();
					foreach (IFCGeometricSetSelect item in Elements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Elements = null;
				}
				else
				{
					Elements = new IFC_Attributes<IFCGeometricSetSelect>();
					foreach(var val in value)
					{
						if(val is IFCGeometricSetSelect v)
						{
							Elements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGrid
	/// SUBTYPE OF (IfcProduct);
	/// UAxes : LIST [1:?] OF UNIQUE IfcGridAxis;
	/// VAxes : LIST [1:?] OF UNIQUE IfcGridAxis;
	/// WAxes : OPTIONAL LIST [1:?] OF UNIQUE IfcGridAxis;
	/// INVERSE
	/// ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
	/// WHERE
	/// WR41 : EXISTS(SELF\IfcProduct.ObjectPlacement);
	/// END_ENTITY;
	/// <summary>
	public class IFCGrid : IFCProduct, Global.IFCGrid
	{
		public virtual IFC_Attributes<IFCGridAxis>? UAxes { get; set; }
		public virtual IFC_Attributes<IFCGridAxis>? VAxes { get; set; }
		public virtual IFC_Attributes<IFCGridAxis>? WAxes { get; set; }
		public IFC_Attributes<IFCRelContainedInSpatialStructure>? ContainedInStructure {get{return new IFC_Attributes<IFCRelContainedInSpatialStructure>(Model?.GetItems<IFCRelContainedInSpatialStructure>().Where(x => x.RelatedElements != null && x.RelatedElements.Contains(this)).ToList());}}
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public IFCGrid() : base()
		{
		}
		public IFCGrid(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFC_Attributes<IFCGridAxis>? UAxes, IFC_Attributes<IFCGridAxis>? VAxes, IFC_Attributes<IFCGridAxis>? WAxes) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.UAxes = UAxes;
			this.VAxes = VAxes;
			this.WAxes = WAxes;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"UAxes", UAxes},
				{"VAxes", VAxes},
				{"WAxes", WAxes}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual IFC_Attributes<Global.IFCGridAxis>? _UAxes
		{
			get
			{
				if(UAxes != null)
				{
					IFC_Attributes<Global.IFCGridAxis>? items = new IFC_Attributes<Global.IFCGridAxis>();
					foreach (IFCGridAxis item in UAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					UAxes = null;
				}
				else
				{
					UAxes = new IFC_Attributes<IFCGridAxis>();
					foreach(var val in value)
					{
						if(val is IFCGridAxis v)
						{
							UAxes.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCGridAxis>? _VAxes
		{
			get
			{
				if(VAxes != null)
				{
					IFC_Attributes<Global.IFCGridAxis>? items = new IFC_Attributes<Global.IFCGridAxis>();
					foreach (IFCGridAxis item in VAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					VAxes = null;
				}
				else
				{
					VAxes = new IFC_Attributes<IFCGridAxis>();
					foreach(var val in value)
					{
						if(val is IFCGridAxis v)
						{
							VAxes.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCGridAxis>? _WAxes
		{
			get
			{
				if(WAxes != null)
				{
					IFC_Attributes<Global.IFCGridAxis>? items = new IFC_Attributes<Global.IFCGridAxis>();
					foreach (IFCGridAxis item in WAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					WAxes = null;
				}
				else
				{
					WAxes = new IFC_Attributes<IFCGridAxis>();
					foreach(var val in value)
					{
						if(val is IFCGridAxis v)
						{
							WAxes.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelContainedInSpatialStructure>? _ContainedInStructure
		{
			get
			{
				if(ContainedInStructure != null)
				{
					IFC_Attributes<Global.IFCRelContainedInSpatialStructure>? items = new IFC_Attributes<Global.IFCRelContainedInSpatialStructure>();
					foreach (IFCRelContainedInSpatialStructure item in ContainedInStructure)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGridAxis;
	/// AxisTag : OPTIONAL IfcLabel;
	/// AxisCurve : IfcCurve;
	/// SameSense : IfcBoolean;
	/// INVERSE
	/// PartOfW : SET [0:1] OF IfcGrid FOR WAxes;
	/// PartOfV : SET [0:1] OF IfcGrid FOR VAxes;
	/// PartOfU : SET [0:1] OF IfcGrid FOR UAxes;
	/// HasIntersections : SET [0:?] OF IfcVirtualGridIntersection FOR IntersectingAxes;
	/// WHERE
	/// WR1 : AxisCurve.Dim = 2;
	/// WR2 : (SIZEOF(PartOfU) = 1) XOR (SIZEOF(PartOfV) = 1) XOR (SIZEOF(PartOfW) = 1);
	/// END_ENTITY;
	/// <summary>
	public class IFCGridAxis : IFC_ClassEntity, Global.IFCGridAxis
	{
		public virtual IFCLabel? AxisTag { get; set; }
		public virtual IFCCurve? AxisCurve { get; set; }
		public virtual IFCBoolean? SameSense { get; set; }
		public IFC_Attributes<IFCGrid>? PartOfW {get{return new IFC_Attributes<IFCGrid>(Model?.GetItems<IFCGrid>().Where(x => x.WAxes != null && x.WAxes.Contains(this)).ToList());}}
		public IFC_Attributes<IFCGrid>? PartOfV {get{return new IFC_Attributes<IFCGrid>(Model?.GetItems<IFCGrid>().Where(x => x.VAxes != null && x.VAxes.Contains(this)).ToList());}}
		public IFC_Attributes<IFCGrid>? PartOfU {get{return new IFC_Attributes<IFCGrid>(Model?.GetItems<IFCGrid>().Where(x => x.UAxes != null && x.UAxes.Contains(this)).ToList());}}
		public IFC_Attributes<IFCVirtualGridIntersection>? HasIntersections {get{return new IFC_Attributes<IFCVirtualGridIntersection>(Model?.GetItems<IFCVirtualGridIntersection>().Where(x => x.IntersectingAxes != null && x.IntersectingAxes.Contains(this)).ToList());}}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCGridAxis() : base()
		{
		}
		public IFCGridAxis(IFCLabel? AxisTag, IFCCurve? AxisCurve, IFCBoolean? SameSense) : base ()
		{
			this.AxisTag = AxisTag;
			this.AxisCurve = AxisCurve;
			this.SameSense = SameSense;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"AxisTag", AxisTag},
				{"AxisCurve", AxisCurve},
				{"SameSense", SameSense}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PartOfW", PartOfW},
				{"PartOfV", PartOfV},
				{"PartOfU", PartOfU},
				{"HasIntersections", HasIntersections}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual Global.IFCLabel? _AxisTag
		{
			get
			{
				return AxisTag;
			}
			set
			{
				if(value is IFCLabel val)
				{
					AxisTag = val;
				}
				else if(value == null)
				{
					AxisTag = null;
				}
			}
		}
		public virtual Global.IFCCurve? _AxisCurve
		{
			get
			{
				return AxisCurve;
			}
			set
			{
				if(value is IFCCurve val)
				{
					AxisCurve = val;
				}
				else if(value == null)
				{
					AxisCurve = null;
				}
			}
		}
		public virtual Global.IFCBoolean? _SameSense
		{
			get
			{
				return SameSense;
			}
			set
			{
				if(value is IFCBoolean val)
				{
					SameSense = val;
				}
				else if(value == null)
				{
					SameSense = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCGrid>? _PartOfW
		{
			get
			{
				if(PartOfW != null)
				{
					IFC_Attributes<Global.IFCGrid>? items = new IFC_Attributes<Global.IFCGrid>();
					foreach (IFCGrid item in PartOfW)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCGrid>? _PartOfV
		{
			get
			{
				if(PartOfV != null)
				{
					IFC_Attributes<Global.IFCGrid>? items = new IFC_Attributes<Global.IFCGrid>();
					foreach (IFCGrid item in PartOfV)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCGrid>? _PartOfU
		{
			get
			{
				if(PartOfU != null)
				{
					IFC_Attributes<Global.IFCGrid>? items = new IFC_Attributes<Global.IFCGrid>();
					foreach (IFCGrid item in PartOfU)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCVirtualGridIntersection>? _HasIntersections
		{
			get
			{
				if(HasIntersections != null)
				{
					IFC_Attributes<Global.IFCVirtualGridIntersection>? items = new IFC_Attributes<Global.IFCVirtualGridIntersection>();
					foreach (IFCVirtualGridIntersection item in HasIntersections)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGridPlacement
	/// SUBTYPE OF (IfcObjectPlacement);
	/// PlacementLocation : IfcVirtualGridIntersection;
	/// PlacementRefDirection : OPTIONAL IfcVirtualGridIntersection;
	/// END_ENTITY;
	/// <summary>
	public class IFCGridPlacement : IFCObjectPlacement, Global.IFCGridPlacement
	{
		public virtual IFCVirtualGridIntersection? PlacementLocation { get; set; }
		public virtual IFCVirtualGridIntersection? PlacementRefDirection { get; set; }
		public IFCGridPlacement() : base()
		{
		}
		public IFCGridPlacement(IFCVirtualGridIntersection? PlacementLocation, IFCVirtualGridIntersection? PlacementRefDirection) : base ()
		{
			this.PlacementLocation = PlacementLocation;
			this.PlacementRefDirection = PlacementRefDirection;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PlacementLocation", PlacementLocation},
				{"PlacementRefDirection", PlacementRefDirection}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PlacesObject", PlacesObject},
				{"ReferencedByPlacements", ReferencedByPlacements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCVirtualGridIntersection? _PlacementLocation
		{
			get
			{
				return PlacementLocation;
			}
			set
			{
				if(value is IFCVirtualGridIntersection val)
				{
					PlacementLocation = val;
				}
				else if(value == null)
				{
					PlacementLocation = null;
				}
			}
		}
		public virtual Global.IFCVirtualGridIntersection? _PlacementRefDirection
		{
			get
			{
				return PlacementRefDirection;
			}
			set
			{
				if(value is IFCVirtualGridIntersection val)
				{
					PlacementRefDirection = val;
				}
				else if(value == null)
				{
					PlacementRefDirection = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcGroup
	/// SUPERTYPE OF (ONEOF
	/// (IfcAsset
	/// ,IfcCondition
	/// ,IfcInventory
	/// ,IfcStructuralLoadGroup
	/// ,IfcStructuralResultGroup
	/// ,IfcSystem
	/// ,IfcZone))
	/// SUBTYPE OF (IfcObject);
	/// INVERSE
	/// IsGroupedBy : IfcRelAssignsToGroup FOR RelatingGroup;
	/// END_ENTITY;
	/// <summary>
	public class IFCGroup : IFCObject, Global.IFCGroup
	{
		public IFCRelAssignsToGroup? IsGroupedBy {get{return Model?.GetItems<IFCRelAssignsToGroup>().FirstOrDefault(x => x.RelatingGroup != null && x.RelatingGroup == this);}}
		public IFCGroup() : base()
		{
		}
		public IFCGroup(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsGroupedBy", IsGroupedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCRelAssignsToGroup? _IsGroupedBy
		{
			get
			{
				return IsGroupedBy;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcHalfSpaceSolid
	/// SUPERTYPE OF (ONEOF
	/// (IfcBoxedHalfSpace
	/// ,IfcPolygonalBoundedHalfSpace))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// BaseSurface : IfcSurface;
	/// AgreementFlag : BOOLEAN;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IFCHalfSpaceSolid : IFCGeometricRepresentationItem, IFCBooleanOperand, Global.IFCHalfSpaceSolid
	{
		public virtual IFCSurface? BaseSurface { get; set; }
		public virtual BOOLEAN? AgreementFlag { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCHalfSpaceSolid.Dim
				// 3;
				return null;
				//END_MANUAL
			}
		}
		public IFCHalfSpaceSolid() : base()
		{
		}
		public IFCHalfSpaceSolid(IFCSurface? BaseSurface, BOOLEAN? AgreementFlag) : base ()
		{
			this.BaseSurface = BaseSurface;
			this.AgreementFlag = AgreementFlag;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"BaseSurface", BaseSurface},
				{"AgreementFlag", AgreementFlag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCSurface? _BaseSurface
		{
			get
			{
				return BaseSurface;
			}
			set
			{
				if(value is IFCSurface val)
				{
					BaseSurface = val;
				}
				else if(value == null)
				{
					BaseSurface = null;
				}
			}
		}
		public virtual BOOLEAN? _AgreementFlag
		{
			get
			{
				return AgreementFlag;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					AgreementFlag = val;
				}
				else if(value == null)
				{
					AgreementFlag = null;
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcHeatExchangerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcHeatExchangerTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcHeatExchangerTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcHeatExchangerTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCHeatExchangerType : IFCEnergyConversionDeviceType, Global.IFCHeatExchangerType
	{
		public virtual IFCHeatExchangerTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCHeatExchangerType() : base()
		{
		}
		public IFCHeatExchangerType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCHeatExchangerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCHeatExchangerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCHeatExchangerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcHumidifierType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcHumidifierTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcHumidifierTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcHumidifierTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCHumidifierType : IFCEnergyConversionDeviceType, Global.IFCHumidifierType
	{
		public virtual IFCHumidifierTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCHumidifierType() : base()
		{
		}
		public IFCHumidifierType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCHumidifierTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCHumidifierTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCHumidifierTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcHygroscopicMaterialProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// UpperVaporResistanceFactor : OPTIONAL IfcPositiveRatioMeasure;
	/// LowerVaporResistanceFactor : OPTIONAL IfcPositiveRatioMeasure;
	/// IsothermalMoistureCapacity : OPTIONAL IfcIsothermalMoistureCapacityMeasure;
	/// VaporPermeability : OPTIONAL IfcVaporPermeabilityMeasure;
	/// MoistureDiffusivity : OPTIONAL IfcMoistureDiffusivityMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IFCHygroscopicMaterialProperties : IFCMaterialProperties, Global.IFCHygroscopicMaterialProperties
	{
		public virtual IFCPositiveRatioMeasure? UpperVaporResistanceFactor { get; set; }
		public virtual IFCPositiveRatioMeasure? LowerVaporResistanceFactor { get; set; }
		public virtual IFCIsothermalMoistureCapacityMeasure? IsothermalMoistureCapacity { get; set; }
		public virtual IFCVaporPermeabilityMeasure? VaporPermeability { get; set; }
		public virtual IFCMoistureDiffusivityMeasure? MoistureDiffusivity { get; set; }
		public IFCHygroscopicMaterialProperties() : base()
		{
		}
		public IFCHygroscopicMaterialProperties(IFCMaterial? Material, IFCPositiveRatioMeasure? UpperVaporResistanceFactor, IFCPositiveRatioMeasure? LowerVaporResistanceFactor, IFCIsothermalMoistureCapacityMeasure? IsothermalMoistureCapacity, IFCVaporPermeabilityMeasure? VaporPermeability, IFCMoistureDiffusivityMeasure? MoistureDiffusivity) : base (Material)
		{
			this.UpperVaporResistanceFactor = UpperVaporResistanceFactor;
			this.LowerVaporResistanceFactor = LowerVaporResistanceFactor;
			this.IsothermalMoistureCapacity = IsothermalMoistureCapacity;
			this.VaporPermeability = VaporPermeability;
			this.MoistureDiffusivity = MoistureDiffusivity;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"UpperVaporResistanceFactor", UpperVaporResistanceFactor},
				{"LowerVaporResistanceFactor", LowerVaporResistanceFactor},
				{"IsothermalMoistureCapacity", IsothermalMoistureCapacity},
				{"VaporPermeability", VaporPermeability},
				{"MoistureDiffusivity", MoistureDiffusivity}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveRatioMeasure? _UpperVaporResistanceFactor
		{
			get
			{
				return UpperVaporResistanceFactor;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					UpperVaporResistanceFactor = val;
				}
				else if(value == null)
				{
					UpperVaporResistanceFactor = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _LowerVaporResistanceFactor
		{
			get
			{
				return LowerVaporResistanceFactor;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					LowerVaporResistanceFactor = val;
				}
				else if(value == null)
				{
					LowerVaporResistanceFactor = null;
				}
			}
		}
		public virtual Global.IFCIsothermalMoistureCapacityMeasure? _IsothermalMoistureCapacity
		{
			get
			{
				return IsothermalMoistureCapacity;
			}
			set
			{
				if(value is IFCIsothermalMoistureCapacityMeasure val)
				{
					IsothermalMoistureCapacity = val;
				}
				else if(value == null)
				{
					IsothermalMoistureCapacity = null;
				}
			}
		}
		public virtual Global.IFCVaporPermeabilityMeasure? _VaporPermeability
		{
			get
			{
				return VaporPermeability;
			}
			set
			{
				if(value is IFCVaporPermeabilityMeasure val)
				{
					VaporPermeability = val;
				}
				else if(value == null)
				{
					VaporPermeability = null;
				}
			}
		}
		public virtual Global.IFCMoistureDiffusivityMeasure? _MoistureDiffusivity
		{
			get
			{
				return MoistureDiffusivity;
			}
			set
			{
				if(value is IFCMoistureDiffusivityMeasure val)
				{
					MoistureDiffusivity = val;
				}
				else if(value == null)
				{
					MoistureDiffusivity = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIShapeProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcAsymmetricIShapeProfileDef))
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// OverallWidth : IfcPositiveLengthMeasure;
	/// OverallDepth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR1 : FlangeThickness < (OverallDepth / 2.);
	/// WR2 : WebThickness < OverallWidth;
	/// WR3 : NOT(EXISTS(FilletRadius)) OR
	/// ((FilletRadius <= (OverallWidth - WebThickness)/2.) AND
	/// (FilletRadius <= (OverallDepth - (2. * FlangeThickness))/2.));
	/// END_ENTITY;
	/// <summary>
	public class IFCIShapeProfileDef : IFCParameterizedProfileDef, Global.IFCIShapeProfileDef
	{
		public virtual IFCPositiveLengthMeasure? OverallWidth { get; set; }
		public virtual IFCPositiveLengthMeasure? OverallDepth { get; set; }
		public virtual IFCPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? FilletRadius { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCIShapeProfileDef() : base()
		{
		}
		public IFCIShapeProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? OverallWidth, IFCPositiveLengthMeasure? OverallDepth, IFCPositiveLengthMeasure? WebThickness, IFCPositiveLengthMeasure? FlangeThickness, IFCPositiveLengthMeasure? FilletRadius) : base (ProfileType, ProfileName, Position)
		{
			this.OverallWidth = OverallWidth;
			this.OverallDepth = OverallDepth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"OverallWidth", OverallWidth},
				{"OverallDepth", OverallDepth},
				{"WebThickness", WebThickness},
				{"FlangeThickness", FlangeThickness},
				{"FilletRadius", FilletRadius}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _OverallWidth
		{
			get
			{
				return OverallWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					OverallWidth = val;
				}
				else if(value == null)
				{
					OverallWidth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _OverallDepth
		{
			get
			{
				return OverallDepth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					OverallDepth = val;
				}
				else if(value == null)
				{
					OverallDepth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _WebThickness
		{
			get
			{
				return WebThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					WebThickness = val;
				}
				else if(value == null)
				{
					WebThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FlangeThickness
		{
			get
			{
				return FlangeThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FlangeThickness = val;
				}
				else if(value == null)
				{
					FlangeThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FilletRadius
		{
			get
			{
				return FilletRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FilletRadius = val;
				}
				else if(value == null)
				{
					FilletRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcImageTexture
	/// SUBTYPE OF (IfcSurfaceTexture);
	/// UrlReference : IfcIdentifier;
	/// END_ENTITY;
	/// <summary>
	public class IFCImageTexture : IFCSurfaceTexture, Global.IFCImageTexture
	{
		public virtual IFCIdentifier? UrlReference { get; set; }
		public IFCImageTexture() : base()
		{
		}
		public IFCImageTexture(BOOLEAN? RepeatS, BOOLEAN? RepeatT, IFCSurfaceTextureEnum? TextureType, IFCCartesianTransformationOperator2D? TextureTransform, IFCIdentifier? UrlReference) : base (RepeatS, RepeatT, TextureType, TextureTransform)
		{
			this.UrlReference = UrlReference;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepeatS", RepeatS},
				{"RepeatT", RepeatT},
				{"TextureType", TextureType},
				{"TextureTransform", TextureTransform},
				{"UrlReference", UrlReference}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCIdentifier? _UrlReference
		{
			get
			{
				return UrlReference;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					UrlReference = val;
				}
				else if(value == null)
				{
					UrlReference = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcInventory
	/// SUBTYPE OF (IfcGroup);
	/// InventoryType : IfcInventoryTypeEnum;
	/// Jurisdiction : IfcActorSelect;
	/// ResponsiblePersons : SET [1:?] OF IfcPerson;
	/// LastUpdateDate : IfcCalendarDate;
	/// CurrentValue : OPTIONAL IfcCostValue;
	/// OriginalValue : OPTIONAL IfcCostValue;
	/// WHERE
	/// WR41 : SIZEOF(QUERY(temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects |
	/// NOT( ('IFC2X3.IFCSPACE' IN TYPEOF (temp)) OR
	/// ('IFC2X3.IFCASSET' IN TYPEOF (temp)) OR
	/// ('IFC2X3.IFCFURNISHINGELEMENT' IN TYPEOF (temp))
	/// ))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCInventory : IFCGroup, Global.IFCInventory
	{
		public virtual IFCInventoryTypeEnum? InventoryType { get; set; }
		public virtual IFCActorSelect? Jurisdiction { get; set; }
		public virtual IFC_Attributes<IFCPerson>? ResponsiblePersons { get; set; }
		public virtual IFCCalendarDate? LastUpdateDate { get; set; }
		public virtual IFCCostValue? CurrentValue { get; set; }
		public virtual IFCCostValue? OriginalValue { get; set; }
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public IFCInventory() : base()
		{
		}
		public IFCInventory(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCInventoryTypeEnum? InventoryType, IFCActorSelect? Jurisdiction, IFC_Attributes<IFCPerson>? ResponsiblePersons, IFCCalendarDate? LastUpdateDate, IFCCostValue? CurrentValue, IFCCostValue? OriginalValue) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.InventoryType = InventoryType;
			this.Jurisdiction = Jurisdiction;
			this.ResponsiblePersons = ResponsiblePersons;
			this.LastUpdateDate = LastUpdateDate;
			this.CurrentValue = CurrentValue;
			this.OriginalValue = OriginalValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"InventoryType", InventoryType},
				{"Jurisdiction", Jurisdiction},
				{"ResponsiblePersons", ResponsiblePersons},
				{"LastUpdateDate", LastUpdateDate},
				{"CurrentValue", CurrentValue},
				{"OriginalValue", OriginalValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsGroupedBy", IsGroupedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCInventoryTypeEnum? _InventoryType
		{
			get
			{
				return InventoryType;
			}
			set
			{
				if(value is IFCInventoryTypeEnum val)
				{
					InventoryType = val;
				}
				else if(value == null)
				{
					InventoryType = null;
				}
			}
		}
		public virtual Global.IFCActorSelect? _Jurisdiction
		{
			get
			{
				return Jurisdiction;
			}
			set
			{
				if(value is IFCActorSelect val)
				{
					Jurisdiction = val;
				}
				else if(value == null)
				{
					Jurisdiction = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPerson>? _ResponsiblePersons
		{
			get
			{
				if(ResponsiblePersons != null)
				{
					IFC_Attributes<Global.IFCPerson>? items = new IFC_Attributes<Global.IFCPerson>();
					foreach (IFCPerson item in ResponsiblePersons)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ResponsiblePersons = null;
				}
				else
				{
					ResponsiblePersons = new IFC_Attributes<IFCPerson>();
					foreach(var val in value)
					{
						if(val is IFCPerson v)
						{
							ResponsiblePersons.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCCalendarDate? _LastUpdateDate
		{
			get
			{
				return LastUpdateDate;
			}
			set
			{
				if(value is IFCCalendarDate val)
				{
					LastUpdateDate = val;
				}
				else if(value == null)
				{
					LastUpdateDate = null;
				}
			}
		}
		public virtual Global.IFCCostValue? _CurrentValue
		{
			get
			{
				return CurrentValue;
			}
			set
			{
				if(value is IFCCostValue val)
				{
					CurrentValue = val;
				}
				else if(value == null)
				{
					CurrentValue = null;
				}
			}
		}
		public virtual Global.IFCCostValue? _OriginalValue
		{
			get
			{
				return OriginalValue;
			}
			set
			{
				if(value is IFCCostValue val)
				{
					OriginalValue = val;
				}
				else if(value == null)
				{
					OriginalValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIrregularTimeSeries
	/// SUBTYPE OF (IfcTimeSeries);
	/// Values : LIST [1:?] OF IfcIrregularTimeSeriesValue;
	/// END_ENTITY;
	/// <summary>
	public class IFCIrregularTimeSeries : IFCTimeSeries, Global.IFCIrregularTimeSeries
	{
		public virtual IFC_Attributes<IFCIrregularTimeSeriesValue>? Values { get; set; }
		public IFCIrregularTimeSeries() : base()
		{
		}
		public IFCIrregularTimeSeries(IFCLabel? Name, IFCText? Description, IFCDateTimeSelect? StartTime, IFCDateTimeSelect? EndTime, IFCTimeSeriesDataTypeEnum? TimeSeriesDataType, IFCDataOriginEnum? DataOrigin, IFCLabel? UserDefinedDataOrigin, IFCUnit? Unit, IFC_Attributes<IFCIrregularTimeSeriesValue>? Values) : base (Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit)
		{
			this.Values = Values;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"StartTime", StartTime},
				{"EndTime", EndTime},
				{"TimeSeriesDataType", TimeSeriesDataType},
				{"DataOrigin", DataOrigin},
				{"UserDefinedDataOrigin", UserDefinedDataOrigin},
				{"Unit", Unit},
				{"Values", Values}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"DocumentedBy", DocumentedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCIrregularTimeSeriesValue>? _Values
		{
			get
			{
				if(Values != null)
				{
					IFC_Attributes<Global.IFCIrregularTimeSeriesValue>? items = new IFC_Attributes<Global.IFCIrregularTimeSeriesValue>();
					foreach (IFCIrregularTimeSeriesValue item in Values)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Values = null;
				}
				else
				{
					Values = new IFC_Attributes<IFCIrregularTimeSeriesValue>();
					foreach(var val in value)
					{
						if(val is IFCIrregularTimeSeriesValue v)
						{
							Values.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcIrregularTimeSeriesValue;
	/// TimeStamp : IfcDateTimeSelect;
	/// ListValues : LIST [1:?] OF IfcValue;
	/// END_ENTITY;
	/// <summary>
	public class IFCIrregularTimeSeriesValue : IFC_ClassEntity, Global.IFCIrregularTimeSeriesValue
	{
		public virtual IFCDateTimeSelect? TimeStamp { get; set; }
		public virtual IFC_Attributes<IFCValue>? ListValues { get; set; }
		public IFCIrregularTimeSeriesValue() : base()
		{
		}
		public IFCIrregularTimeSeriesValue(IFCDateTimeSelect? TimeStamp, IFC_Attributes<IFCValue>? ListValues) : base ()
		{
			this.TimeStamp = TimeStamp;
			this.ListValues = ListValues;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"TimeStamp", TimeStamp},
				{"ListValues", ListValues}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCDateTimeSelect? _TimeStamp
		{
			get
			{
				return TimeStamp;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					TimeStamp = val;
				}
				else if(value == null)
				{
					TimeStamp = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCValue>? _ListValues
		{
			get
			{
				if(ListValues != null)
				{
					IFC_Attributes<Global.IFCValue>? items = new IFC_Attributes<Global.IFCValue>();
					foreach (IFCValue item in ListValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ListValues = null;
				}
				else
				{
					ListValues = new IFC_Attributes<IFCValue>();
					foreach(var val in value)
					{
						if(val is IFCValue v)
						{
							ListValues.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcJunctionBoxType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcJunctionBoxTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCJunctionBoxType : IFCFlowFittingType, Global.IFCJunctionBoxType
	{
		public virtual IFCJunctionBoxTypeEnum? PredefinedType { get; set; }
		public IFCJunctionBoxType() : base()
		{
		}
		public IFCJunctionBoxType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCJunctionBoxTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCJunctionBoxTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCJunctionBoxTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// Width : OPTIONAL IfcPositiveLengthMeasure;
	/// Thickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// EdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// LegSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// CentreOfGravityInX : OPTIONAL IfcPositiveLengthMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR21 : Thickness < Depth;
	/// WR22 : NOT(EXISTS(Width)) OR (Thickness < Width);
	/// END_ENTITY;
	/// <summary>
	public class IFCLShapeProfileDef : IFCParameterizedProfileDef, Global.IFCLShapeProfileDef
	{
		public virtual IFCPositiveLengthMeasure? Depth { get; set; }
		public virtual IFCPositiveLengthMeasure? Width { get; set; }
		public virtual IFCPositiveLengthMeasure? Thickness { get; set; }
		public virtual IFCPositiveLengthMeasure? FilletRadius { get; set; }
		public virtual IFCPositiveLengthMeasure? EdgeRadius { get; set; }
		public virtual IFCPlaneAngleMeasure? LegSlope { get; set; }
		public virtual IFCPositiveLengthMeasure? CentreOfGravityInX { get; set; }
		public virtual IFCPositiveLengthMeasure? CentreOfGravityInY { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCLShapeProfileDef() : base()
		{
		}
		public IFCLShapeProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? Depth, IFCPositiveLengthMeasure? Width, IFCPositiveLengthMeasure? Thickness, IFCPositiveLengthMeasure? FilletRadius, IFCPositiveLengthMeasure? EdgeRadius, IFCPlaneAngleMeasure? LegSlope, IFCPositiveLengthMeasure? CentreOfGravityInX, IFCPositiveLengthMeasure? CentreOfGravityInY) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.Width = Width;
			this.Thickness = Thickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.LegSlope = LegSlope;
			this.CentreOfGravityInX = CentreOfGravityInX;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"Depth", Depth},
				{"Width", Width},
				{"Thickness", Thickness},
				{"FilletRadius", FilletRadius},
				{"EdgeRadius", EdgeRadius},
				{"LegSlope", LegSlope},
				{"CentreOfGravityInX", CentreOfGravityInX},
				{"CentreOfGravityInY", CentreOfGravityInY}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Width
		{
			get
			{
				return Width;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Width = val;
				}
				else if(value == null)
				{
					Width = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Thickness
		{
			get
			{
				return Thickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Thickness = val;
				}
				else if(value == null)
				{
					Thickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FilletRadius
		{
			get
			{
				return FilletRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FilletRadius = val;
				}
				else if(value == null)
				{
					FilletRadius = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _EdgeRadius
		{
			get
			{
				return EdgeRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					EdgeRadius = val;
				}
				else if(value == null)
				{
					EdgeRadius = null;
				}
			}
		}
		public virtual Global.IFCPlaneAngleMeasure? _LegSlope
		{
			get
			{
				return LegSlope;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					LegSlope = val;
				}
				else if(value == null)
				{
					LegSlope = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _CentreOfGravityInX
		{
			get
			{
				return CentreOfGravityInX;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					CentreOfGravityInX = val;
				}
				else if(value == null)
				{
					CentreOfGravityInX = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _CentreOfGravityInY
		{
			get
			{
				return CentreOfGravityInY;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					CentreOfGravityInY = val;
				}
				else if(value == null)
				{
					CentreOfGravityInY = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLaborResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// SkillSet : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IFCLaborResource : IFCConstructionResource, Global.IFCLaborResource
	{
		public virtual IFCText? SkillSet { get; set; }
		public IFCLaborResource() : base()
		{
		}
		public IFCLaborResource(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? ResourceIdentifier, IFCLabel? ResourceGroup, IFCResourceConsumptionEnum? ResourceConsumption, IFCMeasureWithUnit? BaseQuantity, IFCText? SkillSet) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
			this.SkillSet = SkillSet;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ResourceIdentifier", ResourceIdentifier},
				{"ResourceGroup", ResourceGroup},
				{"ResourceConsumption", ResourceConsumption},
				{"BaseQuantity", BaseQuantity},
				{"SkillSet", SkillSet}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ResourceOf", ResourceOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCText? _SkillSet
		{
			get
			{
				return SkillSet;
			}
			set
			{
				if(value is IFCText val)
				{
					SkillSet = val;
				}
				else if(value == null)
				{
					SkillSet = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLampType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcLampTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCLampType : IFCFlowTerminalType, Global.IFCLampType
	{
		public virtual IFCLampTypeEnum? PredefinedType { get; set; }
		public IFCLampType() : base()
		{
		}
		public IFCLampType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCLampTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCLampTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCLampTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLibraryInformation;
	/// Name : IfcLabel;
	/// Version : OPTIONAL IfcLabel;
	/// Publisher : OPTIONAL IfcOrganization;
	/// VersionDate : OPTIONAL IfcCalendarDate;
	/// LibraryReference : OPTIONAL SET [1:?] OF IfcLibraryReference;
	/// END_ENTITY;
	/// <summary>
	public class IFCLibraryInformation : IFC_ClassEntity, IFCLibrarySelect, Global.IFCLibraryInformation
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCLabel? Version { get; set; }
		public virtual IFCOrganization? Publisher { get; set; }
		public virtual IFCCalendarDate? VersionDate { get; set; }
		public virtual IFC_Attributes<IFCLibraryReference>? LibraryReference { get; set; }
		public IFCLibraryInformation() : base()
		{
		}
		public IFCLibraryInformation(IFCLabel? Name, IFCLabel? Version, IFCOrganization? Publisher, IFCCalendarDate? VersionDate, IFC_Attributes<IFCLibraryReference>? LibraryReference) : base ()
		{
			this.Name = Name;
			this.Version = Version;
			this.Publisher = Publisher;
			this.VersionDate = VersionDate;
			this.LibraryReference = LibraryReference;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Version", Version},
				{"Publisher", Publisher},
				{"VersionDate", VersionDate},
				{"LibraryReference", LibraryReference}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Version
		{
			get
			{
				return Version;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Version = val;
				}
				else if(value == null)
				{
					Version = null;
				}
			}
		}
		public virtual Global.IFCOrganization? _Publisher
		{
			get
			{
				return Publisher;
			}
			set
			{
				if(value is IFCOrganization val)
				{
					Publisher = val;
				}
				else if(value == null)
				{
					Publisher = null;
				}
			}
		}
		public virtual Global.IFCCalendarDate? _VersionDate
		{
			get
			{
				return VersionDate;
			}
			set
			{
				if(value is IFCCalendarDate val)
				{
					VersionDate = val;
				}
				else if(value == null)
				{
					VersionDate = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCLibraryReference>? _LibraryReference
		{
			get
			{
				if(LibraryReference != null)
				{
					IFC_Attributes<Global.IFCLibraryReference>? items = new IFC_Attributes<Global.IFCLibraryReference>();
					foreach (IFCLibraryReference item in LibraryReference)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					LibraryReference = null;
				}
				else
				{
					LibraryReference = new IFC_Attributes<IFCLibraryReference>();
					foreach(var val in value)
					{
						if(val is IFCLibraryReference v)
						{
							LibraryReference.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLibraryReference
	/// SUBTYPE OF (IfcExternalReference);
	/// INVERSE
	/// ReferenceIntoLibrary : SET [0:1] OF IfcLibraryInformation FOR LibraryReference;
	/// END_ENTITY;
	/// <summary>
	public class IFCLibraryReference : IFCExternalReference, IFCLibrarySelect, Global.IFCLibraryReference
	{
		public IFC_Attributes<IFCLibraryInformation>? ReferenceIntoLibrary {get{return new IFC_Attributes<IFCLibraryInformation>(Model?.GetItems<IFCLibraryInformation>().Where(x => x.LibraryReference != null && x.LibraryReference.Contains(this)).ToList());}}
		public IFCLibraryReference() : base()
		{
		}
		public IFCLibraryReference(IFCLabel? Location, IFCIdentifier? ItemReference, IFCLabel? Name) : base (Location, ItemReference, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location},
				{"ItemReference", ItemReference},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ReferenceIntoLibrary", ReferenceIntoLibrary}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCLibraryInformation>? _ReferenceIntoLibrary
		{
			get
			{
				if(ReferenceIntoLibrary != null)
				{
					IFC_Attributes<Global.IFCLibraryInformation>? items = new IFC_Attributes<Global.IFCLibraryInformation>();
					foreach (IFCLibraryInformation item in ReferenceIntoLibrary)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightDistributionData;
	/// MainPlaneAngle : IfcPlaneAngleMeasure;
	/// SecondaryPlaneAngle : LIST [1:?] OF IfcPlaneAngleMeasure;
	/// LuminousIntensity : LIST [1:?] OF IfcLuminousIntensityDistributionMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCLightDistributionData : IFC_ClassEntity, Global.IFCLightDistributionData
	{
		public virtual IFCPlaneAngleMeasure? MainPlaneAngle { get; set; }
		public virtual IFC_Attributes<IFCPlaneAngleMeasure>? SecondaryPlaneAngle { get; set; }
		public virtual IFC_Attributes<IFCLuminousIntensityDistributionMeasure>? LuminousIntensity { get; set; }
		public IFCLightDistributionData() : base()
		{
		}
		public IFCLightDistributionData(IFCPlaneAngleMeasure? MainPlaneAngle, IFC_Attributes<IFCPlaneAngleMeasure>? SecondaryPlaneAngle, IFC_Attributes<IFCLuminousIntensityDistributionMeasure>? LuminousIntensity) : base ()
		{
			this.MainPlaneAngle = MainPlaneAngle;
			this.SecondaryPlaneAngle = SecondaryPlaneAngle;
			this.LuminousIntensity = LuminousIntensity;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"MainPlaneAngle", MainPlaneAngle},
				{"SecondaryPlaneAngle", SecondaryPlaneAngle},
				{"LuminousIntensity", LuminousIntensity}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPlaneAngleMeasure? _MainPlaneAngle
		{
			get
			{
				return MainPlaneAngle;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					MainPlaneAngle = val;
				}
				else if(value == null)
				{
					MainPlaneAngle = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPlaneAngleMeasure>? _SecondaryPlaneAngle
		{
			get
			{
				if(SecondaryPlaneAngle != null)
				{
					IFC_Attributes<Global.IFCPlaneAngleMeasure>? items = new IFC_Attributes<Global.IFCPlaneAngleMeasure>();
					foreach (IFCPlaneAngleMeasure item in SecondaryPlaneAngle)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SecondaryPlaneAngle = null;
				}
				else
				{
					SecondaryPlaneAngle = new IFC_Attributes<IFCPlaneAngleMeasure>();
					foreach(var val in value)
					{
						if(val is IFCPlaneAngleMeasure v)
						{
							SecondaryPlaneAngle.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCLuminousIntensityDistributionMeasure>? _LuminousIntensity
		{
			get
			{
				if(LuminousIntensity != null)
				{
					IFC_Attributes<Global.IFCLuminousIntensityDistributionMeasure>? items = new IFC_Attributes<Global.IFCLuminousIntensityDistributionMeasure>();
					foreach (IFCLuminousIntensityDistributionMeasure item in LuminousIntensity)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					LuminousIntensity = null;
				}
				else
				{
					LuminousIntensity = new IFC_Attributes<IFCLuminousIntensityDistributionMeasure>();
					foreach(var val in value)
					{
						if(val is IFCLuminousIntensityDistributionMeasure v)
						{
							LuminousIntensity.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightFixtureType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcLightFixtureTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCLightFixtureType : IFCFlowTerminalType, Global.IFCLightFixtureType
	{
		public virtual IFCLightFixtureTypeEnum? PredefinedType { get; set; }
		public IFCLightFixtureType() : base()
		{
		}
		public IFCLightFixtureType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCLightFixtureTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCLightFixtureTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCLightFixtureTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightIntensityDistribution;
	/// LightDistributionCurve : IfcLightDistributionCurveEnum;
	/// DistributionData : LIST [1:?] OF IfcLightDistributionData;
	/// END_ENTITY;
	/// <summary>
	public class IFCLightIntensityDistribution : IFC_ClassEntity, IFCLightDistributionDataSourceSelect, Global.IFCLightIntensityDistribution
	{
		public virtual IFCLightDistributionCurveEnum? LightDistributionCurve { get; set; }
		public virtual IFC_Attributes<IFCLightDistributionData>? DistributionData { get; set; }
		public IFCLightIntensityDistribution() : base()
		{
		}
		public IFCLightIntensityDistribution(IFCLightDistributionCurveEnum? LightDistributionCurve, IFC_Attributes<IFCLightDistributionData>? DistributionData) : base ()
		{
			this.LightDistributionCurve = LightDistributionCurve;
			this.DistributionData = DistributionData;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LightDistributionCurve", LightDistributionCurve},
				{"DistributionData", DistributionData}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLightDistributionCurveEnum? _LightDistributionCurve
		{
			get
			{
				return LightDistributionCurve;
			}
			set
			{
				if(value is IFCLightDistributionCurveEnum val)
				{
					LightDistributionCurve = val;
				}
				else if(value == null)
				{
					LightDistributionCurve = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCLightDistributionData>? _DistributionData
		{
			get
			{
				if(DistributionData != null)
				{
					IFC_Attributes<Global.IFCLightDistributionData>? items = new IFC_Attributes<Global.IFCLightDistributionData>();
					foreach (IFCLightDistributionData item in DistributionData)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					DistributionData = null;
				}
				else
				{
					DistributionData = new IFC_Attributes<IFCLightDistributionData>();
					foreach(var val in value)
					{
						if(val is IFCLightDistributionData v)
						{
							DistributionData.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightSource
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcLightSourceAmbient
	/// ,IfcLightSourceDirectional
	/// ,IfcLightSourceGoniometric
	/// ,IfcLightSourcePositional))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Name : OPTIONAL IfcLabel;
	/// LightColour : IfcColourRgb;
	/// AmbientIntensity : OPTIONAL IfcNormalisedRatioMeasure;
	/// Intensity : OPTIONAL IfcNormalisedRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCLightSource : IFCGeometricRepresentationItem, Global.IFCLightSource
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCColourRgb? LightColour { get; set; }
		public virtual IFCNormalisedRatioMeasure? AmbientIntensity { get; set; }
		public virtual IFCNormalisedRatioMeasure? Intensity { get; set; }
		public IFCLightSource() : base()
		{
		}
		public IFCLightSource(IFCLabel? Name, IFCColourRgb? LightColour, IFCNormalisedRatioMeasure? AmbientIntensity, IFCNormalisedRatioMeasure? Intensity) : base ()
		{
			this.Name = Name;
			this.LightColour = LightColour;
			this.AmbientIntensity = AmbientIntensity;
			this.Intensity = Intensity;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"LightColour", LightColour},
				{"AmbientIntensity", AmbientIntensity},
				{"Intensity", Intensity}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCColourRgb? _LightColour
		{
			get
			{
				return LightColour;
			}
			set
			{
				if(value is IFCColourRgb val)
				{
					LightColour = val;
				}
				else if(value == null)
				{
					LightColour = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _AmbientIntensity
		{
			get
			{
				return AmbientIntensity;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					AmbientIntensity = val;
				}
				else if(value == null)
				{
					AmbientIntensity = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _Intensity
		{
			get
			{
				return Intensity;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					Intensity = val;
				}
				else if(value == null)
				{
					Intensity = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightSourceAmbient
	/// SUBTYPE OF (IfcLightSource);
	/// END_ENTITY;
	/// <summary>
	public class IFCLightSourceAmbient : IFCLightSource, Global.IFCLightSourceAmbient
	{
		public IFCLightSourceAmbient() : base()
		{
		}
		public IFCLightSourceAmbient(IFCLabel? Name, IFCColourRgb? LightColour, IFCNormalisedRatioMeasure? AmbientIntensity, IFCNormalisedRatioMeasure? Intensity) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"LightColour", LightColour},
				{"AmbientIntensity", AmbientIntensity},
				{"Intensity", Intensity}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcLightSourceDirectional
	/// SUBTYPE OF (IfcLightSource);
	/// Orientation : IfcDirection;
	/// END_ENTITY;
	/// <summary>
	public class IFCLightSourceDirectional : IFCLightSource, Global.IFCLightSourceDirectional
	{
		public virtual IFCDirection? Orientation { get; set; }
		public IFCLightSourceDirectional() : base()
		{
		}
		public IFCLightSourceDirectional(IFCLabel? Name, IFCColourRgb? LightColour, IFCNormalisedRatioMeasure? AmbientIntensity, IFCNormalisedRatioMeasure? Intensity, IFCDirection? Orientation) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
			this.Orientation = Orientation;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"LightColour", LightColour},
				{"AmbientIntensity", AmbientIntensity},
				{"Intensity", Intensity},
				{"Orientation", Orientation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCDirection? _Orientation
		{
			get
			{
				return Orientation;
			}
			set
			{
				if(value is IFCDirection val)
				{
					Orientation = val;
				}
				else if(value == null)
				{
					Orientation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightSourceGoniometric
	/// SUBTYPE OF (IfcLightSource);
	/// Position : IfcAxis2Placement3D;
	/// ColourAppearance : OPTIONAL IfcColourRgb;
	/// ColourTemperature : IfcThermodynamicTemperatureMeasure;
	/// LuminousFlux : IfcLuminousFluxMeasure;
	/// LightEmissionSource : IfcLightEmissionSourceEnum;
	/// LightDistributionDataSource : IfcLightDistributionDataSourceSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCLightSourceGoniometric : IFCLightSource, Global.IFCLightSourceGoniometric
	{
		public virtual IFCAxis2Placement3D? Position { get; set; }
		public virtual IFCColourRgb? ColourAppearance { get; set; }
		public virtual IFCThermodynamicTemperatureMeasure? ColourTemperature { get; set; }
		public virtual IFCLuminousFluxMeasure? LuminousFlux { get; set; }
		public virtual IFCLightEmissionSourceEnum? LightEmissionSource { get; set; }
		public virtual IFCLightDistributionDataSourceSelect? LightDistributionDataSource { get; set; }
		public IFCLightSourceGoniometric() : base()
		{
		}
		public IFCLightSourceGoniometric(IFCLabel? Name, IFCColourRgb? LightColour, IFCNormalisedRatioMeasure? AmbientIntensity, IFCNormalisedRatioMeasure? Intensity, IFCAxis2Placement3D? Position, IFCColourRgb? ColourAppearance, IFCThermodynamicTemperatureMeasure? ColourTemperature, IFCLuminousFluxMeasure? LuminousFlux, IFCLightEmissionSourceEnum? LightEmissionSource, IFCLightDistributionDataSourceSelect? LightDistributionDataSource) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
			this.Position = Position;
			this.ColourAppearance = ColourAppearance;
			this.ColourTemperature = ColourTemperature;
			this.LuminousFlux = LuminousFlux;
			this.LightEmissionSource = LightEmissionSource;
			this.LightDistributionDataSource = LightDistributionDataSource;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"LightColour", LightColour},
				{"AmbientIntensity", AmbientIntensity},
				{"Intensity", Intensity},
				{"Position", Position},
				{"ColourAppearance", ColourAppearance},
				{"ColourTemperature", ColourTemperature},
				{"LuminousFlux", LuminousFlux},
				{"LightEmissionSource", LightEmissionSource},
				{"LightDistributionDataSource", LightDistributionDataSource}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IFCAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
		public virtual Global.IFCColourRgb? _ColourAppearance
		{
			get
			{
				return ColourAppearance;
			}
			set
			{
				if(value is IFCColourRgb val)
				{
					ColourAppearance = val;
				}
				else if(value == null)
				{
					ColourAppearance = null;
				}
			}
		}
		public virtual Global.IFCThermodynamicTemperatureMeasure? _ColourTemperature
		{
			get
			{
				return ColourTemperature;
			}
			set
			{
				if(value is IFCThermodynamicTemperatureMeasure val)
				{
					ColourTemperature = val;
				}
				else if(value == null)
				{
					ColourTemperature = null;
				}
			}
		}
		public virtual Global.IFCLuminousFluxMeasure? _LuminousFlux
		{
			get
			{
				return LuminousFlux;
			}
			set
			{
				if(value is IFCLuminousFluxMeasure val)
				{
					LuminousFlux = val;
				}
				else if(value == null)
				{
					LuminousFlux = null;
				}
			}
		}
		public virtual Global.IFCLightEmissionSourceEnum? _LightEmissionSource
		{
			get
			{
				return LightEmissionSource;
			}
			set
			{
				if(value is IFCLightEmissionSourceEnum val)
				{
					LightEmissionSource = val;
				}
				else if(value == null)
				{
					LightEmissionSource = null;
				}
			}
		}
		public virtual Global.IFCLightDistributionDataSourceSelect? _LightDistributionDataSource
		{
			get
			{
				return LightDistributionDataSource;
			}
			set
			{
				if(value is IFCLightDistributionDataSourceSelect val)
				{
					LightDistributionDataSource = val;
				}
				else if(value == null)
				{
					LightDistributionDataSource = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightSourcePositional
	/// SUPERTYPE OF (ONEOF
	/// (IfcLightSourceSpot))
	/// SUBTYPE OF (IfcLightSource);
	/// Position : IfcCartesianPoint;
	/// Radius : IfcPositiveLengthMeasure;
	/// ConstantAttenuation : IfcReal;
	/// DistanceAttenuation : IfcReal;
	/// QuadricAttenuation : IfcReal;
	/// END_ENTITY;
	/// <summary>
	public class IFCLightSourcePositional : IFCLightSource, Global.IFCLightSourcePositional
	{
		public virtual IFCCartesianPoint? Position { get; set; }
		public virtual IFCPositiveLengthMeasure? Radius { get; set; }
		public virtual IFCReal? ConstantAttenuation { get; set; }
		public virtual IFCReal? DistanceAttenuation { get; set; }
		public virtual IFCReal? QuadricAttenuation { get; set; }
		public IFCLightSourcePositional() : base()
		{
		}
		public IFCLightSourcePositional(IFCLabel? Name, IFCColourRgb? LightColour, IFCNormalisedRatioMeasure? AmbientIntensity, IFCNormalisedRatioMeasure? Intensity, IFCCartesianPoint? Position, IFCPositiveLengthMeasure? Radius, IFCReal? ConstantAttenuation, IFCReal? DistanceAttenuation, IFCReal? QuadricAttenuation) : base (Name, LightColour, AmbientIntensity, Intensity)
		{
			this.Position = Position;
			this.Radius = Radius;
			this.ConstantAttenuation = ConstantAttenuation;
			this.DistanceAttenuation = DistanceAttenuation;
			this.QuadricAttenuation = QuadricAttenuation;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"LightColour", LightColour},
				{"AmbientIntensity", AmbientIntensity},
				{"Intensity", Intensity},
				{"Position", Position},
				{"Radius", Radius},
				{"ConstantAttenuation", ConstantAttenuation},
				{"DistanceAttenuation", DistanceAttenuation},
				{"QuadricAttenuation", QuadricAttenuation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCartesianPoint? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IFCCartesianPoint val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
		public virtual Global.IFCReal? _ConstantAttenuation
		{
			get
			{
				return ConstantAttenuation;
			}
			set
			{
				if(value is IFCReal val)
				{
					ConstantAttenuation = val;
				}
				else if(value == null)
				{
					ConstantAttenuation = null;
				}
			}
		}
		public virtual Global.IFCReal? _DistanceAttenuation
		{
			get
			{
				return DistanceAttenuation;
			}
			set
			{
				if(value is IFCReal val)
				{
					DistanceAttenuation = val;
				}
				else if(value == null)
				{
					DistanceAttenuation = null;
				}
			}
		}
		public virtual Global.IFCReal? _QuadricAttenuation
		{
			get
			{
				return QuadricAttenuation;
			}
			set
			{
				if(value is IFCReal val)
				{
					QuadricAttenuation = val;
				}
				else if(value == null)
				{
					QuadricAttenuation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLightSourceSpot
	/// SUBTYPE OF (IfcLightSourcePositional);
	/// Orientation : IfcDirection;
	/// ConcentrationExponent : OPTIONAL IfcReal;
	/// SpreadAngle : IfcPositivePlaneAngleMeasure;
	/// BeamWidthAngle : IfcPositivePlaneAngleMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCLightSourceSpot : IFCLightSourcePositional, Global.IFCLightSourceSpot
	{
		public virtual IFCDirection? Orientation { get; set; }
		public virtual IFCReal? ConcentrationExponent { get; set; }
		public virtual IFCPositivePlaneAngleMeasure? SpreadAngle { get; set; }
		public virtual IFCPositivePlaneAngleMeasure? BeamWidthAngle { get; set; }
		public IFCLightSourceSpot() : base()
		{
		}
		public IFCLightSourceSpot(IFCLabel? Name, IFCColourRgb? LightColour, IFCNormalisedRatioMeasure? AmbientIntensity, IFCNormalisedRatioMeasure? Intensity, IFCCartesianPoint? Position, IFCPositiveLengthMeasure? Radius, IFCReal? ConstantAttenuation, IFCReal? DistanceAttenuation, IFCReal? QuadricAttenuation, IFCDirection? Orientation, IFCReal? ConcentrationExponent, IFCPositivePlaneAngleMeasure? SpreadAngle, IFCPositivePlaneAngleMeasure? BeamWidthAngle) : base (Name, LightColour, AmbientIntensity, Intensity, Position, Radius, ConstantAttenuation, DistanceAttenuation, QuadricAttenuation)
		{
			this.Orientation = Orientation;
			this.ConcentrationExponent = ConcentrationExponent;
			this.SpreadAngle = SpreadAngle;
			this.BeamWidthAngle = BeamWidthAngle;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"LightColour", LightColour},
				{"AmbientIntensity", AmbientIntensity},
				{"Intensity", Intensity},
				{"Position", Position},
				{"Radius", Radius},
				{"ConstantAttenuation", ConstantAttenuation},
				{"DistanceAttenuation", DistanceAttenuation},
				{"QuadricAttenuation", QuadricAttenuation},
				{"Orientation", Orientation},
				{"ConcentrationExponent", ConcentrationExponent},
				{"SpreadAngle", SpreadAngle},
				{"BeamWidthAngle", BeamWidthAngle}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCDirection? _Orientation
		{
			get
			{
				return Orientation;
			}
			set
			{
				if(value is IFCDirection val)
				{
					Orientation = val;
				}
				else if(value == null)
				{
					Orientation = null;
				}
			}
		}
		public virtual Global.IFCReal? _ConcentrationExponent
		{
			get
			{
				return ConcentrationExponent;
			}
			set
			{
				if(value is IFCReal val)
				{
					ConcentrationExponent = val;
				}
				else if(value == null)
				{
					ConcentrationExponent = null;
				}
			}
		}
		public virtual Global.IFCPositivePlaneAngleMeasure? _SpreadAngle
		{
			get
			{
				return SpreadAngle;
			}
			set
			{
				if(value is IFCPositivePlaneAngleMeasure val)
				{
					SpreadAngle = val;
				}
				else if(value == null)
				{
					SpreadAngle = null;
				}
			}
		}
		public virtual Global.IFCPositivePlaneAngleMeasure? _BeamWidthAngle
		{
			get
			{
				return BeamWidthAngle;
			}
			set
			{
				if(value is IFCPositivePlaneAngleMeasure val)
				{
					BeamWidthAngle = val;
				}
				else if(value == null)
				{
					BeamWidthAngle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLine
	/// SUBTYPE OF (IfcCurve);
	/// Pnt : IfcCartesianPoint;
	/// Dir : IfcVector;
	/// WHERE
	/// WR1 : Dir.Dim = Pnt.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IFCLine : IFCCurve, Global.IFCLine
	{
		public virtual IFCCartesianPoint? Pnt { get; set; }
		public virtual IFCVector? Dir { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCLine() : base()
		{
		}
		public IFCLine(IFCCartesianPoint? Pnt, IFCVector? Dir) : base ()
		{
			this.Pnt = Pnt;
			this.Dir = Dir;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Pnt", Pnt},
				{"Dir", Dir}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCCartesianPoint? _Pnt
		{
			get
			{
				return Pnt;
			}
			set
			{
				if(value is IFCCartesianPoint val)
				{
					Pnt = val;
				}
				else if(value == null)
				{
					Pnt = null;
				}
			}
		}
		public virtual Global.IFCVector? _Dir
		{
			get
			{
				return Dir;
			}
			set
			{
				if(value is IFCVector val)
				{
					Dir = val;
				}
				else if(value == null)
				{
					Dir = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLinearDimension
	/// SUBTYPE OF (IfcDimensionCurveDirectedCallout);
	/// END_ENTITY;
	/// <summary>
	public class IFCLinearDimension : IFCDimensionCurveDirectedCallout, Global.IFCLinearDimension
	{
		public IFCLinearDimension() : base()
		{
		}
		public IFCLinearDimension(IFC_Attributes<IFCDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Contents", Contents}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem},
				{"IsRelatedFromCallout", IsRelatedFromCallout},
				{"IsRelatedToCallout", IsRelatedToCallout}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41},
				{"is_WR42", is_WR42}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcLocalPlacement
	/// SUBTYPE OF (IfcObjectPlacement);
	/// PlacementRelTo : OPTIONAL IfcObjectPlacement;
	/// RelativePlacement : IfcAxis2Placement;
	/// WHERE
	/// WR21 : IfcCorrectLocalPlacement(RelativePlacement, PlacementRelTo);
	/// END_ENTITY;
	/// <summary>
	public class IFCLocalPlacement : IFCObjectPlacement, Global.IFCLocalPlacement
	{
		public virtual IFCObjectPlacement? PlacementRelTo { get; set; }
		public virtual IFCAxis2Placement? RelativePlacement { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public IFCLocalPlacement() : base()
		{
		}
		public IFCLocalPlacement(IFCObjectPlacement? PlacementRelTo, IFCAxis2Placement? RelativePlacement) : base ()
		{
			this.PlacementRelTo = PlacementRelTo;
			this.RelativePlacement = RelativePlacement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PlacementRelTo", PlacementRelTo},
				{"RelativePlacement", RelativePlacement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PlacesObject", PlacesObject},
				{"ReferencedByPlacements", ReferencedByPlacements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCObjectPlacement? _PlacementRelTo
		{
			get
			{
				return PlacementRelTo;
			}
			set
			{
				if(value is IFCObjectPlacement val)
				{
					PlacementRelTo = val;
				}
				else if(value == null)
				{
					PlacementRelTo = null;
				}
			}
		}
		public virtual Global.IFCAxis2Placement? _RelativePlacement
		{
			get
			{
				return RelativePlacement;
			}
			set
			{
				if(value is IFCAxis2Placement val)
				{
					RelativePlacement = val;
				}
				else if(value == null)
				{
					RelativePlacement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLocalTime;
	/// HourComponent : IfcHourInDay;
	/// MinuteComponent : OPTIONAL IfcMinuteInHour;
	/// SecondComponent : OPTIONAL IfcSecondInMinute;
	/// Zone : OPTIONAL IfcCoordinatedUniversalTimeOffset;
	/// DaylightSavingOffset : OPTIONAL IfcDaylightSavingHour;
	/// WHERE
	/// WR21 : IfcValidTime (SELF);
	/// END_ENTITY;
	/// <summary>
	public class IFCLocalTime : IFC_ClassEntity, IFCDateTimeSelect, IFCObjectReferenceSelect, Global.IFCLocalTime
	{
		public virtual IFCHourInDay? HourComponent { get; set; }
		public virtual IFCMinuteInHour? MinuteComponent { get; set; }
		public virtual IFCSecondInMinute? SecondComponent { get; set; }
		public virtual IFCCoordinatedUniversalTimeOffset? Zone { get; set; }
		public virtual IFCDaylightSavingHour? DaylightSavingOffset { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public IFCLocalTime() : base()
		{
		}
		public IFCLocalTime(IFCHourInDay? HourComponent, IFCMinuteInHour? MinuteComponent, IFCSecondInMinute? SecondComponent, IFCCoordinatedUniversalTimeOffset? Zone, IFCDaylightSavingHour? DaylightSavingOffset) : base ()
		{
			this.HourComponent = HourComponent;
			this.MinuteComponent = MinuteComponent;
			this.SecondComponent = SecondComponent;
			this.Zone = Zone;
			this.DaylightSavingOffset = DaylightSavingOffset;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HourComponent", HourComponent},
				{"MinuteComponent", MinuteComponent},
				{"SecondComponent", SecondComponent},
				{"Zone", Zone},
				{"DaylightSavingOffset", DaylightSavingOffset}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCHourInDay? _HourComponent
		{
			get
			{
				return HourComponent;
			}
			set
			{
				if(value is IFCHourInDay val)
				{
					HourComponent = val;
				}
				else if(value == null)
				{
					HourComponent = null;
				}
			}
		}
		public virtual Global.IFCMinuteInHour? _MinuteComponent
		{
			get
			{
				return MinuteComponent;
			}
			set
			{
				if(value is IFCMinuteInHour val)
				{
					MinuteComponent = val;
				}
				else if(value == null)
				{
					MinuteComponent = null;
				}
			}
		}
		public virtual Global.IFCSecondInMinute? _SecondComponent
		{
			get
			{
				return SecondComponent;
			}
			set
			{
				if(value is IFCSecondInMinute val)
				{
					SecondComponent = val;
				}
				else if(value == null)
				{
					SecondComponent = null;
				}
			}
		}
		public virtual Global.IFCCoordinatedUniversalTimeOffset? _Zone
		{
			get
			{
				return Zone;
			}
			set
			{
				if(value is IFCCoordinatedUniversalTimeOffset val)
				{
					Zone = val;
				}
				else if(value == null)
				{
					Zone = null;
				}
			}
		}
		public virtual Global.IFCDaylightSavingHour? _DaylightSavingOffset
		{
			get
			{
				return DaylightSavingOffset;
			}
			set
			{
				if(value is IFCDaylightSavingHour val)
				{
					DaylightSavingOffset = val;
				}
				else if(value == null)
				{
					DaylightSavingOffset = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcLoop
	/// SUPERTYPE OF (ONEOF
	/// (IfcEdgeLoop
	/// ,IfcPolyLoop
	/// ,IfcVertexLoop))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public class IFCLoop : IFCTopologicalRepresentationItem, Global.IFCLoop
	{
		public IFCLoop() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcManifoldSolidBrep
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcFacetedBrep
	/// ,IfcFacetedBrepWithVoids))
	/// SUBTYPE OF (IfcSolidModel);
	/// Outer : IfcClosedShell;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCManifoldSolidBrep : IFCSolidModel, Global.IFCManifoldSolidBrep
	{
		public virtual IFCClosedShell? Outer { get; set; }
		public IFCManifoldSolidBrep() : base()
		{
		}
		public IFCManifoldSolidBrep(IFCClosedShell? Outer) : base ()
		{
			this.Outer = Outer;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Outer", Outer}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCClosedShell? _Outer
		{
			get
			{
				return Outer;
			}
			set
			{
				if(value is IFCClosedShell val)
				{
					Outer = val;
				}
				else if(value == null)
				{
					Outer = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMappedItem
	/// SUBTYPE OF (IfcRepresentationItem);
	/// MappingSource : IfcRepresentationMap;
	/// MappingTarget : IfcCartesianTransformationOperator;
	/// END_ENTITY;
	/// <summary>
	public class IFCMappedItem : IFCRepresentationItem, Global.IFCMappedItem
	{
		public virtual IFCRepresentationMap? MappingSource { get; set; }
		public virtual IFCCartesianTransformationOperator? MappingTarget { get; set; }
		public IFCMappedItem() : base()
		{
		}
		public IFCMappedItem(IFCRepresentationMap? MappingSource, IFCCartesianTransformationOperator? MappingTarget) : base ()
		{
			this.MappingSource = MappingSource;
			this.MappingTarget = MappingTarget;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"MappingSource", MappingSource},
				{"MappingTarget", MappingTarget}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCRepresentationMap? _MappingSource
		{
			get
			{
				return MappingSource;
			}
			set
			{
				if(value is IFCRepresentationMap val)
				{
					MappingSource = val;
				}
				else if(value == null)
				{
					MappingSource = null;
				}
			}
		}
		public virtual Global.IFCCartesianTransformationOperator? _MappingTarget
		{
			get
			{
				return MappingTarget;
			}
			set
			{
				if(value is IFCCartesianTransformationOperator val)
				{
					MappingTarget = val;
				}
				else if(value == null)
				{
					MappingTarget = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterial;
	/// Name : IfcLabel;
	/// INVERSE
	/// HasRepresentation : SET [0:1] OF IfcMaterialDefinitionRepresentation FOR RepresentedMaterial;
	/// ClassifiedAs : SET [0:1] OF IfcMaterialClassificationRelationship FOR ClassifiedMaterial;
	/// END_ENTITY;
	/// <summary>
	public class IFCMaterial : IFC_ClassEntity, IFCMaterialSelect, IFCObjectReferenceSelect, Global.IFCMaterial
	{
		public virtual IFCLabel? Name { get; set; }
		public IFC_Attributes<IFCMaterialDefinitionRepresentation>? HasRepresentation {get{return new IFC_Attributes<IFCMaterialDefinitionRepresentation>(Model?.GetItems<IFCMaterialDefinitionRepresentation>().Where(x => x.RepresentedMaterial != null && x.RepresentedMaterial == this).ToList());}}
		public IFC_Attributes<IFCMaterialClassificationRelationship>? ClassifiedAs {get{return new IFC_Attributes<IFCMaterialClassificationRelationship>(Model?.GetItems<IFCMaterialClassificationRelationship>().Where(x => x.ClassifiedMaterial != null && x.ClassifiedMaterial == this).ToList());}}
		public IFCMaterial() : base()
		{
		}
		public IFCMaterial(IFCLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasRepresentation", HasRepresentation},
				{"ClassifiedAs", ClassifiedAs}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCMaterialDefinitionRepresentation>? _HasRepresentation
		{
			get
			{
				if(HasRepresentation != null)
				{
					IFC_Attributes<Global.IFCMaterialDefinitionRepresentation>? items = new IFC_Attributes<Global.IFCMaterialDefinitionRepresentation>();
					foreach (IFCMaterialDefinitionRepresentation item in HasRepresentation)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCMaterialClassificationRelationship>? _ClassifiedAs
		{
			get
			{
				if(ClassifiedAs != null)
				{
					IFC_Attributes<Global.IFCMaterialClassificationRelationship>? items = new IFC_Attributes<Global.IFCMaterialClassificationRelationship>();
					foreach (IFCMaterialClassificationRelationship item in ClassifiedAs)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialClassificationRelationship;
	/// MaterialClassifications : SET [1:?] OF IfcClassificationNotationSelect;
	/// ClassifiedMaterial : IfcMaterial;
	/// END_ENTITY;
	/// <summary>
	public class IFCMaterialClassificationRelationship : IFC_ClassEntity, Global.IFCMaterialClassificationRelationship
	{
		public virtual IFC_Attributes<IFCClassificationNotationSelect>? MaterialClassifications { get; set; }
		public virtual IFCMaterial? ClassifiedMaterial { get; set; }
		public IFCMaterialClassificationRelationship() : base()
		{
		}
		public IFCMaterialClassificationRelationship(IFC_Attributes<IFCClassificationNotationSelect>? MaterialClassifications, IFCMaterial? ClassifiedMaterial) : base ()
		{
			this.MaterialClassifications = MaterialClassifications;
			this.ClassifiedMaterial = ClassifiedMaterial;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"MaterialClassifications", MaterialClassifications},
				{"ClassifiedMaterial", ClassifiedMaterial}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCClassificationNotationSelect>? _MaterialClassifications
		{
			get
			{
				if(MaterialClassifications != null)
				{
					IFC_Attributes<Global.IFCClassificationNotationSelect>? items = new IFC_Attributes<Global.IFCClassificationNotationSelect>();
					foreach (IFCClassificationNotationSelect item in MaterialClassifications)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					MaterialClassifications = null;
				}
				else
				{
					MaterialClassifications = new IFC_Attributes<IFCClassificationNotationSelect>();
					foreach(var val in value)
					{
						if(val is IFCClassificationNotationSelect v)
						{
							MaterialClassifications.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCMaterial? _ClassifiedMaterial
		{
			get
			{
				return ClassifiedMaterial;
			}
			set
			{
				if(value is IFCMaterial val)
				{
					ClassifiedMaterial = val;
				}
				else if(value == null)
				{
					ClassifiedMaterial = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialDefinitionRepresentation
	/// SUBTYPE OF (IfcProductRepresentation);
	/// RepresentedMaterial : IfcMaterial;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(temp <* Representations |
	/// (NOT('IFC2X3.IFCSTYLEDREPRESENTATION' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCMaterialDefinitionRepresentation : IFCProductRepresentation, Global.IFCMaterialDefinitionRepresentation
	{
		public virtual IFCMaterial? RepresentedMaterial { get; set; }
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public IFCMaterialDefinitionRepresentation() : base()
		{
		}
		public IFCMaterialDefinitionRepresentation(IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRepresentation>? Representations, IFCMaterial? RepresentedMaterial) : base (Name, Description, Representations)
		{
			this.RepresentedMaterial = RepresentedMaterial;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"Representations", Representations},
				{"RepresentedMaterial", RepresentedMaterial}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11}
			};
		}
		public virtual Global.IFCMaterial? _RepresentedMaterial
		{
			get
			{
				return RepresentedMaterial;
			}
			set
			{
				if(value is IFCMaterial val)
				{
					RepresentedMaterial = val;
				}
				else if(value == null)
				{
					RepresentedMaterial = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialLayer;
	/// Material : OPTIONAL IfcMaterial;
	/// LayerThickness : IfcPositiveLengthMeasure;
	/// IsVentilated : OPTIONAL IfcLogical;
	/// INVERSE
	/// ToMaterialLayerSet : IfcMaterialLayerSet FOR MaterialLayers;
	/// END_ENTITY;
	/// <summary>
	public class IFCMaterialLayer : IFC_ClassEntity, IFCMaterialSelect, IFCObjectReferenceSelect, Global.IFCMaterialLayer
	{
		public virtual IFCMaterial? Material { get; set; }
		public virtual IFCPositiveLengthMeasure? LayerThickness { get; set; }
		public virtual IFCLogical? IsVentilated { get; set; }
		public IFCMaterialLayerSet? ToMaterialLayerSet {get{return Model?.GetItems<IFCMaterialLayerSet>().FirstOrDefault(x => x.MaterialLayers != null && x.MaterialLayers.Contains(this));}}
		public IFCMaterialLayer() : base()
		{
		}
		public IFCMaterialLayer(IFCMaterial? Material, IFCPositiveLengthMeasure? LayerThickness, IFCLogical? IsVentilated) : base ()
		{
			this.Material = Material;
			this.LayerThickness = LayerThickness;
			this.IsVentilated = IsVentilated;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"LayerThickness", LayerThickness},
				{"IsVentilated", IsVentilated}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ToMaterialLayerSet", ToMaterialLayerSet}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCMaterial? _Material
		{
			get
			{
				return Material;
			}
			set
			{
				if(value is IFCMaterial val)
				{
					Material = val;
				}
				else if(value == null)
				{
					Material = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _LayerThickness
		{
			get
			{
				return LayerThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					LayerThickness = val;
				}
				else if(value == null)
				{
					LayerThickness = null;
				}
			}
		}
		public virtual Global.IFCLogical? _IsVentilated
		{
			get
			{
				return IsVentilated;
			}
			set
			{
				if(value is IFCLogical val)
				{
					IsVentilated = val;
				}
				else if(value == null)
				{
					IsVentilated = null;
				}
			}
		}
		public virtual Global.IFCMaterialLayerSet? _ToMaterialLayerSet
		{
			get
			{
				return ToMaterialLayerSet;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialLayerSet;
	/// MaterialLayers : LIST [1:?] OF IfcMaterialLayer;
	/// LayerSetName : OPTIONAL IfcLabel;
	/// DERIVE
	/// TotalThickness : IfcLengthMeasure := IfcMlsTotalThickness(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IFCMaterialLayerSet : IFC_ClassEntity, IFCMaterialSelect, Global.IFCMaterialLayerSet
	{
		public virtual IFC_Attributes<IFCMaterialLayer>? MaterialLayers { get; set; }
		public virtual IFCLabel? LayerSetName { get; set; }
		public virtual IFCLengthMeasure? TotalThickness
		{
			get
			{
				//MANUAL : IFC2x3.IFCMaterialLayerSet.TotalThickness
				// IfcMlsTotalThickness(SELF);
				return null;
				//END_MANUAL
			}
		}
		public IFCMaterialLayerSet() : base()
		{
		}
		public IFCMaterialLayerSet(IFC_Attributes<IFCMaterialLayer>? MaterialLayers, IFCLabel? LayerSetName) : base ()
		{
			this.MaterialLayers = MaterialLayers;
			this.LayerSetName = LayerSetName;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"MaterialLayers", MaterialLayers},
				{"LayerSetName", LayerSetName}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"TotalThickness", TotalThickness}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCMaterialLayer>? _MaterialLayers
		{
			get
			{
				if(MaterialLayers != null)
				{
					IFC_Attributes<Global.IFCMaterialLayer>? items = new IFC_Attributes<Global.IFCMaterialLayer>();
					foreach (IFCMaterialLayer item in MaterialLayers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					MaterialLayers = null;
				}
				else
				{
					MaterialLayers = new IFC_Attributes<IFCMaterialLayer>();
					foreach(var val in value)
					{
						if(val is IFCMaterialLayer v)
						{
							MaterialLayers.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _LayerSetName
		{
			get
			{
				return LayerSetName;
			}
			set
			{
				if(value is IFCLabel val)
				{
					LayerSetName = val;
				}
				else if(value == null)
				{
					LayerSetName = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _TotalThickness
		{
			get
			{
				return TotalThickness;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialLayerSetUsage;
	/// ForLayerSet : IfcMaterialLayerSet;
	/// LayerSetDirection : IfcLayerSetDirectionEnum;
	/// DirectionSense : IfcDirectionSenseEnum;
	/// OffsetFromReferenceLine : IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCMaterialLayerSetUsage : IFC_ClassEntity, IFCMaterialSelect, Global.IFCMaterialLayerSetUsage
	{
		public virtual IFCMaterialLayerSet? ForLayerSet { get; set; }
		public virtual IFCLayerSetDirectionEnum? LayerSetDirection { get; set; }
		public virtual IFCDirectionSenseEnum? DirectionSense { get; set; }
		public virtual IFCLengthMeasure? OffsetFromReferenceLine { get; set; }
		public IFCMaterialLayerSetUsage() : base()
		{
		}
		public IFCMaterialLayerSetUsage(IFCMaterialLayerSet? ForLayerSet, IFCLayerSetDirectionEnum? LayerSetDirection, IFCDirectionSenseEnum? DirectionSense, IFCLengthMeasure? OffsetFromReferenceLine) : base ()
		{
			this.ForLayerSet = ForLayerSet;
			this.LayerSetDirection = LayerSetDirection;
			this.DirectionSense = DirectionSense;
			this.OffsetFromReferenceLine = OffsetFromReferenceLine;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ForLayerSet", ForLayerSet},
				{"LayerSetDirection", LayerSetDirection},
				{"DirectionSense", DirectionSense},
				{"OffsetFromReferenceLine", OffsetFromReferenceLine}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCMaterialLayerSet? _ForLayerSet
		{
			get
			{
				return ForLayerSet;
			}
			set
			{
				if(value is IFCMaterialLayerSet val)
				{
					ForLayerSet = val;
				}
				else if(value == null)
				{
					ForLayerSet = null;
				}
			}
		}
		public virtual Global.IFCLayerSetDirectionEnum? _LayerSetDirection
		{
			get
			{
				return LayerSetDirection;
			}
			set
			{
				if(value is IFCLayerSetDirectionEnum val)
				{
					LayerSetDirection = val;
				}
				else if(value == null)
				{
					LayerSetDirection = null;
				}
			}
		}
		public virtual Global.IFCDirectionSenseEnum? _DirectionSense
		{
			get
			{
				return DirectionSense;
			}
			set
			{
				if(value is IFCDirectionSenseEnum val)
				{
					DirectionSense = val;
				}
				else if(value == null)
				{
					DirectionSense = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _OffsetFromReferenceLine
		{
			get
			{
				return OffsetFromReferenceLine;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					OffsetFromReferenceLine = val;
				}
				else if(value == null)
				{
					OffsetFromReferenceLine = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialList;
	/// Materials : LIST [1:?] OF IfcMaterial;
	/// END_ENTITY;
	/// <summary>
	public class IFCMaterialList : IFC_ClassEntity, IFCMaterialSelect, IFCObjectReferenceSelect, Global.IFCMaterialList
	{
		public virtual IFC_Attributes<IFCMaterial>? Materials { get; set; }
		public IFCMaterialList() : base()
		{
		}
		public IFCMaterialList(IFC_Attributes<IFCMaterial>? Materials) : base ()
		{
			this.Materials = Materials;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Materials", Materials}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCMaterial>? _Materials
		{
			get
			{
				if(Materials != null)
				{
					IFC_Attributes<Global.IFCMaterial>? items = new IFC_Attributes<Global.IFCMaterial>();
					foreach (IFCMaterial item in Materials)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Materials = null;
				}
				else
				{
					Materials = new IFC_Attributes<IFCMaterial>();
					foreach(var val in value)
					{
						if(val is IFCMaterial v)
						{
							Materials.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMaterialProperties
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcExtendedMaterialProperties
	/// ,IfcFuelProperties
	/// ,IfcGeneralMaterialProperties
	/// ,IfcHygroscopicMaterialProperties
	/// ,IfcMechanicalMaterialProperties
	/// ,IfcOpticalMaterialProperties
	/// ,IfcProductsOfCombustionProperties
	/// ,IfcThermalMaterialProperties
	/// ,IfcWaterProperties));
	/// Material : IfcMaterial;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCMaterialProperties : IFC_ClassEntity, Global.IFCMaterialProperties
	{
		public virtual IFCMaterial? Material { get; set; }
		public IFCMaterialProperties() : base()
		{
		}
		public IFCMaterialProperties(IFCMaterial? Material) : base ()
		{
			this.Material = Material;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCMaterial? _Material
		{
			get
			{
				return Material;
			}
			set
			{
				if(value is IFCMaterial val)
				{
					Material = val;
				}
				else if(value == null)
				{
					Material = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMeasureWithUnit;
	/// ValueComponent : IfcValue;
	/// UnitComponent : IfcUnit;
	/// END_ENTITY;
	/// <summary>
	public class IFCMeasureWithUnit : IFC_ClassEntity, IFCAppliedValueSelect, IFCConditionCriterionSelect, IFCMetricValueSelect, Global.IFCMeasureWithUnit
	{
		public virtual IFCValue? ValueComponent { get; set; }
		public virtual IFCUnit? UnitComponent { get; set; }
		public IFCMeasureWithUnit() : base()
		{
		}
		public IFCMeasureWithUnit(IFCValue? ValueComponent, IFCUnit? UnitComponent) : base ()
		{
			this.ValueComponent = ValueComponent;
			this.UnitComponent = UnitComponent;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ValueComponent", ValueComponent},
				{"UnitComponent", UnitComponent}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCValue? _ValueComponent
		{
			get
			{
				return ValueComponent;
			}
			set
			{
				if(value is IFCValue val)
				{
					ValueComponent = val;
				}
				else if(value == null)
				{
					ValueComponent = null;
				}
			}
		}
		public virtual Global.IFCUnit? _UnitComponent
		{
			get
			{
				return UnitComponent;
			}
			set
			{
				if(value is IFCUnit val)
				{
					UnitComponent = val;
				}
				else if(value == null)
				{
					UnitComponent = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMechanicalConcreteMaterialProperties
	/// SUBTYPE OF (IfcMechanicalMaterialProperties);
	/// CompressiveStrength : OPTIONAL IfcPressureMeasure;
	/// MaxAggregateSize : OPTIONAL IfcPositiveLengthMeasure;
	/// AdmixturesDescription : OPTIONAL IfcText;
	/// Workability : OPTIONAL IfcText;
	/// ProtectivePoreRatio : OPTIONAL IfcNormalisedRatioMeasure;
	/// WaterImpermeability : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IFCMechanicalConcreteMaterialProperties : IFCMechanicalMaterialProperties, Global.IFCMechanicalConcreteMaterialProperties
	{
		public virtual IFCPressureMeasure? CompressiveStrength { get; set; }
		public virtual IFCPositiveLengthMeasure? MaxAggregateSize { get; set; }
		public virtual IFCText? AdmixturesDescription { get; set; }
		public virtual IFCText? Workability { get; set; }
		public virtual IFCNormalisedRatioMeasure? ProtectivePoreRatio { get; set; }
		public virtual IFCText? WaterImpermeability { get; set; }
		public IFCMechanicalConcreteMaterialProperties() : base()
		{
		}
		public IFCMechanicalConcreteMaterialProperties(IFCMaterial? Material, IFCDynamicViscosityMeasure? DynamicViscosity, IFCModulusOfElasticityMeasure? YoungModulus, IFCModulusOfElasticityMeasure? ShearModulus, IFCPositiveRatioMeasure? PoissonRatio, IFCThermalExpansionCoefficientMeasure? ThermalExpansionCoefficient, IFCPressureMeasure? CompressiveStrength, IFCPositiveLengthMeasure? MaxAggregateSize, IFCText? AdmixturesDescription, IFCText? Workability, IFCNormalisedRatioMeasure? ProtectivePoreRatio, IFCText? WaterImpermeability) : base (Material, DynamicViscosity, YoungModulus, ShearModulus, PoissonRatio, ThermalExpansionCoefficient)
		{
			this.CompressiveStrength = CompressiveStrength;
			this.MaxAggregateSize = MaxAggregateSize;
			this.AdmixturesDescription = AdmixturesDescription;
			this.Workability = Workability;
			this.ProtectivePoreRatio = ProtectivePoreRatio;
			this.WaterImpermeability = WaterImpermeability;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"DynamicViscosity", DynamicViscosity},
				{"YoungModulus", YoungModulus},
				{"ShearModulus", ShearModulus},
				{"PoissonRatio", PoissonRatio},
				{"ThermalExpansionCoefficient", ThermalExpansionCoefficient},
				{"CompressiveStrength", CompressiveStrength},
				{"MaxAggregateSize", MaxAggregateSize},
				{"AdmixturesDescription", AdmixturesDescription},
				{"Workability", Workability},
				{"ProtectivePoreRatio", ProtectivePoreRatio},
				{"WaterImpermeability", WaterImpermeability}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCPressureMeasure? _CompressiveStrength
		{
			get
			{
				return CompressiveStrength;
			}
			set
			{
				if(value is IFCPressureMeasure val)
				{
					CompressiveStrength = val;
				}
				else if(value == null)
				{
					CompressiveStrength = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _MaxAggregateSize
		{
			get
			{
				return MaxAggregateSize;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					MaxAggregateSize = val;
				}
				else if(value == null)
				{
					MaxAggregateSize = null;
				}
			}
		}
		public virtual Global.IFCText? _AdmixturesDescription
		{
			get
			{
				return AdmixturesDescription;
			}
			set
			{
				if(value is IFCText val)
				{
					AdmixturesDescription = val;
				}
				else if(value == null)
				{
					AdmixturesDescription = null;
				}
			}
		}
		public virtual Global.IFCText? _Workability
		{
			get
			{
				return Workability;
			}
			set
			{
				if(value is IFCText val)
				{
					Workability = val;
				}
				else if(value == null)
				{
					Workability = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _ProtectivePoreRatio
		{
			get
			{
				return ProtectivePoreRatio;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					ProtectivePoreRatio = val;
				}
				else if(value == null)
				{
					ProtectivePoreRatio = null;
				}
			}
		}
		public virtual Global.IFCText? _WaterImpermeability
		{
			get
			{
				return WaterImpermeability;
			}
			set
			{
				if(value is IFCText val)
				{
					WaterImpermeability = val;
				}
				else if(value == null)
				{
					WaterImpermeability = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMechanicalFastener
	/// SUBTYPE OF (IfcFastener);
	/// NominalDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// NominalLength : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCMechanicalFastener : IFCFastener, Global.IFCMechanicalFastener
	{
		public virtual IFCPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IFCPositiveLengthMeasure? NominalLength { get; set; }
		public IFCMechanicalFastener() : base()
		{
		}
		public IFCMechanicalFastener(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCPositiveLengthMeasure? NominalDiameter, IFCPositiveLengthMeasure? NominalLength) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.NominalDiameter = NominalDiameter;
			this.NominalLength = NominalLength;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"NominalDiameter", NominalDiameter},
				{"NominalLength", NominalLength}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _NominalDiameter
		{
			get
			{
				return NominalDiameter;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					NominalDiameter = val;
				}
				else if(value == null)
				{
					NominalDiameter = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _NominalLength
		{
			get
			{
				return NominalLength;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					NominalLength = val;
				}
				else if(value == null)
				{
					NominalLength = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMechanicalFastenerType
	/// SUBTYPE OF (IfcFastenerType);
	/// END_ENTITY;
	/// <summary>
	public class IFCMechanicalFastenerType : IFCFastenerType, Global.IFCMechanicalFastenerType
	{
		public IFCMechanicalFastenerType() : base()
		{
		}
		public IFCMechanicalFastenerType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcMechanicalMaterialProperties
	/// SUPERTYPE OF (ONEOF
	/// (IfcMechanicalConcreteMaterialProperties
	/// ,IfcMechanicalSteelMaterialProperties))
	/// SUBTYPE OF (IfcMaterialProperties);
	/// DynamicViscosity : OPTIONAL IfcDynamicViscosityMeasure;
	/// YoungModulus : OPTIONAL IfcModulusOfElasticityMeasure;
	/// ShearModulus : OPTIONAL IfcModulusOfElasticityMeasure;
	/// PoissonRatio : OPTIONAL IfcPositiveRatioMeasure;
	/// ThermalExpansionCoefficient : OPTIONAL IfcThermalExpansionCoefficientMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// WHERE
	/// WR21 : NOT(EXISTS(YoungModulus)) OR (YoungModulus >= 0.0);
	/// WR22 : NOT(EXISTS(ShearModulus)) OR (ShearModulus >= 0.0);
	/// END_ENTITY;
	/// <summary>
	public class IFCMechanicalMaterialProperties : IFCMaterialProperties, Global.IFCMechanicalMaterialProperties
	{
		public virtual IFCDynamicViscosityMeasure? DynamicViscosity { get; set; }
		public virtual IFCModulusOfElasticityMeasure? YoungModulus { get; set; }
		public virtual IFCModulusOfElasticityMeasure? ShearModulus { get; set; }
		public virtual IFCPositiveRatioMeasure? PoissonRatio { get; set; }
		public virtual IFCThermalExpansionCoefficientMeasure? ThermalExpansionCoefficient { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCMechanicalMaterialProperties() : base()
		{
		}
		public IFCMechanicalMaterialProperties(IFCMaterial? Material, IFCDynamicViscosityMeasure? DynamicViscosity, IFCModulusOfElasticityMeasure? YoungModulus, IFCModulusOfElasticityMeasure? ShearModulus, IFCPositiveRatioMeasure? PoissonRatio, IFCThermalExpansionCoefficientMeasure? ThermalExpansionCoefficient) : base (Material)
		{
			this.DynamicViscosity = DynamicViscosity;
			this.YoungModulus = YoungModulus;
			this.ShearModulus = ShearModulus;
			this.PoissonRatio = PoissonRatio;
			this.ThermalExpansionCoefficient = ThermalExpansionCoefficient;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"DynamicViscosity", DynamicViscosity},
				{"YoungModulus", YoungModulus},
				{"ShearModulus", ShearModulus},
				{"PoissonRatio", PoissonRatio},
				{"ThermalExpansionCoefficient", ThermalExpansionCoefficient}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCDynamicViscosityMeasure? _DynamicViscosity
		{
			get
			{
				return DynamicViscosity;
			}
			set
			{
				if(value is IFCDynamicViscosityMeasure val)
				{
					DynamicViscosity = val;
				}
				else if(value == null)
				{
					DynamicViscosity = null;
				}
			}
		}
		public virtual Global.IFCModulusOfElasticityMeasure? _YoungModulus
		{
			get
			{
				return YoungModulus;
			}
			set
			{
				if(value is IFCModulusOfElasticityMeasure val)
				{
					YoungModulus = val;
				}
				else if(value == null)
				{
					YoungModulus = null;
				}
			}
		}
		public virtual Global.IFCModulusOfElasticityMeasure? _ShearModulus
		{
			get
			{
				return ShearModulus;
			}
			set
			{
				if(value is IFCModulusOfElasticityMeasure val)
				{
					ShearModulus = val;
				}
				else if(value == null)
				{
					ShearModulus = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _PoissonRatio
		{
			get
			{
				return PoissonRatio;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					PoissonRatio = val;
				}
				else if(value == null)
				{
					PoissonRatio = null;
				}
			}
		}
		public virtual Global.IFCThermalExpansionCoefficientMeasure? _ThermalExpansionCoefficient
		{
			get
			{
				return ThermalExpansionCoefficient;
			}
			set
			{
				if(value is IFCThermalExpansionCoefficientMeasure val)
				{
					ThermalExpansionCoefficient = val;
				}
				else if(value == null)
				{
					ThermalExpansionCoefficient = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMechanicalSteelMaterialProperties
	/// SUBTYPE OF (IfcMechanicalMaterialProperties);
	/// YieldStress : OPTIONAL IfcPressureMeasure;
	/// UltimateStress : OPTIONAL IfcPressureMeasure;
	/// UltimateStrain : OPTIONAL IfcPositiveRatioMeasure;
	/// HardeningModule : OPTIONAL IfcModulusOfElasticityMeasure;
	/// ProportionalStress : OPTIONAL IfcPressureMeasure;
	/// PlasticStrain : OPTIONAL IfcPositiveRatioMeasure;
	/// Relaxations : OPTIONAL SET [1:?] OF IfcRelaxation;
	/// WHERE
	/// WR31 : NOT(EXISTS(YieldStress)) OR (YieldStress >= 0.);
	/// WR32 : NOT(EXISTS(UltimateStress)) OR (UltimateStress >= 0.);
	/// WR33 : NOT(EXISTS(HardeningModule)) OR (HardeningModule >= 0.);
	/// WR34 : NOT(EXISTS(ProportionalStress)) OR (ProportionalStress >= 0.);
	/// END_ENTITY;
	/// <summary>
	public class IFCMechanicalSteelMaterialProperties : IFCMechanicalMaterialProperties, Global.IFCMechanicalSteelMaterialProperties
	{
		public virtual IFCPressureMeasure? YieldStress { get; set; }
		public virtual IFCPressureMeasure? UltimateStress { get; set; }
		public virtual IFCPositiveRatioMeasure? UltimateStrain { get; set; }
		public virtual IFCModulusOfElasticityMeasure? HardeningModule { get; set; }
		public virtual IFCPressureMeasure? ProportionalStress { get; set; }
		public virtual IFCPositiveRatioMeasure? PlasticStrain { get; set; }
		public virtual IFC_Attributes<IFCRelaxation>? Relaxations { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR32
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR33
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR34
		{
			get
			{
				return true;
			}
		}
		public IFCMechanicalSteelMaterialProperties() : base()
		{
		}
		public IFCMechanicalSteelMaterialProperties(IFCMaterial? Material, IFCDynamicViscosityMeasure? DynamicViscosity, IFCModulusOfElasticityMeasure? YoungModulus, IFCModulusOfElasticityMeasure? ShearModulus, IFCPositiveRatioMeasure? PoissonRatio, IFCThermalExpansionCoefficientMeasure? ThermalExpansionCoefficient, IFCPressureMeasure? YieldStress, IFCPressureMeasure? UltimateStress, IFCPositiveRatioMeasure? UltimateStrain, IFCModulusOfElasticityMeasure? HardeningModule, IFCPressureMeasure? ProportionalStress, IFCPositiveRatioMeasure? PlasticStrain, IFC_Attributes<IFCRelaxation>? Relaxations) : base (Material, DynamicViscosity, YoungModulus, ShearModulus, PoissonRatio, ThermalExpansionCoefficient)
		{
			this.YieldStress = YieldStress;
			this.UltimateStress = UltimateStress;
			this.UltimateStrain = UltimateStrain;
			this.HardeningModule = HardeningModule;
			this.ProportionalStress = ProportionalStress;
			this.PlasticStrain = PlasticStrain;
			this.Relaxations = Relaxations;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"DynamicViscosity", DynamicViscosity},
				{"YoungModulus", YoungModulus},
				{"ShearModulus", ShearModulus},
				{"PoissonRatio", PoissonRatio},
				{"ThermalExpansionCoefficient", ThermalExpansionCoefficient},
				{"YieldStress", YieldStress},
				{"UltimateStress", UltimateStress},
				{"UltimateStrain", UltimateStrain},
				{"HardeningModule", HardeningModule},
				{"ProportionalStress", ProportionalStress},
				{"PlasticStrain", PlasticStrain},
				{"Relaxations", Relaxations}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22},
				{"is_WR31", is_WR31},
				{"is_WR32", is_WR32},
				{"is_WR33", is_WR33},
				{"is_WR34", is_WR34}
			};
		}
		public virtual Global.IFCPressureMeasure? _YieldStress
		{
			get
			{
				return YieldStress;
			}
			set
			{
				if(value is IFCPressureMeasure val)
				{
					YieldStress = val;
				}
				else if(value == null)
				{
					YieldStress = null;
				}
			}
		}
		public virtual Global.IFCPressureMeasure? _UltimateStress
		{
			get
			{
				return UltimateStress;
			}
			set
			{
				if(value is IFCPressureMeasure val)
				{
					UltimateStress = val;
				}
				else if(value == null)
				{
					UltimateStress = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _UltimateStrain
		{
			get
			{
				return UltimateStrain;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					UltimateStrain = val;
				}
				else if(value == null)
				{
					UltimateStrain = null;
				}
			}
		}
		public virtual Global.IFCModulusOfElasticityMeasure? _HardeningModule
		{
			get
			{
				return HardeningModule;
			}
			set
			{
				if(value is IFCModulusOfElasticityMeasure val)
				{
					HardeningModule = val;
				}
				else if(value == null)
				{
					HardeningModule = null;
				}
			}
		}
		public virtual Global.IFCPressureMeasure? _ProportionalStress
		{
			get
			{
				return ProportionalStress;
			}
			set
			{
				if(value is IFCPressureMeasure val)
				{
					ProportionalStress = val;
				}
				else if(value == null)
				{
					ProportionalStress = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _PlasticStrain
		{
			get
			{
				return PlasticStrain;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					PlasticStrain = val;
				}
				else if(value == null)
				{
					PlasticStrain = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelaxation>? _Relaxations
		{
			get
			{
				if(Relaxations != null)
				{
					IFC_Attributes<Global.IFCRelaxation>? items = new IFC_Attributes<Global.IFCRelaxation>();
					foreach (IFCRelaxation item in Relaxations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Relaxations = null;
				}
				else
				{
					Relaxations = new IFC_Attributes<IFCRelaxation>();
					foreach(var val in value)
					{
						if(val is IFCRelaxation v)
						{
							Relaxations.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMember
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCMember : IFCBuildingElement, Global.IFCMember
	{
		public IFCMember() : base()
		{
		}
		public IFCMember(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcMemberType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcMemberTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCMemberType : IFCBuildingElementType, Global.IFCMemberType
	{
		public virtual IFCMemberTypeEnum? PredefinedType { get; set; }
		public IFCMemberType() : base()
		{
		}
		public IFCMemberType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCMemberTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCMemberTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCMemberTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMetric
	/// SUBTYPE OF (IfcConstraint);
	/// Benchmark : IfcBenchmarkEnum;
	/// ValueSource : OPTIONAL IfcLabel;
	/// DataValue : IfcMetricValueSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCMetric : IFCConstraint, Global.IFCMetric
	{
		public virtual IFCBenchmarkEnum? Benchmark { get; set; }
		public virtual IFCLabel? ValueSource { get; set; }
		public virtual IFCMetricValueSelect? DataValue { get; set; }
		public IFCMetric() : base()
		{
		}
		public IFCMetric(IFCLabel? Name, IFCText? Description, IFCConstraintEnum? ConstraintGrade, IFCLabel? ConstraintSource, IFCActorSelect? CreatingActor, IFCDateTimeSelect? CreationTime, IFCLabel? UserDefinedGrade, IFCBenchmarkEnum? Benchmark, IFCLabel? ValueSource, IFCMetricValueSelect? DataValue) : base (Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade)
		{
			this.Benchmark = Benchmark;
			this.ValueSource = ValueSource;
			this.DataValue = DataValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"ConstraintGrade", ConstraintGrade},
				{"ConstraintSource", ConstraintSource},
				{"CreatingActor", CreatingActor},
				{"CreationTime", CreationTime},
				{"UserDefinedGrade", UserDefinedGrade},
				{"Benchmark", Benchmark},
				{"ValueSource", ValueSource},
				{"DataValue", DataValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ClassifiedAs", ClassifiedAs},
				{"RelatesConstraints", RelatesConstraints},
				{"IsRelatedWith", IsRelatedWith},
				{"PropertiesForConstraint", PropertiesForConstraint},
				{"Aggregates", Aggregates},
				{"IsAggregatedIn", IsAggregatedIn}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11}
			};
		}
		public virtual Global.IFCBenchmarkEnum? _Benchmark
		{
			get
			{
				return Benchmark;
			}
			set
			{
				if(value is IFCBenchmarkEnum val)
				{
					Benchmark = val;
				}
				else if(value == null)
				{
					Benchmark = null;
				}
			}
		}
		public virtual Global.IFCLabel? _ValueSource
		{
			get
			{
				return ValueSource;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ValueSource = val;
				}
				else if(value == null)
				{
					ValueSource = null;
				}
			}
		}
		public virtual Global.IFCMetricValueSelect? _DataValue
		{
			get
			{
				return DataValue;
			}
			set
			{
				if(value is IFCMetricValueSelect val)
				{
					DataValue = val;
				}
				else if(value == null)
				{
					DataValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMonetaryUnit;
	/// Currency : IfcCurrencyEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCMonetaryUnit : IFC_ClassEntity, IFCUnit, Global.IFCMonetaryUnit
	{
		public virtual IFCCurrencyEnum? Currency { get; set; }
		public IFCMonetaryUnit() : base()
		{
		}
		public IFCMonetaryUnit(IFCCurrencyEnum? Currency) : base ()
		{
			this.Currency = Currency;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Currency", Currency}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCurrencyEnum? _Currency
		{
			get
			{
				return Currency;
			}
			set
			{
				if(value is IFCCurrencyEnum val)
				{
					Currency = val;
				}
				else if(value == null)
				{
					Currency = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMotorConnectionType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcMotorConnectionTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCMotorConnectionType : IFCEnergyConversionDeviceType, Global.IFCMotorConnectionType
	{
		public virtual IFCMotorConnectionTypeEnum? PredefinedType { get; set; }
		public IFCMotorConnectionType() : base()
		{
		}
		public IFCMotorConnectionType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCMotorConnectionTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCMotorConnectionTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCMotorConnectionTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcMove
	/// SUBTYPE OF (IfcTask);
	/// MoveFrom : IfcSpatialStructureElement;
	/// MoveTo : IfcSpatialStructureElement;
	/// PunchList : OPTIONAL LIST [1:?] OF UNIQUE IfcText;
	/// WHERE
	/// WR1 : SIZEOF(SELF\IfcProcess.OperatesOn) >= 1;
	/// WR2 : SIZEOF(QUERY(temp <* OperatesOn |
	/// SIZEOF(QUERY(temp2 <* temp.RelatedObjects |
	/// ('IFC2X3.IFCACTOR' IN TYPEOF (temp2)) OR
	/// ('IFC2X3.IFCEQUIPMENTELEMENT' IN TYPEOF (temp2)) OR
	/// ('IFC2X3.IFCFURNISHINGELEMENT' IN TYPEOF (temp2)) )) >=1
	/// )) >= 1;
	/// WR3 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IFCMove : IFCTask, Global.IFCMove
	{
		public virtual IFCSpatialStructureElement? MoveFrom { get; set; }
		public virtual IFCSpatialStructureElement? MoveTo { get; set; }
		public virtual IFC_Attributes<IFCText>? PunchList { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public override bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public override bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCMove() : base()
		{
		}
		public IFCMove(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? TaskId, IFCLabel? Status, IFCLabel? WorkMethod, BOOLEAN? IsMilestone, INTEGER? Priority, IFCSpatialStructureElement? MoveFrom, IFCSpatialStructureElement? MoveTo, IFC_Attributes<IFCText>? PunchList) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, TaskId, Status, WorkMethod, IsMilestone, Priority)
		{
			this.MoveFrom = MoveFrom;
			this.MoveTo = MoveTo;
			this.PunchList = PunchList;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"TaskId", TaskId},
				{"Status", Status},
				{"WorkMethod", WorkMethod},
				{"IsMilestone", IsMilestone},
				{"Priority", Priority},
				{"MoveFrom", MoveFrom},
				{"MoveTo", MoveTo},
				{"PunchList", PunchList}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"OperatesOn", OperatesOn},
				{"IsSuccessorFrom", IsSuccessorFrom},
				{"IsPredecessorTo", IsPredecessorTo}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual Global.IFCSpatialStructureElement? _MoveFrom
		{
			get
			{
				return MoveFrom;
			}
			set
			{
				if(value is IFCSpatialStructureElement val)
				{
					MoveFrom = val;
				}
				else if(value == null)
				{
					MoveFrom = null;
				}
			}
		}
		public virtual Global.IFCSpatialStructureElement? _MoveTo
		{
			get
			{
				return MoveTo;
			}
			set
			{
				if(value is IFCSpatialStructureElement val)
				{
					MoveTo = val;
				}
				else if(value == null)
				{
					MoveTo = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCText>? _PunchList
		{
			get
			{
				if(PunchList != null)
				{
					IFC_Attributes<Global.IFCText>? items = new IFC_Attributes<Global.IFCText>();
					foreach (IFCText item in PunchList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					PunchList = null;
				}
				else
				{
					PunchList = new IFC_Attributes<IFCText>();
					foreach(var val in value)
					{
						if(val is IFCText v)
						{
							PunchList.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcNamedUnit
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcContextDependentUnit
	/// ,IfcConversionBasedUnit
	/// ,IfcSIUnit));
	/// Dimensions : IfcDimensionalExponents;
	/// UnitType : IfcUnitEnum;
	/// WHERE
	/// WR1 : IfcCorrectDimensions (SELF.UnitType, SELF.Dimensions);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCNamedUnit : IFC_ClassEntity, IFCUnit, Global.IFCNamedUnit
	{
		public virtual IFCDimensionalExponents? Dimensions { get; set; }
		public virtual IFCUnitEnum? UnitType { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCNamedUnit() : base()
		{
		}
		public IFCNamedUnit(IFCDimensionalExponents? Dimensions, IFCUnitEnum? UnitType) : base ()
		{
			this.Dimensions = Dimensions;
			this.UnitType = UnitType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dimensions", Dimensions},
				{"UnitType", UnitType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCDimensionalExponents? _Dimensions
		{
			get
			{
				return Dimensions;
			}
			set
			{
				if(value is IFCDimensionalExponents val)
				{
					Dimensions = val;
				}
				else if(value == null)
				{
					Dimensions = null;
				}
			}
		}
		public virtual Global.IFCUnitEnum? _UnitType
		{
			get
			{
				return UnitType;
			}
			set
			{
				if(value is IFCUnitEnum val)
				{
					UnitType = val;
				}
				else if(value == null)
				{
					UnitType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcObject
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcActor
	/// ,IfcControl
	/// ,IfcGroup
	/// ,IfcProcess
	/// ,IfcProduct
	/// ,IfcProject
	/// ,IfcResource))
	/// SUBTYPE OF (IfcObjectDefinition);
	/// ObjectType : OPTIONAL IfcLabel;
	/// INVERSE
	/// IsDefinedBy : SET [0:?] OF IfcRelDefines FOR RelatedObjects;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(temp <* IsDefinedBy | 'IFC2X3.IFCRELDEFINESBYTYPE' IN TYPEOF(temp))) <= 1;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCObject : IFCObjectDefinition, Global.IFCObject
	{
		public virtual IFCLabel? ObjectType { get; set; }
		public IFC_Attributes<IFCRelDefines>? IsDefinedBy {get{return new IFC_Attributes<IFCRelDefines>(Model?.GetItems<IFCRelDefines>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList());}}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCObject() : base()
		{
		}
		public IFCObject(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ObjectType = ObjectType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _ObjectType
		{
			get
			{
				return ObjectType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ObjectType = val;
				}
				else if(value == null)
				{
					ObjectType = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelDefines>? _IsDefinedBy
		{
			get
			{
				if(IsDefinedBy != null)
				{
					IFC_Attributes<Global.IFCRelDefines>? items = new IFC_Attributes<Global.IFCRelDefines>();
					foreach (IFCRelDefines item in IsDefinedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcObjectDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcObject
	/// ,IfcTypeObject))
	/// SUBTYPE OF (IfcRoot);
	/// INVERSE
	/// HasAssignments : SET [0:?] OF IfcRelAssigns FOR RelatedObjects;
	/// IsDecomposedBy : SET [0:?] OF IfcRelDecomposes FOR RelatingObject;
	/// Decomposes : SET [0:1] OF IfcRelDecomposes FOR RelatedObjects;
	/// HasAssociations : SET [0:?] OF IfcRelAssociates FOR RelatedObjects;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCObjectDefinition : IFCRoot, Global.IFCObjectDefinition
	{
		public IFC_Attributes<IFCRelAssigns>? HasAssignments {get{return new IFC_Attributes<IFCRelAssigns>(Model?.GetItems<IFCRelAssigns>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList());}}
		public IFC_Attributes<IFCRelDecomposes>? IsDecomposedBy {get{return new IFC_Attributes<IFCRelDecomposes>(Model?.GetItems<IFCRelDecomposes>().Where(x => x.RelatingObject != null && x.RelatingObject == this).ToList());}}
		public IFC_Attributes<IFCRelDecomposes>? Decomposes {get{return new IFC_Attributes<IFCRelDecomposes>(Model?.GetItems<IFCRelDecomposes>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList());}}
		public IFC_Attributes<IFCRelAssociates>? HasAssociations {get{return new IFC_Attributes<IFCRelAssociates>(Model?.GetItems<IFCRelAssociates>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList());}}
		public IFCObjectDefinition() : base()
		{
		}
		public IFCObjectDefinition(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCRelAssigns>? _HasAssignments
		{
			get
			{
				if(HasAssignments != null)
				{
					IFC_Attributes<Global.IFCRelAssigns>? items = new IFC_Attributes<Global.IFCRelAssigns>();
					foreach (IFCRelAssigns item in HasAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelDecomposes>? _IsDecomposedBy
		{
			get
			{
				if(IsDecomposedBy != null)
				{
					IFC_Attributes<Global.IFCRelDecomposes>? items = new IFC_Attributes<Global.IFCRelDecomposes>();
					foreach (IFCRelDecomposes item in IsDecomposedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelDecomposes>? _Decomposes
		{
			get
			{
				if(Decomposes != null)
				{
					IFC_Attributes<Global.IFCRelDecomposes>? items = new IFC_Attributes<Global.IFCRelDecomposes>();
					foreach (IFCRelDecomposes item in Decomposes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelAssociates>? _HasAssociations
		{
			get
			{
				if(HasAssociations != null)
				{
					IFC_Attributes<Global.IFCRelAssociates>? items = new IFC_Attributes<Global.IFCRelAssociates>();
					foreach (IFCRelAssociates item in HasAssociations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcObjectPlacement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcGridPlacement
	/// ,IfcLocalPlacement));
	/// INVERSE
	/// PlacesObject : SET [1:1] OF IfcProduct FOR ObjectPlacement;
	/// ReferencedByPlacements : SET [0:?] OF IfcLocalPlacement FOR PlacementRelTo;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCObjectPlacement : IFC_ClassEntity, Global.IFCObjectPlacement
	{
		public IFC_Attributes<IFCProduct>? PlacesObject {get{return new IFC_Attributes<IFCProduct>(Model?.GetItems<IFCProduct>().Where(x => x.ObjectPlacement != null && x.ObjectPlacement == this).ToList());}}
		public IFC_Attributes<IFCLocalPlacement>? ReferencedByPlacements {get{return new IFC_Attributes<IFCLocalPlacement>(Model?.GetItems<IFCLocalPlacement>().Where(x => x.PlacementRelTo != null && x.PlacementRelTo == this).ToList());}}
		public IFCObjectPlacement() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PlacesObject", PlacesObject},
				{"ReferencedByPlacements", ReferencedByPlacements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCProduct>? _PlacesObject
		{
			get
			{
				if(PlacesObject != null)
				{
					IFC_Attributes<Global.IFCProduct>? items = new IFC_Attributes<Global.IFCProduct>();
					foreach (IFCProduct item in PlacesObject)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCLocalPlacement>? _ReferencedByPlacements
		{
			get
			{
				if(ReferencedByPlacements != null)
				{
					IFC_Attributes<Global.IFCLocalPlacement>? items = new IFC_Attributes<Global.IFCLocalPlacement>();
					foreach (IFCLocalPlacement item in ReferencedByPlacements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcObjective
	/// SUBTYPE OF (IfcConstraint);
	/// BenchmarkValues : OPTIONAL IfcMetric;
	/// ResultValues : OPTIONAL IfcMetric;
	/// ObjectiveQualifier : IfcObjectiveEnum;
	/// UserDefinedQualifier : OPTIONAL IfcLabel;
	/// WHERE
	/// WR21 : (ObjectiveQualifier <> IfcObjectiveEnum.USERDEFINED) OR
	/// ((ObjectiveQualifier = IfcObjectiveEnum.USERDEFINED) AND EXISTS(SELF\IfcObjective.UserDefinedQualifier));
	/// END_ENTITY;
	/// <summary>
	public class IFCObjective : IFCConstraint, Global.IFCObjective
	{
		public virtual IFCMetric? BenchmarkValues { get; set; }
		public virtual IFCMetric? ResultValues { get; set; }
		public virtual IFCObjectiveEnum? ObjectiveQualifier { get; set; }
		public virtual IFCLabel? UserDefinedQualifier { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public IFCObjective() : base()
		{
		}
		public IFCObjective(IFCLabel? Name, IFCText? Description, IFCConstraintEnum? ConstraintGrade, IFCLabel? ConstraintSource, IFCActorSelect? CreatingActor, IFCDateTimeSelect? CreationTime, IFCLabel? UserDefinedGrade, IFCMetric? BenchmarkValues, IFCMetric? ResultValues, IFCObjectiveEnum? ObjectiveQualifier, IFCLabel? UserDefinedQualifier) : base (Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade)
		{
			this.BenchmarkValues = BenchmarkValues;
			this.ResultValues = ResultValues;
			this.ObjectiveQualifier = ObjectiveQualifier;
			this.UserDefinedQualifier = UserDefinedQualifier;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"ConstraintGrade", ConstraintGrade},
				{"ConstraintSource", ConstraintSource},
				{"CreatingActor", CreatingActor},
				{"CreationTime", CreationTime},
				{"UserDefinedGrade", UserDefinedGrade},
				{"BenchmarkValues", BenchmarkValues},
				{"ResultValues", ResultValues},
				{"ObjectiveQualifier", ObjectiveQualifier},
				{"UserDefinedQualifier", UserDefinedQualifier}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ClassifiedAs", ClassifiedAs},
				{"RelatesConstraints", RelatesConstraints},
				{"IsRelatedWith", IsRelatedWith},
				{"PropertiesForConstraint", PropertiesForConstraint},
				{"Aggregates", Aggregates},
				{"IsAggregatedIn", IsAggregatedIn}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCMetric? _BenchmarkValues
		{
			get
			{
				return BenchmarkValues;
			}
			set
			{
				if(value is IFCMetric val)
				{
					BenchmarkValues = val;
				}
				else if(value == null)
				{
					BenchmarkValues = null;
				}
			}
		}
		public virtual Global.IFCMetric? _ResultValues
		{
			get
			{
				return ResultValues;
			}
			set
			{
				if(value is IFCMetric val)
				{
					ResultValues = val;
				}
				else if(value == null)
				{
					ResultValues = null;
				}
			}
		}
		public virtual Global.IFCObjectiveEnum? _ObjectiveQualifier
		{
			get
			{
				return ObjectiveQualifier;
			}
			set
			{
				if(value is IFCObjectiveEnum val)
				{
					ObjectiveQualifier = val;
				}
				else if(value == null)
				{
					ObjectiveQualifier = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedQualifier
		{
			get
			{
				return UserDefinedQualifier;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedQualifier = val;
				}
				else if(value == null)
				{
					UserDefinedQualifier = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOccupant
	/// SUBTYPE OF (IfcActor);
	/// PredefinedType : IfcOccupantTypeEnum;
	/// WHERE
	/// WR31 : NOT(PredefinedType = IfcOccupantTypeEnum.USERDEFINED)
	/// OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IFCOccupant : IFCActor, Global.IFCOccupant
	{
		public virtual IFCOccupantTypeEnum? PredefinedType { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCOccupant() : base()
		{
		}
		public IFCOccupant(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCActorSelect? TheActor, IFCOccupantTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, TheActor)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"TheActor", TheActor},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsActingUpon", IsActingUpon}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR31", is_WR31}
			};
		}
		public virtual Global.IFCOccupantTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCOccupantTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOffsetCurve2D
	/// SUBTYPE OF (IfcCurve);
	/// BasisCurve : IfcCurve;
	/// Distance : IfcLengthMeasure;
	/// SelfIntersect : LOGICAL;
	/// WHERE
	/// WR1 : BasisCurve.Dim = 2;
	/// END_ENTITY;
	/// <summary>
	public class IFCOffsetCurve2D : IFCCurve, Global.IFCOffsetCurve2D
	{
		public virtual IFCCurve? BasisCurve { get; set; }
		public virtual IFCLengthMeasure? Distance { get; set; }
		public virtual LOGICAL? SelfIntersect { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCOffsetCurve2D() : base()
		{
		}
		public IFCOffsetCurve2D(IFCCurve? BasisCurve, IFCLengthMeasure? Distance, LOGICAL? SelfIntersect) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"BasisCurve", BasisCurve},
				{"Distance", Distance},
				{"SelfIntersect", SelfIntersect}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCCurve? _BasisCurve
		{
			get
			{
				return BasisCurve;
			}
			set
			{
				if(value is IFCCurve val)
				{
					BasisCurve = val;
				}
				else if(value == null)
				{
					BasisCurve = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _Distance
		{
			get
			{
				return Distance;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					Distance = val;
				}
				else if(value == null)
				{
					Distance = null;
				}
			}
		}
		public virtual LOGICAL? _SelfIntersect
		{
			get
			{
				return SelfIntersect;
			}
			set
			{
				if(value is LOGICAL val)
				{
					SelfIntersect = val;
				}
				else if(value == null)
				{
					SelfIntersect = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOffsetCurve3D
	/// SUBTYPE OF (IfcCurve);
	/// BasisCurve : IfcCurve;
	/// Distance : IfcLengthMeasure;
	/// SelfIntersect : LOGICAL;
	/// RefDirection : IfcDirection;
	/// WHERE
	/// WR1 : BasisCurve.Dim = 3;
	/// END_ENTITY;
	/// <summary>
	public class IFCOffsetCurve3D : IFCCurve, Global.IFCOffsetCurve3D
	{
		public virtual IFCCurve? BasisCurve { get; set; }
		public virtual IFCLengthMeasure? Distance { get; set; }
		public virtual LOGICAL? SelfIntersect { get; set; }
		public virtual IFCDirection? RefDirection { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCOffsetCurve3D() : base()
		{
		}
		public IFCOffsetCurve3D(IFCCurve? BasisCurve, IFCLengthMeasure? Distance, LOGICAL? SelfIntersect, IFCDirection? RefDirection) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.Distance = Distance;
			this.SelfIntersect = SelfIntersect;
			this.RefDirection = RefDirection;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"BasisCurve", BasisCurve},
				{"Distance", Distance},
				{"SelfIntersect", SelfIntersect},
				{"RefDirection", RefDirection}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCCurve? _BasisCurve
		{
			get
			{
				return BasisCurve;
			}
			set
			{
				if(value is IFCCurve val)
				{
					BasisCurve = val;
				}
				else if(value == null)
				{
					BasisCurve = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _Distance
		{
			get
			{
				return Distance;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					Distance = val;
				}
				else if(value == null)
				{
					Distance = null;
				}
			}
		}
		public virtual LOGICAL? _SelfIntersect
		{
			get
			{
				return SelfIntersect;
			}
			set
			{
				if(value is LOGICAL val)
				{
					SelfIntersect = val;
				}
				else if(value == null)
				{
					SelfIntersect = null;
				}
			}
		}
		public virtual Global.IFCDirection? _RefDirection
		{
			get
			{
				return RefDirection;
			}
			set
			{
				if(value is IFCDirection val)
				{
					RefDirection = val;
				}
				else if(value == null)
				{
					RefDirection = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOneDirectionRepeatFactor
	/// SUPERTYPE OF (ONEOF
	/// (IfcTwoDirectionRepeatFactor))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// RepeatFactor : IfcVector;
	/// END_ENTITY;
	/// <summary>
	public class IFCOneDirectionRepeatFactor : IFCGeometricRepresentationItem, IFCHatchLineDistanceSelect, Global.IFCOneDirectionRepeatFactor
	{
		public virtual IFCVector? RepeatFactor { get; set; }
		public IFCOneDirectionRepeatFactor() : base()
		{
		}
		public IFCOneDirectionRepeatFactor(IFCVector? RepeatFactor) : base ()
		{
			this.RepeatFactor = RepeatFactor;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepeatFactor", RepeatFactor}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCVector? _RepeatFactor
		{
			get
			{
				return RepeatFactor;
			}
			set
			{
				if(value is IFCVector val)
				{
					RepeatFactor = val;
				}
				else if(value == null)
				{
					RepeatFactor = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOpenShell
	/// SUBTYPE OF (IfcConnectedFaceSet);
	/// END_ENTITY;
	/// <summary>
	public class IFCOpenShell : IFCConnectedFaceSet, IFCShell, Global.IFCOpenShell
	{
		public IFCOpenShell() : base()
		{
		}
		public IFCOpenShell(IFC_Attributes<IFCFace>? CfsFaces) : base (CfsFaces)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"CfsFaces", CfsFaces}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcOpeningElement
	/// SUBTYPE OF (IfcFeatureElementSubtraction);
	/// INVERSE
	/// HasFillings : SET [0:?] OF IfcRelFillsElement FOR RelatingOpeningElement;
	/// END_ENTITY;
	/// <summary>
	public class IFCOpeningElement : IFCFeatureElementSubtraction, Global.IFCOpeningElement
	{
		public IFC_Attributes<IFCRelFillsElement>? HasFillings {get{return new IFC_Attributes<IFCRelFillsElement>(Model?.GetItems<IFCRelFillsElement>().Where(x => x.RelatingOpeningElement != null && x.RelatingOpeningElement == this).ToList());}}
		public IFCOpeningElement() : base()
		{
		}
		public IFCOpeningElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"VoidsElements", VoidsElements},
				{"HasFillings", HasFillings}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCRelFillsElement>? _HasFillings
		{
			get
			{
				if(HasFillings != null)
				{
					IFC_Attributes<Global.IFCRelFillsElement>? items = new IFC_Attributes<Global.IFCRelFillsElement>();
					foreach (IFCRelFillsElement item in HasFillings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOpticalMaterialProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// VisibleTransmittance : OPTIONAL IfcPositiveRatioMeasure;
	/// SolarTransmittance : OPTIONAL IfcPositiveRatioMeasure;
	/// ThermalIrTransmittance : OPTIONAL IfcPositiveRatioMeasure;
	/// ThermalIrEmissivityBack : OPTIONAL IfcPositiveRatioMeasure;
	/// ThermalIrEmissivityFront : OPTIONAL IfcPositiveRatioMeasure;
	/// VisibleReflectanceBack : OPTIONAL IfcPositiveRatioMeasure;
	/// VisibleReflectanceFront : OPTIONAL IfcPositiveRatioMeasure;
	/// SolarReflectanceFront : OPTIONAL IfcPositiveRatioMeasure;
	/// SolarReflectanceBack : OPTIONAL IfcPositiveRatioMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IFCOpticalMaterialProperties : IFCMaterialProperties, Global.IFCOpticalMaterialProperties
	{
		public virtual IFCPositiveRatioMeasure? VisibleTransmittance { get; set; }
		public virtual IFCPositiveRatioMeasure? SolarTransmittance { get; set; }
		public virtual IFCPositiveRatioMeasure? ThermalIrTransmittance { get; set; }
		public virtual IFCPositiveRatioMeasure? ThermalIrEmissivityBack { get; set; }
		public virtual IFCPositiveRatioMeasure? ThermalIrEmissivityFront { get; set; }
		public virtual IFCPositiveRatioMeasure? VisibleReflectanceBack { get; set; }
		public virtual IFCPositiveRatioMeasure? VisibleReflectanceFront { get; set; }
		public virtual IFCPositiveRatioMeasure? SolarReflectanceFront { get; set; }
		public virtual IFCPositiveRatioMeasure? SolarReflectanceBack { get; set; }
		public IFCOpticalMaterialProperties() : base()
		{
		}
		public IFCOpticalMaterialProperties(IFCMaterial? Material, IFCPositiveRatioMeasure? VisibleTransmittance, IFCPositiveRatioMeasure? SolarTransmittance, IFCPositiveRatioMeasure? ThermalIrTransmittance, IFCPositiveRatioMeasure? ThermalIrEmissivityBack, IFCPositiveRatioMeasure? ThermalIrEmissivityFront, IFCPositiveRatioMeasure? VisibleReflectanceBack, IFCPositiveRatioMeasure? VisibleReflectanceFront, IFCPositiveRatioMeasure? SolarReflectanceFront, IFCPositiveRatioMeasure? SolarReflectanceBack) : base (Material)
		{
			this.VisibleTransmittance = VisibleTransmittance;
			this.SolarTransmittance = SolarTransmittance;
			this.ThermalIrTransmittance = ThermalIrTransmittance;
			this.ThermalIrEmissivityBack = ThermalIrEmissivityBack;
			this.ThermalIrEmissivityFront = ThermalIrEmissivityFront;
			this.VisibleReflectanceBack = VisibleReflectanceBack;
			this.VisibleReflectanceFront = VisibleReflectanceFront;
			this.SolarReflectanceFront = SolarReflectanceFront;
			this.SolarReflectanceBack = SolarReflectanceBack;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"VisibleTransmittance", VisibleTransmittance},
				{"SolarTransmittance", SolarTransmittance},
				{"ThermalIrTransmittance", ThermalIrTransmittance},
				{"ThermalIrEmissivityBack", ThermalIrEmissivityBack},
				{"ThermalIrEmissivityFront", ThermalIrEmissivityFront},
				{"VisibleReflectanceBack", VisibleReflectanceBack},
				{"VisibleReflectanceFront", VisibleReflectanceFront},
				{"SolarReflectanceFront", SolarReflectanceFront},
				{"SolarReflectanceBack", SolarReflectanceBack}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveRatioMeasure? _VisibleTransmittance
		{
			get
			{
				return VisibleTransmittance;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					VisibleTransmittance = val;
				}
				else if(value == null)
				{
					VisibleTransmittance = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _SolarTransmittance
		{
			get
			{
				return SolarTransmittance;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					SolarTransmittance = val;
				}
				else if(value == null)
				{
					SolarTransmittance = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _ThermalIrTransmittance
		{
			get
			{
				return ThermalIrTransmittance;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					ThermalIrTransmittance = val;
				}
				else if(value == null)
				{
					ThermalIrTransmittance = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _ThermalIrEmissivityBack
		{
			get
			{
				return ThermalIrEmissivityBack;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					ThermalIrEmissivityBack = val;
				}
				else if(value == null)
				{
					ThermalIrEmissivityBack = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _ThermalIrEmissivityFront
		{
			get
			{
				return ThermalIrEmissivityFront;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					ThermalIrEmissivityFront = val;
				}
				else if(value == null)
				{
					ThermalIrEmissivityFront = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _VisibleReflectanceBack
		{
			get
			{
				return VisibleReflectanceBack;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					VisibleReflectanceBack = val;
				}
				else if(value == null)
				{
					VisibleReflectanceBack = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _VisibleReflectanceFront
		{
			get
			{
				return VisibleReflectanceFront;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					VisibleReflectanceFront = val;
				}
				else if(value == null)
				{
					VisibleReflectanceFront = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _SolarReflectanceFront
		{
			get
			{
				return SolarReflectanceFront;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					SolarReflectanceFront = val;
				}
				else if(value == null)
				{
					SolarReflectanceFront = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _SolarReflectanceBack
		{
			get
			{
				return SolarReflectanceBack;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					SolarReflectanceBack = val;
				}
				else if(value == null)
				{
					SolarReflectanceBack = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOrderAction
	/// SUBTYPE OF (IfcTask);
	/// ActionID : IfcIdentifier;
	/// UNIQUE
	/// UR2 : ActionID;
	/// END_ENTITY;
	/// <summary>
	public class IFCOrderAction : IFCTask, Global.IFCOrderAction
	{
		public virtual IFCIdentifier? ActionID { get; set; }
		public IFCOrderAction() : base()
		{
		}
		public IFCOrderAction(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? TaskId, IFCLabel? Status, IFCLabel? WorkMethod, BOOLEAN? IsMilestone, INTEGER? Priority, IFCIdentifier? ActionID) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, TaskId, Status, WorkMethod, IsMilestone, Priority)
		{
			this.ActionID = ActionID;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"TaskId", TaskId},
				{"Status", Status},
				{"WorkMethod", WorkMethod},
				{"IsMilestone", IsMilestone},
				{"Priority", Priority},
				{"ActionID", ActionID}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"OperatesOn", OperatesOn},
				{"IsSuccessorFrom", IsSuccessorFrom},
				{"IsPredecessorTo", IsPredecessorTo}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual Global.IFCIdentifier? _ActionID
		{
			get
			{
				return ActionID;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					ActionID = val;
				}
				else if(value == null)
				{
					ActionID = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOrganization;
	/// Id : OPTIONAL IfcIdentifier;
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
	/// Addresses : OPTIONAL LIST [1:?] OF IfcAddress;
	/// INVERSE
	/// IsRelatedBy : SET [0:?] OF IfcOrganizationRelationship FOR RelatedOrganizations;
	/// Relates : SET [0:?] OF IfcOrganizationRelationship FOR RelatingOrganization;
	/// Engages : SET [0:?] OF IfcPersonAndOrganization FOR TheOrganization;
	/// END_ENTITY;
	/// <summary>
	public class IFCOrganization : IFC_ClassEntity, IFCActorSelect, IFCObjectReferenceSelect, Global.IFCOrganization
	{
		public virtual IFCIdentifier? Id { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFC_Attributes<IFCActorRole>? Roles { get; set; }
		public virtual IFC_Attributes<IFCAddress>? Addresses { get; set; }
		public IFC_Attributes<IFCOrganizationRelationship>? IsRelatedBy {get{return new IFC_Attributes<IFCOrganizationRelationship>(Model?.GetItems<IFCOrganizationRelationship>().Where(x => x.RelatedOrganizations != null && x.RelatedOrganizations.Contains(this)).ToList());}}
		public IFC_Attributes<IFCOrganizationRelationship>? Relates {get{return new IFC_Attributes<IFCOrganizationRelationship>(Model?.GetItems<IFCOrganizationRelationship>().Where(x => x.RelatingOrganization != null && x.RelatingOrganization == this).ToList());}}
		public IFC_Attributes<IFCPersonAndOrganization>? Engages {get{return new IFC_Attributes<IFCPersonAndOrganization>(Model?.GetItems<IFCPersonAndOrganization>().Where(x => x.TheOrganization != null && x.TheOrganization == this).ToList());}}
		public IFCOrganization() : base()
		{
		}
		public IFCOrganization(IFCIdentifier? Id, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCActorRole>? Roles, IFC_Attributes<IFCAddress>? Addresses) : base ()
		{
			this.Id = Id;
			this.Name = Name;
			this.Description = Description;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Id", Id},
				{"Name", Name},
				{"Description", Description},
				{"Roles", Roles},
				{"Addresses", Addresses}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"IsRelatedBy", IsRelatedBy},
				{"Relates", Relates},
				{"Engages", Engages}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCIdentifier? _Id
		{
			get
			{
				return Id;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					Id = val;
				}
				else if(value == null)
				{
					Id = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCActorRole>? _Roles
		{
			get
			{
				if(Roles != null)
				{
					IFC_Attributes<Global.IFCActorRole>? items = new IFC_Attributes<Global.IFCActorRole>();
					foreach (IFCActorRole item in Roles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Roles = null;
				}
				else
				{
					Roles = new IFC_Attributes<IFCActorRole>();
					foreach(var val in value)
					{
						if(val is IFCActorRole v)
						{
							Roles.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCAddress>? _Addresses
		{
			get
			{
				if(Addresses != null)
				{
					IFC_Attributes<Global.IFCAddress>? items = new IFC_Attributes<Global.IFCAddress>();
					foreach (IFCAddress item in Addresses)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Addresses = null;
				}
				else
				{
					Addresses = new IFC_Attributes<IFCAddress>();
					foreach(var val in value)
					{
						if(val is IFCAddress v)
						{
							Addresses.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCOrganizationRelationship>? _IsRelatedBy
		{
			get
			{
				if(IsRelatedBy != null)
				{
					IFC_Attributes<Global.IFCOrganizationRelationship>? items = new IFC_Attributes<Global.IFCOrganizationRelationship>();
					foreach (IFCOrganizationRelationship item in IsRelatedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCOrganizationRelationship>? _Relates
		{
			get
			{
				if(Relates != null)
				{
					IFC_Attributes<Global.IFCOrganizationRelationship>? items = new IFC_Attributes<Global.IFCOrganizationRelationship>();
					foreach (IFCOrganizationRelationship item in Relates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCPersonAndOrganization>? _Engages
		{
			get
			{
				if(Engages != null)
				{
					IFC_Attributes<Global.IFCPersonAndOrganization>? items = new IFC_Attributes<Global.IFCPersonAndOrganization>();
					foreach (IFCPersonAndOrganization item in Engages)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOrganizationRelationship;
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// RelatingOrganization : IfcOrganization;
	/// RelatedOrganizations : SET [1:?] OF IfcOrganization;
	/// END_ENTITY;
	/// <summary>
	public class IFCOrganizationRelationship : IFC_ClassEntity, Global.IFCOrganizationRelationship
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFCOrganization? RelatingOrganization { get; set; }
		public virtual IFC_Attributes<IFCOrganization>? RelatedOrganizations { get; set; }
		public IFCOrganizationRelationship() : base()
		{
		}
		public IFCOrganizationRelationship(IFCLabel? Name, IFCText? Description, IFCOrganization? RelatingOrganization, IFC_Attributes<IFCOrganization>? RelatedOrganizations) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.RelatingOrganization = RelatingOrganization;
			this.RelatedOrganizations = RelatedOrganizations;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"RelatingOrganization", RelatingOrganization},
				{"RelatedOrganizations", RelatedOrganizations}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCOrganization? _RelatingOrganization
		{
			get
			{
				return RelatingOrganization;
			}
			set
			{
				if(value is IFCOrganization val)
				{
					RelatingOrganization = val;
				}
				else if(value == null)
				{
					RelatingOrganization = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCOrganization>? _RelatedOrganizations
		{
			get
			{
				if(RelatedOrganizations != null)
				{
					IFC_Attributes<Global.IFCOrganization>? items = new IFC_Attributes<Global.IFCOrganization>();
					foreach (IFCOrganization item in RelatedOrganizations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedOrganizations = null;
				}
				else
				{
					RelatedOrganizations = new IFC_Attributes<IFCOrganization>();
					foreach(var val in value)
					{
						if(val is IFCOrganization v)
						{
							RelatedOrganizations.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOrientedEdge
	/// SUBTYPE OF (IfcEdge);
	/// EdgeElement : IfcEdge;
	/// Orientation : BOOLEAN;
	/// DERIVE
	/// SELF\IfcEdge.EdgeStart : IfcVertex := IfcBooleanChoose
	/// (Orientation, EdgeElement.EdgeStart, EdgeElement.EdgeEnd);
	/// SELF\IfcEdge.EdgeEnd : IfcVertex := IfcBooleanChoose
	/// (Orientation, EdgeElement.EdgeEnd, EdgeElement.EdgeStart);
	/// WHERE
	/// WR1 : NOT('IFC2X3.IFCORIENTEDEDGE' IN TYPEOF(EdgeElement));
	/// END_ENTITY;
	/// <summary>
	public class IFCOrientedEdge : IFCEdge, Global.IFCOrientedEdge
	{
		public virtual IFCEdge? EdgeElement { get; set; }
		public virtual BOOLEAN? Orientation { get; set; }
		public override IFCVertex? EdgeStart
		{
			get
			{
				//MANUAL : IFC2x3.IFCOrientedEdge.EdgeStart
				// IfcBooleanChoose
				return null;
				//END_MANUAL
			}
		}
		public override IFCVertex? EdgeEnd
		{
			get
			{
				//MANUAL : IFC2x3.IFCOrientedEdge.EdgeEnd
				// IfcBooleanChoose
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCOrientedEdge() : base()
		{
		}
		public IFCOrientedEdge(IFCVertex? EdgeStart, IFCVertex? EdgeEnd, IFCEdge? EdgeElement, BOOLEAN? Orientation) : base (EdgeStart, EdgeEnd)
		{
			this.EdgeElement = EdgeElement;
			this.Orientation = Orientation;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"EdgeStart", EdgeStart},
				{"EdgeEnd", EdgeEnd},
				{"EdgeElement", EdgeElement},
				{"Orientation", Orientation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"EdgeStart", EdgeStart},
				{"EdgeEnd", EdgeEnd}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCEdge? _EdgeElement
		{
			get
			{
				return EdgeElement;
			}
			set
			{
				if(value is IFCEdge val)
				{
					EdgeElement = val;
				}
				else if(value == null)
				{
					EdgeElement = null;
				}
			}
		}
		public virtual BOOLEAN? _Orientation
		{
			get
			{
				return Orientation;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					Orientation = val;
				}
				else if(value == null)
				{
					Orientation = null;
				}
			}
		}
		public override Global.IFCVertex? _EdgeStart
		{
			get
			{
				return EdgeStart;
			}
		}
		public override Global.IFCVertex? _EdgeEnd
		{
			get
			{
				return EdgeEnd;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOutletType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcOutletTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCOutletType : IFCFlowTerminalType, Global.IFCOutletType
	{
		public virtual IFCOutletTypeEnum? PredefinedType { get; set; }
		public IFCOutletType() : base()
		{
		}
		public IFCOutletType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCOutletTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCOutletTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCOutletTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcOwnerHistory;
	/// OwningUser : IfcPersonAndOrganization;
	/// OwningApplication : IfcApplication;
	/// State : OPTIONAL IfcStateEnum;
	/// ChangeAction : IfcChangeActionEnum;
	/// LastModifiedDate : OPTIONAL IfcTimeStamp;
	/// LastModifyingUser : OPTIONAL IfcPersonAndOrganization;
	/// LastModifyingApplication : OPTIONAL IfcApplication;
	/// CreationDate : IfcTimeStamp;
	/// END_ENTITY;
	/// <summary>
	public class IFCOwnerHistory : IFC_ClassEntity, Global.IFCOwnerHistory
	{
		public virtual IFCPersonAndOrganization? OwningUser { get; set; }
		public virtual IFCApplication? OwningApplication { get; set; }
		public virtual IFCStateEnum? State { get; set; }
		public virtual IFCChangeActionEnum? ChangeAction { get; set; }
		public virtual IFCTimeStamp? LastModifiedDate { get; set; }
		public virtual IFCPersonAndOrganization? LastModifyingUser { get; set; }
		public virtual IFCApplication? LastModifyingApplication { get; set; }
		public virtual IFCTimeStamp? CreationDate { get; set; }
		public IFCOwnerHistory() : base()
		{
		}
		public IFCOwnerHistory(IFCPersonAndOrganization? OwningUser, IFCApplication? OwningApplication, IFCStateEnum? State, IFCChangeActionEnum? ChangeAction, IFCTimeStamp? LastModifiedDate, IFCPersonAndOrganization? LastModifyingUser, IFCApplication? LastModifyingApplication, IFCTimeStamp? CreationDate) : base ()
		{
			this.OwningUser = OwningUser;
			this.OwningApplication = OwningApplication;
			this.State = State;
			this.ChangeAction = ChangeAction;
			this.LastModifiedDate = LastModifiedDate;
			this.LastModifyingUser = LastModifyingUser;
			this.LastModifyingApplication = LastModifyingApplication;
			this.CreationDate = CreationDate;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"OwningUser", OwningUser},
				{"OwningApplication", OwningApplication},
				{"State", State},
				{"ChangeAction", ChangeAction},
				{"LastModifiedDate", LastModifiedDate},
				{"LastModifyingUser", LastModifyingUser},
				{"LastModifyingApplication", LastModifyingApplication},
				{"CreationDate", CreationDate}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPersonAndOrganization? _OwningUser
		{
			get
			{
				return OwningUser;
			}
			set
			{
				if(value is IFCPersonAndOrganization val)
				{
					OwningUser = val;
				}
				else if(value == null)
				{
					OwningUser = null;
				}
			}
		}
		public virtual Global.IFCApplication? _OwningApplication
		{
			get
			{
				return OwningApplication;
			}
			set
			{
				if(value is IFCApplication val)
				{
					OwningApplication = val;
				}
				else if(value == null)
				{
					OwningApplication = null;
				}
			}
		}
		public virtual Global.IFCStateEnum? _State
		{
			get
			{
				return State;
			}
			set
			{
				if(value is IFCStateEnum val)
				{
					State = val;
				}
				else if(value == null)
				{
					State = null;
				}
			}
		}
		public virtual Global.IFCChangeActionEnum? _ChangeAction
		{
			get
			{
				return ChangeAction;
			}
			set
			{
				if(value is IFCChangeActionEnum val)
				{
					ChangeAction = val;
				}
				else if(value == null)
				{
					ChangeAction = null;
				}
			}
		}
		public virtual Global.IFCTimeStamp? _LastModifiedDate
		{
			get
			{
				return LastModifiedDate;
			}
			set
			{
				if(value is IFCTimeStamp val)
				{
					LastModifiedDate = val;
				}
				else if(value == null)
				{
					LastModifiedDate = null;
				}
			}
		}
		public virtual Global.IFCPersonAndOrganization? _LastModifyingUser
		{
			get
			{
				return LastModifyingUser;
			}
			set
			{
				if(value is IFCPersonAndOrganization val)
				{
					LastModifyingUser = val;
				}
				else if(value == null)
				{
					LastModifyingUser = null;
				}
			}
		}
		public virtual Global.IFCApplication? _LastModifyingApplication
		{
			get
			{
				return LastModifyingApplication;
			}
			set
			{
				if(value is IFCApplication val)
				{
					LastModifyingApplication = val;
				}
				else if(value == null)
				{
					LastModifyingApplication = null;
				}
			}
		}
		public virtual Global.IFCTimeStamp? _CreationDate
		{
			get
			{
				return CreationDate;
			}
			set
			{
				if(value is IFCTimeStamp val)
				{
					CreationDate = val;
				}
				else if(value == null)
				{
					CreationDate = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcParameterizedProfileDef
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCShapeProfileDef
	/// ,IfcCircleProfileDef
	/// ,IfcCraneRailAShapeProfileDef
	/// ,IfcCraneRailFShapeProfileDef
	/// ,IfcEllipseProfileDef
	/// ,IfcIShapeProfileDef
	/// ,IfcLShapeProfileDef
	/// ,IfcRectangleProfileDef
	/// ,IfcTShapeProfileDef
	/// ,IfcTrapeziumProfileDef
	/// ,IfcUShapeProfileDef
	/// ,IfcZShapeProfileDef))
	/// SUBTYPE OF (IfcProfileDef);
	/// Position : IfcAxis2Placement2D;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCParameterizedProfileDef : IFCProfileDef, Global.IFCParameterizedProfileDef
	{
		public virtual IFCAxis2Placement2D? Position { get; set; }
		public IFCParameterizedProfileDef() : base()
		{
		}
		public IFCParameterizedProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position) : base (ProfileType, ProfileName)
		{
			this.Position = Position;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCAxis2Placement2D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IFCAxis2Placement2D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPath
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// EdgeList : LIST [1:?] OF UNIQUE IfcOrientedEdge;
	/// WHERE
	/// WR1 : IfcPathHeadToTail(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IFCPath : IFCTopologicalRepresentationItem, Global.IFCPath
	{
		public virtual IFC_Attributes<IFCOrientedEdge>? EdgeList { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCPath() : base()
		{
		}
		public IFCPath(IFC_Attributes<IFCOrientedEdge>? EdgeList) : base ()
		{
			this.EdgeList = EdgeList;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"EdgeList", EdgeList}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCOrientedEdge>? _EdgeList
		{
			get
			{
				if(EdgeList != null)
				{
					IFC_Attributes<Global.IFCOrientedEdge>? items = new IFC_Attributes<Global.IFCOrientedEdge>();
					foreach (IFCOrientedEdge item in EdgeList)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					EdgeList = null;
				}
				else
				{
					EdgeList = new IFC_Attributes<IFCOrientedEdge>();
					foreach(var val in value)
					{
						if(val is IFCOrientedEdge v)
						{
							EdgeList.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPerformanceHistory
	/// SUBTYPE OF (IfcControl);
	/// LifeCyclePhase : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IFCPerformanceHistory : IFCControl, Global.IFCPerformanceHistory
	{
		public virtual IFCLabel? LifeCyclePhase { get; set; }
		public IFCPerformanceHistory() : base()
		{
		}
		public IFCPerformanceHistory(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCLabel? LifeCyclePhase) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.LifeCyclePhase = LifeCyclePhase;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"LifeCyclePhase", LifeCyclePhase}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _LifeCyclePhase
		{
			get
			{
				return LifeCyclePhase;
			}
			set
			{
				if(value is IFCLabel val)
				{
					LifeCyclePhase = val;
				}
				else if(value == null)
				{
					LifeCyclePhase = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPermeableCoveringProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// OperationType : IfcPermeableCoveringOperationEnum;
	/// PanelPosition : IfcWindowPanelPositionEnum;
	/// FrameDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// FrameThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// END_ENTITY;
	/// <summary>
	public class IFCPermeableCoveringProperties : IFCPropertySetDefinition, Global.IFCPermeableCoveringProperties
	{
		public virtual IFCPermeableCoveringOperationEnum? OperationType { get; set; }
		public virtual IFCWindowPanelPositionEnum? PanelPosition { get; set; }
		public virtual IFCPositiveLengthMeasure? FrameDepth { get; set; }
		public virtual IFCPositiveLengthMeasure? FrameThickness { get; set; }
		public virtual IFCShapeAspect? ShapeAspectStyle { get; set; }
		public IFCPermeableCoveringProperties() : base()
		{
		}
		public IFCPermeableCoveringProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCPermeableCoveringOperationEnum? OperationType, IFCWindowPanelPositionEnum? PanelPosition, IFCPositiveLengthMeasure? FrameDepth, IFCPositiveLengthMeasure? FrameThickness, IFCShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"OperationType", OperationType},
				{"PanelPosition", PanelPosition},
				{"FrameDepth", FrameDepth},
				{"FrameThickness", FrameThickness},
				{"ShapeAspectStyle", ShapeAspectStyle}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPermeableCoveringOperationEnum? _OperationType
		{
			get
			{
				return OperationType;
			}
			set
			{
				if(value is IFCPermeableCoveringOperationEnum val)
				{
					OperationType = val;
				}
				else if(value == null)
				{
					OperationType = null;
				}
			}
		}
		public virtual Global.IFCWindowPanelPositionEnum? _PanelPosition
		{
			get
			{
				return PanelPosition;
			}
			set
			{
				if(value is IFCWindowPanelPositionEnum val)
				{
					PanelPosition = val;
				}
				else if(value == null)
				{
					PanelPosition = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FrameDepth
		{
			get
			{
				return FrameDepth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FrameDepth = val;
				}
				else if(value == null)
				{
					FrameDepth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FrameThickness
		{
			get
			{
				return FrameThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FrameThickness = val;
				}
				else if(value == null)
				{
					FrameThickness = null;
				}
			}
		}
		public virtual Global.IFCShapeAspect? _ShapeAspectStyle
		{
			get
			{
				return ShapeAspectStyle;
			}
			set
			{
				if(value is IFCShapeAspect val)
				{
					ShapeAspectStyle = val;
				}
				else if(value == null)
				{
					ShapeAspectStyle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPermit
	/// SUBTYPE OF (IfcControl);
	/// PermitID : IfcIdentifier;
	/// UNIQUE
	/// UR2 : PermitID;
	/// END_ENTITY;
	/// <summary>
	public class IFCPermit : IFCControl, Global.IFCPermit
	{
		public virtual IFCIdentifier? PermitID { get; set; }
		public IFCPermit() : base()
		{
		}
		public IFCPermit(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? PermitID) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.PermitID = PermitID;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"PermitID", PermitID}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCIdentifier? _PermitID
		{
			get
			{
				return PermitID;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					PermitID = val;
				}
				else if(value == null)
				{
					PermitID = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPerson;
	/// Id : OPTIONAL IfcIdentifier;
	/// FamilyName : OPTIONAL IfcLabel;
	/// GivenName : OPTIONAL IfcLabel;
	/// MiddleNames : OPTIONAL LIST [1:?] OF IfcLabel;
	/// PrefixTitles : OPTIONAL LIST [1:?] OF IfcLabel;
	/// SuffixTitles : OPTIONAL LIST [1:?] OF IfcLabel;
	/// Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
	/// Addresses : OPTIONAL LIST [1:?] OF IfcAddress;
	/// INVERSE
	/// EngagedIn : SET [0:?] OF IfcPersonAndOrganization FOR ThePerson;
	/// WHERE
	/// WR1 : EXISTS(FamilyName) OR
	/// EXISTS(GivenName);
	/// END_ENTITY;
	/// <summary>
	public class IFCPerson : IFC_ClassEntity, IFCActorSelect, IFCObjectReferenceSelect, Global.IFCPerson
	{
		public virtual IFCIdentifier? Id { get; set; }
		public virtual IFCLabel? FamilyName { get; set; }
		public virtual IFCLabel? GivenName { get; set; }
		public virtual IFC_Attributes<IFCLabel>? MiddleNames { get; set; }
		public virtual IFC_Attributes<IFCLabel>? PrefixTitles { get; set; }
		public virtual IFC_Attributes<IFCLabel>? SuffixTitles { get; set; }
		public virtual IFC_Attributes<IFCActorRole>? Roles { get; set; }
		public virtual IFC_Attributes<IFCAddress>? Addresses { get; set; }
		public IFC_Attributes<IFCPersonAndOrganization>? EngagedIn {get{return new IFC_Attributes<IFCPersonAndOrganization>(Model?.GetItems<IFCPersonAndOrganization>().Where(x => x.ThePerson != null && x.ThePerson == this).ToList());}}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCPerson() : base()
		{
		}
		public IFCPerson(IFCIdentifier? Id, IFCLabel? FamilyName, IFCLabel? GivenName, IFC_Attributes<IFCLabel>? MiddleNames, IFC_Attributes<IFCLabel>? PrefixTitles, IFC_Attributes<IFCLabel>? SuffixTitles, IFC_Attributes<IFCActorRole>? Roles, IFC_Attributes<IFCAddress>? Addresses) : base ()
		{
			this.Id = Id;
			this.FamilyName = FamilyName;
			this.GivenName = GivenName;
			this.MiddleNames = MiddleNames;
			this.PrefixTitles = PrefixTitles;
			this.SuffixTitles = SuffixTitles;
			this.Roles = Roles;
			this.Addresses = Addresses;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Id", Id},
				{"FamilyName", FamilyName},
				{"GivenName", GivenName},
				{"MiddleNames", MiddleNames},
				{"PrefixTitles", PrefixTitles},
				{"SuffixTitles", SuffixTitles},
				{"Roles", Roles},
				{"Addresses", Addresses}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"EngagedIn", EngagedIn}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCIdentifier? _Id
		{
			get
			{
				return Id;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					Id = val;
				}
				else if(value == null)
				{
					Id = null;
				}
			}
		}
		public virtual Global.IFCLabel? _FamilyName
		{
			get
			{
				return FamilyName;
			}
			set
			{
				if(value is IFCLabel val)
				{
					FamilyName = val;
				}
				else if(value == null)
				{
					FamilyName = null;
				}
			}
		}
		public virtual Global.IFCLabel? _GivenName
		{
			get
			{
				return GivenName;
			}
			set
			{
				if(value is IFCLabel val)
				{
					GivenName = val;
				}
				else if(value == null)
				{
					GivenName = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCLabel>? _MiddleNames
		{
			get
			{
				if(MiddleNames != null)
				{
					IFC_Attributes<Global.IFCLabel>? items = new IFC_Attributes<Global.IFCLabel>();
					foreach (IFCLabel item in MiddleNames)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					MiddleNames = null;
				}
				else
				{
					MiddleNames = new IFC_Attributes<IFCLabel>();
					foreach(var val in value)
					{
						if(val is IFCLabel v)
						{
							MiddleNames.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCLabel>? _PrefixTitles
		{
			get
			{
				if(PrefixTitles != null)
				{
					IFC_Attributes<Global.IFCLabel>? items = new IFC_Attributes<Global.IFCLabel>();
					foreach (IFCLabel item in PrefixTitles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					PrefixTitles = null;
				}
				else
				{
					PrefixTitles = new IFC_Attributes<IFCLabel>();
					foreach(var val in value)
					{
						if(val is IFCLabel v)
						{
							PrefixTitles.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCLabel>? _SuffixTitles
		{
			get
			{
				if(SuffixTitles != null)
				{
					IFC_Attributes<Global.IFCLabel>? items = new IFC_Attributes<Global.IFCLabel>();
					foreach (IFCLabel item in SuffixTitles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SuffixTitles = null;
				}
				else
				{
					SuffixTitles = new IFC_Attributes<IFCLabel>();
					foreach(var val in value)
					{
						if(val is IFCLabel v)
						{
							SuffixTitles.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCActorRole>? _Roles
		{
			get
			{
				if(Roles != null)
				{
					IFC_Attributes<Global.IFCActorRole>? items = new IFC_Attributes<Global.IFCActorRole>();
					foreach (IFCActorRole item in Roles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Roles = null;
				}
				else
				{
					Roles = new IFC_Attributes<IFCActorRole>();
					foreach(var val in value)
					{
						if(val is IFCActorRole v)
						{
							Roles.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCAddress>? _Addresses
		{
			get
			{
				if(Addresses != null)
				{
					IFC_Attributes<Global.IFCAddress>? items = new IFC_Attributes<Global.IFCAddress>();
					foreach (IFCAddress item in Addresses)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Addresses = null;
				}
				else
				{
					Addresses = new IFC_Attributes<IFCAddress>();
					foreach(var val in value)
					{
						if(val is IFCAddress v)
						{
							Addresses.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPersonAndOrganization>? _EngagedIn
		{
			get
			{
				if(EngagedIn != null)
				{
					IFC_Attributes<Global.IFCPersonAndOrganization>? items = new IFC_Attributes<Global.IFCPersonAndOrganization>();
					foreach (IFCPersonAndOrganization item in EngagedIn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPersonAndOrganization;
	/// ThePerson : IfcPerson;
	/// TheOrganization : IfcOrganization;
	/// Roles : OPTIONAL LIST [1:?] OF IfcActorRole;
	/// END_ENTITY;
	/// <summary>
	public class IFCPersonAndOrganization : IFC_ClassEntity, IFCActorSelect, IFCObjectReferenceSelect, Global.IFCPersonAndOrganization
	{
		public virtual IFCPerson? ThePerson { get; set; }
		public virtual IFCOrganization? TheOrganization { get; set; }
		public virtual IFC_Attributes<IFCActorRole>? Roles { get; set; }
		public IFCPersonAndOrganization() : base()
		{
		}
		public IFCPersonAndOrganization(IFCPerson? ThePerson, IFCOrganization? TheOrganization, IFC_Attributes<IFCActorRole>? Roles) : base ()
		{
			this.ThePerson = ThePerson;
			this.TheOrganization = TheOrganization;
			this.Roles = Roles;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ThePerson", ThePerson},
				{"TheOrganization", TheOrganization},
				{"Roles", Roles}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPerson? _ThePerson
		{
			get
			{
				return ThePerson;
			}
			set
			{
				if(value is IFCPerson val)
				{
					ThePerson = val;
				}
				else if(value == null)
				{
					ThePerson = null;
				}
			}
		}
		public virtual Global.IFCOrganization? _TheOrganization
		{
			get
			{
				return TheOrganization;
			}
			set
			{
				if(value is IFCOrganization val)
				{
					TheOrganization = val;
				}
				else if(value == null)
				{
					TheOrganization = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCActorRole>? _Roles
		{
			get
			{
				if(Roles != null)
				{
					IFC_Attributes<Global.IFCActorRole>? items = new IFC_Attributes<Global.IFCActorRole>();
					foreach (IFCActorRole item in Roles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Roles = null;
				}
				else
				{
					Roles = new IFC_Attributes<IFCActorRole>();
					foreach(var val in value)
					{
						if(val is IFCActorRole v)
						{
							Roles.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPhysicalComplexQuantity
	/// SUBTYPE OF (IfcPhysicalQuantity);
	/// HasQuantities : SET [1:?] OF IfcPhysicalQuantity;
	/// Discrimination : IfcLabel;
	/// Quality : OPTIONAL IfcLabel;
	/// Usage : OPTIONAL IfcLabel;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* HasQuantities | SELF :=: temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCPhysicalComplexQuantity : IFCPhysicalQuantity, Global.IFCPhysicalComplexQuantity
	{
		public virtual IFC_Attributes<IFCPhysicalQuantity>? HasQuantities { get; set; }
		public virtual IFCLabel? Discrimination { get; set; }
		public virtual IFCLabel? Quality { get; set; }
		public virtual IFCLabel? Usage { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public IFCPhysicalComplexQuantity() : base()
		{
		}
		public IFCPhysicalComplexQuantity(IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCPhysicalQuantity>? HasQuantities, IFCLabel? Discrimination, IFCLabel? Quality, IFCLabel? Usage) : base (Name, Description)
		{
			this.HasQuantities = HasQuantities;
			this.Discrimination = Discrimination;
			this.Quality = Quality;
			this.Usage = Usage;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"HasQuantities", HasQuantities},
				{"Discrimination", Discrimination},
				{"Quality", Quality},
				{"Usage", Usage}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual IFC_Attributes<Global.IFCPhysicalQuantity>? _HasQuantities
		{
			get
			{
				if(HasQuantities != null)
				{
					IFC_Attributes<Global.IFCPhysicalQuantity>? items = new IFC_Attributes<Global.IFCPhysicalQuantity>();
					foreach (IFCPhysicalQuantity item in HasQuantities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasQuantities = null;
				}
				else
				{
					HasQuantities = new IFC_Attributes<IFCPhysicalQuantity>();
					foreach(var val in value)
					{
						if(val is IFCPhysicalQuantity v)
						{
							HasQuantities.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _Discrimination
		{
			get
			{
				return Discrimination;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Discrimination = val;
				}
				else if(value == null)
				{
					Discrimination = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Quality
		{
			get
			{
				return Quality;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Quality = val;
				}
				else if(value == null)
				{
					Quality = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Usage
		{
			get
			{
				return Usage;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Usage = val;
				}
				else if(value == null)
				{
					Usage = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPhysicalQuantity
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPhysicalComplexQuantity
	/// ,IfcPhysicalSimpleQuantity));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// INVERSE
	/// PartOfComplex : SET [0:1] OF IfcPhysicalComplexQuantity FOR HasQuantities;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPhysicalQuantity : IFC_ClassEntity, Global.IFCPhysicalQuantity
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public IFC_Attributes<IFCPhysicalComplexQuantity>? PartOfComplex {get{return new IFC_Attributes<IFCPhysicalComplexQuantity>(Model?.GetItems<IFCPhysicalComplexQuantity>().Where(x => x.HasQuantities != null && x.HasQuantities.Contains(this)).ToList());}}
		public IFCPhysicalQuantity() : base()
		{
		}
		public IFCPhysicalQuantity(IFCLabel? Name, IFCText? Description) : base ()
		{
			this.Name = Name;
			this.Description = Description;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPhysicalComplexQuantity>? _PartOfComplex
		{
			get
			{
				if(PartOfComplex != null)
				{
					IFC_Attributes<Global.IFCPhysicalComplexQuantity>? items = new IFC_Attributes<Global.IFCPhysicalComplexQuantity>();
					foreach (IFCPhysicalComplexQuantity item in PartOfComplex)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPhysicalSimpleQuantity
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcQuantityArea
	/// ,IfcQuantityCount
	/// ,IfcQuantityLength
	/// ,IfcQuantityTime
	/// ,IfcQuantityVolume
	/// ,IfcQuantityWeight))
	/// SUBTYPE OF (IfcPhysicalQuantity);
	/// Unit : OPTIONAL IfcNamedUnit;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPhysicalSimpleQuantity : IFCPhysicalQuantity, Global.IFCPhysicalSimpleQuantity
	{
		public virtual IFCNamedUnit? Unit { get; set; }
		public IFCPhysicalSimpleQuantity() : base()
		{
		}
		public IFCPhysicalSimpleQuantity(IFCLabel? Name, IFCText? Description, IFCNamedUnit? Unit) : base (Name, Description)
		{
			this.Unit = Unit;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"Unit", Unit}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCNamedUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IFCNamedUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPile
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : IfcPileTypeEnum;
	/// ConstructionType : OPTIONAL IfcPileConstructionEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcPileTypeEnum.USERDEFINED) OR ((PredefinedType = IfcPileTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IFCPile : IFCBuildingElement, Global.IFCPile
	{
		public virtual IFCPileTypeEnum? PredefinedType { get; set; }
		public virtual IFCPileConstructionEnum? ConstructionType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCPile() : base()
		{
		}
		public IFCPile(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCPileTypeEnum? PredefinedType, IFCPileConstructionEnum? ConstructionType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
			this.ConstructionType = ConstructionType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"PredefinedType", PredefinedType},
				{"ConstructionType", ConstructionType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPileTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCPileTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IFCPileConstructionEnum? _ConstructionType
		{
			get
			{
				return ConstructionType;
			}
			set
			{
				if(value is IFCPileConstructionEnum val)
				{
					ConstructionType = val;
				}
				else if(value == null)
				{
					ConstructionType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPipeFittingType
	/// SUBTYPE OF (IfcFlowFittingType);
	/// PredefinedType : IfcPipeFittingTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcPipeFittingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPipeFittingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCPipeFittingType : IFCFlowFittingType, Global.IFCPipeFittingType
	{
		public virtual IFCPipeFittingTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCPipeFittingType() : base()
		{
		}
		public IFCPipeFittingType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCPipeFittingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPipeFittingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCPipeFittingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPipeSegmentType
	/// SUBTYPE OF (IfcFlowSegmentType);
	/// PredefinedType : IfcPipeSegmentTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcPipeSegmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPipeSegmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCPipeSegmentType : IFCFlowSegmentType, Global.IFCPipeSegmentType
	{
		public virtual IFCPipeSegmentTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCPipeSegmentType() : base()
		{
		}
		public IFCPipeSegmentType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCPipeSegmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPipeSegmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCPipeSegmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPixelTexture
	/// SUBTYPE OF (IfcSurfaceTexture);
	/// Width : IfcInteger;
	/// Height : IfcInteger;
	/// ColourComponents : IfcInteger;
	/// Pixel : LIST [1:?] OF BINARY(32);
	/// WHERE
	/// WR21 : Width >= 1;
	/// WR22 : Height >= 1;
	/// WR23 : {1 <= ColourComponents <= 4};
	/// WR24 : SIZEOF(Pixel) = (Width * Height);
	/// END_ENTITY;
	/// <summary>
	public class IFCPixelTexture : IFCSurfaceTexture, Global.IFCPixelTexture
	{
		public virtual IFCInteger? Width { get; set; }
		public virtual IFCInteger? Height { get; set; }
		public virtual IFCInteger? ColourComponents { get; set; }
		public virtual IFC_Attributes<INTEGER>? Pixel { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR23
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR24
		{
			get
			{
				return true;
			}
		}
		public IFCPixelTexture() : base()
		{
		}
		public IFCPixelTexture(BOOLEAN? RepeatS, BOOLEAN? RepeatT, IFCSurfaceTextureEnum? TextureType, IFCCartesianTransformationOperator2D? TextureTransform, IFCInteger? Width, IFCInteger? Height, IFCInteger? ColourComponents, IFC_Attributes<INTEGER>? Pixel) : base (RepeatS, RepeatT, TextureType, TextureTransform)
		{
			this.Width = Width;
			this.Height = Height;
			this.ColourComponents = ColourComponents;
			this.Pixel = Pixel;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepeatS", RepeatS},
				{"RepeatT", RepeatT},
				{"TextureType", TextureType},
				{"TextureTransform", TextureTransform},
				{"Width", Width},
				{"Height", Height},
				{"ColourComponents", ColourComponents},
				{"Pixel", Pixel}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22},
				{"is_WR23", is_WR23},
				{"is_WR24", is_WR24}
			};
		}
		public virtual Global.IFCInteger? _Width
		{
			get
			{
				return Width;
			}
			set
			{
				if(value is IFCInteger val)
				{
					Width = val;
				}
				else if(value == null)
				{
					Width = null;
				}
			}
		}
		public virtual Global.IFCInteger? _Height
		{
			get
			{
				return Height;
			}
			set
			{
				if(value is IFCInteger val)
				{
					Height = val;
				}
				else if(value == null)
				{
					Height = null;
				}
			}
		}
		public virtual Global.IFCInteger? _ColourComponents
		{
			get
			{
				return ColourComponents;
			}
			set
			{
				if(value is IFCInteger val)
				{
					ColourComponents = val;
				}
				else if(value == null)
				{
					ColourComponents = null;
				}
			}
		}
		public virtual IFC_Attributes<INTEGER>? _Pixel
		{
			get
			{
				if(Pixel != null)
				{
					IFC_Attributes<INTEGER>? items = new IFC_Attributes<INTEGER>();
					foreach (INTEGER item in Pixel)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Pixel = null;
				}
				else
				{
					Pixel = new IFC_Attributes<INTEGER>();
					foreach(var val in value)
					{
						if(val is INTEGER v)
						{
							Pixel.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPlacement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAxis1Placement
	/// ,IfcAxis2Placement2D
	/// ,IfcAxis2Placement3D))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Location : IfcCartesianPoint;
	/// DERIVE
	/// Dim : IfcDimensionCount := Location.Dim;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPlacement : IFCGeometricRepresentationItem, Global.IFCPlacement
	{
		public virtual IFCCartesianPoint? Location { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCPlacement.Dim
				// Location.Dim;
				return null;
				//END_MANUAL
			}
		}
		public IFCPlacement() : base()
		{
		}
		public IFCPlacement(IFCCartesianPoint? Location) : base ()
		{
			this.Location = Location;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Location", Location}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCartesianPoint? _Location
		{
			get
			{
				return Location;
			}
			set
			{
				if(value is IFCCartesianPoint val)
				{
					Location = val;
				}
				else if(value == null)
				{
					Location = null;
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPlanarBox
	/// SUBTYPE OF (IfcPlanarExtent);
	/// Placement : IfcAxis2Placement;
	/// END_ENTITY;
	/// <summary>
	public class IFCPlanarBox : IFCPlanarExtent, Global.IFCPlanarBox
	{
		public virtual IFCAxis2Placement? Placement { get; set; }
		public IFCPlanarBox() : base()
		{
		}
		public IFCPlanarBox(IFCLengthMeasure? SizeInX, IFCLengthMeasure? SizeInY, IFCAxis2Placement? Placement) : base (SizeInX, SizeInY)
		{
			this.Placement = Placement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SizeInX", SizeInX},
				{"SizeInY", SizeInY},
				{"Placement", Placement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCAxis2Placement? _Placement
		{
			get
			{
				return Placement;
			}
			set
			{
				if(value is IFCAxis2Placement val)
				{
					Placement = val;
				}
				else if(value == null)
				{
					Placement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPlanarExtent
	/// SUPERTYPE OF (ONEOF
	/// (IfcPlanarBox))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// SizeInX : IfcLengthMeasure;
	/// SizeInY : IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCPlanarExtent : IFCGeometricRepresentationItem, Global.IFCPlanarExtent
	{
		public virtual IFCLengthMeasure? SizeInX { get; set; }
		public virtual IFCLengthMeasure? SizeInY { get; set; }
		public IFCPlanarExtent() : base()
		{
		}
		public IFCPlanarExtent(IFCLengthMeasure? SizeInX, IFCLengthMeasure? SizeInY) : base ()
		{
			this.SizeInX = SizeInX;
			this.SizeInY = SizeInY;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SizeInX", SizeInX},
				{"SizeInY", SizeInY}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLengthMeasure? _SizeInX
		{
			get
			{
				return SizeInX;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					SizeInX = val;
				}
				else if(value == null)
				{
					SizeInX = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _SizeInY
		{
			get
			{
				return SizeInY;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					SizeInY = val;
				}
				else if(value == null)
				{
					SizeInY = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPlane
	/// SUBTYPE OF (IfcElementarySurface);
	/// END_ENTITY;
	/// <summary>
	public class IFCPlane : IFCElementarySurface, Global.IFCPlane
	{
		public IFCPlane() : base()
		{
		}
		public IFCPlane(IFCAxis2Placement3D? Position) : base (Position)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Position", Position}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPlate
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCPlate : IFCBuildingElement, Global.IFCPlate
	{
		public IFCPlate() : base()
		{
		}
		public IFCPlate(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPlateType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcPlateTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCPlateType : IFCBuildingElementType, Global.IFCPlateType
	{
		public virtual IFCPlateTypeEnum? PredefinedType { get; set; }
		public IFCPlateType() : base()
		{
		}
		public IFCPlateType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCPlateTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCPlateTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCPlateTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPoint
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCartesianPoint
	/// ,IfcPointOnCurve
	/// ,IfcPointOnSurface))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPoint : IFCGeometricRepresentationItem, IFCGeometricSetSelect, IFCPointOrVertexPoint, Global.IFCPoint
	{
		public virtual IFCDimensionCount? Dim {get; set;}
		public IFCPoint() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
			set
			{
				if(value is IFCDimensionCount val)
				{
					Dim = val;
				}
				else if(value == null)
				{
					Dim = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPointOnCurve
	/// SUBTYPE OF (IfcPoint);
	/// BasisCurve : IfcCurve;
	/// PointParameter : IfcParameterValue;
	/// DERIVE
	/// Dim : IfcDimensionCount := BasisCurve.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IFCPointOnCurve : IFCPoint, Global.IFCPointOnCurve
	{
		public virtual IFCCurve? BasisCurve { get; set; }
		public virtual IFCParameterValue? PointParameter { get; set; }
		public override IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCPointOnCurve.Dim
				// BasisCurve.Dim;
				return null;
				//END_MANUAL
			}
		}
		public IFCPointOnCurve() : base()
		{
		}
		public IFCPointOnCurve(IFCCurve? BasisCurve, IFCParameterValue? PointParameter) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.PointParameter = PointParameter;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"BasisCurve", BasisCurve},
				{"PointParameter", PointParameter}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCurve? _BasisCurve
		{
			get
			{
				return BasisCurve;
			}
			set
			{
				if(value is IFCCurve val)
				{
					BasisCurve = val;
				}
				else if(value == null)
				{
					BasisCurve = null;
				}
			}
		}
		public virtual Global.IFCParameterValue? _PointParameter
		{
			get
			{
				return PointParameter;
			}
			set
			{
				if(value is IFCParameterValue val)
				{
					PointParameter = val;
				}
				else if(value == null)
				{
					PointParameter = null;
				}
			}
		}
		public override Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPointOnSurface
	/// SUBTYPE OF (IfcPoint);
	/// BasisSurface : IfcSurface;
	/// PointParameterU : IfcParameterValue;
	/// PointParameterV : IfcParameterValue;
	/// DERIVE
	/// Dim : IfcDimensionCount := BasisSurface.Dim;
	/// END_ENTITY;
	/// <summary>
	public class IFCPointOnSurface : IFCPoint, Global.IFCPointOnSurface
	{
		public virtual IFCSurface? BasisSurface { get; set; }
		public virtual IFCParameterValue? PointParameterU { get; set; }
		public virtual IFCParameterValue? PointParameterV { get; set; }
		public override IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCPointOnSurface.Dim
				// BasisSurface.Dim;
				return null;
				//END_MANUAL
			}
		}
		public IFCPointOnSurface() : base()
		{
		}
		public IFCPointOnSurface(IFCSurface? BasisSurface, IFCParameterValue? PointParameterU, IFCParameterValue? PointParameterV) : base ()
		{
			this.BasisSurface = BasisSurface;
			this.PointParameterU = PointParameterU;
			this.PointParameterV = PointParameterV;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"BasisSurface", BasisSurface},
				{"PointParameterU", PointParameterU},
				{"PointParameterV", PointParameterV}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCSurface? _BasisSurface
		{
			get
			{
				return BasisSurface;
			}
			set
			{
				if(value is IFCSurface val)
				{
					BasisSurface = val;
				}
				else if(value == null)
				{
					BasisSurface = null;
				}
			}
		}
		public virtual Global.IFCParameterValue? _PointParameterU
		{
			get
			{
				return PointParameterU;
			}
			set
			{
				if(value is IFCParameterValue val)
				{
					PointParameterU = val;
				}
				else if(value == null)
				{
					PointParameterU = null;
				}
			}
		}
		public virtual Global.IFCParameterValue? _PointParameterV
		{
			get
			{
				return PointParameterV;
			}
			set
			{
				if(value is IFCParameterValue val)
				{
					PointParameterV = val;
				}
				else if(value == null)
				{
					PointParameterV = null;
				}
			}
		}
		public override Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPolyLoop
	/// SUBTYPE OF (IfcLoop);
	/// Polygon : LIST [3:?] OF UNIQUE IfcCartesianPoint;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(Temp <* Polygon | Temp.Dim <> Polygon[1].Dim)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCPolyLoop : IFCLoop, Global.IFCPolyLoop
	{
		public virtual IFC_Attributes<IFCCartesianPoint>? Polygon { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public IFCPolyLoop() : base()
		{
		}
		public IFCPolyLoop(IFC_Attributes<IFCCartesianPoint>? Polygon) : base ()
		{
			this.Polygon = Polygon;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Polygon", Polygon}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual IFC_Attributes<Global.IFCCartesianPoint>? _Polygon
		{
			get
			{
				if(Polygon != null)
				{
					IFC_Attributes<Global.IFCCartesianPoint>? items = new IFC_Attributes<Global.IFCCartesianPoint>();
					foreach (IFCCartesianPoint item in Polygon)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Polygon = null;
				}
				else
				{
					Polygon = new IFC_Attributes<IFCCartesianPoint>();
					foreach(var val in value)
					{
						if(val is IFCCartesianPoint v)
						{
							Polygon.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPolygonalBoundedHalfSpace
	/// SUBTYPE OF (IfcHalfSpaceSolid);
	/// Position : IfcAxis2Placement3D;
	/// PolygonalBoundary : IfcBoundedCurve;
	/// WHERE
	/// WR41 : PolygonalBoundary.Dim = 2;
	/// WR42 : SIZEOF(TYPEOF(PolygonalBoundary) * [
	/// 'IFC2X3.IFCPOLYLINE',
	/// 'IFC2X3.IFCCOMPOSITECURVE']
	/// ) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCPolygonalBoundedHalfSpace : IFCHalfSpaceSolid, Global.IFCPolygonalBoundedHalfSpace
	{
		public virtual IFCAxis2Placement3D? Position { get; set; }
		public virtual IFCBoundedCurve? PolygonalBoundary { get; set; }
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR42
		{
			get
			{
				return true;
			}
		}
		public IFCPolygonalBoundedHalfSpace() : base()
		{
		}
		public IFCPolygonalBoundedHalfSpace(IFCSurface? BaseSurface, BOOLEAN? AgreementFlag, IFCAxis2Placement3D? Position, IFCBoundedCurve? PolygonalBoundary) : base (BaseSurface, AgreementFlag)
		{
			this.Position = Position;
			this.PolygonalBoundary = PolygonalBoundary;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"BaseSurface", BaseSurface},
				{"AgreementFlag", AgreementFlag},
				{"Position", Position},
				{"PolygonalBoundary", PolygonalBoundary}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41},
				{"is_WR42", is_WR42}
			};
		}
		public virtual Global.IFCAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IFCAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
		public virtual Global.IFCBoundedCurve? _PolygonalBoundary
		{
			get
			{
				return PolygonalBoundary;
			}
			set
			{
				if(value is IFCBoundedCurve val)
				{
					PolygonalBoundary = val;
				}
				else if(value == null)
				{
					PolygonalBoundary = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPolyline
	/// SUBTYPE OF (IfcBoundedCurve);
	/// Points : LIST [2:?] OF IfcCartesianPoint;
	/// WHERE
	/// WR41 : SIZEOF(QUERY(Temp <* Points | Temp.Dim <> Points[1].Dim)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCPolyline : IFCBoundedCurve, Global.IFCPolyline
	{
		public virtual IFC_Attributes<IFCCartesianPoint>? Points { get; set; }
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public IFCPolyline() : base()
		{
		}
		public IFCPolyline(IFC_Attributes<IFCCartesianPoint>? Points) : base ()
		{
			this.Points = Points;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Points", Points}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41}
			};
		}
		public virtual IFC_Attributes<Global.IFCCartesianPoint>? _Points
		{
			get
			{
				if(Points != null)
				{
					IFC_Attributes<Global.IFCCartesianPoint>? items = new IFC_Attributes<Global.IFCCartesianPoint>();
					foreach (IFCCartesianPoint item in Points)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Points = null;
				}
				else
				{
					Points = new IFC_Attributes<IFCCartesianPoint>();
					foreach(var val in value)
					{
						if(val is IFCCartesianPoint v)
						{
							Points.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPort
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDistributionPort))
	/// SUBTYPE OF (IfcProduct);
	/// INVERSE
	/// ContainedIn : IfcRelConnectsPortToElement FOR RelatingPort;
	/// ConnectedFrom : SET [0:1] OF IfcRelConnectsPorts FOR RelatedPort;
	/// ConnectedTo : SET [0:1] OF IfcRelConnectsPorts FOR RelatingPort;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPort : IFCProduct, Global.IFCPort
	{
		public IFCRelConnectsPortToElement? ContainedIn {get{return Model?.GetItems<IFCRelConnectsPortToElement>().FirstOrDefault(x => x.RelatingPort != null && x.RelatingPort == this);}}
		public IFC_Attributes<IFCRelConnectsPorts>? ConnectedFrom {get{return new IFC_Attributes<IFCRelConnectsPorts>(Model?.GetItems<IFCRelConnectsPorts>().Where(x => x.RelatedPort != null && x.RelatedPort == this).ToList());}}
		public IFC_Attributes<IFCRelConnectsPorts>? ConnectedTo {get{return new IFC_Attributes<IFCRelConnectsPorts>(Model?.GetItems<IFCRelConnectsPorts>().Where(x => x.RelatingPort != null && x.RelatingPort == this).ToList());}}
		public IFCPort() : base()
		{
		}
		public IFCPort(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"ContainedIn", ContainedIn},
				{"ConnectedFrom", ConnectedFrom},
				{"ConnectedTo", ConnectedTo}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCRelConnectsPortToElement? _ContainedIn
		{
			get
			{
				return ContainedIn;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelConnectsPorts>? _ConnectedFrom
		{
			get
			{
				if(ConnectedFrom != null)
				{
					IFC_Attributes<Global.IFCRelConnectsPorts>? items = new IFC_Attributes<Global.IFCRelConnectsPorts>();
					foreach (IFCRelConnectsPorts item in ConnectedFrom)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelConnectsPorts>? _ConnectedTo
		{
			get
			{
				if(ConnectedTo != null)
				{
					IFC_Attributes<Global.IFCRelConnectsPorts>? items = new IFC_Attributes<Global.IFCRelConnectsPorts>();
					foreach (IFCRelConnectsPorts item in ConnectedTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPostalAddress
	/// SUBTYPE OF (IfcAddress);
	/// InternalLocation : OPTIONAL IfcLabel;
	/// AddressLines : OPTIONAL LIST [1:?] OF IfcLabel;
	/// PostalBox : OPTIONAL IfcLabel;
	/// Town : OPTIONAL IfcLabel;
	/// Region : OPTIONAL IfcLabel;
	/// PostalCode : OPTIONAL IfcLabel;
	/// Country : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS (InternalLocation) OR
	/// EXISTS (AddressLines) OR
	/// EXISTS (PostalBox) OR
	/// EXISTS (PostalCode) OR
	/// EXISTS (Town) OR
	/// EXISTS (Region) OR
	/// EXISTS (Country);
	/// END_ENTITY;
	/// <summary>
	public class IFCPostalAddress : IFCAddress, Global.IFCPostalAddress
	{
		public virtual IFCLabel? InternalLocation { get; set; }
		public virtual IFC_Attributes<IFCLabel>? AddressLines { get; set; }
		public virtual IFCLabel? PostalBox { get; set; }
		public virtual IFCLabel? Town { get; set; }
		public virtual IFCLabel? Region { get; set; }
		public virtual IFCLabel? PostalCode { get; set; }
		public virtual IFCLabel? Country { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCPostalAddress() : base()
		{
		}
		public IFCPostalAddress(IFCAddressTypeEnum? Purpose, IFCText? Description, IFCLabel? UserDefinedPurpose, IFCLabel? InternalLocation, IFC_Attributes<IFCLabel>? AddressLines, IFCLabel? PostalBox, IFCLabel? Town, IFCLabel? Region, IFCLabel? PostalCode, IFCLabel? Country) : base (Purpose, Description, UserDefinedPurpose)
		{
			this.InternalLocation = InternalLocation;
			this.AddressLines = AddressLines;
			this.PostalBox = PostalBox;
			this.Town = Town;
			this.Region = Region;
			this.PostalCode = PostalCode;
			this.Country = Country;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Purpose", Purpose},
				{"Description", Description},
				{"UserDefinedPurpose", UserDefinedPurpose},
				{"InternalLocation", InternalLocation},
				{"AddressLines", AddressLines},
				{"PostalBox", PostalBox},
				{"Town", Town},
				{"Region", Region},
				{"PostalCode", PostalCode},
				{"Country", Country}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"OfPerson", OfPerson},
				{"OfOrganization", OfOrganization}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _InternalLocation
		{
			get
			{
				return InternalLocation;
			}
			set
			{
				if(value is IFCLabel val)
				{
					InternalLocation = val;
				}
				else if(value == null)
				{
					InternalLocation = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCLabel>? _AddressLines
		{
			get
			{
				if(AddressLines != null)
				{
					IFC_Attributes<Global.IFCLabel>? items = new IFC_Attributes<Global.IFCLabel>();
					foreach (IFCLabel item in AddressLines)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					AddressLines = null;
				}
				else
				{
					AddressLines = new IFC_Attributes<IFCLabel>();
					foreach(var val in value)
					{
						if(val is IFCLabel v)
						{
							AddressLines.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _PostalBox
		{
			get
			{
				return PostalBox;
			}
			set
			{
				if(value is IFCLabel val)
				{
					PostalBox = val;
				}
				else if(value == null)
				{
					PostalBox = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Town
		{
			get
			{
				return Town;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Town = val;
				}
				else if(value == null)
				{
					Town = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Region
		{
			get
			{
				return Region;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Region = val;
				}
				else if(value == null)
				{
					Region = null;
				}
			}
		}
		public virtual Global.IFCLabel? _PostalCode
		{
			get
			{
				return PostalCode;
			}
			set
			{
				if(value is IFCLabel val)
				{
					PostalCode = val;
				}
				else if(value == null)
				{
					PostalCode = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Country
		{
			get
			{
				return Country;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Country = val;
				}
				else if(value == null)
				{
					Country = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedColour
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDraughtingPreDefinedColour))
	/// SUBTYPE OF (IfcPreDefinedItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPreDefinedColour : IFCPreDefinedItem, IFCColour, Global.IFCPreDefinedColour
	{
		public IFCPreDefinedColour() : base()
		{
		}
		public IFCPreDefinedColour(IFCLabel? Name) : base (Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedCurveFont
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDraughtingPreDefinedCurveFont))
	/// SUBTYPE OF (IfcPreDefinedItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPreDefinedCurveFont : IFCPreDefinedItem, IFCCurveStyleFontSelect, Global.IFCPreDefinedCurveFont
	{
		public IFCPreDefinedCurveFont() : base()
		{
		}
		public IFCPreDefinedCurveFont(IFCLabel? Name) : base (Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedDimensionSymbol
	/// SUBTYPE OF (IfcPreDefinedSymbol);
	/// WHERE
	/// WR31 : SELF\IfcPreDefinedItem.Name IN ['arc length','conical taper','counterbore',
	/// 'countersink','depth','diameter','plus minus','radius',
	/// 'slope','spherical diameter','spherical radius','square'];
	/// END_ENTITY;
	/// <summary>
	public class IFCPreDefinedDimensionSymbol : IFCPreDefinedSymbol, Global.IFCPreDefinedDimensionSymbol
	{
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCPreDefinedDimensionSymbol() : base()
		{
		}
		public IFCPreDefinedDimensionSymbol(IFCLabel? Name) : base (Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPreDefinedColour
	/// ,IfcPreDefinedCurveFont
	/// ,IfcPreDefinedSymbol
	/// ,IfcPreDefinedTextFont));
	/// Name : IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPreDefinedItem : IFC_ClassEntity, Global.IFCPreDefinedItem
	{
		public virtual IFCLabel? Name { get; set; }
		public IFCPreDefinedItem() : base()
		{
		}
		public IFCPreDefinedItem(IFCLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedPointMarkerSymbol
	/// SUBTYPE OF (IfcPreDefinedSymbol);
	/// WHERE
	/// WR31 : SELF\IfcPreDefinedItem.Name IN ['asterisk','circle','dot','plus','square','triangle','x'];
	/// END_ENTITY;
	/// <summary>
	public class IFCPreDefinedPointMarkerSymbol : IFCPreDefinedSymbol, Global.IFCPreDefinedPointMarkerSymbol
	{
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCPreDefinedPointMarkerSymbol() : base()
		{
		}
		public IFCPreDefinedPointMarkerSymbol(IFCLabel? Name) : base (Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedSymbol
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPreDefinedDimensionSymbol
	/// ,IfcPreDefinedPointMarkerSymbol
	/// ,IfcPreDefinedTerminatorSymbol))
	/// SUBTYPE OF (IfcPreDefinedItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPreDefinedSymbol : IFCPreDefinedItem, IFCDefinedSymbolSelect, Global.IFCPreDefinedSymbol
	{
		public IFCPreDefinedSymbol() : base()
		{
		}
		public IFCPreDefinedSymbol(IFCLabel? Name) : base (Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedTerminatorSymbol
	/// SUBTYPE OF (IfcPreDefinedSymbol);
	/// WHERE
	/// WR31 : SELF\IfcPreDefinedItem.Name IN ['blanked arrow','blanked box',
	/// 'blanked dot','dimension origin','filled arrow','filled box',
	/// 'filled dot','integral symbol','open arrow','slash','unfilled arrow'];
	/// END_ENTITY;
	/// <summary>
	public class IFCPreDefinedTerminatorSymbol : IFCPreDefinedSymbol, Global.IFCPreDefinedTerminatorSymbol
	{
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCPreDefinedTerminatorSymbol() : base()
		{
		}
		public IFCPreDefinedTerminatorSymbol(IFCLabel? Name) : base (Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPreDefinedTextFont
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDraughtingPreDefinedTextFont
	/// ,IfcTextStyleFontModel))
	/// SUBTYPE OF (IfcPreDefinedItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPreDefinedTextFont : IFCPreDefinedItem, IFCTextFontSelect, Global.IFCPreDefinedTextFont
	{
		public IFCPreDefinedTextFont() : base()
		{
		}
		public IFCPreDefinedTextFont(IFCLabel? Name) : base (Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcPresentationLayerAssignment
	/// SUPERTYPE OF (ONEOF
	/// (IfcPresentationLayerWithStyle));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// AssignedItems : SET [1:?] OF IfcLayeredItem;
	/// Identifier : OPTIONAL IfcIdentifier;
	/// END_ENTITY;
	/// <summary>
	public class IFCPresentationLayerAssignment : IFC_ClassEntity, Global.IFCPresentationLayerAssignment
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFC_Attributes<IFCLayeredItem>? AssignedItems { get; set; }
		public virtual IFCIdentifier? Identifier { get; set; }
		public IFCPresentationLayerAssignment() : base()
		{
		}
		public IFCPresentationLayerAssignment(IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCLayeredItem>? AssignedItems, IFCIdentifier? Identifier) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.AssignedItems = AssignedItems;
			this.Identifier = Identifier;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"AssignedItems", AssignedItems},
				{"Identifier", Identifier}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCLayeredItem>? _AssignedItems
		{
			get
			{
				if(AssignedItems != null)
				{
					IFC_Attributes<Global.IFCLayeredItem>? items = new IFC_Attributes<Global.IFCLayeredItem>();
					foreach (IFCLayeredItem item in AssignedItems)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					AssignedItems = null;
				}
				else
				{
					AssignedItems = new IFC_Attributes<IFCLayeredItem>();
					foreach(var val in value)
					{
						if(val is IFCLayeredItem v)
						{
							AssignedItems.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCIdentifier? _Identifier
		{
			get
			{
				return Identifier;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					Identifier = val;
				}
				else if(value == null)
				{
					Identifier = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPresentationLayerWithStyle
	/// SUBTYPE OF (IfcPresentationLayerAssignment);
	/// LayerOn : LOGICAL;
	/// LayerFrozen : LOGICAL;
	/// LayerBlocked : LOGICAL;
	/// LayerStyles : SET [0:?] OF IfcPresentationStyleSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCPresentationLayerWithStyle : IFCPresentationLayerAssignment, Global.IFCPresentationLayerWithStyle
	{
		public virtual LOGICAL? LayerOn { get; set; }
		public virtual LOGICAL? LayerFrozen { get; set; }
		public virtual LOGICAL? LayerBlocked { get; set; }
		public virtual IFC_Attributes<IFCPresentationStyleSelect>? LayerStyles { get; set; }
		public IFCPresentationLayerWithStyle() : base()
		{
		}
		public IFCPresentationLayerWithStyle(IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCLayeredItem>? AssignedItems, IFCIdentifier? Identifier, LOGICAL? LayerOn, LOGICAL? LayerFrozen, LOGICAL? LayerBlocked, IFC_Attributes<IFCPresentationStyleSelect>? LayerStyles) : base (Name, Description, AssignedItems, Identifier)
		{
			this.LayerOn = LayerOn;
			this.LayerFrozen = LayerFrozen;
			this.LayerBlocked = LayerBlocked;
			this.LayerStyles = LayerStyles;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"AssignedItems", AssignedItems},
				{"Identifier", Identifier},
				{"LayerOn", LayerOn},
				{"LayerFrozen", LayerFrozen},
				{"LayerBlocked", LayerBlocked},
				{"LayerStyles", LayerStyles}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual LOGICAL? _LayerOn
		{
			get
			{
				return LayerOn;
			}
			set
			{
				if(value is LOGICAL val)
				{
					LayerOn = val;
				}
				else if(value == null)
				{
					LayerOn = null;
				}
			}
		}
		public virtual LOGICAL? _LayerFrozen
		{
			get
			{
				return LayerFrozen;
			}
			set
			{
				if(value is LOGICAL val)
				{
					LayerFrozen = val;
				}
				else if(value == null)
				{
					LayerFrozen = null;
				}
			}
		}
		public virtual LOGICAL? _LayerBlocked
		{
			get
			{
				return LayerBlocked;
			}
			set
			{
				if(value is LOGICAL val)
				{
					LayerBlocked = val;
				}
				else if(value == null)
				{
					LayerBlocked = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPresentationStyleSelect>? _LayerStyles
		{
			get
			{
				if(LayerStyles != null)
				{
					IFC_Attributes<Global.IFCPresentationStyleSelect>? items = new IFC_Attributes<Global.IFCPresentationStyleSelect>();
					foreach (IFCPresentationStyleSelect item in LayerStyles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					LayerStyles = null;
				}
				else
				{
					LayerStyles = new IFC_Attributes<IFCPresentationStyleSelect>();
					foreach(var val in value)
					{
						if(val is IFCPresentationStyleSelect v)
						{
							LayerStyles.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPresentationStyle
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCurveStyle
	/// ,IfcFillAreaStyle
	/// ,IfcSurfaceStyle
	/// ,IfcSymbolStyle
	/// ,IfcTextStyle));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPresentationStyle : IFC_ClassEntity, Global.IFCPresentationStyle
	{
		public virtual IFCLabel? Name { get; set; }
		public IFCPresentationStyle() : base()
		{
		}
		public IFCPresentationStyle(IFCLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPresentationStyleAssignment;
	/// Styles : SET [1:?] OF IfcPresentationStyleSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCPresentationStyleAssignment : IFC_ClassEntity, Global.IFCPresentationStyleAssignment
	{
		public virtual IFC_Attributes<IFCPresentationStyleSelect>? Styles { get; set; }
		public IFCPresentationStyleAssignment() : base()
		{
		}
		public IFCPresentationStyleAssignment(IFC_Attributes<IFCPresentationStyleSelect>? Styles) : base ()
		{
			this.Styles = Styles;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Styles", Styles}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCPresentationStyleSelect>? _Styles
		{
			get
			{
				if(Styles != null)
				{
					IFC_Attributes<Global.IFCPresentationStyleSelect>? items = new IFC_Attributes<Global.IFCPresentationStyleSelect>();
					foreach (IFCPresentationStyleSelect item in Styles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Styles = null;
				}
				else
				{
					Styles = new IFC_Attributes<IFCPresentationStyleSelect>();
					foreach(var val in value)
					{
						if(val is IFCPresentationStyleSelect v)
						{
							Styles.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProcedure
	/// SUBTYPE OF (IfcProcess);
	/// ProcedureID : IfcIdentifier;
	/// ProcedureType : IfcProcedureTypeEnum;
	/// UserDefinedProcedureType : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(temp <* SELF\IfcObjectDefinition.Decomposes | NOT('IFC2X3.IFCRELNESTS' IN TYPEOF(temp)))) = 0;
	/// WR2 : SIZEOF(QUERY(temp <* SELF\IfcObjectDefinition.IsDecomposedBy | NOT('IFC2X3.IFCRELNESTS' IN TYPEOF(temp)))) = 0;
	/// WR3 : EXISTS(SELF\IfcRoot.Name);
	/// WR4 : (ProcedureType <> IfcProcedureTypeEnum.USERDEFINED) OR
	/// ((ProcedureType = IfcProcedureTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcProcedure.UserDefinedProcedureType));
	/// END_ENTITY;
	/// <summary>
	public class IFCProcedure : IFCProcess, Global.IFCProcedure
	{
		public virtual IFCIdentifier? ProcedureID { get; set; }
		public virtual IFCProcedureTypeEnum? ProcedureType { get; set; }
		public virtual IFCLabel? UserDefinedProcedureType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR4
		{
			get
			{
				return true;
			}
		}
		public IFCProcedure() : base()
		{
		}
		public IFCProcedure(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? ProcedureID, IFCProcedureTypeEnum? ProcedureType, IFCLabel? UserDefinedProcedureType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ProcedureID = ProcedureID;
			this.ProcedureType = ProcedureType;
			this.UserDefinedProcedureType = UserDefinedProcedureType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ProcedureID", ProcedureID},
				{"ProcedureType", ProcedureType},
				{"UserDefinedProcedureType", UserDefinedProcedureType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"OperatesOn", OperatesOn},
				{"IsSuccessorFrom", IsSuccessorFrom},
				{"IsPredecessorTo", IsPredecessorTo}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3},
				{"is_WR4", is_WR4}
			};
		}
		public virtual Global.IFCIdentifier? _ProcedureID
		{
			get
			{
				return ProcedureID;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					ProcedureID = val;
				}
				else if(value == null)
				{
					ProcedureID = null;
				}
			}
		}
		public virtual Global.IFCProcedureTypeEnum? _ProcedureType
		{
			get
			{
				return ProcedureType;
			}
			set
			{
				if(value is IFCProcedureTypeEnum val)
				{
					ProcedureType = val;
				}
				else if(value == null)
				{
					ProcedureType = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedProcedureType
		{
			get
			{
				return UserDefinedProcedureType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedProcedureType = val;
				}
				else if(value == null)
				{
					UserDefinedProcedureType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProcess
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcProcedure
	/// ,IfcTask))
	/// SUBTYPE OF (IfcObject);
	/// INVERSE
	/// OperatesOn : SET [0:?] OF IfcRelAssignsToProcess FOR RelatingProcess;
	/// IsSuccessorFrom : SET [0:?] OF IfcRelSequence FOR RelatedProcess;
	/// IsPredecessorTo : SET [0:?] OF IfcRelSequence FOR RelatingProcess;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCProcess : IFCObject, Global.IFCProcess
	{
		public IFC_Attributes<IFCRelAssignsToProcess>? OperatesOn {get{return new IFC_Attributes<IFCRelAssignsToProcess>(Model?.GetItems<IFCRelAssignsToProcess>().Where(x => x.RelatingProcess != null && x.RelatingProcess == this).ToList());}}
		public IFC_Attributes<IFCRelSequence>? IsSuccessorFrom {get{return new IFC_Attributes<IFCRelSequence>(Model?.GetItems<IFCRelSequence>().Where(x => x.RelatedProcess != null && x.RelatedProcess == this).ToList());}}
		public IFC_Attributes<IFCRelSequence>? IsPredecessorTo {get{return new IFC_Attributes<IFCRelSequence>(Model?.GetItems<IFCRelSequence>().Where(x => x.RelatingProcess != null && x.RelatingProcess == this).ToList());}}
		public IFCProcess() : base()
		{
		}
		public IFCProcess(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"OperatesOn", OperatesOn},
				{"IsSuccessorFrom", IsSuccessorFrom},
				{"IsPredecessorTo", IsPredecessorTo}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCRelAssignsToProcess>? _OperatesOn
		{
			get
			{
				if(OperatesOn != null)
				{
					IFC_Attributes<Global.IFCRelAssignsToProcess>? items = new IFC_Attributes<Global.IFCRelAssignsToProcess>();
					foreach (IFCRelAssignsToProcess item in OperatesOn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelSequence>? _IsSuccessorFrom
		{
			get
			{
				if(IsSuccessorFrom != null)
				{
					IFC_Attributes<Global.IFCRelSequence>? items = new IFC_Attributes<Global.IFCRelSequence>();
					foreach (IFCRelSequence item in IsSuccessorFrom)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelSequence>? _IsPredecessorTo
		{
			get
			{
				if(IsPredecessorTo != null)
				{
					IFC_Attributes<Global.IFCRelSequence>? items = new IFC_Attributes<Global.IFCRelSequence>();
					foreach (IFCRelSequence item in IsPredecessorTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProduct
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcAnnotation
	/// ,IfcElement
	/// ,IfcGrid
	/// ,IfcPort
	/// ,IfcProxy
	/// ,IfcSpatialStructureElement
	/// ,IfcStructuralActivity
	/// ,IfcStructuralItem))
	/// SUBTYPE OF (IfcObject);
	/// ObjectPlacement : OPTIONAL IfcObjectPlacement;
	/// Representation : OPTIONAL IfcProductRepresentation;
	/// INVERSE
	/// ReferencedBy : SET [0:?] OF IfcRelAssignsToProduct FOR RelatingProduct;
	/// WHERE
	/// WR1 : (EXISTS(Representation) AND EXISTS(ObjectPlacement))
	/// OR (EXISTS(Representation) AND
	/// (NOT('IFC2X3.IFCPRODUCTDEFINITIONSHAPE' IN TYPEOF(Representation))))
	/// OR (NOT(EXISTS(Representation)));
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCProduct : IFCObject, Global.IFCProduct
	{
		public virtual IFCObjectPlacement? ObjectPlacement { get; set; }
		public virtual IFCProductRepresentation? Representation { get; set; }
		public IFC_Attributes<IFCRelAssignsToProduct>? ReferencedBy {get{return new IFC_Attributes<IFCRelAssignsToProduct>(Model?.GetItems<IFCRelAssignsToProduct>().Where(x => x.RelatingProduct != null && x.RelatingProduct == this).ToList());}}
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCProduct() : base()
		{
		}
		public IFCProduct(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ObjectPlacement = ObjectPlacement;
			this.Representation = Representation;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCObjectPlacement? _ObjectPlacement
		{
			get
			{
				return ObjectPlacement;
			}
			set
			{
				if(value is IFCObjectPlacement val)
				{
					ObjectPlacement = val;
				}
				else if(value == null)
				{
					ObjectPlacement = null;
				}
			}
		}
		public virtual Global.IFCProductRepresentation? _Representation
		{
			get
			{
				return Representation;
			}
			set
			{
				if(value is IFCProductRepresentation val)
				{
					Representation = val;
				}
				else if(value == null)
				{
					Representation = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelAssignsToProduct>? _ReferencedBy
		{
			get
			{
				if(ReferencedBy != null)
				{
					IFC_Attributes<Global.IFCRelAssignsToProduct>? items = new IFC_Attributes<Global.IFCRelAssignsToProduct>();
					foreach (IFCRelAssignsToProduct item in ReferencedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProductDefinitionShape
	/// SUBTYPE OF (IfcProductRepresentation);
	/// INVERSE
	/// ShapeOfProduct : SET [1:1] OF IfcProduct FOR Representation;
	/// HasShapeAspects : SET [0:?] OF IfcShapeAspect FOR PartOfProductDefinitionShape;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(temp <* Representations |
	/// (NOT('IFC2X3.IFCSHAPEMODEL' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCProductDefinitionShape : IFCProductRepresentation, Global.IFCProductDefinitionShape
	{
		public IFC_Attributes<IFCProduct>? ShapeOfProduct {get{return new IFC_Attributes<IFCProduct>(Model?.GetItems<IFCProduct>().Where(x => x.Representation != null && x.Representation == this).ToList());}}
		public IFC_Attributes<IFCShapeAspect>? HasShapeAspects {get{return new IFC_Attributes<IFCShapeAspect>(Model?.GetItems<IFCShapeAspect>().Where(x => x.PartOfProductDefinitionShape != null && x.PartOfProductDefinitionShape == this).ToList());}}
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public IFCProductDefinitionShape() : base()
		{
		}
		public IFCProductDefinitionShape(IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRepresentation>? Representations) : base (Name, Description, Representations)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"Representations", Representations}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ShapeOfProduct", ShapeOfProduct},
				{"HasShapeAspects", HasShapeAspects}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11}
			};
		}
		public virtual IFC_Attributes<Global.IFCProduct>? _ShapeOfProduct
		{
			get
			{
				if(ShapeOfProduct != null)
				{
					IFC_Attributes<Global.IFCProduct>? items = new IFC_Attributes<Global.IFCProduct>();
					foreach (IFCProduct item in ShapeOfProduct)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCShapeAspect>? _HasShapeAspects
		{
			get
			{
				if(HasShapeAspects != null)
				{
					IFC_Attributes<Global.IFCShapeAspect>? items = new IFC_Attributes<Global.IFCShapeAspect>();
					foreach (IFCShapeAspect item in HasShapeAspects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProductRepresentation
	/// SUPERTYPE OF (ONEOF
	/// (IfcMaterialDefinitionRepresentation
	/// ,IfcProductDefinitionShape));
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Representations : LIST [1:?] OF IfcRepresentation;
	/// END_ENTITY;
	/// <summary>
	public class IFCProductRepresentation : IFC_ClassEntity, Global.IFCProductRepresentation
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFC_Attributes<IFCRepresentation>? Representations { get; set; }
		public IFCProductRepresentation() : base()
		{
		}
		public IFCProductRepresentation(IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRepresentation>? Representations) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.Representations = Representations;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"Representations", Representations}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRepresentation>? _Representations
		{
			get
			{
				if(Representations != null)
				{
					IFC_Attributes<Global.IFCRepresentation>? items = new IFC_Attributes<Global.IFCRepresentation>();
					foreach (IFCRepresentation item in Representations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Representations = null;
				}
				else
				{
					Representations = new IFC_Attributes<IFCRepresentation>();
					foreach(var val in value)
					{
						if(val is IFCRepresentation v)
						{
							Representations.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProductsOfCombustionProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// SpecificHeatCapacity : OPTIONAL IfcSpecificHeatCapacityMeasure;
	/// N20Content : OPTIONAL IfcPositiveRatioMeasure;
	/// COContent : OPTIONAL IfcPositiveRatioMeasure;
	/// CO2Content : OPTIONAL IfcPositiveRatioMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IFCProductsOfCombustionProperties : IFCMaterialProperties, Global.IFCProductsOfCombustionProperties
	{
		public virtual IFCSpecificHeatCapacityMeasure? SpecificHeatCapacity { get; set; }
		public virtual IFCPositiveRatioMeasure? N20Content { get; set; }
		public virtual IFCPositiveRatioMeasure? COContent { get; set; }
		public virtual IFCPositiveRatioMeasure? CO2Content { get; set; }
		public IFCProductsOfCombustionProperties() : base()
		{
		}
		public IFCProductsOfCombustionProperties(IFCMaterial? Material, IFCSpecificHeatCapacityMeasure? SpecificHeatCapacity, IFCPositiveRatioMeasure? N20Content, IFCPositiveRatioMeasure? COContent, IFCPositiveRatioMeasure? CO2Content) : base (Material)
		{
			this.SpecificHeatCapacity = SpecificHeatCapacity;
			this.N20Content = N20Content;
			this.COContent = COContent;
			this.CO2Content = CO2Content;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"SpecificHeatCapacity", SpecificHeatCapacity},
				{"N20Content", N20Content},
				{"COContent", COContent},
				{"CO2Content", CO2Content}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCSpecificHeatCapacityMeasure? _SpecificHeatCapacity
		{
			get
			{
				return SpecificHeatCapacity;
			}
			set
			{
				if(value is IFCSpecificHeatCapacityMeasure val)
				{
					SpecificHeatCapacity = val;
				}
				else if(value == null)
				{
					SpecificHeatCapacity = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _N20Content
		{
			get
			{
				return N20Content;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					N20Content = val;
				}
				else if(value == null)
				{
					N20Content = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _COContent
		{
			get
			{
				return COContent;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					COContent = val;
				}
				else if(value == null)
				{
					COContent = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _CO2Content
		{
			get
			{
				return CO2Content;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					CO2Content = val;
				}
				else if(value == null)
				{
					CO2Content = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProfileDef
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcArbitraryClosedProfileDef
	/// ,IfcArbitraryOpenProfileDef
	/// ,IfcCompositeProfileDef
	/// ,IfcDerivedProfileDef
	/// ,IfcParameterizedProfileDef));
	/// ProfileType : IfcProfileTypeEnum;
	/// ProfileName : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCProfileDef : IFC_ClassEntity, Global.IFCProfileDef
	{
		public virtual IFCProfileTypeEnum? ProfileType { get; set; }
		public virtual IFCLabel? ProfileName { get; set; }
		public IFCProfileDef() : base()
		{
		}
		public IFCProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName) : base ()
		{
			this.ProfileType = ProfileType;
			this.ProfileName = ProfileName;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCProfileTypeEnum? _ProfileType
		{
			get
			{
				return ProfileType;
			}
			set
			{
				if(value is IFCProfileTypeEnum val)
				{
					ProfileType = val;
				}
				else if(value == null)
				{
					ProfileType = null;
				}
			}
		}
		public virtual Global.IFCLabel? _ProfileName
		{
			get
			{
				return ProfileName;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ProfileName = val;
				}
				else if(value == null)
				{
					ProfileName = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProfileProperties
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcGeneralProfileProperties
	/// ,IfcRibPlateProfileProperties));
	/// ProfileName : OPTIONAL IfcLabel;
	/// ProfileDefinition : OPTIONAL IfcProfileDef;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCProfileProperties : IFC_ClassEntity, Global.IFCProfileProperties
	{
		public virtual IFCLabel? ProfileName { get; set; }
		public virtual IFCProfileDef? ProfileDefinition { get; set; }
		public IFCProfileProperties() : base()
		{
		}
		public IFCProfileProperties(IFCLabel? ProfileName, IFCProfileDef? ProfileDefinition) : base ()
		{
			this.ProfileName = ProfileName;
			this.ProfileDefinition = ProfileDefinition;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileName", ProfileName},
				{"ProfileDefinition", ProfileDefinition}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _ProfileName
		{
			get
			{
				return ProfileName;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ProfileName = val;
				}
				else if(value == null)
				{
					ProfileName = null;
				}
			}
		}
		public virtual Global.IFCProfileDef? _ProfileDefinition
		{
			get
			{
				return ProfileDefinition;
			}
			set
			{
				if(value is IFCProfileDef val)
				{
					ProfileDefinition = val;
				}
				else if(value == null)
				{
					ProfileDefinition = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProject
	/// SUBTYPE OF (IfcObject);
	/// LongName : OPTIONAL IfcLabel;
	/// Phase : OPTIONAL IfcLabel;
	/// RepresentationContexts : SET [1:?] OF IfcRepresentationContext;
	/// UnitsInContext : IfcUnitAssignment;
	/// WHERE
	/// WR31 : EXISTS(SELF\IfcRoot.Name);
	/// WR32 : SIZEOF(QUERY(Temp <* RepresentationContexts |
	/// 'IFC2X3.IFCGEOMETRICREPRESENTATIONSUBCONTEXT' IN TYPEOF(Temp)
	/// )) = 0;
	/// WR33 : SIZEOF(SELF\IfcObjectDefinition.Decomposes) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCProject : IFCObject, Global.IFCProject
	{
		public virtual IFCLabel? LongName { get; set; }
		public virtual IFCLabel? Phase { get; set; }
		public virtual IFC_Attributes<IFCRepresentationContext>? RepresentationContexts { get; set; }
		public virtual IFCUnitAssignment? UnitsInContext { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR32
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR33
		{
			get
			{
				return true;
			}
		}
		public IFCProject() : base()
		{
		}
		public IFCProject(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCLabel? LongName, IFCLabel? Phase, IFC_Attributes<IFCRepresentationContext>? RepresentationContexts, IFCUnitAssignment? UnitsInContext) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.LongName = LongName;
			this.Phase = Phase;
			this.RepresentationContexts = RepresentationContexts;
			this.UnitsInContext = UnitsInContext;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"LongName", LongName},
				{"Phase", Phase},
				{"RepresentationContexts", RepresentationContexts},
				{"UnitsInContext", UnitsInContext}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR31", is_WR31},
				{"is_WR32", is_WR32},
				{"is_WR33", is_WR33}
			};
		}
		public virtual Global.IFCLabel? _LongName
		{
			get
			{
				return LongName;
			}
			set
			{
				if(value is IFCLabel val)
				{
					LongName = val;
				}
				else if(value == null)
				{
					LongName = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Phase
		{
			get
			{
				return Phase;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Phase = val;
				}
				else if(value == null)
				{
					Phase = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRepresentationContext>? _RepresentationContexts
		{
			get
			{
				if(RepresentationContexts != null)
				{
					IFC_Attributes<Global.IFCRepresentationContext>? items = new IFC_Attributes<Global.IFCRepresentationContext>();
					foreach (IFCRepresentationContext item in RepresentationContexts)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RepresentationContexts = null;
				}
				else
				{
					RepresentationContexts = new IFC_Attributes<IFCRepresentationContext>();
					foreach(var val in value)
					{
						if(val is IFCRepresentationContext v)
						{
							RepresentationContexts.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCUnitAssignment? _UnitsInContext
		{
			get
			{
				return UnitsInContext;
			}
			set
			{
				if(value is IFCUnitAssignment val)
				{
					UnitsInContext = val;
				}
				else if(value == null)
				{
					UnitsInContext = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProjectOrder
	/// SUBTYPE OF (IfcControl);
	/// ID : IfcIdentifier;
	/// PredefinedType : IfcProjectOrderTypeEnum;
	/// Status : OPTIONAL IfcLabel;
	/// UNIQUE
	/// UR2 : ID;
	/// END_ENTITY;
	/// <summary>
	public class IFCProjectOrder : IFCControl, Global.IFCProjectOrder
	{
		public virtual IFCIdentifier? ID { get; set; }
		public virtual IFCProjectOrderTypeEnum? PredefinedType { get; set; }
		public virtual IFCLabel? Status { get; set; }
		public IFCProjectOrder() : base()
		{
		}
		public IFCProjectOrder(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? ID, IFCProjectOrderTypeEnum? PredefinedType, IFCLabel? Status) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ID = ID;
			this.PredefinedType = PredefinedType;
			this.Status = Status;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ID", ID},
				{"PredefinedType", PredefinedType},
				{"Status", Status}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCIdentifier? _ID
		{
			get
			{
				return ID;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					ID = val;
				}
				else if(value == null)
				{
					ID = null;
				}
			}
		}
		public virtual Global.IFCProjectOrderTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCProjectOrderTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Status
		{
			get
			{
				return Status;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Status = val;
				}
				else if(value == null)
				{
					Status = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProjectOrderRecord
	/// SUBTYPE OF (IfcControl);
	/// Records : LIST [1:?] OF UNIQUE IfcRelAssignsToProjectOrder;
	/// PredefinedType : IfcProjectOrderRecordTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCProjectOrderRecord : IFCControl, Global.IFCProjectOrderRecord
	{
		public virtual IFC_Attributes<IFCRelAssignsToProjectOrder>? Records { get; set; }
		public virtual IFCProjectOrderRecordTypeEnum? PredefinedType { get; set; }
		public IFCProjectOrderRecord() : base()
		{
		}
		public IFCProjectOrderRecord(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFC_Attributes<IFCRelAssignsToProjectOrder>? Records, IFCProjectOrderRecordTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.Records = Records;
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"Records", Records},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCRelAssignsToProjectOrder>? _Records
		{
			get
			{
				if(Records != null)
				{
					IFC_Attributes<Global.IFCRelAssignsToProjectOrder>? items = new IFC_Attributes<Global.IFCRelAssignsToProjectOrder>();
					foreach (IFCRelAssignsToProjectOrder item in Records)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Records = null;
				}
				else
				{
					Records = new IFC_Attributes<IFCRelAssignsToProjectOrder>();
					foreach(var val in value)
					{
						if(val is IFCRelAssignsToProjectOrder v)
						{
							Records.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCProjectOrderRecordTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCProjectOrderRecordTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProjectionCurve
	/// SUBTYPE OF (IfcAnnotationCurveOccurrence);
	/// END_ENTITY;
	/// <summary>
	public class IFCProjectionCurve : IFCAnnotationCurveOccurrence, Global.IFCProjectionCurve
	{
		public IFCProjectionCurve() : base()
		{
		}
		public IFCProjectionCurve(IFCRepresentationItem? Item, IFC_Attributes<IFCPresentationStyleAssignment>? Styles, IFCLabel? Name) : base (Item, Styles, Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"Styles", Styles},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcProjectionElement
	/// SUBTYPE OF (IfcFeatureElementAddition);
	/// END_ENTITY;
	/// <summary>
	public class IFCProjectionElement : IFCFeatureElementAddition, Global.IFCProjectionElement
	{
		public IFCProjectionElement() : base()
		{
		}
		public IFCProjectionElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"ProjectsElements", ProjectsElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcProperty
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcComplexProperty
	/// ,IfcSimpleProperty));
	/// Name : IfcIdentifier;
	/// Description : OPTIONAL IfcText;
	/// INVERSE
	/// PropertyForDependance : SET [0:?] OF IfcPropertyDependencyRelationship FOR DependingProperty;
	/// PropertyDependsOn : SET [0:?] OF IfcPropertyDependencyRelationship FOR DependantProperty;
	/// PartOfComplex : SET [0:1] OF IfcComplexProperty FOR HasProperties;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCProperty : IFC_ClassEntity, Global.IFCProperty
	{
		public virtual IFCIdentifier? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public IFC_Attributes<IFCPropertyDependencyRelationship>? PropertyForDependance {get{return new IFC_Attributes<IFCPropertyDependencyRelationship>(Model?.GetItems<IFCPropertyDependencyRelationship>().Where(x => x.DependingProperty != null && x.DependingProperty == this).ToList());}}
		public IFC_Attributes<IFCPropertyDependencyRelationship>? PropertyDependsOn {get{return new IFC_Attributes<IFCPropertyDependencyRelationship>(Model?.GetItems<IFCPropertyDependencyRelationship>().Where(x => x.DependantProperty != null && x.DependantProperty == this).ToList());}}
		public IFC_Attributes<IFCComplexProperty>? PartOfComplex {get{return new IFC_Attributes<IFCComplexProperty>(Model?.GetItems<IFCComplexProperty>().Where(x => x.HasProperties != null && x.HasProperties.Contains(this)).ToList());}}
		public IFCProperty() : base()
		{
		}
		public IFCProperty(IFCIdentifier? Name, IFCText? Description) : base ()
		{
			this.Name = Name;
			this.Description = Description;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PropertyForDependance", PropertyForDependance},
				{"PropertyDependsOn", PropertyDependsOn},
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCIdentifier? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPropertyDependencyRelationship>? _PropertyForDependance
		{
			get
			{
				if(PropertyForDependance != null)
				{
					IFC_Attributes<Global.IFCPropertyDependencyRelationship>? items = new IFC_Attributes<Global.IFCPropertyDependencyRelationship>();
					foreach (IFCPropertyDependencyRelationship item in PropertyForDependance)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCPropertyDependencyRelationship>? _PropertyDependsOn
		{
			get
			{
				if(PropertyDependsOn != null)
				{
					IFC_Attributes<Global.IFCPropertyDependencyRelationship>? items = new IFC_Attributes<Global.IFCPropertyDependencyRelationship>();
					foreach (IFCPropertyDependencyRelationship item in PropertyDependsOn)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCComplexProperty>? _PartOfComplex
		{
			get
			{
				if(PartOfComplex != null)
				{
					IFC_Attributes<Global.IFCComplexProperty>? items = new IFC_Attributes<Global.IFCComplexProperty>();
					foreach (IFCComplexProperty item in PartOfComplex)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyBoundedValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// UpperBoundValue : OPTIONAL IfcValue;
	/// LowerBoundValue : OPTIONAL IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// WHERE
	/// WR21 : NOT(EXISTS(UpperBoundValue)) OR NOT(EXISTS(LowerBoundValue)) OR
	/// (TYPEOF(UpperBoundValue) = TYPEOF(LowerBoundValue));
	/// WR22 : EXISTS(UpperBoundValue) OR EXISTS(LowerBoundValue);
	/// END_ENTITY;
	/// <summary>
	public class IFCPropertyBoundedValue : IFCSimpleProperty, Global.IFCPropertyBoundedValue
	{
		public virtual IFCValue? UpperBoundValue { get; set; }
		public virtual IFCValue? LowerBoundValue { get; set; }
		public virtual IFCUnit? Unit { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCPropertyBoundedValue() : base()
		{
		}
		public IFCPropertyBoundedValue(IFCIdentifier? Name, IFCText? Description, IFCValue? UpperBoundValue, IFCValue? LowerBoundValue, IFCUnit? Unit) : base (Name, Description)
		{
			this.UpperBoundValue = UpperBoundValue;
			this.LowerBoundValue = LowerBoundValue;
			this.Unit = Unit;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"UpperBoundValue", UpperBoundValue},
				{"LowerBoundValue", LowerBoundValue},
				{"Unit", Unit}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PropertyForDependance", PropertyForDependance},
				{"PropertyDependsOn", PropertyDependsOn},
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCValue? _UpperBoundValue
		{
			get
			{
				return UpperBoundValue;
			}
			set
			{
				if(value is IFCValue val)
				{
					UpperBoundValue = val;
				}
				else if(value == null)
				{
					UpperBoundValue = null;
				}
			}
		}
		public virtual Global.IFCValue? _LowerBoundValue
		{
			get
			{
				return LowerBoundValue;
			}
			set
			{
				if(value is IFCValue val)
				{
					LowerBoundValue = val;
				}
				else if(value == null)
				{
					LowerBoundValue = null;
				}
			}
		}
		public virtual Global.IFCUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IFCUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyConstraintRelationship;
	/// RelatingConstraint : IfcConstraint;
	/// RelatedProperties : SET [1:?] OF IfcProperty;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IFCPropertyConstraintRelationship : IFC_ClassEntity, Global.IFCPropertyConstraintRelationship
	{
		public virtual IFCConstraint? RelatingConstraint { get; set; }
		public virtual IFC_Attributes<IFCProperty>? RelatedProperties { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public IFCPropertyConstraintRelationship() : base()
		{
		}
		public IFCPropertyConstraintRelationship(IFCConstraint? RelatingConstraint, IFC_Attributes<IFCProperty>? RelatedProperties, IFCLabel? Name, IFCText? Description) : base ()
		{
			this.RelatingConstraint = RelatingConstraint;
			this.RelatedProperties = RelatedProperties;
			this.Name = Name;
			this.Description = Description;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RelatingConstraint", RelatingConstraint},
				{"RelatedProperties", RelatedProperties},
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCConstraint? _RelatingConstraint
		{
			get
			{
				return RelatingConstraint;
			}
			set
			{
				if(value is IFCConstraint val)
				{
					RelatingConstraint = val;
				}
				else if(value == null)
				{
					RelatingConstraint = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCProperty>? _RelatedProperties
		{
			get
			{
				if(RelatedProperties != null)
				{
					IFC_Attributes<Global.IFCProperty>? items = new IFC_Attributes<Global.IFCProperty>();
					foreach (IFCProperty item in RelatedProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedProperties = null;
				}
				else
				{
					RelatedProperties = new IFC_Attributes<IFCProperty>();
					foreach(var val in value)
					{
						if(val is IFCProperty v)
						{
							RelatedProperties.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPropertySetDefinition))
	/// SUBTYPE OF (IfcRoot);
	/// INVERSE
	/// HasAssociations : SET [0:?] OF IfcRelAssociates FOR RelatedObjects;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPropertyDefinition : IFCRoot, Global.IFCPropertyDefinition
	{
		public IFC_Attributes<IFCRelAssociates>? HasAssociations {get{return new IFC_Attributes<IFCRelAssociates>(Model?.GetItems<IFCRelAssociates>().Where(x => x.RelatedObjects != null && x.RelatedObjects.Contains(this)).ToList());}}
		public IFCPropertyDefinition() : base()
		{
		}
		public IFCPropertyDefinition(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCRelAssociates>? _HasAssociations
		{
			get
			{
				if(HasAssociations != null)
				{
					IFC_Attributes<Global.IFCRelAssociates>? items = new IFC_Attributes<Global.IFCRelAssociates>();
					foreach (IFCRelAssociates item in HasAssociations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyDependencyRelationship;
	/// DependingProperty : IfcProperty;
	/// DependantProperty : IfcProperty;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// Expression : OPTIONAL IfcText;
	/// WHERE
	/// WR1 : DependingProperty :<>: DependantProperty;
	/// END_ENTITY;
	/// <summary>
	public class IFCPropertyDependencyRelationship : IFC_ClassEntity, Global.IFCPropertyDependencyRelationship
	{
		public virtual IFCProperty? DependingProperty { get; set; }
		public virtual IFCProperty? DependantProperty { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFCText? Expression { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCPropertyDependencyRelationship() : base()
		{
		}
		public IFCPropertyDependencyRelationship(IFCProperty? DependingProperty, IFCProperty? DependantProperty, IFCLabel? Name, IFCText? Description, IFCText? Expression) : base ()
		{
			this.DependingProperty = DependingProperty;
			this.DependantProperty = DependantProperty;
			this.Name = Name;
			this.Description = Description;
			this.Expression = Expression;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"DependingProperty", DependingProperty},
				{"DependantProperty", DependantProperty},
				{"Name", Name},
				{"Description", Description},
				{"Expression", Expression}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCProperty? _DependingProperty
		{
			get
			{
				return DependingProperty;
			}
			set
			{
				if(value is IFCProperty val)
				{
					DependingProperty = val;
				}
				else if(value == null)
				{
					DependingProperty = null;
				}
			}
		}
		public virtual Global.IFCProperty? _DependantProperty
		{
			get
			{
				return DependantProperty;
			}
			set
			{
				if(value is IFCProperty val)
				{
					DependantProperty = val;
				}
				else if(value == null)
				{
					DependantProperty = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCText? _Expression
		{
			get
			{
				return Expression;
			}
			set
			{
				if(value is IFCText val)
				{
					Expression = val;
				}
				else if(value == null)
				{
					Expression = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyEnumeratedValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// EnumerationValues : LIST [1:?] OF IfcValue;
	/// EnumerationReference : OPTIONAL IfcPropertyEnumeration;
	/// WHERE
	/// WR1 : NOT(EXISTS(EnumerationReference)) OR
	/// (SIZEOF(QUERY(temp <* EnumerationValues |
	/// temp IN EnumerationReference.EnumerationValues))
	/// = SIZEOF(EnumerationValues));
	/// END_ENTITY;
	/// <summary>
	public class IFCPropertyEnumeratedValue : IFCSimpleProperty, Global.IFCPropertyEnumeratedValue
	{
		public virtual IFC_Attributes<IFCValue>? EnumerationValues { get; set; }
		public virtual IFCPropertyEnumeration? EnumerationReference { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCPropertyEnumeratedValue() : base()
		{
		}
		public IFCPropertyEnumeratedValue(IFCIdentifier? Name, IFCText? Description, IFC_Attributes<IFCValue>? EnumerationValues, IFCPropertyEnumeration? EnumerationReference) : base (Name, Description)
		{
			this.EnumerationValues = EnumerationValues;
			this.EnumerationReference = EnumerationReference;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"EnumerationValues", EnumerationValues},
				{"EnumerationReference", EnumerationReference}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PropertyForDependance", PropertyForDependance},
				{"PropertyDependsOn", PropertyDependsOn},
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCValue>? _EnumerationValues
		{
			get
			{
				if(EnumerationValues != null)
				{
					IFC_Attributes<Global.IFCValue>? items = new IFC_Attributes<Global.IFCValue>();
					foreach (IFCValue item in EnumerationValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					EnumerationValues = null;
				}
				else
				{
					EnumerationValues = new IFC_Attributes<IFCValue>();
					foreach(var val in value)
					{
						if(val is IFCValue v)
						{
							EnumerationValues.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCPropertyEnumeration? _EnumerationReference
		{
			get
			{
				return EnumerationReference;
			}
			set
			{
				if(value is IFCPropertyEnumeration val)
				{
					EnumerationReference = val;
				}
				else if(value == null)
				{
					EnumerationReference = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyEnumeration;
	/// Name : IfcLabel;
	/// EnumerationValues : LIST [1:?] OF UNIQUE IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// UNIQUE
	/// UR1 : Name;
	/// WHERE
	/// WR01 : SIZEOF(QUERY(temp <* SELF.EnumerationValues |
	/// NOT(TYPEOF(SELF.EnumerationValues[1]) = TYPEOF(temp))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCPropertyEnumeration : IFC_ClassEntity, Global.IFCPropertyEnumeration
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFC_Attributes<IFCValue>? EnumerationValues { get; set; }
		public virtual IFCUnit? Unit { get; set; }
		public virtual bool is_WR01
		{
			get
			{
				return true;
			}
		}
		public IFCPropertyEnumeration() : base()
		{
		}
		public IFCPropertyEnumeration(IFCLabel? Name, IFC_Attributes<IFCValue>? EnumerationValues, IFCUnit? Unit) : base ()
		{
			this.Name = Name;
			this.EnumerationValues = EnumerationValues;
			this.Unit = Unit;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"EnumerationValues", EnumerationValues},
				{"Unit", Unit}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR01", is_WR01}
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCValue>? _EnumerationValues
		{
			get
			{
				if(EnumerationValues != null)
				{
					IFC_Attributes<Global.IFCValue>? items = new IFC_Attributes<Global.IFCValue>();
					foreach (IFCValue item in EnumerationValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					EnumerationValues = null;
				}
				else
				{
					EnumerationValues = new IFC_Attributes<IFCValue>();
					foreach(var val in value)
					{
						if(val is IFCValue v)
						{
							EnumerationValues.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IFCUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyListValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// ListValues : LIST [1:?] OF IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// WHERE
	/// WR31 : SIZEOF(QUERY(temp <* SELF.ListValues |
	/// NOT(TYPEOF(SELF.ListValues[1]) = TYPEOF(temp))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCPropertyListValue : IFCSimpleProperty, Global.IFCPropertyListValue
	{
		public virtual IFC_Attributes<IFCValue>? ListValues { get; set; }
		public virtual IFCUnit? Unit { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCPropertyListValue() : base()
		{
		}
		public IFCPropertyListValue(IFCIdentifier? Name, IFCText? Description, IFC_Attributes<IFCValue>? ListValues, IFCUnit? Unit) : base (Name, Description)
		{
			this.ListValues = ListValues;
			this.Unit = Unit;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"ListValues", ListValues},
				{"Unit", Unit}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PropertyForDependance", PropertyForDependance},
				{"PropertyDependsOn", PropertyDependsOn},
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual IFC_Attributes<Global.IFCValue>? _ListValues
		{
			get
			{
				if(ListValues != null)
				{
					IFC_Attributes<Global.IFCValue>? items = new IFC_Attributes<Global.IFCValue>();
					foreach (IFCValue item in ListValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ListValues = null;
				}
				else
				{
					ListValues = new IFC_Attributes<IFCValue>();
					foreach(var val in value)
					{
						if(val is IFCValue v)
						{
							ListValues.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IFCUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyReferenceValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// UsageName : OPTIONAL IfcLabel;
	/// PropertyReference : IfcObjectReferenceSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCPropertyReferenceValue : IFCSimpleProperty, Global.IFCPropertyReferenceValue
	{
		public virtual IFCLabel? UsageName { get; set; }
		public virtual IFCObjectReferenceSelect? PropertyReference { get; set; }
		public IFCPropertyReferenceValue() : base()
		{
		}
		public IFCPropertyReferenceValue(IFCIdentifier? Name, IFCText? Description, IFCLabel? UsageName, IFCObjectReferenceSelect? PropertyReference) : base (Name, Description)
		{
			this.UsageName = UsageName;
			this.PropertyReference = PropertyReference;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"UsageName", UsageName},
				{"PropertyReference", PropertyReference}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PropertyForDependance", PropertyForDependance},
				{"PropertyDependsOn", PropertyDependsOn},
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _UsageName
		{
			get
			{
				return UsageName;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UsageName = val;
				}
				else if(value == null)
				{
					UsageName = null;
				}
			}
		}
		public virtual Global.IFCObjectReferenceSelect? _PropertyReference
		{
			get
			{
				return PropertyReference;
			}
			set
			{
				if(value is IFCObjectReferenceSelect val)
				{
					PropertyReference = val;
				}
				else if(value == null)
				{
					PropertyReference = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertySet
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// HasProperties : SET [1:?] OF IfcProperty;
	/// WHERE
	/// WR31 : EXISTS(SELF\IfcRoot.Name);
	/// WR32 : IfcUniquePropertyName(HasProperties);
	/// END_ENTITY;
	/// <summary>
	public class IFCPropertySet : IFCPropertySetDefinition, Global.IFCPropertySet
	{
		public virtual IFC_Attributes<IFCProperty>? HasProperties { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR32
		{
			get
			{
				return true;
			}
		}
		public IFCPropertySet() : base()
		{
		}
		public IFCPropertySet(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCProperty>? HasProperties) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.HasProperties = HasProperties;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"HasProperties", HasProperties}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31},
				{"is_WR32", is_WR32}
			};
		}
		public virtual IFC_Attributes<Global.IFCProperty>? _HasProperties
		{
			get
			{
				if(HasProperties != null)
				{
					IFC_Attributes<Global.IFCProperty>? items = new IFC_Attributes<Global.IFCProperty>();
					foreach (IFCProperty item in HasProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasProperties = null;
				}
				else
				{
					HasProperties = new IFC_Attributes<IFCProperty>();
					foreach(var val in value)
					{
						if(val is IFCProperty v)
						{
							HasProperties.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertySetDefinition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcDoorLiningProperties
	/// ,IfcDoorPanelProperties
	/// ,IfcElementQuantity
	/// ,IfcEnergyProperties
	/// ,IfcFluidFlowProperties
	/// ,IfcPermeableCoveringProperties
	/// ,IfcPropertySet
	/// ,IfcReinforcementDefinitionProperties
	/// ,IfcServiceLifeFactor
	/// ,IfcSoundProperties
	/// ,IfcSoundValue
	/// ,IfcSpaceThermalLoadProperties
	/// ,IfcWindowLiningProperties
	/// ,IfcWindowPanelProperties))
	/// SUBTYPE OF (IfcPropertyDefinition);
	/// INVERSE
	/// PropertyDefinitionOf : SET [0:1] OF IfcRelDefinesByProperties FOR RelatingPropertyDefinition;
	/// DefinesType : SET [0:1] OF IfcTypeObject FOR HasPropertySets;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCPropertySetDefinition : IFCPropertyDefinition, Global.IFCPropertySetDefinition
	{
		public IFC_Attributes<IFCRelDefinesByProperties>? PropertyDefinitionOf {get{return new IFC_Attributes<IFCRelDefinesByProperties>(Model?.GetItems<IFCRelDefinesByProperties>().Where(x => x.RelatingPropertyDefinition != null && x.RelatingPropertyDefinition == this).ToList());}}
		public IFC_Attributes<IFCTypeObject>? DefinesType {get{return new IFC_Attributes<IFCTypeObject>(Model?.GetItems<IFCTypeObject>().Where(x => x.HasPropertySets != null && x.HasPropertySets.Contains(this)).ToList());}}
		public IFCPropertySetDefinition() : base()
		{
		}
		public IFCPropertySetDefinition(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCRelDefinesByProperties>? _PropertyDefinitionOf
		{
			get
			{
				if(PropertyDefinitionOf != null)
				{
					IFC_Attributes<Global.IFCRelDefinesByProperties>? items = new IFC_Attributes<Global.IFCRelDefinesByProperties>();
					foreach (IFCRelDefinesByProperties item in PropertyDefinitionOf)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCTypeObject>? _DefinesType
		{
			get
			{
				if(DefinesType != null)
				{
					IFC_Attributes<Global.IFCTypeObject>? items = new IFC_Attributes<Global.IFCTypeObject>();
					foreach (IFCTypeObject item in DefinesType)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertySingleValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// NominalValue : OPTIONAL IfcValue;
	/// Unit : OPTIONAL IfcUnit;
	/// END_ENTITY;
	/// <summary>
	public class IFCPropertySingleValue : IFCSimpleProperty, Global.IFCPropertySingleValue
	{
		public virtual IFCValue? NominalValue { get; set; }
		public virtual IFCUnit? Unit { get; set; }
		public IFCPropertySingleValue() : base()
		{
		}
		public IFCPropertySingleValue(IFCIdentifier? Name, IFCText? Description, IFCValue? NominalValue, IFCUnit? Unit) : base (Name, Description)
		{
			this.NominalValue = NominalValue;
			this.Unit = Unit;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"NominalValue", NominalValue},
				{"Unit", Unit}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PropertyForDependance", PropertyForDependance},
				{"PropertyDependsOn", PropertyDependsOn},
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCValue? _NominalValue
		{
			get
			{
				return NominalValue;
			}
			set
			{
				if(value is IFCValue val)
				{
					NominalValue = val;
				}
				else if(value == null)
				{
					NominalValue = null;
				}
			}
		}
		public virtual Global.IFCUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IFCUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPropertyTableValue
	/// SUBTYPE OF (IfcSimpleProperty);
	/// DefiningValues : LIST [1:?] OF UNIQUE IfcValue;
	/// DefinedValues : LIST [1:?] OF IfcValue;
	/// Expression : OPTIONAL IfcText;
	/// DefiningUnit : OPTIONAL IfcUnit;
	/// DefinedUnit : OPTIONAL IfcUnit;
	/// WHERE
	/// WR1 : SIZEOF(DefiningValues) = SIZEOF(DefinedValues);
	/// WR2 : SIZEOF(QUERY(temp <* SELF.DefiningValues | TYPEOF(temp) <> TYPEOF(SELF.DefiningValues[1])))=0;
	/// WR3 : SIZEOF(QUERY(temp <* SELF.DefinedValues | TYPEOF(temp) <> TYPEOF(SELF.DefinedValues[1])))=0;
	/// END_ENTITY;
	/// <summary>
	public class IFCPropertyTableValue : IFCSimpleProperty, Global.IFCPropertyTableValue
	{
		public virtual IFC_Attributes<IFCValue>? DefiningValues { get; set; }
		public virtual IFC_Attributes<IFCValue>? DefinedValues { get; set; }
		public virtual IFCText? Expression { get; set; }
		public virtual IFCUnit? DefiningUnit { get; set; }
		public virtual IFCUnit? DefinedUnit { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCPropertyTableValue() : base()
		{
		}
		public IFCPropertyTableValue(IFCIdentifier? Name, IFCText? Description, IFC_Attributes<IFCValue>? DefiningValues, IFC_Attributes<IFCValue>? DefinedValues, IFCText? Expression, IFCUnit? DefiningUnit, IFCUnit? DefinedUnit) : base (Name, Description)
		{
			this.DefiningValues = DefiningValues;
			this.DefinedValues = DefinedValues;
			this.Expression = Expression;
			this.DefiningUnit = DefiningUnit;
			this.DefinedUnit = DefinedUnit;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"DefiningValues", DefiningValues},
				{"DefinedValues", DefinedValues},
				{"Expression", Expression},
				{"DefiningUnit", DefiningUnit},
				{"DefinedUnit", DefinedUnit}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PropertyForDependance", PropertyForDependance},
				{"PropertyDependsOn", PropertyDependsOn},
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual IFC_Attributes<Global.IFCValue>? _DefiningValues
		{
			get
			{
				if(DefiningValues != null)
				{
					IFC_Attributes<Global.IFCValue>? items = new IFC_Attributes<Global.IFCValue>();
					foreach (IFCValue item in DefiningValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					DefiningValues = null;
				}
				else
				{
					DefiningValues = new IFC_Attributes<IFCValue>();
					foreach(var val in value)
					{
						if(val is IFCValue v)
						{
							DefiningValues.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCValue>? _DefinedValues
		{
			get
			{
				if(DefinedValues != null)
				{
					IFC_Attributes<Global.IFCValue>? items = new IFC_Attributes<Global.IFCValue>();
					foreach (IFCValue item in DefinedValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					DefinedValues = null;
				}
				else
				{
					DefinedValues = new IFC_Attributes<IFCValue>();
					foreach(var val in value)
					{
						if(val is IFCValue v)
						{
							DefinedValues.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCText? _Expression
		{
			get
			{
				return Expression;
			}
			set
			{
				if(value is IFCText val)
				{
					Expression = val;
				}
				else if(value == null)
				{
					Expression = null;
				}
			}
		}
		public virtual Global.IFCUnit? _DefiningUnit
		{
			get
			{
				return DefiningUnit;
			}
			set
			{
				if(value is IFCUnit val)
				{
					DefiningUnit = val;
				}
				else if(value == null)
				{
					DefiningUnit = null;
				}
			}
		}
		public virtual Global.IFCUnit? _DefinedUnit
		{
			get
			{
				return DefinedUnit;
			}
			set
			{
				if(value is IFCUnit val)
				{
					DefinedUnit = val;
				}
				else if(value == null)
				{
					DefinedUnit = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProtectiveDeviceType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcProtectiveDeviceTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCProtectiveDeviceType : IFCFlowControllerType, Global.IFCProtectiveDeviceType
	{
		public virtual IFCProtectiveDeviceTypeEnum? PredefinedType { get; set; }
		public IFCProtectiveDeviceType() : base()
		{
		}
		public IFCProtectiveDeviceType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCProtectiveDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCProtectiveDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCProtectiveDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcProxy
	/// SUBTYPE OF (IfcProduct);
	/// ProxyType : IfcObjectTypeEnum;
	/// Tag : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IFCProxy : IFCProduct, Global.IFCProxy
	{
		public virtual IFCObjectTypeEnum? ProxyType { get; set; }
		public virtual IFCLabel? Tag { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCProxy() : base()
		{
		}
		public IFCProxy(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCObjectTypeEnum? ProxyType, IFCLabel? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.ProxyType = ProxyType;
			this.Tag = Tag;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"ProxyType", ProxyType},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCObjectTypeEnum? _ProxyType
		{
			get
			{
				return ProxyType;
			}
			set
			{
				if(value is IFCObjectTypeEnum val)
				{
					ProxyType = val;
				}
				else if(value == null)
				{
					ProxyType = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Tag
		{
			get
			{
				return Tag;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Tag = val;
				}
				else if(value == null)
				{
					Tag = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcPumpType
	/// SUBTYPE OF (IfcFlowMovingDeviceType);
	/// PredefinedType : IfcPumpTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcPumpTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcPumpTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCPumpType : IFCFlowMovingDeviceType, Global.IFCPumpType
	{
		public virtual IFCPumpTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCPumpType() : base()
		{
		}
		public IFCPumpType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCPumpTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPumpTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCPumpTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityArea
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// AreaValue : IfcAreaMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.AREAUNIT);
	/// WR22 : AreaValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IFCQuantityArea : IFCPhysicalSimpleQuantity, Global.IFCQuantityArea
	{
		public virtual IFCAreaMeasure? AreaValue { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCQuantityArea() : base()
		{
		}
		public IFCQuantityArea(IFCLabel? Name, IFCText? Description, IFCNamedUnit? Unit, IFCAreaMeasure? AreaValue) : base (Name, Description, Unit)
		{
			this.AreaValue = AreaValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"Unit", Unit},
				{"AreaValue", AreaValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCAreaMeasure? _AreaValue
		{
			get
			{
				return AreaValue;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					AreaValue = val;
				}
				else if(value == null)
				{
					AreaValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityCount
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// CountValue : IfcCountMeasure;
	/// WHERE
	/// WR21 : CountValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IFCQuantityCount : IFCPhysicalSimpleQuantity, Global.IFCQuantityCount
	{
		public virtual IFCCountMeasure? CountValue { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public IFCQuantityCount() : base()
		{
		}
		public IFCQuantityCount(IFCLabel? Name, IFCText? Description, IFCNamedUnit? Unit, IFCCountMeasure? CountValue) : base (Name, Description, Unit)
		{
			this.CountValue = CountValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"Unit", Unit},
				{"CountValue", CountValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCCountMeasure? _CountValue
		{
			get
			{
				return CountValue;
			}
			set
			{
				if(value is IFCCountMeasure val)
				{
					CountValue = val;
				}
				else if(value == null)
				{
					CountValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityLength
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// LengthValue : IfcLengthMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.LENGTHUNIT);
	/// WR22 : LengthValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IFCQuantityLength : IFCPhysicalSimpleQuantity, Global.IFCQuantityLength
	{
		public virtual IFCLengthMeasure? LengthValue { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCQuantityLength() : base()
		{
		}
		public IFCQuantityLength(IFCLabel? Name, IFCText? Description, IFCNamedUnit? Unit, IFCLengthMeasure? LengthValue) : base (Name, Description, Unit)
		{
			this.LengthValue = LengthValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"Unit", Unit},
				{"LengthValue", LengthValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCLengthMeasure? _LengthValue
		{
			get
			{
				return LengthValue;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					LengthValue = val;
				}
				else if(value == null)
				{
					LengthValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityTime
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// TimeValue : IfcTimeMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.TIMEUNIT);
	/// WR22 : TimeValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IFCQuantityTime : IFCPhysicalSimpleQuantity, Global.IFCQuantityTime
	{
		public virtual IFCTimeMeasure? TimeValue { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCQuantityTime() : base()
		{
		}
		public IFCQuantityTime(IFCLabel? Name, IFCText? Description, IFCNamedUnit? Unit, IFCTimeMeasure? TimeValue) : base (Name, Description, Unit)
		{
			this.TimeValue = TimeValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"Unit", Unit},
				{"TimeValue", TimeValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCTimeMeasure? _TimeValue
		{
			get
			{
				return TimeValue;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					TimeValue = val;
				}
				else if(value == null)
				{
					TimeValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityVolume
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// VolumeValue : IfcVolumeMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.VOLUMEUNIT);
	/// WR22 : VolumeValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IFCQuantityVolume : IFCPhysicalSimpleQuantity, Global.IFCQuantityVolume
	{
		public virtual IFCVolumeMeasure? VolumeValue { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCQuantityVolume() : base()
		{
		}
		public IFCQuantityVolume(IFCLabel? Name, IFCText? Description, IFCNamedUnit? Unit, IFCVolumeMeasure? VolumeValue) : base (Name, Description, Unit)
		{
			this.VolumeValue = VolumeValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"Unit", Unit},
				{"VolumeValue", VolumeValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCVolumeMeasure? _VolumeValue
		{
			get
			{
				return VolumeValue;
			}
			set
			{
				if(value is IFCVolumeMeasure val)
				{
					VolumeValue = val;
				}
				else if(value == null)
				{
					VolumeValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcQuantityWeight
	/// SUBTYPE OF (IfcPhysicalSimpleQuantity);
	/// WeightValue : IfcMassMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(SELF\IfcPhysicalSimpleQuantity.Unit)) OR
	/// (SELF\IfcPhysicalSimpleQuantity.Unit.UnitType = IfcUnitEnum.MASSUNIT);
	/// WR22 : WeightValue >= 0.;
	/// END_ENTITY;
	/// <summary>
	public class IFCQuantityWeight : IFCPhysicalSimpleQuantity, Global.IFCQuantityWeight
	{
		public virtual IFCMassMeasure? WeightValue { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCQuantityWeight() : base()
		{
		}
		public IFCQuantityWeight(IFCLabel? Name, IFCText? Description, IFCNamedUnit? Unit, IFCMassMeasure? WeightValue) : base (Name, Description, Unit)
		{
			this.WeightValue = WeightValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"Unit", Unit},
				{"WeightValue", WeightValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCMassMeasure? _WeightValue
		{
			get
			{
				return WeightValue;
			}
			set
			{
				if(value is IFCMassMeasure val)
				{
					WeightValue = val;
				}
				else if(value == null)
				{
					WeightValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRadiusDimension
	/// SUBTYPE OF (IfcDimensionCurveDirectedCallout);
	/// END_ENTITY;
	/// <summary>
	public class IFCRadiusDimension : IFCDimensionCurveDirectedCallout, Global.IFCRadiusDimension
	{
		public IFCRadiusDimension() : base()
		{
		}
		public IFCRadiusDimension(IFC_Attributes<IFCDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Contents", Contents}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem},
				{"IsRelatedFromCallout", IsRelatedFromCallout},
				{"IsRelatedToCallout", IsRelatedToCallout}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41},
				{"is_WR42", is_WR42}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRailing
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcRailingTypeEnum;
	/// WHERE
	/// WR61 : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcRailingTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcRailingTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IFCRailing : IFCBuildingElement, Global.IFCRailing
	{
		public virtual IFCRailingTypeEnum? PredefinedType { get; set; }
		public virtual bool is_WR61
		{
			get
			{
				return true;
			}
		}
		public IFCRailing() : base()
		{
		}
		public IFCRailing(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCRailingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR61", is_WR61}
			};
		}
		public virtual Global.IFCRailingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCRailingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRailingType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcRailingTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCRailingType : IFCBuildingElementType, Global.IFCRailingType
	{
		public virtual IFCRailingTypeEnum? PredefinedType { get; set; }
		public IFCRailingType() : base()
		{
		}
		public IFCRailingType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCRailingTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCRailingTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCRailingTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRamp
	/// SUBTYPE OF (IfcBuildingElement);
	/// ShapeType : IfcRampTypeEnum;
	/// WHERE
	/// WR1 : (HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 0) OR
	/// ((HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 1) AND (NOT(EXISTS(SELF\IfcProduct.Representation))));
	/// END_ENTITY;
	/// <summary>
	public class IFCRamp : IFCBuildingElement, Global.IFCRamp
	{
		public virtual IFCRampTypeEnum? ShapeType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRamp() : base()
		{
		}
		public IFCRamp(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCRampTypeEnum? ShapeType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.ShapeType = ShapeType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"ShapeType", ShapeType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCRampTypeEnum? _ShapeType
		{
			get
			{
				return ShapeType;
			}
			set
			{
				if(value is IFCRampTypeEnum val)
				{
					ShapeType = val;
				}
				else if(value == null)
				{
					ShapeType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRampFlight
	/// SUBTYPE OF (IfcBuildingElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCRampFlight : IFCBuildingElement, Global.IFCRampFlight
	{
		public IFCRampFlight() : base()
		{
		}
		public IFCRampFlight(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRampFlightType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcRampFlightTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCRampFlightType : IFCBuildingElementType, Global.IFCRampFlightType
	{
		public virtual IFCRampFlightTypeEnum? PredefinedType { get; set; }
		public IFCRampFlightType() : base()
		{
		}
		public IFCRampFlightType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCRampFlightTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCRampFlightTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCRampFlightTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRationalBezierCurve
	/// SUBTYPE OF (IfcBezierCurve);
	/// WeightsData : LIST [2:?] OF REAL;
	/// DERIVE
	/// Weights : ARRAY [0:255] OF REAL := IfcListToArray(WeightsData,0,SELF\IfcBSplineCurve.UpperIndexOnControlPoints);
	/// WHERE
	/// WR1 : SIZEOF(WeightsData) = SIZEOF(SELF\IfcBSplineCurve.ControlPointsList);
	/// WR2 : IfcCurveWeightsPositive(SELF);
	/// END_ENTITY;
	/// <summary>
	public class IFCRationalBezierCurve : IFCBezierCurve, Global.IFCRationalBezierCurve
	{
		public virtual IFC_Attributes<REAL>? WeightsData { get; set; }
		public virtual IFC_Attributes<REAL>? Weights
		{
			get
			{
				//MANUAL : IFC2x3.IFCRationalBezierCurve.Weights
				// IfcListToArray(WeightsData,0,SELF\IfcBSplineCurve.UpperIndexOnControlPoints);
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCRationalBezierCurve() : base()
		{
		}
		public IFCRationalBezierCurve(INTEGER? Degree, IFC_Attributes<IFCCartesianPoint>? ControlPointsList, IFCBSplineCurveForm? CurveForm, LOGICAL? ClosedCurve, LOGICAL? SelfIntersect, IFC_Attributes<REAL>? WeightsData) : base (Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect)
		{
			this.WeightsData = WeightsData;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Degree", Degree},
				{"ControlPointsList", ControlPointsList},
				{"CurveForm", CurveForm},
				{"ClosedCurve", ClosedCurve},
				{"SelfIntersect", SelfIntersect},
				{"WeightsData", WeightsData}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim},
				{"ControlPoints", ControlPoints},
				{"UpperIndexOnControlPoints", UpperIndexOnControlPoints},
				{"Weights", Weights}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual IFC_Attributes<REAL>? _WeightsData
		{
			get
			{
				if(WeightsData != null)
				{
					IFC_Attributes<REAL>? items = new IFC_Attributes<REAL>();
					foreach (REAL item in WeightsData)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					WeightsData = null;
				}
				else
				{
					WeightsData = new IFC_Attributes<REAL>();
					foreach(var val in value)
					{
						if(val is REAL v)
						{
							WeightsData.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<REAL>? _Weights
		{
			get
			{
				if(Weights != null)
				{
					IFC_Attributes<REAL>? items = new IFC_Attributes<REAL>();
					foreach (REAL item in Weights)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRectangleHollowProfileDef
	/// SUBTYPE OF (IfcRectangleProfileDef);
	/// WallThickness : IfcPositiveLengthMeasure;
	/// InnerFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// OuterFilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR31 : (WallThickness < (SELF\IfcRectangleProfileDef.XDim/2.)) AND
	/// (WallThickness < (SELF\IfcRectangleProfileDef.YDim/2.));
	/// WR32 : NOT(EXISTS(OuterFilletRadius)) OR
	/// ((OuterFilletRadius <= (SELF\IfcRectangleProfileDef.XDim/2.)) AND
	/// (OuterFilletRadius <= (SELF\IfcRectangleProfileDef.YDim/2.)));
	/// WR33 : NOT(EXISTS(InnerFilletRadius)) OR
	/// ((InnerFilletRadius <= (SELF\IfcRectangleProfileDef.XDim/2. - WallThickness)) AND
	/// (InnerFilletRadius <= (SELF\IfcRectangleProfileDef.YDim/2. - WallThickness)));
	/// END_ENTITY;
	/// <summary>
	public class IFCRectangleHollowProfileDef : IFCRectangleProfileDef, Global.IFCRectangleHollowProfileDef
	{
		public virtual IFCPositiveLengthMeasure? WallThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? InnerFilletRadius { get; set; }
		public virtual IFCPositiveLengthMeasure? OuterFilletRadius { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR32
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR33
		{
			get
			{
				return true;
			}
		}
		public IFCRectangleHollowProfileDef() : base()
		{
		}
		public IFCRectangleHollowProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? XDim, IFCPositiveLengthMeasure? YDim, IFCPositiveLengthMeasure? WallThickness, IFCPositiveLengthMeasure? InnerFilletRadius, IFCPositiveLengthMeasure? OuterFilletRadius) : base (ProfileType, ProfileName, Position, XDim, YDim)
		{
			this.WallThickness = WallThickness;
			this.InnerFilletRadius = InnerFilletRadius;
			this.OuterFilletRadius = OuterFilletRadius;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"XDim", XDim},
				{"YDim", YDim},
				{"WallThickness", WallThickness},
				{"InnerFilletRadius", InnerFilletRadius},
				{"OuterFilletRadius", OuterFilletRadius}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31},
				{"is_WR32", is_WR32},
				{"is_WR33", is_WR33}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _WallThickness
		{
			get
			{
				return WallThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					WallThickness = val;
				}
				else if(value == null)
				{
					WallThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _InnerFilletRadius
		{
			get
			{
				return InnerFilletRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					InnerFilletRadius = val;
				}
				else if(value == null)
				{
					InnerFilletRadius = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _OuterFilletRadius
		{
			get
			{
				return OuterFilletRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					OuterFilletRadius = val;
				}
				else if(value == null)
				{
					OuterFilletRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRectangleProfileDef
	/// SUPERTYPE OF (ONEOF
	/// (IfcRectangleHollowProfileDef
	/// ,IfcRoundedRectangleProfileDef))
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// XDim : IfcPositiveLengthMeasure;
	/// YDim : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCRectangleProfileDef : IFCParameterizedProfileDef, Global.IFCRectangleProfileDef
	{
		public virtual IFCPositiveLengthMeasure? XDim { get; set; }
		public virtual IFCPositiveLengthMeasure? YDim { get; set; }
		public IFCRectangleProfileDef() : base()
		{
		}
		public IFCRectangleProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? XDim, IFCPositiveLengthMeasure? YDim) : base (ProfileType, ProfileName, Position)
		{
			this.XDim = XDim;
			this.YDim = YDim;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"XDim", XDim},
				{"YDim", YDim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _XDim
		{
			get
			{
				return XDim;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					XDim = val;
				}
				else if(value == null)
				{
					XDim = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _YDim
		{
			get
			{
				return YDim;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					YDim = val;
				}
				else if(value == null)
				{
					YDim = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRectangularPyramid
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// XLength : IfcPositiveLengthMeasure;
	/// YLength : IfcPositiveLengthMeasure;
	/// Height : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCRectangularPyramid : IFCCsgPrimitive3D, Global.IFCRectangularPyramid
	{
		public virtual IFCPositiveLengthMeasure? XLength { get; set; }
		public virtual IFCPositiveLengthMeasure? YLength { get; set; }
		public virtual IFCPositiveLengthMeasure? Height { get; set; }
		public IFCRectangularPyramid() : base()
		{
		}
		public IFCRectangularPyramid(IFCAxis2Placement3D? Position, IFCPositiveLengthMeasure? XLength, IFCPositiveLengthMeasure? YLength, IFCPositiveLengthMeasure? Height) : base (Position)
		{
			this.XLength = XLength;
			this.YLength = YLength;
			this.Height = Height;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Position", Position},
				{"XLength", XLength},
				{"YLength", YLength},
				{"Height", Height}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _XLength
		{
			get
			{
				return XLength;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					XLength = val;
				}
				else if(value == null)
				{
					XLength = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _YLength
		{
			get
			{
				return YLength;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					YLength = val;
				}
				else if(value == null)
				{
					YLength = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Height
		{
			get
			{
				return Height;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Height = val;
				}
				else if(value == null)
				{
					Height = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRectangularTrimmedSurface
	/// SUBTYPE OF (IfcBoundedSurface);
	/// BasisSurface : IfcSurface;
	/// U1 : IfcParameterValue;
	/// V1 : IfcParameterValue;
	/// U2 : IfcParameterValue;
	/// V2 : IfcParameterValue;
	/// Usense : BOOLEAN;
	/// Vsense : BOOLEAN;
	/// DERIVE
	/// Dim : IfcDimensionCount := BasisSurface.Dim;
	/// WHERE
	/// WR1 : U1 <> U2;
	/// WR2 : V1 <> V2;
	/// WR3 : (('IFC2X3.IFCELEMENTARYSURFACE' IN TYPEOF(BasisSurface)) AND
	/// (NOT ('IFC2X3.IFCPLANE' IN TYPEOF(BasisSurface)))) OR
	/// ('IFC2X3.IFCSURFACEOFREVOLUTION' IN TYPEOF(BasisSurface)) OR
	/// (Usense = (U2 > U1));
	/// WR4 : Vsense = (V2 > V1);
	/// END_ENTITY;
	/// <summary>
	public class IFCRectangularTrimmedSurface : IFCBoundedSurface, Global.IFCRectangularTrimmedSurface
	{
		public virtual IFCSurface? BasisSurface { get; set; }
		public virtual IFCParameterValue? U1 { get; set; }
		public virtual IFCParameterValue? V1 { get; set; }
		public virtual IFCParameterValue? U2 { get; set; }
		public virtual IFCParameterValue? V2 { get; set; }
		public virtual BOOLEAN? Usense { get; set; }
		public virtual BOOLEAN? Vsense { get; set; }
		public override IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCRectangularTrimmedSurface.Dim
				// BasisSurface.Dim;
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR4
		{
			get
			{
				return true;
			}
		}
		public IFCRectangularTrimmedSurface() : base()
		{
		}
		public IFCRectangularTrimmedSurface(IFCSurface? BasisSurface, IFCParameterValue? U1, IFCParameterValue? V1, IFCParameterValue? U2, IFCParameterValue? V2, BOOLEAN? Usense, BOOLEAN? Vsense) : base ()
		{
			this.BasisSurface = BasisSurface;
			this.U1 = U1;
			this.V1 = V1;
			this.U2 = U2;
			this.V2 = V2;
			this.Usense = Usense;
			this.Vsense = Vsense;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"BasisSurface", BasisSurface},
				{"U1", U1},
				{"V1", V1},
				{"U2", U2},
				{"V2", V2},
				{"Usense", Usense},
				{"Vsense", Vsense}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3},
				{"is_WR4", is_WR4}
			};
		}
		public virtual Global.IFCSurface? _BasisSurface
		{
			get
			{
				return BasisSurface;
			}
			set
			{
				if(value is IFCSurface val)
				{
					BasisSurface = val;
				}
				else if(value == null)
				{
					BasisSurface = null;
				}
			}
		}
		public virtual Global.IFCParameterValue? _U1
		{
			get
			{
				return U1;
			}
			set
			{
				if(value is IFCParameterValue val)
				{
					U1 = val;
				}
				else if(value == null)
				{
					U1 = null;
				}
			}
		}
		public virtual Global.IFCParameterValue? _V1
		{
			get
			{
				return V1;
			}
			set
			{
				if(value is IFCParameterValue val)
				{
					V1 = val;
				}
				else if(value == null)
				{
					V1 = null;
				}
			}
		}
		public virtual Global.IFCParameterValue? _U2
		{
			get
			{
				return U2;
			}
			set
			{
				if(value is IFCParameterValue val)
				{
					U2 = val;
				}
				else if(value == null)
				{
					U2 = null;
				}
			}
		}
		public virtual Global.IFCParameterValue? _V2
		{
			get
			{
				return V2;
			}
			set
			{
				if(value is IFCParameterValue val)
				{
					V2 = val;
				}
				else if(value == null)
				{
					V2 = null;
				}
			}
		}
		public virtual BOOLEAN? _Usense
		{
			get
			{
				return Usense;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					Usense = val;
				}
				else if(value == null)
				{
					Usense = null;
				}
			}
		}
		public virtual BOOLEAN? _Vsense
		{
			get
			{
				return Vsense;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					Vsense = val;
				}
				else if(value == null)
				{
					Vsense = null;
				}
			}
		}
		public override Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReferencesValueDocument;
	/// ReferencedDocument : IfcDocumentSelect;
	/// ReferencingValues : SET [1:?] OF IfcAppliedValue;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IFCReferencesValueDocument : IFC_ClassEntity, Global.IFCReferencesValueDocument
	{
		public virtual IFCDocumentSelect? ReferencedDocument { get; set; }
		public virtual IFC_Attributes<IFCAppliedValue>? ReferencingValues { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public IFCReferencesValueDocument() : base()
		{
		}
		public IFCReferencesValueDocument(IFCDocumentSelect? ReferencedDocument, IFC_Attributes<IFCAppliedValue>? ReferencingValues, IFCLabel? Name, IFCText? Description) : base ()
		{
			this.ReferencedDocument = ReferencedDocument;
			this.ReferencingValues = ReferencingValues;
			this.Name = Name;
			this.Description = Description;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ReferencedDocument", ReferencedDocument},
				{"ReferencingValues", ReferencingValues},
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCDocumentSelect? _ReferencedDocument
		{
			get
			{
				return ReferencedDocument;
			}
			set
			{
				if(value is IFCDocumentSelect val)
				{
					ReferencedDocument = val;
				}
				else if(value == null)
				{
					ReferencedDocument = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCAppliedValue>? _ReferencingValues
		{
			get
			{
				if(ReferencingValues != null)
				{
					IFC_Attributes<Global.IFCAppliedValue>? items = new IFC_Attributes<Global.IFCAppliedValue>();
					foreach (IFCAppliedValue item in ReferencingValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ReferencingValues = null;
				}
				else
				{
					ReferencingValues = new IFC_Attributes<IFCAppliedValue>();
					foreach(var val in value)
					{
						if(val is IFCAppliedValue v)
						{
							ReferencingValues.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRegularTimeSeries
	/// SUBTYPE OF (IfcTimeSeries);
	/// TimeStep : IfcTimeMeasure;
	/// Values : LIST [1:?] OF IfcTimeSeriesValue;
	/// END_ENTITY;
	/// <summary>
	public class IFCRegularTimeSeries : IFCTimeSeries, Global.IFCRegularTimeSeries
	{
		public virtual IFCTimeMeasure? TimeStep { get; set; }
		public virtual IFC_Attributes<IFCTimeSeriesValue>? Values { get; set; }
		public IFCRegularTimeSeries() : base()
		{
		}
		public IFCRegularTimeSeries(IFCLabel? Name, IFCText? Description, IFCDateTimeSelect? StartTime, IFCDateTimeSelect? EndTime, IFCTimeSeriesDataTypeEnum? TimeSeriesDataType, IFCDataOriginEnum? DataOrigin, IFCLabel? UserDefinedDataOrigin, IFCUnit? Unit, IFCTimeMeasure? TimeStep, IFC_Attributes<IFCTimeSeriesValue>? Values) : base (Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit)
		{
			this.TimeStep = TimeStep;
			this.Values = Values;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"StartTime", StartTime},
				{"EndTime", EndTime},
				{"TimeSeriesDataType", TimeSeriesDataType},
				{"DataOrigin", DataOrigin},
				{"UserDefinedDataOrigin", UserDefinedDataOrigin},
				{"Unit", Unit},
				{"TimeStep", TimeStep},
				{"Values", Values}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"DocumentedBy", DocumentedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCTimeMeasure? _TimeStep
		{
			get
			{
				return TimeStep;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					TimeStep = val;
				}
				else if(value == null)
				{
					TimeStep = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCTimeSeriesValue>? _Values
		{
			get
			{
				if(Values != null)
				{
					IFC_Attributes<Global.IFCTimeSeriesValue>? items = new IFC_Attributes<Global.IFCTimeSeriesValue>();
					foreach (IFCTimeSeriesValue item in Values)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Values = null;
				}
				else
				{
					Values = new IFC_Attributes<IFCTimeSeriesValue>();
					foreach(var val in value)
					{
						if(val is IFCTimeSeriesValue v)
						{
							Values.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcementBarProperties;
	/// TotalCrossSectionArea : IfcAreaMeasure;
	/// SteelGrade : IfcLabel;
	/// BarSurface : OPTIONAL IfcReinforcingBarSurfaceEnum;
	/// EffectiveDepth : OPTIONAL IfcLengthMeasure;
	/// NominalBarDiameter : OPTIONAL IfcPositiveLengthMeasure;
	/// BarCount : OPTIONAL IfcCountMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCReinforcementBarProperties : IFC_ClassEntity, Global.IFCReinforcementBarProperties
	{
		public virtual IFCAreaMeasure? TotalCrossSectionArea { get; set; }
		public virtual IFCLabel? SteelGrade { get; set; }
		public virtual IFCReinforcingBarSurfaceEnum? BarSurface { get; set; }
		public virtual IFCLengthMeasure? EffectiveDepth { get; set; }
		public virtual IFCPositiveLengthMeasure? NominalBarDiameter { get; set; }
		public virtual IFCCountMeasure? BarCount { get; set; }
		public IFCReinforcementBarProperties() : base()
		{
		}
		public IFCReinforcementBarProperties(IFCAreaMeasure? TotalCrossSectionArea, IFCLabel? SteelGrade, IFCReinforcingBarSurfaceEnum? BarSurface, IFCLengthMeasure? EffectiveDepth, IFCPositiveLengthMeasure? NominalBarDiameter, IFCCountMeasure? BarCount) : base ()
		{
			this.TotalCrossSectionArea = TotalCrossSectionArea;
			this.SteelGrade = SteelGrade;
			this.BarSurface = BarSurface;
			this.EffectiveDepth = EffectiveDepth;
			this.NominalBarDiameter = NominalBarDiameter;
			this.BarCount = BarCount;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"TotalCrossSectionArea", TotalCrossSectionArea},
				{"SteelGrade", SteelGrade},
				{"BarSurface", BarSurface},
				{"EffectiveDepth", EffectiveDepth},
				{"NominalBarDiameter", NominalBarDiameter},
				{"BarCount", BarCount}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCAreaMeasure? _TotalCrossSectionArea
		{
			get
			{
				return TotalCrossSectionArea;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					TotalCrossSectionArea = val;
				}
				else if(value == null)
				{
					TotalCrossSectionArea = null;
				}
			}
		}
		public virtual Global.IFCLabel? _SteelGrade
		{
			get
			{
				return SteelGrade;
			}
			set
			{
				if(value is IFCLabel val)
				{
					SteelGrade = val;
				}
				else if(value == null)
				{
					SteelGrade = null;
				}
			}
		}
		public virtual Global.IFCReinforcingBarSurfaceEnum? _BarSurface
		{
			get
			{
				return BarSurface;
			}
			set
			{
				if(value is IFCReinforcingBarSurfaceEnum val)
				{
					BarSurface = val;
				}
				else if(value == null)
				{
					BarSurface = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _EffectiveDepth
		{
			get
			{
				return EffectiveDepth;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					EffectiveDepth = val;
				}
				else if(value == null)
				{
					EffectiveDepth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _NominalBarDiameter
		{
			get
			{
				return NominalBarDiameter;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					NominalBarDiameter = val;
				}
				else if(value == null)
				{
					NominalBarDiameter = null;
				}
			}
		}
		public virtual Global.IFCCountMeasure? _BarCount
		{
			get
			{
				return BarCount;
			}
			set
			{
				if(value is IFCCountMeasure val)
				{
					BarCount = val;
				}
				else if(value == null)
				{
					BarCount = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcementDefinitionProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// DefinitionType : OPTIONAL IfcLabel;
	/// ReinforcementSectionDefinitions : LIST [1:?] OF IfcSectionReinforcementProperties;
	/// END_ENTITY;
	/// <summary>
	public class IFCReinforcementDefinitionProperties : IFCPropertySetDefinition, Global.IFCReinforcementDefinitionProperties
	{
		public virtual IFCLabel? DefinitionType { get; set; }
		public virtual IFC_Attributes<IFCSectionReinforcementProperties>? ReinforcementSectionDefinitions { get; set; }
		public IFCReinforcementDefinitionProperties() : base()
		{
		}
		public IFCReinforcementDefinitionProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? DefinitionType, IFC_Attributes<IFCSectionReinforcementProperties>? ReinforcementSectionDefinitions) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.DefinitionType = DefinitionType;
			this.ReinforcementSectionDefinitions = ReinforcementSectionDefinitions;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"DefinitionType", DefinitionType},
				{"ReinforcementSectionDefinitions", ReinforcementSectionDefinitions}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _DefinitionType
		{
			get
			{
				return DefinitionType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					DefinitionType = val;
				}
				else if(value == null)
				{
					DefinitionType = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCSectionReinforcementProperties>? _ReinforcementSectionDefinitions
		{
			get
			{
				if(ReinforcementSectionDefinitions != null)
				{
					IFC_Attributes<Global.IFCSectionReinforcementProperties>? items = new IFC_Attributes<Global.IFCSectionReinforcementProperties>();
					foreach (IFCSectionReinforcementProperties item in ReinforcementSectionDefinitions)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ReinforcementSectionDefinitions = null;
				}
				else
				{
					ReinforcementSectionDefinitions = new IFC_Attributes<IFCSectionReinforcementProperties>();
					foreach(var val in value)
					{
						if(val is IFCSectionReinforcementProperties v)
						{
							ReinforcementSectionDefinitions.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcingBar
	/// SUBTYPE OF (IfcReinforcingElement);
	/// NominalDiameter : IfcPositiveLengthMeasure;
	/// CrossSectionArea : IfcAreaMeasure;
	/// BarLength : OPTIONAL IfcPositiveLengthMeasure;
	/// BarRole : IfcReinforcingBarRoleEnum;
	/// BarSurface : OPTIONAL IfcReinforcingBarSurfaceEnum;
	/// WHERE
	/// WR1 : (BarRole <> IfcReinforcingBarRoleEnum.USERDEFINED) OR ((BarRole = IfcReinforcingBarRoleEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IFCReinforcingBar : IFCReinforcingElement, Global.IFCReinforcingBar
	{
		public virtual IFCPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IFCAreaMeasure? CrossSectionArea { get; set; }
		public virtual IFCPositiveLengthMeasure? BarLength { get; set; }
		public virtual IFCReinforcingBarRoleEnum? BarRole { get; set; }
		public virtual IFCReinforcingBarSurfaceEnum? BarSurface { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCReinforcingBar() : base()
		{
		}
		public IFCReinforcingBar(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCLabel? SteelGrade, IFCPositiveLengthMeasure? NominalDiameter, IFCAreaMeasure? CrossSectionArea, IFCPositiveLengthMeasure? BarLength, IFCReinforcingBarRoleEnum? BarRole, IFCReinforcingBarSurfaceEnum? BarSurface) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.BarLength = BarLength;
			this.BarRole = BarRole;
			this.BarSurface = BarSurface;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"SteelGrade", SteelGrade},
				{"NominalDiameter", NominalDiameter},
				{"CrossSectionArea", CrossSectionArea},
				{"BarLength", BarLength},
				{"BarRole", BarRole},
				{"BarSurface", BarSurface}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _NominalDiameter
		{
			get
			{
				return NominalDiameter;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					NominalDiameter = val;
				}
				else if(value == null)
				{
					NominalDiameter = null;
				}
			}
		}
		public virtual Global.IFCAreaMeasure? _CrossSectionArea
		{
			get
			{
				return CrossSectionArea;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					CrossSectionArea = val;
				}
				else if(value == null)
				{
					CrossSectionArea = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _BarLength
		{
			get
			{
				return BarLength;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BarLength = val;
				}
				else if(value == null)
				{
					BarLength = null;
				}
			}
		}
		public virtual Global.IFCReinforcingBarRoleEnum? _BarRole
		{
			get
			{
				return BarRole;
			}
			set
			{
				if(value is IFCReinforcingBarRoleEnum val)
				{
					BarRole = val;
				}
				else if(value == null)
				{
					BarRole = null;
				}
			}
		}
		public virtual Global.IFCReinforcingBarSurfaceEnum? _BarSurface
		{
			get
			{
				return BarSurface;
			}
			set
			{
				if(value is IFCReinforcingBarSurfaceEnum val)
				{
					BarSurface = val;
				}
				else if(value == null)
				{
					BarSurface = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcingElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcReinforcingBar
	/// ,IfcReinforcingMesh
	/// ,IfcTendon
	/// ,IfcTendonAnchor))
	/// SUBTYPE OF (IfcBuildingElementComponent);
	/// SteelGrade : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCReinforcingElement : IFCBuildingElementComponent, Global.IFCReinforcingElement
	{
		public virtual IFCLabel? SteelGrade { get; set; }
		public IFCReinforcingElement() : base()
		{
		}
		public IFCReinforcingElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCLabel? SteelGrade) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.SteelGrade = SteelGrade;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"SteelGrade", SteelGrade}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _SteelGrade
		{
			get
			{
				return SteelGrade;
			}
			set
			{
				if(value is IFCLabel val)
				{
					SteelGrade = val;
				}
				else if(value == null)
				{
					SteelGrade = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcReinforcingMesh
	/// SUBTYPE OF (IfcReinforcingElement);
	/// MeshLength : OPTIONAL IfcPositiveLengthMeasure;
	/// MeshWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// LongitudinalBarNominalDiameter : IfcPositiveLengthMeasure;
	/// TransverseBarNominalDiameter : IfcPositiveLengthMeasure;
	/// LongitudinalBarCrossSectionArea : IfcAreaMeasure;
	/// TransverseBarCrossSectionArea : IfcAreaMeasure;
	/// LongitudinalBarSpacing : IfcPositiveLengthMeasure;
	/// TransverseBarSpacing : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCReinforcingMesh : IFCReinforcingElement, Global.IFCReinforcingMesh
	{
		public virtual IFCPositiveLengthMeasure? MeshLength { get; set; }
		public virtual IFCPositiveLengthMeasure? MeshWidth { get; set; }
		public virtual IFCPositiveLengthMeasure? LongitudinalBarNominalDiameter { get; set; }
		public virtual IFCPositiveLengthMeasure? TransverseBarNominalDiameter { get; set; }
		public virtual IFCAreaMeasure? LongitudinalBarCrossSectionArea { get; set; }
		public virtual IFCAreaMeasure? TransverseBarCrossSectionArea { get; set; }
		public virtual IFCPositiveLengthMeasure? LongitudinalBarSpacing { get; set; }
		public virtual IFCPositiveLengthMeasure? TransverseBarSpacing { get; set; }
		public IFCReinforcingMesh() : base()
		{
		}
		public IFCReinforcingMesh(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCLabel? SteelGrade, IFCPositiveLengthMeasure? MeshLength, IFCPositiveLengthMeasure? MeshWidth, IFCPositiveLengthMeasure? LongitudinalBarNominalDiameter, IFCPositiveLengthMeasure? TransverseBarNominalDiameter, IFCAreaMeasure? LongitudinalBarCrossSectionArea, IFCAreaMeasure? TransverseBarCrossSectionArea, IFCPositiveLengthMeasure? LongitudinalBarSpacing, IFCPositiveLengthMeasure? TransverseBarSpacing) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
			this.MeshLength = MeshLength;
			this.MeshWidth = MeshWidth;
			this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
			this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
			this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
			this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
			this.LongitudinalBarSpacing = LongitudinalBarSpacing;
			this.TransverseBarSpacing = TransverseBarSpacing;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"SteelGrade", SteelGrade},
				{"MeshLength", MeshLength},
				{"MeshWidth", MeshWidth},
				{"LongitudinalBarNominalDiameter", LongitudinalBarNominalDiameter},
				{"TransverseBarNominalDiameter", TransverseBarNominalDiameter},
				{"LongitudinalBarCrossSectionArea", LongitudinalBarCrossSectionArea},
				{"TransverseBarCrossSectionArea", TransverseBarCrossSectionArea},
				{"LongitudinalBarSpacing", LongitudinalBarSpacing},
				{"TransverseBarSpacing", TransverseBarSpacing}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _MeshLength
		{
			get
			{
				return MeshLength;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					MeshLength = val;
				}
				else if(value == null)
				{
					MeshLength = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _MeshWidth
		{
			get
			{
				return MeshWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					MeshWidth = val;
				}
				else if(value == null)
				{
					MeshWidth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _LongitudinalBarNominalDiameter
		{
			get
			{
				return LongitudinalBarNominalDiameter;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					LongitudinalBarNominalDiameter = val;
				}
				else if(value == null)
				{
					LongitudinalBarNominalDiameter = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _TransverseBarNominalDiameter
		{
			get
			{
				return TransverseBarNominalDiameter;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					TransverseBarNominalDiameter = val;
				}
				else if(value == null)
				{
					TransverseBarNominalDiameter = null;
				}
			}
		}
		public virtual Global.IFCAreaMeasure? _LongitudinalBarCrossSectionArea
		{
			get
			{
				return LongitudinalBarCrossSectionArea;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					LongitudinalBarCrossSectionArea = val;
				}
				else if(value == null)
				{
					LongitudinalBarCrossSectionArea = null;
				}
			}
		}
		public virtual Global.IFCAreaMeasure? _TransverseBarCrossSectionArea
		{
			get
			{
				return TransverseBarCrossSectionArea;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					TransverseBarCrossSectionArea = val;
				}
				else if(value == null)
				{
					TransverseBarCrossSectionArea = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _LongitudinalBarSpacing
		{
			get
			{
				return LongitudinalBarSpacing;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					LongitudinalBarSpacing = val;
				}
				else if(value == null)
				{
					LongitudinalBarSpacing = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _TransverseBarSpacing
		{
			get
			{
				return TransverseBarSpacing;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					TransverseBarSpacing = val;
				}
				else if(value == null)
				{
					TransverseBarSpacing = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAggregates
	/// SUBTYPE OF (IfcRelDecomposes);
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAggregates : IFCRelDecomposes, Global.IFCRelAggregates
	{
		public IFCRelAggregates() : base()
		{
		}
		public IFCRelAggregates(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCObjectDefinition? RelatingObject, IFC_Attributes<IFCObjectDefinition>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description, RelatingObject, RelatedObjects)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingObject", RelatingObject},
				{"RelatedObjects", RelatedObjects}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssigns
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelAssignsToActor
	/// ,IfcRelAssignsToControl
	/// ,IfcRelAssignsToGroup
	/// ,IfcRelAssignsToProcess
	/// ,IfcRelAssignsToProduct
	/// ,IfcRelAssignsToResource))
	/// SUBTYPE OF (IfcRelationship);
	/// RelatedObjects : SET [1:?] OF IfcObjectDefinition;
	/// RelatedObjectsType : OPTIONAL IfcObjectTypeEnum;
	/// WHERE
	/// WR1 : IfcCorrectObjectAssignment(RelatedObjectsType, RelatedObjects);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCRelAssigns : IFCRelationship, Global.IFCRelAssigns
	{
		public virtual IFC_Attributes<IFCObjectDefinition>? RelatedObjects { get; set; }
		public virtual IFCObjectTypeEnum? RelatedObjectsType { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRelAssigns() : base()
		{
		}
		public IFCRelAssigns(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObjectDefinition>? RelatedObjects, IFCObjectTypeEnum? RelatedObjectsType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedObjects = RelatedObjects;
			this.RelatedObjectsType = RelatedObjectsType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatedObjectsType", RelatedObjectsType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCObjectDefinition>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					IFC_Attributes<Global.IFCObjectDefinition>? items = new IFC_Attributes<Global.IFCObjectDefinition>();
					foreach (IFCObjectDefinition item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedObjects = null;
				}
				else
				{
					RelatedObjects = new IFC_Attributes<IFCObjectDefinition>();
					foreach(var val in value)
					{
						if(val is IFCObjectDefinition v)
						{
							RelatedObjects.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCObjectTypeEnum? _RelatedObjectsType
		{
			get
			{
				return RelatedObjectsType;
			}
			set
			{
				if(value is IFCObjectTypeEnum val)
				{
					RelatedObjectsType = val;
				}
				else if(value == null)
				{
					RelatedObjectsType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsTasks
	/// SUBTYPE OF (IfcRelAssignsToControl);
	/// TimeForTask : OPTIONAL IfcScheduleTimeControl;
	/// WHERE
	/// WR1 : HIINDEX(SELF\IfcRelAssigns.RelatedObjects) = 1;
	/// WR2 : 'IFC2X3.IFCTASK' IN TYPEOF(SELF\IfcRelAssigns.RelatedObjects[1]);
	/// WR3 : 'IFC2X3.IFCWORKCONTROL' IN TYPEOF(SELF\IfcRelAssignsToControl.RelatingControl);
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssignsTasks : IFCRelAssignsToControl, Global.IFCRelAssignsTasks
	{
		public virtual IFCScheduleTimeControl? TimeForTask { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCRelAssignsTasks() : base()
		{
		}
		public IFCRelAssignsTasks(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObjectDefinition>? RelatedObjects, IFCObjectTypeEnum? RelatedObjectsType, IFCControl? RelatingControl, IFCScheduleTimeControl? TimeForTask) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingControl)
		{
			this.TimeForTask = TimeForTask;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatedObjectsType", RelatedObjectsType},
				{"RelatingControl", RelatingControl},
				{"TimeForTask", TimeForTask}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual Global.IFCScheduleTimeControl? _TimeForTask
		{
			get
			{
				return TimeForTask;
			}
			set
			{
				if(value is IFCScheduleTimeControl val)
				{
					TimeForTask = val;
				}
				else if(value == null)
				{
					TimeForTask = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToActor
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelOccupiesSpaces))
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingActor : IfcActor;
	/// ActingRole : OPTIONAL IfcActorRole;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingActor :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssignsToActor : IFCRelAssigns, Global.IFCRelAssignsToActor
	{
		public virtual IFCActor? RelatingActor { get; set; }
		public virtual IFCActorRole? ActingRole { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRelAssignsToActor() : base()
		{
		}
		public IFCRelAssignsToActor(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObjectDefinition>? RelatedObjects, IFCObjectTypeEnum? RelatedObjectsType, IFCActor? RelatingActor, IFCActorRole? ActingRole) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingActor = RelatingActor;
			this.ActingRole = ActingRole;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatedObjectsType", RelatedObjectsType},
				{"RelatingActor", RelatingActor},
				{"ActingRole", ActingRole}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCActor? _RelatingActor
		{
			get
			{
				return RelatingActor;
			}
			set
			{
				if(value is IFCActor val)
				{
					RelatingActor = val;
				}
				else if(value == null)
				{
					RelatingActor = null;
				}
			}
		}
		public virtual Global.IFCActorRole? _ActingRole
		{
			get
			{
				return ActingRole;
			}
			set
			{
				if(value is IFCActorRole val)
				{
					ActingRole = val;
				}
				else if(value == null)
				{
					ActingRole = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToControl
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelAssignsTasks
	/// ,IfcRelAssignsToProjectOrder
	/// ,IfcRelSchedulesCostItems))
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingControl : IfcControl;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingControl :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssignsToControl : IFCRelAssigns, Global.IFCRelAssignsToControl
	{
		public virtual IFCControl? RelatingControl { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRelAssignsToControl() : base()
		{
		}
		public IFCRelAssignsToControl(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObjectDefinition>? RelatedObjects, IFCObjectTypeEnum? RelatedObjectsType, IFCControl? RelatingControl) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingControl = RelatingControl;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatedObjectsType", RelatedObjectsType},
				{"RelatingControl", RelatingControl}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCControl? _RelatingControl
		{
			get
			{
				return RelatingControl;
			}
			set
			{
				if(value is IFCControl val)
				{
					RelatingControl = val;
				}
				else if(value == null)
				{
					RelatingControl = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToGroup
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingGroup : IfcGroup;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingGroup :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssignsToGroup : IFCRelAssigns, Global.IFCRelAssignsToGroup
	{
		public virtual IFCGroup? RelatingGroup { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRelAssignsToGroup() : base()
		{
		}
		public IFCRelAssignsToGroup(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObjectDefinition>? RelatedObjects, IFCObjectTypeEnum? RelatedObjectsType, IFCGroup? RelatingGroup) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingGroup = RelatingGroup;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatedObjectsType", RelatedObjectsType},
				{"RelatingGroup", RelatingGroup}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCGroup? _RelatingGroup
		{
			get
			{
				return RelatingGroup;
			}
			set
			{
				if(value is IFCGroup val)
				{
					RelatingGroup = val;
				}
				else if(value == null)
				{
					RelatingGroup = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToProcess
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingProcess : IfcProcess;
	/// QuantityInProcess : OPTIONAL IfcMeasureWithUnit;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingProcess :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssignsToProcess : IFCRelAssigns, Global.IFCRelAssignsToProcess
	{
		public virtual IFCProcess? RelatingProcess { get; set; }
		public virtual IFCMeasureWithUnit? QuantityInProcess { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRelAssignsToProcess() : base()
		{
		}
		public IFCRelAssignsToProcess(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObjectDefinition>? RelatedObjects, IFCObjectTypeEnum? RelatedObjectsType, IFCProcess? RelatingProcess, IFCMeasureWithUnit? QuantityInProcess) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingProcess = RelatingProcess;
			this.QuantityInProcess = QuantityInProcess;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatedObjectsType", RelatedObjectsType},
				{"RelatingProcess", RelatingProcess},
				{"QuantityInProcess", QuantityInProcess}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCProcess? _RelatingProcess
		{
			get
			{
				return RelatingProcess;
			}
			set
			{
				if(value is IFCProcess val)
				{
					RelatingProcess = val;
				}
				else if(value == null)
				{
					RelatingProcess = null;
				}
			}
		}
		public virtual Global.IFCMeasureWithUnit? _QuantityInProcess
		{
			get
			{
				return QuantityInProcess;
			}
			set
			{
				if(value is IFCMeasureWithUnit val)
				{
					QuantityInProcess = val;
				}
				else if(value == null)
				{
					QuantityInProcess = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToProduct
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingProduct : IfcProduct;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingProduct :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssignsToProduct : IFCRelAssigns, Global.IFCRelAssignsToProduct
	{
		public virtual IFCProduct? RelatingProduct { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRelAssignsToProduct() : base()
		{
		}
		public IFCRelAssignsToProduct(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObjectDefinition>? RelatedObjects, IFCObjectTypeEnum? RelatedObjectsType, IFCProduct? RelatingProduct) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingProduct = RelatingProduct;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatedObjectsType", RelatedObjectsType},
				{"RelatingProduct", RelatingProduct}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCProduct? _RelatingProduct
		{
			get
			{
				return RelatingProduct;
			}
			set
			{
				if(value is IFCProduct val)
				{
					RelatingProduct = val;
				}
				else if(value == null)
				{
					RelatingProduct = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToProjectOrder
	/// SUBTYPE OF (IfcRelAssignsToControl);
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssignsToProjectOrder : IFCRelAssignsToControl, Global.IFCRelAssignsToProjectOrder
	{
		public IFCRelAssignsToProjectOrder() : base()
		{
		}
		public IFCRelAssignsToProjectOrder(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObjectDefinition>? RelatedObjects, IFCObjectTypeEnum? RelatedObjectsType, IFCControl? RelatingControl) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingControl)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatedObjectsType", RelatedObjectsType},
				{"RelatingControl", RelatingControl}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssignsToResource
	/// SUBTYPE OF (IfcRelAssigns);
	/// RelatingResource : IfcResource;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingResource :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssignsToResource : IFCRelAssigns, Global.IFCRelAssignsToResource
	{
		public virtual IFCResource? RelatingResource { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRelAssignsToResource() : base()
		{
		}
		public IFCRelAssignsToResource(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObjectDefinition>? RelatedObjects, IFCObjectTypeEnum? RelatedObjectsType, IFCResource? RelatingResource) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType)
		{
			this.RelatingResource = RelatingResource;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatedObjectsType", RelatedObjectsType},
				{"RelatingResource", RelatingResource}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCResource? _RelatingResource
		{
			get
			{
				return RelatingResource;
			}
			set
			{
				if(value is IFCResource val)
				{
					RelatingResource = val;
				}
				else if(value == null)
				{
					RelatingResource = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociates
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelAssociatesAppliedValue
	/// ,IfcRelAssociatesApproval
	/// ,IfcRelAssociatesClassification
	/// ,IfcRelAssociatesConstraint
	/// ,IfcRelAssociatesDocument
	/// ,IfcRelAssociatesLibrary
	/// ,IfcRelAssociatesMaterial
	/// ,IfcRelAssociatesProfileProperties))
	/// SUBTYPE OF (IfcRelationship);
	/// RelatedObjects : SET [1:?] OF IfcRoot;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* RelatedObjects |
	/// NOT(('IFC2X3.IFCOBJECTDEFINITION' IN TYPEOF(temp))
	/// OR ('IFC2X3.IFCPROPERTYDEFINITION' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssociates : IFCRelationship, Global.IFCRelAssociates
	{
		public virtual IFC_Attributes<IFCRoot>? RelatedObjects { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public IFCRelAssociates() : base()
		{
		}
		public IFCRelAssociates(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRoot>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedObjects = RelatedObjects;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual IFC_Attributes<Global.IFCRoot>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					IFC_Attributes<Global.IFCRoot>? items = new IFC_Attributes<Global.IFCRoot>();
					foreach (IFCRoot item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedObjects = null;
				}
				else
				{
					RelatedObjects = new IFC_Attributes<IFCRoot>();
					foreach(var val in value)
					{
						if(val is IFCRoot v)
						{
							RelatedObjects.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesAppliedValue
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingAppliedValue : IfcAppliedValue;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssociatesAppliedValue : IFCRelAssociates, Global.IFCRelAssociatesAppliedValue
	{
		public virtual IFCAppliedValue? RelatingAppliedValue { get; set; }
		public IFCRelAssociatesAppliedValue() : base()
		{
		}
		public IFCRelAssociatesAppliedValue(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRoot>? RelatedObjects, IFCAppliedValue? RelatingAppliedValue) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingAppliedValue = RelatingAppliedValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatingAppliedValue", RelatingAppliedValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCAppliedValue? _RelatingAppliedValue
		{
			get
			{
				return RelatingAppliedValue;
			}
			set
			{
				if(value is IFCAppliedValue val)
				{
					RelatingAppliedValue = val;
				}
				else if(value == null)
				{
					RelatingAppliedValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesApproval
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingApproval : IfcApproval;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssociatesApproval : IFCRelAssociates, Global.IFCRelAssociatesApproval
	{
		public virtual IFCApproval? RelatingApproval { get; set; }
		public IFCRelAssociatesApproval() : base()
		{
		}
		public IFCRelAssociatesApproval(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRoot>? RelatedObjects, IFCApproval? RelatingApproval) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingApproval = RelatingApproval;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatingApproval", RelatingApproval}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCApproval? _RelatingApproval
		{
			get
			{
				return RelatingApproval;
			}
			set
			{
				if(value is IFCApproval val)
				{
					RelatingApproval = val;
				}
				else if(value == null)
				{
					RelatingApproval = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesClassification
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingClassification : IfcClassificationNotationSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssociatesClassification : IFCRelAssociates, Global.IFCRelAssociatesClassification
	{
		public virtual IFCClassificationNotationSelect? RelatingClassification { get; set; }
		public IFCRelAssociatesClassification() : base()
		{
		}
		public IFCRelAssociatesClassification(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRoot>? RelatedObjects, IFCClassificationNotationSelect? RelatingClassification) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingClassification = RelatingClassification;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatingClassification", RelatingClassification}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCClassificationNotationSelect? _RelatingClassification
		{
			get
			{
				return RelatingClassification;
			}
			set
			{
				if(value is IFCClassificationNotationSelect val)
				{
					RelatingClassification = val;
				}
				else if(value == null)
				{
					RelatingClassification = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesConstraint
	/// SUBTYPE OF (IfcRelAssociates);
	/// Intent : IfcLabel;
	/// RelatingConstraint : IfcConstraint;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssociatesConstraint : IFCRelAssociates, Global.IFCRelAssociatesConstraint
	{
		public virtual IFCLabel? Intent { get; set; }
		public virtual IFCConstraint? RelatingConstraint { get; set; }
		public IFCRelAssociatesConstraint() : base()
		{
		}
		public IFCRelAssociatesConstraint(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRoot>? RelatedObjects, IFCLabel? Intent, IFCConstraint? RelatingConstraint) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.Intent = Intent;
			this.RelatingConstraint = RelatingConstraint;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"Intent", Intent},
				{"RelatingConstraint", RelatingConstraint}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCLabel? _Intent
		{
			get
			{
				return Intent;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Intent = val;
				}
				else if(value == null)
				{
					Intent = null;
				}
			}
		}
		public virtual Global.IFCConstraint? _RelatingConstraint
		{
			get
			{
				return RelatingConstraint;
			}
			set
			{
				if(value is IFCConstraint val)
				{
					RelatingConstraint = val;
				}
				else if(value == null)
				{
					RelatingConstraint = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesDocument
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingDocument : IfcDocumentSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssociatesDocument : IFCRelAssociates, Global.IFCRelAssociatesDocument
	{
		public virtual IFCDocumentSelect? RelatingDocument { get; set; }
		public IFCRelAssociatesDocument() : base()
		{
		}
		public IFCRelAssociatesDocument(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRoot>? RelatedObjects, IFCDocumentSelect? RelatingDocument) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingDocument = RelatingDocument;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatingDocument", RelatingDocument}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCDocumentSelect? _RelatingDocument
		{
			get
			{
				return RelatingDocument;
			}
			set
			{
				if(value is IFCDocumentSelect val)
				{
					RelatingDocument = val;
				}
				else if(value == null)
				{
					RelatingDocument = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesLibrary
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingLibrary : IfcLibrarySelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssociatesLibrary : IFCRelAssociates, Global.IFCRelAssociatesLibrary
	{
		public virtual IFCLibrarySelect? RelatingLibrary { get; set; }
		public IFCRelAssociatesLibrary() : base()
		{
		}
		public IFCRelAssociatesLibrary(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRoot>? RelatedObjects, IFCLibrarySelect? RelatingLibrary) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingLibrary = RelatingLibrary;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatingLibrary", RelatingLibrary}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCLibrarySelect? _RelatingLibrary
		{
			get
			{
				return RelatingLibrary;
			}
			set
			{
				if(value is IFCLibrarySelect val)
				{
					RelatingLibrary = val;
				}
				else if(value == null)
				{
					RelatingLibrary = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesMaterial
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingMaterial : IfcMaterialSelect;
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* SELF\IfcRelAssociates.RelatedObjects |
	/// ('IFC2X3.IFCFEATUREELEMENTSUBTRACTION' IN TYPEOF(temp))
	/// OR ('IFC2X3.IFCVIRTUALELEMENT' IN TYPEOF(temp))
	/// )) = 0;
	/// WR22 : SIZEOF(QUERY(temp <* SELF\IfcRelAssociates.RelatedObjects |
	/// (NOT('IFC2X3.IFCPRODUCT' IN TYPEOF(temp))
	/// AND NOT('IFC2X3.IFCTYPEPRODUCT' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssociatesMaterial : IFCRelAssociates, Global.IFCRelAssociatesMaterial
	{
		public virtual IFCMaterialSelect? RelatingMaterial { get; set; }
		public override bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCRelAssociatesMaterial() : base()
		{
		}
		public IFCRelAssociatesMaterial(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRoot>? RelatedObjects, IFCMaterialSelect? RelatingMaterial) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingMaterial = RelatingMaterial;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatingMaterial", RelatingMaterial}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCMaterialSelect? _RelatingMaterial
		{
			get
			{
				return RelatingMaterial;
			}
			set
			{
				if(value is IFCMaterialSelect val)
				{
					RelatingMaterial = val;
				}
				else if(value == null)
				{
					RelatingMaterial = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelAssociatesProfileProperties
	/// SUBTYPE OF (IfcRelAssociates);
	/// RelatingProfileProperties : IfcProfileProperties;
	/// ProfileSectionLocation : OPTIONAL IfcShapeAspect;
	/// ProfileOrientation : OPTIONAL IfcOrientationSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelAssociatesProfileProperties : IFCRelAssociates, Global.IFCRelAssociatesProfileProperties
	{
		public virtual IFCProfileProperties? RelatingProfileProperties { get; set; }
		public virtual IFCShapeAspect? ProfileSectionLocation { get; set; }
		public virtual IFCOrientationSelect? ProfileOrientation { get; set; }
		public IFCRelAssociatesProfileProperties() : base()
		{
		}
		public IFCRelAssociatesProfileProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCRoot>? RelatedObjects, IFCProfileProperties? RelatingProfileProperties, IFCShapeAspect? ProfileSectionLocation, IFCOrientationSelect? ProfileOrientation) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingProfileProperties = RelatingProfileProperties;
			this.ProfileSectionLocation = ProfileSectionLocation;
			this.ProfileOrientation = ProfileOrientation;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatingProfileProperties", RelatingProfileProperties},
				{"ProfileSectionLocation", ProfileSectionLocation},
				{"ProfileOrientation", ProfileOrientation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCProfileProperties? _RelatingProfileProperties
		{
			get
			{
				return RelatingProfileProperties;
			}
			set
			{
				if(value is IFCProfileProperties val)
				{
					RelatingProfileProperties = val;
				}
				else if(value == null)
				{
					RelatingProfileProperties = null;
				}
			}
		}
		public virtual Global.IFCShapeAspect? _ProfileSectionLocation
		{
			get
			{
				return ProfileSectionLocation;
			}
			set
			{
				if(value is IFCShapeAspect val)
				{
					ProfileSectionLocation = val;
				}
				else if(value == null)
				{
					ProfileSectionLocation = null;
				}
			}
		}
		public virtual Global.IFCOrientationSelect? _ProfileOrientation
		{
			get
			{
				return ProfileOrientation;
			}
			set
			{
				if(value is IFCOrientationSelect val)
				{
					ProfileOrientation = val;
				}
				else if(value == null)
				{
					ProfileOrientation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnects
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelConnectsElements
	/// ,IfcRelConnectsPortToElement
	/// ,IfcRelConnectsPorts
	/// ,IfcRelConnectsStructuralActivity
	/// ,IfcRelConnectsStructuralElement
	/// ,IfcRelConnectsStructuralMember
	/// ,IfcRelContainedInSpatialStructure
	/// ,IfcRelCoversBldgElements
	/// ,IfcRelCoversSpaces
	/// ,IfcRelFillsElement
	/// ,IfcRelFlowControlElements
	/// ,IfcRelInteractionRequirements
	/// ,IfcRelProjectsElement
	/// ,IfcRelReferencedInSpatialStructure
	/// ,IfcRelSequence
	/// ,IfcRelServicesBuildings
	/// ,IfcRelSpaceBoundary
	/// ,IfcRelVoidsElement))
	/// SUBTYPE OF (IfcRelationship);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCRelConnects : IFCRelationship, Global.IFCRelConnects
	{
		public IFCRelConnects() : base()
		{
		}
		public IFCRelConnects(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsElements
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelConnectsPathElements
	/// ,IfcRelConnectsWithRealizingElements))
	/// SUBTYPE OF (IfcRelConnects);
	/// ConnectionGeometry : OPTIONAL IfcConnectionGeometry;
	/// RelatingElement : IfcElement;
	/// RelatedElement : IfcElement;
	/// WHERE
	/// WR31 : RelatingElement :<>: RelatedElement;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelConnectsElements : IFCRelConnects, Global.IFCRelConnectsElements
	{
		public virtual IFCConnectionGeometry? ConnectionGeometry { get; set; }
		public virtual IFCElement? RelatingElement { get; set; }
		public virtual IFCElement? RelatedElement { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCRelConnectsElements() : base()
		{
		}
		public IFCRelConnectsElements(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCConnectionGeometry? ConnectionGeometry, IFCElement? RelatingElement, IFCElement? RelatedElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ConnectionGeometry = ConnectionGeometry;
			this.RelatingElement = RelatingElement;
			this.RelatedElement = RelatedElement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ConnectionGeometry", ConnectionGeometry},
				{"RelatingElement", RelatingElement},
				{"RelatedElement", RelatedElement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual Global.IFCConnectionGeometry? _ConnectionGeometry
		{
			get
			{
				return ConnectionGeometry;
			}
			set
			{
				if(value is IFCConnectionGeometry val)
				{
					ConnectionGeometry = val;
				}
				else if(value == null)
				{
					ConnectionGeometry = null;
				}
			}
		}
		public virtual Global.IFCElement? _RelatingElement
		{
			get
			{
				return RelatingElement;
			}
			set
			{
				if(value is IFCElement val)
				{
					RelatingElement = val;
				}
				else if(value == null)
				{
					RelatingElement = null;
				}
			}
		}
		public virtual Global.IFCElement? _RelatedElement
		{
			get
			{
				return RelatedElement;
			}
			set
			{
				if(value is IFCElement val)
				{
					RelatedElement = val;
				}
				else if(value == null)
				{
					RelatedElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsPathElements
	/// SUBTYPE OF (IfcRelConnectsElements);
	/// RelatingPriorities : LIST [0:?] OF INTEGER;
	/// RelatedPriorities : LIST [0:?] OF INTEGER;
	/// RelatedConnectionType : IfcConnectionTypeEnum;
	/// RelatingConnectionType : IfcConnectionTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelConnectsPathElements : IFCRelConnectsElements, Global.IFCRelConnectsPathElements
	{
		public virtual IFC_Attributes<INTEGER>? RelatingPriorities { get; set; }
		public virtual IFC_Attributes<INTEGER>? RelatedPriorities { get; set; }
		public virtual IFCConnectionTypeEnum? RelatedConnectionType { get; set; }
		public virtual IFCConnectionTypeEnum? RelatingConnectionType { get; set; }
		public IFCRelConnectsPathElements() : base()
		{
		}
		public IFCRelConnectsPathElements(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCConnectionGeometry? ConnectionGeometry, IFCElement? RelatingElement, IFCElement? RelatedElement, IFC_Attributes<INTEGER>? RelatingPriorities, IFC_Attributes<INTEGER>? RelatedPriorities, IFCConnectionTypeEnum? RelatedConnectionType, IFCConnectionTypeEnum? RelatingConnectionType) : base (GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement)
		{
			this.RelatingPriorities = RelatingPriorities;
			this.RelatedPriorities = RelatedPriorities;
			this.RelatedConnectionType = RelatedConnectionType;
			this.RelatingConnectionType = RelatingConnectionType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ConnectionGeometry", ConnectionGeometry},
				{"RelatingElement", RelatingElement},
				{"RelatedElement", RelatedElement},
				{"RelatingPriorities", RelatingPriorities},
				{"RelatedPriorities", RelatedPriorities},
				{"RelatedConnectionType", RelatedConnectionType},
				{"RelatingConnectionType", RelatingConnectionType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual IFC_Attributes<INTEGER>? _RelatingPriorities
		{
			get
			{
				if(RelatingPriorities != null)
				{
					IFC_Attributes<INTEGER>? items = new IFC_Attributes<INTEGER>();
					foreach (INTEGER item in RelatingPriorities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatingPriorities = null;
				}
				else
				{
					RelatingPriorities = new IFC_Attributes<INTEGER>();
					foreach(var val in value)
					{
						if(val is INTEGER v)
						{
							RelatingPriorities.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<INTEGER>? _RelatedPriorities
		{
			get
			{
				if(RelatedPriorities != null)
				{
					IFC_Attributes<INTEGER>? items = new IFC_Attributes<INTEGER>();
					foreach (INTEGER item in RelatedPriorities)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedPriorities = null;
				}
				else
				{
					RelatedPriorities = new IFC_Attributes<INTEGER>();
					foreach(var val in value)
					{
						if(val is INTEGER v)
						{
							RelatedPriorities.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCConnectionTypeEnum? _RelatedConnectionType
		{
			get
			{
				return RelatedConnectionType;
			}
			set
			{
				if(value is IFCConnectionTypeEnum val)
				{
					RelatedConnectionType = val;
				}
				else if(value == null)
				{
					RelatedConnectionType = null;
				}
			}
		}
		public virtual Global.IFCConnectionTypeEnum? _RelatingConnectionType
		{
			get
			{
				return RelatingConnectionType;
			}
			set
			{
				if(value is IFCConnectionTypeEnum val)
				{
					RelatingConnectionType = val;
				}
				else if(value == null)
				{
					RelatingConnectionType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsPortToElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingPort : IfcPort;
	/// RelatedElement : IfcElement;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelConnectsPortToElement : IFCRelConnects, Global.IFCRelConnectsPortToElement
	{
		public virtual IFCPort? RelatingPort { get; set; }
		public virtual IFCElement? RelatedElement { get; set; }
		public IFCRelConnectsPortToElement() : base()
		{
		}
		public IFCRelConnectsPortToElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCPort? RelatingPort, IFCElement? RelatedElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingPort = RelatingPort;
			this.RelatedElement = RelatedElement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingPort", RelatingPort},
				{"RelatedElement", RelatedElement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPort? _RelatingPort
		{
			get
			{
				return RelatingPort;
			}
			set
			{
				if(value is IFCPort val)
				{
					RelatingPort = val;
				}
				else if(value == null)
				{
					RelatingPort = null;
				}
			}
		}
		public virtual Global.IFCElement? _RelatedElement
		{
			get
			{
				return RelatedElement;
			}
			set
			{
				if(value is IFCElement val)
				{
					RelatedElement = val;
				}
				else if(value == null)
				{
					RelatedElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsPorts
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingPort : IfcPort;
	/// RelatedPort : IfcPort;
	/// RealizingElement : OPTIONAL IfcElement;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelConnectsPorts : IFCRelConnects, Global.IFCRelConnectsPorts
	{
		public virtual IFCPort? RelatingPort { get; set; }
		public virtual IFCPort? RelatedPort { get; set; }
		public virtual IFCElement? RealizingElement { get; set; }
		public IFCRelConnectsPorts() : base()
		{
		}
		public IFCRelConnectsPorts(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCPort? RelatingPort, IFCPort? RelatedPort, IFCElement? RealizingElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingPort = RelatingPort;
			this.RelatedPort = RelatedPort;
			this.RealizingElement = RealizingElement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingPort", RelatingPort},
				{"RelatedPort", RelatedPort},
				{"RealizingElement", RealizingElement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPort? _RelatingPort
		{
			get
			{
				return RelatingPort;
			}
			set
			{
				if(value is IFCPort val)
				{
					RelatingPort = val;
				}
				else if(value == null)
				{
					RelatingPort = null;
				}
			}
		}
		public virtual Global.IFCPort? _RelatedPort
		{
			get
			{
				return RelatedPort;
			}
			set
			{
				if(value is IFCPort val)
				{
					RelatedPort = val;
				}
				else if(value == null)
				{
					RelatedPort = null;
				}
			}
		}
		public virtual Global.IFCElement? _RealizingElement
		{
			get
			{
				return RealizingElement;
			}
			set
			{
				if(value is IFCElement val)
				{
					RealizingElement = val;
				}
				else if(value == null)
				{
					RealizingElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsStructuralActivity
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingElement : IfcStructuralActivityAssignmentSelect;
	/// RelatedStructuralActivity : IfcStructuralActivity;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelConnectsStructuralActivity : IFCRelConnects, Global.IFCRelConnectsStructuralActivity
	{
		public virtual IFCStructuralActivityAssignmentSelect? RelatingElement { get; set; }
		public virtual IFCStructuralActivity? RelatedStructuralActivity { get; set; }
		public IFCRelConnectsStructuralActivity() : base()
		{
		}
		public IFCRelConnectsStructuralActivity(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCStructuralActivityAssignmentSelect? RelatingElement, IFCStructuralActivity? RelatedStructuralActivity) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingElement = RelatingElement;
			this.RelatedStructuralActivity = RelatedStructuralActivity;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingElement", RelatingElement},
				{"RelatedStructuralActivity", RelatedStructuralActivity}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCStructuralActivityAssignmentSelect? _RelatingElement
		{
			get
			{
				return RelatingElement;
			}
			set
			{
				if(value is IFCStructuralActivityAssignmentSelect val)
				{
					RelatingElement = val;
				}
				else if(value == null)
				{
					RelatingElement = null;
				}
			}
		}
		public virtual Global.IFCStructuralActivity? _RelatedStructuralActivity
		{
			get
			{
				return RelatedStructuralActivity;
			}
			set
			{
				if(value is IFCStructuralActivity val)
				{
					RelatedStructuralActivity = val;
				}
				else if(value == null)
				{
					RelatedStructuralActivity = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsStructuralElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingElement : IfcElement;
	/// RelatedStructuralMember : IfcStructuralMember;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelConnectsStructuralElement : IFCRelConnects, Global.IFCRelConnectsStructuralElement
	{
		public virtual IFCElement? RelatingElement { get; set; }
		public virtual IFCStructuralMember? RelatedStructuralMember { get; set; }
		public IFCRelConnectsStructuralElement() : base()
		{
		}
		public IFCRelConnectsStructuralElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCElement? RelatingElement, IFCStructuralMember? RelatedStructuralMember) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingElement = RelatingElement;
			this.RelatedStructuralMember = RelatedStructuralMember;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingElement", RelatingElement},
				{"RelatedStructuralMember", RelatedStructuralMember}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCElement? _RelatingElement
		{
			get
			{
				return RelatingElement;
			}
			set
			{
				if(value is IFCElement val)
				{
					RelatingElement = val;
				}
				else if(value == null)
				{
					RelatingElement = null;
				}
			}
		}
		public virtual Global.IFCStructuralMember? _RelatedStructuralMember
		{
			get
			{
				return RelatedStructuralMember;
			}
			set
			{
				if(value is IFCStructuralMember val)
				{
					RelatedStructuralMember = val;
				}
				else if(value == null)
				{
					RelatedStructuralMember = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsStructuralMember
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelConnectsWithEccentricity))
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingStructuralMember : IfcStructuralMember;
	/// RelatedStructuralConnection : IfcStructuralConnection;
	/// AppliedCondition : OPTIONAL IfcBoundaryCondition;
	/// AdditionalConditions : OPTIONAL IfcStructuralConnectionCondition;
	/// SupportedLength : OPTIONAL IfcLengthMeasure;
	/// ConditionCoordinateSystem : OPTIONAL IfcAxis2Placement3D;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelConnectsStructuralMember : IFCRelConnects, Global.IFCRelConnectsStructuralMember
	{
		public virtual IFCStructuralMember? RelatingStructuralMember { get; set; }
		public virtual IFCStructuralConnection? RelatedStructuralConnection { get; set; }
		public virtual IFCBoundaryCondition? AppliedCondition { get; set; }
		public virtual IFCStructuralConnectionCondition? AdditionalConditions { get; set; }
		public virtual IFCLengthMeasure? SupportedLength { get; set; }
		public virtual IFCAxis2Placement3D? ConditionCoordinateSystem { get; set; }
		public IFCRelConnectsStructuralMember() : base()
		{
		}
		public IFCRelConnectsStructuralMember(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCStructuralMember? RelatingStructuralMember, IFCStructuralConnection? RelatedStructuralConnection, IFCBoundaryCondition? AppliedCondition, IFCStructuralConnectionCondition? AdditionalConditions, IFCLengthMeasure? SupportedLength, IFCAxis2Placement3D? ConditionCoordinateSystem) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingStructuralMember = RelatingStructuralMember;
			this.RelatedStructuralConnection = RelatedStructuralConnection;
			this.AppliedCondition = AppliedCondition;
			this.AdditionalConditions = AdditionalConditions;
			this.SupportedLength = SupportedLength;
			this.ConditionCoordinateSystem = ConditionCoordinateSystem;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingStructuralMember", RelatingStructuralMember},
				{"RelatedStructuralConnection", RelatedStructuralConnection},
				{"AppliedCondition", AppliedCondition},
				{"AdditionalConditions", AdditionalConditions},
				{"SupportedLength", SupportedLength},
				{"ConditionCoordinateSystem", ConditionCoordinateSystem}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCStructuralMember? _RelatingStructuralMember
		{
			get
			{
				return RelatingStructuralMember;
			}
			set
			{
				if(value is IFCStructuralMember val)
				{
					RelatingStructuralMember = val;
				}
				else if(value == null)
				{
					RelatingStructuralMember = null;
				}
			}
		}
		public virtual Global.IFCStructuralConnection? _RelatedStructuralConnection
		{
			get
			{
				return RelatedStructuralConnection;
			}
			set
			{
				if(value is IFCStructuralConnection val)
				{
					RelatedStructuralConnection = val;
				}
				else if(value == null)
				{
					RelatedStructuralConnection = null;
				}
			}
		}
		public virtual Global.IFCBoundaryCondition? _AppliedCondition
		{
			get
			{
				return AppliedCondition;
			}
			set
			{
				if(value is IFCBoundaryCondition val)
				{
					AppliedCondition = val;
				}
				else if(value == null)
				{
					AppliedCondition = null;
				}
			}
		}
		public virtual Global.IFCStructuralConnectionCondition? _AdditionalConditions
		{
			get
			{
				return AdditionalConditions;
			}
			set
			{
				if(value is IFCStructuralConnectionCondition val)
				{
					AdditionalConditions = val;
				}
				else if(value == null)
				{
					AdditionalConditions = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _SupportedLength
		{
			get
			{
				return SupportedLength;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					SupportedLength = val;
				}
				else if(value == null)
				{
					SupportedLength = null;
				}
			}
		}
		public virtual Global.IFCAxis2Placement3D? _ConditionCoordinateSystem
		{
			get
			{
				return ConditionCoordinateSystem;
			}
			set
			{
				if(value is IFCAxis2Placement3D val)
				{
					ConditionCoordinateSystem = val;
				}
				else if(value == null)
				{
					ConditionCoordinateSystem = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsWithEccentricity
	/// SUBTYPE OF (IfcRelConnectsStructuralMember);
	/// ConnectionConstraint : IfcConnectionGeometry;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelConnectsWithEccentricity : IFCRelConnectsStructuralMember, Global.IFCRelConnectsWithEccentricity
	{
		public virtual IFCConnectionGeometry? ConnectionConstraint { get; set; }
		public IFCRelConnectsWithEccentricity() : base()
		{
		}
		public IFCRelConnectsWithEccentricity(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCStructuralMember? RelatingStructuralMember, IFCStructuralConnection? RelatedStructuralConnection, IFCBoundaryCondition? AppliedCondition, IFCStructuralConnectionCondition? AdditionalConditions, IFCLengthMeasure? SupportedLength, IFCAxis2Placement3D? ConditionCoordinateSystem, IFCConnectionGeometry? ConnectionConstraint) : base (GlobalId, OwnerHistory, Name, Description, RelatingStructuralMember, RelatedStructuralConnection, AppliedCondition, AdditionalConditions, SupportedLength, ConditionCoordinateSystem)
		{
			this.ConnectionConstraint = ConnectionConstraint;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingStructuralMember", RelatingStructuralMember},
				{"RelatedStructuralConnection", RelatedStructuralConnection},
				{"AppliedCondition", AppliedCondition},
				{"AdditionalConditions", AdditionalConditions},
				{"SupportedLength", SupportedLength},
				{"ConditionCoordinateSystem", ConditionCoordinateSystem},
				{"ConnectionConstraint", ConnectionConstraint}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCConnectionGeometry? _ConnectionConstraint
		{
			get
			{
				return ConnectionConstraint;
			}
			set
			{
				if(value is IFCConnectionGeometry val)
				{
					ConnectionConstraint = val;
				}
				else if(value == null)
				{
					ConnectionConstraint = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelConnectsWithRealizingElements
	/// SUBTYPE OF (IfcRelConnectsElements);
	/// RealizingElements : SET [1:?] OF IfcElement;
	/// ConnectionType : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelConnectsWithRealizingElements : IFCRelConnectsElements, Global.IFCRelConnectsWithRealizingElements
	{
		public virtual IFC_Attributes<IFCElement>? RealizingElements { get; set; }
		public virtual IFCLabel? ConnectionType { get; set; }
		public IFCRelConnectsWithRealizingElements() : base()
		{
		}
		public IFCRelConnectsWithRealizingElements(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCConnectionGeometry? ConnectionGeometry, IFCElement? RelatingElement, IFCElement? RelatedElement, IFC_Attributes<IFCElement>? RealizingElements, IFCLabel? ConnectionType) : base (GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement)
		{
			this.RealizingElements = RealizingElements;
			this.ConnectionType = ConnectionType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ConnectionGeometry", ConnectionGeometry},
				{"RelatingElement", RelatingElement},
				{"RelatedElement", RelatedElement},
				{"RealizingElements", RealizingElements},
				{"ConnectionType", ConnectionType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual IFC_Attributes<Global.IFCElement>? _RealizingElements
		{
			get
			{
				if(RealizingElements != null)
				{
					IFC_Attributes<Global.IFCElement>? items = new IFC_Attributes<Global.IFCElement>();
					foreach (IFCElement item in RealizingElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RealizingElements = null;
				}
				else
				{
					RealizingElements = new IFC_Attributes<IFCElement>();
					foreach(var val in value)
					{
						if(val is IFCElement v)
						{
							RealizingElements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _ConnectionType
		{
			get
			{
				return ConnectionType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ConnectionType = val;
				}
				else if(value == null)
				{
					ConnectionType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelContainedInSpatialStructure
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatedElements : SET [1:?] OF IfcProduct;
	/// RelatingStructure : IfcSpatialStructureElement;
	/// WHERE
	/// WR31 : SIZEOF(QUERY(temp <* RelatedElements | 'IFC2X3.IFCSPATIALSTRUCTUREELEMENT' IN TYPEOF(temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelContainedInSpatialStructure : IFCRelConnects, Global.IFCRelContainedInSpatialStructure
	{
		public virtual IFC_Attributes<IFCProduct>? RelatedElements { get; set; }
		public virtual IFCSpatialStructureElement? RelatingStructure { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCRelContainedInSpatialStructure() : base()
		{
		}
		public IFCRelContainedInSpatialStructure(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCProduct>? RelatedElements, IFCSpatialStructureElement? RelatingStructure) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedElements", RelatedElements},
				{"RelatingStructure", RelatingStructure}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual IFC_Attributes<Global.IFCProduct>? _RelatedElements
		{
			get
			{
				if(RelatedElements != null)
				{
					IFC_Attributes<Global.IFCProduct>? items = new IFC_Attributes<Global.IFCProduct>();
					foreach (IFCProduct item in RelatedElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedElements = null;
				}
				else
				{
					RelatedElements = new IFC_Attributes<IFCProduct>();
					foreach(var val in value)
					{
						if(val is IFCProduct v)
						{
							RelatedElements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCSpatialStructureElement? _RelatingStructure
		{
			get
			{
				return RelatingStructure;
			}
			set
			{
				if(value is IFCSpatialStructureElement val)
				{
					RelatingStructure = val;
				}
				else if(value == null)
				{
					RelatingStructure = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelCoversBldgElements
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingBuildingElement : IfcElement;
	/// RelatedCoverings : SET [1:?] OF IfcCovering;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelCoversBldgElements : IFCRelConnects, Global.IFCRelCoversBldgElements
	{
		public virtual IFCElement? RelatingBuildingElement { get; set; }
		public virtual IFC_Attributes<IFCCovering>? RelatedCoverings { get; set; }
		public IFCRelCoversBldgElements() : base()
		{
		}
		public IFCRelCoversBldgElements(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCElement? RelatingBuildingElement, IFC_Attributes<IFCCovering>? RelatedCoverings) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedCoverings = RelatedCoverings;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingBuildingElement", RelatingBuildingElement},
				{"RelatedCoverings", RelatedCoverings}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCElement? _RelatingBuildingElement
		{
			get
			{
				return RelatingBuildingElement;
			}
			set
			{
				if(value is IFCElement val)
				{
					RelatingBuildingElement = val;
				}
				else if(value == null)
				{
					RelatingBuildingElement = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCCovering>? _RelatedCoverings
		{
			get
			{
				if(RelatedCoverings != null)
				{
					IFC_Attributes<Global.IFCCovering>? items = new IFC_Attributes<Global.IFCCovering>();
					foreach (IFCCovering item in RelatedCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedCoverings = null;
				}
				else
				{
					RelatedCoverings = new IFC_Attributes<IFCCovering>();
					foreach(var val in value)
					{
						if(val is IFCCovering v)
						{
							RelatedCoverings.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelCoversSpaces
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatedSpace : IfcSpace;
	/// RelatedCoverings : SET [1:?] OF IfcCovering;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelCoversSpaces : IFCRelConnects, Global.IFCRelCoversSpaces
	{
		public virtual IFCSpace? RelatedSpace { get; set; }
		public virtual IFC_Attributes<IFCCovering>? RelatedCoverings { get; set; }
		public IFCRelCoversSpaces() : base()
		{
		}
		public IFCRelCoversSpaces(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCSpace? RelatedSpace, IFC_Attributes<IFCCovering>? RelatedCoverings) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedSpace = RelatedSpace;
			this.RelatedCoverings = RelatedCoverings;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedSpace", RelatedSpace},
				{"RelatedCoverings", RelatedCoverings}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCSpace? _RelatedSpace
		{
			get
			{
				return RelatedSpace;
			}
			set
			{
				if(value is IFCSpace val)
				{
					RelatedSpace = val;
				}
				else if(value == null)
				{
					RelatedSpace = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCCovering>? _RelatedCoverings
		{
			get
			{
				if(RelatedCoverings != null)
				{
					IFC_Attributes<Global.IFCCovering>? items = new IFC_Attributes<Global.IFCCovering>();
					foreach (IFCCovering item in RelatedCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedCoverings = null;
				}
				else
				{
					RelatedCoverings = new IFC_Attributes<IFCCovering>();
					foreach(var val in value)
					{
						if(val is IFCCovering v)
						{
							RelatedCoverings.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDecomposes
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelAggregates
	/// ,IfcRelNests))
	/// SUBTYPE OF (IfcRelationship);
	/// RelatingObject : IfcObjectDefinition;
	/// RelatedObjects : SET [1:?] OF IfcObjectDefinition;
	/// WHERE
	/// WR31 : SIZEOF(QUERY(Temp <* RelatedObjects | RelatingObject :=: Temp)) = 0;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCRelDecomposes : IFCRelationship, Global.IFCRelDecomposes
	{
		public virtual IFCObjectDefinition? RelatingObject { get; set; }
		public virtual IFC_Attributes<IFCObjectDefinition>? RelatedObjects { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCRelDecomposes() : base()
		{
		}
		public IFCRelDecomposes(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCObjectDefinition? RelatingObject, IFC_Attributes<IFCObjectDefinition>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingObject = RelatingObject;
			this.RelatedObjects = RelatedObjects;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingObject", RelatingObject},
				{"RelatedObjects", RelatedObjects}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual Global.IFCObjectDefinition? _RelatingObject
		{
			get
			{
				return RelatingObject;
			}
			set
			{
				if(value is IFCObjectDefinition val)
				{
					RelatingObject = val;
				}
				else if(value == null)
				{
					RelatingObject = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCObjectDefinition>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					IFC_Attributes<Global.IFCObjectDefinition>? items = new IFC_Attributes<Global.IFCObjectDefinition>();
					foreach (IFCObjectDefinition item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedObjects = null;
				}
				else
				{
					RelatedObjects = new IFC_Attributes<IFCObjectDefinition>();
					foreach(var val in value)
					{
						if(val is IFCObjectDefinition v)
						{
							RelatedObjects.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDefines
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelDefinesByProperties
	/// ,IfcRelDefinesByType))
	/// SUBTYPE OF (IfcRelationship);
	/// RelatedObjects : SET [1:?] OF IfcObject;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCRelDefines : IFCRelationship, Global.IFCRelDefines
	{
		public virtual IFC_Attributes<IFCObject>? RelatedObjects { get; set; }
		public IFCRelDefines() : base()
		{
		}
		public IFCRelDefines(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObject>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedObjects = RelatedObjects;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCObject>? _RelatedObjects
		{
			get
			{
				if(RelatedObjects != null)
				{
					IFC_Attributes<Global.IFCObject>? items = new IFC_Attributes<Global.IFCObject>();
					foreach (IFCObject item in RelatedObjects)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedObjects = null;
				}
				else
				{
					RelatedObjects = new IFC_Attributes<IFCObject>();
					foreach(var val in value)
					{
						if(val is IFCObject v)
						{
							RelatedObjects.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDefinesByProperties
	/// SUPERTYPE OF (ONEOF
	/// (IfcRelOverridesProperties))
	/// SUBTYPE OF (IfcRelDefines);
	/// RelatingPropertyDefinition : IfcPropertySetDefinition;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelDefinesByProperties : IFCRelDefines, Global.IFCRelDefinesByProperties
	{
		public virtual IFCPropertySetDefinition? RelatingPropertyDefinition { get; set; }
		public IFCRelDefinesByProperties() : base()
		{
		}
		public IFCRelDefinesByProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObject>? RelatedObjects, IFCPropertySetDefinition? RelatingPropertyDefinition) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingPropertyDefinition = RelatingPropertyDefinition;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatingPropertyDefinition", RelatingPropertyDefinition}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPropertySetDefinition? _RelatingPropertyDefinition
		{
			get
			{
				return RelatingPropertyDefinition;
			}
			set
			{
				if(value is IFCPropertySetDefinition val)
				{
					RelatingPropertyDefinition = val;
				}
				else if(value == null)
				{
					RelatingPropertyDefinition = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelDefinesByType
	/// SUBTYPE OF (IfcRelDefines);
	/// RelatingType : IfcTypeObject;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelDefinesByType : IFCRelDefines, Global.IFCRelDefinesByType
	{
		public virtual IFCTypeObject? RelatingType { get; set; }
		public IFCRelDefinesByType() : base()
		{
		}
		public IFCRelDefinesByType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObject>? RelatedObjects, IFCTypeObject? RelatingType) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects)
		{
			this.RelatingType = RelatingType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatingType", RelatingType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCTypeObject? _RelatingType
		{
			get
			{
				return RelatingType;
			}
			set
			{
				if(value is IFCTypeObject val)
				{
					RelatingType = val;
				}
				else if(value == null)
				{
					RelatingType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelFillsElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingOpeningElement : IfcOpeningElement;
	/// RelatedBuildingElement : IfcElement;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelFillsElement : IFCRelConnects, Global.IFCRelFillsElement
	{
		public virtual IFCOpeningElement? RelatingOpeningElement { get; set; }
		public virtual IFCElement? RelatedBuildingElement { get; set; }
		public IFCRelFillsElement() : base()
		{
		}
		public IFCRelFillsElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCOpeningElement? RelatingOpeningElement, IFCElement? RelatedBuildingElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingOpeningElement = RelatingOpeningElement;
			this.RelatedBuildingElement = RelatedBuildingElement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingOpeningElement", RelatingOpeningElement},
				{"RelatedBuildingElement", RelatedBuildingElement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCOpeningElement? _RelatingOpeningElement
		{
			get
			{
				return RelatingOpeningElement;
			}
			set
			{
				if(value is IFCOpeningElement val)
				{
					RelatingOpeningElement = val;
				}
				else if(value == null)
				{
					RelatingOpeningElement = null;
				}
			}
		}
		public virtual Global.IFCElement? _RelatedBuildingElement
		{
			get
			{
				return RelatedBuildingElement;
			}
			set
			{
				if(value is IFCElement val)
				{
					RelatedBuildingElement = val;
				}
				else if(value == null)
				{
					RelatedBuildingElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelFlowControlElements
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatedControlElements : SET [1:?] OF IfcDistributionControlElement;
	/// RelatingFlowElement : IfcDistributionFlowElement;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelFlowControlElements : IFCRelConnects, Global.IFCRelFlowControlElements
	{
		public virtual IFC_Attributes<IFCDistributionControlElement>? RelatedControlElements { get; set; }
		public virtual IFCDistributionFlowElement? RelatingFlowElement { get; set; }
		public IFCRelFlowControlElements() : base()
		{
		}
		public IFCRelFlowControlElements(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCDistributionControlElement>? RelatedControlElements, IFCDistributionFlowElement? RelatingFlowElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedControlElements = RelatedControlElements;
			this.RelatingFlowElement = RelatingFlowElement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedControlElements", RelatedControlElements},
				{"RelatingFlowElement", RelatingFlowElement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCDistributionControlElement>? _RelatedControlElements
		{
			get
			{
				if(RelatedControlElements != null)
				{
					IFC_Attributes<Global.IFCDistributionControlElement>? items = new IFC_Attributes<Global.IFCDistributionControlElement>();
					foreach (IFCDistributionControlElement item in RelatedControlElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedControlElements = null;
				}
				else
				{
					RelatedControlElements = new IFC_Attributes<IFCDistributionControlElement>();
					foreach(var val in value)
					{
						if(val is IFCDistributionControlElement v)
						{
							RelatedControlElements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCDistributionFlowElement? _RelatingFlowElement
		{
			get
			{
				return RelatingFlowElement;
			}
			set
			{
				if(value is IFCDistributionFlowElement val)
				{
					RelatingFlowElement = val;
				}
				else if(value == null)
				{
					RelatingFlowElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelInteractionRequirements
	/// SUBTYPE OF (IfcRelConnects);
	/// DailyInteraction : OPTIONAL IfcCountMeasure;
	/// ImportanceRating : OPTIONAL IfcNormalisedRatioMeasure;
	/// LocationOfInteraction : OPTIONAL IfcSpatialStructureElement;
	/// RelatedSpaceProgram : IfcSpaceProgram;
	/// RelatingSpaceProgram : IfcSpaceProgram;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelInteractionRequirements : IFCRelConnects, Global.IFCRelInteractionRequirements
	{
		public virtual IFCCountMeasure? DailyInteraction { get; set; }
		public virtual IFCNormalisedRatioMeasure? ImportanceRating { get; set; }
		public virtual IFCSpatialStructureElement? LocationOfInteraction { get; set; }
		public virtual IFCSpaceProgram? RelatedSpaceProgram { get; set; }
		public virtual IFCSpaceProgram? RelatingSpaceProgram { get; set; }
		public IFCRelInteractionRequirements() : base()
		{
		}
		public IFCRelInteractionRequirements(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCCountMeasure? DailyInteraction, IFCNormalisedRatioMeasure? ImportanceRating, IFCSpatialStructureElement? LocationOfInteraction, IFCSpaceProgram? RelatedSpaceProgram, IFCSpaceProgram? RelatingSpaceProgram) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.DailyInteraction = DailyInteraction;
			this.ImportanceRating = ImportanceRating;
			this.LocationOfInteraction = LocationOfInteraction;
			this.RelatedSpaceProgram = RelatedSpaceProgram;
			this.RelatingSpaceProgram = RelatingSpaceProgram;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"DailyInteraction", DailyInteraction},
				{"ImportanceRating", ImportanceRating},
				{"LocationOfInteraction", LocationOfInteraction},
				{"RelatedSpaceProgram", RelatedSpaceProgram},
				{"RelatingSpaceProgram", RelatingSpaceProgram}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCountMeasure? _DailyInteraction
		{
			get
			{
				return DailyInteraction;
			}
			set
			{
				if(value is IFCCountMeasure val)
				{
					DailyInteraction = val;
				}
				else if(value == null)
				{
					DailyInteraction = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _ImportanceRating
		{
			get
			{
				return ImportanceRating;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					ImportanceRating = val;
				}
				else if(value == null)
				{
					ImportanceRating = null;
				}
			}
		}
		public virtual Global.IFCSpatialStructureElement? _LocationOfInteraction
		{
			get
			{
				return LocationOfInteraction;
			}
			set
			{
				if(value is IFCSpatialStructureElement val)
				{
					LocationOfInteraction = val;
				}
				else if(value == null)
				{
					LocationOfInteraction = null;
				}
			}
		}
		public virtual Global.IFCSpaceProgram? _RelatedSpaceProgram
		{
			get
			{
				return RelatedSpaceProgram;
			}
			set
			{
				if(value is IFCSpaceProgram val)
				{
					RelatedSpaceProgram = val;
				}
				else if(value == null)
				{
					RelatedSpaceProgram = null;
				}
			}
		}
		public virtual Global.IFCSpaceProgram? _RelatingSpaceProgram
		{
			get
			{
				return RelatingSpaceProgram;
			}
			set
			{
				if(value is IFCSpaceProgram val)
				{
					RelatingSpaceProgram = val;
				}
				else if(value == null)
				{
					RelatingSpaceProgram = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelNests
	/// SUBTYPE OF (IfcRelDecomposes);
	/// WHERE
	/// WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelDecomposes.RelatedObjects |
	/// NOT(TYPEOF(SELF\IfcRelDecomposes.RelatingObject) = TYPEOF(Temp)))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelNests : IFCRelDecomposes, Global.IFCRelNests
	{
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRelNests() : base()
		{
		}
		public IFCRelNests(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCObjectDefinition? RelatingObject, IFC_Attributes<IFCObjectDefinition>? RelatedObjects) : base (GlobalId, OwnerHistory, Name, Description, RelatingObject, RelatedObjects)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingObject", RelatingObject},
				{"RelatedObjects", RelatedObjects}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelOccupiesSpaces
	/// SUBTYPE OF (IfcRelAssignsToActor);
	/// END_ENTITY;
	/// <summary>
	public class IFCRelOccupiesSpaces : IFCRelAssignsToActor, Global.IFCRelOccupiesSpaces
	{
		public IFCRelOccupiesSpaces() : base()
		{
		}
		public IFCRelOccupiesSpaces(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObjectDefinition>? RelatedObjects, IFCObjectTypeEnum? RelatedObjectsType, IFCActor? RelatingActor, IFCActorRole? ActingRole) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingActor, ActingRole)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatedObjectsType", RelatedObjectsType},
				{"RelatingActor", RelatingActor},
				{"ActingRole", ActingRole}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelOverridesProperties
	/// SUBTYPE OF (IfcRelDefinesByProperties);
	/// OverridingProperties : SET [1:?] OF IfcProperty;
	/// WHERE
	/// WR1 : SIZEOF(SELF\IfcRelDefines.RelatedObjects) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelOverridesProperties : IFCRelDefinesByProperties, Global.IFCRelOverridesProperties
	{
		public virtual IFC_Attributes<IFCProperty>? OverridingProperties { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRelOverridesProperties() : base()
		{
		}
		public IFCRelOverridesProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObject>? RelatedObjects, IFCPropertySetDefinition? RelatingPropertyDefinition, IFC_Attributes<IFCProperty>? OverridingProperties) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatingPropertyDefinition)
		{
			this.OverridingProperties = OverridingProperties;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatingPropertyDefinition", RelatingPropertyDefinition},
				{"OverridingProperties", OverridingProperties}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCProperty>? _OverridingProperties
		{
			get
			{
				if(OverridingProperties != null)
				{
					IFC_Attributes<Global.IFCProperty>? items = new IFC_Attributes<Global.IFCProperty>();
					foreach (IFCProperty item in OverridingProperties)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					OverridingProperties = null;
				}
				else
				{
					OverridingProperties = new IFC_Attributes<IFCProperty>();
					foreach(var val in value)
					{
						if(val is IFCProperty v)
						{
							OverridingProperties.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelProjectsElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingElement : IfcElement;
	/// RelatedFeatureElement : IfcFeatureElementAddition;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelProjectsElement : IFCRelConnects, Global.IFCRelProjectsElement
	{
		public virtual IFCElement? RelatingElement { get; set; }
		public virtual IFCFeatureElementAddition? RelatedFeatureElement { get; set; }
		public IFCRelProjectsElement() : base()
		{
		}
		public IFCRelProjectsElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCElement? RelatingElement, IFCFeatureElementAddition? RelatedFeatureElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingElement = RelatingElement;
			this.RelatedFeatureElement = RelatedFeatureElement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingElement", RelatingElement},
				{"RelatedFeatureElement", RelatedFeatureElement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCElement? _RelatingElement
		{
			get
			{
				return RelatingElement;
			}
			set
			{
				if(value is IFCElement val)
				{
					RelatingElement = val;
				}
				else if(value == null)
				{
					RelatingElement = null;
				}
			}
		}
		public virtual Global.IFCFeatureElementAddition? _RelatedFeatureElement
		{
			get
			{
				return RelatedFeatureElement;
			}
			set
			{
				if(value is IFCFeatureElementAddition val)
				{
					RelatedFeatureElement = val;
				}
				else if(value == null)
				{
					RelatedFeatureElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelReferencedInSpatialStructure
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatedElements : SET [1:?] OF IfcProduct;
	/// RelatingStructure : IfcSpatialStructureElement;
	/// WHERE
	/// WR31 : SIZEOF(QUERY(temp <* RelatedElements | 'IFC2X3.IFCSPATIALSTRUCTUREELEMENT' IN TYPEOF(temp))) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelReferencedInSpatialStructure : IFCRelConnects, Global.IFCRelReferencedInSpatialStructure
	{
		public virtual IFC_Attributes<IFCProduct>? RelatedElements { get; set; }
		public virtual IFCSpatialStructureElement? RelatingStructure { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCRelReferencedInSpatialStructure() : base()
		{
		}
		public IFCRelReferencedInSpatialStructure(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCProduct>? RelatedElements, IFCSpatialStructureElement? RelatingStructure) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatedElements = RelatedElements;
			this.RelatingStructure = RelatingStructure;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedElements", RelatedElements},
				{"RelatingStructure", RelatingStructure}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual IFC_Attributes<Global.IFCProduct>? _RelatedElements
		{
			get
			{
				if(RelatedElements != null)
				{
					IFC_Attributes<Global.IFCProduct>? items = new IFC_Attributes<Global.IFCProduct>();
					foreach (IFCProduct item in RelatedElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedElements = null;
				}
				else
				{
					RelatedElements = new IFC_Attributes<IFCProduct>();
					foreach(var val in value)
					{
						if(val is IFCProduct v)
						{
							RelatedElements.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCSpatialStructureElement? _RelatingStructure
		{
			get
			{
				return RelatingStructure;
			}
			set
			{
				if(value is IFCSpatialStructureElement val)
				{
					RelatingStructure = val;
				}
				else if(value == null)
				{
					RelatingStructure = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelSchedulesCostItems
	/// SUBTYPE OF (IfcRelAssignsToControl);
	/// WHERE
	/// WR11 : SIZEOF(QUERY(temp <* SELF\IfcRelAssigns.RelatedObjects |
	/// NOT('IFC2X3.IFCCOSTITEM' IN TYPEOF(temp))
	/// )) = 0;
	/// WR12 : 'IFC2X3.IFCCOSTSCHEDULE' IN TYPEOF (SELF\IfcRelAssignsToControl.RelatingControl);
	/// END_ENTITY;
	/// <summary>
	public class IFCRelSchedulesCostItems : IFCRelAssignsToControl, Global.IFCRelSchedulesCostItems
	{
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR12
		{
			get
			{
				return true;
			}
		}
		public IFCRelSchedulesCostItems() : base()
		{
		}
		public IFCRelSchedulesCostItems(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFC_Attributes<IFCObjectDefinition>? RelatedObjects, IFCObjectTypeEnum? RelatedObjectsType, IFCControl? RelatingControl) : base (GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingControl)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatedObjects", RelatedObjects},
				{"RelatedObjectsType", RelatedObjectsType},
				{"RelatingControl", RelatingControl}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelSequence
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingProcess : IfcProcess;
	/// RelatedProcess : IfcProcess;
	/// TimeLag : IfcTimeMeasure;
	/// SequenceType : IfcSequenceEnum;
	/// WHERE
	/// WR1 : RelatingProcess :<>: RelatedProcess;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelSequence : IFCRelConnects, Global.IFCRelSequence
	{
		public virtual IFCProcess? RelatingProcess { get; set; }
		public virtual IFCProcess? RelatedProcess { get; set; }
		public virtual IFCTimeMeasure? TimeLag { get; set; }
		public virtual IFCSequenceEnum? SequenceType { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRelSequence() : base()
		{
		}
		public IFCRelSequence(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCProcess? RelatingProcess, IFCProcess? RelatedProcess, IFCTimeMeasure? TimeLag, IFCSequenceEnum? SequenceType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingProcess = RelatingProcess;
			this.RelatedProcess = RelatedProcess;
			this.TimeLag = TimeLag;
			this.SequenceType = SequenceType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingProcess", RelatingProcess},
				{"RelatedProcess", RelatedProcess},
				{"TimeLag", TimeLag},
				{"SequenceType", SequenceType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCProcess? _RelatingProcess
		{
			get
			{
				return RelatingProcess;
			}
			set
			{
				if(value is IFCProcess val)
				{
					RelatingProcess = val;
				}
				else if(value == null)
				{
					RelatingProcess = null;
				}
			}
		}
		public virtual Global.IFCProcess? _RelatedProcess
		{
			get
			{
				return RelatedProcess;
			}
			set
			{
				if(value is IFCProcess val)
				{
					RelatedProcess = val;
				}
				else if(value == null)
				{
					RelatedProcess = null;
				}
			}
		}
		public virtual Global.IFCTimeMeasure? _TimeLag
		{
			get
			{
				return TimeLag;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					TimeLag = val;
				}
				else if(value == null)
				{
					TimeLag = null;
				}
			}
		}
		public virtual Global.IFCSequenceEnum? _SequenceType
		{
			get
			{
				return SequenceType;
			}
			set
			{
				if(value is IFCSequenceEnum val)
				{
					SequenceType = val;
				}
				else if(value == null)
				{
					SequenceType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelServicesBuildings
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingSystem : IfcSystem;
	/// RelatedBuildings : SET [1:?] OF IfcSpatialStructureElement;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelServicesBuildings : IFCRelConnects, Global.IFCRelServicesBuildings
	{
		public virtual IFCSystem? RelatingSystem { get; set; }
		public virtual IFC_Attributes<IFCSpatialStructureElement>? RelatedBuildings { get; set; }
		public IFCRelServicesBuildings() : base()
		{
		}
		public IFCRelServicesBuildings(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCSystem? RelatingSystem, IFC_Attributes<IFCSpatialStructureElement>? RelatedBuildings) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingSystem = RelatingSystem;
			this.RelatedBuildings = RelatedBuildings;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingSystem", RelatingSystem},
				{"RelatedBuildings", RelatedBuildings}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCSystem? _RelatingSystem
		{
			get
			{
				return RelatingSystem;
			}
			set
			{
				if(value is IFCSystem val)
				{
					RelatingSystem = val;
				}
				else if(value == null)
				{
					RelatingSystem = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCSpatialStructureElement>? _RelatedBuildings
		{
			get
			{
				if(RelatedBuildings != null)
				{
					IFC_Attributes<Global.IFCSpatialStructureElement>? items = new IFC_Attributes<Global.IFCSpatialStructureElement>();
					foreach (IFCSpatialStructureElement item in RelatedBuildings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RelatedBuildings = null;
				}
				else
				{
					RelatedBuildings = new IFC_Attributes<IFCSpatialStructureElement>();
					foreach(var val in value)
					{
						if(val is IFCSpatialStructureElement v)
						{
							RelatedBuildings.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelSpaceBoundary
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingSpace : IfcSpace;
	/// RelatedBuildingElement : OPTIONAL IfcElement;
	/// ConnectionGeometry : OPTIONAL IfcConnectionGeometry;
	/// PhysicalOrVirtualBoundary : IfcPhysicalOrVirtualEnum;
	/// InternalOrExternalBoundary : IfcInternalOrExternalEnum;
	/// WHERE
	/// WR1 : ((PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.Physical) AND
	/// (EXISTS(RelatedBuildingElement) AND NOT('IFC2X3.IFCVIRTUALELEMENT' IN TYPEOF(RelatedBuildingElement))))
	/// OR
	/// ((PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.Virtual) AND
	/// (NOT(EXISTS(RelatedBuildingElement)) OR ('IFC2X3.IFCVIRTUALELEMENT' IN TYPEOF(RelatedBuildingElement))))
	/// OR
	/// (PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.NotDefined);
	/// END_ENTITY;
	/// <summary>
	public class IFCRelSpaceBoundary : IFCRelConnects, Global.IFCRelSpaceBoundary
	{
		public virtual IFCSpace? RelatingSpace { get; set; }
		public virtual IFCElement? RelatedBuildingElement { get; set; }
		public virtual IFCConnectionGeometry? ConnectionGeometry { get; set; }
		public virtual IFCPhysicalOrVirtualEnum? PhysicalOrVirtualBoundary { get; set; }
		public virtual IFCInternalOrExternalEnum? InternalOrExternalBoundary { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRelSpaceBoundary() : base()
		{
		}
		public IFCRelSpaceBoundary(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCSpace? RelatingSpace, IFCElement? RelatedBuildingElement, IFCConnectionGeometry? ConnectionGeometry, IFCPhysicalOrVirtualEnum? PhysicalOrVirtualBoundary, IFCInternalOrExternalEnum? InternalOrExternalBoundary) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingSpace = RelatingSpace;
			this.RelatedBuildingElement = RelatedBuildingElement;
			this.ConnectionGeometry = ConnectionGeometry;
			this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
			this.InternalOrExternalBoundary = InternalOrExternalBoundary;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingSpace", RelatingSpace},
				{"RelatedBuildingElement", RelatedBuildingElement},
				{"ConnectionGeometry", ConnectionGeometry},
				{"PhysicalOrVirtualBoundary", PhysicalOrVirtualBoundary},
				{"InternalOrExternalBoundary", InternalOrExternalBoundary}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCSpace? _RelatingSpace
		{
			get
			{
				return RelatingSpace;
			}
			set
			{
				if(value is IFCSpace val)
				{
					RelatingSpace = val;
				}
				else if(value == null)
				{
					RelatingSpace = null;
				}
			}
		}
		public virtual Global.IFCElement? _RelatedBuildingElement
		{
			get
			{
				return RelatedBuildingElement;
			}
			set
			{
				if(value is IFCElement val)
				{
					RelatedBuildingElement = val;
				}
				else if(value == null)
				{
					RelatedBuildingElement = null;
				}
			}
		}
		public virtual Global.IFCConnectionGeometry? _ConnectionGeometry
		{
			get
			{
				return ConnectionGeometry;
			}
			set
			{
				if(value is IFCConnectionGeometry val)
				{
					ConnectionGeometry = val;
				}
				else if(value == null)
				{
					ConnectionGeometry = null;
				}
			}
		}
		public virtual Global.IFCPhysicalOrVirtualEnum? _PhysicalOrVirtualBoundary
		{
			get
			{
				return PhysicalOrVirtualBoundary;
			}
			set
			{
				if(value is IFCPhysicalOrVirtualEnum val)
				{
					PhysicalOrVirtualBoundary = val;
				}
				else if(value == null)
				{
					PhysicalOrVirtualBoundary = null;
				}
			}
		}
		public virtual Global.IFCInternalOrExternalEnum? _InternalOrExternalBoundary
		{
			get
			{
				return InternalOrExternalBoundary;
			}
			set
			{
				if(value is IFCInternalOrExternalEnum val)
				{
					InternalOrExternalBoundary = val;
				}
				else if(value == null)
				{
					InternalOrExternalBoundary = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelVoidsElement
	/// SUBTYPE OF (IfcRelConnects);
	/// RelatingBuildingElement : IfcElement;
	/// RelatedOpeningElement : IfcFeatureElementSubtraction;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelVoidsElement : IFCRelConnects, Global.IFCRelVoidsElement
	{
		public virtual IFCElement? RelatingBuildingElement { get; set; }
		public virtual IFCFeatureElementSubtraction? RelatedOpeningElement { get; set; }
		public IFCRelVoidsElement() : base()
		{
		}
		public IFCRelVoidsElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCElement? RelatingBuildingElement, IFCFeatureElementSubtraction? RelatedOpeningElement) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.RelatingBuildingElement = RelatingBuildingElement;
			this.RelatedOpeningElement = RelatedOpeningElement;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"RelatingBuildingElement", RelatingBuildingElement},
				{"RelatedOpeningElement", RelatedOpeningElement}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCElement? _RelatingBuildingElement
		{
			get
			{
				return RelatingBuildingElement;
			}
			set
			{
				if(value is IFCElement val)
				{
					RelatingBuildingElement = val;
				}
				else if(value == null)
				{
					RelatingBuildingElement = null;
				}
			}
		}
		public virtual Global.IFCFeatureElementSubtraction? _RelatedOpeningElement
		{
			get
			{
				return RelatedOpeningElement;
			}
			set
			{
				if(value is IFCFeatureElementSubtraction val)
				{
					RelatedOpeningElement = val;
				}
				else if(value == null)
				{
					RelatedOpeningElement = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRelationship
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcRelAssigns
	/// ,IfcRelAssociates
	/// ,IfcRelConnects
	/// ,IfcRelDecomposes
	/// ,IfcRelDefines))
	/// SUBTYPE OF (IfcRoot);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCRelationship : IFCRoot, Global.IFCRelationship
	{
		public IFCRelationship() : base()
		{
		}
		public IFCRelationship(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description) : base (GlobalId, OwnerHistory, Name, Description)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcRelaxation;
	/// RelaxationValue : IfcNormalisedRatioMeasure;
	/// InitialStress : IfcNormalisedRatioMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCRelaxation : IFC_ClassEntity, Global.IFCRelaxation
	{
		public virtual IFCNormalisedRatioMeasure? RelaxationValue { get; set; }
		public virtual IFCNormalisedRatioMeasure? InitialStress { get; set; }
		public IFCRelaxation() : base()
		{
		}
		public IFCRelaxation(IFCNormalisedRatioMeasure? RelaxationValue, IFCNormalisedRatioMeasure? InitialStress) : base ()
		{
			this.RelaxationValue = RelaxationValue;
			this.InitialStress = InitialStress;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RelaxationValue", RelaxationValue},
				{"InitialStress", InitialStress}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCNormalisedRatioMeasure? _RelaxationValue
		{
			get
			{
				return RelaxationValue;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					RelaxationValue = val;
				}
				else if(value == null)
				{
					RelaxationValue = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _InitialStress
		{
			get
			{
				return InitialStress;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					InitialStress = val;
				}
				else if(value == null)
				{
					InitialStress = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRepresentation
	/// SUPERTYPE OF (ONEOF
	/// (IfcShapeModel
	/// ,IfcStyleModel));
	/// ContextOfItems : IfcRepresentationContext;
	/// RepresentationIdentifier : OPTIONAL IfcLabel;
	/// RepresentationType : OPTIONAL IfcLabel;
	/// Items : SET [1:?] OF IfcRepresentationItem;
	/// INVERSE
	/// RepresentationMap : SET [0:1] OF IfcRepresentationMap FOR MappedRepresentation;
	/// LayerAssignments : SET [0:?] OF IfcPresentationLayerAssignment FOR AssignedItems;
	/// OfProductRepresentation : SET [0:1] OF IfcProductRepresentation FOR Representations;
	/// END_ENTITY;
	/// <summary>
	public class IFCRepresentation : IFC_ClassEntity, IFCLayeredItem, Global.IFCRepresentation
	{
		public virtual IFCRepresentationContext? ContextOfItems { get; set; }
		public virtual IFCLabel? RepresentationIdentifier { get; set; }
		public virtual IFCLabel? RepresentationType { get; set; }
		public virtual IFC_Attributes<IFCRepresentationItem>? Items { get; set; }
		public IFC_Attributes<IFCRepresentationMap>? RepresentationMap {get{return new IFC_Attributes<IFCRepresentationMap>(Model?.GetItems<IFCRepresentationMap>().Where(x => x.MappedRepresentation != null && x.MappedRepresentation == this).ToList());}}
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get{return new IFC_Attributes<IFCPresentationLayerAssignment>(Model?.GetItems<IFCPresentationLayerAssignment>().Where(x => x.AssignedItems != null && x.AssignedItems.Contains(this)).ToList());}}
		public IFC_Attributes<IFCProductRepresentation>? OfProductRepresentation {get{return new IFC_Attributes<IFCProductRepresentation>(Model?.GetItems<IFCProductRepresentation>().Where(x => x.Representations != null && x.Representations.Contains(this)).ToList());}}
		public IFCRepresentation() : base()
		{
		}
		public IFCRepresentation(IFCRepresentationContext? ContextOfItems, IFCLabel? RepresentationIdentifier, IFCLabel? RepresentationType, IFC_Attributes<IFCRepresentationItem>? Items) : base ()
		{
			this.ContextOfItems = ContextOfItems;
			this.RepresentationIdentifier = RepresentationIdentifier;
			this.RepresentationType = RepresentationType;
			this.Items = Items;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ContextOfItems", ContextOfItems},
				{"RepresentationIdentifier", RepresentationIdentifier},
				{"RepresentationType", RepresentationType},
				{"Items", Items}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepresentationMap", RepresentationMap},
				{"LayerAssignments", LayerAssignments},
				{"OfProductRepresentation", OfProductRepresentation}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCRepresentationContext? _ContextOfItems
		{
			get
			{
				return ContextOfItems;
			}
			set
			{
				if(value is IFCRepresentationContext val)
				{
					ContextOfItems = val;
				}
				else if(value == null)
				{
					ContextOfItems = null;
				}
			}
		}
		public virtual Global.IFCLabel? _RepresentationIdentifier
		{
			get
			{
				return RepresentationIdentifier;
			}
			set
			{
				if(value is IFCLabel val)
				{
					RepresentationIdentifier = val;
				}
				else if(value == null)
				{
					RepresentationIdentifier = null;
				}
			}
		}
		public virtual Global.IFCLabel? _RepresentationType
		{
			get
			{
				return RepresentationType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					RepresentationType = val;
				}
				else if(value == null)
				{
					RepresentationType = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRepresentationItem>? _Items
		{
			get
			{
				if(Items != null)
				{
					IFC_Attributes<Global.IFCRepresentationItem>? items = new IFC_Attributes<Global.IFCRepresentationItem>();
					foreach (IFCRepresentationItem item in Items)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Items = null;
				}
				else
				{
					Items = new IFC_Attributes<IFCRepresentationItem>();
					foreach(var val in value)
					{
						if(val is IFCRepresentationItem v)
						{
							Items.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRepresentationMap>? _RepresentationMap
		{
			get
			{
				if(RepresentationMap != null)
				{
					IFC_Attributes<Global.IFCRepresentationMap>? items = new IFC_Attributes<Global.IFCRepresentationMap>();
					foreach (IFCRepresentationMap item in RepresentationMap)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCProductRepresentation>? _OfProductRepresentation
		{
			get
			{
				if(OfProductRepresentation != null)
				{
					IFC_Attributes<Global.IFCProductRepresentation>? items = new IFC_Attributes<Global.IFCProductRepresentation>();
					foreach (IFCProductRepresentation item in OfProductRepresentation)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRepresentationContext
	/// SUPERTYPE OF (ONEOF
	/// (IfcGeometricRepresentationContext));
	/// ContextIdentifier : OPTIONAL IfcLabel;
	/// ContextType : OPTIONAL IfcLabel;
	/// INVERSE
	/// RepresentationsInContext : SET [0:?] OF IfcRepresentation FOR ContextOfItems;
	/// END_ENTITY;
	/// <summary>
	public class IFCRepresentationContext : IFC_ClassEntity, Global.IFCRepresentationContext
	{
		public virtual IFCLabel? ContextIdentifier { get; set; }
		public virtual IFCLabel? ContextType { get; set; }
		public IFC_Attributes<IFCRepresentation>? RepresentationsInContext {get{return new IFC_Attributes<IFCRepresentation>(Model?.GetItems<IFCRepresentation>().Where(x => x.ContextOfItems != null && x.ContextOfItems == this).ToList());}}
		public IFCRepresentationContext() : base()
		{
		}
		public IFCRepresentationContext(IFCLabel? ContextIdentifier, IFCLabel? ContextType) : base ()
		{
			this.ContextIdentifier = ContextIdentifier;
			this.ContextType = ContextType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ContextIdentifier", ContextIdentifier},
				{"ContextType", ContextType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepresentationsInContext", RepresentationsInContext}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _ContextIdentifier
		{
			get
			{
				return ContextIdentifier;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ContextIdentifier = val;
				}
				else if(value == null)
				{
					ContextIdentifier = null;
				}
			}
		}
		public virtual Global.IFCLabel? _ContextType
		{
			get
			{
				return ContextType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ContextType = val;
				}
				else if(value == null)
				{
					ContextType = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRepresentation>? _RepresentationsInContext
		{
			get
			{
				if(RepresentationsInContext != null)
				{
					IFC_Attributes<Global.IFCRepresentation>? items = new IFC_Attributes<Global.IFCRepresentation>();
					foreach (IFCRepresentation item in RepresentationsInContext)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRepresentationItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcGeometricRepresentationItem
	/// ,IfcMappedItem
	/// ,IfcStyledItem
	/// ,IfcTopologicalRepresentationItem));
	/// INVERSE
	/// LayerAssignments : SET [0:?] OF IfcPresentationLayerAssignment FOR AssignedItems;
	/// StyledByItem : SET [0:1] OF IfcStyledItem FOR Item;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCRepresentationItem : IFC_ClassEntity, IFCLayeredItem, Global.IFCRepresentationItem
	{
		public IFC_Attributes<IFCPresentationLayerAssignment>? LayerAssignments {get{return new IFC_Attributes<IFCPresentationLayerAssignment>(Model?.GetItems<IFCPresentationLayerAssignment>().Where(x => x.AssignedItems != null && x.AssignedItems.Contains(this)).ToList());}}
		public IFC_Attributes<IFCStyledItem>? StyledByItem {get{return new IFC_Attributes<IFCStyledItem>(Model?.GetItems<IFCStyledItem>().Where(x => x.Item != null && x.Item == this).ToList());}}
		public IFCRepresentationItem() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCPresentationLayerAssignment>? _LayerAssignments
		{
			get
			{
				if(LayerAssignments != null)
				{
					IFC_Attributes<Global.IFCPresentationLayerAssignment>? items = new IFC_Attributes<Global.IFCPresentationLayerAssignment>();
					foreach (IFCPresentationLayerAssignment item in LayerAssignments)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCStyledItem>? _StyledByItem
		{
			get
			{
				if(StyledByItem != null)
				{
					IFC_Attributes<Global.IFCStyledItem>? items = new IFC_Attributes<Global.IFCStyledItem>();
					foreach (IFCStyledItem item in StyledByItem)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRepresentationMap;
	/// MappingOrigin : IfcAxis2Placement;
	/// MappedRepresentation : IfcRepresentation;
	/// INVERSE
	/// MapUsage : SET [0:?] OF IfcMappedItem FOR MappingSource;
	/// END_ENTITY;
	/// <summary>
	public class IFCRepresentationMap : IFC_ClassEntity, Global.IFCRepresentationMap
	{
		public virtual IFCAxis2Placement? MappingOrigin { get; set; }
		public virtual IFCRepresentation? MappedRepresentation { get; set; }
		public IFC_Attributes<IFCMappedItem>? MapUsage {get{return new IFC_Attributes<IFCMappedItem>(Model?.GetItems<IFCMappedItem>().Where(x => x.MappingSource != null && x.MappingSource == this).ToList());}}
		public IFCRepresentationMap() : base()
		{
		}
		public IFCRepresentationMap(IFCAxis2Placement? MappingOrigin, IFCRepresentation? MappedRepresentation) : base ()
		{
			this.MappingOrigin = MappingOrigin;
			this.MappedRepresentation = MappedRepresentation;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"MappingOrigin", MappingOrigin},
				{"MappedRepresentation", MappedRepresentation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"MapUsage", MapUsage}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCAxis2Placement? _MappingOrigin
		{
			get
			{
				return MappingOrigin;
			}
			set
			{
				if(value is IFCAxis2Placement val)
				{
					MappingOrigin = val;
				}
				else if(value == null)
				{
					MappingOrigin = null;
				}
			}
		}
		public virtual Global.IFCRepresentation? _MappedRepresentation
		{
			get
			{
				return MappedRepresentation;
			}
			set
			{
				if(value is IFCRepresentation val)
				{
					MappedRepresentation = val;
				}
				else if(value == null)
				{
					MappedRepresentation = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCMappedItem>? _MapUsage
		{
			get
			{
				if(MapUsage != null)
				{
					IFC_Attributes<Global.IFCMappedItem>? items = new IFC_Attributes<Global.IFCMappedItem>();
					foreach (IFCMappedItem item in MapUsage)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcResource
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConstructionResource))
	/// SUBTYPE OF (IfcObject);
	/// INVERSE
	/// ResourceOf : SET [0:?] OF IfcRelAssignsToResource FOR RelatingResource;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCResource : IFCObject, Global.IFCResource
	{
		public IFC_Attributes<IFCRelAssignsToResource>? ResourceOf {get{return new IFC_Attributes<IFCRelAssignsToResource>(Model?.GetItems<IFCRelAssignsToResource>().Where(x => x.RelatingResource != null && x.RelatingResource == this).ToList());}}
		public IFCResource() : base()
		{
		}
		public IFCResource(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ResourceOf", ResourceOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCRelAssignsToResource>? _ResourceOf
		{
			get
			{
				if(ResourceOf != null)
				{
					IFC_Attributes<Global.IFCRelAssignsToResource>? items = new IFC_Attributes<Global.IFCRelAssignsToResource>();
					foreach (IFCRelAssignsToResource item in ResourceOf)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRevolvedAreaSolid
	/// SUBTYPE OF (IfcSweptAreaSolid);
	/// Axis : IfcAxis1Placement;
	/// Angle : IfcPlaneAngleMeasure;
	/// DERIVE
	/// AxisLine : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(Axis.Location,
	/// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(Axis.Z,1.0));
	/// WHERE
	/// WR31 : Axis.Location.Coordinates[3] = 0.0;
	/// WR32 : Axis.Z.DirectionRatios[3] = 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IFCRevolvedAreaSolid : IFCSweptAreaSolid, Global.IFCRevolvedAreaSolid
	{
		public virtual IFCAxis1Placement? Axis { get; set; }
		public virtual IFCPlaneAngleMeasure? Angle { get; set; }
		public virtual IFCLine? AxisLine
		{
			get
			{
				//MANUAL : IFC2x3.IFCRevolvedAreaSolid.AxisLine
				// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(Axis.Location,
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR32
		{
			get
			{
				return true;
			}
		}
		public IFCRevolvedAreaSolid() : base()
		{
		}
		public IFCRevolvedAreaSolid(IFCProfileDef? SweptArea, IFCAxis2Placement3D? Position, IFCAxis1Placement? Axis, IFCPlaneAngleMeasure? Angle) : base (SweptArea, Position)
		{
			this.Axis = Axis;
			this.Angle = Angle;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SweptArea", SweptArea},
				{"Position", Position},
				{"Axis", Axis},
				{"Angle", Angle}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim},
				{"AxisLine", AxisLine}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR22", is_WR22},
				{"is_WR31", is_WR31},
				{"is_WR32", is_WR32}
			};
		}
		public virtual Global.IFCAxis1Placement? _Axis
		{
			get
			{
				return Axis;
			}
			set
			{
				if(value is IFCAxis1Placement val)
				{
					Axis = val;
				}
				else if(value == null)
				{
					Axis = null;
				}
			}
		}
		public virtual Global.IFCPlaneAngleMeasure? _Angle
		{
			get
			{
				return Angle;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					Angle = val;
				}
				else if(value == null)
				{
					Angle = null;
				}
			}
		}
		public virtual Global.IFCLine? _AxisLine
		{
			get
			{
				return AxisLine;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRibPlateProfileProperties
	/// SUBTYPE OF (IfcProfileProperties);
	/// Thickness : OPTIONAL IfcPositiveLengthMeasure;
	/// RibHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// RibWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// RibSpacing : OPTIONAL IfcPositiveLengthMeasure;
	/// Direction : IfcRibPlateDirectionEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCRibPlateProfileProperties : IFCProfileProperties, Global.IFCRibPlateProfileProperties
	{
		public virtual IFCPositiveLengthMeasure? Thickness { get; set; }
		public virtual IFCPositiveLengthMeasure? RibHeight { get; set; }
		public virtual IFCPositiveLengthMeasure? RibWidth { get; set; }
		public virtual IFCPositiveLengthMeasure? RibSpacing { get; set; }
		public virtual IFCRibPlateDirectionEnum? Direction { get; set; }
		public IFCRibPlateProfileProperties() : base()
		{
		}
		public IFCRibPlateProfileProperties(IFCLabel? ProfileName, IFCProfileDef? ProfileDefinition, IFCPositiveLengthMeasure? Thickness, IFCPositiveLengthMeasure? RibHeight, IFCPositiveLengthMeasure? RibWidth, IFCPositiveLengthMeasure? RibSpacing, IFCRibPlateDirectionEnum? Direction) : base (ProfileName, ProfileDefinition)
		{
			this.Thickness = Thickness;
			this.RibHeight = RibHeight;
			this.RibWidth = RibWidth;
			this.RibSpacing = RibSpacing;
			this.Direction = Direction;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileName", ProfileName},
				{"ProfileDefinition", ProfileDefinition},
				{"Thickness", Thickness},
				{"RibHeight", RibHeight},
				{"RibWidth", RibWidth},
				{"RibSpacing", RibSpacing},
				{"Direction", Direction}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Thickness
		{
			get
			{
				return Thickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Thickness = val;
				}
				else if(value == null)
				{
					Thickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _RibHeight
		{
			get
			{
				return RibHeight;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					RibHeight = val;
				}
				else if(value == null)
				{
					RibHeight = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _RibWidth
		{
			get
			{
				return RibWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					RibWidth = val;
				}
				else if(value == null)
				{
					RibWidth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _RibSpacing
		{
			get
			{
				return RibSpacing;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					RibSpacing = val;
				}
				else if(value == null)
				{
					RibSpacing = null;
				}
			}
		}
		public virtual Global.IFCRibPlateDirectionEnum? _Direction
		{
			get
			{
				return Direction;
			}
			set
			{
				if(value is IFCRibPlateDirectionEnum val)
				{
					Direction = val;
				}
				else if(value == null)
				{
					Direction = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRightCircularCone
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// Height : IfcPositiveLengthMeasure;
	/// BottomRadius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCRightCircularCone : IFCCsgPrimitive3D, Global.IFCRightCircularCone
	{
		public virtual IFCPositiveLengthMeasure? Height { get; set; }
		public virtual IFCPositiveLengthMeasure? BottomRadius { get; set; }
		public IFCRightCircularCone() : base()
		{
		}
		public IFCRightCircularCone(IFCAxis2Placement3D? Position, IFCPositiveLengthMeasure? Height, IFCPositiveLengthMeasure? BottomRadius) : base (Position)
		{
			this.Height = Height;
			this.BottomRadius = BottomRadius;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Position", Position},
				{"Height", Height},
				{"BottomRadius", BottomRadius}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Height
		{
			get
			{
				return Height;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Height = val;
				}
				else if(value == null)
				{
					Height = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _BottomRadius
		{
			get
			{
				return BottomRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BottomRadius = val;
				}
				else if(value == null)
				{
					BottomRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRightCircularCylinder
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// Height : IfcPositiveLengthMeasure;
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCRightCircularCylinder : IFCCsgPrimitive3D, Global.IFCRightCircularCylinder
	{
		public virtual IFCPositiveLengthMeasure? Height { get; set; }
		public virtual IFCPositiveLengthMeasure? Radius { get; set; }
		public IFCRightCircularCylinder() : base()
		{
		}
		public IFCRightCircularCylinder(IFCAxis2Placement3D? Position, IFCPositiveLengthMeasure? Height, IFCPositiveLengthMeasure? Radius) : base (Position)
		{
			this.Height = Height;
			this.Radius = Radius;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Position", Position},
				{"Height", Height},
				{"Radius", Radius}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Height
		{
			get
			{
				return Height;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Height = val;
				}
				else if(value == null)
				{
					Height = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRoof
	/// SUBTYPE OF (IfcBuildingElement);
	/// ShapeType : IfcRoofTypeEnum;
	/// WHERE
	/// WR1 : (HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 0) OR
	/// ((HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 1) AND (NOT(EXISTS(SELF\IfcProduct.Representation))));
	/// END_ENTITY;
	/// <summary>
	public class IFCRoof : IFCBuildingElement, Global.IFCRoof
	{
		public virtual IFCRoofTypeEnum? ShapeType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCRoof() : base()
		{
		}
		public IFCRoof(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCRoofTypeEnum? ShapeType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.ShapeType = ShapeType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"ShapeType", ShapeType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCRoofTypeEnum? _ShapeType
		{
			get
			{
				return ShapeType;
			}
			set
			{
				if(value is IFCRoofTypeEnum val)
				{
					ShapeType = val;
				}
				else if(value == null)
				{
					ShapeType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRoot
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcObjectDefinition
	/// ,IfcPropertyDefinition
	/// ,IfcRelationship));
	/// GlobalId : IfcGloballyUniqueId;
	/// OwnerHistory : IfcOwnerHistory;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// UNIQUE
	/// UR1 : GlobalId;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCRoot : IFC_ClassEntity, Global.IFCRoot
	{
		public virtual IFCGloballyUniqueId? GlobalId { get; set; }
		public virtual IFCOwnerHistory? OwnerHistory { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public IFCRoot() : base()
		{
		}
		public IFCRoot(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description) : base ()
		{
			this.GlobalId = GlobalId;
			this.OwnerHistory = OwnerHistory;
			this.Name = Name;
			this.Description = Description;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCGloballyUniqueId? _GlobalId
		{
			get
			{
				return GlobalId;
			}
			set
			{
				if(value is IFCGloballyUniqueId val)
				{
					GlobalId = val;
				}
				else if(value == null)
				{
					GlobalId = null;
				}
			}
		}
		public virtual Global.IFCOwnerHistory? _OwnerHistory
		{
			get
			{
				return OwnerHistory;
			}
			set
			{
				if(value is IFCOwnerHistory val)
				{
					OwnerHistory = val;
				}
				else if(value == null)
				{
					OwnerHistory = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRoundedEdgeFeature
	/// SUBTYPE OF (IfcEdgeFeature);
	/// Radius : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCRoundedEdgeFeature : IFCEdgeFeature, Global.IFCRoundedEdgeFeature
	{
		public virtual IFCPositiveLengthMeasure? Radius { get; set; }
		public IFCRoundedEdgeFeature() : base()
		{
		}
		public IFCRoundedEdgeFeature(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCPositiveLengthMeasure? FeatureLength, IFCPositiveLengthMeasure? Radius) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, FeatureLength)
		{
			this.Radius = Radius;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"FeatureLength", FeatureLength},
				{"Radius", Radius}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure},
				{"VoidsElements", VoidsElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcRoundedRectangleProfileDef
	/// SUBTYPE OF (IfcRectangleProfileDef);
	/// RoundingRadius : IfcPositiveLengthMeasure;
	/// WHERE
	/// WR31 : ((RoundingRadius <= (SELF\IfcRectangleProfileDef.XDim/2.)) AND
	/// (RoundingRadius <= (SELF\IfcRectangleProfileDef.YDim/2.)));
	/// END_ENTITY;
	/// <summary>
	public class IFCRoundedRectangleProfileDef : IFCRectangleProfileDef, Global.IFCRoundedRectangleProfileDef
	{
		public virtual IFCPositiveLengthMeasure? RoundingRadius { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCRoundedRectangleProfileDef() : base()
		{
		}
		public IFCRoundedRectangleProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? XDim, IFCPositiveLengthMeasure? YDim, IFCPositiveLengthMeasure? RoundingRadius) : base (ProfileType, ProfileName, Position, XDim, YDim)
		{
			this.RoundingRadius = RoundingRadius;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"XDim", XDim},
				{"YDim", YDim},
				{"RoundingRadius", RoundingRadius}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _RoundingRadius
		{
			get
			{
				return RoundingRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					RoundingRadius = val;
				}
				else if(value == null)
				{
					RoundingRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSIUnit
	/// SUBTYPE OF (IfcNamedUnit);
	/// Prefix : OPTIONAL IfcSIPrefix;
	/// Name : IfcSIUnitName;
	/// DERIVE
	/// SELF\IfcNamedUnit.Dimensions : IfcDimensionalExponents := IfcDimensionsForSiUnit (SELF.Name);
	/// END_ENTITY;
	/// <summary>
	public class IFCSIUnit : IFCNamedUnit, Global.IFCSIUnit
	{
		public virtual IFCSIPrefix? Prefix { get; set; }
		public virtual IFCSIUnitName? Name { get; set; }
		public override IFCDimensionalExponents? Dimensions
		{
			get
			{
				//MANUAL : IFC2x3.IFCSIUnit.Dimensions
				// IfcDimensionsForSiUnit (SELF.Name);
				return null;
				//END_MANUAL
			}
		}
		public IFCSIUnit() : base()
		{
		}
		public IFCSIUnit(IFCDimensionalExponents? Dimensions, IFCUnitEnum? UnitType, IFCSIPrefix? Prefix, IFCSIUnitName? Name) : base (Dimensions, UnitType)
		{
			this.Prefix = Prefix;
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dimensions", Dimensions},
				{"UnitType", UnitType},
				{"Prefix", Prefix},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dimensions", Dimensions}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCSIPrefix? _Prefix
		{
			get
			{
				return Prefix;
			}
			set
			{
				if(value is IFCSIPrefix val)
				{
					Prefix = val;
				}
				else if(value == null)
				{
					Prefix = null;
				}
			}
		}
		public virtual Global.IFCSIUnitName? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCSIUnitName val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public override Global.IFCDimensionalExponents? _Dimensions
		{
			get
			{
				return Dimensions;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSanitaryTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcSanitaryTerminalTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCSanitaryTerminalType : IFCFlowTerminalType, Global.IFCSanitaryTerminalType
	{
		public virtual IFCSanitaryTerminalTypeEnum? PredefinedType { get; set; }
		public IFCSanitaryTerminalType() : base()
		{
		}
		public IFCSanitaryTerminalType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCSanitaryTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCSanitaryTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCSanitaryTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcScheduleTimeControl
	/// SUBTYPE OF (IfcControl);
	/// ActualStart : OPTIONAL IfcDateTimeSelect;
	/// EarlyStart : OPTIONAL IfcDateTimeSelect;
	/// LateStart : OPTIONAL IfcDateTimeSelect;
	/// ScheduleStart : OPTIONAL IfcDateTimeSelect;
	/// ActualFinish : OPTIONAL IfcDateTimeSelect;
	/// EarlyFinish : OPTIONAL IfcDateTimeSelect;
	/// LateFinish : OPTIONAL IfcDateTimeSelect;
	/// ScheduleFinish : OPTIONAL IfcDateTimeSelect;
	/// ScheduleDuration : OPTIONAL IfcTimeMeasure;
	/// ActualDuration : OPTIONAL IfcTimeMeasure;
	/// RemainingTime : OPTIONAL IfcTimeMeasure;
	/// FreeFloat : OPTIONAL IfcTimeMeasure;
	/// TotalFloat : OPTIONAL IfcTimeMeasure;
	/// IsCritical : OPTIONAL BOOLEAN;
	/// StatusTime : OPTIONAL IfcDateTimeSelect;
	/// StartFloat : OPTIONAL IfcTimeMeasure;
	/// FinishFloat : OPTIONAL IfcTimeMeasure;
	/// Completion : OPTIONAL IfcPositiveRatioMeasure;
	/// INVERSE
	/// ScheduleTimeControlAssigned : IfcRelAssignsTasks FOR TimeForTask;
	/// END_ENTITY;
	/// <summary>
	public class IFCScheduleTimeControl : IFCControl, Global.IFCScheduleTimeControl
	{
		public virtual IFCDateTimeSelect? ActualStart { get; set; }
		public virtual IFCDateTimeSelect? EarlyStart { get; set; }
		public virtual IFCDateTimeSelect? LateStart { get; set; }
		public virtual IFCDateTimeSelect? ScheduleStart { get; set; }
		public virtual IFCDateTimeSelect? ActualFinish { get; set; }
		public virtual IFCDateTimeSelect? EarlyFinish { get; set; }
		public virtual IFCDateTimeSelect? LateFinish { get; set; }
		public virtual IFCDateTimeSelect? ScheduleFinish { get; set; }
		public virtual IFCTimeMeasure? ScheduleDuration { get; set; }
		public virtual IFCTimeMeasure? ActualDuration { get; set; }
		public virtual IFCTimeMeasure? RemainingTime { get; set; }
		public virtual IFCTimeMeasure? FreeFloat { get; set; }
		public virtual IFCTimeMeasure? TotalFloat { get; set; }
		public virtual BOOLEAN? IsCritical { get; set; }
		public virtual IFCDateTimeSelect? StatusTime { get; set; }
		public virtual IFCTimeMeasure? StartFloat { get; set; }
		public virtual IFCTimeMeasure? FinishFloat { get; set; }
		public virtual IFCPositiveRatioMeasure? Completion { get; set; }
		public IFCRelAssignsTasks? ScheduleTimeControlAssigned {get{return Model?.GetItems<IFCRelAssignsTasks>().FirstOrDefault(x => x.TimeForTask != null && x.TimeForTask == this);}}
		public IFCScheduleTimeControl() : base()
		{
		}
		public IFCScheduleTimeControl(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCDateTimeSelect? ActualStart, IFCDateTimeSelect? EarlyStart, IFCDateTimeSelect? LateStart, IFCDateTimeSelect? ScheduleStart, IFCDateTimeSelect? ActualFinish, IFCDateTimeSelect? EarlyFinish, IFCDateTimeSelect? LateFinish, IFCDateTimeSelect? ScheduleFinish, IFCTimeMeasure? ScheduleDuration, IFCTimeMeasure? ActualDuration, IFCTimeMeasure? RemainingTime, IFCTimeMeasure? FreeFloat, IFCTimeMeasure? TotalFloat, BOOLEAN? IsCritical, IFCDateTimeSelect? StatusTime, IFCTimeMeasure? StartFloat, IFCTimeMeasure? FinishFloat, IFCPositiveRatioMeasure? Completion) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ActualStart = ActualStart;
			this.EarlyStart = EarlyStart;
			this.LateStart = LateStart;
			this.ScheduleStart = ScheduleStart;
			this.ActualFinish = ActualFinish;
			this.EarlyFinish = EarlyFinish;
			this.LateFinish = LateFinish;
			this.ScheduleFinish = ScheduleFinish;
			this.ScheduleDuration = ScheduleDuration;
			this.ActualDuration = ActualDuration;
			this.RemainingTime = RemainingTime;
			this.FreeFloat = FreeFloat;
			this.TotalFloat = TotalFloat;
			this.IsCritical = IsCritical;
			this.StatusTime = StatusTime;
			this.StartFloat = StartFloat;
			this.FinishFloat = FinishFloat;
			this.Completion = Completion;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ActualStart", ActualStart},
				{"EarlyStart", EarlyStart},
				{"LateStart", LateStart},
				{"ScheduleStart", ScheduleStart},
				{"ActualFinish", ActualFinish},
				{"EarlyFinish", EarlyFinish},
				{"LateFinish", LateFinish},
				{"ScheduleFinish", ScheduleFinish},
				{"ScheduleDuration", ScheduleDuration},
				{"ActualDuration", ActualDuration},
				{"RemainingTime", RemainingTime},
				{"FreeFloat", FreeFloat},
				{"TotalFloat", TotalFloat},
				{"IsCritical", IsCritical},
				{"StatusTime", StatusTime},
				{"StartFloat", StartFloat},
				{"FinishFloat", FinishFloat},
				{"Completion", Completion}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls},
				{"ScheduleTimeControlAssigned", ScheduleTimeControlAssigned}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCDateTimeSelect? _ActualStart
		{
			get
			{
				return ActualStart;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					ActualStart = val;
				}
				else if(value == null)
				{
					ActualStart = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _EarlyStart
		{
			get
			{
				return EarlyStart;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					EarlyStart = val;
				}
				else if(value == null)
				{
					EarlyStart = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _LateStart
		{
			get
			{
				return LateStart;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					LateStart = val;
				}
				else if(value == null)
				{
					LateStart = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _ScheduleStart
		{
			get
			{
				return ScheduleStart;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					ScheduleStart = val;
				}
				else if(value == null)
				{
					ScheduleStart = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _ActualFinish
		{
			get
			{
				return ActualFinish;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					ActualFinish = val;
				}
				else if(value == null)
				{
					ActualFinish = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _EarlyFinish
		{
			get
			{
				return EarlyFinish;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					EarlyFinish = val;
				}
				else if(value == null)
				{
					EarlyFinish = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _LateFinish
		{
			get
			{
				return LateFinish;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					LateFinish = val;
				}
				else if(value == null)
				{
					LateFinish = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _ScheduleFinish
		{
			get
			{
				return ScheduleFinish;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					ScheduleFinish = val;
				}
				else if(value == null)
				{
					ScheduleFinish = null;
				}
			}
		}
		public virtual Global.IFCTimeMeasure? _ScheduleDuration
		{
			get
			{
				return ScheduleDuration;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					ScheduleDuration = val;
				}
				else if(value == null)
				{
					ScheduleDuration = null;
				}
			}
		}
		public virtual Global.IFCTimeMeasure? _ActualDuration
		{
			get
			{
				return ActualDuration;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					ActualDuration = val;
				}
				else if(value == null)
				{
					ActualDuration = null;
				}
			}
		}
		public virtual Global.IFCTimeMeasure? _RemainingTime
		{
			get
			{
				return RemainingTime;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					RemainingTime = val;
				}
				else if(value == null)
				{
					RemainingTime = null;
				}
			}
		}
		public virtual Global.IFCTimeMeasure? _FreeFloat
		{
			get
			{
				return FreeFloat;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					FreeFloat = val;
				}
				else if(value == null)
				{
					FreeFloat = null;
				}
			}
		}
		public virtual Global.IFCTimeMeasure? _TotalFloat
		{
			get
			{
				return TotalFloat;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					TotalFloat = val;
				}
				else if(value == null)
				{
					TotalFloat = null;
				}
			}
		}
		public virtual BOOLEAN? _IsCritical
		{
			get
			{
				return IsCritical;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					IsCritical = val;
				}
				else if(value == null)
				{
					IsCritical = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _StatusTime
		{
			get
			{
				return StatusTime;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					StatusTime = val;
				}
				else if(value == null)
				{
					StatusTime = null;
				}
			}
		}
		public virtual Global.IFCTimeMeasure? _StartFloat
		{
			get
			{
				return StartFloat;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					StartFloat = val;
				}
				else if(value == null)
				{
					StartFloat = null;
				}
			}
		}
		public virtual Global.IFCTimeMeasure? _FinishFloat
		{
			get
			{
				return FinishFloat;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					FinishFloat = val;
				}
				else if(value == null)
				{
					FinishFloat = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _Completion
		{
			get
			{
				return Completion;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					Completion = val;
				}
				else if(value == null)
				{
					Completion = null;
				}
			}
		}
		public virtual Global.IFCRelAssignsTasks? _ScheduleTimeControlAssigned
		{
			get
			{
				return ScheduleTimeControlAssigned;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSectionProperties;
	/// SectionType : IfcSectionTypeEnum;
	/// StartProfile : IfcProfileDef;
	/// EndProfile : OPTIONAL IfcProfileDef;
	/// END_ENTITY;
	/// <summary>
	public class IFCSectionProperties : IFC_ClassEntity, Global.IFCSectionProperties
	{
		public virtual IFCSectionTypeEnum? SectionType { get; set; }
		public virtual IFCProfileDef? StartProfile { get; set; }
		public virtual IFCProfileDef? EndProfile { get; set; }
		public IFCSectionProperties() : base()
		{
		}
		public IFCSectionProperties(IFCSectionTypeEnum? SectionType, IFCProfileDef? StartProfile, IFCProfileDef? EndProfile) : base ()
		{
			this.SectionType = SectionType;
			this.StartProfile = StartProfile;
			this.EndProfile = EndProfile;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SectionType", SectionType},
				{"StartProfile", StartProfile},
				{"EndProfile", EndProfile}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCSectionTypeEnum? _SectionType
		{
			get
			{
				return SectionType;
			}
			set
			{
				if(value is IFCSectionTypeEnum val)
				{
					SectionType = val;
				}
				else if(value == null)
				{
					SectionType = null;
				}
			}
		}
		public virtual Global.IFCProfileDef? _StartProfile
		{
			get
			{
				return StartProfile;
			}
			set
			{
				if(value is IFCProfileDef val)
				{
					StartProfile = val;
				}
				else if(value == null)
				{
					StartProfile = null;
				}
			}
		}
		public virtual Global.IFCProfileDef? _EndProfile
		{
			get
			{
				return EndProfile;
			}
			set
			{
				if(value is IFCProfileDef val)
				{
					EndProfile = val;
				}
				else if(value == null)
				{
					EndProfile = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSectionReinforcementProperties;
	/// LongitudinalStartPosition : IfcLengthMeasure;
	/// LongitudinalEndPosition : IfcLengthMeasure;
	/// TransversePosition : OPTIONAL IfcLengthMeasure;
	/// ReinforcementRole : IfcReinforcingBarRoleEnum;
	/// SectionDefinition : IfcSectionProperties;
	/// CrossSectionReinforcementDefinitions : SET [1:?] OF IfcReinforcementBarProperties;
	/// END_ENTITY;
	/// <summary>
	public class IFCSectionReinforcementProperties : IFC_ClassEntity, Global.IFCSectionReinforcementProperties
	{
		public virtual IFCLengthMeasure? LongitudinalStartPosition { get; set; }
		public virtual IFCLengthMeasure? LongitudinalEndPosition { get; set; }
		public virtual IFCLengthMeasure? TransversePosition { get; set; }
		public virtual IFCReinforcingBarRoleEnum? ReinforcementRole { get; set; }
		public virtual IFCSectionProperties? SectionDefinition { get; set; }
		public virtual IFC_Attributes<IFCReinforcementBarProperties>? CrossSectionReinforcementDefinitions { get; set; }
		public IFCSectionReinforcementProperties() : base()
		{
		}
		public IFCSectionReinforcementProperties(IFCLengthMeasure? LongitudinalStartPosition, IFCLengthMeasure? LongitudinalEndPosition, IFCLengthMeasure? TransversePosition, IFCReinforcingBarRoleEnum? ReinforcementRole, IFCSectionProperties? SectionDefinition, IFC_Attributes<IFCReinforcementBarProperties>? CrossSectionReinforcementDefinitions) : base ()
		{
			this.LongitudinalStartPosition = LongitudinalStartPosition;
			this.LongitudinalEndPosition = LongitudinalEndPosition;
			this.TransversePosition = TransversePosition;
			this.ReinforcementRole = ReinforcementRole;
			this.SectionDefinition = SectionDefinition;
			this.CrossSectionReinforcementDefinitions = CrossSectionReinforcementDefinitions;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LongitudinalStartPosition", LongitudinalStartPosition},
				{"LongitudinalEndPosition", LongitudinalEndPosition},
				{"TransversePosition", TransversePosition},
				{"ReinforcementRole", ReinforcementRole},
				{"SectionDefinition", SectionDefinition},
				{"CrossSectionReinforcementDefinitions", CrossSectionReinforcementDefinitions}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLengthMeasure? _LongitudinalStartPosition
		{
			get
			{
				return LongitudinalStartPosition;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					LongitudinalStartPosition = val;
				}
				else if(value == null)
				{
					LongitudinalStartPosition = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _LongitudinalEndPosition
		{
			get
			{
				return LongitudinalEndPosition;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					LongitudinalEndPosition = val;
				}
				else if(value == null)
				{
					LongitudinalEndPosition = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _TransversePosition
		{
			get
			{
				return TransversePosition;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					TransversePosition = val;
				}
				else if(value == null)
				{
					TransversePosition = null;
				}
			}
		}
		public virtual Global.IFCReinforcingBarRoleEnum? _ReinforcementRole
		{
			get
			{
				return ReinforcementRole;
			}
			set
			{
				if(value is IFCReinforcingBarRoleEnum val)
				{
					ReinforcementRole = val;
				}
				else if(value == null)
				{
					ReinforcementRole = null;
				}
			}
		}
		public virtual Global.IFCSectionProperties? _SectionDefinition
		{
			get
			{
				return SectionDefinition;
			}
			set
			{
				if(value is IFCSectionProperties val)
				{
					SectionDefinition = val;
				}
				else if(value == null)
				{
					SectionDefinition = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCReinforcementBarProperties>? _CrossSectionReinforcementDefinitions
		{
			get
			{
				if(CrossSectionReinforcementDefinitions != null)
				{
					IFC_Attributes<Global.IFCReinforcementBarProperties>? items = new IFC_Attributes<Global.IFCReinforcementBarProperties>();
					foreach (IFCReinforcementBarProperties item in CrossSectionReinforcementDefinitions)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CrossSectionReinforcementDefinitions = null;
				}
				else
				{
					CrossSectionReinforcementDefinitions = new IFC_Attributes<IFCReinforcementBarProperties>();
					foreach(var val in value)
					{
						if(val is IFCReinforcementBarProperties v)
						{
							CrossSectionReinforcementDefinitions.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSectionedSpine
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// SpineCurve : IfcCompositeCurve;
	/// CrossSections : LIST [2:?] OF IfcProfileDef;
	/// CrossSectionPositions : LIST [2:?] OF IfcAxis2Placement3D;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// WHERE
	/// WR1 : SIZEOF(CrossSections) = SIZEOF(CrossSectionPositions);
	/// WR2 : SIZEOF(QUERY(temp <* CrossSections | CrossSections[1].ProfileType <> temp.ProfileType)) = 0;
	/// WR3 : SpineCurve.Dim = 3;
	/// END_ENTITY;
	/// <summary>
	public class IFCSectionedSpine : IFCGeometricRepresentationItem, Global.IFCSectionedSpine
	{
		public virtual IFCCompositeCurve? SpineCurve { get; set; }
		public virtual IFC_Attributes<IFCProfileDef>? CrossSections { get; set; }
		public virtual IFC_Attributes<IFCAxis2Placement3D>? CrossSectionPositions { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCSectionedSpine.Dim
				// 3;
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCSectionedSpine() : base()
		{
		}
		public IFCSectionedSpine(IFCCompositeCurve? SpineCurve, IFC_Attributes<IFCProfileDef>? CrossSections, IFC_Attributes<IFCAxis2Placement3D>? CrossSectionPositions) : base ()
		{
			this.SpineCurve = SpineCurve;
			this.CrossSections = CrossSections;
			this.CrossSectionPositions = CrossSectionPositions;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SpineCurve", SpineCurve},
				{"CrossSections", CrossSections},
				{"CrossSectionPositions", CrossSectionPositions}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual Global.IFCCompositeCurve? _SpineCurve
		{
			get
			{
				return SpineCurve;
			}
			set
			{
				if(value is IFCCompositeCurve val)
				{
					SpineCurve = val;
				}
				else if(value == null)
				{
					SpineCurve = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCProfileDef>? _CrossSections
		{
			get
			{
				if(CrossSections != null)
				{
					IFC_Attributes<Global.IFCProfileDef>? items = new IFC_Attributes<Global.IFCProfileDef>();
					foreach (IFCProfileDef item in CrossSections)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CrossSections = null;
				}
				else
				{
					CrossSections = new IFC_Attributes<IFCProfileDef>();
					foreach(var val in value)
					{
						if(val is IFCProfileDef v)
						{
							CrossSections.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCAxis2Placement3D>? _CrossSectionPositions
		{
			get
			{
				if(CrossSectionPositions != null)
				{
					IFC_Attributes<Global.IFCAxis2Placement3D>? items = new IFC_Attributes<Global.IFCAxis2Placement3D>();
					foreach (IFCAxis2Placement3D item in CrossSectionPositions)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					CrossSectionPositions = null;
				}
				else
				{
					CrossSectionPositions = new IFC_Attributes<IFCAxis2Placement3D>();
					foreach(var val in value)
					{
						if(val is IFCAxis2Placement3D v)
						{
							CrossSectionPositions.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSensorType
	/// SUBTYPE OF (IfcDistributionControlElementType);
	/// PredefinedType : IfcSensorTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCSensorType : IFCDistributionControlElementType, Global.IFCSensorType
	{
		public virtual IFCSensorTypeEnum? PredefinedType { get; set; }
		public IFCSensorType() : base()
		{
		}
		public IFCSensorType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCSensorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCSensorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCSensorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcServiceLife
	/// SUBTYPE OF (IfcControl);
	/// ServiceLifeType : IfcServiceLifeTypeEnum;
	/// ServiceLifeDuration : IfcTimeMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCServiceLife : IFCControl, Global.IFCServiceLife
	{
		public virtual IFCServiceLifeTypeEnum? ServiceLifeType { get; set; }
		public virtual IFCTimeMeasure? ServiceLifeDuration { get; set; }
		public IFCServiceLife() : base()
		{
		}
		public IFCServiceLife(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCServiceLifeTypeEnum? ServiceLifeType, IFCTimeMeasure? ServiceLifeDuration) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ServiceLifeType = ServiceLifeType;
			this.ServiceLifeDuration = ServiceLifeDuration;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ServiceLifeType", ServiceLifeType},
				{"ServiceLifeDuration", ServiceLifeDuration}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCServiceLifeTypeEnum? _ServiceLifeType
		{
			get
			{
				return ServiceLifeType;
			}
			set
			{
				if(value is IFCServiceLifeTypeEnum val)
				{
					ServiceLifeType = val;
				}
				else if(value == null)
				{
					ServiceLifeType = null;
				}
			}
		}
		public virtual Global.IFCTimeMeasure? _ServiceLifeDuration
		{
			get
			{
				return ServiceLifeDuration;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					ServiceLifeDuration = val;
				}
				else if(value == null)
				{
					ServiceLifeDuration = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcServiceLifeFactor
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// PredefinedType : IfcServiceLifeFactorTypeEnum;
	/// UpperValue : OPTIONAL IfcMeasureValue;
	/// MostUsedValue : IfcMeasureValue;
	/// LowerValue : OPTIONAL IfcMeasureValue;
	/// WHERE
	/// WR31 : NOT(PredefinedType = IfcServiceLifeFactorTypeEnum.USERDEFINED)
	/// OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IFCServiceLifeFactor : IFCPropertySetDefinition, Global.IFCServiceLifeFactor
	{
		public virtual IFCServiceLifeFactorTypeEnum? PredefinedType { get; set; }
		public virtual IFCMeasureValue? UpperValue { get; set; }
		public virtual IFCMeasureValue? MostUsedValue { get; set; }
		public virtual IFCMeasureValue? LowerValue { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCServiceLifeFactor() : base()
		{
		}
		public IFCServiceLifeFactor(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCServiceLifeFactorTypeEnum? PredefinedType, IFCMeasureValue? UpperValue, IFCMeasureValue? MostUsedValue, IFCMeasureValue? LowerValue) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.PredefinedType = PredefinedType;
			this.UpperValue = UpperValue;
			this.MostUsedValue = MostUsedValue;
			this.LowerValue = LowerValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"PredefinedType", PredefinedType},
				{"UpperValue", UpperValue},
				{"MostUsedValue", MostUsedValue},
				{"LowerValue", LowerValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual Global.IFCServiceLifeFactorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCServiceLifeFactorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IFCMeasureValue? _UpperValue
		{
			get
			{
				return UpperValue;
			}
			set
			{
				if(value is IFCMeasureValue val)
				{
					UpperValue = val;
				}
				else if(value == null)
				{
					UpperValue = null;
				}
			}
		}
		public virtual Global.IFCMeasureValue? _MostUsedValue
		{
			get
			{
				return MostUsedValue;
			}
			set
			{
				if(value is IFCMeasureValue val)
				{
					MostUsedValue = val;
				}
				else if(value == null)
				{
					MostUsedValue = null;
				}
			}
		}
		public virtual Global.IFCMeasureValue? _LowerValue
		{
			get
			{
				return LowerValue;
			}
			set
			{
				if(value is IFCMeasureValue val)
				{
					LowerValue = val;
				}
				else if(value == null)
				{
					LowerValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcShapeAspect;
	/// ShapeRepresentations : LIST [1:?] OF IfcShapeModel;
	/// Name : OPTIONAL IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// ProductDefinitional : LOGICAL;
	/// PartOfProductDefinitionShape : IfcProductDefinitionShape;
	/// END_ENTITY;
	/// <summary>
	public class IFCShapeAspect : IFC_ClassEntity, Global.IFCShapeAspect
	{
		public virtual IFC_Attributes<IFCShapeModel>? ShapeRepresentations { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual LOGICAL? ProductDefinitional { get; set; }
		public virtual IFCProductDefinitionShape? PartOfProductDefinitionShape { get; set; }
		public IFCShapeAspect() : base()
		{
		}
		public IFCShapeAspect(IFC_Attributes<IFCShapeModel>? ShapeRepresentations, IFCLabel? Name, IFCText? Description, LOGICAL? ProductDefinitional, IFCProductDefinitionShape? PartOfProductDefinitionShape) : base ()
		{
			this.ShapeRepresentations = ShapeRepresentations;
			this.Name = Name;
			this.Description = Description;
			this.ProductDefinitional = ProductDefinitional;
			this.PartOfProductDefinitionShape = PartOfProductDefinitionShape;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ShapeRepresentations", ShapeRepresentations},
				{"Name", Name},
				{"Description", Description},
				{"ProductDefinitional", ProductDefinitional},
				{"PartOfProductDefinitionShape", PartOfProductDefinitionShape}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCShapeModel>? _ShapeRepresentations
		{
			get
			{
				if(ShapeRepresentations != null)
				{
					IFC_Attributes<Global.IFCShapeModel>? items = new IFC_Attributes<Global.IFCShapeModel>();
					foreach (IFCShapeModel item in ShapeRepresentations)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ShapeRepresentations = null;
				}
				else
				{
					ShapeRepresentations = new IFC_Attributes<IFCShapeModel>();
					foreach(var val in value)
					{
						if(val is IFCShapeModel v)
						{
							ShapeRepresentations.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual LOGICAL? _ProductDefinitional
		{
			get
			{
				return ProductDefinitional;
			}
			set
			{
				if(value is LOGICAL val)
				{
					ProductDefinitional = val;
				}
				else if(value == null)
				{
					ProductDefinitional = null;
				}
			}
		}
		public virtual Global.IFCProductDefinitionShape? _PartOfProductDefinitionShape
		{
			get
			{
				return PartOfProductDefinitionShape;
			}
			set
			{
				if(value is IFCProductDefinitionShape val)
				{
					PartOfProductDefinitionShape = val;
				}
				else if(value == null)
				{
					PartOfProductDefinitionShape = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcShapeModel
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcShapeRepresentation
	/// ,IfcTopologyRepresentation))
	/// SUBTYPE OF (IfcRepresentation);
	/// INVERSE
	/// OfShapeAspect : SET [0:1] OF IfcShapeAspect FOR ShapeRepresentations;
	/// WHERE
	/// WR11 : (SIZEOF(SELF\IfcRepresentation.OfProductRepresentation) = 1) XOR
	/// (SIZEOF(SELF\IfcRepresentation.RepresentationMap) = 1) XOR
	/// (SIZEOF(OfShapeAspect) = 1);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCShapeModel : IFCRepresentation, Global.IFCShapeModel
	{
		public IFC_Attributes<IFCShapeAspect>? OfShapeAspect {get{return new IFC_Attributes<IFCShapeAspect>(Model?.GetItems<IFCShapeAspect>().Where(x => x.ShapeRepresentations != null && x.ShapeRepresentations.Contains(this)).ToList());}}
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public IFCShapeModel() : base()
		{
		}
		public IFCShapeModel(IFCRepresentationContext? ContextOfItems, IFCLabel? RepresentationIdentifier, IFCLabel? RepresentationType, IFC_Attributes<IFCRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ContextOfItems", ContextOfItems},
				{"RepresentationIdentifier", RepresentationIdentifier},
				{"RepresentationType", RepresentationType},
				{"Items", Items}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepresentationMap", RepresentationMap},
				{"LayerAssignments", LayerAssignments},
				{"OfProductRepresentation", OfProductRepresentation},
				{"OfShapeAspect", OfShapeAspect}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11}
			};
		}
		public virtual IFC_Attributes<Global.IFCShapeAspect>? _OfShapeAspect
		{
			get
			{
				if(OfShapeAspect != null)
				{
					IFC_Attributes<Global.IFCShapeAspect>? items = new IFC_Attributes<Global.IFCShapeAspect>();
					foreach (IFCShapeAspect item in OfShapeAspect)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcShapeRepresentation
	/// SUBTYPE OF (IfcShapeModel);
	/// WHERE
	/// WR21 : 'IFC2X3.IFCGEOMETRICREPRESENTATIONCONTEXT'
	/// IN TYPEOF(SELF\IfcRepresentation.ContextOfItems);
	/// WR22 : SIZEOF(QUERY(temp <* Items |
	/// ('IFC2X3.IFCTOPOLOGICALREPRESENTATIONITEM' IN TYPEOF(temp))
	/// AND (NOT(SIZEOF(
	/// ['IFC2X3.IFCVERTEXPOINT',
	/// 'IFC2X3.IFCEDGECURVE',
	/// 'IFC2X3.IFCFACESURFACE'] * TYPEOF(temp)) = 1))
	/// )) = 0;
	/// WR23 : EXISTS(SELF\IfcRepresentation.RepresentationType);
	/// WR24 : IfcShapeRepresentationTypes(SELF\IfcRepresentation.RepresentationType, SELF\IfcRepresentation.Items);
	/// END_ENTITY;
	/// <summary>
	public class IFCShapeRepresentation : IFCShapeModel, Global.IFCShapeRepresentation
	{
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR23
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR24
		{
			get
			{
				return true;
			}
		}
		public IFCShapeRepresentation() : base()
		{
		}
		public IFCShapeRepresentation(IFCRepresentationContext? ContextOfItems, IFCLabel? RepresentationIdentifier, IFCLabel? RepresentationType, IFC_Attributes<IFCRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ContextOfItems", ContextOfItems},
				{"RepresentationIdentifier", RepresentationIdentifier},
				{"RepresentationType", RepresentationType},
				{"Items", Items}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepresentationMap", RepresentationMap},
				{"LayerAssignments", LayerAssignments},
				{"OfProductRepresentation", OfProductRepresentation},
				{"OfShapeAspect", OfShapeAspect}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22},
				{"is_WR23", is_WR23},
				{"is_WR24", is_WR24}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcShellBasedSurfaceModel
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// SbsmBoundary : SET [1:?] OF IfcShell;
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public class IFCShellBasedSurfaceModel : IFCGeometricRepresentationItem, Global.IFCShellBasedSurfaceModel
	{
		public virtual IFC_Attributes<IFCShell>? SbsmBoundary { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCShellBasedSurfaceModel.Dim
				// 3;
				return null;
				//END_MANUAL
			}
		}
		public IFCShellBasedSurfaceModel() : base()
		{
		}
		public IFCShellBasedSurfaceModel(IFC_Attributes<IFCShell>? SbsmBoundary) : base ()
		{
			this.SbsmBoundary = SbsmBoundary;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SbsmBoundary", SbsmBoundary}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCShell>? _SbsmBoundary
		{
			get
			{
				if(SbsmBoundary != null)
				{
					IFC_Attributes<Global.IFCShell>? items = new IFC_Attributes<Global.IFCShell>();
					foreach (IFCShell item in SbsmBoundary)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SbsmBoundary = null;
				}
				else
				{
					SbsmBoundary = new IFC_Attributes<IFCShell>();
					foreach(var val in value)
					{
						if(val is IFCShell v)
						{
							SbsmBoundary.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSimpleProperty
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcPropertyBoundedValue
	/// ,IfcPropertyEnumeratedValue
	/// ,IfcPropertyListValue
	/// ,IfcPropertyReferenceValue
	/// ,IfcPropertySingleValue
	/// ,IfcPropertyTableValue))
	/// SUBTYPE OF (IfcProperty);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCSimpleProperty : IFCProperty, Global.IFCSimpleProperty
	{
		public IFCSimpleProperty() : base()
		{
		}
		public IFCSimpleProperty(IFCIdentifier? Name, IFCText? Description) : base (Name, Description)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"PropertyForDependance", PropertyForDependance},
				{"PropertyDependsOn", PropertyDependsOn},
				{"PartOfComplex", PartOfComplex}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSite
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// RefLatitude : OPTIONAL IfcCompoundPlaneAngleMeasure;
	/// RefLongitude : OPTIONAL IfcCompoundPlaneAngleMeasure;
	/// RefElevation : OPTIONAL IfcLengthMeasure;
	/// LandTitleNumber : OPTIONAL IfcLabel;
	/// SiteAddress : OPTIONAL IfcPostalAddress;
	/// END_ENTITY;
	/// <summary>
	public class IFCSite : IFCSpatialStructureElement, Global.IFCSite
	{
		public virtual IFCCompoundPlaneAngleMeasure? RefLatitude { get; set; }
		public virtual IFCCompoundPlaneAngleMeasure? RefLongitude { get; set; }
		public virtual IFCLengthMeasure? RefElevation { get; set; }
		public virtual IFCLabel? LandTitleNumber { get; set; }
		public virtual IFCPostalAddress? SiteAddress { get; set; }
		public IFCSite() : base()
		{
		}
		public IFCSite(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCLabel? LongName, IFCElementCompositionEnum? CompositionType, IFCCompoundPlaneAngleMeasure? RefLatitude, IFCCompoundPlaneAngleMeasure? RefLongitude, IFCLengthMeasure? RefElevation, IFCLabel? LandTitleNumber, IFCPostalAddress? SiteAddress) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.RefLatitude = RefLatitude;
			this.RefLongitude = RefLongitude;
			this.RefElevation = RefElevation;
			this.LandTitleNumber = LandTitleNumber;
			this.SiteAddress = SiteAddress;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"LongName", LongName},
				{"CompositionType", CompositionType},
				{"RefLatitude", RefLatitude},
				{"RefLongitude", RefLongitude},
				{"RefElevation", RefElevation},
				{"LandTitleNumber", LandTitleNumber},
				{"SiteAddress", SiteAddress}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"ReferencesElements", ReferencesElements},
				{"ServicedBySystems", ServicedBySystems},
				{"ContainsElements", ContainsElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCCompoundPlaneAngleMeasure? _RefLatitude
		{
			get
			{
				return RefLatitude;
			}
			set
			{
				if(value is IFCCompoundPlaneAngleMeasure val)
				{
					RefLatitude = val;
				}
				else if(value == null)
				{
					RefLatitude = null;
				}
			}
		}
		public virtual Global.IFCCompoundPlaneAngleMeasure? _RefLongitude
		{
			get
			{
				return RefLongitude;
			}
			set
			{
				if(value is IFCCompoundPlaneAngleMeasure val)
				{
					RefLongitude = val;
				}
				else if(value == null)
				{
					RefLongitude = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _RefElevation
		{
			get
			{
				return RefElevation;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					RefElevation = val;
				}
				else if(value == null)
				{
					RefElevation = null;
				}
			}
		}
		public virtual Global.IFCLabel? _LandTitleNumber
		{
			get
			{
				return LandTitleNumber;
			}
			set
			{
				if(value is IFCLabel val)
				{
					LandTitleNumber = val;
				}
				else if(value == null)
				{
					LandTitleNumber = null;
				}
			}
		}
		public virtual Global.IFCPostalAddress? _SiteAddress
		{
			get
			{
				return SiteAddress;
			}
			set
			{
				if(value is IFCPostalAddress val)
				{
					SiteAddress = val;
				}
				else if(value == null)
				{
					SiteAddress = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSlab
	/// SUBTYPE OF (IfcBuildingElement);
	/// PredefinedType : OPTIONAL IfcSlabTypeEnum;
	/// WHERE
	/// WR61 : NOT(EXISTS(PredefinedType)) OR
	/// (PredefinedType <> IfcSlabTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSlabTypeEnum.USERDEFINED) AND EXISTS (SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IFCSlab : IFCBuildingElement, Global.IFCSlab
	{
		public virtual IFCSlabTypeEnum? PredefinedType { get; set; }
		public virtual bool is_WR61
		{
			get
			{
				return true;
			}
		}
		public IFCSlab() : base()
		{
		}
		public IFCSlab(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCSlabTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR61", is_WR61}
			};
		}
		public virtual Global.IFCSlabTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCSlabTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSlabType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcSlabTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCSlabType : IFCBuildingElementType, Global.IFCSlabType
	{
		public virtual IFCSlabTypeEnum? PredefinedType { get; set; }
		public IFCSlabType() : base()
		{
		}
		public IFCSlabType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCSlabTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCSlabTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCSlabTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSlippageConnectionCondition
	/// SUBTYPE OF (IfcStructuralConnectionCondition);
	/// SlippageX : OPTIONAL IfcLengthMeasure;
	/// SlippageY : OPTIONAL IfcLengthMeasure;
	/// SlippageZ : OPTIONAL IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCSlippageConnectionCondition : IFCStructuralConnectionCondition, Global.IFCSlippageConnectionCondition
	{
		public virtual IFCLengthMeasure? SlippageX { get; set; }
		public virtual IFCLengthMeasure? SlippageY { get; set; }
		public virtual IFCLengthMeasure? SlippageZ { get; set; }
		public IFCSlippageConnectionCondition() : base()
		{
		}
		public IFCSlippageConnectionCondition(IFCLabel? Name, IFCLengthMeasure? SlippageX, IFCLengthMeasure? SlippageY, IFCLengthMeasure? SlippageZ) : base (Name)
		{
			this.SlippageX = SlippageX;
			this.SlippageY = SlippageY;
			this.SlippageZ = SlippageZ;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"SlippageX", SlippageX},
				{"SlippageY", SlippageY},
				{"SlippageZ", SlippageZ}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLengthMeasure? _SlippageX
		{
			get
			{
				return SlippageX;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					SlippageX = val;
				}
				else if(value == null)
				{
					SlippageX = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _SlippageY
		{
			get
			{
				return SlippageY;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					SlippageY = val;
				}
				else if(value == null)
				{
					SlippageY = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _SlippageZ
		{
			get
			{
				return SlippageZ;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					SlippageZ = val;
				}
				else if(value == null)
				{
					SlippageZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSolidModel
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcCsgSolid
	/// ,IfcManifoldSolidBrep
	/// ,IfcSweptAreaSolid
	/// ,IfcSweptDiskSolid))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// DERIVE
	/// Dim : IfcDimensionCount := 3;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCSolidModel : IFCGeometricRepresentationItem, IFCBooleanOperand, Global.IFCSolidModel
	{
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCSolidModel.Dim
				// 3;
				return null;
				//END_MANUAL
			}
		}
		public IFCSolidModel() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSoundProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// IsAttenuating : IfcBoolean;
	/// SoundScale : OPTIONAL IfcSoundScaleEnum;
	/// SoundValues : LIST [1:8] OF IfcSoundValue;
	/// END_ENTITY;
	/// <summary>
	public class IFCSoundProperties : IFCPropertySetDefinition, Global.IFCSoundProperties
	{
		public virtual IFCBoolean? IsAttenuating { get; set; }
		public virtual IFCSoundScaleEnum? SoundScale { get; set; }
		public virtual IFC_Attributes<IFCSoundValue>? SoundValues { get; set; }
		public IFCSoundProperties() : base()
		{
		}
		public IFCSoundProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCBoolean? IsAttenuating, IFCSoundScaleEnum? SoundScale, IFC_Attributes<IFCSoundValue>? SoundValues) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.IsAttenuating = IsAttenuating;
			this.SoundScale = SoundScale;
			this.SoundValues = SoundValues;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"IsAttenuating", IsAttenuating},
				{"SoundScale", SoundScale},
				{"SoundValues", SoundValues}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCBoolean? _IsAttenuating
		{
			get
			{
				return IsAttenuating;
			}
			set
			{
				if(value is IFCBoolean val)
				{
					IsAttenuating = val;
				}
				else if(value == null)
				{
					IsAttenuating = null;
				}
			}
		}
		public virtual Global.IFCSoundScaleEnum? _SoundScale
		{
			get
			{
				return SoundScale;
			}
			set
			{
				if(value is IFCSoundScaleEnum val)
				{
					SoundScale = val;
				}
				else if(value == null)
				{
					SoundScale = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCSoundValue>? _SoundValues
		{
			get
			{
				if(SoundValues != null)
				{
					IFC_Attributes<Global.IFCSoundValue>? items = new IFC_Attributes<Global.IFCSoundValue>();
					foreach (IFCSoundValue item in SoundValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SoundValues = null;
				}
				else
				{
					SoundValues = new IFC_Attributes<IFCSoundValue>();
					foreach(var val in value)
					{
						if(val is IFCSoundValue v)
						{
							SoundValues.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSoundValue
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// SoundLevelTimeSeries : OPTIONAL IfcTimeSeries;
	/// Frequency : IfcFrequencyMeasure;
	/// SoundLevelSingleValue : OPTIONAL IfcDerivedMeasureValue;
	/// END_ENTITY;
	/// <summary>
	public class IFCSoundValue : IFCPropertySetDefinition, Global.IFCSoundValue
	{
		public virtual IFCTimeSeries? SoundLevelTimeSeries { get; set; }
		public virtual IFCFrequencyMeasure? Frequency { get; set; }
		public virtual IFCDerivedMeasureValue? SoundLevelSingleValue { get; set; }
		public IFCSoundValue() : base()
		{
		}
		public IFCSoundValue(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCTimeSeries? SoundLevelTimeSeries, IFCFrequencyMeasure? Frequency, IFCDerivedMeasureValue? SoundLevelSingleValue) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.SoundLevelTimeSeries = SoundLevelTimeSeries;
			this.Frequency = Frequency;
			this.SoundLevelSingleValue = SoundLevelSingleValue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"SoundLevelTimeSeries", SoundLevelTimeSeries},
				{"Frequency", Frequency},
				{"SoundLevelSingleValue", SoundLevelSingleValue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCTimeSeries? _SoundLevelTimeSeries
		{
			get
			{
				return SoundLevelTimeSeries;
			}
			set
			{
				if(value is IFCTimeSeries val)
				{
					SoundLevelTimeSeries = val;
				}
				else if(value == null)
				{
					SoundLevelTimeSeries = null;
				}
			}
		}
		public virtual Global.IFCFrequencyMeasure? _Frequency
		{
			get
			{
				return Frequency;
			}
			set
			{
				if(value is IFCFrequencyMeasure val)
				{
					Frequency = val;
				}
				else if(value == null)
				{
					Frequency = null;
				}
			}
		}
		public virtual Global.IFCDerivedMeasureValue? _SoundLevelSingleValue
		{
			get
			{
				return SoundLevelSingleValue;
			}
			set
			{
				if(value is IFCDerivedMeasureValue val)
				{
					SoundLevelSingleValue = val;
				}
				else if(value == null)
				{
					SoundLevelSingleValue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpace
	/// SUBTYPE OF (IfcSpatialStructureElement);
	/// InteriorOrExteriorSpace : IfcInternalOrExternalEnum;
	/// ElevationWithFlooring : OPTIONAL IfcLengthMeasure;
	/// INVERSE
	/// HasCoverings : SET [0:?] OF IfcRelCoversSpaces FOR RelatedSpace;
	/// BoundedBy : SET [0:?] OF IfcRelSpaceBoundary FOR RelatingSpace;
	/// END_ENTITY;
	/// <summary>
	public class IFCSpace : IFCSpatialStructureElement, Global.IFCSpace
	{
		public virtual IFCInternalOrExternalEnum? InteriorOrExteriorSpace { get; set; }
		public virtual IFCLengthMeasure? ElevationWithFlooring { get; set; }
		public IFC_Attributes<IFCRelCoversSpaces>? HasCoverings {get{return new IFC_Attributes<IFCRelCoversSpaces>(Model?.GetItems<IFCRelCoversSpaces>().Where(x => x.RelatedSpace != null && x.RelatedSpace == this).ToList());}}
		public IFC_Attributes<IFCRelSpaceBoundary>? BoundedBy {get{return new IFC_Attributes<IFCRelSpaceBoundary>(Model?.GetItems<IFCRelSpaceBoundary>().Where(x => x.RelatingSpace != null && x.RelatingSpace == this).ToList());}}
		public IFCSpace() : base()
		{
		}
		public IFCSpace(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCLabel? LongName, IFCElementCompositionEnum? CompositionType, IFCInternalOrExternalEnum? InteriorOrExteriorSpace, IFCLengthMeasure? ElevationWithFlooring) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType)
		{
			this.InteriorOrExteriorSpace = InteriorOrExteriorSpace;
			this.ElevationWithFlooring = ElevationWithFlooring;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"LongName", LongName},
				{"CompositionType", CompositionType},
				{"InteriorOrExteriorSpace", InteriorOrExteriorSpace},
				{"ElevationWithFlooring", ElevationWithFlooring}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"ReferencesElements", ReferencesElements},
				{"ServicedBySystems", ServicedBySystems},
				{"ContainsElements", ContainsElements},
				{"HasCoverings", HasCoverings},
				{"BoundedBy", BoundedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCInternalOrExternalEnum? _InteriorOrExteriorSpace
		{
			get
			{
				return InteriorOrExteriorSpace;
			}
			set
			{
				if(value is IFCInternalOrExternalEnum val)
				{
					InteriorOrExteriorSpace = val;
				}
				else if(value == null)
				{
					InteriorOrExteriorSpace = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _ElevationWithFlooring
		{
			get
			{
				return ElevationWithFlooring;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					ElevationWithFlooring = val;
				}
				else if(value == null)
				{
					ElevationWithFlooring = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelCoversSpaces>? _HasCoverings
		{
			get
			{
				if(HasCoverings != null)
				{
					IFC_Attributes<Global.IFCRelCoversSpaces>? items = new IFC_Attributes<Global.IFCRelCoversSpaces>();
					foreach (IFCRelCoversSpaces item in HasCoverings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelSpaceBoundary>? _BoundedBy
		{
			get
			{
				if(BoundedBy != null)
				{
					IFC_Attributes<Global.IFCRelSpaceBoundary>? items = new IFC_Attributes<Global.IFCRelSpaceBoundary>();
					foreach (IFCRelSpaceBoundary item in BoundedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpaceHeaterType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcSpaceHeaterTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcSpaceHeaterTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcSpaceHeaterTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCSpaceHeaterType : IFCEnergyConversionDeviceType, Global.IFCSpaceHeaterType
	{
		public virtual IFCSpaceHeaterTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCSpaceHeaterType() : base()
		{
		}
		public IFCSpaceHeaterType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCSpaceHeaterTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCSpaceHeaterTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCSpaceHeaterTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpaceProgram
	/// SUBTYPE OF (IfcControl);
	/// SpaceProgramIdentifier : IfcIdentifier;
	/// MaxRequiredArea : OPTIONAL IfcAreaMeasure;
	/// MinRequiredArea : OPTIONAL IfcAreaMeasure;
	/// RequestedLocation : OPTIONAL IfcSpatialStructureElement;
	/// StandardRequiredArea : IfcAreaMeasure;
	/// INVERSE
	/// HasInteractionReqsFrom : SET [0:?] OF IfcRelInteractionRequirements FOR RelatedSpaceProgram;
	/// HasInteractionReqsTo : SET [0:?] OF IfcRelInteractionRequirements FOR RelatingSpaceProgram;
	/// END_ENTITY;
	/// <summary>
	public class IFCSpaceProgram : IFCControl, Global.IFCSpaceProgram
	{
		public virtual IFCIdentifier? SpaceProgramIdentifier { get; set; }
		public virtual IFCAreaMeasure? MaxRequiredArea { get; set; }
		public virtual IFCAreaMeasure? MinRequiredArea { get; set; }
		public virtual IFCSpatialStructureElement? RequestedLocation { get; set; }
		public virtual IFCAreaMeasure? StandardRequiredArea { get; set; }
		public IFC_Attributes<IFCRelInteractionRequirements>? HasInteractionReqsFrom {get{return new IFC_Attributes<IFCRelInteractionRequirements>(Model?.GetItems<IFCRelInteractionRequirements>().Where(x => x.RelatedSpaceProgram != null && x.RelatedSpaceProgram == this).ToList());}}
		public IFC_Attributes<IFCRelInteractionRequirements>? HasInteractionReqsTo {get{return new IFC_Attributes<IFCRelInteractionRequirements>(Model?.GetItems<IFCRelInteractionRequirements>().Where(x => x.RelatingSpaceProgram != null && x.RelatingSpaceProgram == this).ToList());}}
		public IFCSpaceProgram() : base()
		{
		}
		public IFCSpaceProgram(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? SpaceProgramIdentifier, IFCAreaMeasure? MaxRequiredArea, IFCAreaMeasure? MinRequiredArea, IFCSpatialStructureElement? RequestedLocation, IFCAreaMeasure? StandardRequiredArea) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.SpaceProgramIdentifier = SpaceProgramIdentifier;
			this.MaxRequiredArea = MaxRequiredArea;
			this.MinRequiredArea = MinRequiredArea;
			this.RequestedLocation = RequestedLocation;
			this.StandardRequiredArea = StandardRequiredArea;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"SpaceProgramIdentifier", SpaceProgramIdentifier},
				{"MaxRequiredArea", MaxRequiredArea},
				{"MinRequiredArea", MinRequiredArea},
				{"RequestedLocation", RequestedLocation},
				{"StandardRequiredArea", StandardRequiredArea}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls},
				{"HasInteractionReqsFrom", HasInteractionReqsFrom},
				{"HasInteractionReqsTo", HasInteractionReqsTo}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCIdentifier? _SpaceProgramIdentifier
		{
			get
			{
				return SpaceProgramIdentifier;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					SpaceProgramIdentifier = val;
				}
				else if(value == null)
				{
					SpaceProgramIdentifier = null;
				}
			}
		}
		public virtual Global.IFCAreaMeasure? _MaxRequiredArea
		{
			get
			{
				return MaxRequiredArea;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					MaxRequiredArea = val;
				}
				else if(value == null)
				{
					MaxRequiredArea = null;
				}
			}
		}
		public virtual Global.IFCAreaMeasure? _MinRequiredArea
		{
			get
			{
				return MinRequiredArea;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					MinRequiredArea = val;
				}
				else if(value == null)
				{
					MinRequiredArea = null;
				}
			}
		}
		public virtual Global.IFCSpatialStructureElement? _RequestedLocation
		{
			get
			{
				return RequestedLocation;
			}
			set
			{
				if(value is IFCSpatialStructureElement val)
				{
					RequestedLocation = val;
				}
				else if(value == null)
				{
					RequestedLocation = null;
				}
			}
		}
		public virtual Global.IFCAreaMeasure? _StandardRequiredArea
		{
			get
			{
				return StandardRequiredArea;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					StandardRequiredArea = val;
				}
				else if(value == null)
				{
					StandardRequiredArea = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelInteractionRequirements>? _HasInteractionReqsFrom
		{
			get
			{
				if(HasInteractionReqsFrom != null)
				{
					IFC_Attributes<Global.IFCRelInteractionRequirements>? items = new IFC_Attributes<Global.IFCRelInteractionRequirements>();
					foreach (IFCRelInteractionRequirements item in HasInteractionReqsFrom)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelInteractionRequirements>? _HasInteractionReqsTo
		{
			get
			{
				if(HasInteractionReqsTo != null)
				{
					IFC_Attributes<Global.IFCRelInteractionRequirements>? items = new IFC_Attributes<Global.IFCRelInteractionRequirements>();
					foreach (IFCRelInteractionRequirements item in HasInteractionReqsTo)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpaceThermalLoadProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// ApplicableValueRatio : OPTIONAL IfcPositiveRatioMeasure;
	/// ThermalLoadSource : IfcThermalLoadSourceEnum;
	/// PropertySource : IfcPropertySourceEnum;
	/// SourceDescription : OPTIONAL IfcText;
	/// MaximumValue : IfcPowerMeasure;
	/// MinimumValue : OPTIONAL IfcPowerMeasure;
	/// ThermalLoadTimeSeriesValues : OPTIONAL IfcTimeSeries;
	/// UserDefinedThermalLoadSource : OPTIONAL IfcLabel;
	/// UserDefinedPropertySource : OPTIONAL IfcLabel;
	/// ThermalLoadType : IfcThermalLoadTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCSpaceThermalLoadProperties : IFCPropertySetDefinition, Global.IFCSpaceThermalLoadProperties
	{
		public virtual IFCPositiveRatioMeasure? ApplicableValueRatio { get; set; }
		public virtual IFCThermalLoadSourceEnum? ThermalLoadSource { get; set; }
		public virtual IFCPropertySourceEnum? PropertySource { get; set; }
		public virtual IFCText? SourceDescription { get; set; }
		public virtual IFCPowerMeasure? MaximumValue { get; set; }
		public virtual IFCPowerMeasure? MinimumValue { get; set; }
		public virtual IFCTimeSeries? ThermalLoadTimeSeriesValues { get; set; }
		public virtual IFCLabel? UserDefinedThermalLoadSource { get; set; }
		public virtual IFCLabel? UserDefinedPropertySource { get; set; }
		public virtual IFCThermalLoadTypeEnum? ThermalLoadType { get; set; }
		public IFCSpaceThermalLoadProperties() : base()
		{
		}
		public IFCSpaceThermalLoadProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCPositiveRatioMeasure? ApplicableValueRatio, IFCThermalLoadSourceEnum? ThermalLoadSource, IFCPropertySourceEnum? PropertySource, IFCText? SourceDescription, IFCPowerMeasure? MaximumValue, IFCPowerMeasure? MinimumValue, IFCTimeSeries? ThermalLoadTimeSeriesValues, IFCLabel? UserDefinedThermalLoadSource, IFCLabel? UserDefinedPropertySource, IFCThermalLoadTypeEnum? ThermalLoadType) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ApplicableValueRatio = ApplicableValueRatio;
			this.ThermalLoadSource = ThermalLoadSource;
			this.PropertySource = PropertySource;
			this.SourceDescription = SourceDescription;
			this.MaximumValue = MaximumValue;
			this.MinimumValue = MinimumValue;
			this.ThermalLoadTimeSeriesValues = ThermalLoadTimeSeriesValues;
			this.UserDefinedThermalLoadSource = UserDefinedThermalLoadSource;
			this.UserDefinedPropertySource = UserDefinedPropertySource;
			this.ThermalLoadType = ThermalLoadType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableValueRatio", ApplicableValueRatio},
				{"ThermalLoadSource", ThermalLoadSource},
				{"PropertySource", PropertySource},
				{"SourceDescription", SourceDescription},
				{"MaximumValue", MaximumValue},
				{"MinimumValue", MinimumValue},
				{"ThermalLoadTimeSeriesValues", ThermalLoadTimeSeriesValues},
				{"UserDefinedThermalLoadSource", UserDefinedThermalLoadSource},
				{"UserDefinedPropertySource", UserDefinedPropertySource},
				{"ThermalLoadType", ThermalLoadType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveRatioMeasure? _ApplicableValueRatio
		{
			get
			{
				return ApplicableValueRatio;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					ApplicableValueRatio = val;
				}
				else if(value == null)
				{
					ApplicableValueRatio = null;
				}
			}
		}
		public virtual Global.IFCThermalLoadSourceEnum? _ThermalLoadSource
		{
			get
			{
				return ThermalLoadSource;
			}
			set
			{
				if(value is IFCThermalLoadSourceEnum val)
				{
					ThermalLoadSource = val;
				}
				else if(value == null)
				{
					ThermalLoadSource = null;
				}
			}
		}
		public virtual Global.IFCPropertySourceEnum? _PropertySource
		{
			get
			{
				return PropertySource;
			}
			set
			{
				if(value is IFCPropertySourceEnum val)
				{
					PropertySource = val;
				}
				else if(value == null)
				{
					PropertySource = null;
				}
			}
		}
		public virtual Global.IFCText? _SourceDescription
		{
			get
			{
				return SourceDescription;
			}
			set
			{
				if(value is IFCText val)
				{
					SourceDescription = val;
				}
				else if(value == null)
				{
					SourceDescription = null;
				}
			}
		}
		public virtual Global.IFCPowerMeasure? _MaximumValue
		{
			get
			{
				return MaximumValue;
			}
			set
			{
				if(value is IFCPowerMeasure val)
				{
					MaximumValue = val;
				}
				else if(value == null)
				{
					MaximumValue = null;
				}
			}
		}
		public virtual Global.IFCPowerMeasure? _MinimumValue
		{
			get
			{
				return MinimumValue;
			}
			set
			{
				if(value is IFCPowerMeasure val)
				{
					MinimumValue = val;
				}
				else if(value == null)
				{
					MinimumValue = null;
				}
			}
		}
		public virtual Global.IFCTimeSeries? _ThermalLoadTimeSeriesValues
		{
			get
			{
				return ThermalLoadTimeSeriesValues;
			}
			set
			{
				if(value is IFCTimeSeries val)
				{
					ThermalLoadTimeSeriesValues = val;
				}
				else if(value == null)
				{
					ThermalLoadTimeSeriesValues = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedThermalLoadSource
		{
			get
			{
				return UserDefinedThermalLoadSource;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedThermalLoadSource = val;
				}
				else if(value == null)
				{
					UserDefinedThermalLoadSource = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedPropertySource
		{
			get
			{
				return UserDefinedPropertySource;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedPropertySource = val;
				}
				else if(value == null)
				{
					UserDefinedPropertySource = null;
				}
			}
		}
		public virtual Global.IFCThermalLoadTypeEnum? _ThermalLoadType
		{
			get
			{
				return ThermalLoadType;
			}
			set
			{
				if(value is IFCThermalLoadTypeEnum val)
				{
					ThermalLoadType = val;
				}
				else if(value == null)
				{
					ThermalLoadType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpaceType
	/// SUBTYPE OF (IfcSpatialStructureElementType);
	/// PredefinedType : IfcSpaceTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCSpaceType : IFCSpatialStructureElementType, Global.IFCSpaceType
	{
		public virtual IFCSpaceTypeEnum? PredefinedType { get; set; }
		public IFCSpaceType() : base()
		{
		}
		public IFCSpaceType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCSpaceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCSpaceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCSpaceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpatialStructureElement
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBuilding
	/// ,IfcBuildingStorey
	/// ,IfcSite
	/// ,IfcSpace))
	/// SUBTYPE OF (IfcProduct);
	/// LongName : OPTIONAL IfcLabel;
	/// CompositionType : IfcElementCompositionEnum;
	/// INVERSE
	/// ReferencesElements : SET [0:?] OF IfcRelReferencedInSpatialStructure FOR RelatingStructure;
	/// ServicedBySystems : SET [0:?] OF IfcRelServicesBuildings FOR RelatedBuildings;
	/// ContainsElements : SET [0:?] OF IfcRelContainedInSpatialStructure FOR RelatingStructure;
	/// WHERE
	/// WR41 : (HIINDEX(SELF\IfcObjectDefinition.Decomposes) = 1)
	/// AND
	/// ('IFC2X3.IFCRELAGGREGATES' IN TYPEOF(SELF\IfcObjectDefinition.Decomposes[1]))
	/// AND
	/// (('IFC2X3.IFCPROJECT' IN TYPEOF (SELF\IfcObjectDefinition.Decomposes[1].RelatingObject)) OR
	/// ('IFC2X3.IFCSPATIALSTRUCTUREELEMENT' IN TYPEOF (SELF\IfcObjectDefinition.Decomposes[1].RelatingObject))
	/// );
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCSpatialStructureElement : IFCProduct, Global.IFCSpatialStructureElement
	{
		public virtual IFCLabel? LongName { get; set; }
		public virtual IFCElementCompositionEnum? CompositionType { get; set; }
		public IFC_Attributes<IFCRelReferencedInSpatialStructure>? ReferencesElements {get{return new IFC_Attributes<IFCRelReferencedInSpatialStructure>(Model?.GetItems<IFCRelReferencedInSpatialStructure>().Where(x => x.RelatingStructure != null && x.RelatingStructure == this).ToList());}}
		public IFC_Attributes<IFCRelServicesBuildings>? ServicedBySystems {get{return new IFC_Attributes<IFCRelServicesBuildings>(Model?.GetItems<IFCRelServicesBuildings>().Where(x => x.RelatedBuildings != null && x.RelatedBuildings.Contains(this)).ToList());}}
		public IFC_Attributes<IFCRelContainedInSpatialStructure>? ContainsElements {get{return new IFC_Attributes<IFCRelContainedInSpatialStructure>(Model?.GetItems<IFCRelContainedInSpatialStructure>().Where(x => x.RelatingStructure != null && x.RelatingStructure == this).ToList());}}
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public IFCSpatialStructureElement() : base()
		{
		}
		public IFCSpatialStructureElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCLabel? LongName, IFCElementCompositionEnum? CompositionType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.LongName = LongName;
			this.CompositionType = CompositionType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"LongName", LongName},
				{"CompositionType", CompositionType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"ReferencesElements", ReferencesElements},
				{"ServicedBySystems", ServicedBySystems},
				{"ContainsElements", ContainsElements}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCLabel? _LongName
		{
			get
			{
				return LongName;
			}
			set
			{
				if(value is IFCLabel val)
				{
					LongName = val;
				}
				else if(value == null)
				{
					LongName = null;
				}
			}
		}
		public virtual Global.IFCElementCompositionEnum? _CompositionType
		{
			get
			{
				return CompositionType;
			}
			set
			{
				if(value is IFCElementCompositionEnum val)
				{
					CompositionType = val;
				}
				else if(value == null)
				{
					CompositionType = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelReferencedInSpatialStructure>? _ReferencesElements
		{
			get
			{
				if(ReferencesElements != null)
				{
					IFC_Attributes<Global.IFCRelReferencedInSpatialStructure>? items = new IFC_Attributes<Global.IFCRelReferencedInSpatialStructure>();
					foreach (IFCRelReferencedInSpatialStructure item in ReferencesElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelServicesBuildings>? _ServicedBySystems
		{
			get
			{
				if(ServicedBySystems != null)
				{
					IFC_Attributes<Global.IFCRelServicesBuildings>? items = new IFC_Attributes<Global.IFCRelServicesBuildings>();
					foreach (IFCRelServicesBuildings item in ServicedBySystems)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelContainedInSpatialStructure>? _ContainsElements
		{
			get
			{
				if(ContainsElements != null)
				{
					IFC_Attributes<Global.IFCRelContainedInSpatialStructure>? items = new IFC_Attributes<Global.IFCRelContainedInSpatialStructure>();
					foreach (IFCRelContainedInSpatialStructure item in ContainsElements)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSpatialStructureElementType
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcSpaceType))
	/// SUBTYPE OF (IfcElementType);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCSpatialStructureElementType : IFCElementType, Global.IFCSpatialStructureElementType
	{
		public IFCSpatialStructureElementType() : base()
		{
		}
		public IFCSpatialStructureElementType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSphere
	/// SUBTYPE OF (IfcCsgPrimitive3D);
	/// Radius : IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCSphere : IFCCsgPrimitive3D, Global.IFCSphere
	{
		public virtual IFCPositiveLengthMeasure? Radius { get; set; }
		public IFCSphere() : base()
		{
		}
		public IFCSphere(IFCAxis2Placement3D? Position, IFCPositiveLengthMeasure? Radius) : base (Position)
		{
			this.Radius = Radius;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Position", Position},
				{"Radius", Radius}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStackTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcStackTerminalTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCStackTerminalType : IFCFlowTerminalType, Global.IFCStackTerminalType
	{
		public virtual IFCStackTerminalTypeEnum? PredefinedType { get; set; }
		public IFCStackTerminalType() : base()
		{
		}
		public IFCStackTerminalType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCStackTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCStackTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCStackTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStair
	/// SUBTYPE OF (IfcBuildingElement);
	/// ShapeType : IfcStairTypeEnum;
	/// WHERE
	/// WR1 : (HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 0) OR
	/// ((HIINDEX(SELF\IfcObjectDefinition.IsDecomposedBy) = 1) AND (NOT(EXISTS(SELF\IfcProduct.Representation))));
	/// END_ENTITY;
	/// <summary>
	public class IFCStair : IFCBuildingElement, Global.IFCStair
	{
		public virtual IFCStairTypeEnum? ShapeType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCStair() : base()
		{
		}
		public IFCStair(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCStairTypeEnum? ShapeType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.ShapeType = ShapeType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"ShapeType", ShapeType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCStairTypeEnum? _ShapeType
		{
			get
			{
				return ShapeType;
			}
			set
			{
				if(value is IFCStairTypeEnum val)
				{
					ShapeType = val;
				}
				else if(value == null)
				{
					ShapeType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStairFlight
	/// SUBTYPE OF (IfcBuildingElement);
	/// NumberOfRiser : OPTIONAL INTEGER;
	/// NumberOfTreads : OPTIONAL INTEGER;
	/// RiserHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// TreadLength : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCStairFlight : IFCBuildingElement, Global.IFCStairFlight
	{
		public virtual INTEGER? NumberOfRiser { get; set; }
		public virtual INTEGER? NumberOfTreads { get; set; }
		public virtual IFCPositiveLengthMeasure? RiserHeight { get; set; }
		public virtual IFCPositiveLengthMeasure? TreadLength { get; set; }
		public IFCStairFlight() : base()
		{
		}
		public IFCStairFlight(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, INTEGER? NumberOfRiser, INTEGER? NumberOfTreads, IFCPositiveLengthMeasure? RiserHeight, IFCPositiveLengthMeasure? TreadLength) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.NumberOfRiser = NumberOfRiser;
			this.NumberOfTreads = NumberOfTreads;
			this.RiserHeight = RiserHeight;
			this.TreadLength = TreadLength;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"NumberOfRiser", NumberOfRiser},
				{"NumberOfTreads", NumberOfTreads},
				{"RiserHeight", RiserHeight},
				{"TreadLength", TreadLength}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual INTEGER? _NumberOfRiser
		{
			get
			{
				return NumberOfRiser;
			}
			set
			{
				if(value is INTEGER val)
				{
					NumberOfRiser = val;
				}
				else if(value == null)
				{
					NumberOfRiser = null;
				}
			}
		}
		public virtual INTEGER? _NumberOfTreads
		{
			get
			{
				return NumberOfTreads;
			}
			set
			{
				if(value is INTEGER val)
				{
					NumberOfTreads = val;
				}
				else if(value == null)
				{
					NumberOfTreads = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _RiserHeight
		{
			get
			{
				return RiserHeight;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					RiserHeight = val;
				}
				else if(value == null)
				{
					RiserHeight = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _TreadLength
		{
			get
			{
				return TreadLength;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					TreadLength = val;
				}
				else if(value == null)
				{
					TreadLength = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStairFlightType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcStairFlightTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCStairFlightType : IFCBuildingElementType, Global.IFCStairFlightType
	{
		public virtual IFCStairFlightTypeEnum? PredefinedType { get; set; }
		public IFCStairFlightType() : base()
		{
		}
		public IFCStairFlightType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCStairFlightTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCStairFlightTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCStairFlightTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralAction
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralLinearAction
	/// ,IfcStructuralPlanarAction
	/// ,IfcStructuralPointAction))
	/// SUBTYPE OF (IfcStructuralActivity);
	/// DestabilizingLoad : BOOLEAN;
	/// CausedBy : OPTIONAL IfcStructuralReaction;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCStructuralAction : IFCStructuralActivity, Global.IFCStructuralAction
	{
		public virtual BOOLEAN? DestabilizingLoad { get; set; }
		public virtual IFCStructuralReaction? CausedBy { get; set; }
		public IFCStructuralAction() : base()
		{
		}
		public IFCStructuralAction(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralLoad? AppliedLoad, IFCGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IFCStructuralReaction? CausedBy) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal)
		{
			this.DestabilizingLoad = DestabilizingLoad;
			this.CausedBy = CausedBy;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedLoad", AppliedLoad},
				{"GlobalOrLocal", GlobalOrLocal},
				{"DestabilizingLoad", DestabilizingLoad},
				{"CausedBy", CausedBy}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedToStructuralItem", AssignedToStructuralItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual BOOLEAN? _DestabilizingLoad
		{
			get
			{
				return DestabilizingLoad;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					DestabilizingLoad = val;
				}
				else if(value == null)
				{
					DestabilizingLoad = null;
				}
			}
		}
		public virtual Global.IFCStructuralReaction? _CausedBy
		{
			get
			{
				return CausedBy;
			}
			set
			{
				if(value is IFCStructuralReaction val)
				{
					CausedBy = val;
				}
				else if(value == null)
				{
					CausedBy = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralActivity
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralAction
	/// ,IfcStructuralReaction))
	/// SUBTYPE OF (IfcProduct);
	/// AppliedLoad : IfcStructuralLoad;
	/// GlobalOrLocal : IfcGlobalOrLocalEnum;
	/// INVERSE
	/// AssignedToStructuralItem : IfcRelConnectsStructuralActivity FOR RelatedStructuralActivity;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCStructuralActivity : IFCProduct, Global.IFCStructuralActivity
	{
		public virtual IFCStructuralLoad? AppliedLoad { get; set; }
		public virtual IFCGlobalOrLocalEnum? GlobalOrLocal { get; set; }
		public IFCRelConnectsStructuralActivity? AssignedToStructuralItem {get{return Model?.GetItems<IFCRelConnectsStructuralActivity>().FirstOrDefault(x => x.RelatedStructuralActivity != null && x.RelatedStructuralActivity == this);}}
		public IFCStructuralActivity() : base()
		{
		}
		public IFCStructuralActivity(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralLoad? AppliedLoad, IFCGlobalOrLocalEnum? GlobalOrLocal) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.AppliedLoad = AppliedLoad;
			this.GlobalOrLocal = GlobalOrLocal;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedLoad", AppliedLoad},
				{"GlobalOrLocal", GlobalOrLocal}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedToStructuralItem", AssignedToStructuralItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCStructuralLoad? _AppliedLoad
		{
			get
			{
				return AppliedLoad;
			}
			set
			{
				if(value is IFCStructuralLoad val)
				{
					AppliedLoad = val;
				}
				else if(value == null)
				{
					AppliedLoad = null;
				}
			}
		}
		public virtual Global.IFCGlobalOrLocalEnum? _GlobalOrLocal
		{
			get
			{
				return GlobalOrLocal;
			}
			set
			{
				if(value is IFCGlobalOrLocalEnum val)
				{
					GlobalOrLocal = val;
				}
				else if(value == null)
				{
					GlobalOrLocal = null;
				}
			}
		}
		public virtual Global.IFCRelConnectsStructuralActivity? _AssignedToStructuralItem
		{
			get
			{
				return AssignedToStructuralItem;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralAnalysisModel
	/// SUBTYPE OF (IfcSystem);
	/// PredefinedType : IfcAnalysisModelTypeEnum;
	/// OrientationOf2DPlane : OPTIONAL IfcAxis2Placement3D;
	/// LoadedBy : OPTIONAL SET [1:?] OF IfcStructuralLoadGroup;
	/// HasResults : OPTIONAL SET [1:?] OF IfcStructuralResultGroup;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralAnalysisModel : IFCSystem, Global.IFCStructuralAnalysisModel
	{
		public virtual IFCAnalysisModelTypeEnum? PredefinedType { get; set; }
		public virtual IFCAxis2Placement3D? OrientationOf2DPlane { get; set; }
		public virtual IFC_Attributes<IFCStructuralLoadGroup>? LoadedBy { get; set; }
		public virtual IFC_Attributes<IFCStructuralResultGroup>? HasResults { get; set; }
		public IFCStructuralAnalysisModel() : base()
		{
		}
		public IFCStructuralAnalysisModel(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCAnalysisModelTypeEnum? PredefinedType, IFCAxis2Placement3D? OrientationOf2DPlane, IFC_Attributes<IFCStructuralLoadGroup>? LoadedBy, IFC_Attributes<IFCStructuralResultGroup>? HasResults) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.PredefinedType = PredefinedType;
			this.OrientationOf2DPlane = OrientationOf2DPlane;
			this.LoadedBy = LoadedBy;
			this.HasResults = HasResults;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"PredefinedType", PredefinedType},
				{"OrientationOf2DPlane", OrientationOf2DPlane},
				{"LoadedBy", LoadedBy},
				{"HasResults", HasResults}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsGroupedBy", IsGroupedBy},
				{"ServicesBuildings", ServicesBuildings}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCAnalysisModelTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCAnalysisModelTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IFCAxis2Placement3D? _OrientationOf2DPlane
		{
			get
			{
				return OrientationOf2DPlane;
			}
			set
			{
				if(value is IFCAxis2Placement3D val)
				{
					OrientationOf2DPlane = val;
				}
				else if(value == null)
				{
					OrientationOf2DPlane = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCStructuralLoadGroup>? _LoadedBy
		{
			get
			{
				if(LoadedBy != null)
				{
					IFC_Attributes<Global.IFCStructuralLoadGroup>? items = new IFC_Attributes<Global.IFCStructuralLoadGroup>();
					foreach (IFCStructuralLoadGroup item in LoadedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					LoadedBy = null;
				}
				else
				{
					LoadedBy = new IFC_Attributes<IFCStructuralLoadGroup>();
					foreach(var val in value)
					{
						if(val is IFCStructuralLoadGroup v)
						{
							LoadedBy.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCStructuralResultGroup>? _HasResults
		{
			get
			{
				if(HasResults != null)
				{
					IFC_Attributes<Global.IFCStructuralResultGroup>? items = new IFC_Attributes<Global.IFCStructuralResultGroup>();
					foreach (IFCStructuralResultGroup item in HasResults)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasResults = null;
				}
				else
				{
					HasResults = new IFC_Attributes<IFCStructuralResultGroup>();
					foreach(var val in value)
					{
						if(val is IFCStructuralResultGroup v)
						{
							HasResults.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralConnection
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralCurveConnection
	/// ,IfcStructuralPointConnection
	/// ,IfcStructuralSurfaceConnection))
	/// SUBTYPE OF (IfcStructuralItem);
	/// AppliedCondition : OPTIONAL IfcBoundaryCondition;
	/// INVERSE
	/// ConnectsStructuralMembers : SET [1:?] OF IfcRelConnectsStructuralMember FOR RelatedStructuralConnection;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCStructuralConnection : IFCStructuralItem, Global.IFCStructuralConnection
	{
		public virtual IFCBoundaryCondition? AppliedCondition { get; set; }
		public IFC_Attributes<IFCRelConnectsStructuralMember>? ConnectsStructuralMembers {get{return new IFC_Attributes<IFCRelConnectsStructuralMember>(Model?.GetItems<IFCRelConnectsStructuralMember>().Where(x => x.RelatedStructuralConnection != null && x.RelatedStructuralConnection == this).ToList());}}
		public IFCStructuralConnection() : base()
		{
		}
		public IFCStructuralConnection(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCBoundaryCondition? AppliedCondition) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.AppliedCondition = AppliedCondition;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedCondition", AppliedCondition}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedStructuralActivity", AssignedStructuralActivity},
				{"ConnectsStructuralMembers", ConnectsStructuralMembers}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCBoundaryCondition? _AppliedCondition
		{
			get
			{
				return AppliedCondition;
			}
			set
			{
				if(value is IFCBoundaryCondition val)
				{
					AppliedCondition = val;
				}
				else if(value == null)
				{
					AppliedCondition = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelConnectsStructuralMember>? _ConnectsStructuralMembers
		{
			get
			{
				if(ConnectsStructuralMembers != null)
				{
					IFC_Attributes<Global.IFCRelConnectsStructuralMember>? items = new IFC_Attributes<Global.IFCRelConnectsStructuralMember>();
					foreach (IFCRelConnectsStructuralMember item in ConnectsStructuralMembers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralConnectionCondition
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcFailureConnectionCondition
	/// ,IfcSlippageConnectionCondition));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCStructuralConnectionCondition : IFC_ClassEntity, Global.IFCStructuralConnectionCondition
	{
		public virtual IFCLabel? Name { get; set; }
		public IFCStructuralConnectionCondition() : base()
		{
		}
		public IFCStructuralConnectionCondition(IFCLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralCurveConnection
	/// SUBTYPE OF (IfcStructuralConnection);
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralCurveConnection : IFCStructuralConnection, Global.IFCStructuralCurveConnection
	{
		public IFCStructuralCurveConnection() : base()
		{
		}
		public IFCStructuralCurveConnection(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCBoundaryCondition? AppliedCondition) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedCondition", AppliedCondition}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedStructuralActivity", AssignedStructuralActivity},
				{"ConnectsStructuralMembers", ConnectsStructuralMembers}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralCurveMember
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralCurveMemberVarying))
	/// SUBTYPE OF (IfcStructuralMember);
	/// PredefinedType : IfcStructuralCurveTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralCurveMember : IFCStructuralMember, Global.IFCStructuralCurveMember
	{
		public virtual IFCStructuralCurveTypeEnum? PredefinedType { get; set; }
		public IFCStructuralCurveMember() : base()
		{
		}
		public IFCStructuralCurveMember(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralCurveTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedStructuralActivity", AssignedStructuralActivity},
				{"ReferencesElement", ReferencesElement},
				{"ConnectedBy", ConnectedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCStructuralCurveTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCStructuralCurveTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralCurveMemberVarying
	/// SUBTYPE OF (IfcStructuralCurveMember);
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralCurveMemberVarying : IFCStructuralCurveMember, Global.IFCStructuralCurveMemberVarying
	{
		public IFCStructuralCurveMemberVarying() : base()
		{
		}
		public IFCStructuralCurveMemberVarying(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralCurveTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedStructuralActivity", AssignedStructuralActivity},
				{"ReferencesElement", ReferencesElement},
				{"ConnectedBy", ConnectedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralConnection
	/// ,IfcStructuralMember))
	/// SUBTYPE OF (IfcProduct);
	/// INVERSE
	/// AssignedStructuralActivity : SET [0:?] OF IfcRelConnectsStructuralActivity FOR RelatingElement;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCStructuralItem : IFCProduct, IFCStructuralActivityAssignmentSelect, Global.IFCStructuralItem
	{
		public IFC_Attributes<IFCRelConnectsStructuralActivity>? AssignedStructuralActivity {get{return new IFC_Attributes<IFCRelConnectsStructuralActivity>(Model?.GetItems<IFCRelConnectsStructuralActivity>().Where(x => x.RelatingElement != null && x.RelatingElement == this).ToList());}}
		public IFCStructuralItem() : base()
		{
		}
		public IFCStructuralItem(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedStructuralActivity", AssignedStructuralActivity}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCRelConnectsStructuralActivity>? _AssignedStructuralActivity
		{
			get
			{
				if(AssignedStructuralActivity != null)
				{
					IFC_Attributes<Global.IFCRelConnectsStructuralActivity>? items = new IFC_Attributes<Global.IFCRelConnectsStructuralActivity>();
					foreach (IFCRelConnectsStructuralActivity item in AssignedStructuralActivity)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLinearAction
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralLinearActionVarying))
	/// SUBTYPE OF (IfcStructuralAction);
	/// ProjectedOrTrue : IfcProjectedOrTrueLengthEnum;
	/// WHERE
	/// WR61 : SIZEOF(['IFC2X3.IFCSTRUCTURALLOADLINEARFORCE',
	/// 'IFC2X3.IFCSTRUCTURALLOADTEMPERATURE']
	/// * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralLinearAction : IFCStructuralAction, Global.IFCStructuralLinearAction
	{
		public virtual IFCProjectedOrTrueLengthEnum? ProjectedOrTrue { get; set; }
		public virtual bool is_WR61
		{
			get
			{
				return true;
			}
		}
		public IFCStructuralLinearAction() : base()
		{
		}
		public IFCStructuralLinearAction(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralLoad? AppliedLoad, IFCGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IFCStructuralReaction? CausedBy, IFCProjectedOrTrueLengthEnum? ProjectedOrTrue) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy)
		{
			this.ProjectedOrTrue = ProjectedOrTrue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedLoad", AppliedLoad},
				{"GlobalOrLocal", GlobalOrLocal},
				{"DestabilizingLoad", DestabilizingLoad},
				{"CausedBy", CausedBy},
				{"ProjectedOrTrue", ProjectedOrTrue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedToStructuralItem", AssignedToStructuralItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR61", is_WR61}
			};
		}
		public virtual Global.IFCProjectedOrTrueLengthEnum? _ProjectedOrTrue
		{
			get
			{
				return ProjectedOrTrue;
			}
			set
			{
				if(value is IFCProjectedOrTrueLengthEnum val)
				{
					ProjectedOrTrue = val;
				}
				else if(value == null)
				{
					ProjectedOrTrue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLinearActionVarying
	/// SUBTYPE OF (IfcStructuralLinearAction);
	/// VaryingAppliedLoadLocation : IfcShapeAspect;
	/// SubsequentAppliedLoads : LIST [1:?] OF IfcStructuralLoad;
	/// DERIVE
	/// VaryingAppliedLoads : LIST [2:?] OF IfcStructuralLoad := IfcAddToBeginOfList(SELF\IfcStructuralActivity.AppliedLoad, SubsequentAppliedLoads);
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralLinearActionVarying : IFCStructuralLinearAction, Global.IFCStructuralLinearActionVarying
	{
		public virtual IFCShapeAspect? VaryingAppliedLoadLocation { get; set; }
		public virtual IFC_Attributes<IFCStructuralLoad>? SubsequentAppliedLoads { get; set; }
		public virtual IFC_Attributes<IFCStructuralLoad>? VaryingAppliedLoads
		{
			get
			{
				//MANUAL : IFC2x3.IFCStructuralLinearActionVarying.VaryingAppliedLoads
				// IfcAddToBeginOfList(SELF\IfcStructuralActivity.AppliedLoad, SubsequentAppliedLoads);
				return null;
				//END_MANUAL
			}
		}
		public IFCStructuralLinearActionVarying() : base()
		{
		}
		public IFCStructuralLinearActionVarying(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralLoad? AppliedLoad, IFCGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IFCStructuralReaction? CausedBy, IFCProjectedOrTrueLengthEnum? ProjectedOrTrue, IFCShapeAspect? VaryingAppliedLoadLocation, IFC_Attributes<IFCStructuralLoad>? SubsequentAppliedLoads) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy, ProjectedOrTrue)
		{
			this.VaryingAppliedLoadLocation = VaryingAppliedLoadLocation;
			this.SubsequentAppliedLoads = SubsequentAppliedLoads;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedLoad", AppliedLoad},
				{"GlobalOrLocal", GlobalOrLocal},
				{"DestabilizingLoad", DestabilizingLoad},
				{"CausedBy", CausedBy},
				{"ProjectedOrTrue", ProjectedOrTrue},
				{"VaryingAppliedLoadLocation", VaryingAppliedLoadLocation},
				{"SubsequentAppliedLoads", SubsequentAppliedLoads}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"VaryingAppliedLoads", VaryingAppliedLoads}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedToStructuralItem", AssignedToStructuralItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR61", is_WR61}
			};
		}
		public virtual Global.IFCShapeAspect? _VaryingAppliedLoadLocation
		{
			get
			{
				return VaryingAppliedLoadLocation;
			}
			set
			{
				if(value is IFCShapeAspect val)
				{
					VaryingAppliedLoadLocation = val;
				}
				else if(value == null)
				{
					VaryingAppliedLoadLocation = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCStructuralLoad>? _SubsequentAppliedLoads
		{
			get
			{
				if(SubsequentAppliedLoads != null)
				{
					IFC_Attributes<Global.IFCStructuralLoad>? items = new IFC_Attributes<Global.IFCStructuralLoad>();
					foreach (IFCStructuralLoad item in SubsequentAppliedLoads)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SubsequentAppliedLoads = null;
				}
				else
				{
					SubsequentAppliedLoads = new IFC_Attributes<IFCStructuralLoad>();
					foreach(var val in value)
					{
						if(val is IFCStructuralLoad v)
						{
							SubsequentAppliedLoads.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCStructuralLoad>? _VaryingAppliedLoads
		{
			get
			{
				if(VaryingAppliedLoads != null)
				{
					IFC_Attributes<Global.IFCStructuralLoad>? items = new IFC_Attributes<Global.IFCStructuralLoad>();
					foreach (IFCStructuralLoad item in VaryingAppliedLoads)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoad
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadStatic));
	/// Name : OPTIONAL IfcLabel;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCStructuralLoad : IFC_ClassEntity, Global.IFCStructuralLoad
	{
		public virtual IFCLabel? Name { get; set; }
		public IFCStructuralLoad() : base()
		{
		}
		public IFCStructuralLoad(IFCLabel? Name) : base ()
		{
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadGroup
	/// SUBTYPE OF (IfcGroup);
	/// PredefinedType : IfcLoadGroupTypeEnum;
	/// ActionType : IfcActionTypeEnum;
	/// ActionSource : IfcActionSourceTypeEnum;
	/// Coefficient : OPTIONAL IfcRatioMeasure;
	/// Purpose : OPTIONAL IfcLabel;
	/// INVERSE
	/// SourceOfResultGroup : SET [0:1] OF IfcStructuralResultGroup FOR ResultForLoadGroup;
	/// LoadGroupFor : SET [0:?] OF IfcStructuralAnalysisModel FOR LoadedBy;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralLoadGroup : IFCGroup, Global.IFCStructuralLoadGroup
	{
		public virtual IFCLoadGroupTypeEnum? PredefinedType { get; set; }
		public virtual IFCActionTypeEnum? ActionType { get; set; }
		public virtual IFCActionSourceTypeEnum? ActionSource { get; set; }
		public virtual IFCRatioMeasure? Coefficient { get; set; }
		public virtual IFCLabel? Purpose { get; set; }
		public IFC_Attributes<IFCStructuralResultGroup>? SourceOfResultGroup {get{return new IFC_Attributes<IFCStructuralResultGroup>(Model?.GetItems<IFCStructuralResultGroup>().Where(x => x.ResultForLoadGroup != null && x.ResultForLoadGroup == this).ToList());}}
		public IFC_Attributes<IFCStructuralAnalysisModel>? LoadGroupFor {get{return new IFC_Attributes<IFCStructuralAnalysisModel>(Model?.GetItems<IFCStructuralAnalysisModel>().Where(x => x.LoadedBy != null && x.LoadedBy.Contains(this)).ToList());}}
		public IFCStructuralLoadGroup() : base()
		{
		}
		public IFCStructuralLoadGroup(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCLoadGroupTypeEnum? PredefinedType, IFCActionTypeEnum? ActionType, IFCActionSourceTypeEnum? ActionSource, IFCRatioMeasure? Coefficient, IFCLabel? Purpose) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.PredefinedType = PredefinedType;
			this.ActionType = ActionType;
			this.ActionSource = ActionSource;
			this.Coefficient = Coefficient;
			this.Purpose = Purpose;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"PredefinedType", PredefinedType},
				{"ActionType", ActionType},
				{"ActionSource", ActionSource},
				{"Coefficient", Coefficient},
				{"Purpose", Purpose}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsGroupedBy", IsGroupedBy},
				{"SourceOfResultGroup", SourceOfResultGroup},
				{"LoadGroupFor", LoadGroupFor}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLoadGroupTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCLoadGroupTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IFCActionTypeEnum? _ActionType
		{
			get
			{
				return ActionType;
			}
			set
			{
				if(value is IFCActionTypeEnum val)
				{
					ActionType = val;
				}
				else if(value == null)
				{
					ActionType = null;
				}
			}
		}
		public virtual Global.IFCActionSourceTypeEnum? _ActionSource
		{
			get
			{
				return ActionSource;
			}
			set
			{
				if(value is IFCActionSourceTypeEnum val)
				{
					ActionSource = val;
				}
				else if(value == null)
				{
					ActionSource = null;
				}
			}
		}
		public virtual Global.IFCRatioMeasure? _Coefficient
		{
			get
			{
				return Coefficient;
			}
			set
			{
				if(value is IFCRatioMeasure val)
				{
					Coefficient = val;
				}
				else if(value == null)
				{
					Coefficient = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Purpose
		{
			get
			{
				return Purpose;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Purpose = val;
				}
				else if(value == null)
				{
					Purpose = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCStructuralResultGroup>? _SourceOfResultGroup
		{
			get
			{
				if(SourceOfResultGroup != null)
				{
					IFC_Attributes<Global.IFCStructuralResultGroup>? items = new IFC_Attributes<Global.IFCStructuralResultGroup>();
					foreach (IFCStructuralResultGroup item in SourceOfResultGroup)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCStructuralAnalysisModel>? _LoadGroupFor
		{
			get
			{
				if(LoadGroupFor != null)
				{
					IFC_Attributes<Global.IFCStructuralAnalysisModel>? items = new IFC_Attributes<Global.IFCStructuralAnalysisModel>();
					foreach (IFCStructuralAnalysisModel item in LoadGroupFor)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadLinearForce
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// LinearForceX : OPTIONAL IfcLinearForceMeasure;
	/// LinearForceY : OPTIONAL IfcLinearForceMeasure;
	/// LinearForceZ : OPTIONAL IfcLinearForceMeasure;
	/// LinearMomentX : OPTIONAL IfcLinearMomentMeasure;
	/// LinearMomentY : OPTIONAL IfcLinearMomentMeasure;
	/// LinearMomentZ : OPTIONAL IfcLinearMomentMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralLoadLinearForce : IFCStructuralLoadStatic, Global.IFCStructuralLoadLinearForce
	{
		public virtual IFCLinearForceMeasure? LinearForceX { get; set; }
		public virtual IFCLinearForceMeasure? LinearForceY { get; set; }
		public virtual IFCLinearForceMeasure? LinearForceZ { get; set; }
		public virtual IFCLinearMomentMeasure? LinearMomentX { get; set; }
		public virtual IFCLinearMomentMeasure? LinearMomentY { get; set; }
		public virtual IFCLinearMomentMeasure? LinearMomentZ { get; set; }
		public IFCStructuralLoadLinearForce() : base()
		{
		}
		public IFCStructuralLoadLinearForce(IFCLabel? Name, IFCLinearForceMeasure? LinearForceX, IFCLinearForceMeasure? LinearForceY, IFCLinearForceMeasure? LinearForceZ, IFCLinearMomentMeasure? LinearMomentX, IFCLinearMomentMeasure? LinearMomentY, IFCLinearMomentMeasure? LinearMomentZ) : base (Name)
		{
			this.LinearForceX = LinearForceX;
			this.LinearForceY = LinearForceY;
			this.LinearForceZ = LinearForceZ;
			this.LinearMomentX = LinearMomentX;
			this.LinearMomentY = LinearMomentY;
			this.LinearMomentZ = LinearMomentZ;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"LinearForceX", LinearForceX},
				{"LinearForceY", LinearForceY},
				{"LinearForceZ", LinearForceZ},
				{"LinearMomentX", LinearMomentX},
				{"LinearMomentY", LinearMomentY},
				{"LinearMomentZ", LinearMomentZ}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLinearForceMeasure? _LinearForceX
		{
			get
			{
				return LinearForceX;
			}
			set
			{
				if(value is IFCLinearForceMeasure val)
				{
					LinearForceX = val;
				}
				else if(value == null)
				{
					LinearForceX = null;
				}
			}
		}
		public virtual Global.IFCLinearForceMeasure? _LinearForceY
		{
			get
			{
				return LinearForceY;
			}
			set
			{
				if(value is IFCLinearForceMeasure val)
				{
					LinearForceY = val;
				}
				else if(value == null)
				{
					LinearForceY = null;
				}
			}
		}
		public virtual Global.IFCLinearForceMeasure? _LinearForceZ
		{
			get
			{
				return LinearForceZ;
			}
			set
			{
				if(value is IFCLinearForceMeasure val)
				{
					LinearForceZ = val;
				}
				else if(value == null)
				{
					LinearForceZ = null;
				}
			}
		}
		public virtual Global.IFCLinearMomentMeasure? _LinearMomentX
		{
			get
			{
				return LinearMomentX;
			}
			set
			{
				if(value is IFCLinearMomentMeasure val)
				{
					LinearMomentX = val;
				}
				else if(value == null)
				{
					LinearMomentX = null;
				}
			}
		}
		public virtual Global.IFCLinearMomentMeasure? _LinearMomentY
		{
			get
			{
				return LinearMomentY;
			}
			set
			{
				if(value is IFCLinearMomentMeasure val)
				{
					LinearMomentY = val;
				}
				else if(value == null)
				{
					LinearMomentY = null;
				}
			}
		}
		public virtual Global.IFCLinearMomentMeasure? _LinearMomentZ
		{
			get
			{
				return LinearMomentZ;
			}
			set
			{
				if(value is IFCLinearMomentMeasure val)
				{
					LinearMomentZ = val;
				}
				else if(value == null)
				{
					LinearMomentZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadPlanarForce
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// PlanarForceX : OPTIONAL IfcPlanarForceMeasure;
	/// PlanarForceY : OPTIONAL IfcPlanarForceMeasure;
	/// PlanarForceZ : OPTIONAL IfcPlanarForceMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralLoadPlanarForce : IFCStructuralLoadStatic, Global.IFCStructuralLoadPlanarForce
	{
		public virtual IFCPlanarForceMeasure? PlanarForceX { get; set; }
		public virtual IFCPlanarForceMeasure? PlanarForceY { get; set; }
		public virtual IFCPlanarForceMeasure? PlanarForceZ { get; set; }
		public IFCStructuralLoadPlanarForce() : base()
		{
		}
		public IFCStructuralLoadPlanarForce(IFCLabel? Name, IFCPlanarForceMeasure? PlanarForceX, IFCPlanarForceMeasure? PlanarForceY, IFCPlanarForceMeasure? PlanarForceZ) : base (Name)
		{
			this.PlanarForceX = PlanarForceX;
			this.PlanarForceY = PlanarForceY;
			this.PlanarForceZ = PlanarForceZ;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"PlanarForceX", PlanarForceX},
				{"PlanarForceY", PlanarForceY},
				{"PlanarForceZ", PlanarForceZ}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPlanarForceMeasure? _PlanarForceX
		{
			get
			{
				return PlanarForceX;
			}
			set
			{
				if(value is IFCPlanarForceMeasure val)
				{
					PlanarForceX = val;
				}
				else if(value == null)
				{
					PlanarForceX = null;
				}
			}
		}
		public virtual Global.IFCPlanarForceMeasure? _PlanarForceY
		{
			get
			{
				return PlanarForceY;
			}
			set
			{
				if(value is IFCPlanarForceMeasure val)
				{
					PlanarForceY = val;
				}
				else if(value == null)
				{
					PlanarForceY = null;
				}
			}
		}
		public virtual Global.IFCPlanarForceMeasure? _PlanarForceZ
		{
			get
			{
				return PlanarForceZ;
			}
			set
			{
				if(value is IFCPlanarForceMeasure val)
				{
					PlanarForceZ = val;
				}
				else if(value == null)
				{
					PlanarForceZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleDisplacement
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadSingleDisplacementDistortion))
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// DisplacementX : OPTIONAL IfcLengthMeasure;
	/// DisplacementY : OPTIONAL IfcLengthMeasure;
	/// DisplacementZ : OPTIONAL IfcLengthMeasure;
	/// RotationalDisplacementRX : OPTIONAL IfcPlaneAngleMeasure;
	/// RotationalDisplacementRY : OPTIONAL IfcPlaneAngleMeasure;
	/// RotationalDisplacementRZ : OPTIONAL IfcPlaneAngleMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralLoadSingleDisplacement : IFCStructuralLoadStatic, Global.IFCStructuralLoadSingleDisplacement
	{
		public virtual IFCLengthMeasure? DisplacementX { get; set; }
		public virtual IFCLengthMeasure? DisplacementY { get; set; }
		public virtual IFCLengthMeasure? DisplacementZ { get; set; }
		public virtual IFCPlaneAngleMeasure? RotationalDisplacementRX { get; set; }
		public virtual IFCPlaneAngleMeasure? RotationalDisplacementRY { get; set; }
		public virtual IFCPlaneAngleMeasure? RotationalDisplacementRZ { get; set; }
		public IFCStructuralLoadSingleDisplacement() : base()
		{
		}
		public IFCStructuralLoadSingleDisplacement(IFCLabel? Name, IFCLengthMeasure? DisplacementX, IFCLengthMeasure? DisplacementY, IFCLengthMeasure? DisplacementZ, IFCPlaneAngleMeasure? RotationalDisplacementRX, IFCPlaneAngleMeasure? RotationalDisplacementRY, IFCPlaneAngleMeasure? RotationalDisplacementRZ) : base (Name)
		{
			this.DisplacementX = DisplacementX;
			this.DisplacementY = DisplacementY;
			this.DisplacementZ = DisplacementZ;
			this.RotationalDisplacementRX = RotationalDisplacementRX;
			this.RotationalDisplacementRY = RotationalDisplacementRY;
			this.RotationalDisplacementRZ = RotationalDisplacementRZ;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"DisplacementX", DisplacementX},
				{"DisplacementY", DisplacementY},
				{"DisplacementZ", DisplacementZ},
				{"RotationalDisplacementRX", RotationalDisplacementRX},
				{"RotationalDisplacementRY", RotationalDisplacementRY},
				{"RotationalDisplacementRZ", RotationalDisplacementRZ}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLengthMeasure? _DisplacementX
		{
			get
			{
				return DisplacementX;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					DisplacementX = val;
				}
				else if(value == null)
				{
					DisplacementX = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _DisplacementY
		{
			get
			{
				return DisplacementY;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					DisplacementY = val;
				}
				else if(value == null)
				{
					DisplacementY = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _DisplacementZ
		{
			get
			{
				return DisplacementZ;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					DisplacementZ = val;
				}
				else if(value == null)
				{
					DisplacementZ = null;
				}
			}
		}
		public virtual Global.IFCPlaneAngleMeasure? _RotationalDisplacementRX
		{
			get
			{
				return RotationalDisplacementRX;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					RotationalDisplacementRX = val;
				}
				else if(value == null)
				{
					RotationalDisplacementRX = null;
				}
			}
		}
		public virtual Global.IFCPlaneAngleMeasure? _RotationalDisplacementRY
		{
			get
			{
				return RotationalDisplacementRY;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					RotationalDisplacementRY = val;
				}
				else if(value == null)
				{
					RotationalDisplacementRY = null;
				}
			}
		}
		public virtual Global.IFCPlaneAngleMeasure? _RotationalDisplacementRZ
		{
			get
			{
				return RotationalDisplacementRZ;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					RotationalDisplacementRZ = val;
				}
				else if(value == null)
				{
					RotationalDisplacementRZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleDisplacementDistortion
	/// SUBTYPE OF (IfcStructuralLoadSingleDisplacement);
	/// Distortion : OPTIONAL IfcCurvatureMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralLoadSingleDisplacementDistortion : IFCStructuralLoadSingleDisplacement, Global.IFCStructuralLoadSingleDisplacementDistortion
	{
		public virtual IFCCurvatureMeasure? Distortion { get; set; }
		public IFCStructuralLoadSingleDisplacementDistortion() : base()
		{
		}
		public IFCStructuralLoadSingleDisplacementDistortion(IFCLabel? Name, IFCLengthMeasure? DisplacementX, IFCLengthMeasure? DisplacementY, IFCLengthMeasure? DisplacementZ, IFCPlaneAngleMeasure? RotationalDisplacementRX, IFCPlaneAngleMeasure? RotationalDisplacementRY, IFCPlaneAngleMeasure? RotationalDisplacementRZ, IFCCurvatureMeasure? Distortion) : base (Name, DisplacementX, DisplacementY, DisplacementZ, RotationalDisplacementRX, RotationalDisplacementRY, RotationalDisplacementRZ)
		{
			this.Distortion = Distortion;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"DisplacementX", DisplacementX},
				{"DisplacementY", DisplacementY},
				{"DisplacementZ", DisplacementZ},
				{"RotationalDisplacementRX", RotationalDisplacementRX},
				{"RotationalDisplacementRY", RotationalDisplacementRY},
				{"RotationalDisplacementRZ", RotationalDisplacementRZ},
				{"Distortion", Distortion}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCurvatureMeasure? _Distortion
		{
			get
			{
				return Distortion;
			}
			set
			{
				if(value is IFCCurvatureMeasure val)
				{
					Distortion = val;
				}
				else if(value == null)
				{
					Distortion = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleForce
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadSingleForceWarping))
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// ForceX : OPTIONAL IfcForceMeasure;
	/// ForceY : OPTIONAL IfcForceMeasure;
	/// ForceZ : OPTIONAL IfcForceMeasure;
	/// MomentX : OPTIONAL IfcTorqueMeasure;
	/// MomentY : OPTIONAL IfcTorqueMeasure;
	/// MomentZ : OPTIONAL IfcTorqueMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralLoadSingleForce : IFCStructuralLoadStatic, Global.IFCStructuralLoadSingleForce
	{
		public virtual IFCForceMeasure? ForceX { get; set; }
		public virtual IFCForceMeasure? ForceY { get; set; }
		public virtual IFCForceMeasure? ForceZ { get; set; }
		public virtual IFCTorqueMeasure? MomentX { get; set; }
		public virtual IFCTorqueMeasure? MomentY { get; set; }
		public virtual IFCTorqueMeasure? MomentZ { get; set; }
		public IFCStructuralLoadSingleForce() : base()
		{
		}
		public IFCStructuralLoadSingleForce(IFCLabel? Name, IFCForceMeasure? ForceX, IFCForceMeasure? ForceY, IFCForceMeasure? ForceZ, IFCTorqueMeasure? MomentX, IFCTorqueMeasure? MomentY, IFCTorqueMeasure? MomentZ) : base (Name)
		{
			this.ForceX = ForceX;
			this.ForceY = ForceY;
			this.ForceZ = ForceZ;
			this.MomentX = MomentX;
			this.MomentY = MomentY;
			this.MomentZ = MomentZ;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"ForceX", ForceX},
				{"ForceY", ForceY},
				{"ForceZ", ForceZ},
				{"MomentX", MomentX},
				{"MomentY", MomentY},
				{"MomentZ", MomentZ}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCForceMeasure? _ForceX
		{
			get
			{
				return ForceX;
			}
			set
			{
				if(value is IFCForceMeasure val)
				{
					ForceX = val;
				}
				else if(value == null)
				{
					ForceX = null;
				}
			}
		}
		public virtual Global.IFCForceMeasure? _ForceY
		{
			get
			{
				return ForceY;
			}
			set
			{
				if(value is IFCForceMeasure val)
				{
					ForceY = val;
				}
				else if(value == null)
				{
					ForceY = null;
				}
			}
		}
		public virtual Global.IFCForceMeasure? _ForceZ
		{
			get
			{
				return ForceZ;
			}
			set
			{
				if(value is IFCForceMeasure val)
				{
					ForceZ = val;
				}
				else if(value == null)
				{
					ForceZ = null;
				}
			}
		}
		public virtual Global.IFCTorqueMeasure? _MomentX
		{
			get
			{
				return MomentX;
			}
			set
			{
				if(value is IFCTorqueMeasure val)
				{
					MomentX = val;
				}
				else if(value == null)
				{
					MomentX = null;
				}
			}
		}
		public virtual Global.IFCTorqueMeasure? _MomentY
		{
			get
			{
				return MomentY;
			}
			set
			{
				if(value is IFCTorqueMeasure val)
				{
					MomentY = val;
				}
				else if(value == null)
				{
					MomentY = null;
				}
			}
		}
		public virtual Global.IFCTorqueMeasure? _MomentZ
		{
			get
			{
				return MomentZ;
			}
			set
			{
				if(value is IFCTorqueMeasure val)
				{
					MomentZ = val;
				}
				else if(value == null)
				{
					MomentZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadSingleForceWarping
	/// SUBTYPE OF (IfcStructuralLoadSingleForce);
	/// WarpingMoment : OPTIONAL IfcWarpingMomentMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralLoadSingleForceWarping : IFCStructuralLoadSingleForce, Global.IFCStructuralLoadSingleForceWarping
	{
		public virtual IFCWarpingMomentMeasure? WarpingMoment { get; set; }
		public IFCStructuralLoadSingleForceWarping() : base()
		{
		}
		public IFCStructuralLoadSingleForceWarping(IFCLabel? Name, IFCForceMeasure? ForceX, IFCForceMeasure? ForceY, IFCForceMeasure? ForceZ, IFCTorqueMeasure? MomentX, IFCTorqueMeasure? MomentY, IFCTorqueMeasure? MomentZ, IFCWarpingMomentMeasure? WarpingMoment) : base (Name, ForceX, ForceY, ForceZ, MomentX, MomentY, MomentZ)
		{
			this.WarpingMoment = WarpingMoment;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"ForceX", ForceX},
				{"ForceY", ForceY},
				{"ForceZ", ForceZ},
				{"MomentX", MomentX},
				{"MomentY", MomentY},
				{"MomentZ", MomentZ},
				{"WarpingMoment", WarpingMoment}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCWarpingMomentMeasure? _WarpingMoment
		{
			get
			{
				return WarpingMoment;
			}
			set
			{
				if(value is IFCWarpingMomentMeasure val)
				{
					WarpingMoment = val;
				}
				else if(value == null)
				{
					WarpingMoment = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadStatic
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralLoadLinearForce
	/// ,IfcStructuralLoadPlanarForce
	/// ,IfcStructuralLoadSingleDisplacement
	/// ,IfcStructuralLoadSingleForce
	/// ,IfcStructuralLoadTemperature))
	/// SUBTYPE OF (IfcStructuralLoad);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCStructuralLoadStatic : IFCStructuralLoad, Global.IFCStructuralLoadStatic
	{
		public IFCStructuralLoadStatic() : base()
		{
		}
		public IFCStructuralLoadStatic(IFCLabel? Name) : base (Name)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralLoadTemperature
	/// SUBTYPE OF (IfcStructuralLoadStatic);
	/// DeltaT_Constant : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// DeltaT_Y : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// DeltaT_Z : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralLoadTemperature : IFCStructuralLoadStatic, Global.IFCStructuralLoadTemperature
	{
		public virtual IFCThermodynamicTemperatureMeasure? DeltaT_Constant { get; set; }
		public virtual IFCThermodynamicTemperatureMeasure? DeltaT_Y { get; set; }
		public virtual IFCThermodynamicTemperatureMeasure? DeltaT_Z { get; set; }
		public IFCStructuralLoadTemperature() : base()
		{
		}
		public IFCStructuralLoadTemperature(IFCLabel? Name, IFCThermodynamicTemperatureMeasure? DeltaT_Constant, IFCThermodynamicTemperatureMeasure? DeltaT_Y, IFCThermodynamicTemperatureMeasure? DeltaT_Z) : base (Name)
		{
			this.DeltaT_Constant = DeltaT_Constant;
			this.DeltaT_Y = DeltaT_Y;
			this.DeltaT_Z = DeltaT_Z;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"DeltaT_Constant", DeltaT_Constant},
				{"DeltaT_Y", DeltaT_Y},
				{"DeltaT_Z", DeltaT_Z}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCThermodynamicTemperatureMeasure? _DeltaT_Constant
		{
			get
			{
				return DeltaT_Constant;
			}
			set
			{
				if(value is IFCThermodynamicTemperatureMeasure val)
				{
					DeltaT_Constant = val;
				}
				else if(value == null)
				{
					DeltaT_Constant = null;
				}
			}
		}
		public virtual Global.IFCThermodynamicTemperatureMeasure? _DeltaT_Y
		{
			get
			{
				return DeltaT_Y;
			}
			set
			{
				if(value is IFCThermodynamicTemperatureMeasure val)
				{
					DeltaT_Y = val;
				}
				else if(value == null)
				{
					DeltaT_Y = null;
				}
			}
		}
		public virtual Global.IFCThermodynamicTemperatureMeasure? _DeltaT_Z
		{
			get
			{
				return DeltaT_Z;
			}
			set
			{
				if(value is IFCThermodynamicTemperatureMeasure val)
				{
					DeltaT_Z = val;
				}
				else if(value == null)
				{
					DeltaT_Z = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralMember
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralCurveMember
	/// ,IfcStructuralSurfaceMember))
	/// SUBTYPE OF (IfcStructuralItem);
	/// INVERSE
	/// ReferencesElement : SET [0:?] OF IfcRelConnectsStructuralElement FOR RelatedStructuralMember;
	/// ConnectedBy : SET [0:?] OF IfcRelConnectsStructuralMember FOR RelatingStructuralMember;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCStructuralMember : IFCStructuralItem, Global.IFCStructuralMember
	{
		public IFC_Attributes<IFCRelConnectsStructuralElement>? ReferencesElement {get{return new IFC_Attributes<IFCRelConnectsStructuralElement>(Model?.GetItems<IFCRelConnectsStructuralElement>().Where(x => x.RelatedStructuralMember != null && x.RelatedStructuralMember == this).ToList());}}
		public IFC_Attributes<IFCRelConnectsStructuralMember>? ConnectedBy {get{return new IFC_Attributes<IFCRelConnectsStructuralMember>(Model?.GetItems<IFCRelConnectsStructuralMember>().Where(x => x.RelatingStructuralMember != null && x.RelatingStructuralMember == this).ToList());}}
		public IFCStructuralMember() : base()
		{
		}
		public IFCStructuralMember(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedStructuralActivity", AssignedStructuralActivity},
				{"ReferencesElement", ReferencesElement},
				{"ConnectedBy", ConnectedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCRelConnectsStructuralElement>? _ReferencesElement
		{
			get
			{
				if(ReferencesElement != null)
				{
					IFC_Attributes<Global.IFCRelConnectsStructuralElement>? items = new IFC_Attributes<Global.IFCRelConnectsStructuralElement>();
					foreach (IFCRelConnectsStructuralElement item in ReferencesElement)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
		public virtual IFC_Attributes<Global.IFCRelConnectsStructuralMember>? _ConnectedBy
		{
			get
			{
				if(ConnectedBy != null)
				{
					IFC_Attributes<Global.IFCRelConnectsStructuralMember>? items = new IFC_Attributes<Global.IFCRelConnectsStructuralMember>();
					foreach (IFCRelConnectsStructuralMember item in ConnectedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPlanarAction
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralPlanarActionVarying))
	/// SUBTYPE OF (IfcStructuralAction);
	/// ProjectedOrTrue : IfcProjectedOrTrueLengthEnum;
	/// WHERE
	/// WR61 : SIZEOF(['IFC2X3.IFCSTRUCTURALLOADPLANARFORCE',
	/// 'IFC2X3.IFCSTRUCTURALLOADTEMPERATURE']
	/// * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralPlanarAction : IFCStructuralAction, Global.IFCStructuralPlanarAction
	{
		public virtual IFCProjectedOrTrueLengthEnum? ProjectedOrTrue { get; set; }
		public virtual bool is_WR61
		{
			get
			{
				return true;
			}
		}
		public IFCStructuralPlanarAction() : base()
		{
		}
		public IFCStructuralPlanarAction(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralLoad? AppliedLoad, IFCGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IFCStructuralReaction? CausedBy, IFCProjectedOrTrueLengthEnum? ProjectedOrTrue) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy)
		{
			this.ProjectedOrTrue = ProjectedOrTrue;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedLoad", AppliedLoad},
				{"GlobalOrLocal", GlobalOrLocal},
				{"DestabilizingLoad", DestabilizingLoad},
				{"CausedBy", CausedBy},
				{"ProjectedOrTrue", ProjectedOrTrue}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedToStructuralItem", AssignedToStructuralItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR61", is_WR61}
			};
		}
		public virtual Global.IFCProjectedOrTrueLengthEnum? _ProjectedOrTrue
		{
			get
			{
				return ProjectedOrTrue;
			}
			set
			{
				if(value is IFCProjectedOrTrueLengthEnum val)
				{
					ProjectedOrTrue = val;
				}
				else if(value == null)
				{
					ProjectedOrTrue = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPlanarActionVarying
	/// SUBTYPE OF (IfcStructuralPlanarAction);
	/// VaryingAppliedLoadLocation : IfcShapeAspect;
	/// SubsequentAppliedLoads : LIST [2:?] OF IfcStructuralLoad;
	/// DERIVE
	/// VaryingAppliedLoads : LIST [3:?] OF IfcStructuralLoad := IfcAddToBeginOfList(SELF\IfcStructuralActivity.AppliedLoad, SubsequentAppliedLoads);
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralPlanarActionVarying : IFCStructuralPlanarAction, Global.IFCStructuralPlanarActionVarying
	{
		public virtual IFCShapeAspect? VaryingAppliedLoadLocation { get; set; }
		public virtual IFC_Attributes<IFCStructuralLoad>? SubsequentAppliedLoads { get; set; }
		public virtual IFC_Attributes<IFCStructuralLoad>? VaryingAppliedLoads
		{
			get
			{
				//MANUAL : IFC2x3.IFCStructuralPlanarActionVarying.VaryingAppliedLoads
				// IfcAddToBeginOfList(SELF\IfcStructuralActivity.AppliedLoad, SubsequentAppliedLoads);
				return null;
				//END_MANUAL
			}
		}
		public IFCStructuralPlanarActionVarying() : base()
		{
		}
		public IFCStructuralPlanarActionVarying(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralLoad? AppliedLoad, IFCGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IFCStructuralReaction? CausedBy, IFCProjectedOrTrueLengthEnum? ProjectedOrTrue, IFCShapeAspect? VaryingAppliedLoadLocation, IFC_Attributes<IFCStructuralLoad>? SubsequentAppliedLoads) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy, ProjectedOrTrue)
		{
			this.VaryingAppliedLoadLocation = VaryingAppliedLoadLocation;
			this.SubsequentAppliedLoads = SubsequentAppliedLoads;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedLoad", AppliedLoad},
				{"GlobalOrLocal", GlobalOrLocal},
				{"DestabilizingLoad", DestabilizingLoad},
				{"CausedBy", CausedBy},
				{"ProjectedOrTrue", ProjectedOrTrue},
				{"VaryingAppliedLoadLocation", VaryingAppliedLoadLocation},
				{"SubsequentAppliedLoads", SubsequentAppliedLoads}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"VaryingAppliedLoads", VaryingAppliedLoads}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedToStructuralItem", AssignedToStructuralItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR61", is_WR61}
			};
		}
		public virtual Global.IFCShapeAspect? _VaryingAppliedLoadLocation
		{
			get
			{
				return VaryingAppliedLoadLocation;
			}
			set
			{
				if(value is IFCShapeAspect val)
				{
					VaryingAppliedLoadLocation = val;
				}
				else if(value == null)
				{
					VaryingAppliedLoadLocation = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCStructuralLoad>? _SubsequentAppliedLoads
		{
			get
			{
				if(SubsequentAppliedLoads != null)
				{
					IFC_Attributes<Global.IFCStructuralLoad>? items = new IFC_Attributes<Global.IFCStructuralLoad>();
					foreach (IFCStructuralLoad item in SubsequentAppliedLoads)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SubsequentAppliedLoads = null;
				}
				else
				{
					SubsequentAppliedLoads = new IFC_Attributes<IFCStructuralLoad>();
					foreach(var val in value)
					{
						if(val is IFCStructuralLoad v)
						{
							SubsequentAppliedLoads.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCStructuralLoad>? _VaryingAppliedLoads
		{
			get
			{
				if(VaryingAppliedLoads != null)
				{
					IFC_Attributes<Global.IFCStructuralLoad>? items = new IFC_Attributes<Global.IFCStructuralLoad>();
					foreach (IFCStructuralLoad item in VaryingAppliedLoads)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPointAction
	/// SUBTYPE OF (IfcStructuralAction);
	/// WHERE
	/// WR61 : SIZEOF(['IFC2X3.IFCSTRUCTURALLOADSINGLEFORCE',
	/// 'IFC2X3.IFCSTRUCTURALLOADSINGLEDISPLACEMENT']
	/// * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralPointAction : IFCStructuralAction, Global.IFCStructuralPointAction
	{
		public virtual bool is_WR61
		{
			get
			{
				return true;
			}
		}
		public IFCStructuralPointAction() : base()
		{
		}
		public IFCStructuralPointAction(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralLoad? AppliedLoad, IFCGlobalOrLocalEnum? GlobalOrLocal, BOOLEAN? DestabilizingLoad, IFCStructuralReaction? CausedBy) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, CausedBy)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedLoad", AppliedLoad},
				{"GlobalOrLocal", GlobalOrLocal},
				{"DestabilizingLoad", DestabilizingLoad},
				{"CausedBy", CausedBy}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedToStructuralItem", AssignedToStructuralItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR61", is_WR61}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPointConnection
	/// SUBTYPE OF (IfcStructuralConnection);
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralPointConnection : IFCStructuralConnection, Global.IFCStructuralPointConnection
	{
		public IFCStructuralPointConnection() : base()
		{
		}
		public IFCStructuralPointConnection(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCBoundaryCondition? AppliedCondition) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedCondition", AppliedCondition}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedStructuralActivity", AssignedStructuralActivity},
				{"ConnectsStructuralMembers", ConnectsStructuralMembers}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralPointReaction
	/// SUBTYPE OF (IfcStructuralReaction);
	/// WHERE
	/// WR61 : SIZEOF(['IFC2X3.IFCSTRUCTURALLOADSINGLEFORCE',
	/// 'IFC2X3.IFCSTRUCTURALLOADSINGLEDISPLACEMENT']
	/// * TYPEOF(SELF\IfcStructuralActivity.AppliedLoad)) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralPointReaction : IFCStructuralReaction, Global.IFCStructuralPointReaction
	{
		public virtual bool is_WR61
		{
			get
			{
				return true;
			}
		}
		public IFCStructuralPointReaction() : base()
		{
		}
		public IFCStructuralPointReaction(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralLoad? AppliedLoad, IFCGlobalOrLocalEnum? GlobalOrLocal) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedLoad", AppliedLoad},
				{"GlobalOrLocal", GlobalOrLocal}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedToStructuralItem", AssignedToStructuralItem},
				{"Causes", Causes}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR61", is_WR61}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralProfileProperties
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralSteelProfileProperties))
	/// SUBTYPE OF (IfcGeneralProfileProperties);
	/// TorsionalConstantX : OPTIONAL IfcMomentOfInertiaMeasure;
	/// MomentOfInertiaYZ : OPTIONAL IfcMomentOfInertiaMeasure;
	/// MomentOfInertiaY : OPTIONAL IfcMomentOfInertiaMeasure;
	/// MomentOfInertiaZ : OPTIONAL IfcMomentOfInertiaMeasure;
	/// WarpingConstant : OPTIONAL IfcWarpingConstantMeasure;
	/// ShearCentreZ : OPTIONAL IfcLengthMeasure;
	/// ShearCentreY : OPTIONAL IfcLengthMeasure;
	/// ShearDeformationAreaZ : OPTIONAL IfcAreaMeasure;
	/// ShearDeformationAreaY : OPTIONAL IfcAreaMeasure;
	/// MaximumSectionModulusY : OPTIONAL IfcSectionModulusMeasure;
	/// MinimumSectionModulusY : OPTIONAL IfcSectionModulusMeasure;
	/// MaximumSectionModulusZ : OPTIONAL IfcSectionModulusMeasure;
	/// MinimumSectionModulusZ : OPTIONAL IfcSectionModulusMeasure;
	/// TorsionalSectionModulus : OPTIONAL IfcSectionModulusMeasure;
	/// CentreOfGravityInX : OPTIONAL IfcLengthMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcLengthMeasure;
	/// WHERE
	/// WR21 : NOT(EXISTS(ShearDeformationAreaY)) OR (ShearDeformationAreaY >= 0.);
	/// WR22 : NOT(EXISTS(ShearDeformationAreaZ)) OR (ShearDeformationAreaZ >= 0.);
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralProfileProperties : IFCGeneralProfileProperties, Global.IFCStructuralProfileProperties
	{
		public virtual IFCMomentOfInertiaMeasure? TorsionalConstantX { get; set; }
		public virtual IFCMomentOfInertiaMeasure? MomentOfInertiaYZ { get; set; }
		public virtual IFCMomentOfInertiaMeasure? MomentOfInertiaY { get; set; }
		public virtual IFCMomentOfInertiaMeasure? MomentOfInertiaZ { get; set; }
		public virtual IFCWarpingConstantMeasure? WarpingConstant { get; set; }
		public virtual IFCLengthMeasure? ShearCentreZ { get; set; }
		public virtual IFCLengthMeasure? ShearCentreY { get; set; }
		public virtual IFCAreaMeasure? ShearDeformationAreaZ { get; set; }
		public virtual IFCAreaMeasure? ShearDeformationAreaY { get; set; }
		public virtual IFCSectionModulusMeasure? MaximumSectionModulusY { get; set; }
		public virtual IFCSectionModulusMeasure? MinimumSectionModulusY { get; set; }
		public virtual IFCSectionModulusMeasure? MaximumSectionModulusZ { get; set; }
		public virtual IFCSectionModulusMeasure? MinimumSectionModulusZ { get; set; }
		public virtual IFCSectionModulusMeasure? TorsionalSectionModulus { get; set; }
		public virtual IFCLengthMeasure? CentreOfGravityInX { get; set; }
		public virtual IFCLengthMeasure? CentreOfGravityInY { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCStructuralProfileProperties() : base()
		{
		}
		public IFCStructuralProfileProperties(IFCLabel? ProfileName, IFCProfileDef? ProfileDefinition, IFCMassPerLengthMeasure? PhysicalWeight, IFCPositiveLengthMeasure? Perimeter, IFCPositiveLengthMeasure? MinimumPlateThickness, IFCPositiveLengthMeasure? MaximumPlateThickness, IFCAreaMeasure? CrossSectionArea, IFCMomentOfInertiaMeasure? TorsionalConstantX, IFCMomentOfInertiaMeasure? MomentOfInertiaYZ, IFCMomentOfInertiaMeasure? MomentOfInertiaY, IFCMomentOfInertiaMeasure? MomentOfInertiaZ, IFCWarpingConstantMeasure? WarpingConstant, IFCLengthMeasure? ShearCentreZ, IFCLengthMeasure? ShearCentreY, IFCAreaMeasure? ShearDeformationAreaZ, IFCAreaMeasure? ShearDeformationAreaY, IFCSectionModulusMeasure? MaximumSectionModulusY, IFCSectionModulusMeasure? MinimumSectionModulusY, IFCSectionModulusMeasure? MaximumSectionModulusZ, IFCSectionModulusMeasure? MinimumSectionModulusZ, IFCSectionModulusMeasure? TorsionalSectionModulus, IFCLengthMeasure? CentreOfGravityInX, IFCLengthMeasure? CentreOfGravityInY) : base (ProfileName, ProfileDefinition, PhysicalWeight, Perimeter, MinimumPlateThickness, MaximumPlateThickness, CrossSectionArea)
		{
			this.TorsionalConstantX = TorsionalConstantX;
			this.MomentOfInertiaYZ = MomentOfInertiaYZ;
			this.MomentOfInertiaY = MomentOfInertiaY;
			this.MomentOfInertiaZ = MomentOfInertiaZ;
			this.WarpingConstant = WarpingConstant;
			this.ShearCentreZ = ShearCentreZ;
			this.ShearCentreY = ShearCentreY;
			this.ShearDeformationAreaZ = ShearDeformationAreaZ;
			this.ShearDeformationAreaY = ShearDeformationAreaY;
			this.MaximumSectionModulusY = MaximumSectionModulusY;
			this.MinimumSectionModulusY = MinimumSectionModulusY;
			this.MaximumSectionModulusZ = MaximumSectionModulusZ;
			this.MinimumSectionModulusZ = MinimumSectionModulusZ;
			this.TorsionalSectionModulus = TorsionalSectionModulus;
			this.CentreOfGravityInX = CentreOfGravityInX;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileName", ProfileName},
				{"ProfileDefinition", ProfileDefinition},
				{"PhysicalWeight", PhysicalWeight},
				{"Perimeter", Perimeter},
				{"MinimumPlateThickness", MinimumPlateThickness},
				{"MaximumPlateThickness", MaximumPlateThickness},
				{"CrossSectionArea", CrossSectionArea},
				{"TorsionalConstantX", TorsionalConstantX},
				{"MomentOfInertiaYZ", MomentOfInertiaYZ},
				{"MomentOfInertiaY", MomentOfInertiaY},
				{"MomentOfInertiaZ", MomentOfInertiaZ},
				{"WarpingConstant", WarpingConstant},
				{"ShearCentreZ", ShearCentreZ},
				{"ShearCentreY", ShearCentreY},
				{"ShearDeformationAreaZ", ShearDeformationAreaZ},
				{"ShearDeformationAreaY", ShearDeformationAreaY},
				{"MaximumSectionModulusY", MaximumSectionModulusY},
				{"MinimumSectionModulusY", MinimumSectionModulusY},
				{"MaximumSectionModulusZ", MaximumSectionModulusZ},
				{"MinimumSectionModulusZ", MinimumSectionModulusZ},
				{"TorsionalSectionModulus", TorsionalSectionModulus},
				{"CentreOfGravityInX", CentreOfGravityInX},
				{"CentreOfGravityInY", CentreOfGravityInY}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCMomentOfInertiaMeasure? _TorsionalConstantX
		{
			get
			{
				return TorsionalConstantX;
			}
			set
			{
				if(value is IFCMomentOfInertiaMeasure val)
				{
					TorsionalConstantX = val;
				}
				else if(value == null)
				{
					TorsionalConstantX = null;
				}
			}
		}
		public virtual Global.IFCMomentOfInertiaMeasure? _MomentOfInertiaYZ
		{
			get
			{
				return MomentOfInertiaYZ;
			}
			set
			{
				if(value is IFCMomentOfInertiaMeasure val)
				{
					MomentOfInertiaYZ = val;
				}
				else if(value == null)
				{
					MomentOfInertiaYZ = null;
				}
			}
		}
		public virtual Global.IFCMomentOfInertiaMeasure? _MomentOfInertiaY
		{
			get
			{
				return MomentOfInertiaY;
			}
			set
			{
				if(value is IFCMomentOfInertiaMeasure val)
				{
					MomentOfInertiaY = val;
				}
				else if(value == null)
				{
					MomentOfInertiaY = null;
				}
			}
		}
		public virtual Global.IFCMomentOfInertiaMeasure? _MomentOfInertiaZ
		{
			get
			{
				return MomentOfInertiaZ;
			}
			set
			{
				if(value is IFCMomentOfInertiaMeasure val)
				{
					MomentOfInertiaZ = val;
				}
				else if(value == null)
				{
					MomentOfInertiaZ = null;
				}
			}
		}
		public virtual Global.IFCWarpingConstantMeasure? _WarpingConstant
		{
			get
			{
				return WarpingConstant;
			}
			set
			{
				if(value is IFCWarpingConstantMeasure val)
				{
					WarpingConstant = val;
				}
				else if(value == null)
				{
					WarpingConstant = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _ShearCentreZ
		{
			get
			{
				return ShearCentreZ;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					ShearCentreZ = val;
				}
				else if(value == null)
				{
					ShearCentreZ = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _ShearCentreY
		{
			get
			{
				return ShearCentreY;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					ShearCentreY = val;
				}
				else if(value == null)
				{
					ShearCentreY = null;
				}
			}
		}
		public virtual Global.IFCAreaMeasure? _ShearDeformationAreaZ
		{
			get
			{
				return ShearDeformationAreaZ;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					ShearDeformationAreaZ = val;
				}
				else if(value == null)
				{
					ShearDeformationAreaZ = null;
				}
			}
		}
		public virtual Global.IFCAreaMeasure? _ShearDeformationAreaY
		{
			get
			{
				return ShearDeformationAreaY;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					ShearDeformationAreaY = val;
				}
				else if(value == null)
				{
					ShearDeformationAreaY = null;
				}
			}
		}
		public virtual Global.IFCSectionModulusMeasure? _MaximumSectionModulusY
		{
			get
			{
				return MaximumSectionModulusY;
			}
			set
			{
				if(value is IFCSectionModulusMeasure val)
				{
					MaximumSectionModulusY = val;
				}
				else if(value == null)
				{
					MaximumSectionModulusY = null;
				}
			}
		}
		public virtual Global.IFCSectionModulusMeasure? _MinimumSectionModulusY
		{
			get
			{
				return MinimumSectionModulusY;
			}
			set
			{
				if(value is IFCSectionModulusMeasure val)
				{
					MinimumSectionModulusY = val;
				}
				else if(value == null)
				{
					MinimumSectionModulusY = null;
				}
			}
		}
		public virtual Global.IFCSectionModulusMeasure? _MaximumSectionModulusZ
		{
			get
			{
				return MaximumSectionModulusZ;
			}
			set
			{
				if(value is IFCSectionModulusMeasure val)
				{
					MaximumSectionModulusZ = val;
				}
				else if(value == null)
				{
					MaximumSectionModulusZ = null;
				}
			}
		}
		public virtual Global.IFCSectionModulusMeasure? _MinimumSectionModulusZ
		{
			get
			{
				return MinimumSectionModulusZ;
			}
			set
			{
				if(value is IFCSectionModulusMeasure val)
				{
					MinimumSectionModulusZ = val;
				}
				else if(value == null)
				{
					MinimumSectionModulusZ = null;
				}
			}
		}
		public virtual Global.IFCSectionModulusMeasure? _TorsionalSectionModulus
		{
			get
			{
				return TorsionalSectionModulus;
			}
			set
			{
				if(value is IFCSectionModulusMeasure val)
				{
					TorsionalSectionModulus = val;
				}
				else if(value == null)
				{
					TorsionalSectionModulus = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _CentreOfGravityInX
		{
			get
			{
				return CentreOfGravityInX;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					CentreOfGravityInX = val;
				}
				else if(value == null)
				{
					CentreOfGravityInX = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _CentreOfGravityInY
		{
			get
			{
				return CentreOfGravityInY;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					CentreOfGravityInY = val;
				}
				else if(value == null)
				{
					CentreOfGravityInY = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralReaction
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStructuralPointReaction))
	/// SUBTYPE OF (IfcStructuralActivity);
	/// INVERSE
	/// Causes : SET [0:?] OF IfcStructuralAction FOR CausedBy;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCStructuralReaction : IFCStructuralActivity, Global.IFCStructuralReaction
	{
		public IFC_Attributes<IFCStructuralAction>? Causes {get{return new IFC_Attributes<IFCStructuralAction>(Model?.GetItems<IFCStructuralAction>().Where(x => x.CausedBy != null && x.CausedBy == this).ToList());}}
		public IFCStructuralReaction() : base()
		{
		}
		public IFCStructuralReaction(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralLoad? AppliedLoad, IFCGlobalOrLocalEnum? GlobalOrLocal) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedLoad", AppliedLoad},
				{"GlobalOrLocal", GlobalOrLocal}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedToStructuralItem", AssignedToStructuralItem},
				{"Causes", Causes}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCStructuralAction>? _Causes
		{
			get
			{
				if(Causes != null)
				{
					IFC_Attributes<Global.IFCStructuralAction>? items = new IFC_Attributes<Global.IFCStructuralAction>();
					foreach (IFCStructuralAction item in Causes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralResultGroup
	/// SUBTYPE OF (IfcGroup);
	/// TheoryType : IfcAnalysisTheoryTypeEnum;
	/// ResultForLoadGroup : OPTIONAL IfcStructuralLoadGroup;
	/// IsLinear : BOOLEAN;
	/// INVERSE
	/// ResultGroupFor : SET [0:1] OF IfcStructuralAnalysisModel FOR HasResults;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralResultGroup : IFCGroup, Global.IFCStructuralResultGroup
	{
		public virtual IFCAnalysisTheoryTypeEnum? TheoryType { get; set; }
		public virtual IFCStructuralLoadGroup? ResultForLoadGroup { get; set; }
		public virtual BOOLEAN? IsLinear { get; set; }
		public IFC_Attributes<IFCStructuralAnalysisModel>? ResultGroupFor {get{return new IFC_Attributes<IFCStructuralAnalysisModel>(Model?.GetItems<IFCStructuralAnalysisModel>().Where(x => x.HasResults != null && x.HasResults.Contains(this)).ToList());}}
		public IFCStructuralResultGroup() : base()
		{
		}
		public IFCStructuralResultGroup(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCAnalysisTheoryTypeEnum? TheoryType, IFCStructuralLoadGroup? ResultForLoadGroup, BOOLEAN? IsLinear) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.TheoryType = TheoryType;
			this.ResultForLoadGroup = ResultForLoadGroup;
			this.IsLinear = IsLinear;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"TheoryType", TheoryType},
				{"ResultForLoadGroup", ResultForLoadGroup},
				{"IsLinear", IsLinear}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsGroupedBy", IsGroupedBy},
				{"ResultGroupFor", ResultGroupFor}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCAnalysisTheoryTypeEnum? _TheoryType
		{
			get
			{
				return TheoryType;
			}
			set
			{
				if(value is IFCAnalysisTheoryTypeEnum val)
				{
					TheoryType = val;
				}
				else if(value == null)
				{
					TheoryType = null;
				}
			}
		}
		public virtual Global.IFCStructuralLoadGroup? _ResultForLoadGroup
		{
			get
			{
				return ResultForLoadGroup;
			}
			set
			{
				if(value is IFCStructuralLoadGroup val)
				{
					ResultForLoadGroup = val;
				}
				else if(value == null)
				{
					ResultForLoadGroup = null;
				}
			}
		}
		public virtual BOOLEAN? _IsLinear
		{
			get
			{
				return IsLinear;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					IsLinear = val;
				}
				else if(value == null)
				{
					IsLinear = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCStructuralAnalysisModel>? _ResultGroupFor
		{
			get
			{
				if(ResultGroupFor != null)
				{
					IFC_Attributes<Global.IFCStructuralAnalysisModel>? items = new IFC_Attributes<Global.IFCStructuralAnalysisModel>();
					foreach (IFCStructuralAnalysisModel item in ResultGroupFor)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralSteelProfileProperties
	/// SUBTYPE OF (IfcStructuralProfileProperties);
	/// ShearAreaZ : OPTIONAL IfcAreaMeasure;
	/// ShearAreaY : OPTIONAL IfcAreaMeasure;
	/// PlasticShapeFactorY : OPTIONAL IfcPositiveRatioMeasure;
	/// PlasticShapeFactorZ : OPTIONAL IfcPositiveRatioMeasure;
	/// WHERE
	/// WR31 : NOT(EXISTS(ShearAreaY)) OR (ShearAreaY >= 0.);
	/// WR32 : NOT(EXISTS(ShearAreaZ)) OR (ShearAreaZ >= 0.);
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralSteelProfileProperties : IFCStructuralProfileProperties, Global.IFCStructuralSteelProfileProperties
	{
		public virtual IFCAreaMeasure? ShearAreaZ { get; set; }
		public virtual IFCAreaMeasure? ShearAreaY { get; set; }
		public virtual IFCPositiveRatioMeasure? PlasticShapeFactorY { get; set; }
		public virtual IFCPositiveRatioMeasure? PlasticShapeFactorZ { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR32
		{
			get
			{
				return true;
			}
		}
		public IFCStructuralSteelProfileProperties() : base()
		{
		}
		public IFCStructuralSteelProfileProperties(IFCLabel? ProfileName, IFCProfileDef? ProfileDefinition, IFCMassPerLengthMeasure? PhysicalWeight, IFCPositiveLengthMeasure? Perimeter, IFCPositiveLengthMeasure? MinimumPlateThickness, IFCPositiveLengthMeasure? MaximumPlateThickness, IFCAreaMeasure? CrossSectionArea, IFCMomentOfInertiaMeasure? TorsionalConstantX, IFCMomentOfInertiaMeasure? MomentOfInertiaYZ, IFCMomentOfInertiaMeasure? MomentOfInertiaY, IFCMomentOfInertiaMeasure? MomentOfInertiaZ, IFCWarpingConstantMeasure? WarpingConstant, IFCLengthMeasure? ShearCentreZ, IFCLengthMeasure? ShearCentreY, IFCAreaMeasure? ShearDeformationAreaZ, IFCAreaMeasure? ShearDeformationAreaY, IFCSectionModulusMeasure? MaximumSectionModulusY, IFCSectionModulusMeasure? MinimumSectionModulusY, IFCSectionModulusMeasure? MaximumSectionModulusZ, IFCSectionModulusMeasure? MinimumSectionModulusZ, IFCSectionModulusMeasure? TorsionalSectionModulus, IFCLengthMeasure? CentreOfGravityInX, IFCLengthMeasure? CentreOfGravityInY, IFCAreaMeasure? ShearAreaZ, IFCAreaMeasure? ShearAreaY, IFCPositiveRatioMeasure? PlasticShapeFactorY, IFCPositiveRatioMeasure? PlasticShapeFactorZ) : base (ProfileName, ProfileDefinition, PhysicalWeight, Perimeter, MinimumPlateThickness, MaximumPlateThickness, CrossSectionArea, TorsionalConstantX, MomentOfInertiaYZ, MomentOfInertiaY, MomentOfInertiaZ, WarpingConstant, ShearCentreZ, ShearCentreY, ShearDeformationAreaZ, ShearDeformationAreaY, MaximumSectionModulusY, MinimumSectionModulusY, MaximumSectionModulusZ, MinimumSectionModulusZ, TorsionalSectionModulus, CentreOfGravityInX, CentreOfGravityInY)
		{
			this.ShearAreaZ = ShearAreaZ;
			this.ShearAreaY = ShearAreaY;
			this.PlasticShapeFactorY = PlasticShapeFactorY;
			this.PlasticShapeFactorZ = PlasticShapeFactorZ;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileName", ProfileName},
				{"ProfileDefinition", ProfileDefinition},
				{"PhysicalWeight", PhysicalWeight},
				{"Perimeter", Perimeter},
				{"MinimumPlateThickness", MinimumPlateThickness},
				{"MaximumPlateThickness", MaximumPlateThickness},
				{"CrossSectionArea", CrossSectionArea},
				{"TorsionalConstantX", TorsionalConstantX},
				{"MomentOfInertiaYZ", MomentOfInertiaYZ},
				{"MomentOfInertiaY", MomentOfInertiaY},
				{"MomentOfInertiaZ", MomentOfInertiaZ},
				{"WarpingConstant", WarpingConstant},
				{"ShearCentreZ", ShearCentreZ},
				{"ShearCentreY", ShearCentreY},
				{"ShearDeformationAreaZ", ShearDeformationAreaZ},
				{"ShearDeformationAreaY", ShearDeformationAreaY},
				{"MaximumSectionModulusY", MaximumSectionModulusY},
				{"MinimumSectionModulusY", MinimumSectionModulusY},
				{"MaximumSectionModulusZ", MaximumSectionModulusZ},
				{"MinimumSectionModulusZ", MinimumSectionModulusZ},
				{"TorsionalSectionModulus", TorsionalSectionModulus},
				{"CentreOfGravityInX", CentreOfGravityInX},
				{"CentreOfGravityInY", CentreOfGravityInY},
				{"ShearAreaZ", ShearAreaZ},
				{"ShearAreaY", ShearAreaY},
				{"PlasticShapeFactorY", PlasticShapeFactorY},
				{"PlasticShapeFactorZ", PlasticShapeFactorZ}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22},
				{"is_WR31", is_WR31},
				{"is_WR32", is_WR32}
			};
		}
		public virtual Global.IFCAreaMeasure? _ShearAreaZ
		{
			get
			{
				return ShearAreaZ;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					ShearAreaZ = val;
				}
				else if(value == null)
				{
					ShearAreaZ = null;
				}
			}
		}
		public virtual Global.IFCAreaMeasure? _ShearAreaY
		{
			get
			{
				return ShearAreaY;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					ShearAreaY = val;
				}
				else if(value == null)
				{
					ShearAreaY = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _PlasticShapeFactorY
		{
			get
			{
				return PlasticShapeFactorY;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					PlasticShapeFactorY = val;
				}
				else if(value == null)
				{
					PlasticShapeFactorY = null;
				}
			}
		}
		public virtual Global.IFCPositiveRatioMeasure? _PlasticShapeFactorZ
		{
			get
			{
				return PlasticShapeFactorZ;
			}
			set
			{
				if(value is IFCPositiveRatioMeasure val)
				{
					PlasticShapeFactorZ = val;
				}
				else if(value == null)
				{
					PlasticShapeFactorZ = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralSurfaceConnection
	/// SUBTYPE OF (IfcStructuralConnection);
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralSurfaceConnection : IFCStructuralConnection, Global.IFCStructuralSurfaceConnection
	{
		public IFCStructuralSurfaceConnection() : base()
		{
		}
		public IFCStructuralSurfaceConnection(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCBoundaryCondition? AppliedCondition) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"AppliedCondition", AppliedCondition}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedStructuralActivity", AssignedStructuralActivity},
				{"ConnectsStructuralMembers", ConnectsStructuralMembers}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralSurfaceMember
	/// SUPERTYPE OF (ONEOF
	/// (IfcStructuralSurfaceMemberVarying))
	/// SUBTYPE OF (IfcStructuralMember);
	/// PredefinedType : IfcStructuralSurfaceTypeEnum;
	/// Thickness : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralSurfaceMember : IFCStructuralMember, Global.IFCStructuralSurfaceMember
	{
		public virtual IFCStructuralSurfaceTypeEnum? PredefinedType { get; set; }
		public virtual IFCPositiveLengthMeasure? Thickness { get; set; }
		public IFCStructuralSurfaceMember() : base()
		{
		}
		public IFCStructuralSurfaceMember(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralSurfaceTypeEnum? PredefinedType, IFCPositiveLengthMeasure? Thickness) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation)
		{
			this.PredefinedType = PredefinedType;
			this.Thickness = Thickness;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"PredefinedType", PredefinedType},
				{"Thickness", Thickness}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedStructuralActivity", AssignedStructuralActivity},
				{"ReferencesElement", ReferencesElement},
				{"ConnectedBy", ConnectedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCStructuralSurfaceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCStructuralSurfaceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Thickness
		{
			get
			{
				return Thickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Thickness = val;
				}
				else if(value == null)
				{
					Thickness = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuralSurfaceMemberVarying
	/// SUBTYPE OF (IfcStructuralSurfaceMember);
	/// SubsequentThickness : LIST [2:?] OF IfcPositiveLengthMeasure;
	/// VaryingThicknessLocation : IfcShapeAspect;
	/// DERIVE
	/// VaryingThickness : LIST [3:?] OF IfcPositiveLengthMeasure := IfcAddToBeginOfList(SELF\IfcStructuralSurfaceMember.Thickness, SubsequentThickness);
	/// WHERE
	/// WR61 : EXISTS(SELF\IfcStructuralSurfaceMember.Thickness);
	/// WR62 : SIZEOF(QUERY(temp <* SELF.VaryingThicknessLocation.ShapeRepresentations |
	/// NOT(SIZEOF(temp\IfcRepresentation.Items) = 1)
	/// )) = 0;
	/// WR63 : SIZEOF(QUERY(temp <* SELF.VaryingThicknessLocation.ShapeRepresentations |
	/// NOT(('IFC2X3.IFCCARTESIANPOINT' IN TYPEOF(temp\IfcRepresentation.Items[1]))
	/// OR
	/// ('IFC2X3.IFCPOINTONSURFACE' IN TYPEOF(temp\IfcRepresentation.Items[1])))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuralSurfaceMemberVarying : IFCStructuralSurfaceMember, Global.IFCStructuralSurfaceMemberVarying
	{
		public virtual IFC_Attributes<IFCPositiveLengthMeasure>? SubsequentThickness { get; set; }
		public virtual IFCShapeAspect? VaryingThicknessLocation { get; set; }
		public virtual IFC_Attributes<IFCPositiveLengthMeasure>? VaryingThickness
		{
			get
			{
				//MANUAL : IFC2x3.IFCStructuralSurfaceMemberVarying.VaryingThickness
				// IfcAddToBeginOfList(SELF\IfcStructuralSurfaceMember.Thickness, SubsequentThickness);
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR61
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR62
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR63
		{
			get
			{
				return true;
			}
		}
		public IFCStructuralSurfaceMemberVarying() : base()
		{
		}
		public IFCStructuralSurfaceMemberVarying(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCStructuralSurfaceTypeEnum? PredefinedType, IFCPositiveLengthMeasure? Thickness, IFC_Attributes<IFCPositiveLengthMeasure>? SubsequentThickness, IFCShapeAspect? VaryingThicknessLocation) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, Thickness)
		{
			this.SubsequentThickness = SubsequentThickness;
			this.VaryingThicknessLocation = VaryingThicknessLocation;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"PredefinedType", PredefinedType},
				{"Thickness", Thickness},
				{"SubsequentThickness", SubsequentThickness},
				{"VaryingThicknessLocation", VaryingThicknessLocation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"VaryingThickness", VaryingThickness}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"AssignedStructuralActivity", AssignedStructuralActivity},
				{"ReferencesElement", ReferencesElement},
				{"ConnectedBy", ConnectedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR61", is_WR61},
				{"is_WR62", is_WR62},
				{"is_WR63", is_WR63}
			};
		}
		public virtual IFC_Attributes<Global.IFCPositiveLengthMeasure>? _SubsequentThickness
		{
			get
			{
				if(SubsequentThickness != null)
				{
					IFC_Attributes<Global.IFCPositiveLengthMeasure>? items = new IFC_Attributes<Global.IFCPositiveLengthMeasure>();
					foreach (IFCPositiveLengthMeasure item in SubsequentThickness)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					SubsequentThickness = null;
				}
				else
				{
					SubsequentThickness = new IFC_Attributes<IFCPositiveLengthMeasure>();
					foreach(var val in value)
					{
						if(val is IFCPositiveLengthMeasure v)
						{
							SubsequentThickness.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCShapeAspect? _VaryingThicknessLocation
		{
			get
			{
				return VaryingThicknessLocation;
			}
			set
			{
				if(value is IFCShapeAspect val)
				{
					VaryingThicknessLocation = val;
				}
				else if(value == null)
				{
					VaryingThicknessLocation = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPositiveLengthMeasure>? _VaryingThickness
		{
			get
			{
				if(VaryingThickness != null)
				{
					IFC_Attributes<Global.IFCPositiveLengthMeasure>? items = new IFC_Attributes<Global.IFCPositiveLengthMeasure>();
					foreach (IFCPositiveLengthMeasure item in VaryingThickness)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStructuredDimensionCallout
	/// SUBTYPE OF (IfcDraughtingCallout);
	/// WHERE
	/// WR31 : SIZEOF(QUERY ( Ato <* QUERY ( Con <* SELF.contents | (
	/// 'IFC2X3.IFCANNOTATIONTEXTOCCURRENCE' IN
	/// TYPEOF(Con)) ) | (NOT (Ato.Name IN ['dimension value',
	/// 'tolerance value','unit text','prefix text','suffix text']))))
	/// = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCStructuredDimensionCallout : IFCDraughtingCallout, Global.IFCStructuredDimensionCallout
	{
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCStructuredDimensionCallout() : base()
		{
		}
		public IFCStructuredDimensionCallout(IFC_Attributes<IFCDraughtingCalloutElement>? Contents) : base (Contents)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Contents", Contents}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem},
				{"IsRelatedFromCallout", IsRelatedFromCallout},
				{"IsRelatedToCallout", IsRelatedToCallout}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStyleModel
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcStyledRepresentation))
	/// SUBTYPE OF (IfcRepresentation);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCStyleModel : IFCRepresentation, Global.IFCStyleModel
	{
		public IFCStyleModel() : base()
		{
		}
		public IFCStyleModel(IFCRepresentationContext? ContextOfItems, IFCLabel? RepresentationIdentifier, IFCLabel? RepresentationType, IFC_Attributes<IFCRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ContextOfItems", ContextOfItems},
				{"RepresentationIdentifier", RepresentationIdentifier},
				{"RepresentationType", RepresentationType},
				{"Items", Items}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepresentationMap", RepresentationMap},
				{"LayerAssignments", LayerAssignments},
				{"OfProductRepresentation", OfProductRepresentation}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcStyledItem
	/// SUPERTYPE OF (ONEOF
	/// (IfcAnnotationOccurrence))
	/// SUBTYPE OF (IfcRepresentationItem);
	/// Item : OPTIONAL IfcRepresentationItem;
	/// Styles : SET [1:?] OF IfcPresentationStyleAssignment;
	/// Name : OPTIONAL IfcLabel;
	/// WHERE
	/// WR11 : SIZEOF(Styles) = 1;
	/// WR12 : NOT('IFC2X3.IFCSTYLEDITEM' IN TYPEOF(Item));
	/// END_ENTITY;
	/// <summary>
	public class IFCStyledItem : IFCRepresentationItem, Global.IFCStyledItem
	{
		public virtual IFCRepresentationItem? Item { get; set; }
		public virtual IFC_Attributes<IFCPresentationStyleAssignment>? Styles { get; set; }
		public virtual IFCLabel? Name { get; set; }
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR12
		{
			get
			{
				return true;
			}
		}
		public IFCStyledItem() : base()
		{
		}
		public IFCStyledItem(IFCRepresentationItem? Item, IFC_Attributes<IFCPresentationStyleAssignment>? Styles, IFCLabel? Name) : base ()
		{
			this.Item = Item;
			this.Styles = Styles;
			this.Name = Name;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"Styles", Styles},
				{"Name", Name}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12}
			};
		}
		public virtual Global.IFCRepresentationItem? _Item
		{
			get
			{
				return Item;
			}
			set
			{
				if(value is IFCRepresentationItem val)
				{
					Item = val;
				}
				else if(value == null)
				{
					Item = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPresentationStyleAssignment>? _Styles
		{
			get
			{
				if(Styles != null)
				{
					IFC_Attributes<Global.IFCPresentationStyleAssignment>? items = new IFC_Attributes<Global.IFCPresentationStyleAssignment>();
					foreach (IFCPresentationStyleAssignment item in Styles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Styles = null;
				}
				else
				{
					Styles = new IFC_Attributes<IFCPresentationStyleAssignment>();
					foreach(var val in value)
					{
						if(val is IFCPresentationStyleAssignment v)
						{
							Styles.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcStyledRepresentation
	/// SUBTYPE OF (IfcStyleModel);
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* SELF\IfcRepresentation.Items |
	/// (NOT('IFC2X3.IFCSTYLEDITEM' IN TYPEOF(temp)))
	/// )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCStyledRepresentation : IFCStyleModel, Global.IFCStyledRepresentation
	{
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public IFCStyledRepresentation() : base()
		{
		}
		public IFCStyledRepresentation(IFCRepresentationContext? ContextOfItems, IFCLabel? RepresentationIdentifier, IFCLabel? RepresentationType, IFC_Attributes<IFCRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ContextOfItems", ContextOfItems},
				{"RepresentationIdentifier", RepresentationIdentifier},
				{"RepresentationType", RepresentationType},
				{"Items", Items}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepresentationMap", RepresentationMap},
				{"LayerAssignments", LayerAssignments},
				{"OfProductRepresentation", OfProductRepresentation}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcSubContractResource
	/// SUBTYPE OF (IfcConstructionResource);
	/// SubContractor : OPTIONAL IfcActorSelect;
	/// JobDescription : OPTIONAL IfcText;
	/// END_ENTITY;
	/// <summary>
	public class IFCSubContractResource : IFCConstructionResource, Global.IFCSubContractResource
	{
		public virtual IFCActorSelect? SubContractor { get; set; }
		public virtual IFCText? JobDescription { get; set; }
		public IFCSubContractResource() : base()
		{
		}
		public IFCSubContractResource(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? ResourceIdentifier, IFCLabel? ResourceGroup, IFCResourceConsumptionEnum? ResourceConsumption, IFCMeasureWithUnit? BaseQuantity, IFCActorSelect? SubContractor, IFCText? JobDescription) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ResourceIdentifier, ResourceGroup, ResourceConsumption, BaseQuantity)
		{
			this.SubContractor = SubContractor;
			this.JobDescription = JobDescription;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ResourceIdentifier", ResourceIdentifier},
				{"ResourceGroup", ResourceGroup},
				{"ResourceConsumption", ResourceConsumption},
				{"BaseQuantity", BaseQuantity},
				{"SubContractor", SubContractor},
				{"JobDescription", JobDescription}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ResourceOf", ResourceOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCActorSelect? _SubContractor
		{
			get
			{
				return SubContractor;
			}
			set
			{
				if(value is IFCActorSelect val)
				{
					SubContractor = val;
				}
				else if(value == null)
				{
					SubContractor = null;
				}
			}
		}
		public virtual Global.IFCText? _JobDescription
		{
			get
			{
				return JobDescription;
			}
			set
			{
				if(value is IFCText val)
				{
					JobDescription = val;
				}
				else if(value == null)
				{
					JobDescription = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSubedge
	/// SUBTYPE OF (IfcEdge);
	/// ParentEdge : IfcEdge;
	/// END_ENTITY;
	/// <summary>
	public class IFCSubedge : IFCEdge, Global.IFCSubedge
	{
		public virtual IFCEdge? ParentEdge { get; set; }
		public IFCSubedge() : base()
		{
		}
		public IFCSubedge(IFCVertex? EdgeStart, IFCVertex? EdgeEnd, IFCEdge? ParentEdge) : base (EdgeStart, EdgeEnd)
		{
			this.ParentEdge = ParentEdge;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"EdgeStart", EdgeStart},
				{"EdgeEnd", EdgeEnd},
				{"ParentEdge", ParentEdge}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCEdge? _ParentEdge
		{
			get
			{
				return ParentEdge;
			}
			set
			{
				if(value is IFCEdge val)
				{
					ParentEdge = val;
				}
				else if(value == null)
				{
					ParentEdge = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurface
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBoundedSurface
	/// ,IfcElementarySurface
	/// ,IfcSweptSurface))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCSurface : IFCGeometricRepresentationItem, IFCGeometricSetSelect, IFCSurfaceOrFaceSurface, Global.IFCSurface
	{
		public virtual IFCDimensionCount? Dim {get; set;}
		public IFCSurface() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
			set
			{
				if(value is IFCDimensionCount val)
				{
					Dim = val;
				}
				else if(value == null)
				{
					Dim = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceCurveSweptAreaSolid
	/// SUBTYPE OF (IfcSweptAreaSolid);
	/// Directrix : IfcCurve;
	/// StartParam : IfcParameterValue;
	/// EndParam : IfcParameterValue;
	/// ReferenceSurface : IfcSurface;
	/// END_ENTITY;
	/// <summary>
	public class IFCSurfaceCurveSweptAreaSolid : IFCSweptAreaSolid, Global.IFCSurfaceCurveSweptAreaSolid
	{
		public virtual IFCCurve? Directrix { get; set; }
		public virtual IFCParameterValue? StartParam { get; set; }
		public virtual IFCParameterValue? EndParam { get; set; }
		public virtual IFCSurface? ReferenceSurface { get; set; }
		public IFCSurfaceCurveSweptAreaSolid() : base()
		{
		}
		public IFCSurfaceCurveSweptAreaSolid(IFCProfileDef? SweptArea, IFCAxis2Placement3D? Position, IFCCurve? Directrix, IFCParameterValue? StartParam, IFCParameterValue? EndParam, IFCSurface? ReferenceSurface) : base (SweptArea, Position)
		{
			this.Directrix = Directrix;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
			this.ReferenceSurface = ReferenceSurface;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SweptArea", SweptArea},
				{"Position", Position},
				{"Directrix", Directrix},
				{"StartParam", StartParam},
				{"EndParam", EndParam},
				{"ReferenceSurface", ReferenceSurface}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCCurve? _Directrix
		{
			get
			{
				return Directrix;
			}
			set
			{
				if(value is IFCCurve val)
				{
					Directrix = val;
				}
				else if(value == null)
				{
					Directrix = null;
				}
			}
		}
		public virtual Global.IFCParameterValue? _StartParam
		{
			get
			{
				return StartParam;
			}
			set
			{
				if(value is IFCParameterValue val)
				{
					StartParam = val;
				}
				else if(value == null)
				{
					StartParam = null;
				}
			}
		}
		public virtual Global.IFCParameterValue? _EndParam
		{
			get
			{
				return EndParam;
			}
			set
			{
				if(value is IFCParameterValue val)
				{
					EndParam = val;
				}
				else if(value == null)
				{
					EndParam = null;
				}
			}
		}
		public virtual Global.IFCSurface? _ReferenceSurface
		{
			get
			{
				return ReferenceSurface;
			}
			set
			{
				if(value is IFCSurface val)
				{
					ReferenceSurface = val;
				}
				else if(value == null)
				{
					ReferenceSurface = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceOfLinearExtrusion
	/// SUBTYPE OF (IfcSweptSurface);
	/// ExtrudedDirection : IfcDirection;
	/// Depth : IfcLengthMeasure;
	/// DERIVE
	/// ExtrusionAxis : IfcVector := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector (ExtrudedDirection, Depth);
	/// WHERE
	/// WR41 : Depth > 0.;
	/// END_ENTITY;
	/// <summary>
	public class IFCSurfaceOfLinearExtrusion : IFCSweptSurface, Global.IFCSurfaceOfLinearExtrusion
	{
		public virtual IFCDirection? ExtrudedDirection { get; set; }
		public virtual IFCLengthMeasure? Depth { get; set; }
		public virtual IFCVector? ExtrusionAxis
		{
			get
			{
				//MANUAL : IFC2x3.IFCSurfaceOfLinearExtrusion.ExtrusionAxis
				// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector (ExtrudedDirection, Depth);
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public IFCSurfaceOfLinearExtrusion() : base()
		{
		}
		public IFCSurfaceOfLinearExtrusion(IFCProfileDef? SweptCurve, IFCAxis2Placement3D? Position, IFCDirection? ExtrudedDirection, IFCLengthMeasure? Depth) : base (SweptCurve, Position)
		{
			this.ExtrudedDirection = ExtrudedDirection;
			this.Depth = Depth;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SweptCurve", SweptCurve},
				{"Position", Position},
				{"ExtrudedDirection", ExtrudedDirection},
				{"Depth", Depth}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim},
				{"ExtrusionAxis", ExtrusionAxis}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCDirection? _ExtrudedDirection
		{
			get
			{
				return ExtrudedDirection;
			}
			set
			{
				if(value is IFCDirection val)
				{
					ExtrudedDirection = val;
				}
				else if(value == null)
				{
					ExtrudedDirection = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IFCVector? _ExtrusionAxis
		{
			get
			{
				return ExtrusionAxis;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceOfRevolution
	/// SUBTYPE OF (IfcSweptSurface);
	/// AxisPosition : IfcAxis1Placement;
	/// DERIVE
	/// AxisLine : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(AxisPosition.Location,
	/// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(AxisPosition.Z,1.0));
	/// END_ENTITY;
	/// <summary>
	public class IFCSurfaceOfRevolution : IFCSweptSurface, Global.IFCSurfaceOfRevolution
	{
		public virtual IFCAxis1Placement? AxisPosition { get; set; }
		public virtual IFCLine? AxisLine
		{
			get
			{
				//MANUAL : IFC2x3.IFCSurfaceOfRevolution.AxisLine
				// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(AxisPosition.Location,
				return null;
				//END_MANUAL
			}
		}
		public IFCSurfaceOfRevolution() : base()
		{
		}
		public IFCSurfaceOfRevolution(IFCProfileDef? SweptCurve, IFCAxis2Placement3D? Position, IFCAxis1Placement? AxisPosition) : base (SweptCurve, Position)
		{
			this.AxisPosition = AxisPosition;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SweptCurve", SweptCurve},
				{"Position", Position},
				{"AxisPosition", AxisPosition}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim},
				{"AxisLine", AxisLine}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual Global.IFCAxis1Placement? _AxisPosition
		{
			get
			{
				return AxisPosition;
			}
			set
			{
				if(value is IFCAxis1Placement val)
				{
					AxisPosition = val;
				}
				else if(value == null)
				{
					AxisPosition = null;
				}
			}
		}
		public virtual Global.IFCLine? _AxisLine
		{
			get
			{
				return AxisLine;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// Side : IfcSurfaceSide;
	/// Styles : SET [1:5] OF IfcSurfaceStyleElementSelect;
	/// WHERE
	/// WR11 : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC2X3.IFCSURFACESTYLESHADING' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR12 : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC2X3.IFCSURFACESTYLELIGHTING' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR13 : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC2X3.IFCSURFACESTYLEREFRACTION' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR14 : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC2X3.IFCSURFACESTYLEWITHTEXTURES' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// WR15 : SIZEOF(QUERY(Style <* SELF.Styles |
	/// 'IFC2X3.IFCEXTERNALLYDEFINEDSURFACESTYLE' IN
	/// TYPEOF(Style)
	/// )) <= 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCSurfaceStyle : IFCPresentationStyle, IFCPresentationStyleSelect, Global.IFCSurfaceStyle
	{
		public virtual IFCSurfaceSide? Side { get; set; }
		public virtual IFC_Attributes<IFCSurfaceStyleElementSelect>? Styles { get; set; }
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR12
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR13
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR14
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR15
		{
			get
			{
				return true;
			}
		}
		public IFCSurfaceStyle() : base()
		{
		}
		public IFCSurfaceStyle(IFCLabel? Name, IFCSurfaceSide? Side, IFC_Attributes<IFCSurfaceStyleElementSelect>? Styles) : base (Name)
		{
			this.Side = Side;
			this.Styles = Styles;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Side", Side},
				{"Styles", Styles}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR13", is_WR13},
				{"is_WR14", is_WR14},
				{"is_WR15", is_WR15}
			};
		}
		public virtual Global.IFCSurfaceSide? _Side
		{
			get
			{
				return Side;
			}
			set
			{
				if(value is IFCSurfaceSide val)
				{
					Side = val;
				}
				else if(value == null)
				{
					Side = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCSurfaceStyleElementSelect>? _Styles
		{
			get
			{
				if(Styles != null)
				{
					IFC_Attributes<Global.IFCSurfaceStyleElementSelect>? items = new IFC_Attributes<Global.IFCSurfaceStyleElementSelect>();
					foreach (IFCSurfaceStyleElementSelect item in Styles)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Styles = null;
				}
				else
				{
					Styles = new IFC_Attributes<IFCSurfaceStyleElementSelect>();
					foreach(var val in value)
					{
						if(val is IFCSurfaceStyleElementSelect v)
						{
							Styles.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleLighting;
	/// DiffuseTransmissionColour : IfcColourRgb;
	/// DiffuseReflectionColour : IfcColourRgb;
	/// TransmissionColour : IfcColourRgb;
	/// ReflectanceColour : IfcColourRgb;
	/// END_ENTITY;
	/// <summary>
	public class IFCSurfaceStyleLighting : IFC_ClassEntity, IFCSurfaceStyleElementSelect, Global.IFCSurfaceStyleLighting
	{
		public virtual IFCColourRgb? DiffuseTransmissionColour { get; set; }
		public virtual IFCColourRgb? DiffuseReflectionColour { get; set; }
		public virtual IFCColourRgb? TransmissionColour { get; set; }
		public virtual IFCColourRgb? ReflectanceColour { get; set; }
		public IFCSurfaceStyleLighting() : base()
		{
		}
		public IFCSurfaceStyleLighting(IFCColourRgb? DiffuseTransmissionColour, IFCColourRgb? DiffuseReflectionColour, IFCColourRgb? TransmissionColour, IFCColourRgb? ReflectanceColour) : base ()
		{
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.DiffuseReflectionColour = DiffuseReflectionColour;
			this.TransmissionColour = TransmissionColour;
			this.ReflectanceColour = ReflectanceColour;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"DiffuseTransmissionColour", DiffuseTransmissionColour},
				{"DiffuseReflectionColour", DiffuseReflectionColour},
				{"TransmissionColour", TransmissionColour},
				{"ReflectanceColour", ReflectanceColour}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCColourRgb? _DiffuseTransmissionColour
		{
			get
			{
				return DiffuseTransmissionColour;
			}
			set
			{
				if(value is IFCColourRgb val)
				{
					DiffuseTransmissionColour = val;
				}
				else if(value == null)
				{
					DiffuseTransmissionColour = null;
				}
			}
		}
		public virtual Global.IFCColourRgb? _DiffuseReflectionColour
		{
			get
			{
				return DiffuseReflectionColour;
			}
			set
			{
				if(value is IFCColourRgb val)
				{
					DiffuseReflectionColour = val;
				}
				else if(value == null)
				{
					DiffuseReflectionColour = null;
				}
			}
		}
		public virtual Global.IFCColourRgb? _TransmissionColour
		{
			get
			{
				return TransmissionColour;
			}
			set
			{
				if(value is IFCColourRgb val)
				{
					TransmissionColour = val;
				}
				else if(value == null)
				{
					TransmissionColour = null;
				}
			}
		}
		public virtual Global.IFCColourRgb? _ReflectanceColour
		{
			get
			{
				return ReflectanceColour;
			}
			set
			{
				if(value is IFCColourRgb val)
				{
					ReflectanceColour = val;
				}
				else if(value == null)
				{
					ReflectanceColour = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleRefraction;
	/// RefractionIndex : OPTIONAL IfcReal;
	/// DispersionFactor : OPTIONAL IfcReal;
	/// END_ENTITY;
	/// <summary>
	public class IFCSurfaceStyleRefraction : IFC_ClassEntity, IFCSurfaceStyleElementSelect, Global.IFCSurfaceStyleRefraction
	{
		public virtual IFCReal? RefractionIndex { get; set; }
		public virtual IFCReal? DispersionFactor { get; set; }
		public IFCSurfaceStyleRefraction() : base()
		{
		}
		public IFCSurfaceStyleRefraction(IFCReal? RefractionIndex, IFCReal? DispersionFactor) : base ()
		{
			this.RefractionIndex = RefractionIndex;
			this.DispersionFactor = DispersionFactor;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RefractionIndex", RefractionIndex},
				{"DispersionFactor", DispersionFactor}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCReal? _RefractionIndex
		{
			get
			{
				return RefractionIndex;
			}
			set
			{
				if(value is IFCReal val)
				{
					RefractionIndex = val;
				}
				else if(value == null)
				{
					RefractionIndex = null;
				}
			}
		}
		public virtual Global.IFCReal? _DispersionFactor
		{
			get
			{
				return DispersionFactor;
			}
			set
			{
				if(value is IFCReal val)
				{
					DispersionFactor = val;
				}
				else if(value == null)
				{
					DispersionFactor = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleRendering
	/// SUBTYPE OF (IfcSurfaceStyleShading);
	/// Transparency : OPTIONAL IfcNormalisedRatioMeasure;
	/// DiffuseColour : OPTIONAL IfcColourOrFactor;
	/// TransmissionColour : OPTIONAL IfcColourOrFactor;
	/// DiffuseTransmissionColour : OPTIONAL IfcColourOrFactor;
	/// ReflectionColour : OPTIONAL IfcColourOrFactor;
	/// SpecularColour : OPTIONAL IfcColourOrFactor;
	/// SpecularHighlight : OPTIONAL IfcSpecularHighlightSelect;
	/// ReflectanceMethod : IfcReflectanceMethodEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCSurfaceStyleRendering : IFCSurfaceStyleShading, Global.IFCSurfaceStyleRendering
	{
		public virtual IFCNormalisedRatioMeasure? Transparency { get; set; }
		public virtual IFCColourOrFactor? DiffuseColour { get; set; }
		public virtual IFCColourOrFactor? TransmissionColour { get; set; }
		public virtual IFCColourOrFactor? DiffuseTransmissionColour { get; set; }
		public virtual IFCColourOrFactor? ReflectionColour { get; set; }
		public virtual IFCColourOrFactor? SpecularColour { get; set; }
		public virtual IFCSpecularHighlightSelect? SpecularHighlight { get; set; }
		public virtual IFCReflectanceMethodEnum? ReflectanceMethod { get; set; }
		public IFCSurfaceStyleRendering() : base()
		{
		}
		public IFCSurfaceStyleRendering(IFCColourRgb? SurfaceColour, IFCNormalisedRatioMeasure? Transparency, IFCColourOrFactor? DiffuseColour, IFCColourOrFactor? TransmissionColour, IFCColourOrFactor? DiffuseTransmissionColour, IFCColourOrFactor? ReflectionColour, IFCColourOrFactor? SpecularColour, IFCSpecularHighlightSelect? SpecularHighlight, IFCReflectanceMethodEnum? ReflectanceMethod) : base (SurfaceColour)
		{
			this.Transparency = Transparency;
			this.DiffuseColour = DiffuseColour;
			this.TransmissionColour = TransmissionColour;
			this.DiffuseTransmissionColour = DiffuseTransmissionColour;
			this.ReflectionColour = ReflectionColour;
			this.SpecularColour = SpecularColour;
			this.SpecularHighlight = SpecularHighlight;
			this.ReflectanceMethod = ReflectanceMethod;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SurfaceColour", SurfaceColour},
				{"Transparency", Transparency},
				{"DiffuseColour", DiffuseColour},
				{"TransmissionColour", TransmissionColour},
				{"DiffuseTransmissionColour", DiffuseTransmissionColour},
				{"ReflectionColour", ReflectionColour},
				{"SpecularColour", SpecularColour},
				{"SpecularHighlight", SpecularHighlight},
				{"ReflectanceMethod", ReflectanceMethod}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCNormalisedRatioMeasure? _Transparency
		{
			get
			{
				return Transparency;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					Transparency = val;
				}
				else if(value == null)
				{
					Transparency = null;
				}
			}
		}
		public virtual Global.IFCColourOrFactor? _DiffuseColour
		{
			get
			{
				return DiffuseColour;
			}
			set
			{
				if(value is IFCColourOrFactor val)
				{
					DiffuseColour = val;
				}
				else if(value == null)
				{
					DiffuseColour = null;
				}
			}
		}
		public virtual Global.IFCColourOrFactor? _TransmissionColour
		{
			get
			{
				return TransmissionColour;
			}
			set
			{
				if(value is IFCColourOrFactor val)
				{
					TransmissionColour = val;
				}
				else if(value == null)
				{
					TransmissionColour = null;
				}
			}
		}
		public virtual Global.IFCColourOrFactor? _DiffuseTransmissionColour
		{
			get
			{
				return DiffuseTransmissionColour;
			}
			set
			{
				if(value is IFCColourOrFactor val)
				{
					DiffuseTransmissionColour = val;
				}
				else if(value == null)
				{
					DiffuseTransmissionColour = null;
				}
			}
		}
		public virtual Global.IFCColourOrFactor? _ReflectionColour
		{
			get
			{
				return ReflectionColour;
			}
			set
			{
				if(value is IFCColourOrFactor val)
				{
					ReflectionColour = val;
				}
				else if(value == null)
				{
					ReflectionColour = null;
				}
			}
		}
		public virtual Global.IFCColourOrFactor? _SpecularColour
		{
			get
			{
				return SpecularColour;
			}
			set
			{
				if(value is IFCColourOrFactor val)
				{
					SpecularColour = val;
				}
				else if(value == null)
				{
					SpecularColour = null;
				}
			}
		}
		public virtual Global.IFCSpecularHighlightSelect? _SpecularHighlight
		{
			get
			{
				return SpecularHighlight;
			}
			set
			{
				if(value is IFCSpecularHighlightSelect val)
				{
					SpecularHighlight = val;
				}
				else if(value == null)
				{
					SpecularHighlight = null;
				}
			}
		}
		public virtual Global.IFCReflectanceMethodEnum? _ReflectanceMethod
		{
			get
			{
				return ReflectanceMethod;
			}
			set
			{
				if(value is IFCReflectanceMethodEnum val)
				{
					ReflectanceMethod = val;
				}
				else if(value == null)
				{
					ReflectanceMethod = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleShading
	/// SUPERTYPE OF (ONEOF
	/// (IfcSurfaceStyleRendering));
	/// SurfaceColour : IfcColourRgb;
	/// END_ENTITY;
	/// <summary>
	public class IFCSurfaceStyleShading : IFC_ClassEntity, IFCSurfaceStyleElementSelect, Global.IFCSurfaceStyleShading
	{
		public virtual IFCColourRgb? SurfaceColour { get; set; }
		public IFCSurfaceStyleShading() : base()
		{
		}
		public IFCSurfaceStyleShading(IFCColourRgb? SurfaceColour) : base ()
		{
			this.SurfaceColour = SurfaceColour;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SurfaceColour", SurfaceColour}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCColourRgb? _SurfaceColour
		{
			get
			{
				return SurfaceColour;
			}
			set
			{
				if(value is IFCColourRgb val)
				{
					SurfaceColour = val;
				}
				else if(value == null)
				{
					SurfaceColour = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceStyleWithTextures;
	/// Textures : LIST [1:?] OF IfcSurfaceTexture;
	/// END_ENTITY;
	/// <summary>
	public class IFCSurfaceStyleWithTextures : IFC_ClassEntity, IFCSurfaceStyleElementSelect, Global.IFCSurfaceStyleWithTextures
	{
		public virtual IFC_Attributes<IFCSurfaceTexture>? Textures { get; set; }
		public IFCSurfaceStyleWithTextures() : base()
		{
		}
		public IFCSurfaceStyleWithTextures(IFC_Attributes<IFCSurfaceTexture>? Textures) : base ()
		{
			this.Textures = Textures;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Textures", Textures}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCSurfaceTexture>? _Textures
		{
			get
			{
				if(Textures != null)
				{
					IFC_Attributes<Global.IFCSurfaceTexture>? items = new IFC_Attributes<Global.IFCSurfaceTexture>();
					foreach (IFCSurfaceTexture item in Textures)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Textures = null;
				}
				else
				{
					Textures = new IFC_Attributes<IFCSurfaceTexture>();
					foreach(var val in value)
					{
						if(val is IFCSurfaceTexture v)
						{
							Textures.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSurfaceTexture
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcBlobTexture
	/// ,IfcImageTexture
	/// ,IfcPixelTexture));
	/// RepeatS : BOOLEAN;
	/// RepeatT : BOOLEAN;
	/// TextureType : IfcSurfaceTextureEnum;
	/// TextureTransform : OPTIONAL IfcCartesianTransformationOperator2D;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCSurfaceTexture : IFC_ClassEntity, Global.IFCSurfaceTexture
	{
		public virtual BOOLEAN? RepeatS { get; set; }
		public virtual BOOLEAN? RepeatT { get; set; }
		public virtual IFCSurfaceTextureEnum? TextureType { get; set; }
		public virtual IFCCartesianTransformationOperator2D? TextureTransform { get; set; }
		public IFCSurfaceTexture() : base()
		{
		}
		public IFCSurfaceTexture(BOOLEAN? RepeatS, BOOLEAN? RepeatT, IFCSurfaceTextureEnum? TextureType, IFCCartesianTransformationOperator2D? TextureTransform) : base ()
		{
			this.RepeatS = RepeatS;
			this.RepeatT = RepeatT;
			this.TextureType = TextureType;
			this.TextureTransform = TextureTransform;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepeatS", RepeatS},
				{"RepeatT", RepeatT},
				{"TextureType", TextureType},
				{"TextureTransform", TextureTransform}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual BOOLEAN? _RepeatS
		{
			get
			{
				return RepeatS;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					RepeatS = val;
				}
				else if(value == null)
				{
					RepeatS = null;
				}
			}
		}
		public virtual BOOLEAN? _RepeatT
		{
			get
			{
				return RepeatT;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					RepeatT = val;
				}
				else if(value == null)
				{
					RepeatT = null;
				}
			}
		}
		public virtual Global.IFCSurfaceTextureEnum? _TextureType
		{
			get
			{
				return TextureType;
			}
			set
			{
				if(value is IFCSurfaceTextureEnum val)
				{
					TextureType = val;
				}
				else if(value == null)
				{
					TextureType = null;
				}
			}
		}
		public virtual Global.IFCCartesianTransformationOperator2D? _TextureTransform
		{
			get
			{
				return TextureTransform;
			}
			set
			{
				if(value is IFCCartesianTransformationOperator2D val)
				{
					TextureTransform = val;
				}
				else if(value == null)
				{
					TextureTransform = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSweptAreaSolid
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcExtrudedAreaSolid
	/// ,IfcRevolvedAreaSolid
	/// ,IfcSurfaceCurveSweptAreaSolid))
	/// SUBTYPE OF (IfcSolidModel);
	/// SweptArea : IfcProfileDef;
	/// Position : IfcAxis2Placement3D;
	/// WHERE
	/// WR22 : SweptArea.ProfileType = IfcProfileTypeEnum.Area;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCSweptAreaSolid : IFCSolidModel, Global.IFCSweptAreaSolid
	{
		public virtual IFCProfileDef? SweptArea { get; set; }
		public virtual IFCAxis2Placement3D? Position { get; set; }
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCSweptAreaSolid() : base()
		{
		}
		public IFCSweptAreaSolid(IFCProfileDef? SweptArea, IFCAxis2Placement3D? Position) : base ()
		{
			this.SweptArea = SweptArea;
			this.Position = Position;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SweptArea", SweptArea},
				{"Position", Position}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCProfileDef? _SweptArea
		{
			get
			{
				return SweptArea;
			}
			set
			{
				if(value is IFCProfileDef val)
				{
					SweptArea = val;
				}
				else if(value == null)
				{
					SweptArea = null;
				}
			}
		}
		public virtual Global.IFCAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IFCAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSweptDiskSolid
	/// SUBTYPE OF (IfcSolidModel);
	/// Directrix : IfcCurve;
	/// Radius : IfcPositiveLengthMeasure;
	/// InnerRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// StartParam : IfcParameterValue;
	/// EndParam : IfcParameterValue;
	/// WHERE
	/// WR1 : Directrix.Dim = 3;
	/// WR2 : (NOT EXISTS(InnerRadius)) OR (Radius > InnerRadius);
	/// END_ENTITY;
	/// <summary>
	public class IFCSweptDiskSolid : IFCSolidModel, Global.IFCSweptDiskSolid
	{
		public virtual IFCCurve? Directrix { get; set; }
		public virtual IFCPositiveLengthMeasure? Radius { get; set; }
		public virtual IFCPositiveLengthMeasure? InnerRadius { get; set; }
		public virtual IFCParameterValue? StartParam { get; set; }
		public virtual IFCParameterValue? EndParam { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCSweptDiskSolid() : base()
		{
		}
		public IFCSweptDiskSolid(IFCCurve? Directrix, IFCPositiveLengthMeasure? Radius, IFCPositiveLengthMeasure? InnerRadius, IFCParameterValue? StartParam, IFCParameterValue? EndParam) : base ()
		{
			this.Directrix = Directrix;
			this.Radius = Radius;
			this.InnerRadius = InnerRadius;
			this.StartParam = StartParam;
			this.EndParam = EndParam;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Directrix", Directrix},
				{"Radius", Radius},
				{"InnerRadius", InnerRadius},
				{"StartParam", StartParam},
				{"EndParam", EndParam}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual Global.IFCCurve? _Directrix
		{
			get
			{
				return Directrix;
			}
			set
			{
				if(value is IFCCurve val)
				{
					Directrix = val;
				}
				else if(value == null)
				{
					Directrix = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _Radius
		{
			get
			{
				return Radius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Radius = val;
				}
				else if(value == null)
				{
					Radius = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _InnerRadius
		{
			get
			{
				return InnerRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					InnerRadius = val;
				}
				else if(value == null)
				{
					InnerRadius = null;
				}
			}
		}
		public virtual Global.IFCParameterValue? _StartParam
		{
			get
			{
				return StartParam;
			}
			set
			{
				if(value is IFCParameterValue val)
				{
					StartParam = val;
				}
				else if(value == null)
				{
					StartParam = null;
				}
			}
		}
		public virtual Global.IFCParameterValue? _EndParam
		{
			get
			{
				return EndParam;
			}
			set
			{
				if(value is IFCParameterValue val)
				{
					EndParam = val;
				}
				else if(value == null)
				{
					EndParam = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSweptSurface
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcSurfaceOfLinearExtrusion
	/// ,IfcSurfaceOfRevolution))
	/// SUBTYPE OF (IfcSurface);
	/// SweptCurve : IfcProfileDef;
	/// Position : IfcAxis2Placement3D;
	/// DERIVE
	/// Dim : IfcDimensionCount := Position.Dim;
	/// WHERE
	/// WR1 : NOT('IFC2X3.IFCDERIVEDPROFILEDEF' IN TYPEOF(SweptCurve));
	/// WR2 : SweptCurve.ProfileType = IfcProfileTypeEnum.Curve;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCSweptSurface : IFCSurface, Global.IFCSweptSurface
	{
		public virtual IFCProfileDef? SweptCurve { get; set; }
		public virtual IFCAxis2Placement3D? Position { get; set; }
		public override IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCSweptSurface.Dim
				// Position.Dim;
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCSweptSurface() : base()
		{
		}
		public IFCSweptSurface(IFCProfileDef? SweptCurve, IFCAxis2Placement3D? Position) : base ()
		{
			this.SweptCurve = SweptCurve;
			this.Position = Position;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"SweptCurve", SweptCurve},
				{"Position", Position}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual Global.IFCProfileDef? _SweptCurve
		{
			get
			{
				return SweptCurve;
			}
			set
			{
				if(value is IFCProfileDef val)
				{
					SweptCurve = val;
				}
				else if(value == null)
				{
					SweptCurve = null;
				}
			}
		}
		public virtual Global.IFCAxis2Placement3D? _Position
		{
			get
			{
				return Position;
			}
			set
			{
				if(value is IFCAxis2Placement3D val)
				{
					Position = val;
				}
				else if(value == null)
				{
					Position = null;
				}
			}
		}
		public override Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSwitchingDeviceType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcSwitchingDeviceTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCSwitchingDeviceType : IFCFlowControllerType, Global.IFCSwitchingDeviceType
	{
		public virtual IFCSwitchingDeviceTypeEnum? PredefinedType { get; set; }
		public IFCSwitchingDeviceType() : base()
		{
		}
		public IFCSwitchingDeviceType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCSwitchingDeviceTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCSwitchingDeviceTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCSwitchingDeviceTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSymbolStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// StyleOfSymbol : IfcSymbolStyleSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCSymbolStyle : IFCPresentationStyle, IFCPresentationStyleSelect, Global.IFCSymbolStyle
	{
		public virtual IFCSymbolStyleSelect? StyleOfSymbol { get; set; }
		public IFCSymbolStyle() : base()
		{
		}
		public IFCSymbolStyle(IFCLabel? Name, IFCSymbolStyleSelect? StyleOfSymbol) : base (Name)
		{
			this.StyleOfSymbol = StyleOfSymbol;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"StyleOfSymbol", StyleOfSymbol}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCSymbolStyleSelect? _StyleOfSymbol
		{
			get
			{
				return StyleOfSymbol;
			}
			set
			{
				if(value is IFCSymbolStyleSelect val)
				{
					StyleOfSymbol = val;
				}
				else if(value == null)
				{
					StyleOfSymbol = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSystem
	/// SUPERTYPE OF (ONEOF
	/// (IfcElectricalCircuit
	/// ,IfcStructuralAnalysisModel))
	/// SUBTYPE OF (IfcGroup);
	/// INVERSE
	/// ServicesBuildings : SET [0:1] OF IfcRelServicesBuildings FOR RelatingSystem;
	/// END_ENTITY;
	/// <summary>
	public class IFCSystem : IFCGroup, Global.IFCSystem
	{
		public IFC_Attributes<IFCRelServicesBuildings>? ServicesBuildings {get{return new IFC_Attributes<IFCRelServicesBuildings>(Model?.GetItems<IFCRelServicesBuildings>().Where(x => x.RelatingSystem != null && x.RelatingSystem == this).ToList());}}
		public IFCSystem() : base()
		{
		}
		public IFCSystem(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsGroupedBy", IsGroupedBy},
				{"ServicesBuildings", ServicesBuildings}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCRelServicesBuildings>? _ServicesBuildings
		{
			get
			{
				if(ServicesBuildings != null)
				{
					IFC_Attributes<Global.IFCRelServicesBuildings>? items = new IFC_Attributes<Global.IFCRelServicesBuildings>();
					foreach (IFCRelServicesBuildings item in ServicesBuildings)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcSystemFurnitureElementType
	/// SUBTYPE OF (IfcFurnishingElementType);
	/// END_ENTITY;
	/// <summary>
	public class IFCSystemFurnitureElementType : IFCFurnishingElementType, Global.IFCSystemFurnitureElementType
	{
		public IFCSystemFurnitureElementType() : base()
		{
		}
		public IFCSystemFurnitureElementType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcTShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// FlangeWidth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// FlangeEdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WebEdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WebSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// FlangeSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// CentreOfGravityInY : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR1 : FlangeThickness < Depth;
	/// WR2 : WebThickness < FlangeWidth;
	/// END_ENTITY;
	/// <summary>
	public class IFCTShapeProfileDef : IFCParameterizedProfileDef, Global.IFCTShapeProfileDef
	{
		public virtual IFCPositiveLengthMeasure? Depth { get; set; }
		public virtual IFCPositiveLengthMeasure? FlangeWidth { get; set; }
		public virtual IFCPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? FilletRadius { get; set; }
		public virtual IFCPositiveLengthMeasure? FlangeEdgeRadius { get; set; }
		public virtual IFCPositiveLengthMeasure? WebEdgeRadius { get; set; }
		public virtual IFCPlaneAngleMeasure? WebSlope { get; set; }
		public virtual IFCPlaneAngleMeasure? FlangeSlope { get; set; }
		public virtual IFCPositiveLengthMeasure? CentreOfGravityInY { get; set; }
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public IFCTShapeProfileDef() : base()
		{
		}
		public IFCTShapeProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? Depth, IFCPositiveLengthMeasure? FlangeWidth, IFCPositiveLengthMeasure? WebThickness, IFCPositiveLengthMeasure? FlangeThickness, IFCPositiveLengthMeasure? FilletRadius, IFCPositiveLengthMeasure? FlangeEdgeRadius, IFCPositiveLengthMeasure? WebEdgeRadius, IFCPlaneAngleMeasure? WebSlope, IFCPlaneAngleMeasure? FlangeSlope, IFCPositiveLengthMeasure? CentreOfGravityInY) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.FlangeEdgeRadius = FlangeEdgeRadius;
			this.WebEdgeRadius = WebEdgeRadius;
			this.WebSlope = WebSlope;
			this.FlangeSlope = FlangeSlope;
			this.CentreOfGravityInY = CentreOfGravityInY;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"Depth", Depth},
				{"FlangeWidth", FlangeWidth},
				{"WebThickness", WebThickness},
				{"FlangeThickness", FlangeThickness},
				{"FilletRadius", FilletRadius},
				{"FlangeEdgeRadius", FlangeEdgeRadius},
				{"WebEdgeRadius", WebEdgeRadius},
				{"WebSlope", WebSlope},
				{"FlangeSlope", FlangeSlope},
				{"CentreOfGravityInY", CentreOfGravityInY}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FlangeWidth
		{
			get
			{
				return FlangeWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FlangeWidth = val;
				}
				else if(value == null)
				{
					FlangeWidth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _WebThickness
		{
			get
			{
				return WebThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					WebThickness = val;
				}
				else if(value == null)
				{
					WebThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FlangeThickness
		{
			get
			{
				return FlangeThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FlangeThickness = val;
				}
				else if(value == null)
				{
					FlangeThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FilletRadius
		{
			get
			{
				return FilletRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FilletRadius = val;
				}
				else if(value == null)
				{
					FilletRadius = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FlangeEdgeRadius
		{
			get
			{
				return FlangeEdgeRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FlangeEdgeRadius = val;
				}
				else if(value == null)
				{
					FlangeEdgeRadius = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _WebEdgeRadius
		{
			get
			{
				return WebEdgeRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					WebEdgeRadius = val;
				}
				else if(value == null)
				{
					WebEdgeRadius = null;
				}
			}
		}
		public virtual Global.IFCPlaneAngleMeasure? _WebSlope
		{
			get
			{
				return WebSlope;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					WebSlope = val;
				}
				else if(value == null)
				{
					WebSlope = null;
				}
			}
		}
		public virtual Global.IFCPlaneAngleMeasure? _FlangeSlope
		{
			get
			{
				return FlangeSlope;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					FlangeSlope = val;
				}
				else if(value == null)
				{
					FlangeSlope = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _CentreOfGravityInY
		{
			get
			{
				return CentreOfGravityInY;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					CentreOfGravityInY = val;
				}
				else if(value == null)
				{
					CentreOfGravityInY = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTable;
	/// Name : STRING;
	/// Rows : LIST [1:?] OF IfcTableRow;
	/// DERIVE
	/// NumberOfCellsInRow : INTEGER := HIINDEX(Rows[1].RowCells);
	/// NumberOfHeadings : INTEGER := SIZEOF(QUERY( Temp <* Rows | Temp.IsHeading));
	/// NumberOfDataRows : INTEGER := SIZEOF(QUERY( Temp <* Rows | NOT(Temp.IsHeading)));
	/// WHERE
	/// WR1 : SIZEOF(QUERY( Temp <* Rows | HIINDEX(Temp.RowCells) <> HIINDEX(Rows[1].RowCells))) = 0;
	/// WR2 : SIZEOF(QUERY( Temp <* Rows | HIINDEX(Temp.RowCells) <> HIINDEX(Rows[1].RowCells))) = 0;
	/// WR3 : { 0 <= NumberOfHeadings <= 1 };
	/// END_ENTITY;
	/// <summary>
	public class IFCTable : IFC_ClassEntity, IFCMetricValueSelect, Global.IFCTable
	{
		public virtual STRING? Name { get; set; }
		public virtual IFC_Attributes<IFCTableRow>? Rows { get; set; }
		public virtual INTEGER? NumberOfCellsInRow
		{
			get
			{
				//MANUAL : IFC2x3.IFCTable.NumberOfCellsInRow
				// HIINDEX(Rows[1].RowCells);
				return null;
				//END_MANUAL
			}
		}
		public virtual INTEGER? NumberOfHeadings
		{
			get
			{
				//MANUAL : IFC2x3.IFCTable.NumberOfHeadings
				// SIZEOF(QUERY( Temp <* Rows | Temp.IsHeading));
				return null;
				//END_MANUAL
			}
		}
		public virtual INTEGER? NumberOfDataRows
		{
			get
			{
				//MANUAL : IFC2x3.IFCTable.NumberOfDataRows
				// SIZEOF(QUERY( Temp <* Rows | NOT(Temp.IsHeading)));
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCTable() : base()
		{
		}
		public IFCTable(STRING? Name, IFC_Attributes<IFCTableRow>? Rows) : base ()
		{
			this.Name = Name;
			this.Rows = Rows;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Rows", Rows}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"NumberOfCellsInRow", NumberOfCellsInRow},
				{"NumberOfHeadings", NumberOfHeadings},
				{"NumberOfDataRows", NumberOfDataRows}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual STRING? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is STRING val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCTableRow>? _Rows
		{
			get
			{
				if(Rows != null)
				{
					IFC_Attributes<Global.IFCTableRow>? items = new IFC_Attributes<Global.IFCTableRow>();
					foreach (IFCTableRow item in Rows)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Rows = null;
				}
				else
				{
					Rows = new IFC_Attributes<IFCTableRow>();
					foreach(var val in value)
					{
						if(val is IFCTableRow v)
						{
							Rows.Add(v);
						}
					}
				}
			}
		}
		public virtual INTEGER? _NumberOfCellsInRow
		{
			get
			{
				return NumberOfCellsInRow;
			}
		}
		public virtual INTEGER? _NumberOfHeadings
		{
			get
			{
				return NumberOfHeadings;
			}
		}
		public virtual INTEGER? _NumberOfDataRows
		{
			get
			{
				return NumberOfDataRows;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTableRow;
	/// RowCells : LIST [1:?] OF IfcValue;
	/// IsHeading : BOOLEAN;
	/// INVERSE
	/// OfTable : IfcTable FOR Rows;
	/// END_ENTITY;
	/// <summary>
	public class IFCTableRow : IFC_ClassEntity, Global.IFCTableRow
	{
		public virtual IFC_Attributes<IFCValue>? RowCells { get; set; }
		public virtual BOOLEAN? IsHeading { get; set; }
		public IFCTable? OfTable {get{return Model?.GetItems<IFCTable>().FirstOrDefault(x => x.Rows != null && x.Rows.Contains(this));}}
		public IFCTableRow() : base()
		{
		}
		public IFCTableRow(IFC_Attributes<IFCValue>? RowCells, BOOLEAN? IsHeading) : base ()
		{
			this.RowCells = RowCells;
			this.IsHeading = IsHeading;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RowCells", RowCells},
				{"IsHeading", IsHeading}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"OfTable", OfTable}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCValue>? _RowCells
		{
			get
			{
				if(RowCells != null)
				{
					IFC_Attributes<Global.IFCValue>? items = new IFC_Attributes<Global.IFCValue>();
					foreach (IFCValue item in RowCells)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RowCells = null;
				}
				else
				{
					RowCells = new IFC_Attributes<IFCValue>();
					foreach(var val in value)
					{
						if(val is IFCValue v)
						{
							RowCells.Add(v);
						}
					}
				}
			}
		}
		public virtual BOOLEAN? _IsHeading
		{
			get
			{
				return IsHeading;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					IsHeading = val;
				}
				else if(value == null)
				{
					IsHeading = null;
				}
			}
		}
		public virtual Global.IFCTable? _OfTable
		{
			get
			{
				return OfTable;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTankType
	/// SUBTYPE OF (IfcFlowStorageDeviceType);
	/// PredefinedType : IfcTankTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcTankTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTankTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCTankType : IFCFlowStorageDeviceType, Global.IFCTankType
	{
		public virtual IFCTankTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCTankType() : base()
		{
		}
		public IFCTankType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCTankTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCTankTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCTankTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTask
	/// SUPERTYPE OF (ONEOF
	/// (IfcMove
	/// ,IfcOrderAction))
	/// SUBTYPE OF (IfcProcess);
	/// TaskId : IfcIdentifier;
	/// Status : OPTIONAL IfcLabel;
	/// WorkMethod : OPTIONAL IfcLabel;
	/// IsMilestone : BOOLEAN;
	/// Priority : OPTIONAL INTEGER;
	/// WHERE
	/// WR1 : SIZEOF(QUERY(temp <* SELF\IfcObjectDefinition.Decomposes | NOT('IFC2X3.IFCRELNESTS' IN TYPEOF(temp)))) = 0;
	/// WR2 : SIZEOF(QUERY(temp <* SELF\IfcObjectDefinition.IsDecomposedBy | NOT('IFC2X3.IFCRELNESTS' IN TYPEOF(temp)))) = 0;
	/// WR3 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IFCTask : IFCProcess, Global.IFCTask
	{
		public virtual IFCIdentifier? TaskId { get; set; }
		public virtual IFCLabel? Status { get; set; }
		public virtual IFCLabel? WorkMethod { get; set; }
		public virtual BOOLEAN? IsMilestone { get; set; }
		public virtual INTEGER? Priority { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR2
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR3
		{
			get
			{
				return true;
			}
		}
		public IFCTask() : base()
		{
		}
		public IFCTask(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? TaskId, IFCLabel? Status, IFCLabel? WorkMethod, BOOLEAN? IsMilestone, INTEGER? Priority) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.TaskId = TaskId;
			this.Status = Status;
			this.WorkMethod = WorkMethod;
			this.IsMilestone = IsMilestone;
			this.Priority = Priority;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"TaskId", TaskId},
				{"Status", Status},
				{"WorkMethod", WorkMethod},
				{"IsMilestone", IsMilestone},
				{"Priority", Priority}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"OperatesOn", OperatesOn},
				{"IsSuccessorFrom", IsSuccessorFrom},
				{"IsPredecessorTo", IsPredecessorTo}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR2", is_WR2},
				{"is_WR3", is_WR3}
			};
		}
		public virtual Global.IFCIdentifier? _TaskId
		{
			get
			{
				return TaskId;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					TaskId = val;
				}
				else if(value == null)
				{
					TaskId = null;
				}
			}
		}
		public virtual Global.IFCLabel? _Status
		{
			get
			{
				return Status;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Status = val;
				}
				else if(value == null)
				{
					Status = null;
				}
			}
		}
		public virtual Global.IFCLabel? _WorkMethod
		{
			get
			{
				return WorkMethod;
			}
			set
			{
				if(value is IFCLabel val)
				{
					WorkMethod = val;
				}
				else if(value == null)
				{
					WorkMethod = null;
				}
			}
		}
		public virtual BOOLEAN? _IsMilestone
		{
			get
			{
				return IsMilestone;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					IsMilestone = val;
				}
				else if(value == null)
				{
					IsMilestone = null;
				}
			}
		}
		public virtual INTEGER? _Priority
		{
			get
			{
				return Priority;
			}
			set
			{
				if(value is INTEGER val)
				{
					Priority = val;
				}
				else if(value == null)
				{
					Priority = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTelecomAddress
	/// SUBTYPE OF (IfcAddress);
	/// TelephoneNumbers : OPTIONAL LIST [1:?] OF IfcLabel;
	/// FacsimileNumbers : OPTIONAL LIST [1:?] OF IfcLabel;
	/// PagerNumber : OPTIONAL IfcLabel;
	/// ElectronicMailAddresses : OPTIONAL LIST [1:?] OF IfcLabel;
	/// WWWHomePageURL : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : EXISTS (TelephoneNumbers) OR
	/// EXISTS (PagerNumber) OR
	/// EXISTS (FacsimileNumbers) OR
	/// EXISTS (ElectronicMailAddresses) OR
	/// EXISTS (WWWHomePageURL);
	/// END_ENTITY;
	/// <summary>
	public class IFCTelecomAddress : IFCAddress, Global.IFCTelecomAddress
	{
		public virtual IFC_Attributes<IFCLabel>? TelephoneNumbers { get; set; }
		public virtual IFC_Attributes<IFCLabel>? FacsimileNumbers { get; set; }
		public virtual IFCLabel? PagerNumber { get; set; }
		public virtual IFC_Attributes<IFCLabel>? ElectronicMailAddresses { get; set; }
		public virtual IFCLabel? WWWHomePageURL { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCTelecomAddress() : base()
		{
		}
		public IFCTelecomAddress(IFCAddressTypeEnum? Purpose, IFCText? Description, IFCLabel? UserDefinedPurpose, IFC_Attributes<IFCLabel>? TelephoneNumbers, IFC_Attributes<IFCLabel>? FacsimileNumbers, IFCLabel? PagerNumber, IFC_Attributes<IFCLabel>? ElectronicMailAddresses, IFCLabel? WWWHomePageURL) : base (Purpose, Description, UserDefinedPurpose)
		{
			this.TelephoneNumbers = TelephoneNumbers;
			this.FacsimileNumbers = FacsimileNumbers;
			this.PagerNumber = PagerNumber;
			this.ElectronicMailAddresses = ElectronicMailAddresses;
			this.WWWHomePageURL = WWWHomePageURL;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Purpose", Purpose},
				{"Description", Description},
				{"UserDefinedPurpose", UserDefinedPurpose},
				{"TelephoneNumbers", TelephoneNumbers},
				{"FacsimileNumbers", FacsimileNumbers},
				{"PagerNumber", PagerNumber},
				{"ElectronicMailAddresses", ElectronicMailAddresses},
				{"WWWHomePageURL", WWWHomePageURL}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"OfPerson", OfPerson},
				{"OfOrganization", OfOrganization}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual IFC_Attributes<Global.IFCLabel>? _TelephoneNumbers
		{
			get
			{
				if(TelephoneNumbers != null)
				{
					IFC_Attributes<Global.IFCLabel>? items = new IFC_Attributes<Global.IFCLabel>();
					foreach (IFCLabel item in TelephoneNumbers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					TelephoneNumbers = null;
				}
				else
				{
					TelephoneNumbers = new IFC_Attributes<IFCLabel>();
					foreach(var val in value)
					{
						if(val is IFCLabel v)
						{
							TelephoneNumbers.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCLabel>? _FacsimileNumbers
		{
			get
			{
				if(FacsimileNumbers != null)
				{
					IFC_Attributes<Global.IFCLabel>? items = new IFC_Attributes<Global.IFCLabel>();
					foreach (IFCLabel item in FacsimileNumbers)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					FacsimileNumbers = null;
				}
				else
				{
					FacsimileNumbers = new IFC_Attributes<IFCLabel>();
					foreach(var val in value)
					{
						if(val is IFCLabel v)
						{
							FacsimileNumbers.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _PagerNumber
		{
			get
			{
				return PagerNumber;
			}
			set
			{
				if(value is IFCLabel val)
				{
					PagerNumber = val;
				}
				else if(value == null)
				{
					PagerNumber = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCLabel>? _ElectronicMailAddresses
		{
			get
			{
				if(ElectronicMailAddresses != null)
				{
					IFC_Attributes<Global.IFCLabel>? items = new IFC_Attributes<Global.IFCLabel>();
					foreach (IFCLabel item in ElectronicMailAddresses)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ElectronicMailAddresses = null;
				}
				else
				{
					ElectronicMailAddresses = new IFC_Attributes<IFCLabel>();
					foreach(var val in value)
					{
						if(val is IFCLabel v)
						{
							ElectronicMailAddresses.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _WWWHomePageURL
		{
			get
			{
				return WWWHomePageURL;
			}
			set
			{
				if(value is IFCLabel val)
				{
					WWWHomePageURL = val;
				}
				else if(value == null)
				{
					WWWHomePageURL = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTendon
	/// SUBTYPE OF (IfcReinforcingElement);
	/// PredefinedType : IfcTendonTypeEnum;
	/// NominalDiameter : IfcPositiveLengthMeasure;
	/// CrossSectionArea : IfcAreaMeasure;
	/// TensionForce : OPTIONAL IfcForceMeasure;
	/// PreStress : OPTIONAL IfcPressureMeasure;
	/// FrictionCoefficient : OPTIONAL IfcNormalisedRatioMeasure;
	/// AnchorageSlip : OPTIONAL IfcPositiveLengthMeasure;
	/// MinCurvatureRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcTendonTypeEnum.USERDEFINED) OR ((PredefinedType = IfcTendonTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
	/// END_ENTITY;
	/// <summary>
	public class IFCTendon : IFCReinforcingElement, Global.IFCTendon
	{
		public virtual IFCTendonTypeEnum? PredefinedType { get; set; }
		public virtual IFCPositiveLengthMeasure? NominalDiameter { get; set; }
		public virtual IFCAreaMeasure? CrossSectionArea { get; set; }
		public virtual IFCForceMeasure? TensionForce { get; set; }
		public virtual IFCPressureMeasure? PreStress { get; set; }
		public virtual IFCNormalisedRatioMeasure? FrictionCoefficient { get; set; }
		public virtual IFCPositiveLengthMeasure? AnchorageSlip { get; set; }
		public virtual IFCPositiveLengthMeasure? MinCurvatureRadius { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCTendon() : base()
		{
		}
		public IFCTendon(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCLabel? SteelGrade, IFCTendonTypeEnum? PredefinedType, IFCPositiveLengthMeasure? NominalDiameter, IFCAreaMeasure? CrossSectionArea, IFCForceMeasure? TensionForce, IFCPressureMeasure? PreStress, IFCNormalisedRatioMeasure? FrictionCoefficient, IFCPositiveLengthMeasure? AnchorageSlip, IFCPositiveLengthMeasure? MinCurvatureRadius) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
			this.PredefinedType = PredefinedType;
			this.NominalDiameter = NominalDiameter;
			this.CrossSectionArea = CrossSectionArea;
			this.TensionForce = TensionForce;
			this.PreStress = PreStress;
			this.FrictionCoefficient = FrictionCoefficient;
			this.AnchorageSlip = AnchorageSlip;
			this.MinCurvatureRadius = MinCurvatureRadius;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"SteelGrade", SteelGrade},
				{"PredefinedType", PredefinedType},
				{"NominalDiameter", NominalDiameter},
				{"CrossSectionArea", CrossSectionArea},
				{"TensionForce", TensionForce},
				{"PreStress", PreStress},
				{"FrictionCoefficient", FrictionCoefficient},
				{"AnchorageSlip", AnchorageSlip},
				{"MinCurvatureRadius", MinCurvatureRadius}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCTendonTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCTendonTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _NominalDiameter
		{
			get
			{
				return NominalDiameter;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					NominalDiameter = val;
				}
				else if(value == null)
				{
					NominalDiameter = null;
				}
			}
		}
		public virtual Global.IFCAreaMeasure? _CrossSectionArea
		{
			get
			{
				return CrossSectionArea;
			}
			set
			{
				if(value is IFCAreaMeasure val)
				{
					CrossSectionArea = val;
				}
				else if(value == null)
				{
					CrossSectionArea = null;
				}
			}
		}
		public virtual Global.IFCForceMeasure? _TensionForce
		{
			get
			{
				return TensionForce;
			}
			set
			{
				if(value is IFCForceMeasure val)
				{
					TensionForce = val;
				}
				else if(value == null)
				{
					TensionForce = null;
				}
			}
		}
		public virtual Global.IFCPressureMeasure? _PreStress
		{
			get
			{
				return PreStress;
			}
			set
			{
				if(value is IFCPressureMeasure val)
				{
					PreStress = val;
				}
				else if(value == null)
				{
					PreStress = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _FrictionCoefficient
		{
			get
			{
				return FrictionCoefficient;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					FrictionCoefficient = val;
				}
				else if(value == null)
				{
					FrictionCoefficient = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _AnchorageSlip
		{
			get
			{
				return AnchorageSlip;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					AnchorageSlip = val;
				}
				else if(value == null)
				{
					AnchorageSlip = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _MinCurvatureRadius
		{
			get
			{
				return MinCurvatureRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					MinCurvatureRadius = val;
				}
				else if(value == null)
				{
					MinCurvatureRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTendonAnchor
	/// SUBTYPE OF (IfcReinforcingElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCTendonAnchor : IFCReinforcingElement, Global.IFCTendonAnchor
	{
		public IFCTendonAnchor() : base()
		{
		}
		public IFCTendonAnchor(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCLabel? SteelGrade) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"SteelGrade", SteelGrade}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcTerminatorSymbol
	/// SUPERTYPE OF (ONEOF
	/// (IfcDimensionCurveTerminator))
	/// SUBTYPE OF (IfcAnnotationSymbolOccurrence);
	/// AnnotatedCurve : IfcAnnotationCurveOccurrence;
	/// END_ENTITY;
	/// <summary>
	public class IFCTerminatorSymbol : IFCAnnotationSymbolOccurrence, Global.IFCTerminatorSymbol
	{
		public virtual IFCAnnotationCurveOccurrence? AnnotatedCurve { get; set; }
		public IFCTerminatorSymbol() : base()
		{
		}
		public IFCTerminatorSymbol(IFCRepresentationItem? Item, IFC_Attributes<IFCPresentationStyleAssignment>? Styles, IFCLabel? Name, IFCAnnotationCurveOccurrence? AnnotatedCurve) : base (Item, Styles, Name)
		{
			this.AnnotatedCurve = AnnotatedCurve;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Item", Item},
				{"Styles", Styles},
				{"Name", Name},
				{"AnnotatedCurve", AnnotatedCurve}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR12", is_WR12},
				{"is_WR31", is_WR31}
			};
		}
		public virtual Global.IFCAnnotationCurveOccurrence? _AnnotatedCurve
		{
			get
			{
				return AnnotatedCurve;
			}
			set
			{
				if(value is IFCAnnotationCurveOccurrence val)
				{
					AnnotatedCurve = val;
				}
				else if(value == null)
				{
					AnnotatedCurve = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextLiteral
	/// SUPERTYPE OF (ONEOF
	/// (IfcTextLiteralWithExtent))
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Literal : IfcPresentableText;
	/// Placement : IfcAxis2Placement;
	/// Path : IfcTextPath;
	/// END_ENTITY;
	/// <summary>
	public class IFCTextLiteral : IFCGeometricRepresentationItem, Global.IFCTextLiteral
	{
		public virtual IFCPresentableText? Literal { get; set; }
		public virtual IFCAxis2Placement? Placement { get; set; }
		public virtual IFCTextPath? Path { get; set; }
		public IFCTextLiteral() : base()
		{
		}
		public IFCTextLiteral(IFCPresentableText? Literal, IFCAxis2Placement? Placement, IFCTextPath? Path) : base ()
		{
			this.Literal = Literal;
			this.Placement = Placement;
			this.Path = Path;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Literal", Literal},
				{"Placement", Placement},
				{"Path", Path}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPresentableText? _Literal
		{
			get
			{
				return Literal;
			}
			set
			{
				if(value is IFCPresentableText val)
				{
					Literal = val;
				}
				else if(value == null)
				{
					Literal = null;
				}
			}
		}
		public virtual Global.IFCAxis2Placement? _Placement
		{
			get
			{
				return Placement;
			}
			set
			{
				if(value is IFCAxis2Placement val)
				{
					Placement = val;
				}
				else if(value == null)
				{
					Placement = null;
				}
			}
		}
		public virtual Global.IFCTextPath? _Path
		{
			get
			{
				return Path;
			}
			set
			{
				if(value is IFCTextPath val)
				{
					Path = val;
				}
				else if(value == null)
				{
					Path = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextLiteralWithExtent
	/// SUBTYPE OF (IfcTextLiteral);
	/// Extent : IfcPlanarExtent;
	/// BoxAlignment : IfcBoxAlignment;
	/// WHERE
	/// WR31 : NOT('IFC2X3.IFCPLANARBOX' IN TYPEOF(Extent));
	/// END_ENTITY;
	/// <summary>
	public class IFCTextLiteralWithExtent : IFCTextLiteral, Global.IFCTextLiteralWithExtent
	{
		public virtual IFCPlanarExtent? Extent { get; set; }
		public virtual IFCBoxAlignment? BoxAlignment { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCTextLiteralWithExtent() : base()
		{
		}
		public IFCTextLiteralWithExtent(IFCPresentableText? Literal, IFCAxis2Placement? Placement, IFCTextPath? Path, IFCPlanarExtent? Extent, IFCBoxAlignment? BoxAlignment) : base (Literal, Placement, Path)
		{
			this.Extent = Extent;
			this.BoxAlignment = BoxAlignment;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Literal", Literal},
				{"Placement", Placement},
				{"Path", Path},
				{"Extent", Extent},
				{"BoxAlignment", BoxAlignment}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual Global.IFCPlanarExtent? _Extent
		{
			get
			{
				return Extent;
			}
			set
			{
				if(value is IFCPlanarExtent val)
				{
					Extent = val;
				}
				else if(value == null)
				{
					Extent = null;
				}
			}
		}
		public virtual Global.IFCBoxAlignment? _BoxAlignment
		{
			get
			{
				return BoxAlignment;
			}
			set
			{
				if(value is IFCBoxAlignment val)
				{
					BoxAlignment = val;
				}
				else if(value == null)
				{
					BoxAlignment = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextStyle
	/// SUBTYPE OF (IfcPresentationStyle);
	/// TextCharacterAppearance : OPTIONAL IfcCharacterStyleSelect;
	/// TextStyle : OPTIONAL IfcTextStyleSelect;
	/// TextFontStyle : IfcTextFontSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCTextStyle : IFCPresentationStyle, IFCPresentationStyleSelect, Global.IFCTextStyle
	{
		public virtual IFCCharacterStyleSelect? TextCharacterAppearance { get; set; }
		public virtual IFCTextStyleSelect? TextStyle { get; set; }
		public virtual IFCTextFontSelect? TextFontStyle { get; set; }
		public IFCTextStyle() : base()
		{
		}
		public IFCTextStyle(IFCLabel? Name, IFCCharacterStyleSelect? TextCharacterAppearance, IFCTextStyleSelect? TextStyle, IFCTextFontSelect? TextFontStyle) : base (Name)
		{
			this.TextCharacterAppearance = TextCharacterAppearance;
			this.TextStyle = TextStyle;
			this.TextFontStyle = TextFontStyle;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"TextCharacterAppearance", TextCharacterAppearance},
				{"TextStyle", TextStyle},
				{"TextFontStyle", TextFontStyle}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCCharacterStyleSelect? _TextCharacterAppearance
		{
			get
			{
				return TextCharacterAppearance;
			}
			set
			{
				if(value is IFCCharacterStyleSelect val)
				{
					TextCharacterAppearance = val;
				}
				else if(value == null)
				{
					TextCharacterAppearance = null;
				}
			}
		}
		public virtual Global.IFCTextStyleSelect? _TextStyle
		{
			get
			{
				return TextStyle;
			}
			set
			{
				if(value is IFCTextStyleSelect val)
				{
					TextStyle = val;
				}
				else if(value == null)
				{
					TextStyle = null;
				}
			}
		}
		public virtual Global.IFCTextFontSelect? _TextFontStyle
		{
			get
			{
				return TextFontStyle;
			}
			set
			{
				if(value is IFCTextFontSelect val)
				{
					TextFontStyle = val;
				}
				else if(value == null)
				{
					TextFontStyle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextStyleFontModel
	/// SUBTYPE OF (IfcPreDefinedTextFont);
	/// FontFamily : OPTIONAL LIST [1:?] OF IfcTextFontName;
	/// FontStyle : OPTIONAL IfcFontStyle;
	/// FontVariant : OPTIONAL IfcFontVariant;
	/// FontWeight : OPTIONAL IfcFontWeight;
	/// FontSize : IfcSizeSelect;
	/// WHERE
	/// WR31 : ('IFC2X3.IFCLENGTHMEASURE' IN TYPEOF(SELF.FontSize)) AND
	/// (SELF.FontSize > 0.);
	/// END_ENTITY;
	/// <summary>
	public class IFCTextStyleFontModel : IFCPreDefinedTextFont, Global.IFCTextStyleFontModel
	{
		public virtual IFC_Attributes<IFCTextFontName>? FontFamily { get; set; }
		public virtual IFCFontStyle? FontStyle { get; set; }
		public virtual IFCFontVariant? FontVariant { get; set; }
		public virtual IFCFontWeight? FontWeight { get; set; }
		public virtual IFCSizeSelect? FontSize { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public IFCTextStyleFontModel() : base()
		{
		}
		public IFCTextStyleFontModel(IFCLabel? Name, IFC_Attributes<IFCTextFontName>? FontFamily, IFCFontStyle? FontStyle, IFCFontVariant? FontVariant, IFCFontWeight? FontWeight, IFCSizeSelect? FontSize) : base (Name)
		{
			this.FontFamily = FontFamily;
			this.FontStyle = FontStyle;
			this.FontVariant = FontVariant;
			this.FontWeight = FontWeight;
			this.FontSize = FontSize;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"FontFamily", FontFamily},
				{"FontStyle", FontStyle},
				{"FontVariant", FontVariant},
				{"FontWeight", FontWeight},
				{"FontSize", FontSize}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31}
			};
		}
		public virtual IFC_Attributes<Global.IFCTextFontName>? _FontFamily
		{
			get
			{
				if(FontFamily != null)
				{
					IFC_Attributes<Global.IFCTextFontName>? items = new IFC_Attributes<Global.IFCTextFontName>();
					foreach (IFCTextFontName item in FontFamily)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					FontFamily = null;
				}
				else
				{
					FontFamily = new IFC_Attributes<IFCTextFontName>();
					foreach(var val in value)
					{
						if(val is IFCTextFontName v)
						{
							FontFamily.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCFontStyle? _FontStyle
		{
			get
			{
				return FontStyle;
			}
			set
			{
				if(value is IFCFontStyle val)
				{
					FontStyle = val;
				}
				else if(value == null)
				{
					FontStyle = null;
				}
			}
		}
		public virtual Global.IFCFontVariant? _FontVariant
		{
			get
			{
				return FontVariant;
			}
			set
			{
				if(value is IFCFontVariant val)
				{
					FontVariant = val;
				}
				else if(value == null)
				{
					FontVariant = null;
				}
			}
		}
		public virtual Global.IFCFontWeight? _FontWeight
		{
			get
			{
				return FontWeight;
			}
			set
			{
				if(value is IFCFontWeight val)
				{
					FontWeight = val;
				}
				else if(value == null)
				{
					FontWeight = null;
				}
			}
		}
		public virtual Global.IFCSizeSelect? _FontSize
		{
			get
			{
				return FontSize;
			}
			set
			{
				if(value is IFCSizeSelect val)
				{
					FontSize = val;
				}
				else if(value == null)
				{
					FontSize = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextStyleForDefinedFont;
	/// Colour : IfcColour;
	/// BackgroundColour : OPTIONAL IfcColour;
	/// END_ENTITY;
	/// <summary>
	public class IFCTextStyleForDefinedFont : IFC_ClassEntity, IFCCharacterStyleSelect, Global.IFCTextStyleForDefinedFont
	{
		public virtual IFCColour? Colour { get; set; }
		public virtual IFCColour? BackgroundColour { get; set; }
		public IFCTextStyleForDefinedFont() : base()
		{
		}
		public IFCTextStyleForDefinedFont(IFCColour? Colour, IFCColour? BackgroundColour) : base ()
		{
			this.Colour = Colour;
			this.BackgroundColour = BackgroundColour;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Colour", Colour},
				{"BackgroundColour", BackgroundColour}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCColour? _Colour
		{
			get
			{
				return Colour;
			}
			set
			{
				if(value is IFCColour val)
				{
					Colour = val;
				}
				else if(value == null)
				{
					Colour = null;
				}
			}
		}
		public virtual Global.IFCColour? _BackgroundColour
		{
			get
			{
				return BackgroundColour;
			}
			set
			{
				if(value is IFCColour val)
				{
					BackgroundColour = val;
				}
				else if(value == null)
				{
					BackgroundColour = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextStyleTextModel;
	/// TextIndent : OPTIONAL IfcSizeSelect;
	/// TextAlign : OPTIONAL IfcTextAlignment;
	/// TextDecoration : OPTIONAL IfcTextDecoration;
	/// LetterSpacing : OPTIONAL IfcSizeSelect;
	/// WordSpacing : OPTIONAL IfcSizeSelect;
	/// TextTransform : OPTIONAL IfcTextTransformation;
	/// LineHeight : OPTIONAL IfcSizeSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCTextStyleTextModel : IFC_ClassEntity, IFCTextStyleSelect, Global.IFCTextStyleTextModel
	{
		public virtual IFCSizeSelect? TextIndent { get; set; }
		public virtual IFCTextAlignment? TextAlign { get; set; }
		public virtual IFCTextDecoration? TextDecoration { get; set; }
		public virtual IFCSizeSelect? LetterSpacing { get; set; }
		public virtual IFCSizeSelect? WordSpacing { get; set; }
		public virtual IFCTextTransformation? TextTransform { get; set; }
		public virtual IFCSizeSelect? LineHeight { get; set; }
		public IFCTextStyleTextModel() : base()
		{
		}
		public IFCTextStyleTextModel(IFCSizeSelect? TextIndent, IFCTextAlignment? TextAlign, IFCTextDecoration? TextDecoration, IFCSizeSelect? LetterSpacing, IFCSizeSelect? WordSpacing, IFCTextTransformation? TextTransform, IFCSizeSelect? LineHeight) : base ()
		{
			this.TextIndent = TextIndent;
			this.TextAlign = TextAlign;
			this.TextDecoration = TextDecoration;
			this.LetterSpacing = LetterSpacing;
			this.WordSpacing = WordSpacing;
			this.TextTransform = TextTransform;
			this.LineHeight = LineHeight;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"TextIndent", TextIndent},
				{"TextAlign", TextAlign},
				{"TextDecoration", TextDecoration},
				{"LetterSpacing", LetterSpacing},
				{"WordSpacing", WordSpacing},
				{"TextTransform", TextTransform},
				{"LineHeight", LineHeight}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCSizeSelect? _TextIndent
		{
			get
			{
				return TextIndent;
			}
			set
			{
				if(value is IFCSizeSelect val)
				{
					TextIndent = val;
				}
				else if(value == null)
				{
					TextIndent = null;
				}
			}
		}
		public virtual Global.IFCTextAlignment? _TextAlign
		{
			get
			{
				return TextAlign;
			}
			set
			{
				if(value is IFCTextAlignment val)
				{
					TextAlign = val;
				}
				else if(value == null)
				{
					TextAlign = null;
				}
			}
		}
		public virtual Global.IFCTextDecoration? _TextDecoration
		{
			get
			{
				return TextDecoration;
			}
			set
			{
				if(value is IFCTextDecoration val)
				{
					TextDecoration = val;
				}
				else if(value == null)
				{
					TextDecoration = null;
				}
			}
		}
		public virtual Global.IFCSizeSelect? _LetterSpacing
		{
			get
			{
				return LetterSpacing;
			}
			set
			{
				if(value is IFCSizeSelect val)
				{
					LetterSpacing = val;
				}
				else if(value == null)
				{
					LetterSpacing = null;
				}
			}
		}
		public virtual Global.IFCSizeSelect? _WordSpacing
		{
			get
			{
				return WordSpacing;
			}
			set
			{
				if(value is IFCSizeSelect val)
				{
					WordSpacing = val;
				}
				else if(value == null)
				{
					WordSpacing = null;
				}
			}
		}
		public virtual Global.IFCTextTransformation? _TextTransform
		{
			get
			{
				return TextTransform;
			}
			set
			{
				if(value is IFCTextTransformation val)
				{
					TextTransform = val;
				}
				else if(value == null)
				{
					TextTransform = null;
				}
			}
		}
		public virtual Global.IFCSizeSelect? _LineHeight
		{
			get
			{
				return LineHeight;
			}
			set
			{
				if(value is IFCSizeSelect val)
				{
					LineHeight = val;
				}
				else if(value == null)
				{
					LineHeight = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextStyleWithBoxCharacteristics;
	/// BoxHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// BoxWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// BoxSlantAngle : OPTIONAL IfcPlaneAngleMeasure;
	/// BoxRotateAngle : OPTIONAL IfcPlaneAngleMeasure;
	/// CharacterSpacing : OPTIONAL IfcSizeSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCTextStyleWithBoxCharacteristics : IFC_ClassEntity, IFCTextStyleSelect, Global.IFCTextStyleWithBoxCharacteristics
	{
		public virtual IFCPositiveLengthMeasure? BoxHeight { get; set; }
		public virtual IFCPositiveLengthMeasure? BoxWidth { get; set; }
		public virtual IFCPlaneAngleMeasure? BoxSlantAngle { get; set; }
		public virtual IFCPlaneAngleMeasure? BoxRotateAngle { get; set; }
		public virtual IFCSizeSelect? CharacterSpacing { get; set; }
		public IFCTextStyleWithBoxCharacteristics() : base()
		{
		}
		public IFCTextStyleWithBoxCharacteristics(IFCPositiveLengthMeasure? BoxHeight, IFCPositiveLengthMeasure? BoxWidth, IFCPlaneAngleMeasure? BoxSlantAngle, IFCPlaneAngleMeasure? BoxRotateAngle, IFCSizeSelect? CharacterSpacing) : base ()
		{
			this.BoxHeight = BoxHeight;
			this.BoxWidth = BoxWidth;
			this.BoxSlantAngle = BoxSlantAngle;
			this.BoxRotateAngle = BoxRotateAngle;
			this.CharacterSpacing = CharacterSpacing;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"BoxHeight", BoxHeight},
				{"BoxWidth", BoxWidth},
				{"BoxSlantAngle", BoxSlantAngle},
				{"BoxRotateAngle", BoxRotateAngle},
				{"CharacterSpacing", CharacterSpacing}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _BoxHeight
		{
			get
			{
				return BoxHeight;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BoxHeight = val;
				}
				else if(value == null)
				{
					BoxHeight = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _BoxWidth
		{
			get
			{
				return BoxWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BoxWidth = val;
				}
				else if(value == null)
				{
					BoxWidth = null;
				}
			}
		}
		public virtual Global.IFCPlaneAngleMeasure? _BoxSlantAngle
		{
			get
			{
				return BoxSlantAngle;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					BoxSlantAngle = val;
				}
				else if(value == null)
				{
					BoxSlantAngle = null;
				}
			}
		}
		public virtual Global.IFCPlaneAngleMeasure? _BoxRotateAngle
		{
			get
			{
				return BoxRotateAngle;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					BoxRotateAngle = val;
				}
				else if(value == null)
				{
					BoxRotateAngle = null;
				}
			}
		}
		public virtual Global.IFCSizeSelect? _CharacterSpacing
		{
			get
			{
				return CharacterSpacing;
			}
			set
			{
				if(value is IFCSizeSelect val)
				{
					CharacterSpacing = val;
				}
				else if(value == null)
				{
					CharacterSpacing = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureCoordinate
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcTextureCoordinateGenerator
	/// ,IfcTextureMap));
	/// INVERSE
	/// AnnotatedSurface : SET [1:1] OF IfcAnnotationSurface FOR TextureCoordinates;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCTextureCoordinate : IFC_ClassEntity, Global.IFCTextureCoordinate
	{
		public IFC_Attributes<IFCAnnotationSurface>? AnnotatedSurface {get{return new IFC_Attributes<IFCAnnotationSurface>(Model?.GetItems<IFCAnnotationSurface>().Where(x => x.TextureCoordinates != null && x.TextureCoordinates == this).ToList());}}
		public IFCTextureCoordinate() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"AnnotatedSurface", AnnotatedSurface}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCAnnotationSurface>? _AnnotatedSurface
		{
			get
			{
				if(AnnotatedSurface != null)
				{
					IFC_Attributes<Global.IFCAnnotationSurface>? items = new IFC_Attributes<Global.IFCAnnotationSurface>();
					foreach (IFCAnnotationSurface item in AnnotatedSurface)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureCoordinateGenerator
	/// SUBTYPE OF (IfcTextureCoordinate);
	/// Mode : IfcLabel;
	/// Parameter : LIST [1:?] OF IfcSimpleValue;
	/// END_ENTITY;
	/// <summary>
	public class IFCTextureCoordinateGenerator : IFCTextureCoordinate, Global.IFCTextureCoordinateGenerator
	{
		public virtual IFCLabel? Mode { get; set; }
		public virtual IFC_Attributes<IFCSimpleValue>? Parameter { get; set; }
		public IFCTextureCoordinateGenerator() : base()
		{
		}
		public IFCTextureCoordinateGenerator(IFCLabel? Mode, IFC_Attributes<IFCSimpleValue>? Parameter) : base ()
		{
			this.Mode = Mode;
			this.Parameter = Parameter;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Mode", Mode},
				{"Parameter", Parameter}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"AnnotatedSurface", AnnotatedSurface}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Mode
		{
			get
			{
				return Mode;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Mode = val;
				}
				else if(value == null)
				{
					Mode = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCSimpleValue>? _Parameter
		{
			get
			{
				if(Parameter != null)
				{
					IFC_Attributes<Global.IFCSimpleValue>? items = new IFC_Attributes<Global.IFCSimpleValue>();
					foreach (IFCSimpleValue item in Parameter)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Parameter = null;
				}
				else
				{
					Parameter = new IFC_Attributes<IFCSimpleValue>();
					foreach(var val in value)
					{
						if(val is IFCSimpleValue v)
						{
							Parameter.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureMap
	/// SUBTYPE OF (IfcTextureCoordinate);
	/// TextureMaps : SET [1:?] OF IfcVertexBasedTextureMap;
	/// WHERE
	/// WR11 : SIZEOF([
	/// 'IFC2X3.IFCSHELLBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCFACEBASEDSURFACEMODEL',
	/// 'IFC2X3.IFCFACETEDBREP',
	/// 'IFC2X3.IFCFACETEDBREPWITHVOIDS']
	/// * TYPEOF(SELF\IfcTextureCoordinate.AnnotatedSurface[1].Item)
	/// ) >= 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCTextureMap : IFCTextureCoordinate, Global.IFCTextureMap
	{
		public virtual IFC_Attributes<IFCVertexBasedTextureMap>? TextureMaps { get; set; }
		public virtual bool is_WR11
		{
			get
			{
				return true;
			}
		}
		public IFCTextureMap() : base()
		{
		}
		public IFCTextureMap(IFC_Attributes<IFCVertexBasedTextureMap>? TextureMaps) : base ()
		{
			this.TextureMaps = TextureMaps;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"TextureMaps", TextureMaps}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"AnnotatedSurface", AnnotatedSurface}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11}
			};
		}
		public virtual IFC_Attributes<Global.IFCVertexBasedTextureMap>? _TextureMaps
		{
			get
			{
				if(TextureMaps != null)
				{
					IFC_Attributes<Global.IFCVertexBasedTextureMap>? items = new IFC_Attributes<Global.IFCVertexBasedTextureMap>();
					foreach (IFCVertexBasedTextureMap item in TextureMaps)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					TextureMaps = null;
				}
				else
				{
					TextureMaps = new IFC_Attributes<IFCVertexBasedTextureMap>();
					foreach(var val in value)
					{
						if(val is IFCVertexBasedTextureMap v)
						{
							TextureMaps.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTextureVertex;
	/// Coordinates : LIST [2:2] OF IfcParameterValue;
	/// END_ENTITY;
	/// <summary>
	public class IFCTextureVertex : IFC_ClassEntity, Global.IFCTextureVertex
	{
		public virtual IFC_Attributes<IFCParameterValue>? Coordinates { get; set; }
		public IFCTextureVertex() : base()
		{
		}
		public IFCTextureVertex(IFC_Attributes<IFCParameterValue>? Coordinates) : base ()
		{
			this.Coordinates = Coordinates;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Coordinates", Coordinates}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCParameterValue>? _Coordinates
		{
			get
			{
				if(Coordinates != null)
				{
					IFC_Attributes<Global.IFCParameterValue>? items = new IFC_Attributes<Global.IFCParameterValue>();
					foreach (IFCParameterValue item in Coordinates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Coordinates = null;
				}
				else
				{
					Coordinates = new IFC_Attributes<IFCParameterValue>();
					foreach(var val in value)
					{
						if(val is IFCParameterValue v)
						{
							Coordinates.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcThermalMaterialProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// SpecificHeatCapacity : OPTIONAL IfcSpecificHeatCapacityMeasure;
	/// BoilingPoint : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// FreezingPoint : OPTIONAL IfcThermodynamicTemperatureMeasure;
	/// ThermalConductivity : OPTIONAL IfcThermalConductivityMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IFCThermalMaterialProperties : IFCMaterialProperties, Global.IFCThermalMaterialProperties
	{
		public virtual IFCSpecificHeatCapacityMeasure? SpecificHeatCapacity { get; set; }
		public virtual IFCThermodynamicTemperatureMeasure? BoilingPoint { get; set; }
		public virtual IFCThermodynamicTemperatureMeasure? FreezingPoint { get; set; }
		public virtual IFCThermalConductivityMeasure? ThermalConductivity { get; set; }
		public IFCThermalMaterialProperties() : base()
		{
		}
		public IFCThermalMaterialProperties(IFCMaterial? Material, IFCSpecificHeatCapacityMeasure? SpecificHeatCapacity, IFCThermodynamicTemperatureMeasure? BoilingPoint, IFCThermodynamicTemperatureMeasure? FreezingPoint, IFCThermalConductivityMeasure? ThermalConductivity) : base (Material)
		{
			this.SpecificHeatCapacity = SpecificHeatCapacity;
			this.BoilingPoint = BoilingPoint;
			this.FreezingPoint = FreezingPoint;
			this.ThermalConductivity = ThermalConductivity;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"SpecificHeatCapacity", SpecificHeatCapacity},
				{"BoilingPoint", BoilingPoint},
				{"FreezingPoint", FreezingPoint},
				{"ThermalConductivity", ThermalConductivity}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCSpecificHeatCapacityMeasure? _SpecificHeatCapacity
		{
			get
			{
				return SpecificHeatCapacity;
			}
			set
			{
				if(value is IFCSpecificHeatCapacityMeasure val)
				{
					SpecificHeatCapacity = val;
				}
				else if(value == null)
				{
					SpecificHeatCapacity = null;
				}
			}
		}
		public virtual Global.IFCThermodynamicTemperatureMeasure? _BoilingPoint
		{
			get
			{
				return BoilingPoint;
			}
			set
			{
				if(value is IFCThermodynamicTemperatureMeasure val)
				{
					BoilingPoint = val;
				}
				else if(value == null)
				{
					BoilingPoint = null;
				}
			}
		}
		public virtual Global.IFCThermodynamicTemperatureMeasure? _FreezingPoint
		{
			get
			{
				return FreezingPoint;
			}
			set
			{
				if(value is IFCThermodynamicTemperatureMeasure val)
				{
					FreezingPoint = val;
				}
				else if(value == null)
				{
					FreezingPoint = null;
				}
			}
		}
		public virtual Global.IFCThermalConductivityMeasure? _ThermalConductivity
		{
			get
			{
				return ThermalConductivity;
			}
			set
			{
				if(value is IFCThermalConductivityMeasure val)
				{
					ThermalConductivity = val;
				}
				else if(value == null)
				{
					ThermalConductivity = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTimeSeries
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcIrregularTimeSeries
	/// ,IfcRegularTimeSeries));
	/// Name : IfcLabel;
	/// Description : OPTIONAL IfcText;
	/// StartTime : IfcDateTimeSelect;
	/// EndTime : IfcDateTimeSelect;
	/// TimeSeriesDataType : IfcTimeSeriesDataTypeEnum;
	/// DataOrigin : IfcDataOriginEnum;
	/// UserDefinedDataOrigin : OPTIONAL IfcLabel;
	/// Unit : OPTIONAL IfcUnit;
	/// INVERSE
	/// DocumentedBy : SET [0:1] OF IfcTimeSeriesReferenceRelationship FOR ReferencedTimeSeries;
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCTimeSeries : IFC_ClassEntity, IFCMetricValueSelect, IFCObjectReferenceSelect, Global.IFCTimeSeries
	{
		public virtual IFCLabel? Name { get; set; }
		public virtual IFCText? Description { get; set; }
		public virtual IFCDateTimeSelect? StartTime { get; set; }
		public virtual IFCDateTimeSelect? EndTime { get; set; }
		public virtual IFCTimeSeriesDataTypeEnum? TimeSeriesDataType { get; set; }
		public virtual IFCDataOriginEnum? DataOrigin { get; set; }
		public virtual IFCLabel? UserDefinedDataOrigin { get; set; }
		public virtual IFCUnit? Unit { get; set; }
		public IFC_Attributes<IFCTimeSeriesReferenceRelationship>? DocumentedBy {get{return new IFC_Attributes<IFCTimeSeriesReferenceRelationship>(Model?.GetItems<IFCTimeSeriesReferenceRelationship>().Where(x => x.ReferencedTimeSeries != null && x.ReferencedTimeSeries == this).ToList());}}
		public IFCTimeSeries() : base()
		{
		}
		public IFCTimeSeries(IFCLabel? Name, IFCText? Description, IFCDateTimeSelect? StartTime, IFCDateTimeSelect? EndTime, IFCTimeSeriesDataTypeEnum? TimeSeriesDataType, IFCDataOriginEnum? DataOrigin, IFCLabel? UserDefinedDataOrigin, IFCUnit? Unit) : base ()
		{
			this.Name = Name;
			this.Description = Description;
			this.StartTime = StartTime;
			this.EndTime = EndTime;
			this.TimeSeriesDataType = TimeSeriesDataType;
			this.DataOrigin = DataOrigin;
			this.UserDefinedDataOrigin = UserDefinedDataOrigin;
			this.Unit = Unit;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Name", Name},
				{"Description", Description},
				{"StartTime", StartTime},
				{"EndTime", EndTime},
				{"TimeSeriesDataType", TimeSeriesDataType},
				{"DataOrigin", DataOrigin},
				{"UserDefinedDataOrigin", UserDefinedDataOrigin},
				{"Unit", Unit}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"DocumentedBy", DocumentedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCLabel? _Name
		{
			get
			{
				return Name;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Name = val;
				}
				else if(value == null)
				{
					Name = null;
				}
			}
		}
		public virtual Global.IFCText? _Description
		{
			get
			{
				return Description;
			}
			set
			{
				if(value is IFCText val)
				{
					Description = val;
				}
				else if(value == null)
				{
					Description = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _StartTime
		{
			get
			{
				return StartTime;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					StartTime = val;
				}
				else if(value == null)
				{
					StartTime = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _EndTime
		{
			get
			{
				return EndTime;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					EndTime = val;
				}
				else if(value == null)
				{
					EndTime = null;
				}
			}
		}
		public virtual Global.IFCTimeSeriesDataTypeEnum? _TimeSeriesDataType
		{
			get
			{
				return TimeSeriesDataType;
			}
			set
			{
				if(value is IFCTimeSeriesDataTypeEnum val)
				{
					TimeSeriesDataType = val;
				}
				else if(value == null)
				{
					TimeSeriesDataType = null;
				}
			}
		}
		public virtual Global.IFCDataOriginEnum? _DataOrigin
		{
			get
			{
				return DataOrigin;
			}
			set
			{
				if(value is IFCDataOriginEnum val)
				{
					DataOrigin = val;
				}
				else if(value == null)
				{
					DataOrigin = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedDataOrigin
		{
			get
			{
				return UserDefinedDataOrigin;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedDataOrigin = val;
				}
				else if(value == null)
				{
					UserDefinedDataOrigin = null;
				}
			}
		}
		public virtual Global.IFCUnit? _Unit
		{
			get
			{
				return Unit;
			}
			set
			{
				if(value is IFCUnit val)
				{
					Unit = val;
				}
				else if(value == null)
				{
					Unit = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCTimeSeriesReferenceRelationship>? _DocumentedBy
		{
			get
			{
				if(DocumentedBy != null)
				{
					IFC_Attributes<Global.IFCTimeSeriesReferenceRelationship>? items = new IFC_Attributes<Global.IFCTimeSeriesReferenceRelationship>();
					foreach (IFCTimeSeriesReferenceRelationship item in DocumentedBy)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTimeSeriesReferenceRelationship;
	/// ReferencedTimeSeries : IfcTimeSeries;
	/// TimeSeriesReferences : SET [1:?] OF IfcDocumentSelect;
	/// END_ENTITY;
	/// <summary>
	public class IFCTimeSeriesReferenceRelationship : IFC_ClassEntity, Global.IFCTimeSeriesReferenceRelationship
	{
		public virtual IFCTimeSeries? ReferencedTimeSeries { get; set; }
		public virtual IFC_Attributes<IFCDocumentSelect>? TimeSeriesReferences { get; set; }
		public IFCTimeSeriesReferenceRelationship() : base()
		{
		}
		public IFCTimeSeriesReferenceRelationship(IFCTimeSeries? ReferencedTimeSeries, IFC_Attributes<IFCDocumentSelect>? TimeSeriesReferences) : base ()
		{
			this.ReferencedTimeSeries = ReferencedTimeSeries;
			this.TimeSeriesReferences = TimeSeriesReferences;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ReferencedTimeSeries", ReferencedTimeSeries},
				{"TimeSeriesReferences", TimeSeriesReferences}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCTimeSeries? _ReferencedTimeSeries
		{
			get
			{
				return ReferencedTimeSeries;
			}
			set
			{
				if(value is IFCTimeSeries val)
				{
					ReferencedTimeSeries = val;
				}
				else if(value == null)
				{
					ReferencedTimeSeries = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCDocumentSelect>? _TimeSeriesReferences
		{
			get
			{
				if(TimeSeriesReferences != null)
				{
					IFC_Attributes<Global.IFCDocumentSelect>? items = new IFC_Attributes<Global.IFCDocumentSelect>();
					foreach (IFCDocumentSelect item in TimeSeriesReferences)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					TimeSeriesReferences = null;
				}
				else
				{
					TimeSeriesReferences = new IFC_Attributes<IFCDocumentSelect>();
					foreach(var val in value)
					{
						if(val is IFCDocumentSelect v)
						{
							TimeSeriesReferences.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTimeSeriesSchedule
	/// SUBTYPE OF (IfcControl);
	/// ApplicableDates : OPTIONAL LIST [1:?] OF IfcDateTimeSelect;
	/// TimeSeriesScheduleType : IfcTimeSeriesScheduleTypeEnum;
	/// TimeSeries : IfcTimeSeries;
	/// WHERE
	/// WR41 : NOT(TimeSeriesScheduleType=IfcTimeSeriesScheduleTypeEnum.USERDEFINED) OR EXISTS(SELF\IfcObject.ObjectType);
	/// END_ENTITY;
	/// <summary>
	public class IFCTimeSeriesSchedule : IFCControl, Global.IFCTimeSeriesSchedule
	{
		public virtual IFC_Attributes<IFCDateTimeSelect>? ApplicableDates { get; set; }
		public virtual IFCTimeSeriesScheduleTypeEnum? TimeSeriesScheduleType { get; set; }
		public virtual IFCTimeSeries? TimeSeries { get; set; }
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public IFCTimeSeriesSchedule() : base()
		{
		}
		public IFCTimeSeriesSchedule(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFC_Attributes<IFCDateTimeSelect>? ApplicableDates, IFCTimeSeriesScheduleTypeEnum? TimeSeriesScheduleType, IFCTimeSeries? TimeSeries) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.ApplicableDates = ApplicableDates;
			this.TimeSeriesScheduleType = TimeSeriesScheduleType;
			this.TimeSeries = TimeSeries;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ApplicableDates", ApplicableDates},
				{"TimeSeriesScheduleType", TimeSeriesScheduleType},
				{"TimeSeries", TimeSeries}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual IFC_Attributes<Global.IFCDateTimeSelect>? _ApplicableDates
		{
			get
			{
				if(ApplicableDates != null)
				{
					IFC_Attributes<Global.IFCDateTimeSelect>? items = new IFC_Attributes<Global.IFCDateTimeSelect>();
					foreach (IFCDateTimeSelect item in ApplicableDates)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ApplicableDates = null;
				}
				else
				{
					ApplicableDates = new IFC_Attributes<IFCDateTimeSelect>();
					foreach(var val in value)
					{
						if(val is IFCDateTimeSelect v)
						{
							ApplicableDates.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCTimeSeriesScheduleTypeEnum? _TimeSeriesScheduleType
		{
			get
			{
				return TimeSeriesScheduleType;
			}
			set
			{
				if(value is IFCTimeSeriesScheduleTypeEnum val)
				{
					TimeSeriesScheduleType = val;
				}
				else if(value == null)
				{
					TimeSeriesScheduleType = null;
				}
			}
		}
		public virtual Global.IFCTimeSeries? _TimeSeries
		{
			get
			{
				return TimeSeries;
			}
			set
			{
				if(value is IFCTimeSeries val)
				{
					TimeSeries = val;
				}
				else if(value == null)
				{
					TimeSeries = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTimeSeriesValue;
	/// ListValues : LIST [1:?] OF IfcValue;
	/// END_ENTITY;
	/// <summary>
	public class IFCTimeSeriesValue : IFC_ClassEntity, Global.IFCTimeSeriesValue
	{
		public virtual IFC_Attributes<IFCValue>? ListValues { get; set; }
		public IFCTimeSeriesValue() : base()
		{
		}
		public IFCTimeSeriesValue(IFC_Attributes<IFCValue>? ListValues) : base ()
		{
			this.ListValues = ListValues;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ListValues", ListValues}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCValue>? _ListValues
		{
			get
			{
				if(ListValues != null)
				{
					IFC_Attributes<Global.IFCValue>? items = new IFC_Attributes<Global.IFCValue>();
					foreach (IFCValue item in ListValues)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					ListValues = null;
				}
				else
				{
					ListValues = new IFC_Attributes<IFCValue>();
					foreach(var val in value)
					{
						if(val is IFCValue v)
						{
							ListValues.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTopologicalRepresentationItem
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcConnectedFaceSet
	/// ,IfcEdge
	/// ,IfcFace
	/// ,IfcFaceBound
	/// ,IfcLoop
	/// ,IfcPath
	/// ,IfcVertex))
	/// SUBTYPE OF (IfcRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCTopologicalRepresentationItem : IFCRepresentationItem, Global.IFCTopologicalRepresentationItem
	{
		public IFCTopologicalRepresentationItem() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcTopologyRepresentation
	/// SUBTYPE OF (IfcShapeModel);
	/// WHERE
	/// WR21 : SIZEOF(QUERY(temp <* SELF\IfcRepresentation.Items |
	/// NOT('IFC2X3.IFCTOPOLOGICALREPRESENTATIONITEM' IN TYPEOF(temp))
	/// )) = 0;
	/// WR22 : EXISTS(SELF\IfcRepresentation.RepresentationType);
	/// WR23 : IfcTopologyRepresentationTypes(SELF\IfcRepresentation.RepresentationType, SELF\IfcRepresentation.Items);
	/// END_ENTITY;
	/// <summary>
	public class IFCTopologyRepresentation : IFCShapeModel, Global.IFCTopologyRepresentation
	{
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR23
		{
			get
			{
				return true;
			}
		}
		public IFCTopologyRepresentation() : base()
		{
		}
		public IFCTopologyRepresentation(IFCRepresentationContext? ContextOfItems, IFCLabel? RepresentationIdentifier, IFCLabel? RepresentationType, IFC_Attributes<IFCRepresentationItem>? Items) : base (ContextOfItems, RepresentationIdentifier, RepresentationType, Items)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ContextOfItems", ContextOfItems},
				{"RepresentationIdentifier", RepresentationIdentifier},
				{"RepresentationType", RepresentationType},
				{"Items", Items}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepresentationMap", RepresentationMap},
				{"LayerAssignments", LayerAssignments},
				{"OfProductRepresentation", OfProductRepresentation},
				{"OfShapeAspect", OfShapeAspect}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR11", is_WR11},
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22},
				{"is_WR23", is_WR23}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcTransformerType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcTransformerTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCTransformerType : IFCEnergyConversionDeviceType, Global.IFCTransformerType
	{
		public virtual IFCTransformerTypeEnum? PredefinedType { get; set; }
		public IFCTransformerType() : base()
		{
		}
		public IFCTransformerType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCTransformerTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCTransformerTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCTransformerTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTransportElement
	/// SUBTYPE OF (IfcElement);
	/// OperationType : OPTIONAL IfcTransportElementTypeEnum;
	/// CapacityByWeight : OPTIONAL IfcMassMeasure;
	/// CapacityByNumber : OPTIONAL IfcCountMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCTransportElement : IFCElement, Global.IFCTransportElement
	{
		public virtual IFCTransportElementTypeEnum? OperationType { get; set; }
		public virtual IFCMassMeasure? CapacityByWeight { get; set; }
		public virtual IFCCountMeasure? CapacityByNumber { get; set; }
		public IFCTransportElement() : base()
		{
		}
		public IFCTransportElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCTransportElementTypeEnum? OperationType, IFCMassMeasure? CapacityByWeight, IFCCountMeasure? CapacityByNumber) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.OperationType = OperationType;
			this.CapacityByWeight = CapacityByWeight;
			this.CapacityByNumber = CapacityByNumber;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"OperationType", OperationType},
				{"CapacityByWeight", CapacityByWeight},
				{"CapacityByNumber", CapacityByNumber}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCTransportElementTypeEnum? _OperationType
		{
			get
			{
				return OperationType;
			}
			set
			{
				if(value is IFCTransportElementTypeEnum val)
				{
					OperationType = val;
				}
				else if(value == null)
				{
					OperationType = null;
				}
			}
		}
		public virtual Global.IFCMassMeasure? _CapacityByWeight
		{
			get
			{
				return CapacityByWeight;
			}
			set
			{
				if(value is IFCMassMeasure val)
				{
					CapacityByWeight = val;
				}
				else if(value == null)
				{
					CapacityByWeight = null;
				}
			}
		}
		public virtual Global.IFCCountMeasure? _CapacityByNumber
		{
			get
			{
				return CapacityByNumber;
			}
			set
			{
				if(value is IFCCountMeasure val)
				{
					CapacityByNumber = val;
				}
				else if(value == null)
				{
					CapacityByNumber = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTransportElementType
	/// SUBTYPE OF (IfcElementType);
	/// PredefinedType : IfcTransportElementTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCTransportElementType : IFCElementType, Global.IFCTransportElementType
	{
		public virtual IFCTransportElementTypeEnum? PredefinedType { get; set; }
		public IFCTransportElementType() : base()
		{
		}
		public IFCTransportElementType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCTransportElementTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCTransportElementTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCTransportElementTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTrapeziumProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// BottomXDim : IfcPositiveLengthMeasure;
	/// TopXDim : IfcPositiveLengthMeasure;
	/// YDim : IfcPositiveLengthMeasure;
	/// TopXOffset : IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCTrapeziumProfileDef : IFCParameterizedProfileDef, Global.IFCTrapeziumProfileDef
	{
		public virtual IFCPositiveLengthMeasure? BottomXDim { get; set; }
		public virtual IFCPositiveLengthMeasure? TopXDim { get; set; }
		public virtual IFCPositiveLengthMeasure? YDim { get; set; }
		public virtual IFCLengthMeasure? TopXOffset { get; set; }
		public IFCTrapeziumProfileDef() : base()
		{
		}
		public IFCTrapeziumProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? BottomXDim, IFCPositiveLengthMeasure? TopXDim, IFCPositiveLengthMeasure? YDim, IFCLengthMeasure? TopXOffset) : base (ProfileType, ProfileName, Position)
		{
			this.BottomXDim = BottomXDim;
			this.TopXDim = TopXDim;
			this.YDim = YDim;
			this.TopXOffset = TopXOffset;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"BottomXDim", BottomXDim},
				{"TopXDim", TopXDim},
				{"YDim", YDim},
				{"TopXOffset", TopXOffset}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _BottomXDim
		{
			get
			{
				return BottomXDim;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					BottomXDim = val;
				}
				else if(value == null)
				{
					BottomXDim = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _TopXDim
		{
			get
			{
				return TopXDim;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					TopXDim = val;
				}
				else if(value == null)
				{
					TopXDim = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _YDim
		{
			get
			{
				return YDim;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					YDim = val;
				}
				else if(value == null)
				{
					YDim = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _TopXOffset
		{
			get
			{
				return TopXOffset;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					TopXOffset = val;
				}
				else if(value == null)
				{
					TopXOffset = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTrimmedCurve
	/// SUBTYPE OF (IfcBoundedCurve);
	/// BasisCurve : IfcCurve;
	/// Trim1 : SET [1:2] OF IfcTrimmingSelect;
	/// Trim2 : SET [1:2] OF IfcTrimmingSelect;
	/// SenseAgreement : BOOLEAN;
	/// MasterRepresentation : IfcTrimmingPreference;
	/// WHERE
	/// WR41 : (HIINDEX(Trim1) = 1) OR (TYPEOF(Trim1[1]) <> TYPEOF(Trim1[2]));
	/// WR42 : (HIINDEX(Trim2) = 1) OR (TYPEOF(Trim2[1]) <> TYPEOF(Trim2[2]));
	/// WR43 : NOT('IFC2X3.IFCBOUNDEDCURVE' IN TYPEOF(BasisCurve));
	/// END_ENTITY;
	/// <summary>
	public class IFCTrimmedCurve : IFCBoundedCurve, Global.IFCTrimmedCurve
	{
		public virtual IFCCurve? BasisCurve { get; set; }
		public virtual IFC_Attributes<IFCTrimmingSelect>? Trim1 { get; set; }
		public virtual IFC_Attributes<IFCTrimmingSelect>? Trim2 { get; set; }
		public virtual BOOLEAN? SenseAgreement { get; set; }
		public virtual IFCTrimmingPreference? MasterRepresentation { get; set; }
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR42
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR43
		{
			get
			{
				return true;
			}
		}
		public IFCTrimmedCurve() : base()
		{
		}
		public IFCTrimmedCurve(IFCCurve? BasisCurve, IFC_Attributes<IFCTrimmingSelect>? Trim1, IFC_Attributes<IFCTrimmingSelect>? Trim2, BOOLEAN? SenseAgreement, IFCTrimmingPreference? MasterRepresentation) : base ()
		{
			this.BasisCurve = BasisCurve;
			this.Trim1 = Trim1;
			this.Trim2 = Trim2;
			this.SenseAgreement = SenseAgreement;
			this.MasterRepresentation = MasterRepresentation;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"BasisCurve", BasisCurve},
				{"Trim1", Trim1},
				{"Trim2", Trim2},
				{"SenseAgreement", SenseAgreement},
				{"MasterRepresentation", MasterRepresentation}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR41", is_WR41},
				{"is_WR42", is_WR42},
				{"is_WR43", is_WR43}
			};
		}
		public virtual Global.IFCCurve? _BasisCurve
		{
			get
			{
				return BasisCurve;
			}
			set
			{
				if(value is IFCCurve val)
				{
					BasisCurve = val;
				}
				else if(value == null)
				{
					BasisCurve = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCTrimmingSelect>? _Trim1
		{
			get
			{
				if(Trim1 != null)
				{
					IFC_Attributes<Global.IFCTrimmingSelect>? items = new IFC_Attributes<Global.IFCTrimmingSelect>();
					foreach (IFCTrimmingSelect item in Trim1)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Trim1 = null;
				}
				else
				{
					Trim1 = new IFC_Attributes<IFCTrimmingSelect>();
					foreach(var val in value)
					{
						if(val is IFCTrimmingSelect v)
						{
							Trim1.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCTrimmingSelect>? _Trim2
		{
			get
			{
				if(Trim2 != null)
				{
					IFC_Attributes<Global.IFCTrimmingSelect>? items = new IFC_Attributes<Global.IFCTrimmingSelect>();
					foreach (IFCTrimmingSelect item in Trim2)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Trim2 = null;
				}
				else
				{
					Trim2 = new IFC_Attributes<IFCTrimmingSelect>();
					foreach(var val in value)
					{
						if(val is IFCTrimmingSelect v)
						{
							Trim2.Add(v);
						}
					}
				}
			}
		}
		public virtual BOOLEAN? _SenseAgreement
		{
			get
			{
				return SenseAgreement;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					SenseAgreement = val;
				}
				else if(value == null)
				{
					SenseAgreement = null;
				}
			}
		}
		public virtual Global.IFCTrimmingPreference? _MasterRepresentation
		{
			get
			{
				return MasterRepresentation;
			}
			set
			{
				if(value is IFCTrimmingPreference val)
				{
					MasterRepresentation = val;
				}
				else if(value == null)
				{
					MasterRepresentation = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTubeBundleType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcTubeBundleTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcTubeBundleTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcTubeBundleTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCTubeBundleType : IFCEnergyConversionDeviceType, Global.IFCTubeBundleType
	{
		public virtual IFCTubeBundleTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCTubeBundleType() : base()
		{
		}
		public IFCTubeBundleType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCTubeBundleTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCTubeBundleTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCTubeBundleTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTwoDirectionRepeatFactor
	/// SUBTYPE OF (IfcOneDirectionRepeatFactor);
	/// SecondRepeatFactor : IfcVector;
	/// END_ENTITY;
	/// <summary>
	public class IFCTwoDirectionRepeatFactor : IFCOneDirectionRepeatFactor, Global.IFCTwoDirectionRepeatFactor
	{
		public virtual IFCVector? SecondRepeatFactor { get; set; }
		public IFCTwoDirectionRepeatFactor() : base()
		{
		}
		public IFCTwoDirectionRepeatFactor(IFCVector? RepeatFactor, IFCVector? SecondRepeatFactor) : base (RepeatFactor)
		{
			this.SecondRepeatFactor = SecondRepeatFactor;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"RepeatFactor", RepeatFactor},
				{"SecondRepeatFactor", SecondRepeatFactor}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCVector? _SecondRepeatFactor
		{
			get
			{
				return SecondRepeatFactor;
			}
			set
			{
				if(value is IFCVector val)
				{
					SecondRepeatFactor = val;
				}
				else if(value == null)
				{
					SecondRepeatFactor = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTypeObject
	/// SUPERTYPE OF (ONEOF
	/// (IfcTypeProduct))
	/// SUBTYPE OF (IfcObjectDefinition);
	/// ApplicableOccurrence : OPTIONAL IfcLabel;
	/// HasPropertySets : OPTIONAL SET [1:?] OF IfcPropertySetDefinition;
	/// INVERSE
	/// ObjectTypeOf : SET [0:1] OF IfcRelDefinesByType FOR RelatingType;
	/// WHERE
	/// WR1 : EXISTS(SELF\IfcRoot.Name);
	/// END_ENTITY;
	/// <summary>
	public class IFCTypeObject : IFCObjectDefinition, Global.IFCTypeObject
	{
		public virtual IFCLabel? ApplicableOccurrence { get; set; }
		public virtual IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets { get; set; }
		public IFC_Attributes<IFCRelDefinesByType>? ObjectTypeOf {get{return new IFC_Attributes<IFCRelDefinesByType>(Model?.GetItems<IFCRelDefinesByType>().Where(x => x.RelatingType != null && x.RelatingType == this).ToList());}}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCTypeObject() : base()
		{
		}
		public IFCTypeObject(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.ApplicableOccurrence = ApplicableOccurrence;
			this.HasPropertySets = HasPropertySets;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCLabel? _ApplicableOccurrence
		{
			get
			{
				return ApplicableOccurrence;
			}
			set
			{
				if(value is IFCLabel val)
				{
					ApplicableOccurrence = val;
				}
				else if(value == null)
				{
					ApplicableOccurrence = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPropertySetDefinition>? _HasPropertySets
		{
			get
			{
				if(HasPropertySets != null)
				{
					IFC_Attributes<Global.IFCPropertySetDefinition>? items = new IFC_Attributes<Global.IFCPropertySetDefinition>();
					foreach (IFCPropertySetDefinition item in HasPropertySets)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					HasPropertySets = null;
				}
				else
				{
					HasPropertySets = new IFC_Attributes<IFCPropertySetDefinition>();
					foreach(var val in value)
					{
						if(val is IFCPropertySetDefinition v)
						{
							HasPropertySets.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCRelDefinesByType>? _ObjectTypeOf
		{
			get
			{
				if(ObjectTypeOf != null)
				{
					IFC_Attributes<Global.IFCRelDefinesByType>? items = new IFC_Attributes<Global.IFCRelDefinesByType>();
					foreach (IFCRelDefinesByType item in ObjectTypeOf)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcTypeProduct
	/// SUPERTYPE OF (ONEOF
	/// (IfcDoorStyle
	/// ,IfcElementType
	/// ,IfcWindowStyle))
	/// SUBTYPE OF (IfcTypeObject);
	/// RepresentationMaps : OPTIONAL LIST [1:?] OF UNIQUE IfcRepresentationMap;
	/// Tag : OPTIONAL IfcLabel;
	/// WHERE
	/// WR41 : NOT(EXISTS(SELF\IfcTypeObject.ObjectTypeOf[1])) OR
	/// (SIZEOF(QUERY(temp <* SELF\IfcTypeObject.ObjectTypeOf[1].RelatedObjects |
	/// NOT('IFC2X3.IFCPRODUCT' IN TYPEOF(temp)))
	/// ) = 0);
	/// END_ENTITY;
	/// <summary>
	public class IFCTypeProduct : IFCTypeObject, Global.IFCTypeProduct
	{
		public virtual IFC_Attributes<IFCRepresentationMap>? RepresentationMaps { get; set; }
		public virtual IFCLabel? Tag { get; set; }
		public virtual bool is_WR41
		{
			get
			{
				return true;
			}
		}
		public IFCTypeProduct() : base()
		{
		}
		public IFCTypeProduct(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets)
		{
			this.RepresentationMaps = RepresentationMaps;
			this.Tag = Tag;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual IFC_Attributes<Global.IFCRepresentationMap>? _RepresentationMaps
		{
			get
			{
				if(RepresentationMaps != null)
				{
					IFC_Attributes<Global.IFCRepresentationMap>? items = new IFC_Attributes<Global.IFCRepresentationMap>();
					foreach (IFCRepresentationMap item in RepresentationMaps)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					RepresentationMaps = null;
				}
				else
				{
					RepresentationMaps = new IFC_Attributes<IFCRepresentationMap>();
					foreach(var val in value)
					{
						if(val is IFCRepresentationMap v)
						{
							RepresentationMaps.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _Tag
		{
			get
			{
				return Tag;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Tag = val;
				}
				else if(value == null)
				{
					Tag = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcUShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// FlangeWidth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// EdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// FlangeSlope : OPTIONAL IfcPlaneAngleMeasure;
	/// CentreOfGravityInX : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR21 : FlangeThickness < (Depth / 2.);
	/// WR22 : WebThickness < FlangeWidth;
	/// END_ENTITY;
	/// <summary>
	public class IFCUShapeProfileDef : IFCParameterizedProfileDef, Global.IFCUShapeProfileDef
	{
		public virtual IFCPositiveLengthMeasure? Depth { get; set; }
		public virtual IFCPositiveLengthMeasure? FlangeWidth { get; set; }
		public virtual IFCPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? FilletRadius { get; set; }
		public virtual IFCPositiveLengthMeasure? EdgeRadius { get; set; }
		public virtual IFCPlaneAngleMeasure? FlangeSlope { get; set; }
		public virtual IFCPositiveLengthMeasure? CentreOfGravityInX { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR22
		{
			get
			{
				return true;
			}
		}
		public IFCUShapeProfileDef() : base()
		{
		}
		public IFCUShapeProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? Depth, IFCPositiveLengthMeasure? FlangeWidth, IFCPositiveLengthMeasure? WebThickness, IFCPositiveLengthMeasure? FlangeThickness, IFCPositiveLengthMeasure? FilletRadius, IFCPositiveLengthMeasure? EdgeRadius, IFCPlaneAngleMeasure? FlangeSlope, IFCPositiveLengthMeasure? CentreOfGravityInX) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
			this.FlangeSlope = FlangeSlope;
			this.CentreOfGravityInX = CentreOfGravityInX;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"Depth", Depth},
				{"FlangeWidth", FlangeWidth},
				{"WebThickness", WebThickness},
				{"FlangeThickness", FlangeThickness},
				{"FilletRadius", FilletRadius},
				{"EdgeRadius", EdgeRadius},
				{"FlangeSlope", FlangeSlope},
				{"CentreOfGravityInX", CentreOfGravityInX}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21},
				{"is_WR22", is_WR22}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FlangeWidth
		{
			get
			{
				return FlangeWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FlangeWidth = val;
				}
				else if(value == null)
				{
					FlangeWidth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _WebThickness
		{
			get
			{
				return WebThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					WebThickness = val;
				}
				else if(value == null)
				{
					WebThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FlangeThickness
		{
			get
			{
				return FlangeThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FlangeThickness = val;
				}
				else if(value == null)
				{
					FlangeThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FilletRadius
		{
			get
			{
				return FilletRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FilletRadius = val;
				}
				else if(value == null)
				{
					FilletRadius = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _EdgeRadius
		{
			get
			{
				return EdgeRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					EdgeRadius = val;
				}
				else if(value == null)
				{
					EdgeRadius = null;
				}
			}
		}
		public virtual Global.IFCPlaneAngleMeasure? _FlangeSlope
		{
			get
			{
				return FlangeSlope;
			}
			set
			{
				if(value is IFCPlaneAngleMeasure val)
				{
					FlangeSlope = val;
				}
				else if(value == null)
				{
					FlangeSlope = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _CentreOfGravityInX
		{
			get
			{
				return CentreOfGravityInX;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					CentreOfGravityInX = val;
				}
				else if(value == null)
				{
					CentreOfGravityInX = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcUnitAssignment;
	/// Units : SET [1:?] OF IfcUnit;
	/// WHERE
	/// WR01 : IfcCorrectUnitAssignment(Units);
	/// END_ENTITY;
	/// <summary>
	public class IFCUnitAssignment : IFC_ClassEntity, Global.IFCUnitAssignment
	{
		public virtual IFC_Attributes<IFCUnit>? Units { get; set; }
		public virtual bool is_WR01
		{
			get
			{
				return true;
			}
		}
		public IFCUnitAssignment() : base()
		{
		}
		public IFCUnitAssignment(IFC_Attributes<IFCUnit>? Units) : base ()
		{
			this.Units = Units;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Units", Units}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR01", is_WR01}
			};
		}
		public virtual IFC_Attributes<Global.IFCUnit>? _Units
		{
			get
			{
				if(Units != null)
				{
					IFC_Attributes<Global.IFCUnit>? items = new IFC_Attributes<Global.IFCUnit>();
					foreach (IFCUnit item in Units)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Units = null;
				}
				else
				{
					Units = new IFC_Attributes<IFCUnit>();
					foreach(var val in value)
					{
						if(val is IFCUnit v)
						{
							Units.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcUnitaryEquipmentType
	/// SUBTYPE OF (IfcEnergyConversionDeviceType);
	/// PredefinedType : IfcUnitaryEquipmentTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcUnitaryEquipmentTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcUnitaryEquipmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCUnitaryEquipmentType : IFCEnergyConversionDeviceType, Global.IFCUnitaryEquipmentType
	{
		public virtual IFCUnitaryEquipmentTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCUnitaryEquipmentType() : base()
		{
		}
		public IFCUnitaryEquipmentType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCUnitaryEquipmentTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCUnitaryEquipmentTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCUnitaryEquipmentTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcValveType
	/// SUBTYPE OF (IfcFlowControllerType);
	/// PredefinedType : IfcValveTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcValveTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcValveTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCValveType : IFCFlowControllerType, Global.IFCValveType
	{
		public virtual IFCValveTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCValveType() : base()
		{
		}
		public IFCValveType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCValveTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCValveTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCValveTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVector
	/// SUBTYPE OF (IfcGeometricRepresentationItem);
	/// Orientation : IfcDirection;
	/// Magnitude : IfcLengthMeasure;
	/// DERIVE
	/// Dim : IfcDimensionCount := Orientation.Dim;
	/// WHERE
	/// WR1 : Magnitude >= 0.0;
	/// END_ENTITY;
	/// <summary>
	public class IFCVector : IFCGeometricRepresentationItem, IFCVectorOrDirection, Global.IFCVector
	{
		public virtual IFCDirection? Orientation { get; set; }
		public virtual IFCLengthMeasure? Magnitude { get; set; }
		public virtual IFCDimensionCount? Dim
		{
			get
			{
				//MANUAL : IFC2x3.IFCVector.Dim
				// Orientation.Dim;
				return null;
				//END_MANUAL
			}
		}
		public virtual bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCVector() : base()
		{
		}
		public IFCVector(IFCDirection? Orientation, IFCLengthMeasure? Magnitude) : base ()
		{
			this.Orientation = Orientation;
			this.Magnitude = Magnitude;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Orientation", Orientation},
				{"Magnitude", Magnitude}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Dim", Dim}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCDirection? _Orientation
		{
			get
			{
				return Orientation;
			}
			set
			{
				if(value is IFCDirection val)
				{
					Orientation = val;
				}
				else if(value == null)
				{
					Orientation = null;
				}
			}
		}
		public virtual Global.IFCLengthMeasure? _Magnitude
		{
			get
			{
				return Magnitude;
			}
			set
			{
				if(value is IFCLengthMeasure val)
				{
					Magnitude = val;
				}
				else if(value == null)
				{
					Magnitude = null;
				}
			}
		}
		public virtual Global.IFCDimensionCount? _Dim
		{
			get
			{
				return Dim;
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVertex
	/// SUPERTYPE OF (ONEOF
	/// (IfcVertexPoint))
	/// SUBTYPE OF (IfcTopologicalRepresentationItem);
	/// END_ENTITY;
	/// <summary>
	public class IFCVertex : IFCTopologicalRepresentationItem, Global.IFCVertex
	{
		public IFCVertex() : base()
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
	}
	/// <summary>
	/// ENTITY IfcVertexBasedTextureMap;
	/// TextureVertices : LIST [3:?] OF IfcTextureVertex;
	/// TexturePoints : LIST [3:?] OF IfcCartesianPoint;
	/// END_ENTITY;
	/// <summary>
	public class IFCVertexBasedTextureMap : IFC_ClassEntity, Global.IFCVertexBasedTextureMap
	{
		public virtual IFC_Attributes<IFCTextureVertex>? TextureVertices { get; set; }
		public virtual IFC_Attributes<IFCCartesianPoint>? TexturePoints { get; set; }
		public IFCVertexBasedTextureMap() : base()
		{
		}
		public IFCVertexBasedTextureMap(IFC_Attributes<IFCTextureVertex>? TextureVertices, IFC_Attributes<IFCCartesianPoint>? TexturePoints) : base ()
		{
			this.TextureVertices = TextureVertices;
			this.TexturePoints = TexturePoints;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"TextureVertices", TextureVertices},
				{"TexturePoints", TexturePoints}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCTextureVertex>? _TextureVertices
		{
			get
			{
				if(TextureVertices != null)
				{
					IFC_Attributes<Global.IFCTextureVertex>? items = new IFC_Attributes<Global.IFCTextureVertex>();
					foreach (IFCTextureVertex item in TextureVertices)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					TextureVertices = null;
				}
				else
				{
					TextureVertices = new IFC_Attributes<IFCTextureVertex>();
					foreach(var val in value)
					{
						if(val is IFCTextureVertex v)
						{
							TextureVertices.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCCartesianPoint>? _TexturePoints
		{
			get
			{
				if(TexturePoints != null)
				{
					IFC_Attributes<Global.IFCCartesianPoint>? items = new IFC_Attributes<Global.IFCCartesianPoint>();
					foreach (IFCCartesianPoint item in TexturePoints)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					TexturePoints = null;
				}
				else
				{
					TexturePoints = new IFC_Attributes<IFCCartesianPoint>();
					foreach(var val in value)
					{
						if(val is IFCCartesianPoint v)
						{
							TexturePoints.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVertexLoop
	/// SUBTYPE OF (IfcLoop);
	/// LoopVertex : IfcVertex;
	/// END_ENTITY;
	/// <summary>
	public class IFCVertexLoop : IFCLoop, Global.IFCVertexLoop
	{
		public virtual IFCVertex? LoopVertex { get; set; }
		public IFCVertexLoop() : base()
		{
		}
		public IFCVertexLoop(IFCVertex? LoopVertex) : base ()
		{
			this.LoopVertex = LoopVertex;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LoopVertex", LoopVertex}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCVertex? _LoopVertex
		{
			get
			{
				return LoopVertex;
			}
			set
			{
				if(value is IFCVertex val)
				{
					LoopVertex = val;
				}
				else if(value == null)
				{
					LoopVertex = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVertexPoint
	/// SUBTYPE OF (IfcVertex);
	/// VertexGeometry : IfcPoint;
	/// END_ENTITY;
	/// <summary>
	public class IFCVertexPoint : IFCVertex, IFCPointOrVertexPoint, Global.IFCVertexPoint
	{
		public virtual IFCPoint? VertexGeometry { get; set; }
		public IFCVertexPoint() : base()
		{
		}
		public IFCVertexPoint(IFCPoint? VertexGeometry) : base ()
		{
			this.VertexGeometry = VertexGeometry;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"VertexGeometry", VertexGeometry}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"LayerAssignments", LayerAssignments},
				{"StyledByItem", StyledByItem}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCPoint? _VertexGeometry
		{
			get
			{
				return VertexGeometry;
			}
			set
			{
				if(value is IFCPoint val)
				{
					VertexGeometry = val;
				}
				else if(value == null)
				{
					VertexGeometry = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVibrationIsolatorType
	/// SUBTYPE OF (IfcDiscreteAccessoryType);
	/// PredefinedType : IfcVibrationIsolatorTypeEnum;
	/// WHERE
	/// WR1 : (PredefinedType <> IfcVibrationIsolatorTypeEnum.USERDEFINED) OR
	/// ((PredefinedType = IfcVibrationIsolatorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcElementType.ElementType));
	/// END_ENTITY;
	/// <summary>
	public class IFCVibrationIsolatorType : IFCDiscreteAccessoryType, Global.IFCVibrationIsolatorType
	{
		public virtual IFCVibrationIsolatorTypeEnum? PredefinedType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCVibrationIsolatorType() : base()
		{
		}
		public IFCVibrationIsolatorType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCVibrationIsolatorTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCVibrationIsolatorTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCVibrationIsolatorTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcVirtualElement
	/// SUBTYPE OF (IfcElement);
	/// END_ENTITY;
	/// <summary>
	public class IFCVirtualElement : IFCElement, Global.IFCVirtualElement
	{
		public IFCVirtualElement() : base()
		{
		}
		public IFCVirtualElement(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcVirtualGridIntersection;
	/// IntersectingAxes : LIST [2:2] OF UNIQUE IfcGridAxis;
	/// OffsetDistances : LIST [2:3] OF IfcLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCVirtualGridIntersection : IFC_ClassEntity, Global.IFCVirtualGridIntersection
	{
		public virtual IFC_Attributes<IFCGridAxis>? IntersectingAxes { get; set; }
		public virtual IFC_Attributes<IFCLengthMeasure>? OffsetDistances { get; set; }
		public IFCVirtualGridIntersection() : base()
		{
		}
		public IFCVirtualGridIntersection(IFC_Attributes<IFCGridAxis>? IntersectingAxes, IFC_Attributes<IFCLengthMeasure>? OffsetDistances) : base ()
		{
			this.IntersectingAxes = IntersectingAxes;
			this.OffsetDistances = OffsetDistances;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"IntersectingAxes", IntersectingAxes},
				{"OffsetDistances", OffsetDistances}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual IFC_Attributes<Global.IFCGridAxis>? _IntersectingAxes
		{
			get
			{
				if(IntersectingAxes != null)
				{
					IFC_Attributes<Global.IFCGridAxis>? items = new IFC_Attributes<Global.IFCGridAxis>();
					foreach (IFCGridAxis item in IntersectingAxes)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					IntersectingAxes = null;
				}
				else
				{
					IntersectingAxes = new IFC_Attributes<IFCGridAxis>();
					foreach(var val in value)
					{
						if(val is IFCGridAxis v)
						{
							IntersectingAxes.Add(v);
						}
					}
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCLengthMeasure>? _OffsetDistances
		{
			get
			{
				if(OffsetDistances != null)
				{
					IFC_Attributes<Global.IFCLengthMeasure>? items = new IFC_Attributes<Global.IFCLengthMeasure>();
					foreach (IFCLengthMeasure item in OffsetDistances)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					OffsetDistances = null;
				}
				else
				{
					OffsetDistances = new IFC_Attributes<IFCLengthMeasure>();
					foreach(var val in value)
					{
						if(val is IFCLengthMeasure v)
						{
							OffsetDistances.Add(v);
						}
					}
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWall
	/// SUPERTYPE OF (ONEOF
	/// (IfcWallStandardCase))
	/// SUBTYPE OF (IfcBuildingElement);
	/// WHERE
	/// WR1 : SIZEOF (QUERY(temp <* SELF\IfcObjectDefinition.HasAssociations |
	/// 'IFC2X3.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)
	/// )) <= 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCWall : IFCBuildingElement, Global.IFCWall
	{
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCWall() : base()
		{
		}
		public IFCWall(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcWallStandardCase
	/// SUBTYPE OF (IfcWall);
	/// WHERE
	/// WR1 : SIZEOF (QUERY(temp <* USEDIN(SELF, 'IFC2X3.IFCRELASSOCIATES.RELATEDOBJECTS') |
	/// ('IFC2X3.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)) AND
	/// ('IFC2X3.IFCMATERIALLAYERSETUSAGE' IN TYPEOF(temp.RelatingMaterial))
	/// )) = 1;
	/// END_ENTITY;
	/// <summary>
	public class IFCWallStandardCase : IFCWall, Global.IFCWallStandardCase
	{
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCWallStandardCase() : base()
		{
		}
		public IFCWallStandardCase(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcWallType
	/// SUBTYPE OF (IfcBuildingElementType);
	/// PredefinedType : IfcWallTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCWallType : IFCBuildingElementType, Global.IFCWallType
	{
		public virtual IFCWallTypeEnum? PredefinedType { get; set; }
		public IFCWallType() : base()
		{
		}
		public IFCWallType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCWallTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCWallTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCWallTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWasteTerminalType
	/// SUBTYPE OF (IfcFlowTerminalType);
	/// PredefinedType : IfcWasteTerminalTypeEnum;
	/// END_ENTITY;
	/// <summary>
	public class IFCWasteTerminalType : IFCFlowTerminalType, Global.IFCWasteTerminalType
	{
		public virtual IFCWasteTerminalTypeEnum? PredefinedType { get; set; }
		public IFCWasteTerminalType() : base()
		{
		}
		public IFCWasteTerminalType(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCLabel? ElementType, IFCWasteTerminalTypeEnum? PredefinedType) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType)
		{
			this.PredefinedType = PredefinedType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ElementType", ElementType},
				{"PredefinedType", PredefinedType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCWasteTerminalTypeEnum? _PredefinedType
		{
			get
			{
				return PredefinedType;
			}
			set
			{
				if(value is IFCWasteTerminalTypeEnum val)
				{
					PredefinedType = val;
				}
				else if(value == null)
				{
					PredefinedType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWaterProperties
	/// SUBTYPE OF (IfcMaterialProperties);
	/// IsPotable : OPTIONAL BOOLEAN;
	/// Hardness : OPTIONAL IfcIonConcentrationMeasure;
	/// AlkalinityConcentration : OPTIONAL IfcIonConcentrationMeasure;
	/// AcidityConcentration : OPTIONAL IfcIonConcentrationMeasure;
	/// ImpuritiesContent : OPTIONAL IfcNormalisedRatioMeasure;
	/// PHLevel : OPTIONAL IfcPHMeasure;
	/// DissolvedSolidsContent : OPTIONAL IfcNormalisedRatioMeasure;
	/// UNIQUE
	/// UR11 : Material;
	/// END_ENTITY;
	/// <summary>
	public class IFCWaterProperties : IFCMaterialProperties, Global.IFCWaterProperties
	{
		public virtual BOOLEAN? IsPotable { get; set; }
		public virtual IFCIonConcentrationMeasure? Hardness { get; set; }
		public virtual IFCIonConcentrationMeasure? AlkalinityConcentration { get; set; }
		public virtual IFCIonConcentrationMeasure? AcidityConcentration { get; set; }
		public virtual IFCNormalisedRatioMeasure? ImpuritiesContent { get; set; }
		public virtual IFCPHMeasure? PHLevel { get; set; }
		public virtual IFCNormalisedRatioMeasure? DissolvedSolidsContent { get; set; }
		public IFCWaterProperties() : base()
		{
		}
		public IFCWaterProperties(IFCMaterial? Material, BOOLEAN? IsPotable, IFCIonConcentrationMeasure? Hardness, IFCIonConcentrationMeasure? AlkalinityConcentration, IFCIonConcentrationMeasure? AcidityConcentration, IFCNormalisedRatioMeasure? ImpuritiesContent, IFCPHMeasure? PHLevel, IFCNormalisedRatioMeasure? DissolvedSolidsContent) : base (Material)
		{
			this.IsPotable = IsPotable;
			this.Hardness = Hardness;
			this.AlkalinityConcentration = AlkalinityConcentration;
			this.AcidityConcentration = AcidityConcentration;
			this.ImpuritiesContent = ImpuritiesContent;
			this.PHLevel = PHLevel;
			this.DissolvedSolidsContent = DissolvedSolidsContent;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"Material", Material},
				{"IsPotable", IsPotable},
				{"Hardness", Hardness},
				{"AlkalinityConcentration", AlkalinityConcentration},
				{"AcidityConcentration", AcidityConcentration},
				{"ImpuritiesContent", ImpuritiesContent},
				{"PHLevel", PHLevel},
				{"DissolvedSolidsContent", DissolvedSolidsContent}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual BOOLEAN? _IsPotable
		{
			get
			{
				return IsPotable;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					IsPotable = val;
				}
				else if(value == null)
				{
					IsPotable = null;
				}
			}
		}
		public virtual Global.IFCIonConcentrationMeasure? _Hardness
		{
			get
			{
				return Hardness;
			}
			set
			{
				if(value is IFCIonConcentrationMeasure val)
				{
					Hardness = val;
				}
				else if(value == null)
				{
					Hardness = null;
				}
			}
		}
		public virtual Global.IFCIonConcentrationMeasure? _AlkalinityConcentration
		{
			get
			{
				return AlkalinityConcentration;
			}
			set
			{
				if(value is IFCIonConcentrationMeasure val)
				{
					AlkalinityConcentration = val;
				}
				else if(value == null)
				{
					AlkalinityConcentration = null;
				}
			}
		}
		public virtual Global.IFCIonConcentrationMeasure? _AcidityConcentration
		{
			get
			{
				return AcidityConcentration;
			}
			set
			{
				if(value is IFCIonConcentrationMeasure val)
				{
					AcidityConcentration = val;
				}
				else if(value == null)
				{
					AcidityConcentration = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _ImpuritiesContent
		{
			get
			{
				return ImpuritiesContent;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					ImpuritiesContent = val;
				}
				else if(value == null)
				{
					ImpuritiesContent = null;
				}
			}
		}
		public virtual Global.IFCPHMeasure? _PHLevel
		{
			get
			{
				return PHLevel;
			}
			set
			{
				if(value is IFCPHMeasure val)
				{
					PHLevel = val;
				}
				else if(value == null)
				{
					PHLevel = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _DissolvedSolidsContent
		{
			get
			{
				return DissolvedSolidsContent;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					DissolvedSolidsContent = val;
				}
				else if(value == null)
				{
					DissolvedSolidsContent = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWindow
	/// SUBTYPE OF (IfcBuildingElement);
	/// OverallHeight : OPTIONAL IfcPositiveLengthMeasure;
	/// OverallWidth : OPTIONAL IfcPositiveLengthMeasure;
	/// END_ENTITY;
	/// <summary>
	public class IFCWindow : IFCBuildingElement, Global.IFCWindow
	{
		public virtual IFCPositiveLengthMeasure? OverallHeight { get; set; }
		public virtual IFCPositiveLengthMeasure? OverallWidth { get; set; }
		public IFCWindow() : base()
		{
		}
		public IFCWindow(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCObjectPlacement? ObjectPlacement, IFCProductRepresentation? Representation, IFCIdentifier? Tag, IFCPositiveLengthMeasure? OverallHeight, IFCPositiveLengthMeasure? OverallWidth) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag)
		{
			this.OverallHeight = OverallHeight;
			this.OverallWidth = OverallWidth;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"ObjectPlacement", ObjectPlacement},
				{"Representation", Representation},
				{"Tag", Tag},
				{"OverallHeight", OverallHeight},
				{"OverallWidth", OverallWidth}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"ReferencedBy", ReferencedBy},
				{"HasStructuralMember", HasStructuralMember},
				{"FillsVoids", FillsVoids},
				{"ConnectedTo", ConnectedTo},
				{"HasCoverings", HasCoverings},
				{"HasProjections", HasProjections},
				{"ReferencedInStructures", ReferencedInStructures},
				{"HasPorts", HasPorts},
				{"HasOpenings", HasOpenings},
				{"IsConnectionRealization", IsConnectionRealization},
				{"ProvidesBoundaries", ProvidesBoundaries},
				{"ConnectedFrom", ConnectedFrom},
				{"ContainedInStructure", ContainedInStructure}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _OverallHeight
		{
			get
			{
				return OverallHeight;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					OverallHeight = val;
				}
				else if(value == null)
				{
					OverallHeight = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _OverallWidth
		{
			get
			{
				return OverallWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					OverallWidth = val;
				}
				else if(value == null)
				{
					OverallWidth = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWindowLiningProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// LiningDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// LiningThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// TransomThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// MullionThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// FirstTransomOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// SecondTransomOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// FirstMullionOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// SecondMullionOffset : OPTIONAL IfcNormalisedRatioMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// WHERE
	/// WR31 : NOT(NOT(EXISTS(LiningDepth)) AND EXISTS(LiningThickness));
	/// WR32 : NOT(NOT(EXISTS(FirstTransomOffset)) AND EXISTS(SecondTransomOffset));
	/// WR33 : NOT(NOT(EXISTS(FirstMullionOffset)) AND EXISTS(SecondMullionOffset));
	/// WR34 : EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]) AND
	/// ('IFC2X3.IFCWINDOWSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]));
	/// END_ENTITY;
	/// <summary>
	public class IFCWindowLiningProperties : IFCPropertySetDefinition, Global.IFCWindowLiningProperties
	{
		public virtual IFCPositiveLengthMeasure? LiningDepth { get; set; }
		public virtual IFCPositiveLengthMeasure? LiningThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? TransomThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? MullionThickness { get; set; }
		public virtual IFCNormalisedRatioMeasure? FirstTransomOffset { get; set; }
		public virtual IFCNormalisedRatioMeasure? SecondTransomOffset { get; set; }
		public virtual IFCNormalisedRatioMeasure? FirstMullionOffset { get; set; }
		public virtual IFCNormalisedRatioMeasure? SecondMullionOffset { get; set; }
		public virtual IFCShapeAspect? ShapeAspectStyle { get; set; }
		public virtual bool is_WR31
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR32
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR33
		{
			get
			{
				return true;
			}
		}
		public virtual bool is_WR34
		{
			get
			{
				return true;
			}
		}
		public IFCWindowLiningProperties() : base()
		{
		}
		public IFCWindowLiningProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCPositiveLengthMeasure? LiningDepth, IFCPositiveLengthMeasure? LiningThickness, IFCPositiveLengthMeasure? TransomThickness, IFCPositiveLengthMeasure? MullionThickness, IFCNormalisedRatioMeasure? FirstTransomOffset, IFCNormalisedRatioMeasure? SecondTransomOffset, IFCNormalisedRatioMeasure? FirstMullionOffset, IFCNormalisedRatioMeasure? SecondMullionOffset, IFCShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.LiningDepth = LiningDepth;
			this.LiningThickness = LiningThickness;
			this.TransomThickness = TransomThickness;
			this.MullionThickness = MullionThickness;
			this.FirstTransomOffset = FirstTransomOffset;
			this.SecondTransomOffset = SecondTransomOffset;
			this.FirstMullionOffset = FirstMullionOffset;
			this.SecondMullionOffset = SecondMullionOffset;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"LiningDepth", LiningDepth},
				{"LiningThickness", LiningThickness},
				{"TransomThickness", TransomThickness},
				{"MullionThickness", MullionThickness},
				{"FirstTransomOffset", FirstTransomOffset},
				{"SecondTransomOffset", SecondTransomOffset},
				{"FirstMullionOffset", FirstMullionOffset},
				{"SecondMullionOffset", SecondMullionOffset},
				{"ShapeAspectStyle", ShapeAspectStyle}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR31", is_WR31},
				{"is_WR32", is_WR32},
				{"is_WR33", is_WR33},
				{"is_WR34", is_WR34}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _LiningDepth
		{
			get
			{
				return LiningDepth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					LiningDepth = val;
				}
				else if(value == null)
				{
					LiningDepth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _LiningThickness
		{
			get
			{
				return LiningThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					LiningThickness = val;
				}
				else if(value == null)
				{
					LiningThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _TransomThickness
		{
			get
			{
				return TransomThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					TransomThickness = val;
				}
				else if(value == null)
				{
					TransomThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _MullionThickness
		{
			get
			{
				return MullionThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					MullionThickness = val;
				}
				else if(value == null)
				{
					MullionThickness = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _FirstTransomOffset
		{
			get
			{
				return FirstTransomOffset;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					FirstTransomOffset = val;
				}
				else if(value == null)
				{
					FirstTransomOffset = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _SecondTransomOffset
		{
			get
			{
				return SecondTransomOffset;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					SecondTransomOffset = val;
				}
				else if(value == null)
				{
					SecondTransomOffset = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _FirstMullionOffset
		{
			get
			{
				return FirstMullionOffset;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					FirstMullionOffset = val;
				}
				else if(value == null)
				{
					FirstMullionOffset = null;
				}
			}
		}
		public virtual Global.IFCNormalisedRatioMeasure? _SecondMullionOffset
		{
			get
			{
				return SecondMullionOffset;
			}
			set
			{
				if(value is IFCNormalisedRatioMeasure val)
				{
					SecondMullionOffset = val;
				}
				else if(value == null)
				{
					SecondMullionOffset = null;
				}
			}
		}
		public virtual Global.IFCShapeAspect? _ShapeAspectStyle
		{
			get
			{
				return ShapeAspectStyle;
			}
			set
			{
				if(value is IFCShapeAspect val)
				{
					ShapeAspectStyle = val;
				}
				else if(value == null)
				{
					ShapeAspectStyle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWindowPanelProperties
	/// SUBTYPE OF (IfcPropertySetDefinition);
	/// OperationType : IfcWindowPanelOperationEnum;
	/// PanelPosition : IfcWindowPanelPositionEnum;
	/// FrameDepth : OPTIONAL IfcPositiveLengthMeasure;
	/// FrameThickness : OPTIONAL IfcPositiveLengthMeasure;
	/// ShapeAspectStyle : OPTIONAL IfcShapeAspect;
	/// END_ENTITY;
	/// <summary>
	public class IFCWindowPanelProperties : IFCPropertySetDefinition, Global.IFCWindowPanelProperties
	{
		public virtual IFCWindowPanelOperationEnum? OperationType { get; set; }
		public virtual IFCWindowPanelPositionEnum? PanelPosition { get; set; }
		public virtual IFCPositiveLengthMeasure? FrameDepth { get; set; }
		public virtual IFCPositiveLengthMeasure? FrameThickness { get; set; }
		public virtual IFCShapeAspect? ShapeAspectStyle { get; set; }
		public IFCWindowPanelProperties() : base()
		{
		}
		public IFCWindowPanelProperties(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCWindowPanelOperationEnum? OperationType, IFCWindowPanelPositionEnum? PanelPosition, IFCPositiveLengthMeasure? FrameDepth, IFCPositiveLengthMeasure? FrameThickness, IFCShapeAspect? ShapeAspectStyle) : base (GlobalId, OwnerHistory, Name, Description)
		{
			this.OperationType = OperationType;
			this.PanelPosition = PanelPosition;
			this.FrameDepth = FrameDepth;
			this.FrameThickness = FrameThickness;
			this.ShapeAspectStyle = ShapeAspectStyle;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"OperationType", OperationType},
				{"PanelPosition", PanelPosition},
				{"FrameDepth", FrameDepth},
				{"FrameThickness", FrameThickness},
				{"ShapeAspectStyle", ShapeAspectStyle}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssociations", HasAssociations},
				{"PropertyDefinitionOf", PropertyDefinitionOf},
				{"DefinesType", DefinesType}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
			};
		}
		public virtual Global.IFCWindowPanelOperationEnum? _OperationType
		{
			get
			{
				return OperationType;
			}
			set
			{
				if(value is IFCWindowPanelOperationEnum val)
				{
					OperationType = val;
				}
				else if(value == null)
				{
					OperationType = null;
				}
			}
		}
		public virtual Global.IFCWindowPanelPositionEnum? _PanelPosition
		{
			get
			{
				return PanelPosition;
			}
			set
			{
				if(value is IFCWindowPanelPositionEnum val)
				{
					PanelPosition = val;
				}
				else if(value == null)
				{
					PanelPosition = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FrameDepth
		{
			get
			{
				return FrameDepth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FrameDepth = val;
				}
				else if(value == null)
				{
					FrameDepth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FrameThickness
		{
			get
			{
				return FrameThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FrameThickness = val;
				}
				else if(value == null)
				{
					FrameThickness = null;
				}
			}
		}
		public virtual Global.IFCShapeAspect? _ShapeAspectStyle
		{
			get
			{
				return ShapeAspectStyle;
			}
			set
			{
				if(value is IFCShapeAspect val)
				{
					ShapeAspectStyle = val;
				}
				else if(value == null)
				{
					ShapeAspectStyle = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWindowStyle
	/// SUBTYPE OF (IfcTypeProduct);
	/// ConstructionType : IfcWindowStyleConstructionEnum;
	/// OperationType : IfcWindowStyleOperationEnum;
	/// ParameterTakesPrecedence : BOOLEAN;
	/// Sizeable : BOOLEAN;
	/// END_ENTITY;
	/// <summary>
	public class IFCWindowStyle : IFCTypeProduct, Global.IFCWindowStyle
	{
		public virtual IFCWindowStyleConstructionEnum? ConstructionType { get; set; }
		public virtual IFCWindowStyleOperationEnum? OperationType { get; set; }
		public virtual BOOLEAN? ParameterTakesPrecedence { get; set; }
		public virtual BOOLEAN? Sizeable { get; set; }
		public IFCWindowStyle() : base()
		{
		}
		public IFCWindowStyle(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ApplicableOccurrence, IFC_Attributes<IFCPropertySetDefinition>? HasPropertySets, IFC_Attributes<IFCRepresentationMap>? RepresentationMaps, IFCLabel? Tag, IFCWindowStyleConstructionEnum? ConstructionType, IFCWindowStyleOperationEnum? OperationType, BOOLEAN? ParameterTakesPrecedence, BOOLEAN? Sizeable) : base (GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag)
		{
			this.ConstructionType = ConstructionType;
			this.OperationType = OperationType;
			this.ParameterTakesPrecedence = ParameterTakesPrecedence;
			this.Sizeable = Sizeable;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ApplicableOccurrence", ApplicableOccurrence},
				{"HasPropertySets", HasPropertySets},
				{"RepresentationMaps", RepresentationMaps},
				{"Tag", Tag},
				{"ConstructionType", ConstructionType},
				{"OperationType", OperationType},
				{"ParameterTakesPrecedence", ParameterTakesPrecedence},
				{"Sizeable", Sizeable}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"ObjectTypeOf", ObjectTypeOf}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR41", is_WR41}
			};
		}
		public virtual Global.IFCWindowStyleConstructionEnum? _ConstructionType
		{
			get
			{
				return ConstructionType;
			}
			set
			{
				if(value is IFCWindowStyleConstructionEnum val)
				{
					ConstructionType = val;
				}
				else if(value == null)
				{
					ConstructionType = null;
				}
			}
		}
		public virtual Global.IFCWindowStyleOperationEnum? _OperationType
		{
			get
			{
				return OperationType;
			}
			set
			{
				if(value is IFCWindowStyleOperationEnum val)
				{
					OperationType = val;
				}
				else if(value == null)
				{
					OperationType = null;
				}
			}
		}
		public virtual BOOLEAN? _ParameterTakesPrecedence
		{
			get
			{
				return ParameterTakesPrecedence;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					ParameterTakesPrecedence = val;
				}
				else if(value == null)
				{
					ParameterTakesPrecedence = null;
				}
			}
		}
		public virtual BOOLEAN? _Sizeable
		{
			get
			{
				return Sizeable;
			}
			set
			{
				if(value is BOOLEAN val)
				{
					Sizeable = val;
				}
				else if(value == null)
				{
					Sizeable = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWorkControl
	/// ABSTRACT SUPERTYPE OF (ONEOF
	/// (IfcWorkPlan
	/// ,IfcWorkSchedule))
	/// SUBTYPE OF (IfcControl);
	/// Identifier : IfcIdentifier;
	/// CreationDate : IfcDateTimeSelect;
	/// Creators : OPTIONAL SET [1:?] OF IfcPerson;
	/// Purpose : OPTIONAL IfcLabel;
	/// Duration : OPTIONAL IfcTimeMeasure;
	/// TotalFloat : OPTIONAL IfcTimeMeasure;
	/// StartTime : IfcDateTimeSelect;
	/// FinishTime : OPTIONAL IfcDateTimeSelect;
	/// WorkControlType : OPTIONAL IfcWorkControlTypeEnum;
	/// UserDefinedControlType : OPTIONAL IfcLabel;
	/// WHERE
	/// WR1 : (WorkControlType <> IfcWorkControlTypeEnum.USERDEFINED) OR
	/// ((WorkControlType = IfcWorkControlTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcWorkControl.UserDefinedControlType));
	/// END_ENTITY;
	/// <summary>
	public abstract class IFCWorkControl : IFCControl, Global.IFCWorkControl
	{
		public virtual IFCIdentifier? Identifier { get; set; }
		public virtual IFCDateTimeSelect? CreationDate { get; set; }
		public virtual IFC_Attributes<IFCPerson>? Creators { get; set; }
		public virtual IFCLabel? Purpose { get; set; }
		public virtual IFCTimeMeasure? Duration { get; set; }
		public virtual IFCTimeMeasure? TotalFloat { get; set; }
		public virtual IFCDateTimeSelect? StartTime { get; set; }
		public virtual IFCDateTimeSelect? FinishTime { get; set; }
		public virtual IFCWorkControlTypeEnum? WorkControlType { get; set; }
		public virtual IFCLabel? UserDefinedControlType { get; set; }
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCWorkControl() : base()
		{
		}
		public IFCWorkControl(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? Identifier, IFCDateTimeSelect? CreationDate, IFC_Attributes<IFCPerson>? Creators, IFCLabel? Purpose, IFCTimeMeasure? Duration, IFCTimeMeasure? TotalFloat, IFCDateTimeSelect? StartTime, IFCDateTimeSelect? FinishTime, IFCWorkControlTypeEnum? WorkControlType, IFCLabel? UserDefinedControlType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
			this.Identifier = Identifier;
			this.CreationDate = CreationDate;
			this.Creators = Creators;
			this.Purpose = Purpose;
			this.Duration = Duration;
			this.TotalFloat = TotalFloat;
			this.StartTime = StartTime;
			this.FinishTime = FinishTime;
			this.WorkControlType = WorkControlType;
			this.UserDefinedControlType = UserDefinedControlType;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"Identifier", Identifier},
				{"CreationDate", CreationDate},
				{"Creators", Creators},
				{"Purpose", Purpose},
				{"Duration", Duration},
				{"TotalFloat", TotalFloat},
				{"StartTime", StartTime},
				{"FinishTime", FinishTime},
				{"WorkControlType", WorkControlType},
				{"UserDefinedControlType", UserDefinedControlType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
		public virtual Global.IFCIdentifier? _Identifier
		{
			get
			{
				return Identifier;
			}
			set
			{
				if(value is IFCIdentifier val)
				{
					Identifier = val;
				}
				else if(value == null)
				{
					Identifier = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _CreationDate
		{
			get
			{
				return CreationDate;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					CreationDate = val;
				}
				else if(value == null)
				{
					CreationDate = null;
				}
			}
		}
		public virtual IFC_Attributes<Global.IFCPerson>? _Creators
		{
			get
			{
				if(Creators != null)
				{
					IFC_Attributes<Global.IFCPerson>? items = new IFC_Attributes<Global.IFCPerson>();
					foreach (IFCPerson item in Creators)
					{
						items.Add(item);
					}
					return items;
				}
				return null;
			}
			set
			{
				if(value == null)
				{
					Creators = null;
				}
				else
				{
					Creators = new IFC_Attributes<IFCPerson>();
					foreach(var val in value)
					{
						if(val is IFCPerson v)
						{
							Creators.Add(v);
						}
					}
				}
			}
		}
		public virtual Global.IFCLabel? _Purpose
		{
			get
			{
				return Purpose;
			}
			set
			{
				if(value is IFCLabel val)
				{
					Purpose = val;
				}
				else if(value == null)
				{
					Purpose = null;
				}
			}
		}
		public virtual Global.IFCTimeMeasure? _Duration
		{
			get
			{
				return Duration;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					Duration = val;
				}
				else if(value == null)
				{
					Duration = null;
				}
			}
		}
		public virtual Global.IFCTimeMeasure? _TotalFloat
		{
			get
			{
				return TotalFloat;
			}
			set
			{
				if(value is IFCTimeMeasure val)
				{
					TotalFloat = val;
				}
				else if(value == null)
				{
					TotalFloat = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _StartTime
		{
			get
			{
				return StartTime;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					StartTime = val;
				}
				else if(value == null)
				{
					StartTime = null;
				}
			}
		}
		public virtual Global.IFCDateTimeSelect? _FinishTime
		{
			get
			{
				return FinishTime;
			}
			set
			{
				if(value is IFCDateTimeSelect val)
				{
					FinishTime = val;
				}
				else if(value == null)
				{
					FinishTime = null;
				}
			}
		}
		public virtual Global.IFCWorkControlTypeEnum? _WorkControlType
		{
			get
			{
				return WorkControlType;
			}
			set
			{
				if(value is IFCWorkControlTypeEnum val)
				{
					WorkControlType = val;
				}
				else if(value == null)
				{
					WorkControlType = null;
				}
			}
		}
		public virtual Global.IFCLabel? _UserDefinedControlType
		{
			get
			{
				return UserDefinedControlType;
			}
			set
			{
				if(value is IFCLabel val)
				{
					UserDefinedControlType = val;
				}
				else if(value == null)
				{
					UserDefinedControlType = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcWorkPlan
	/// SUBTYPE OF (IfcWorkControl);
	/// END_ENTITY;
	/// <summary>
	public class IFCWorkPlan : IFCWorkControl, Global.IFCWorkPlan
	{
		public IFCWorkPlan() : base()
		{
		}
		public IFCWorkPlan(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? Identifier, IFCDateTimeSelect? CreationDate, IFC_Attributes<IFCPerson>? Creators, IFCLabel? Purpose, IFCTimeMeasure? Duration, IFCTimeMeasure? TotalFloat, IFCDateTimeSelect? StartTime, IFCDateTimeSelect? FinishTime, IFCWorkControlTypeEnum? WorkControlType, IFCLabel? UserDefinedControlType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identifier, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime, WorkControlType, UserDefinedControlType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"Identifier", Identifier},
				{"CreationDate", CreationDate},
				{"Creators", Creators},
				{"Purpose", Purpose},
				{"Duration", Duration},
				{"TotalFloat", TotalFloat},
				{"StartTime", StartTime},
				{"FinishTime", FinishTime},
				{"WorkControlType", WorkControlType},
				{"UserDefinedControlType", UserDefinedControlType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcWorkSchedule
	/// SUBTYPE OF (IfcWorkControl);
	/// END_ENTITY;
	/// <summary>
	public class IFCWorkSchedule : IFCWorkControl, Global.IFCWorkSchedule
	{
		public IFCWorkSchedule() : base()
		{
		}
		public IFCWorkSchedule(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType, IFCIdentifier? Identifier, IFCDateTimeSelect? CreationDate, IFC_Attributes<IFCPerson>? Creators, IFCLabel? Purpose, IFCTimeMeasure? Duration, IFCTimeMeasure? TotalFloat, IFCDateTimeSelect? StartTime, IFCDateTimeSelect? FinishTime, IFCWorkControlTypeEnum? WorkControlType, IFCLabel? UserDefinedControlType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType, Identifier, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime, WorkControlType, UserDefinedControlType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType},
				{"Identifier", Identifier},
				{"CreationDate", CreationDate},
				{"Creators", Creators},
				{"Purpose", Purpose},
				{"Duration", Duration},
				{"TotalFloat", TotalFloat},
				{"StartTime", StartTime},
				{"FinishTime", FinishTime},
				{"WorkControlType", WorkControlType},
				{"UserDefinedControlType", UserDefinedControlType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"Controls", Controls}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	/// <summary>
	/// ENTITY IfcZShapeProfileDef
	/// SUBTYPE OF (IfcParameterizedProfileDef);
	/// Depth : IfcPositiveLengthMeasure;
	/// FlangeWidth : IfcPositiveLengthMeasure;
	/// WebThickness : IfcPositiveLengthMeasure;
	/// FlangeThickness : IfcPositiveLengthMeasure;
	/// FilletRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// EdgeRadius : OPTIONAL IfcPositiveLengthMeasure;
	/// WHERE
	/// WR21 : FlangeThickness < (Depth / 2.);
	/// END_ENTITY;
	/// <summary>
	public class IFCZShapeProfileDef : IFCParameterizedProfileDef, Global.IFCZShapeProfileDef
	{
		public virtual IFCPositiveLengthMeasure? Depth { get; set; }
		public virtual IFCPositiveLengthMeasure? FlangeWidth { get; set; }
		public virtual IFCPositiveLengthMeasure? WebThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? FlangeThickness { get; set; }
		public virtual IFCPositiveLengthMeasure? FilletRadius { get; set; }
		public virtual IFCPositiveLengthMeasure? EdgeRadius { get; set; }
		public virtual bool is_WR21
		{
			get
			{
				return true;
			}
		}
		public IFCZShapeProfileDef() : base()
		{
		}
		public IFCZShapeProfileDef(IFCProfileTypeEnum? ProfileType, IFCLabel? ProfileName, IFCAxis2Placement2D? Position, IFCPositiveLengthMeasure? Depth, IFCPositiveLengthMeasure? FlangeWidth, IFCPositiveLengthMeasure? WebThickness, IFCPositiveLengthMeasure? FlangeThickness, IFCPositiveLengthMeasure? FilletRadius, IFCPositiveLengthMeasure? EdgeRadius) : base (ProfileType, ProfileName, Position)
		{
			this.Depth = Depth;
			this.FlangeWidth = FlangeWidth;
			this.WebThickness = WebThickness;
			this.FlangeThickness = FlangeThickness;
			this.FilletRadius = FilletRadius;
			this.EdgeRadius = EdgeRadius;
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"ProfileType", ProfileType},
				{"ProfileName", ProfileName},
				{"Position", Position},
				{"Depth", Depth},
				{"FlangeWidth", FlangeWidth},
				{"WebThickness", WebThickness},
				{"FlangeThickness", FlangeThickness},
				{"FilletRadius", FilletRadius},
				{"EdgeRadius", EdgeRadius}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR21", is_WR21}
			};
		}
		public virtual Global.IFCPositiveLengthMeasure? _Depth
		{
			get
			{
				return Depth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					Depth = val;
				}
				else if(value == null)
				{
					Depth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FlangeWidth
		{
			get
			{
				return FlangeWidth;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FlangeWidth = val;
				}
				else if(value == null)
				{
					FlangeWidth = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _WebThickness
		{
			get
			{
				return WebThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					WebThickness = val;
				}
				else if(value == null)
				{
					WebThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FlangeThickness
		{
			get
			{
				return FlangeThickness;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FlangeThickness = val;
				}
				else if(value == null)
				{
					FlangeThickness = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _FilletRadius
		{
			get
			{
				return FilletRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					FilletRadius = val;
				}
				else if(value == null)
				{
					FilletRadius = null;
				}
			}
		}
		public virtual Global.IFCPositiveLengthMeasure? _EdgeRadius
		{
			get
			{
				return EdgeRadius;
			}
			set
			{
				if(value is IFCPositiveLengthMeasure val)
				{
					EdgeRadius = val;
				}
				else if(value == null)
				{
					EdgeRadius = null;
				}
			}
		}
	}
	/// <summary>
	/// ENTITY IfcZone
	/// SUBTYPE OF (IfcGroup);
	/// WHERE
	/// WR1 : SIZEOF (QUERY (temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects |  NOT(('IFC2X3.IFCZONE' IN TYPEOF(temp)) OR ('IFC2X3.IFCSPACE' IN TYPEOF(temp))) )) = 0;
	/// END_ENTITY;
	/// <summary>
	public class IFCZone : IFCGroup, Global.IFCZone
	{
		public override bool is_WR1
		{
			get
			{
				return true;
			}
		}
		public IFCZone() : base()
		{
		}
		public IFCZone(IFCGloballyUniqueId? GlobalId, IFCOwnerHistory? OwnerHistory, IFCLabel? Name, IFCText? Description, IFCLabel? ObjectType) : base (GlobalId, OwnerHistory, Name, Description, ObjectType)
		{
		}
		public override Dictionary<string, IFC_Attribute?> GetDirectAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"GlobalId", GlobalId},
				{"OwnerHistory", OwnerHistory},
				{"Name", Name},
				{"Description", Description},
				{"ObjectType", ObjectType}
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetDerivedAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
			};
		}
		public override Dictionary<string, IFC_Attribute?> GetInverseAttributes()
		{
			return new Dictionary<string, IFC_Attribute?>()
			{
				{"HasAssignments", HasAssignments},
				{"IsDecomposedBy", IsDecomposedBy},
				{"Decomposes", Decomposes},
				{"HasAssociations", HasAssociations},
				{"IsDefinedBy", IsDefinedBy},
				{"IsGroupedBy", IsGroupedBy}
			};
		}
		public override Dictionary<string, bool> GetWhereAttributes()
		{
			return new Dictionary<string, bool>()
			{
				{"is_WR1", is_WR1},
				{"is_WR1", is_WR1}
			};
		}
	}
	#endregion

	#region ---- FUNCTION ----
	public abstract class IFC_Function : IFC_ClassEntity
	{
		/// <summary>
		/// FUNCTION IfcAddToBeginOfList
		/// (AScalar : GENERIC;
		/// AList   : LIST OF GENERIC:AL)
		/// : LIST[1:?] OF GENERIC:AL;
		/// 
		/// LOCAL
		/// Result : LIST OF GENERIC:AL := [];
		/// END_LOCAL;
		/// 
		/// IF NOT(EXISTS(AScalar)) THEN
		/// Result := AList;
		/// ELSE
		/// Result := Result + AScalar;
		/// IF (HIINDEX(AList) >= 1) THEN
		/// REPEAT i:=1 TO HIINDEX(AList);
		/// Result[i+1] := AList[i];
		/// END_REPEAT;
		/// END_IF;
		/// END_IF;
		/// RETURN(Result);
		/// END_FUNCTION;
		/// <summary>
		public static IFC_Attributes<T>? IFCAddToBeginOfList<T>(T AScalar, IFC_Attributes<T> AList) where T: IFC_Attribute
		{
			//MANUAL : IFC2x3.IFCAddToBeginOfList
			IFC_Attributes<T> result = new IFC_Attributes<T>();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcBaseAxis
		/// (Dim : INTEGER;
		/// Axis1, Axis2, Axis3 : IfcDirection)
		/// : LIST [2:3] OF IfcDirection;
		/// 
		/// LOCAL
		/// U : LIST [2:3] OF IfcDirection;
		/// Factor : REAL;
		/// D1, D2 : IfcDirection;
		/// END_LOCAL;
		/// 
		/// IF (Dim = 3) THEN
		/// D1 := NVL(IfcNormalise(Axis3), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
		/// D2 := IfcFirstProjAxis(D1, Axis1);
		/// U  := [D2, IfcSecondProjAxis(D1, D2, Axis2), D1];
		/// ELSE
		/// IF EXISTS(Axis1) THEN
		/// D1 := IfcNormalise(Axis1);
		/// U  := [D1, IfcOrthogonalComplement(D1)];
		/// IF EXISTS(Axis2) THEN
		/// Factor := IfcDotProduct(Axis2, U[2]);
		/// IF (Factor < 0.0) THEN
		/// U[2].DirectionRatios[1] := -U[2].DirectionRatios[1];
		/// U[2].DirectionRatios[2] := -U[2].DirectionRatios[2];
		/// END_IF;
		/// END_IF;
		/// ELSE
		/// IF EXISTS(Axis2) THEN
		/// D1 := IfcNormalise(Axis2);
		/// U  := [IfcOrthogonalComplement(D1), D1];
		/// U[1].DirectionRatios[1] := -U[1].DirectionRatios[1];
		/// U[1].DirectionRatios[2] := -U[1].DirectionRatios[2];
		/// ELSE
		/// U := [IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.0, 0.0]),
		/// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0, 1.0])];
		/// END_IF;
		/// END_IF;
		/// END_IF;
		/// RETURN(U);
		/// END_FUNCTION;
		/// <summary>
		public static IFC_Attributes<IFCDirection>? IFCBaseAxis(INTEGER Dim, IFCDirection Axis1, IFCDirection Axis2, IFCDirection Axis3)
		{
			//MANUAL : IFC2x3.IFCBaseAxis
			IFC_Attributes<IFCDirection> result = new IFC_Attributes<IFCDirection>();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcBooleanChoose
		/// (B : BOOLEAN ;
		/// Choice1, Choice2 : Generic : Item)
		/// : Generic : Item;
		/// IF B THEN
		/// RETURN (Choice1);
		/// ELSE
		/// RETURN (Choice2);
		/// END_IF;
		/// END_FUNCTION;
		/// <summary>
		public static T? IFCBooleanChoose<T>(BOOLEAN B, T Choice1, T Choice2) where T: IFC_Attribute
		{
			//MANUAL : IFC2x3.IFCBooleanChoose
			return default(T);
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcBuild2Axes
		/// (RefDirection : IfcDirection)
		/// : LIST [2:2] OF IfcDirection;
		/// LOCAL
		/// D : IfcDirection := NVL(IfcNormalise(RefDirection),
		/// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.0,0.0]));
		/// END_LOCAL;
		/// RETURN([D, IfcOrthogonalComplement(D)]);
		/// END_FUNCTION;
		/// <summary>
		public static IFC_Attributes<IFCDirection>? IFCBuild2Axes(IFCDirection RefDirection)
		{
			//MANUAL : IFC2x3.IFCBuild2Axes
			IFC_Attributes<IFCDirection> result = new IFC_Attributes<IFCDirection>();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcBuildAxes
		/// (Axis, RefDirection : IfcDirection)
		/// : LIST [3:3] OF IfcDirection;
		/// LOCAL
		/// D1, D2 : IfcDirection;
		/// END_LOCAL;
		/// D1 := NVL(IfcNormalise(Axis), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
		/// D2 := IfcFirstProjAxis(D1, RefDirection);
		/// RETURN ([D2, IfcNormalise(IfcCrossProduct(D1,D2))\IfcVector.Orientation, D1]);
		/// END_FUNCTION;
		/// <summary>
		public static IFC_Attributes<IFCDirection>? IFCBuildAxes(IFCDirection Axis, IFCDirection RefDirection)
		{
			//MANUAL : IFC2x3.IFCBuildAxes
			IFC_Attributes<IFCDirection> result = new IFC_Attributes<IFCDirection>();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcCorrectDimensions
		/// (m   : IfcUnitEnum; Dim : IfcDimensionalExponents)
		/// : LOGICAL;
		/// CASE m OF
		/// LENGTHUNIT : IF
		/// Dim = (IfcDimensionalExponents (1, 0, 0, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// MASSUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 1, 0, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// TIMEUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 0, 1, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// ELECTRICCURRENTUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 0, 0, 1, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// THERMODYNAMICTEMPERATUREUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 0, 0, 0, 1, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// AMOUNTOFSUBSTANCEUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 1, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// LUMINOUSINTENSITYUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 1))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// PLANEANGLEUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// SOLIDANGLEUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// AREAUNIT : IF
		/// Dim = (IfcDimensionalExponents (2, 0, 0, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// VOLUMEUNIT : IF
		/// Dim = (IfcDimensionalExponents (3, 0, 0, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// 
		/// ABSORBEDDOSEUNIT : IF
		/// Dim = (IfcDimensionalExponents (2, 0, -2, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// RADIOACTIVITYUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 0, -1, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// ELECTRICCAPACITANCEUNIT : IF
		/// Dim = (IfcDimensionalExponents (-2, 1, 4, 1, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// DOSEEQUIVALENTUNIT : IF
		/// Dim = (IfcDimensionalExponents (2, 0, -2, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// ELECTRICCHARGEUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 0, 1, 1, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// ELECTRICCONDUCTANCEUNIT : IF
		/// Dim = (IfcDimensionalExponents (-2, -1, 3, 2, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// ELECTRICVOLTAGEUNIT : IF
		/// Dim = (IfcDimensionalExponents (2, 1, -3, -1, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// ELECTRICRESISTANCEUNIT : IF
		/// Dim = (IfcDimensionalExponents (2, 1, -3, -2, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// ENERGYUNIT : IF
		/// Dim = (IfcDimensionalExponents (2, 1, -2, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// FORCEUNIT : IF
		/// Dim = (IfcDimensionalExponents (1, 1, -2, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// FREQUENCYUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 0, -1, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// INDUCTANCEUNIT : IF
		/// Dim = (IfcDimensionalExponents (2, 1, -2, -2, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// ILLUMINANCEUNIT : IF
		/// Dim = (IfcDimensionalExponents (-2, 0, 0, 0, 0, 0, 1))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// LUMINOUSFLUXUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 1))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// MAGNETICFLUXUNIT : IF
		/// Dim = (IfcDimensionalExponents (2, 1, -2, -1, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// MAGNETICFLUXDENSITYUNIT : IF
		/// Dim = (IfcDimensionalExponents (0, 1, -2, -1, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// POWERUNIT : IF
		/// Dim = (IfcDimensionalExponents (2, 1, -3, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// PRESSUREUNIT : IF
		/// Dim = (IfcDimensionalExponents (-1, 1, -2, 0, 0, 0, 0))
		/// THEN RETURN(TRUE);
		/// ELSE RETURN(FALSE);
		/// END_IF;
		/// 
		/// OTHERWISE :
		/// RETURN (UNKNOWN);
		/// END_CASE;
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCCorrectDimensions(IFCUnitEnum m, IFCDimensionalExponents Dim)
		{
			//MANUAL : IFC2x3.IFCCorrectDimensions
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcCorrectFillAreaStyle
		/// (Styles : SET[1:?] OF IfcFillStyleSelect)
		/// : LOGICAL;
		/// 
		/// LOCAL
		/// Hatching : INTEGER := 0;
		/// Tiles    : INTEGER := 0;
		/// Colour   : INTEGER := 0;
		/// External : INTEGER := 0;
		/// END_LOCAL;
		/// 
		/// 
		/// External := SIZEOF(QUERY(Style <* Styles |
		/// 'IFC2X3.IFCEXTERNALLYDEFINEDHATCHSTYLE' IN
		/// TYPEOF(Style)));
		/// 
		/// Hatching  := SIZEOF(QUERY(Style <* Styles |
		/// 'IFC2X3.IFCFILLAREASTYLEHATCHING' IN
		/// TYPEOF(Style)));
		/// 
		/// Tiles     := SIZEOF(QUERY(Style <* Styles |
		/// 'IFC2X3.IFCFILLAREASTYLETILES' IN
		/// TYPEOF(Style)));
		/// 
		/// Colour    := SIZEOF(QUERY(Style <* Styles |
		/// 'IFC2X3.IFCCOLOUR' IN
		/// TYPEOF(Style)));
		/// 
		/// 
		/// IF (External > 1) THEN
		/// RETURN (FALSE);
		/// END_IF;
		/// 
		/// 
		/// IF ((External = 1) AND ((Hatching > 0) OR (Tiles > 0) OR (Colour > 0))) THEN
		/// RETURN (FALSE);
		/// END_IF;
		/// 
		/// 
		/// IF (Colour > 1) THEN
		/// RETURN (FALSE);
		/// END_IF;
		/// 
		/// IF ((Hatching > 0) AND (Tiles >0)) THEN
		/// RETURN (FALSE);
		/// END_IF;
		/// 
		/// RETURN(TRUE);
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCCorrectFillAreaStyle(IFC_Attributes<IFCFillStyleSelect> Styles)
		{
			//MANUAL : IFC2x3.IFCCorrectFillAreaStyle
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcCorrectLocalPlacement
		/// (AxisPlacement:IfcAxis2Placement;
		/// RelPlacement : IfcObjectPlacement)
		/// : LOGICAL;
		/// 
		/// IF (EXISTS(RelPlacement)) THEN
		/// IF ('IFC2X3.IFCGRIDPLACEMENT' IN TYPEOF(RelPlacement)) THEN
		/// RETURN(?);
		/// END_IF;
		/// IF ('IFC2X3.IFCLOCALPLACEMENT' IN TYPEOF(RelPlacement)) THEN
		/// IF ('IFC2X3.IFCAXIS2PLACEMENT2D' IN TYPEOF(AxisPlacement)) THEN
		/// RETURN(TRUE);
		/// END_IF;
		/// IF ('IFC2X3.IFCAXIS2PLACEMENT3D' IN TYPEOF(AxisPlacement)) THEN
		/// IF (RelPlacement.RelativePlacement.Dim = 3) THEN
		/// RETURN(TRUE);
		/// ELSE
		/// RETURN(FALSE);
		/// END_IF;
		/// END_IF;
		/// END_IF;
		/// ELSE
		/// RETURN(TRUE);
		/// END_IF;
		/// RETURN(?);
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCCorrectLocalPlacement(IFCAxis2Placement AxisPlacement, IFCObjectPlacement RelPlacement)
		{
			//MANUAL : IFC2x3.IFCCorrectLocalPlacement
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcCorrectObjectAssignment
		/// (Constraint: IfcObjectTypeEnum; Objects : SET[1:?] OF IfcObjectDefinition)
		/// : LOGICAL;
		/// 
		/// LOCAL
		/// Count : INTEGER := 0;
		/// END_LOCAL;
		/// 
		/// IF NOT(EXISTS(Constraint)) THEN
		/// RETURN(TRUE);
		/// END_IF;
		/// 
		/// CASE Constraint OF
		/// IfcObjectTypeEnum.NOTDEFINED : RETURN(TRUE);
		/// IfcObjectTypeEnum.PRODUCT :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X3.IFCPRODUCT' IN TYPEOF(temp))));
		/// RETURN(Count = 0);
		/// END;
		/// IfcObjectTypeEnum.PROCESS :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X3.IFCPROCESS' IN TYPEOF(temp))));
		/// RETURN(Count = 0);
		/// END;
		/// IfcObjectTypeEnum.CONTROL :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X3.IFCCONTROL' IN TYPEOF(temp))));
		/// RETURN(Count = 0);
		/// END;
		/// IfcObjectTypeEnum.RESOURCE :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X3.IFCRESOURCE' IN TYPEOF(temp))));
		/// RETURN(Count = 0);
		/// END;
		/// IfcObjectTypeEnum.ACTOR :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X3.IFCACTOR' IN TYPEOF(temp))));
		/// RETURN(Count = 0);
		/// END;
		/// IfcObjectTypeEnum.GROUP :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X3.IFCGROUP' IN TYPEOF(temp))));
		/// RETURN(Count = 0);
		/// END;
		/// IfcObjectTypeEnum.PROJECT :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X3.IFCPROJECT' IN TYPEOF(temp))));
		/// RETURN(Count = 0);
		/// END;
		/// OTHERWISE : RETURN(?);
		/// END_CASE;
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCCorrectObjectAssignment(IFCObjectTypeEnum Constraint, IFC_Attributes<IFCObjectDefinition> Objects)
		{
			//MANUAL : IFC2x3.IFCCorrectObjectAssignment
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcCorrectUnitAssignment
		/// (Units : SET [1:?] OF IfcUnit)
		/// : LOGICAL;
		/// 
		/// LOCAL
		/// NamedUnitNumber    : INTEGER := 0;
		/// DerivedUnitNumber  : INTEGER := 0;
		/// MonetaryUnitNumber : INTEGER := 0;
		/// NamedUnitNames     : SET OF IfcUnitEnum := [];
		/// DerivedUnitNames   : SET OF IfcDerivedUnitEnum := [];
		/// END_LOCAL;
		/// 
		/// NamedUnitNumber    := SIZEOF(QUERY(temp <* Units | ('IFC2X3.IFCNAMEDUNIT' IN TYPEOF(temp)) AND NOT(temp\IfcNamedUnit.UnitType = IfcUnitEnum.USERDEFINED)));
		/// DerivedUnitNumber  := SIZEOF(QUERY(temp <* Units | ('IFC2X3.IFCDERIVEDUNIT' IN TYPEOF(temp)) AND NOT(temp\IfcDerivedUnit.UnitType = IfcDerivedUnitEnum.USERDEFINED)));
		/// MonetaryUnitNumber := SIZEOF(QUERY(temp <* Units |  'IFC2X3.IFCMONETARYUNIT' IN TYPEOF(temp)));
		/// 
		/// REPEAT i := 1 TO SIZEOF(Units);
		/// IF (('IFC2X3.IFCNAMEDUNIT' IN TYPEOF(Units[i])) AND NOT(Units[i]\IfcNamedUnit.UnitType = IfcUnitEnum.USERDEFINED)) THEN
		/// NamedUnitNames := NamedUnitNames + Units[i]\IfcNamedUnit.UnitType;
		/// END_IF;
		/// IF (('IFC2X3.IFCDERIVEDUNIT' IN TYPEOF(Units[i])) AND NOT(Units[i]\IfcDerivedUnit.UnitType = IfcDerivedUnitEnum.USERDEFINED)) THEN
		/// DerivedUnitNames := DerivedUnitNames + Units[i]\IfcDerivedUnit.UnitType;
		/// END_IF;
		/// END_REPEAT;
		/// 
		/// RETURN((SIZEOF(NamedUnitNames) = NamedUnitNumber) AND (SIZEOF(DerivedUnitNames) = DerivedUnitNumber) AND (MonetaryUnitNumber <= 1));
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCCorrectUnitAssignment(IFC_Attributes<IFCUnit> Units)
		{
			//MANUAL : IFC2x3.IFCCorrectUnitAssignment
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcCrossProduct
		/// (Arg1, Arg2 : IfcDirection)
		/// : IfcVector;
		/// LOCAL
		/// Mag : REAL;
		/// Res : IfcDirection;
		/// V1,V2  : LIST[3:3] OF REAL;
		/// Result : IfcVector;
		/// END_LOCAL;
		/// 
		/// IF (NOT EXISTS (Arg1) OR (Arg1.Dim = 2)) OR (NOT EXISTS (Arg2) OR (Arg2.Dim = 2)) THEN
		/// RETURN(?);
		/// ELSE
		/// BEGIN
		/// V1  := IfcNormalise(Arg1).DirectionRatios;
		/// V2  := IfcNormalise(Arg2).DirectionRatios;
		/// Res := IfcRepresentationItem() || IfcGeometricRepresentationItem ()
		/// || IfcDirection([(V1[2]*V2[3] - V1[3]*V2[2]), (V1[3]*V2[1] - V1[1]*V2[3]), (V1[1]*V2[2] - V1[2]*V2[1])]);
		/// Mag := 0.0;
		/// REPEAT i := 1 TO 3;
		/// Mag := Mag + Res.DirectionRatios[i]*Res.DirectionRatios[i];
		/// END_REPEAT;
		/// IF (Mag > 0.0) THEN
		/// Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(Res, SQRT(Mag));
		/// ELSE
		/// Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(Arg1, 0.0);
		/// END_IF;
		/// RETURN(Result);
		/// END;
		/// END_IF;
		/// END_FUNCTION;
		/// <summary>
		public static IFCVector? IFCCrossProduct(IFCDirection Arg1, IFCDirection Arg2)
		{
			//MANUAL : IFC2x3.IFCCrossProduct
			IFCVector result = new IFCVector();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcCurveDim
		/// (Curve : IfcCurve)
		/// : IfcDimensionCount;
		/// 
		/// IF ('IFC2X3.IFCLINE' IN TYPEOF(Curve))
		/// THEN RETURN(Curve\IfcLine.Pnt.Dim);
		/// END_IF;
		/// IF ('IFC2X3.IFCCONIC' IN TYPEOF(Curve))
		/// THEN RETURN(Curve\IfcConic.Position.Dim);
		/// END_IF;
		/// IF ('IFC2X3.IFCPOLYLINE' IN TYPEOF(Curve))
		/// THEN RETURN(Curve\IfcPolyline.Points[1].Dim);
		/// END_IF;
		/// IF ('IFC2X3.IFCTRIMMEDCURVE' IN TYPEOF(Curve))
		/// THEN RETURN(IfcCurveDim(Curve\IfcTrimmedCurve.BasisCurve));
		/// END_IF;
		/// IF ('IFC2X3.IFCCOMPOSITECURVE' IN TYPEOF(Curve))
		/// THEN RETURN(Curve\IfcCompositeCurve.Segments[1].Dim);
		/// END_IF;
		/// IF ('IFC2X3.IFCBSPLINECURVE' IN TYPEOF(Curve))
		/// THEN RETURN(Curve\IfcBSplineCurve.ControlPointsList[1].Dim);
		/// END_IF;
		/// IF ('IFC2X3.IFCOFFSETCURVE2D' IN TYPEOF(Curve))
		/// THEN RETURN(2);
		/// END_IF;
		/// IF ('IFC2X3.IFCOFFSETCURVE3D' IN TYPEOF(Curve))
		/// THEN RETURN(3);
		/// END_IF;
		/// RETURN (?);
		/// END_FUNCTION;
		/// <summary>
		public static IFCDimensionCount? IFCCurveDim(IFCCurve Curve)
		{
			//MANUAL : IFC2x3.IFCCurveDim
			IFCDimensionCount result = new IFCDimensionCount();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcCurveWeightsPositive
		/// (B: IfcRationalBezierCurve)
		/// : BOOLEAN;
		/// LOCAL
		/// Result : BOOLEAN := TRUE;
		/// END_LOCAL;
		/// 
		/// REPEAT i := 0 TO B.UpperIndexOnControlPoints;
		/// IF B.Weights[i] <= 0.0  THEN
		/// Result := FALSE;
		/// RETURN(Result);
		/// END_IF;
		/// END_REPEAT;
		/// RETURN(Result);
		/// END_FUNCTION;
		/// <summary>
		public static BOOLEAN? IFCCurveWeightsPositive(IFCRationalBezierCurve B)
		{
			//MANUAL : IFC2x3.IFCCurveWeightsPositive
			BOOLEAN result = new BOOLEAN();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcDeriveDimensionalExponents
		/// (UnitElements : SET [1:?] Of IfcDerivedUnitElement)
		/// : IfcDimensionalExponents;
		/// LOCAL
		/// Result : IfcDimensionalExponents :=
		/// IfcDimensionalExponents(0, 0, 0, 0, 0, 0, 0);
		/// END_LOCAL;
		/// REPEAT i := LOINDEX(UnitElements) TO HIINDEX(UnitElements);
		/// Result.LengthExponent := Result.LengthExponent +
		/// (UnitElements[i].Exponent *
		/// UnitElements[i].Unit.Dimensions.LengthExponent);
		/// Result.MassExponent := Result.MassExponent  +
		/// (UnitElements[i].Exponent *
		/// UnitElements[i].Unit.Dimensions.MassExponent);
		/// Result.TimeExponent := Result.TimeExponent +
		/// (UnitElements[i].Exponent *
		/// UnitElements[i].Unit.Dimensions.TimeExponent);
		/// Result.ElectricCurrentExponent := Result.ElectricCurrentExponent +
		/// (UnitElements[i].Exponent *
		/// UnitElements[i].Unit.Dimensions.ElectricCurrentExponent);
		/// Result.ThermodynamicTemperatureExponent := Result.ThermodynamicTemperatureExponent +
		/// (UnitElements[i].Exponent *
		/// UnitElements[i].Unit.Dimensions.ThermodynamicTemperatureExponent);
		/// Result.AmountOfSubstanceExponent := Result.AmountOfSubstanceExponent +
		/// (UnitElements[i].Exponent *
		/// UnitElements[i].Unit.Dimensions.AmountOfSubstanceExponent);
		/// Result.LuminousIntensityExponent := Result.LuminousIntensityExponent +
		/// (UnitElements[i].Exponent *
		/// UnitElements[i].Unit.Dimensions.LuminousIntensityExponent);
		/// END_REPEAT;
		/// RETURN (Result);
		/// END_FUNCTION;
		/// <summary>
		public static IFCDimensionalExponents? IFCDeriveDimensionalExponents(IFCDerivedUnitElement UnitElements)
		{
			//MANUAL : IFC2x3.IFCDeriveDimensionalExponents
			IFCDimensionalExponents result = new IFCDimensionalExponents();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcDimensionsForSiUnit
		/// (n : IfcSiUnitName )
		/// : IfcDimensionalExponents;
		/// CASE n OF
		/// METRE          : RETURN (IfcDimensionalExponents
		/// (1, 0, 0, 0, 0, 0, 0));
		/// SQUARE_METRE   : RETURN (IfcDimensionalExponents
		/// (2, 0, 0, 0, 0, 0, 0));
		/// CUBIC_METRE    : RETURN (IfcDimensionalExponents
		/// (3, 0, 0, 0, 0, 0, 0));
		/// GRAM           : RETURN (IfcDimensionalExponents
		/// (0, 1, 0, 0, 0, 0, 0));
		/// SECOND         : RETURN (IfcDimensionalExponents
		/// (0, 0, 1, 0, 0, 0, 0));
		/// AMPERE         : RETURN (IfcDimensionalExponents
		/// (0, 0, 0, 1, 0, 0, 0));
		/// KELVIN         : RETURN (IfcDimensionalExponents
		/// (0, 0, 0, 0, 1, 0, 0));
		/// MOLE           : RETURN (IfcDimensionalExponents
		/// (0, 0, 0, 0, 0, 1, 0));
		/// CANDELA        : RETURN (IfcDimensionalExponents
		/// (0, 0, 0, 0, 0, 0, 1));
		/// RADIAN         : RETURN (IfcDimensionalExponents
		/// (0, 0, 0, 0, 0, 0, 0));
		/// STERADIAN      : RETURN (IfcDimensionalExponents
		/// (0, 0, 0, 0, 0, 0, 0));
		/// HERTZ          : RETURN (IfcDimensionalExponents
		/// (0, 0, -1, 0, 0, 0, 0));
		/// NEWTON         : RETURN (IfcDimensionalExponents
		/// (1, 1, -2, 0, 0, 0, 0));
		/// PASCAL         : RETURN (IfcDimensionalExponents
		/// (-1, 1, -2, 0, 0, 0, 0));
		/// JOULE          : RETURN (IfcDimensionalExponents
		/// (2, 1, -2, 0, 0, 0, 0));
		/// WATT           : RETURN (IfcDimensionalExponents
		/// (2, 1, -3, 0, 0, 0, 0));
		/// COULOMB        : RETURN (IfcDimensionalExponents
		/// (0, 0, 1, 1, 0, 0, 0));
		/// VOLT           : RETURN (IfcDimensionalExponents
		/// (2, 1, -3, -1, 0, 0, 0));
		/// FARAD          : RETURN (IfcDimensionalExponents
		/// (-2, -1, 4, 1, 0, 0, 0));
		/// OHM            : RETURN (IfcDimensionalExponents
		/// (2, 1, -3, -2, 0, 0, 0));
		/// SIEMENS        : RETURN (IfcDimensionalExponents
		/// (-2, -1, 3, 2, 0, 0, 0));
		/// WEBER          : RETURN (IfcDimensionalExponents
		/// (2, 1, -2, -1, 0, 0, 0));
		/// TESLA          : RETURN (IfcDimensionalExponents
		/// (0, 1, -2, -1, 0, 0, 0));
		/// HENRY          : RETURN (IfcDimensionalExponents
		/// (2, 1, -2, -2, 0, 0, 0));
		/// DEGREE_CELSIUS : RETURN (IfcDimensionalExponents
		/// (0, 0, 0, 0, 1, 0, 0));
		/// LUMEN          : RETURN (IfcDimensionalExponents
		/// (0, 0, 0, 0, 0, 0, 1));
		/// LUX            : RETURN (IfcDimensionalExponents
		/// (-2, 0, 0, 0, 0, 0, 1));
		/// BECQUEREL      : RETURN (IfcDimensionalExponents
		/// (0, 0, -1, 0, 0, 0, 0));
		/// GRAY           : RETURN (IfcDimensionalExponents
		/// (2, 0, -2, 0, 0, 0, 0));
		/// SIEVERT        : RETURN (IfcDimensionalExponents
		/// (2, 0, -2, 0, 0, 0, 0));
		/// OTHERWISE      : RETURN (IfcDimensionalExponents
		/// (0, 0, 0, 0, 0, 0, 0));
		/// END_CASE;
		/// END_FUNCTION;
		/// <summary>
		public static IFCDimensionalExponents? IFCDimensionsForSiUnit(IFCSIUnitName n)
		{
			//MANUAL : IFC2x3.IFCDimensionsForSiUnit
			IFCDimensionalExponents result = new IFCDimensionalExponents();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcDotProduct
		/// (Arg1, Arg2 : IfcDirection)
		/// : REAL;
		/// LOCAL
		/// Scalar : REAL;
		/// Vec1, Vec2 : IfcDirection;
		/// Ndim   : INTEGER;
		/// END_LOCAL;
		/// 
		/// IF NOT EXISTS (Arg1) OR NOT EXISTS (Arg2) THEN
		/// Scalar := ?;
		/// ELSE
		/// IF (Arg1.Dim <> Arg2.Dim) THEN
		/// Scalar := ?;
		/// ELSE
		/// BEGIN
		/// Vec1 := IfcNormalise(Arg1);
		/// Vec2 := IfcNormalise(Arg2);
		/// Ndim := Arg1.Dim;
		/// Scalar := 0.0;
		/// REPEAT i := 1 TO Ndim;
		/// Scalar := Scalar + Vec1.DirectionRatios[i]*Vec2.DirectionRatios[i];
		/// END_REPEAT;
		/// END;
		/// END_IF;
		/// END_IF;
		/// RETURN (Scalar);
		/// END_FUNCTION;
		/// <summary>
		public static REAL? IFCDotProduct(IFCDirection Arg1, IFCDirection Arg2)
		{
			//MANUAL : IFC2x3.IFCDotProduct
			REAL result = new REAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcFirstProjAxis
		/// (ZAxis, Arg : IfcDirection)
		/// : IfcDirection;
		/// LOCAL
		/// XAxis : IfcDirection;
		/// V     : IfcDirection;
		/// Z     : IfcDirection;
		/// XVec  : IfcVector;
		/// END_LOCAL;
		/// 
		/// IF (NOT EXISTS(ZAxis)) THEN
		/// RETURN (?) ;
		/// ELSE
		/// Z := IfcNormalise(ZAxis);
		/// IF NOT EXISTS(Arg) THEN
		/// IF (Z.DirectionRatios <> [1.0,0.0,0.0]) THEN
		/// V := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.0,0.0,0.0]);
		/// ELSE
		/// V := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,1.0,0.0]);
		/// END_IF;
		/// ELSE
		/// IF (Arg.Dim <> 3) THEN
		/// RETURN (?) ;
		/// END_IF;
		/// IF ((IfcCrossProduct(Arg,Z).Magnitude) = 0.0) THEN
		/// RETURN (?);
		/// ELSE
		/// V := IfcNormalise(Arg);
		/// END_IF;
		/// END_IF;
		/// XVec  := IfcScalarTimesVector(IfcDotProduct(V, Z), Z);
		/// XAxis := IfcVectorDifference(V, XVec).Orientation;
		/// XAxis := IfcNormalise(XAxis);
		/// END_IF;
		/// RETURN(XAxis);
		/// END_FUNCTION;
		/// <summary>
		public static IFCDirection? IFCFirstProjAxis(IFCDirection ZAxis, IFCDirection Arg)
		{
			//MANUAL : IFC2x3.IFCFirstProjAxis
			IFCDirection result = new IFCDirection();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcLeapYear
		/// (Year : IfcYearNumber)
		/// : BOOLEAN;
		/// 
		/// IF ((((Year MOD 4) = 0) AND ((Year MOD 100) <> 0)) OR
		/// ((Year MOD 400) = 0)) THEN
		/// RETURN(TRUE);
		/// ELSE
		/// RETURN(FALSE);
		/// END_IF;
		/// END_FUNCTION;
		/// <summary>
		public static BOOLEAN? IFCLeapYear(IFCYearNumber Year)
		{
			//MANUAL : IFC2x3.IFCLeapYear
			BOOLEAN result = new BOOLEAN();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcListToArray
		/// (Lis : LIST [0:?] OF GENERIC : T;
		/// Low,U : INTEGER)
		/// : ARRAY OF GENERIC : T;
		/// LOCAL
		/// N   : INTEGER;
		/// Res : ARRAY [Low:U] OF GENERIC : T;
		/// END_LOCAL;
		/// 
		/// N := SIZEOF(Lis);
		/// IF (N <> (U-Low +1)) THEN
		/// RETURN(?);
		/// ELSE
		/// Res := [Lis[1] : N];
		/// REPEAT i := 2 TO N;
		/// Res[Low+i-1] := Lis[i];
		/// END_REPEAT;
		/// RETURN(Res);
		/// END_IF;
		/// END_FUNCTION;
		/// <summary>
		public static IFC_Attributes<T>? IFCListToArray<T>(IFC_Attributes<T> Lis, INTEGER Low, INTEGER U) where T: IFC_Attribute
		{
			//MANUAL : IFC2x3.IFCListToArray
			IFC_Attributes<T> result = new IFC_Attributes<T>();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcLoopHeadToTail
		/// (ALoop : IfcEdgeLoop)
		/// : LOGICAL;
		/// LOCAL
		/// N : INTEGER;
		/// P : LOGICAL := TRUE;
		/// END_LOCAL;
		/// 
		/// N := SIZEOF (ALoop.EdgeList);
		/// REPEAT i := 2 TO N;
		/// P := P AND (ALoop.EdgeList[i-1].EdgeEnd :=:
		/// ALoop.EdgeList[i].EdgeStart);
		/// END_REPEAT;
		/// RETURN (P);
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCLoopHeadToTail(IFCEdgeLoop ALoop)
		{
			//MANUAL : IFC2x3.IFCLoopHeadToTail
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcMlsTotalThickness
		/// (LayerSet : IfcMaterialLayerSet)
		/// : IfcLengthMeasure;
		/// LOCAL
		/// Max : IfcLengthMeasure := LayerSet.MaterialLayers[1].LayerThickness;
		/// END_LOCAL;
		/// 
		/// IF SIZEOF(LayerSet.MaterialLayers) > 1 THEN
		/// REPEAT i := 2 TO HIINDEX(LayerSet.MaterialLayers);
		/// Max := Max + LayerSet.MaterialLayers[i].LayerThickness;
		/// END_REPEAT;
		/// END_IF;
		/// RETURN (Max);
		/// END_FUNCTION;
		/// <summary>
		public static IFCLengthMeasure? IFCMlsTotalThickness(IFCMaterialLayerSet LayerSet)
		{
			//MANUAL : IFC2x3.IFCMlsTotalThickness
			IFCLengthMeasure result = new IFCLengthMeasure();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcNormalise
		/// (Arg : IfcVectorOrDirection)
		/// : IfcVectorOrDirection;
		/// LOCAL
		/// Ndim : INTEGER;
		/// V    : IfcDirection
		/// := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.,0.]);
		/// Vec  : IfcVector
		/// := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector (
		/// IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.,0.]), 1.);
		/// Mag  : REAL;
		/// Result : IfcVectorOrDirection
		/// := V;
		/// END_LOCAL;
		/// 
		/// IF NOT EXISTS (Arg) THEN
		/// RETURN (?);
		/// ELSE
		/// Ndim := Arg.Dim;
		/// IF 'IFC2X3.IFCVECTOR' IN TYPEOF(Arg) THEN
		/// BEGIN
		/// V.DirectionRatios := Arg\IfcVector.Orientation.DirectionRatios;
		/// Vec.Magnitude := Arg\IfcVector.Magnitude;
		/// Vec.Orientation := V;
		/// IF Arg.Magnitude = 0.0 THEN
		/// RETURN(?);
		/// ELSE
		/// Vec.Magnitude := 1.0;
		/// END_IF;
		/// END;
		/// ELSE
		/// V.DirectionRatios := Arg.DirectionRatios;
		/// END_IF;
		/// Mag := 0.0;
		/// REPEAT i := 1 TO Ndim;
		/// Mag := Mag + V.DirectionRatios[i]*V.DirectionRatios[i];
		/// END_REPEAT;
		/// IF Mag > 0.0 THEN
		/// Mag := SQRT(Mag);
		/// REPEAT i := 1 TO Ndim;
		/// V.DirectionRatios[i] := V.DirectionRatios[i]/Mag;
		/// END_REPEAT;
		/// IF 'IFC2X3.IFCVECTOR' IN TYPEOF(arg) THEN
		/// Vec.Orientation := V;
		/// Result := Vec;
		/// ELSE
		/// Result := V;
		/// END_IF;
		/// ELSE
		/// RETURN(?);
		/// END_IF;
		/// END_IF;
		/// RETURN (Result);
		/// END_FUNCTION;
		/// <summary>
		public static IFCVectorOrDirection? IFCNormalise(IFCVectorOrDirection Arg)
		{
			//MANUAL : IFC2x3.IFCNormalise
			return null;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcOrthogonalComplement
		/// (Vec : IfcDirection)
		/// : IfcDirection;
		/// LOCAL
		/// Result : IfcDirection ;
		/// END_LOCAL;
		/// IF NOT EXISTS (Vec) OR (Vec.Dim <> 2) THEN
		/// RETURN(?);
		/// ELSE
		/// Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([-Vec.DirectionRatios[2], Vec.DirectionRatios[1]]);
		/// RETURN(Result);
		/// END_IF;
		/// END_FUNCTION;
		/// <summary>
		public static IFCDirection? IFCOrthogonalComplement(IFCDirection Vec)
		{
			//MANUAL : IFC2x3.IFCOrthogonalComplement
			IFCDirection result = new IFCDirection();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcPathHeadToTail
		/// (APath : IfcPath)
		/// : LOGICAL;
		/// LOCAL
		/// N : INTEGER := 0;
		/// P : LOGICAL := UNKNOWN;
		/// END_LOCAL;
		/// N := SIZEOF (APath.EdgeList);
		/// REPEAT i := 2 TO N;
		/// P := P AND (APath.EdgeList[i-1].EdgeEnd :=:
		/// APath.EdgeList[i].EdgeStart);
		/// END_REPEAT;
		/// RETURN (P);
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCPathHeadToTail(IFCPath APath)
		{
			//MANUAL : IFC2x3.IFCPathHeadToTail
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcSameAxis2Placement
		/// (ap1, ap2 : IfcAxis2Placement; Epsilon : REAL)
		/// : LOGICAL;
		/// 
		/// RETURN (IfcSameDirection(ap1.P[1],ap2.P[1],Epsilon) AND
		/// IfcSameDirection(ap1.P[2],ap2.P[2],Epsilon) AND
		/// IfcSameCartesianPoint(ap1.Location,ap1.Location,Epsilon));
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCSameAxis2Placement(IFCAxis2Placement ap1, IFCAxis2Placement ap2, REAL Epsilon)
		{
			//MANUAL : IFC2x3.IFCSameAxis2Placement
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcSameCartesianPoint
		/// (cp1, cp2 : IfcCartesianPoint; Epsilon : REAL)
		/// : LOGICAL;
		/// 
		/// LOCAL
		/// cp1x : REAL := cp1.Coordinates[1];
		/// cp1y : REAL := cp1.Coordinates[2];
		/// cp1z : REAL := 0;
		/// cp2x : REAL := cp2.Coordinates[1];
		/// cp2y : REAL := cp2.Coordinates[2];
		/// cp2z : REAL := 0;
		/// END_LOCAL;
		/// 
		/// IF (SIZEOF(cp1.Coordinates) > 2) THEN
		/// cp1z := cp1.Coordinates[3];
		/// END_IF;
		/// 
		/// IF (SIZEOF(cp2.Coordinates) > 2) THEN
		/// cp2z := cp2.Coordinates[3];
		/// END_IF;
		/// 
		/// RETURN (IfcSameValue(cp1x,cp2x,Epsilon) AND
		/// IfcSameValue(cp1y,cp2y,Epsilon) AND
		/// IfcSameValue(cp1z,cp2z,Epsilon));
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCSameCartesianPoint(IFCCartesianPoint cp1, IFCCartesianPoint cp2, REAL Epsilon)
		{
			//MANUAL : IFC2x3.IFCSameCartesianPoint
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcSameDirection
		/// (dir1, dir2 : IfcDirection; Epsilon : REAL)
		/// : LOGICAL;
		/// LOCAL
		/// dir1x : REAL := dir1.DirectionRatios[1];
		/// dir1y : REAL := dir1.DirectionRatios[2];
		/// dir1z : REAL := 0;
		/// dir2x : REAL := dir2.DirectionRatios[1];
		/// dir2y : REAL := dir2.DirectionRatios[2];
		/// dir2z : REAL := 0;
		/// END_LOCAL;
		/// 
		/// IF (SIZEOF(dir1.DirectionRatios) > 2) THEN
		/// dir1z := dir1.DirectionRatios[3];
		/// END_IF;
		/// 
		/// IF (SIZEOF(dir2.DirectionRatios) > 2) THEN
		/// dir2z := dir2.DirectionRatios[3];
		/// END_IF;
		/// 
		/// RETURN (IfcSameValue(dir1x,dir2x,Epsilon) AND
		/// IfcSameValue(dir1y,dir2y,Epsilon) AND
		/// IfcSameValue(dir1z,dir2z,Epsilon));
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCSameDirection(IFCDirection dir1, IFCDirection dir2, REAL Epsilon)
		{
			//MANUAL : IFC2x3.IFCSameDirection
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcSameValidPrecision
		/// (Epsilon1, Epsilon2 : REAL)
		/// : LOGICAL;
		/// LOCAL
		/// ValidEps1, ValidEps2 : REAL;
		/// DefaultEps           : REAL := 0.000001;
		/// DerivationOfEps      : REAL := 1.001;
		/// UpperEps             : REAL := 1.0;
		/// END_LOCAL;
		/// 
		/// ValidEps1 := NVL(Epsilon1, DefaultEps);
		/// ValidEps2 := NVL(Epsilon2, DefaultEps);
		/// RETURN ((0.0 < ValidEps1) AND (ValidEps1 <= (DerivationOfEps * ValidEps2)) AND
		/// (ValidEps2 <= (DerivationOfEps * ValidEps1)) AND (ValidEps2 < UpperEps));
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCSameValidPrecision(REAL Epsilon1, REAL Epsilon2)
		{
			//MANUAL : IFC2x3.IFCSameValidPrecision
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcSameValue
		/// (Value1, Value2 : REAL; Epsilon : REAL)
		/// : LOGICAL;
		/// LOCAL
		/// ValidEps    : REAL;
		/// DefaultEps  : REAL := 0.000001;
		/// END_LOCAL;
		/// 
		/// ValidEps := NVL(Epsilon, DefaultEps);
		/// RETURN ((Value1 + ValidEps > Value2) AND (Value1 < Value2 + ValidEps));
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCSameValue(REAL Value1, REAL Value2, REAL Epsilon)
		{
			//MANUAL : IFC2x3.IFCSameValue
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcScalarTimesVector
		/// (Scalar : REAL; Vec : IfcVectorOrDirection)
		/// : IfcVector;
		/// LOCAL
		/// V : IfcDirection;
		/// Mag : REAL;
		/// Result : IfcVector;
		/// END_LOCAL;
		/// 
		/// IF NOT EXISTS (Scalar) OR NOT EXISTS (Vec) THEN
		/// RETURN (?) ;
		/// ELSE
		/// IF 'IFC2X3.IFCVECTOR' IN TYPEOF (Vec) THEN
		/// V := Vec\IfcVector.Orientation;
		/// Mag := Scalar * Vec\IfcVector.Magnitude;
		/// ELSE
		/// V := Vec;
		/// Mag := Scalar;
		/// END_IF;
		/// IF (Mag < 0.0 ) THEN
		/// REPEAT i := 1 TO SIZEOF(V.DirectionRatios);
		/// V.DirectionRatios[i] := -V.DirectionRatios[i];
		/// END_REPEAT;
		/// Mag := -Mag;
		/// END_IF;
		/// Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(IfcNormalise(V), Mag);
		/// END_IF;
		/// RETURN (Result);
		/// END_FUNCTION;
		/// <summary>
		public static IFCVector? IFCScalarTimesVector(REAL Scalar, IFCVectorOrDirection Vec)
		{
			//MANUAL : IFC2x3.IFCScalarTimesVector
			IFCVector result = new IFCVector();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcSecondProjAxis
		/// (ZAxis, XAxis, Arg: IfcDirection)
		/// : IfcDirection;
		/// LOCAL
		/// YAxis : IfcVector;
		/// V     : IfcDirection;
		/// Temp  : IfcVector;
		/// END_LOCAL;
		/// 
		/// IF NOT EXISTS(Arg) THEN
		/// V := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,1.0,0.0]);
		/// ELSE
		/// V := Arg;
		/// END_IF;
		/// Temp  := IfcScalarTimesVector(IfcDotProduct(V, ZAxis), ZAxis);
		/// YAxis := IfcVectorDifference(V, Temp);
		/// Temp  := IfcScalarTimesVector(IfcDotProduct(V, XAxis), XAxis);
		/// YAxis := IfcVectorDifference(YAxis, Temp);
		/// YAxis := IfcNormalise(YAxis);
		/// RETURN(YAxis.Orientation);
		/// END_FUNCTION;
		/// <summary>
		public static IFCDirection? IFCSecondProjAxis(IFCDirection ZAxis, IFCDirection XAxis, IFCDirection Arg)
		{
			//MANUAL : IFC2x3.IFCSecondProjAxis
			IFCDirection result = new IFCDirection();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcShapeRepresentationTypes
		/// (RepType : IfcLabel; Items : SET OF IfcRepresentationItem)
		/// : LOGICAL;
		/// 
		/// LOCAL
		/// Count : INTEGER := 0;
		/// END_LOCAL;
		/// 
		/// CASE RepType OF
		/// 'Curve2D' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCCURVE' IN TYPEOF(temp))
		/// AND (temp.Dim = 2)));
		/// END;
		/// 'Annotation2D' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | (
		/// SIZEOF(TYPEOF(temp) * [
		/// 'IFC2X3.IFCPOINT',
		/// 'IFC2X3.IFCCURVE',
		/// 'IFC2X3.IFCGEOMETRICCURVESET',
		/// 'IFC2X3.IFCANNOTATIONFILLAREA',
		/// 'IFC2X3.IFCDEFINEDSYMBOL',
		/// 'IFC2X3.IFCTEXTLITERAL',
		/// 'IFC2X3.IFCDRAUGHTINGCALLOUT']) = 1)
		/// ));
		/// END;
		/// 'GeometricSet' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCGEOMETRICSET' IN TYPEOF(temp))
		/// OR ('IFC2X3.IFCPOINT' IN TYPEOF(temp))
		/// OR ('IFC2X3.IFCCURVE' IN TYPEOF(temp))
		/// OR ('IFC2X3.IFCSURFACE' IN TYPEOF(temp))));
		/// END;
		/// 'GeometricCurveSet' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCGEOMETRICCURVESET' IN TYPEOF(temp))
		/// OR ('IFC2X3.IFCGEOMETRICSET' IN TYPEOF(temp))
		/// OR ('IFC2X3.IFCPOINT' IN TYPEOF(temp))
		/// OR ('IFC2X3.IFCCURVE' IN TYPEOF(temp))));
		/// REPEAT i:=1 TO HIINDEX(Items);
		/// IF ('IFC2X3.IFCGEOMETRICSET' IN TYPEOF(Items[i]))
		/// THEN
		/// IF (SIZEOF(QUERY(temp <* Items[i]\IfcGeometricSet.Elements | 'IFC2X3.IFCSURFACE' IN TYPEOF(temp))) > 0)
		/// THEN
		/// Count := Count - 1;
		/// END_IF;
		/// END_IF;
		/// END_REPEAT;
		/// END;
		/// 'SurfaceModel' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | SIZEOF([
		/// 'IFC2X3.IFCSHELLBASEDSURFACEMODEL',
		/// 'IFC2X3.IFCFACEBASEDSURFACEMODEL',
		/// 'IFC2X3.IFCFACETEDBREP',
		/// 'IFC2X3.IFCFACETEDBREPWITHVOIDS'] * TYPEOF(temp)) >= 1
		/// ));
		/// END;
		/// 'SolidModel' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCSOLIDMODEL' IN TYPEOF(temp))));
		/// END;
		/// 'SweptSolid' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCSWEPTAREASOLID' IN TYPEOF(temp))));
		/// END;
		/// 'CSG' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCBOOLEANRESULT' IN TYPEOF(temp))));
		/// END;
		/// 'Clipping' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCBOOLEANCLIPPINGRESULT' IN TYPEOF(temp))));
		/// END;
		/// 'AdvancedSweptSolid' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCSURFACECURVESWEPTAREASOLID' IN TYPEOF(temp))
		/// OR ('IFC2X3.IFCSWEPTDISKSOLID' IN TYPEOF(temp))));
		/// END;
		/// 'Brep' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCFACETEDBREP' IN TYPEOF(temp))
		/// OR ('IFC2X3.IFCFACETEDBREPWITHVOIDS' IN TYPEOF(temp))));
		/// END;
		/// 'BoundingBox' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCBOUNDINGBOX' IN TYPEOF(temp))));
		/// IF (SIZEOF(Items) > 1)
		/// THEN
		/// Count := 0;
		/// END_IF;
		/// END;
		/// 'SectionedSpine' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCSECTIONEDSPINE' IN TYPEOF(temp))));
		/// END;
		/// 'MappedRepresentation' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items | ('IFC2X3.IFCMAPPEDITEM' IN TYPEOF(temp))));
		/// END;
		/// OTHERWISE : RETURN(?);
		/// END_CASE;
		/// RETURN (Count = SIZEOF(Items));
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCShapeRepresentationTypes(IFCLabel RepType, IFC_Attributes<IFCRepresentationItem> Items)
		{
			//MANUAL : IFC2x3.IFCShapeRepresentationTypes
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcTopologyRepresentationTypes
		/// (RepType : IfcLabel; Items : SET OF IfcRepresentationItem)
		/// : LOGICAL;
		/// 
		/// LOCAL
		/// Count : INTEGER := 0;
		/// END_LOCAL;
		/// 
		/// CASE RepType OF
		/// 'Vertex' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items |
		/// ('IFC2X3.IFCVERTEX' IN TYPEOF(temp))));
		/// END;
		/// 'Edge' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items |
		/// ('IFC2X3.IFCEDGE' IN TYPEOF(temp))));
		/// END;
		/// 'Path' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items |
		/// ('IFC2X3.IFCPATH' IN TYPEOF(temp))));
		/// END;
		/// 'Face' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items |
		/// ('IFC2X3.IFCFACE' IN TYPEOF(temp))));
		/// END;
		/// 'Shell' :
		/// BEGIN
		/// Count := SIZEOF(QUERY(temp <* Items |
		/// ('IFC2X3.IFCOPENSHELL' IN TYPEOF(temp))
		/// OR ('IFC2X3.IFCCLOSEDSHELL' IN TYPEOF(temp))));
		/// END;
		/// 'Undefined': RETURN(TRUE);
		/// OTHERWISE : RETURN(?);
		/// END_CASE;
		/// RETURN (Count = SIZEOF(Items));
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCTopologyRepresentationTypes(IFCLabel RepType, IFC_Attributes<IFCRepresentationItem> Items)
		{
			//MANUAL : IFC2x3.IFCTopologyRepresentationTypes
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcUniquePropertyName
		/// (Properties : SET [1:?] OF IfcProperty)
		/// : LOGICAL;
		/// 
		/// LOCAL
		/// Names : SET OF IfcIdentifier := [];
		/// END_LOCAL;
		/// 
		/// REPEAT i:=1 TO HIINDEX(Properties);
		/// Names := Names + Properties[i].Name;
		/// END_REPEAT;
		/// RETURN (SIZEOF(Names) = SIZEOF(Properties));
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCUniquePropertyName(IFC_Attributes<IFCProperty> Properties)
		{
			//MANUAL : IFC2x3.IFCUniquePropertyName
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcValidCalendarDate
		/// (Date : IfcCalendarDate)
		/// : LOGICAL;
		/// IF NOT ({1 <= Date.DayComponent <= 31}) THEN
		/// RETURN(FALSE);
		/// END_IF;
		/// CASE Date.MonthComponent OF
		/// 4         : RETURN({ 1<= Date.DayComponent <= 30});
		/// 6         : RETURN({ 1<= Date.DayComponent <= 30});
		/// 9         : RETURN({ 1<= Date.DayComponent <= 30});
		/// 11        : RETURN({ 1<= Date.DayComponent <= 30});
		/// 2         :
		/// BEGIN
		/// IF (IfcLeapYear(Date.YearComponent)) THEN
		/// RETURN({ 1<= Date.DayComponent <= 29});
		/// ELSE
		/// RETURN({ 1<= Date.DayComponent <= 28});
		/// END_IF;
		/// END;
		/// OTHERWISE : RETURN(TRUE);
		/// END_CASE;
		/// END_FUNCTION;
		/// <summary>
		public static LOGICAL? IFCValidCalendarDate(IFCCalendarDate Date)
		{
			//MANUAL : IFC2x3.IFCValidCalendarDate
			LOGICAL result = new LOGICAL();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcValidTime
		/// (Time: IfcLocalTime)
		/// : BOOLEAN;
		/// IF EXISTS (Time.SecondComponent) THEN
		/// RETURN (EXISTS (Time.MinuteComponent));
		/// ELSE
		/// RETURN (TRUE);
		/// END_IF;
		/// END_FUNCTION;
		/// <summary>
		public static BOOLEAN? IFCValidTime(IFCLocalTime Time)
		{
			//MANUAL : IFC2x3.IFCValidTime
			BOOLEAN result = new BOOLEAN();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcVectorDifference
		/// (Arg1, Arg2 : IfcVectorOrDirection)
		/// : IfcVector;
		/// LOCAL
		/// Result : IfcVector;
		/// Res, Vec1, Vec2 : IfcDirection;
		/// Mag, Mag1, Mag2 : REAL;
		/// Ndim : INTEGER;
		/// END_LOCAL;
		/// 
		/// IF ((NOT EXISTS (Arg1)) OR (NOT EXISTS (Arg2))) OR (Arg1.Dim <> Arg2.Dim) THEN
		/// RETURN (?) ;
		/// ELSE
		/// BEGIN
		/// IF 'IFC2X3.IFCVECTOR' IN TYPEOF(Arg1) THEN
		/// Mag1 := Arg1\IfcVector.Magnitude;
		/// Vec1 := Arg1\IfcVector.Orientation;
		/// ELSE
		/// Mag1 := 1.0;
		/// Vec1 := Arg1;
		/// END_IF;
		/// IF 'IFC2X3.IFCVECTOR' IN TYPEOF(Arg2) THEN
		/// Mag2 := Arg2\IfcVector.Magnitude;
		/// Vec2 := Arg2\IfcVector.Orientation;
		/// ELSE
		/// Mag2 := 1.0;
		/// Vec2 := Arg2;
		/// END_IF;
		/// Vec1 := IfcNormalise (Vec1);
		/// Vec2 := IfcNormalise (Vec2);
		/// Ndim := SIZEOF(Vec1.DirectionRatios);
		/// Mag  := 0.0;
		/// Res  := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0:Ndim]);
		/// 
		/// REPEAT i := 1 TO Ndim;
		/// Res.DirectionRatios[i] := Mag1*Vec1.DirectionRatios[i] - Mag2*Vec2.DirectionRatios[i];
		/// Mag := Mag + (Res.DirectionRatios[i]*Res.DirectionRatios[i]);
		/// END_REPEAT;
		/// 
		/// IF (Mag > 0.0 ) THEN
		/// Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Res, SQRT(Mag));
		/// ELSE
		/// Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Vec1, 0.0);
		/// END_IF;
		/// END;
		/// END_IF;
		/// RETURN (Result);
		/// END_FUNCTION;
		/// <summary>
		public static IFCVector? IFCVectorDifference(IFCVectorOrDirection Arg1, IFCVectorOrDirection Arg2)
		{
			//MANUAL : IFC2x3.IFCVectorDifference
			IFCVector result = new IFCVector();
			return result;
			//END_MANUAL
		}
		/// <summary>
		/// FUNCTION IfcVectorSum
		/// (Arg1, Arg2 : IfcVectorOrDirection)
		/// : IfcVector;
		/// LOCAL
		/// Result : IfcVector;
		/// Res, Vec1, Vec2 : IfcDirection;
		/// Mag, Mag1, Mag2 : REAL;
		/// Ndim : INTEGER;
		/// END_LOCAL;
		/// 
		/// IF ((NOT EXISTS (Arg1)) OR (NOT EXISTS (Arg2))) OR (Arg1.Dim <> Arg2.Dim) THEN
		/// RETURN (?) ;
		/// ELSE
		/// BEGIN
		/// IF 'IFC2X3.IFCVECTOR' IN TYPEOF(Arg1) THEN
		/// Mag1 := Arg1\IfcVector.Magnitude;
		/// Vec1 := Arg1\IfcVector.Orientation;
		/// ELSE
		/// Mag1 := 1.0;
		/// Vec1 := Arg1;
		/// END_IF;
		/// IF 'IFC2X3.IFCVECTOR' IN TYPEOF(Arg2) THEN
		/// Mag2 := Arg2\IfcVector.Magnitude;
		/// Vec2 := Arg2\IfcVector.Orientation;
		/// ELSE
		/// Mag2 := 1.0;
		/// Vec2 := Arg2;
		/// END_IF;
		/// Vec1 := IfcNormalise (Vec1);
		/// Vec2 := IfcNormalise (Vec2);
		/// Ndim := SIZEOF(Vec1.DirectionRatios);
		/// Mag  := 0.0;
		/// Res  := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0:Ndim]);
		/// 
		/// REPEAT i := 1 TO Ndim;
		/// Res.DirectionRatios[i] := Mag1*Vec1.DirectionRatios[i] + Mag2*Vec2.DirectionRatios[i];
		/// Mag := Mag + (Res.DirectionRatios[i]*Res.DirectionRatios[i]);
		/// END_REPEAT;
		/// 
		/// IF (Mag > 0.0 ) THEN
		/// Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Res, SQRT(Mag));
		/// ELSE
		/// Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Vec1, 0.0);
		/// END_IF;
		/// END;
		/// END_IF;
		/// RETURN (Result);
		/// END_FUNCTION;
		/// <summary>
		public static IFCVector? IFCVectorSum(IFCVectorOrDirection Arg1, IFCVectorOrDirection Arg2)
		{
			//MANUAL : IFC2x3.IFCVectorSum
			IFCVector result = new IFCVector();
			return result;
			//END_MANUAL
		}
	}
	#endregion
}
